/* Type definitions for non-npm package Cloud Storage JSON API v1 0.0 */
// Project: https://developers.google.com/storage/docs/json_api/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://storage.googleapis.com/$discovery/rest?version=v1
// Revision: 20250710

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Storage JSON API v1 */
  function load(
    urlOrObject: 'https://storage.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'storage', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'storage', version: 'v1', callback: () => any): void;

  namespace storage {
    interface AdvanceRelocateBucketOperationRequest {
      /** Specifies the time when the relocation will revert to the sync stage if the relocation hasn't succeeded. */
      expireTime?: string;
      /** Specifies the duration after which the relocation will revert to the sync stage if the relocation hasn't succeeded. Optional, if not supplied, a default value of 12h will be used. */
      ttl?: string;
    }
    interface AnywhereCache {
      /** The cache-level entry admission policy. */
      admissionPolicy?: string;
      /** The ID of the Anywhere cache instance. */
      anywhereCacheId?: string;
      /** The name of the bucket containing this cache instance. */
      bucket?: string;
      /** The creation time of the cache instance in RFC 3339 format. */
      createTime?: string;
      /** The ID of the resource, including the project number, bucket name and anywhere cache ID. */
      id?: string;
      /** The kind of item this is. For Anywhere Cache, this is always storage#anywhereCache. */
      kind?: string;
      /** True if the cache instance has an active Update long-running operation. */
      pendingUpdate?: boolean;
      /** The link to this cache instance. */
      selfLink?: string;
      /** The current state of the cache instance. */
      state?: string;
      /** The TTL of all cache entries in whole seconds. e.g., "7200s". */
      ttl?: string;
      /** The modification time of the cache instance metadata in RFC 3339 format. */
      updateTime?: string;
      /** The zone in which the cache instance is running. For example, us-central1-a. */
      zone?: string;
    }
    interface AnywhereCaches {
      /** The list of items. */
      items?: AnywhereCache[];
      /** The kind of item this is. For lists of Anywhere Caches, this is always storage#anywhereCaches. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
    }
    interface Bucket {
      /** Access controls on the bucket. */
      acl?: BucketAccessControl[];
      /** The bucket's Autoclass configuration. */
      autoclass?: {
        /** Whether or not Autoclass is enabled on this bucket */
        enabled?: boolean;
        /** The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE. */
        terminalStorageClass?: string;
        /** A date and time in RFC 3339 format representing the time of the most recent update to "terminalStorageClass". */
        terminalStorageClassUpdateTime?: string;
        /** A date and time in RFC 3339 format representing the instant at which "enabled" was last toggled. */
        toggleTime?: string;
      };
      /** The bucket's billing configuration. */
      billing?: {
        /** When set to true, Requester Pays is enabled for this bucket. */
        requesterPays?: boolean;
      };
      /** The bucket's Cross-Origin Resource Sharing (CORS) configuration. */
      cors?: Array<{
        /** The value, in seconds, to return in the  Access-Control-Max-Age header used in preflight responses. */
        maxAgeSeconds?: number;
        /** The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method". */
        method?: string[];
        /** The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin". */
        origin?: string[];
        /** The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains. */
        responseHeader?: string[];
      }>;
      /** The bucket's custom placement configuration for Custom Dual Regions. */
      customPlacementConfig?: {
        /** The list of regional locations in which data is placed. */
        dataLocations?: string[];
      };
      /** The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed. */
      defaultEventBasedHold?: boolean;
      /** Default access controls to apply to new objects when no ACL is provided. */
      defaultObjectAcl?: ObjectAccessControl[];
      /** Encryption configuration for a bucket. */
      encryption?: {
        /** A Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified. */
        defaultKmsKeyName?: string;
      };
      /** HTTP 1.1 Entity tag for the bucket. */
      etag?: string;
      /** The generation of this bucket. */
      generation?: string;
      /** The hard delete time of the bucket in RFC 3339 format. */
      hardDeleteTime?: string;
      /** The bucket's hierarchical namespace configuration. */
      hierarchicalNamespace?: {
        /** When set to true, hierarchical namespace is enabled for this bucket. */
        enabled?: boolean;
      };
      /** The bucket's IAM configuration. */
      iamConfiguration?: {
        /** The bucket's uniform bucket-level access configuration. The feature was formerly known as Bucket Policy Only. For backward compatibility, this field will be populated with identical information as the uniformBucketLevelAccess field. We recommend using the uniformBucketLevelAccess field to enable and disable the feature. */
        bucketPolicyOnly?: {
          /** If set, access is controlled only by bucket-level or above IAM policies. */
          enabled?: boolean;
          /** The deadline for changing iamConfiguration.bucketPolicyOnly.enabled from true to false in RFC 3339 format. iamConfiguration.bucketPolicyOnly.enabled may be changed from true to false until the locked time, after which the field is immutable. */
          lockedTime?: string;
        };
        /** The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported. */
        publicAccessPrevention?: string;
        /** The bucket's uniform bucket-level access configuration. */
        uniformBucketLevelAccess?: {
          /** If set, access is controlled only by bucket-level or above IAM policies. */
          enabled?: boolean;
          /** The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable. */
          lockedTime?: string;
        };
      };
      /** The ID of the bucket. For buckets, the id and name properties are the same. */
      id?: string;
      /** The bucket's IP filter configuration. Specifies the network sources that are allowed to access the operations on the bucket, as well as its underlying objects. Only enforced when the mode is set to 'Enabled'. */
      ipFilter?: {
        /** Whether to allow all service agents to access the bucket regardless of the IP filter configuration. */
        allowAllServiceAgentAccess?: boolean;
        /** Whether to allow cross-org VPCs in the bucket's IP filter configuration. */
        allowCrossOrgVpcs?: boolean;
        /** The mode of the IP filter. Valid values are 'Enabled' and 'Disabled'. */
        mode?: string;
        /** The public network source of the bucket's IP filter. */
        publicNetworkSource?: {
          /** The list of public IPv4, IPv6 cidr ranges that are allowed to access the bucket. */
          allowedIpCidrRanges?: string[];
        };
        /** The list of [VPC network](https://cloud.google.com/vpc/docs/vpc) sources of the bucket's IP filter. */
        vpcNetworkSources?: Array<{
          /** The list of IPv4, IPv6 cidr ranges subnetworks that are allowed to access the bucket. */
          allowedIpCidrRanges?: string[];
          /** Name of the network. Format: projects/{PROJECT_ID}/global/networks/{NETWORK_NAME} */
          network?: string;
        }>;
      };
      /** The kind of item this is. For buckets, this is always storage#bucket. */
      kind?: string;
      /** User-provided labels, in key/value pairs. */
      labels?: {[P in string]: string};
      /** The bucket's lifecycle configuration. See [Lifecycle Management](https://cloud.google.com/storage/docs/lifecycle) for more information. */
      lifecycle?: {
        /** A lifecycle management rule, which is made of an action to take and the condition(s) under which the action will be taken. */
        rule?: Array<{
          /** The action to take. */
          action?: {
            /** Target storage class. Required iff the type of the action is SetStorageClass. */
            storageClass?: string;
            /** Type of the action. Currently, only Delete, SetStorageClass, and AbortIncompleteMultipartUpload are supported. */
            type?: string;
          };
          /** The condition(s) under which the action will be taken. */
          condition?: {
            /** Age of an object (in days). This condition is satisfied when an object reaches the specified age. */
            age?: number;
            /** A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC. */
            createdBefore?: string;
            /** A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC. */
            customTimeBefore?: string;
            /** Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply. */
            daysSinceCustomTime?: number;
            /** Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent. */
            daysSinceNoncurrentTime?: number;
            /** Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects. */
            isLive?: boolean;
            /** A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released. */
            matchesPattern?: string;
            /** List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name. */
            matchesPrefix?: string[];
            /** Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY. */
            matchesStorageClass?: string[];
            /** List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name. */
            matchesSuffix?: string[];
            /** A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects. */
            noncurrentTimeBefore?: string;
            /** Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object. */
            numNewerVersions?: number;
          };
        }>;
      };
      /** The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the [Developer's Guide](https://cloud.google.com/storage/docs/locations) for the authoritative list. */
      location?: string;
      /** The type of the bucket location. */
      locationType?: string;
      /** The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs. */
      logging?: {
        /** The destination bucket where the current bucket's logs should be placed. */
        logBucket?: string;
        /** A prefix for log object names. */
        logObjectPrefix?: string;
      };
      /** The metadata generation of this bucket. */
      metageneration?: string;
      /** The name of the bucket. */
      name?: string;
      /** The bucket's object retention config. */
      objectRetention?: {
        /** The bucket's object retention mode. Can be Enabled. */
        mode?: string;
      };
      /** The owner of the bucket. This is always the project team's owner group. */
      owner?: {
        /** The entity, in the form project-owner-projectId. */
        entity?: string;
        /** The ID for the entity. */
        entityId?: string;
      };
      /** The project number of the project the bucket belongs to. */
      projectNumber?: string;
      /** The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error. */
      retentionPolicy?: {
        /** Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format. */
        effectiveTime?: string;
        /** Once locked, an object retention policy cannot be modified. */
        isLocked?: boolean;
        /** The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes. */
        retentionPeriod?: string;
      };
      /** The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket. */
      rpo?: string;
      /** Reserved for future use. */
      satisfiesPZI?: boolean;
      /** Reserved for future use. */
      satisfiesPZS?: boolean;
      /** The URI of this bucket. */
      selfLink?: string;
      /** The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted. */
      softDeletePolicy?: {
        /** Server-determined value that indicates the time from which the policy, or one with a greater retention, was effective. This value is in RFC 3339 format. */
        effectiveTime?: string;
        /** The duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted. */
        retentionDurationSeconds?: string;
      };
      /** The soft delete time of the bucket in RFC 3339 format. */
      softDeleteTime?: string;
      /** The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see [Storage Classes](https://cloud.google.com/storage/docs/storage-classes). */
      storageClass?: string;
      /** The creation time of the bucket in RFC 3339 format. */
      timeCreated?: string;
      /** The modification time of the bucket in RFC 3339 format. */
      updated?: string;
      /** The bucket's versioning configuration. */
      versioning?: {
        /** While set to true, versioning is fully enabled for this bucket. */
        enabled?: boolean;
      };
      /** The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the [Static Website Examples](https://cloud.google.com/storage/docs/static-website) for more information. */
      website?: {
        /** If the requested object path is missing, the service will ensure the path has a trailing '/', append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages. */
        mainPageSuffix?: string;
        /** If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result. */
        notFoundPage?: string;
      };
    }
    interface BucketAccessControl {
      /** The name of the bucket. */
      bucket?: string;
      /** The domain associated with the entity, if any. */
      domain?: string;
      /** The email address associated with the entity, if any. */
      email?: string;
      /**
       * The entity holding the permission, in one of the following forms:
       * - user-userId
       * - user-email
       * - group-groupId
       * - group-email
       * - domain-domain
       * - project-team-projectId
       * - allUsers
       * - allAuthenticatedUsers Examples:
       * - The user liz@example.com would be user-liz@example.com.
       * - The group example@googlegroups.com would be group-example@googlegroups.com.
       * - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
       */
      entity?: string;
      /** The ID for the entity, if any. */
      entityId?: string;
      /** HTTP 1.1 Entity tag for the access-control entry. */
      etag?: string;
      /** The ID of the access-control entry. */
      id?: string;
      /** The kind of item this is. For bucket access control entries, this is always storage#bucketAccessControl. */
      kind?: string;
      /** The project team associated with the entity, if any. */
      projectTeam?: {
        /** The project number. */
        projectNumber?: string;
        /** The team. */
        team?: string;
      };
      /** The access permission for the entity. */
      role?: string;
      /** The link to this access-control entry. */
      selfLink?: string;
    }
    interface BucketAccessControls {
      /** The list of items. */
      items?: BucketAccessControl[];
      /** The kind of item this is. For lists of bucket access control entries, this is always storage#bucketAccessControls. */
      kind?: string;
    }
    interface Buckets {
      /** The list of items. */
      items?: Bucket[];
      /** The kind of item this is. For lists of buckets, this is always storage#buckets. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
    }
    interface BucketStorageLayout {
      /** The name of the bucket. */
      bucket?: string;
      /** The bucket's custom placement configuration for Custom Dual Regions. */
      customPlacementConfig?: {
        /** The list of regional locations in which data is placed. */
        dataLocations?: string[];
      };
      /** The bucket's hierarchical namespace configuration. */
      hierarchicalNamespace?: {
        /** When set to true, hierarchical namespace is enabled for this bucket. */
        enabled?: boolean;
      };
      /** The kind of item this is. For storage layout, this is always storage#storageLayout. */
      kind?: string;
      /** The location of the bucket. */
      location?: string;
      /** The type of the bucket location. */
      locationType?: string;
    }
    interface BulkRestoreObjectsRequest {
      /** If false (default), the restore will not overwrite live objects with the same name at the destination. This means some deleted objects may be skipped. If true, live objects will be overwritten resulting in a noncurrent object (if versioning is enabled). If versioning is not enabled, overwriting the object will result in a soft-deleted object. In either case, if a noncurrent object already exists with the same name, a live version can be written without issue. */
      allowOverwrite?: boolean;
      /** If true, copies the source object's ACL; otherwise, uses the bucket's default object ACL. The default is false. */
      copySourceAcl?: boolean;
      /** Restores only the objects matching any of the specified glob(s). If this parameter is not specified, all objects will be restored within the specified time range. */
      matchGlobs?: string[];
      /** Restores only the objects that were soft-deleted after this time. */
      softDeletedAfterTime?: string;
      /** Restores only the objects that were soft-deleted before this time. */
      softDeletedBeforeTime?: string;
    }
    interface Channel {
      /** The address where notifications are delivered for this channel. */
      address?: string;
      /** Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional. */
      expiration?: string;
      /** A UUID or similar unique string that identifies this channel. */
      id?: string;
      /** Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel". */
      kind?: string;
      /** Additional parameters controlling delivery channel behavior. Optional. */
      params?: {[P in string]: string};
      /** A Boolean value to indicate whether payload is wanted. Optional. */
      payload?: boolean;
      /** An opaque ID that identifies the resource being watched on this channel. Stable across different API versions. */
      resourceId?: string;
      /** A version-specific identifier for the watched resource. */
      resourceUri?: string;
      /** An arbitrary string delivered to the target address with each notification delivered over this channel. Optional. */
      token?: string;
      /** The type of delivery mechanism used for this channel. */
      type?: string;
    }
    interface ComposeRequest {
      /** Properties of the resulting object. */
      destination?: // eslint-disable-next-line @typescript-eslint/ban-types
      Object;
      /** The kind of item this is. */
      kind?: string;
      /** The list of source objects that will be concatenated into a single object. */
      sourceObjects?: Array<{
        /** The generation of this object to use as the source. */
        generation?: string;
        /** The source object's name. All source objects must reside in the same bucket. */
        name?: string;
        /** Conditions that must be met for this operation to execute. */
        objectPreconditions?: {
          /** Only perform the composition if the generation of the source object that would be used matches this value. If this value and a generation are both specified, they must be the same value or the call will fail. */
          ifGenerationMatch?: string;
        };
      }>;
    }
    interface Expr {
      /** An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
      description?: string;
      /** Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported. */
      expression?: string;
      /** An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
      location?: string;
      /** An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
      title?: string;
    }
    interface Folder {
      /** The name of the bucket containing this folder. */
      bucket?: string;
      /** The creation time of the folder in RFC 3339 format. */
      createTime?: string;
      /** The ID of the folder, including the bucket name, folder name. */
      id?: string;
      /** The kind of item this is. For folders, this is always storage#folder. */
      kind?: string;
      /** The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata. */
      metageneration?: string;
      /** The name of the folder. Required if not specified by URL parameter. */
      name?: string;
      /** Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status. */
      pendingRenameInfo?: {
        /** The ID of the rename folder operation. */
        operationId?: string;
      };
      /** The link to this folder. */
      selfLink?: string;
      /** The modification time of the folder metadata in RFC 3339 format. */
      updateTime?: string;
    }
    interface Folders {
      /** The list of items. */
      items?: Folder[];
      /** The kind of item this is. For lists of folders, this is always storage#folders. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
    }
    interface GoogleLongrunningListOperationsResponse {
      /** The kind of item this is. For lists of operations, this is always storage#operations. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
      /** A list of operations that matches the specified filter in the request. */
      operations?: GoogleLongrunningOperation[];
    }
    interface GoogleLongrunningOperation {
      /** If the value is "false", it means the operation is still in progress. If "true", the operation is completed, and either "error" or "response" is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: GoogleRpcStatus;
      /** The kind of item this is. For operations, this is always storage#operation. */
      kind?: string;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the "name" should be a resource name ending with "operations/{operationId}". */
      name?: string;
      /** The normal response of the operation in case of success. If the original method returns no data on success, such as "Delete", the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type "XxxResponse", where "Xxx" is the original method name. For example, if the original method name is "TakeSnapshot()", the inferred response type is "TakeSnapshotResponse". */
      response?: {[P in string]: any};
      /** The link to this long running operation. */
      selfLink?: string;
    }
    interface GoogleRpcStatus {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. */
      message?: string;
    }
    interface HmacKey {
      /** The kind of item this is. For HMAC keys, this is always storage#hmacKey. */
      kind?: string;
      /** Key metadata. */
      metadata?: HmacKeyMetadata;
      /** HMAC secret key material. */
      secret?: string;
    }
    interface HmacKeyMetadata {
      /** The ID of the HMAC Key. */
      accessId?: string;
      /** HTTP 1.1 Entity tag for the HMAC key. */
      etag?: string;
      /** The ID of the HMAC key, including the Project ID and the Access ID. */
      id?: string;
      /** The kind of item this is. For HMAC Key metadata, this is always storage#hmacKeyMetadata. */
      kind?: string;
      /** Project ID owning the service account to which the key authenticates. */
      projectId?: string;
      /** The link to this resource. */
      selfLink?: string;
      /** The email address of the key's associated service account. */
      serviceAccountEmail?: string;
      /** The state of the key. Can be one of ACTIVE, INACTIVE, or DELETED. */
      state?: string;
      /** The creation time of the HMAC key in RFC 3339 format. */
      timeCreated?: string;
      /** The last modification time of the HMAC key metadata in RFC 3339 format. */
      updated?: string;
    }
    interface HmacKeysMetadata {
      /** The list of items. */
      items?: HmacKeyMetadata[];
      /** The kind of item this is. For lists of hmacKeys, this is always storage#hmacKeysMetadata. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
    }
    interface ManagedFolder {
      /** The name of the bucket containing this managed folder. */
      bucket?: string;
      /** The creation time of the managed folder in RFC 3339 format. */
      createTime?: string;
      /** The ID of the managed folder, including the bucket name and managed folder name. */
      id?: string;
      /** The kind of item this is. For managed folders, this is always storage#managedFolder. */
      kind?: string;
      /** The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata. */
      metageneration?: string;
      /** The name of the managed folder. Required if not specified by URL parameter. */
      name?: string;
      /** The link to this managed folder. */
      selfLink?: string;
      /** The last update time of the managed folder metadata in RFC 3339 format. */
      updateTime?: string;
    }
    interface ManagedFolders {
      /** The list of items. */
      items?: ManagedFolder[];
      /** The kind of item this is. For lists of managed folders, this is always storage#managedFolders. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
    }
    interface Notification {
      /** An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription. */
      custom_attributes?: {[P in string]: string};
      /** HTTP 1.1 Entity tag for this subscription notification. */
      etag?: string;
      /** If present, only send notifications about listed event types. If empty, sent notifications for all event types. */
      event_types?: string[];
      /** The ID of the notification. */
      id?: string;
      /** The kind of item this is. For notifications, this is always storage#notification. */
      kind?: string;
      /** If present, only apply this notification configuration to object names that begin with this prefix. */
      object_name_prefix?: string;
      /** The desired content of the Payload. */
      payload_format?: string;
      /** The canonical URL of this notification. */
      selfLink?: string;
      /** The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}' */
      topic?: string;
    }
    interface Notifications {
      /** The list of items. */
      items?: Notification[];
      /** The kind of item this is. For lists of notifications, this is always storage#notifications. */
      kind?: string;
    }
    interface Object {
      /** Access controls on the object. */
      acl?: ObjectAccessControl[];
      /** The name of the bucket containing this object. */
      bucket?: string;
      /** Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600. */
      cacheControl?: string;
      /** Number of underlying components that make up this object. Components are accumulated by compose operations. */
      componentCount?: number;
      /** Content-Disposition of the object data. */
      contentDisposition?: string;
      /** Content-Encoding of the object data. */
      contentEncoding?: string;
      /** Content-Language of the object data. */
      contentLanguage?: string;
      /** Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream. */
      contentType?: string;
      /** User-defined or system-defined object contexts. Each object context is a key-payload pair, where the key provides the identification and the payload holds the associated value and additional metadata. */
      contexts?: {
        /** User-defined object contexts. */
        custom?: {[P in string]: ObjectCustomContextPayload};
      };
      /** CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see [Data Validation and Change Detection](https://cloud.google.com/storage/docs/data-validation). */
      crc32c?: string;
      /** Metadata of customer-supplied encryption key, if the object is encrypted by such a key. */
      customerEncryption?: {
        /** The encryption algorithm. */
        encryptionAlgorithm?: string;
        /** SHA256 hash value of the encryption key. */
        keySha256?: string;
      };
      /** A timestamp in RFC 3339 format specified by the user for an object. */
      customTime?: string;
      /** HTTP 1.1 Entity tag for the object. */
      etag?: string;
      /** Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. */
      eventBasedHold?: boolean;
      /** The content generation of this object. Used for object versioning. */
      generation?: string;
      /** This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket. */
      hardDeleteTime?: string;
      /** The ID of the object, including the bucket name, object name, and generation number. */
      id?: string;
      /** The kind of item this is. For objects, this is always storage#object. */
      kind?: string;
      /** Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request. */
      kmsKeyName?: string;
      /** MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see [Data Validation and Change Detection](https://cloud.google.com/storage/docs/data-validation). */
      md5Hash?: string;
      /** Media download link. */
      mediaLink?: string;
      /** User-provided metadata, in key/value pairs. */
      metadata?: {[P in string]: string};
      /** The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object. */
      metageneration?: string;
      /** The name of the object. Required if not specified by URL parameter. */
      name?: string;
      /** The owner of the object. This will always be the uploader of the object. */
      owner?: {
        /** The entity, in the form user-userId. */
        entity?: string;
        /** The ID for the entity. */
        entityId?: string;
      };
      /** Restore token used to differentiate deleted objects with the same name and generation. This field is only returned for deleted objects in hierarchical namespace buckets. */
      restoreToken?: string;
      /** A collection of object level retention parameters. */
      retention?: {
        /** The bucket's object retention mode, can only be Unlocked or Locked. */
        mode?: string;
        /** A time in RFC 3339 format until which object retention protects this object. */
        retainUntilTime?: string;
      };
      /** A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold). */
      retentionExpirationTime?: string;
      /** The link to this object. */
      selfLink?: string;
      /** Content-Length of the data in bytes. */
      size?: string;
      /** The time at which the object became soft-deleted in RFC 3339 format. */
      softDeleteTime?: string;
      /** Storage class of the object. */
      storageClass?: string;
      /** Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object. */
      temporaryHold?: boolean;
      /** The creation time of the object in RFC 3339 format. */
      timeCreated?: string;
      /** The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted. */
      timeDeleted?: string;
      /** The time when the object was finalized. */
      timeFinalized?: string;
      /** The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated. */
      timeStorageClassUpdated?: string;
      /** The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration. */
      updated?: string;
    }
    interface ObjectAccessControl {
      /** The name of the bucket. */
      bucket?: string;
      /** The domain associated with the entity, if any. */
      domain?: string;
      /** The email address associated with the entity, if any. */
      email?: string;
      /**
       * The entity holding the permission, in one of the following forms:
       * - user-userId
       * - user-email
       * - group-groupId
       * - group-email
       * - domain-domain
       * - project-team-projectId
       * - allUsers
       * - allAuthenticatedUsers Examples:
       * - The user liz@example.com would be user-liz@example.com.
       * - The group example@googlegroups.com would be group-example@googlegroups.com.
       * - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
       */
      entity?: string;
      /** The ID for the entity, if any. */
      entityId?: string;
      /** HTTP 1.1 Entity tag for the access-control entry. */
      etag?: string;
      /** The content generation of the object, if applied to an object. */
      generation?: string;
      /** The ID of the access-control entry. */
      id?: string;
      /** The kind of item this is. For object access control entries, this is always storage#objectAccessControl. */
      kind?: string;
      /** The name of the object, if applied to an object. */
      object?: string;
      /** The project team associated with the entity, if any. */
      projectTeam?: {
        /** The project number. */
        projectNumber?: string;
        /** The team. */
        team?: string;
      };
      /** The access permission for the entity. */
      role?: string;
      /** The link to this access-control entry. */
      selfLink?: string;
    }
    interface ObjectAccessControls {
      /** The list of items. */
      items?: ObjectAccessControl[];
      /** The kind of item this is. For lists of object access control entries, this is always storage#objectAccessControls. */
      kind?: string;
    }
    interface ObjectCustomContextPayload {
      /** The time at which the object context was created in RFC 3339 format. */
      createTime?: string;
      /** The time at which the object context was last updated in RFC 3339 format. */
      updateTime?: string;
      /** The value of the object context. */
      value?: string;
    }
    interface Objects {
      /** The list of items. */
      items?: // eslint-disable-next-line @typescript-eslint/ban-types
      Object[];
      /** The kind of item this is. For lists of objects, this is always storage#objects. */
      kind?: string;
      /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
      nextPageToken?: string;
      /** The list of prefixes of objects matching-but-not-listed up to and including the requested delimiter. */
      prefixes?: string[];
    }
    interface Policy {
      /** An association between a role, which comes with a set of permissions, and members who may assume that role. */
      bindings?: Array<{
        /** The condition that is associated with this binding. NOTE: an unsatisfied condition will not allow user access via current binding. Different bindings, including their conditions, are examined independently. */
        condition?: Expr;
        /**
         * A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:
         * - allUsers - A special identifier that represents anyone on the internet; with or without a Google account.
         * - allAuthenticatedUsers - A special identifier that represents anyone who is authenticated with a Google account or a service account.
         * - user:emailid - An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.
         * - serviceAccount:emailid - An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .
         * - group:emailid - An email address that represents a Google group. For example, group:admins@example.com.
         * - domain:domain - A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.
         * - projectOwner:projectid - Owners of the given project. For example, projectOwner:my-example-project
         * - projectEditor:projectid - Editors of the given project. For example, projectEditor:my-example-project
         * - projectViewer:projectid - Viewers of the given project. For example, projectViewer:my-example-project
         */
        members?: string[];
        /**
         * The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
         * The new IAM roles are:
         * - roles/storage.admin - Full control of Google Cloud Storage resources.
         * - roles/storage.objectViewer - Read-Only access to Google Cloud Storage objects.
         * - roles/storage.objectCreator - Access to create objects in Google Cloud Storage.
         * - roles/storage.objectAdmin - Full control of Google Cloud Storage objects.   The legacy IAM roles are:
         * - roles/storage.legacyObjectReader - Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.
         * - roles/storage.legacyObjectOwner - Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.
         * - roles/storage.legacyBucketReader - Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.
         * - roles/storage.legacyBucketWriter - Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.
         * - roles/storage.legacyBucketOwner - Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
         */
        role?: string;
      }>;
      /** HTTP 1.1  Entity tag for the policy. */
      etag?: string;
      /** The kind of item this is. For policies, this is always storage#policy. This field is ignored on input. */
      kind?: string;
      /** The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, projects/_/buckets/bucket/objects/object for objects, and projects/_/buckets/bucket/managedFolders/managedFolder. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input. */
      resourceId?: string;
      /** The IAM policy format version. */
      version?: number;
    }
    interface RelocateBucketRequest {
      /** The bucket's new custom placement configuration if relocating to a Custom Dual Region. */
      destinationCustomPlacementConfig?: {
        /** The list of regional locations in which data is placed. */
        dataLocations?: string[];
      };
      /** The new location the bucket will be relocated to. */
      destinationLocation?: string;
      /** If true, validate the operation, but do not actually relocate the bucket. */
      validateOnly?: boolean;
    }
    interface RewriteResponse {
      /** true if the copy is finished; otherwise, false if the copy is in progress. This property is always present in the response. */
      done?: boolean;
      /** The kind of item this is. */
      kind?: string;
      /** The total size of the object being copied in bytes. This property is always present in the response. */
      objectSize?: string;
      /** A resource containing the metadata for the copied-to object. This property is present in the response only when copying completes. */
      resource?: // eslint-disable-next-line @typescript-eslint/ban-types
      Object;
      /** A token to use in subsequent requests to continue copying data. This token is present in the response only when there is more data to copy. */
      rewriteToken?: string;
      /** The total bytes written so far, which can be used to provide a waiting user with a progress indicator. This property is always present in the response. */
      totalBytesRewritten?: string;
    }
    interface ServiceAccount {
      /** The ID of the notification. */
      email_address?: string;
      /** The kind of item this is. For notifications, this is always storage#notification. */
      kind?: string;
    }
    interface TestIamPermissionsResponse {
      /** The kind of item this is. */
      kind?: string;
      /**
       * The permissions held by the caller. Permissions are always of the format storage.resource.capability, where resource is one of buckets, objects, or managedFolders. The supported permissions are as follows:
       * - storage.buckets.delete - Delete bucket.
       * - storage.buckets.get - Read bucket metadata.
       * - storage.buckets.getIamPolicy - Read bucket IAM policy.
       * - storage.buckets.create - Create bucket.
       * - storage.buckets.list - List buckets.
       * - storage.buckets.setIamPolicy - Update bucket IAM policy.
       * - storage.buckets.update - Update bucket metadata.
       * - storage.objects.delete - Delete object.
       * - storage.objects.get - Read object data and metadata.
       * - storage.objects.getIamPolicy - Read object IAM policy.
       * - storage.objects.create - Create object.
       * - storage.objects.list - List objects.
       * - storage.objects.setIamPolicy - Update object IAM policy.
       * - storage.objects.update - Update object metadata.
       * - storage.managedFolders.delete - Delete managed folder.
       * - storage.managedFolders.get - Read managed folder metadata.
       * - storage.managedFolders.getIamPolicy - Read managed folder IAM policy.
       * - storage.managedFolders.create - Create managed folder.
       * - storage.managedFolders.list - List managed folders.
       * - storage.managedFolders.setIamPolicy - Update managed folder IAM policy.
       */
      permissions?: string[];
    }
    interface AnywhereCachesResource {
      /** Disables an Anywhere Cache instance. */
      disable(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The ID of requested Anywhere Cache instance. */
        anywhereCacheId: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<AnywhereCache>;
      /** Returns the metadata of an Anywhere Cache instance. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The ID of requested Anywhere Cache instance. */
        anywhereCacheId: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<AnywhereCache>;
      /** Creates an Anywhere Cache instance. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: AnywhereCache;
      }): Request<GoogleLongrunningOperation>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the parent bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: AnywhereCache,
      ): Request<GoogleLongrunningOperation>;
      /** Returns a list of Anywhere Cache instances of the bucket matching the criteria. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of items to return in a single page of responses. Maximum 1000. */
        pageSize?: number;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<AnywhereCaches>;
      /** Pauses an Anywhere Cache instance. */
      pause(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The ID of requested Anywhere Cache instance. */
        anywhereCacheId: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<AnywhereCache>;
      /** Resumes a paused or disabled Anywhere Cache instance. */
      resume(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The ID of requested Anywhere Cache instance. */
        anywhereCacheId: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<AnywhereCache>;
      /** Updates the config(ttl and admissionPolicy) of an Anywhere Cache instance. */
      update(request: {
        /** Data format for the response. */
        alt?: string;
        /** The ID of requested Anywhere Cache instance. */
        anywhereCacheId: string;
        /** Name of the parent bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: AnywhereCache;
      }): Request<GoogleLongrunningOperation>;
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** The ID of requested Anywhere Cache instance. */
          anywhereCacheId: string;
          /** Name of the parent bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: AnywhereCache,
      ): Request<GoogleLongrunningOperation>;
    }
    interface BucketAccessControlsResource {
      /** Permanently deletes the ACL entry for the specified entity on the specified bucket. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<void>;
      /** Returns the ACL entry for the specified entity on the specified bucket. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<BucketAccessControl>;
      /** Creates a new ACL entry on the specified bucket. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: BucketAccessControl;
      }): Request<BucketAccessControl>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: BucketAccessControl,
      ): Request<BucketAccessControl>;
      /** Retrieves ACL entries on the specified bucket. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<BucketAccessControls>;
      /** Patches an ACL entry on the specified bucket. */
      patch(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: BucketAccessControl;
      }): Request<BucketAccessControl>;
      patch(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
          entity: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: BucketAccessControl,
      ): Request<BucketAccessControl>;
      /** Updates an ACL entry on the specified bucket. */
      update(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: BucketAccessControl;
      }): Request<BucketAccessControl>;
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
          entity: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: BucketAccessControl,
      ): Request<BucketAccessControl>;
    }
    interface BucketsResource {
      /** Deletes an empty bucket. Deletions are permanent unless soft delete is enabled on the bucket. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If set, only deletes the bucket if its metageneration matches this value. */
        ifMetagenerationMatch?: string;
        /** If set, only deletes the bucket if its metageneration does not match this value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<void>;
      /** Returns metadata for the specified bucket. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, specifies the generation of the bucket. This is required if softDeleted is true. */
        generation?: string;
        /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to noAcl. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** If true, return the soft-deleted version of this bucket. The default is false. For more information, see [Soft Delete](https://cloud.google.com/storage/docs/soft-delete). */
        softDeleted?: boolean;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Bucket>;
      /** Returns an IAM policy for the specified bucket. */
      getIamPolicy(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails. */
        optionsRequestedPolicyVersion?: number;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Policy>;
      /** Returns the storage layout configuration for the specified bucket. Note that this operation requires storage.objects.list permission. */
      getStorageLayout(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** An optional prefix used for permission check. It is useful when the caller only has storage.objects.list permission under a specific prefix. */
        prefix?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<BucketStorageLayout>;
      /** Creates a new bucket. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** When set to true, object retention is enabled for this bucket. */
        enableObjectRetention?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Apply a predefined set of access controls to this bucket. */
        predefinedAcl?: string;
        /** Apply a predefined set of default object access controls to this bucket. */
        predefinedDefaultObjectAcl?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** A valid API project identifier. */
        project: string;
        /** Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
        /** Request body */
        resource: Bucket;
      }): Request<Bucket>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** When set to true, object retention is enabled for this bucket. */
          enableObjectRetention?: boolean;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Apply a predefined set of access controls to this bucket. */
          predefinedAcl?: string;
          /** Apply a predefined set of default object access controls to this bucket. */
          predefinedDefaultObjectAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** A valid API project identifier. */
          project: string;
          /** Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. */
          userProject?: string;
        },
        body: Bucket,
      ): Request<Bucket>;
      /** Retrieves a list of buckets for a given project. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller. */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Filter results to buckets whose names begin with this prefix. */
        prefix?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** A valid API project identifier. */
        project: string;
        /** Set of properties to return. Defaults to noAcl. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** If true, only soft-deleted bucket versions will be returned. The default is false. For more information, see [Soft Delete](https://cloud.google.com/storage/docs/soft-delete). */
        softDeleted?: boolean;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
      }): Request<Buckets>;
      /** Locks retention policy on a bucket. */
      lockRetentionPolicy(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Makes the operation conditional on whether bucket's current metageneration matches the given value. */
        ifMetagenerationMatch: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Bucket>;
      /** Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate. */
      patch(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Apply a predefined set of access controls to this bucket. */
        predefinedAcl?: string;
        /** Apply a predefined set of default object access controls to this bucket. */
        predefinedDefaultObjectAcl?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to full. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: Bucket;
      }): Request<Bucket>;
      patch(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Apply a predefined set of access controls to this bucket. */
          predefinedAcl?: string;
          /** Apply a predefined set of default object access controls to this bucket. */
          predefinedDefaultObjectAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: Bucket,
      ): Request<Bucket>;
      /** Initiates a long-running Relocate Bucket operation on the specified bucket. */
      relocate(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket to be moved. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: RelocateBucketRequest;
      }): Request<GoogleLongrunningOperation>;
      relocate(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket to be moved. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: RelocateBucketRequest,
      ): Request<GoogleLongrunningOperation>;
      /** Restores a soft-deleted bucket. */
      restore(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Generation of a bucket. */
        generation: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to full. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Bucket>;
      /** Updates an IAM policy for the specified bucket. */
      setIamPolicy(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: Policy;
      }): Request<Policy>;
      setIamPolicy(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: Policy,
      ): Request<Policy>;
      /** Tests a set of permissions on the given bucket to see which, if any, are held by the caller. */
      testIamPermissions(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Permissions to test. */
        permissions: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<TestIamPermissionsResponse>;
      /** Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate. */
      update(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Apply a predefined set of access controls to this bucket. */
        predefinedAcl?: string;
        /** Apply a predefined set of default object access controls to this bucket. */
        predefinedDefaultObjectAcl?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to full. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: Bucket;
      }): Request<Bucket>;
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Apply a predefined set of access controls to this bucket. */
          predefinedAcl?: string;
          /** Apply a predefined set of default object access controls to this bucket. */
          predefinedDefaultObjectAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: Bucket,
      ): Request<Bucket>;
    }
    interface ChannelsResource {
      /** Stop watching resources through this channel */
      stop(request: {
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: Channel;
      }): Request<void>;
      stop(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: Channel,
      ): Request<void>;
    }
    interface DefaultObjectAccessControlsResource {
      /** Permanently deletes the default object ACL entry for the specified entity on the specified bucket. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<void>;
      /** Returns the default object ACL entry for the specified entity on the specified bucket. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<ObjectAccessControl>;
      /** Creates a new default object ACL entry on the specified bucket. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: ObjectAccessControl;
      }): Request<ObjectAccessControl>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ObjectAccessControl,
      ): Request<ObjectAccessControl>;
      /** Retrieves default object ACL entries on the specified bucket. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, only return default ACL listing if the bucket's current metageneration matches this value. */
        ifMetagenerationMatch?: string;
        /** If present, only return default ACL listing if the bucket's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<ObjectAccessControls>;
      /** Patches a default object ACL entry on the specified bucket. */
      patch(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: ObjectAccessControl;
      }): Request<ObjectAccessControl>;
      patch(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
          entity: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ObjectAccessControl,
      ): Request<ObjectAccessControl>;
      /** Updates a default object ACL entry on the specified bucket. */
      update(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: ObjectAccessControl;
      }): Request<ObjectAccessControl>;
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
          entity: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ObjectAccessControl,
      ): Request<ObjectAccessControl>;
    }
    interface FoldersResource {
      /** Permanently deletes a folder. Only applicable to buckets with hierarchical namespace enabled. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the folder resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Name of a folder. */
        folder: string;
        /** If set, only deletes the folder if its metageneration matches this value. */
        ifMetagenerationMatch?: string;
        /** If set, only deletes the folder if its metageneration does not match this value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<void>;
      /** Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the folder resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Name of a folder. */
        folder: string;
        /** Makes the return of the folder metadata conditional on whether the folder's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the return of the folder metadata conditional on whether the folder's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<Folder>;
      /** Creates a new folder. Only applicable to buckets with hierarchical namespace enabled. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the folder resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** If true, any parent folder which doesn't exist will be created automatically. */
        recursive?: boolean;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: Folder;
      }): Request<Folder>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the folder resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** If true, any parent folder which doesn't exist will be created automatically. */
          recursive?: boolean;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: Folder,
      ): Request<Folder>;
      /** Retrieves a list of folders matching the criteria. Only applicable to buckets with hierarchical namespace enabled. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which to look for folders. */
        bucket: string;
        /** Returns results in a directory-like mode. The only supported value is '/'. If set, items will only contain folders that either exactly match the prefix, or are one level below the prefix. */
        delimiter?: string;
        /** Filter results to folders whose names are lexicographically before endOffset. If startOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). */
        endOffset?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of items to return in a single page of responses. */
        pageSize?: number;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Filter results to folders whose paths begin with this prefix. If set, the value must either be an empty string or end with a '/'. */
        prefix?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Filter results to folders whose names are lexicographically equal to or after startOffset. If endOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). */
        startOffset?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<Folders>;
      /** Renames a source folder to a destination folder. Only applicable to buckets with hierarchical namespace enabled. */
      rename(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the folders are in. */
        bucket: string;
        /** Name of the destination folder. */
        destinationFolder: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Makes the operation conditional on whether the source object's current metageneration matches the given value. */
        ifSourceMetagenerationMatch?: string;
        /** Makes the operation conditional on whether the source object's current metageneration does not match the given value. */
        ifSourceMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Name of the source folder. */
        sourceFolder: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<GoogleLongrunningOperation>;
    }
    interface ManagedFoldersResource {
      /** Permanently deletes a managed folder. */
      delete(request?: {
        /** Allows the deletion of a managed folder even if it is not empty. A managed folder is empty if there are no objects or managed folders that it applies to. Callers must have storage.managedFolders.setIamPolicy permission. */
        allowNonEmpty?: boolean;
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If set, only deletes the managed folder if its metageneration matches this value. */
        ifMetagenerationMatch?: string;
        /** If set, only deletes the managed folder if its metageneration does not match this value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The managed folder name/path. */
        managedFolder: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<void>;
      /** Returns metadata of the specified managed folder. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Makes the return of the managed folder metadata conditional on whether the managed folder's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the return of the managed folder metadata conditional on whether the managed folder's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The managed folder name/path. */
        managedFolder: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<ManagedFolder>;
      /** Returns an IAM policy for the specified managed folder. */
      getIamPolicy(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The managed folder name/path. */
        managedFolder: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails. */
        optionsRequestedPolicyVersion?: number;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Policy>;
      /** Creates a new managed folder. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: ManagedFolder;
      }): Request<ManagedFolder>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket containing the managed folder. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: ManagedFolder,
      ): Request<ManagedFolder>;
      /** Lists managed folders in the given bucket. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of items to return in a single page of responses. */
        pageSize?: number;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** The managed folder name/path prefix to filter the output list of results. */
        prefix?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<ManagedFolders>;
      /** Updates an IAM policy for the specified managed folder. */
      setIamPolicy(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The managed folder name/path. */
        managedFolder: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: Policy;
      }): Request<Policy>;
      setIamPolicy(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket containing the managed folder. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The managed folder name/path. */
          managedFolder: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: Policy,
      ): Request<Policy>;
      /** Tests a set of permissions on the given managed folder to see which, if any, are held by the caller. */
      testIamPermissions(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket containing the managed folder. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The managed folder name/path. */
        managedFolder: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Permissions to test. */
        permissions: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<TestIamPermissionsResponse>;
    }
    interface NotificationsResource {
      /** Permanently deletes a notification subscription. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The parent bucket of the notification. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** ID of the notification to delete. */
        notification: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<void>;
      /** View a notification configuration. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The parent bucket of the notification. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Notification ID */
        notification: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Notification>;
      /** Creates a notification subscription for a given bucket. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** The parent bucket of the notification. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: Notification;
      }): Request<Notification>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** The parent bucket of the notification. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: Notification,
      ): Request<Notification>;
      /** Retrieves a list of notification subscriptions for a given bucket. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a Google Cloud Storage bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Notifications>;
    }
    interface ObjectAccessControlsResource {
      /** Permanently deletes the ACL entry for the specified entity on the specified object. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<void>;
      /** Returns the ACL entry for the specified entity on the specified object. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<ObjectAccessControl>;
      /** Creates a new ACL entry on the specified object. */
      insert(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: ObjectAccessControl;
      }): Request<ObjectAccessControl>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ObjectAccessControl,
      ): Request<ObjectAccessControl>;
      /** Retrieves ACL entries on the specified object. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<ObjectAccessControls>;
      /** Patches an ACL entry on the specified object. */
      patch(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: ObjectAccessControl;
      }): Request<ObjectAccessControl>;
      patch(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
          entity: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ObjectAccessControl,
      ): Request<ObjectAccessControl>;
      /** Updates an ACL entry on the specified object. */
      update(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of a bucket. */
        bucket: string;
        /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
        entity: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: ObjectAccessControl;
      }): Request<ObjectAccessControl>;
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of a bucket. */
          bucket: string;
          /** The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. */
          entity: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ObjectAccessControl,
      ): Request<ObjectAccessControl>;
    }
    interface ObjectsResource {
      /** Initiates a long-running bulk restore operation on the specified bucket. */
      bulkRestore(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the object resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: BulkRestoreObjectsRequest;
      }): Request<GoogleLongrunningOperation>;
      bulkRestore(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: BulkRestoreObjectsRequest,
      ): Request<GoogleLongrunningOperation>;
      /** Concatenates a list of existing objects into a new object in the same bucket. */
      compose(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket containing the source objects. The destination object is stored in this bucket. */
          destinationBucket: string;
          /** Name of the new object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          destinationObject: string;
          /** Apply a predefined set of access controls to the destination object. */
          destinationPredefinedAcl?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          kmsKeyName?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
          /** Request body */
          resource: ComposeRequest;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      compose(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket containing the source objects. The destination object is stored in this bucket. */
          destinationBucket: string;
          /** Name of the new object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          destinationObject: string;
          /** Apply a predefined set of access controls to the destination object. */
          destinationPredefinedAcl?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          kmsKeyName?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: ComposeRequest,
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Copies a source object to a destination object. Optionally overrides metadata. */
      copy(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          destinationBucket: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          destinationKmsKeyName?: string;
          /** Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. */
          destinationObject: string;
          /** Apply a predefined set of access controls to the destination object. */
          destinationPredefinedAcl?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the destination object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation matches the given value. */
          ifSourceGenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation does not match the given value. */
          ifSourceGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration matches the given value. */
          ifSourceMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration does not match the given value. */
          ifSourceMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Name of the bucket in which to find the source object. */
          sourceBucket: string;
          /** If present, selects a specific revision of the source object (as opposed to the latest version, the default). */
          sourceGeneration?: string;
          /** Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          sourceObject: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
          /** Request body */
          resource: // eslint-disable-next-line @typescript-eslint/ban-types
          Object;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      copy(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          destinationBucket: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          destinationKmsKeyName?: string;
          /** Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. */
          destinationObject: string;
          /** Apply a predefined set of access controls to the destination object. */
          destinationPredefinedAcl?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the destination object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation matches the given value. */
          ifSourceGenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation does not match the given value. */
          ifSourceGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration matches the given value. */
          ifSourceMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration does not match the given value. */
          ifSourceMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Name of the bucket in which to find the source object. */
          sourceBucket: string;
          /** If present, selects a specific revision of the source object (as opposed to the latest version, the default). */
          sourceGeneration?: string;
          /** Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          sourceObject: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
        body: Object,
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Deletes an object and its metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used. */
      delete(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the object resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, permanently deletes a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
        ifGenerationMatch?: string;
        /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
        ifGenerationNotMatch?: string;
        /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<void>;
      /** Retrieves an object or its metadata. */
      get(
        request?: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Restore token used to differentiate soft-deleted objects with the same name and generation. Only applicable for hierarchical namespace buckets and if softDeleted is set to true. This parameter is optional, and is only required in the rare case when there are multiple soft-deleted objects with the same name and generation. */
          restoreToken?: string;
          /** If true, only soft-deleted object versions will be listed. The default is false. For more information, see [Soft Delete](https://cloud.google.com/storage/docs/soft-delete). */
          softDeleted?: boolean;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Returns an IAM policy for the specified object. */
      getIamPolicy(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the object resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<Policy>;
      /** Stores a new object and metadata. */
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any. */
          bucket: string;
          /** If set, sets the contentEncoding property of the final object to this value. Setting this parameter is equivalent to setting the contentEncoding metadata property. This can be useful when uploading an object with uploadType=media to indicate the encoding of the content being uploaded. */
          contentEncoding?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          kmsKeyName?: string;
          /** Name of the object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          name?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Apply a predefined set of access controls to this object. */
          predefinedAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
          /** Request body */
          resource: // eslint-disable-next-line @typescript-eslint/ban-types
          Object;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      insert(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any. */
          bucket: string;
          /** If set, sets the contentEncoding property of the final object to this value. Setting this parameter is equivalent to setting the contentEncoding metadata property. This can be useful when uploading an object with uploadType=media to indicate the encoding of the content being uploaded. */
          contentEncoding?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          kmsKeyName?: string;
          /** Name of the object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          name?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Apply a predefined set of access controls to this object. */
          predefinedAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
        body: Object,
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Retrieves a list of objects matching the criteria. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which to look for objects. */
        bucket: string;
        /** Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted. */
        delimiter?: string;
        /** Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive). */
        endOffset?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter the returned objects. Currently only supported for the contexts field. If delimiter is set, the returned prefixes are exempt from this filter. */
        filter?: string;
        /** Only applicable if delimiter is set to '/'. If true, will also include folders and managed folders (besides objects) in the returned prefixes. */
        includeFoldersAsPrefixes?: boolean;
        /** If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes. */
        includeTrailingDelimiter?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Filter results to objects and prefixes that match this glob pattern. */
        matchGlob?: string;
        /** Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller. */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Filter results to objects whose names begin with this prefix. */
        prefix?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to noAcl. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** If true, only soft-deleted object versions will be listed. The default is false. For more information, see [Soft Delete](https://cloud.google.com/storage/docs/soft-delete). */
        softDeleted?: boolean;
        /** Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive). */
        startOffset?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** If true, lists all versions of an object as distinct results. The default is false. For more information, see [Object Versioning](https://cloud.google.com/storage/docs/object-versioning). */
        versions?: boolean;
      }): Request<Objects>;
      /** Moves the source object to the destination object in the same bucket. */
      move(
        request?: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Name of the destination object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          destinationObject: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the destination object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. `ifGenerationMatch` and `ifGenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.`ifGenerationMatch` and `ifGenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration matches the given value. `ifMetagenerationMatch` and `ifMetagenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration does not match the given value. `ifMetagenerationMatch` and `ifMetagenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifMetagenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation matches the given value. `ifSourceGenerationMatch` and `ifSourceGenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifSourceGenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation does not match the given value. `ifSourceGenerationMatch` and `ifSourceGenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifSourceGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration matches the given value. `ifSourceMetagenerationMatch` and `ifSourceMetagenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifSourceMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration does not match the given value. `ifSourceMetagenerationMatch` and `ifSourceMetagenerationNotMatch` conditions are mutually exclusive: it's an error for both of them to be set in the request. */
          ifSourceMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          sourceObject: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Patches an object's metadata. */
      patch(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Must be true to remove the retention configuration, reduce its unlocked retention period, or change its mode from unlocked to locked. */
          overrideUnlockedRetention?: boolean;
          /** Apply a predefined set of access controls to this object. */
          predefinedAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request, for Requester Pays buckets. */
          userProject?: string;
          /** Request body */
          resource: // eslint-disable-next-line @typescript-eslint/ban-types
          Object;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      patch(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Must be true to remove the retention configuration, reduce its unlocked retention period, or change its mode from unlocked to locked. */
          overrideUnlockedRetention?: boolean;
          /** Apply a predefined set of access controls to this object. */
          predefinedAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request, for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
        body: Object,
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Restores a soft-deleted object. */
      restore(
        request?: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** If true, copies the source object's ACL; otherwise, uses the bucket's default object ACL. The default is false. */
          copySourceAcl?: boolean;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Selects a specific revision of this object. */
          generation: string;
          /** Makes the operation conditional on whether the object's one live generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether none of the object's live generations match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's one live metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether none of the object's live metagenerations match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Restore token used to differentiate sof-deleted objects with the same name and generation. Only applicable for hierarchical namespace buckets. This parameter is optional, and is only required in the rare case when there are multiple soft-deleted objects with the same name and generation. */
          restoreToken?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Rewrites a source object to a destination object. Optionally overrides metadata. */
      rewrite(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any. */
        destinationBucket: string;
        /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
        destinationKmsKeyName?: string;
        /** Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        destinationObject: string;
        /** Apply a predefined set of access controls to the destination object. */
        destinationPredefinedAcl?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
        ifGenerationMatch?: string;
        /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
        ifGenerationNotMatch?: string;
        /** Makes the operation conditional on whether the destination object's current metageneration matches the given value. */
        ifMetagenerationMatch?: string;
        /** Makes the operation conditional on whether the destination object's current metageneration does not match the given value. */
        ifMetagenerationNotMatch?: string;
        /** Makes the operation conditional on whether the source object's current generation matches the given value. */
        ifSourceGenerationMatch?: string;
        /** Makes the operation conditional on whether the source object's current generation does not match the given value. */
        ifSourceGenerationNotMatch?: string;
        /** Makes the operation conditional on whether the source object's current metageneration matches the given value. */
        ifSourceMetagenerationMatch?: string;
        /** Makes the operation conditional on whether the source object's current metageneration does not match the given value. */
        ifSourceMetagenerationNotMatch?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The maximum number of bytes that will be rewritten per rewrite request. Most callers shouldn't need to specify this parameter - it is primarily in place to support testing. If specified the value must be an integral multiple of 1 MiB (1048576). Also, this only applies to requests where the source and destination span locations and/or storage classes. Finally, this value must not change across rewrite calls else you'll get an error that the rewriteToken is invalid. */
        maxBytesRewrittenPerCall?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Include this field (from the previous rewrite response) on each rewrite request after the first one, until the rewrite response 'done' flag is true. Calls that provide a rewriteToken can omit all other request fields, but if included those fields must match the values provided in the first rewrite request. */
        rewriteToken?: string;
        /** Name of the bucket in which to find the source object. */
        sourceBucket: string;
        /** If present, selects a specific revision of the source object (as opposed to the latest version, the default). */
        sourceGeneration?: string;
        /** Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        sourceObject: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: // eslint-disable-next-line @typescript-eslint/ban-types
        Object;
      }): Request<RewriteResponse>;
      rewrite(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any. */
          destinationBucket: string;
          /** Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any. */
          destinationKmsKeyName?: string;
          /** Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          destinationObject: string;
          /** Apply a predefined set of access controls to the destination object. */
          destinationPredefinedAcl?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the destination object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation matches the given value. */
          ifSourceGenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current generation does not match the given value. */
          ifSourceGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration matches the given value. */
          ifSourceMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the source object's current metageneration does not match the given value. */
          ifSourceMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The maximum number of bytes that will be rewritten per rewrite request. Most callers shouldn't need to specify this parameter - it is primarily in place to support testing. If specified the value must be an integral multiple of 1 MiB (1048576). Also, this only applies to requests where the source and destination span locations and/or storage classes. Finally, this value must not change across rewrite calls else you'll get an error that the rewriteToken is invalid. */
          maxBytesRewrittenPerCall?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Include this field (from the previous rewrite response) on each rewrite request after the first one, until the rewrite response 'done' flag is true. Calls that provide a rewriteToken can omit all other request fields, but if included those fields must match the values provided in the first rewrite request. */
          rewriteToken?: string;
          /** Name of the bucket in which to find the source object. */
          sourceBucket: string;
          /** If present, selects a specific revision of the source object (as opposed to the latest version, the default). */
          sourceGeneration?: string;
          /** Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          sourceObject: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
        body: Object,
      ): Request<RewriteResponse>;
      /** Updates an IAM policy for the specified object. */
      setIamPolicy(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the object resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** Request body */
        resource: Policy;
      }): Request<Policy>;
      setIamPolicy(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        body: Policy,
      ): Request<Policy>;
      /** Tests a set of permissions on the given object to see which, if any, are held by the caller. */
      testIamPermissions(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which the object resides. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
        generation?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
        object: string;
        /** Permissions to test. */
        permissions: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
      }): Request<TestIamPermissionsResponse>;
      /** Updates an object's metadata. */
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Must be true to remove the retention configuration, reduce its unlocked retention period, or change its mode from unlocked to locked. */
          overrideUnlockedRetention?: boolean;
          /** Apply a predefined set of access controls to this object. */
          predefinedAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
          /** Request body */
          resource: // eslint-disable-next-line @typescript-eslint/ban-types
          Object;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      update(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which the object resides. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If present, selects a specific revision of this object (as opposed to the latest version, the default). */
          generation?: string;
          /** Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object. */
          ifGenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object. */
          ifGenerationNotMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration matches the given value. */
          ifMetagenerationMatch?: string;
          /** Makes the operation conditional on whether the object's current metageneration does not match the given value. */
          ifMetagenerationNotMatch?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). */
          object: string;
          /** Must be true to remove the retention configuration, reduce its unlocked retention period, or change its mode from unlocked to locked. */
          overrideUnlockedRetention?: boolean;
          /** Apply a predefined set of access controls to this object. */
          predefinedAcl?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to full. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
        },
        // eslint-disable-next-line @typescript-eslint/ban-types
        body: Object,
        // eslint-disable-next-line @typescript-eslint/ban-types
      ): Request<Object>;
      /** Watch for changes on all objects in a bucket. */
      watchAll(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which to look for objects. */
        bucket: string;
        /** Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted. */
        delimiter?: string;
        /** Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive). */
        endOffset?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes. */
        includeTrailingDelimiter?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller. */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Filter results to objects whose names begin with this prefix. */
        prefix?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Set of properties to return. Defaults to noAcl. */
        projection?: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive). */
        startOffset?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. Required for Requester Pays buckets. */
        userProject?: string;
        /** If true, lists all versions of an object as distinct results. The default is false. For more information, see [Object Versioning](https://cloud.google.com/storage/docs/object-versioning). */
        versions?: boolean;
        /** Request body */
        resource: Channel;
      }): Request<Channel>;
      watchAll(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket in which to look for objects. */
          bucket: string;
          /** Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted. */
          delimiter?: string;
          /** Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive). */
          endOffset?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes. */
          includeTrailingDelimiter?: boolean;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller. */
          maxResults?: number;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** A previously-returned page token representing part of the larger set of results to view. */
          pageToken?: string;
          /** Filter results to objects whose names begin with this prefix. */
          prefix?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Set of properties to return. Defaults to noAcl. */
          projection?: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive). */
          startOffset?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. Required for Requester Pays buckets. */
          userProject?: string;
          /** If true, lists all versions of an object as distinct results. The default is false. For more information, see [Object Versioning](https://cloud.google.com/storage/docs/object-versioning). */
          versions?: boolean;
        },
        body: Channel,
      ): Request<Channel>;
    }
    interface OperationsResource {
      /** Starts asynchronous advancement of the relocate bucket operation in the case of required write downtime, to allow it to lock the bucket at the source location, and proceed with the bucket location swap. The server makes a best effort to advance the relocate bucket operation, but success is not guaranteed. */
      advanceRelocateBucket(request: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket to advance the relocate for. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** ID of the operation resource. */
        operationId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** Request body */
        resource: AdvanceRelocateBucketOperationRequest;
      }): Request<void>;
      advanceRelocateBucket(
        request: {
          /** Data format for the response. */
          alt?: string;
          /** Name of the bucket to advance the relocate for. */
          bucket: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** ID of the operation resource. */
          operationId: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
        },
        body: AdvanceRelocateBucketOperationRequest,
      ): Request<void>;
      /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. */
      cancel(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The parent bucket of the operation resource. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the operation resource. */
        operationId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<void>;
      /** Gets the latest state of a long-running operation. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** The parent bucket of the operation resource. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the operation resource. */
        operationId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<GoogleLongrunningOperation>;
      /** Lists operations that match the specified filter in the request. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Name of the bucket in which to look for operations. */
        bucket: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** A filter to narrow down results to a preferred subset. The filtering language is documented in more detail in [AIP-160](https://google.aip.dev/160). */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of items to return in a single page of responses. Fewer total results may be returned than requested. The service uses this parameter or 100 items, whichever is smaller. */
        pageSize?: number;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
      }): Request<GoogleLongrunningListOperationsResponse>;
    }
    interface HmacKeysResource {
      /** Creates a new HMAC key for the specified service account. */
      create(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID owning the service account. */
        projectId: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Email address of the service account. */
        serviceAccountEmail: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
      }): Request<HmacKey>;
      /** Deletes an HMAC key. */
      delete(request?: {
        /** Name of the HMAC key to be deleted. */
        accessId: string;
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID owning the requested key */
        projectId: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
      }): Request<void>;
      /** Retrieves an HMAC key's metadata */
      get(request?: {
        /** Name of the HMAC key. */
        accessId: string;
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID owning the service account of the requested key. */
        projectId: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
      }): Request<HmacKeyMetadata>;
      /** Retrieves a list of HMAC keys matching the criteria. */
      list(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned. */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A previously-returned page token representing part of the larger set of results to view. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Name of the project in which to look for HMAC keys. */
        projectId: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** If present, only keys for the given service account are returned. */
        serviceAccountEmail?: string;
        /** Whether or not to show keys in the DELETED state. */
        showDeletedKeys?: boolean;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
      }): Request<HmacKeysMetadata>;
      /** Updates the state of an HMAC key. See the [HMAC Key resource descriptor](https://cloud.google.com/storage/docs/json_api/v1/projects/hmacKeys/update#request-body) for valid states. */
      update(request: {
        /** Name of the HMAC key being updated. */
        accessId: string;
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID owning the service account of the updated key. */
        projectId: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
        /** Request body */
        resource: HmacKeyMetadata;
      }): Request<HmacKeyMetadata>;
      update(
        request: {
          /** Name of the HMAC key being updated. */
          accessId: string;
          /** Data format for the response. */
          alt?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Project ID owning the service account of the updated key. */
          projectId: string;
          /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
          uploadType?: string;
          /** Deprecated. Please use quotaUser instead. */
          userIp?: string;
          /** The project to be billed for this request. */
          userProject?: string;
        },
        body: HmacKeyMetadata,
      ): Request<HmacKeyMetadata>;
    }
    interface ServiceAccountResource {
      /** Get the email address of this project's Google Cloud Storage service account. */
      get(request?: {
        /** Data format for the response. */
        alt?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID */
        projectId: string;
        /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "media", "multipart", "resumable"). */
        uploadType?: string;
        /** Deprecated. Please use quotaUser instead. */
        userIp?: string;
        /** The project to be billed for this request. */
        userProject?: string;
      }): Request<ServiceAccount>;
    }
    interface ProjectsResource {
      hmacKeys: HmacKeysResource;
      serviceAccount: ServiceAccountResource;
    }

    const anywhereCaches: AnywhereCachesResource;

    const bucketAccessControls: BucketAccessControlsResource;

    const buckets: BucketsResource;

    const channels: ChannelsResource;

    const defaultObjectAccessControls: DefaultObjectAccessControlsResource;

    const folders: FoldersResource;

    const managedFolders: ManagedFoldersResource;

    const notifications: NotificationsResource;

    const objectAccessControls: ObjectAccessControlsResource;

    const objects: ObjectsResource;

    const operations: OperationsResource;

    const projects: ProjectsResource;
  }
}
