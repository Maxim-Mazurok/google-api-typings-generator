/* This is stub file for gapi.client.content-v2.1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241210

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://shoppingcontent.googleapis.com/$discovery/rest?version=v2.1'
  );
  /** now we can use gapi.client.content */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Returns information about the authenticated user. */
    await gapi.client.content.accounts.authinfo({});
    /** Claims the website of a Merchant Center sub-account. Merchant accounts with approved third-party CSSs aren't required to claim a website. */
    await gapi.client.content.accounts.claimwebsite({
      accountId: 'Test string',
      merchantId: 'Test string',
      overwrite: true,
    });
    /** Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request. */
    await gapi.client.content.accounts.custombatch(
      {},
      {
        entries: [
          {
            account: {
              accountManagement: 'Test string',
              adsLinks: [
                {
                  adsId: 'Test string',
                  status: 'Test string',
                },
              ],
              adultContent: true,
              automaticImprovements: {
                imageImprovements: {
                  accountImageImprovementsSettings: {
                    allowAutomaticImageImprovements: true,
                  },
                  effectiveAllowAutomaticImageImprovements: true,
                },
                itemUpdates: {
                  accountItemUpdatesSettings: {
                    allowAvailabilityUpdates: true,
                    allowConditionUpdates: true,
                    allowPriceUpdates: true,
                    allowStrictAvailabilityUpdates: true,
                  },
                  effectiveAllowAvailabilityUpdates: true,
                  effectiveAllowConditionUpdates: true,
                  effectiveAllowPriceUpdates: true,
                  effectiveAllowStrictAvailabilityUpdates: true,
                },
                shippingImprovements: {
                  allowShippingImprovements: true,
                },
              },
              automaticLabelIds: ['Test string'],
              businessIdentity: {
                blackOwned: {
                  selfIdentified: true,
                },
                includeForPromotions: true,
                latinoOwned: {
                  selfIdentified: true,
                },
                smallBusiness: {
                  selfIdentified: true,
                },
                veteranOwned: {
                  selfIdentified: true,
                },
                womenOwned: {
                  selfIdentified: true,
                },
              },
              businessInformation: {
                address: {
                  country: 'Test string',
                  locality: 'Test string',
                  postalCode: 'Test string',
                  region: 'Test string',
                  streetAddress: 'Test string',
                },
                customerService: {
                  email: 'Test string',
                  phoneNumber: 'Test string',
                  url: 'Test string',
                },
                koreanBusinessRegistrationNumber: 'Test string',
                phoneNumber: 'Test string',
                phoneVerificationStatus: 'Test string',
              },
              conversionSettings: {
                freeListingsAutoTaggingEnabled: true,
              },
              cssId: 'Test string',
              googleMyBusinessLink: {
                gmbAccountId: 'Test string',
                gmbEmail: 'Test string',
                status: 'Test string',
              },
              id: 'Test string',
              kind: 'Test string',
              labelIds: ['Test string'],
              name: 'Test string',
              sellerId: 'Test string',
              users: [
                {
                  admin: true,
                  emailAddress: 'Test string',
                  orderManager: true,
                  paymentsAnalyst: true,
                  paymentsManager: true,
                  reportingManager: true,
                },
              ],
              websiteUrl: 'Test string',
              youtubeChannelLinks: [
                {
                  channelId: 'Test string',
                  status: 'Test string',
                },
              ],
            },
            accountId: 'Test string',
            batchId: 42,
            force: true,
            labelIds: ['Test string'],
            linkRequest: {
              action: 'Test string',
              linkedAccountId: 'Test string',
              linkType: 'Test string',
              services: ['Test string'],
            },
            merchantId: 'Test string',
            method: 'Test string',
            overwrite: true,
            view: 'Test string',
          },
        ],
      }
    );
    /** Deletes a Merchant Center sub-account. */
    await gapi.client.content.accounts.delete({
      accountId: 'Test string',
      force: true,
      merchantId: 'Test string',
    });
    /** Retrieves a Merchant Center account. */
    await gapi.client.content.accounts.get({
      accountId: 'Test string',
      merchantId: 'Test string',
      view: 'Test string',
    });
    /** Creates a Merchant Center sub-account. */
    await gapi.client.content.accounts.insert(
      {
        merchantId: 'Test string',
      },
      {
        accountManagement: 'Test string',
        adsLinks: [
          {
            adsId: 'Test string',
            status: 'Test string',
          },
        ],
        adultContent: true,
        automaticImprovements: {
          imageImprovements: {
            accountImageImprovementsSettings: {
              allowAutomaticImageImprovements: true,
            },
            effectiveAllowAutomaticImageImprovements: true,
          },
          itemUpdates: {
            accountItemUpdatesSettings: {
              allowAvailabilityUpdates: true,
              allowConditionUpdates: true,
              allowPriceUpdates: true,
              allowStrictAvailabilityUpdates: true,
            },
            effectiveAllowAvailabilityUpdates: true,
            effectiveAllowConditionUpdates: true,
            effectiveAllowPriceUpdates: true,
            effectiveAllowStrictAvailabilityUpdates: true,
          },
          shippingImprovements: {
            allowShippingImprovements: true,
          },
        },
        automaticLabelIds: ['Test string'],
        businessIdentity: {
          blackOwned: {
            selfIdentified: true,
          },
          includeForPromotions: true,
          latinoOwned: {
            selfIdentified: true,
          },
          smallBusiness: {
            selfIdentified: true,
          },
          veteranOwned: {
            selfIdentified: true,
          },
          womenOwned: {
            selfIdentified: true,
          },
        },
        businessInformation: {
          address: {
            country: 'Test string',
            locality: 'Test string',
            postalCode: 'Test string',
            region: 'Test string',
            streetAddress: 'Test string',
          },
          customerService: {
            email: 'Test string',
            phoneNumber: 'Test string',
            url: 'Test string',
          },
          koreanBusinessRegistrationNumber: 'Test string',
          phoneNumber: 'Test string',
          phoneVerificationStatus: 'Test string',
        },
        conversionSettings: {
          freeListingsAutoTaggingEnabled: true,
        },
        cssId: 'Test string',
        googleMyBusinessLink: {
          gmbAccountId: 'Test string',
          gmbEmail: 'Test string',
          status: 'Test string',
        },
        id: 'Test string',
        kind: 'Test string',
        labelIds: ['Test string'],
        name: 'Test string',
        sellerId: 'Test string',
        users: [
          {
            admin: true,
            emailAddress: 'Test string',
            orderManager: true,
            paymentsAnalyst: true,
            paymentsManager: true,
            reportingManager: true,
          },
        ],
        websiteUrl: 'Test string',
        youtubeChannelLinks: [
          {
            channelId: 'Test string',
            status: 'Test string',
          },
        ],
      }
    );
    /** Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId. */
    await gapi.client.content.accounts.link(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        action: 'Test string',
        eCommercePlatformLinkInfo: {
          externalAccountId: 'Test string',
        },
        linkedAccountId: 'Test string',
        linkType: 'Test string',
        paymentServiceProviderLinkInfo: {
          externalAccountBusinessCountry: 'Test string',
          externalAccountId: 'Test string',
        },
        services: ['Test string'],
      }
    );
    /** Lists the sub-accounts in your Merchant Center account. */
    await gapi.client.content.accounts.list({
      label: 'Test string',
      maxResults: 42,
      merchantId: 'Test string',
      name: 'Test string',
      pageToken: 'Test string',
      view: 'Test string',
    });
    /** Returns the list of accounts linked to your Merchant Center account. */
    await gapi.client.content.accounts.listlinks({
      accountId: 'Test string',
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Request verification code to start phone verification. */
    await gapi.client.content.accounts.requestphoneverification(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        languageCode: 'Test string',
        phoneNumber: 'Test string',
        phoneRegionCode: 'Test string',
        phoneVerificationMethod: 'Test string',
      }
    );
    /** Updates a Merchant Center account. Any fields that are not provided are deleted from the resource. */
    await gapi.client.content.accounts.update(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        accountManagement: 'Test string',
        adsLinks: [
          {
            adsId: 'Test string',
            status: 'Test string',
          },
        ],
        adultContent: true,
        automaticImprovements: {
          imageImprovements: {
            accountImageImprovementsSettings: {
              allowAutomaticImageImprovements: true,
            },
            effectiveAllowAutomaticImageImprovements: true,
          },
          itemUpdates: {
            accountItemUpdatesSettings: {
              allowAvailabilityUpdates: true,
              allowConditionUpdates: true,
              allowPriceUpdates: true,
              allowStrictAvailabilityUpdates: true,
            },
            effectiveAllowAvailabilityUpdates: true,
            effectiveAllowConditionUpdates: true,
            effectiveAllowPriceUpdates: true,
            effectiveAllowStrictAvailabilityUpdates: true,
          },
          shippingImprovements: {
            allowShippingImprovements: true,
          },
        },
        automaticLabelIds: ['Test string'],
        businessIdentity: {
          blackOwned: {
            selfIdentified: true,
          },
          includeForPromotions: true,
          latinoOwned: {
            selfIdentified: true,
          },
          smallBusiness: {
            selfIdentified: true,
          },
          veteranOwned: {
            selfIdentified: true,
          },
          womenOwned: {
            selfIdentified: true,
          },
        },
        businessInformation: {
          address: {
            country: 'Test string',
            locality: 'Test string',
            postalCode: 'Test string',
            region: 'Test string',
            streetAddress: 'Test string',
          },
          customerService: {
            email: 'Test string',
            phoneNumber: 'Test string',
            url: 'Test string',
          },
          koreanBusinessRegistrationNumber: 'Test string',
          phoneNumber: 'Test string',
          phoneVerificationStatus: 'Test string',
        },
        conversionSettings: {
          freeListingsAutoTaggingEnabled: true,
        },
        cssId: 'Test string',
        googleMyBusinessLink: {
          gmbAccountId: 'Test string',
          gmbEmail: 'Test string',
          status: 'Test string',
        },
        id: 'Test string',
        kind: 'Test string',
        labelIds: ['Test string'],
        name: 'Test string',
        sellerId: 'Test string',
        users: [
          {
            admin: true,
            emailAddress: 'Test string',
            orderManager: true,
            paymentsAnalyst: true,
            paymentsManager: true,
            reportingManager: true,
          },
        ],
        websiteUrl: 'Test string',
        youtubeChannelLinks: [
          {
            channelId: 'Test string',
            status: 'Test string',
          },
        ],
      }
    );
    /** Updates labels that are assigned to the Merchant Center account by CSS user. */
    await gapi.client.content.accounts.updatelabels(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        labelIds: ['Test string'],
      }
    );
    /** Validates verification code to verify phone number for the account. If successful this will overwrite the value of `accounts.businessinformation.phoneNumber`. Only verified phone number will replace an existing verified phone number. */
    await gapi.client.content.accounts.verifyphonenumber(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        phoneVerificationMethod: 'Test string',
        verificationCode: 'Test string',
        verificationId: 'Test string',
      }
    );
    /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
    await gapi.client.content.accounts.credentials.create(
      {
        accountId: 'Test string',
      },
      {
        accessToken: 'Test string',
        expiresIn: 'Test string',
        purpose: 'Test string',
      }
    );
    /** Creates a new label, not assigned to any account. */
    await gapi.client.content.accounts.labels.create(
      {
        accountId: 'Test string',
      },
      {
        accountId: 'Test string',
        description: 'Test string',
        labelId: 'Test string',
        labelType: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes a label and removes it from all accounts to which it was assigned. */
    await gapi.client.content.accounts.labels.delete({
      accountId: 'Test string',
      labelId: 'Test string',
    });
    /** Lists the labels assigned to an account. */
    await gapi.client.content.accounts.labels.list({
      accountId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a label. */
    await gapi.client.content.accounts.labels.patch(
      {
        accountId: 'Test string',
        labelId: 'Test string',
      },
      {
        accountId: 'Test string',
        description: 'Test string',
        labelId: 'Test string',
        labelType: 'Test string',
        name: 'Test string',
      }
    );
    /** Links return carrier to a merchant account. */
    await gapi.client.content.accounts.returncarrier.create(
      {
        accountId: 'Test string',
      },
      {
        carrierAccountId: 'Test string',
        carrierAccountName: 'Test string',
        carrierAccountNumber: 'Test string',
        carrierCode: 'Test string',
      }
    );
    /** Delete a return carrier in the merchant account. */
    await gapi.client.content.accounts.returncarrier.delete({
      accountId: 'Test string',
      carrierAccountId: 'Test string',
    });
    /** Lists available return carriers in the merchant account. */
    await gapi.client.content.accounts.returncarrier.list({
      accountId: 'Test string',
    });
    /** Updates a return carrier in the merchant account. */
    await gapi.client.content.accounts.returncarrier.patch(
      {
        accountId: 'Test string',
        carrierAccountId: 'Test string',
      },
      {
        carrierAccountId: 'Test string',
        carrierAccountName: 'Test string',
        carrierAccountNumber: 'Test string',
        carrierCode: 'Test string',
      }
    );
    /** Retrieves multiple Merchant Center account statuses in a single request. */
    await gapi.client.content.accountstatuses.custombatch(
      {},
      {
        entries: [
          {
            accountId: 'Test string',
            batchId: 42,
            destinations: ['Test string'],
            merchantId: 'Test string',
            method: 'Test string',
          },
        ],
      }
    );
    /** Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts. */
    await gapi.client.content.accountstatuses.get({
      accountId: 'Test string',
      destinations: 'Test string',
      merchantId: 'Test string',
    });
    /** Lists the statuses of the sub-accounts in your Merchant Center account. */
    await gapi.client.content.accountstatuses.list({
      destinations: 'Test string',
      maxResults: 42,
      merchantId: 'Test string',
      name: 'Test string',
      pageToken: 'Test string',
    });
    /** Retrieves and updates tax settings of multiple accounts in a single request. */
    await gapi.client.content.accounttax.custombatch(
      {},
      {
        entries: [
          {
            accountId: 'Test string',
            accountTax: {
              accountId: 'Test string',
              kind: 'Test string',
              rules: [
                {
                  country: 'Test string',
                  locationId: 'Test string',
                  ratePercent: 'Test string',
                  shippingTaxed: true,
                  useGlobalRate: true,
                },
              ],
            },
            batchId: 42,
            merchantId: 'Test string',
            method: 'Test string',
          },
        ],
      }
    );
    /** Retrieves the tax settings of the account. */
    await gapi.client.content.accounttax.get({
      accountId: 'Test string',
      merchantId: 'Test string',
    });
    /** Lists the tax settings of the sub-accounts in your Merchant Center account. */
    await gapi.client.content.accounttax.list({
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Updates the tax settings of the account. Any fields that are not provided are deleted from the resource. */
    await gapi.client.content.accounttax.update(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        accountId: 'Test string',
        kind: 'Test string',
        rules: [
          {
            country: 'Test string',
            locationId: 'Test string',
            ratePercent: 'Test string',
            shippingTaxed: true,
            useGlobalRate: true,
          },
        ],
      }
    );
    /** Uploads a collection to your Merchant Center account. If a collection with the same collectionId already exists, this method updates that entry. In each update, the collection is completely replaced by the fields in the body of the update request. */
    await gapi.client.content.collections.create(
      {
        merchantId: 'Test string',
      },
      {
        customLabel0: 'Test string',
        customLabel1: 'Test string',
        customLabel2: 'Test string',
        customLabel3: 'Test string',
        customLabel4: 'Test string',
        featuredProduct: [
          {
            offerId: 'Test string',
            x: 42,
            y: 42,
          },
        ],
        headline: ['Test string'],
        id: 'Test string',
        imageLink: ['Test string'],
        language: 'Test string',
        link: 'Test string',
        mobileLink: 'Test string',
        productCountry: 'Test string',
      }
    );
    /** Deletes a collection from your Merchant Center account. */
    await gapi.client.content.collections.delete({
      collectionId: 'Test string',
      merchantId: 'Test string',
    });
    /** Retrieves a collection from your Merchant Center account. */
    await gapi.client.content.collections.get({
      collectionId: 'Test string',
      merchantId: 'Test string',
    });
    /** Lists the collections in your Merchant Center account. The response might contain fewer items than specified by page_size. Rely on next_page_token to determine if there are more items to be requested. */
    await gapi.client.content.collections.list({
      merchantId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets the status of a collection from your Merchant Center account. */
    await gapi.client.content.collectionstatuses.get({
      collectionId: 'Test string',
      merchantId: 'Test string',
    });
    /** Lists the statuses of the collections in your Merchant Center account. */
    await gapi.client.content.collectionstatuses.list({
      merchantId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new conversion source. */
    await gapi.client.content.conversionsources.create(
      {
        merchantId: 'Test string',
      },
      {
        conversionSourceId: 'Test string',
        expireTime: 'Test string',
        googleAnalyticsLink: {
          attributionSettings: {
            attributionLookbackWindowInDays: 42,
            attributionModel: 'Test string',
            conversionType: [
              {
                includeInReporting: true,
                name: 'Test string',
              },
            ],
          },
          propertyId: 'Test string',
          propertyName: 'Test string',
        },
        merchantCenterDestination: {
          attributionSettings: {
            attributionLookbackWindowInDays: 42,
            attributionModel: 'Test string',
            conversionType: [
              {
                includeInReporting: true,
                name: 'Test string',
              },
            ],
          },
          currencyCode: 'Test string',
          destinationId: 'Test string',
          displayName: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Archives an existing conversion source. It will be recoverable for 30 days. This archiving behavior is not typical in the Content API and unique to this service. */
    await gapi.client.content.conversionsources.delete({
      conversionSourceId: 'Test string',
      merchantId: 'Test string',
    });
    /** Fetches a conversion source. */
    await gapi.client.content.conversionsources.get({
      conversionSourceId: 'Test string',
      merchantId: 'Test string',
    });
    /** Retrieves the list of conversion sources the caller has access to. */
    await gapi.client.content.conversionsources.list({
      merchantId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      showDeleted: true,
    });
    /** Updates information of an existing conversion source. */
    await gapi.client.content.conversionsources.patch(
      {
        conversionSourceId: 'Test string',
        merchantId: 'Test string',
        updateMask: 'Test string',
      },
      {
        conversionSourceId: 'Test string',
        expireTime: 'Test string',
        googleAnalyticsLink: {
          attributionSettings: {
            attributionLookbackWindowInDays: 42,
            attributionModel: 'Test string',
            conversionType: [
              {
                includeInReporting: true,
                name: 'Test string',
              },
            ],
          },
          propertyId: 'Test string',
          propertyName: 'Test string',
        },
        merchantCenterDestination: {
          attributionSettings: {
            attributionLookbackWindowInDays: 42,
            attributionModel: 'Test string',
            conversionType: [
              {
                includeInReporting: true,
                name: 'Test string',
              },
            ],
          },
          currencyCode: 'Test string',
          destinationId: 'Test string',
          displayName: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Re-enables an archived conversion source. */
    await gapi.client.content.conversionsources.undelete(
      {
        conversionSourceId: 'Test string',
        merchantId: 'Test string',
      },
      {}
    );
    /** Retrieves a single CSS domain by ID. */
    await gapi.client.content.csses.get({
      cssDomainId: 'Test string',
      cssGroupId: 'Test string',
    });
    /** Lists CSS domains affiliated with a CSS group. */
    await gapi.client.content.csses.list({
      cssGroupId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates labels that are assigned to a CSS domain by its CSS group. */
    await gapi.client.content.csses.updatelabels(
      {
        cssDomainId: 'Test string',
        cssGroupId: 'Test string',
      },
      {
        labelIds: ['Test string'],
      }
    );
    /** Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request. */
    await gapi.client.content.datafeeds.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            datafeed: {
              attributeLanguage: 'Test string',
              contentType: 'Test string',
              fetchSchedule: {
                dayOfMonth: 42,
                fetchUrl: 'Test string',
                hour: 42,
                minuteOfHour: 42,
                password: 'Test string',
                paused: true,
                timeZone: 'Test string',
                username: 'Test string',
                weekday: 'Test string',
              },
              fileName: 'Test string',
              format: {
                columnDelimiter: 'Test string',
                fileEncoding: 'Test string',
                quotingMode: 'Test string',
              },
              id: 'Test string',
              kind: 'Test string',
              name: 'Test string',
              targets: [
                {
                  country: 'Test string',
                  excludedDestinations: ['Test string'],
                  feedLabel: 'Test string',
                  includedDestinations: ['Test string'],
                  language: 'Test string',
                  targetCountries: ['Test string'],
                },
              ],
            },
            datafeedId: 'Test string',
            merchantId: 'Test string',
            method: 'Test string',
          },
        ],
      }
    );
    /** Deletes a datafeed configuration from your Merchant Center account. */
    await gapi.client.content.datafeeds.delete({
      datafeedId: 'Test string',
      merchantId: 'Test string',
    });
    /** Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the [Products service](https://developers.google.com/shopping-content/reference/rest/v2.1/products) to update your product data. */
    await gapi.client.content.datafeeds.fetchnow({
      datafeedId: 'Test string',
      merchantId: 'Test string',
    });
    /** Retrieves a datafeed configuration from your Merchant Center account. */
    await gapi.client.content.datafeeds.get({
      datafeedId: 'Test string',
      merchantId: 'Test string',
    });
    /** Registers a datafeed configuration with your Merchant Center account. */
    await gapi.client.content.datafeeds.insert(
      {
        merchantId: 'Test string',
      },
      {
        attributeLanguage: 'Test string',
        contentType: 'Test string',
        fetchSchedule: {
          dayOfMonth: 42,
          fetchUrl: 'Test string',
          hour: 42,
          minuteOfHour: 42,
          password: 'Test string',
          paused: true,
          timeZone: 'Test string',
          username: 'Test string',
          weekday: 'Test string',
        },
        fileName: 'Test string',
        format: {
          columnDelimiter: 'Test string',
          fileEncoding: 'Test string',
          quotingMode: 'Test string',
        },
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        targets: [
          {
            country: 'Test string',
            excludedDestinations: ['Test string'],
            feedLabel: 'Test string',
            includedDestinations: ['Test string'],
            language: 'Test string',
            targetCountries: ['Test string'],
          },
        ],
      }
    );
    /** Lists the configurations for datafeeds in your Merchant Center account. */
    await gapi.client.content.datafeeds.list({
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource. */
    await gapi.client.content.datafeeds.update(
      {
        datafeedId: 'Test string',
        merchantId: 'Test string',
      },
      {
        attributeLanguage: 'Test string',
        contentType: 'Test string',
        fetchSchedule: {
          dayOfMonth: 42,
          fetchUrl: 'Test string',
          hour: 42,
          minuteOfHour: 42,
          password: 'Test string',
          paused: true,
          timeZone: 'Test string',
          username: 'Test string',
          weekday: 'Test string',
        },
        fileName: 'Test string',
        format: {
          columnDelimiter: 'Test string',
          fileEncoding: 'Test string',
          quotingMode: 'Test string',
        },
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        targets: [
          {
            country: 'Test string',
            excludedDestinations: ['Test string'],
            feedLabel: 'Test string',
            includedDestinations: ['Test string'],
            language: 'Test string',
            targetCountries: ['Test string'],
          },
        ],
      }
    );
    /** Gets multiple Merchant Center datafeed statuses in a single request. */
    await gapi.client.content.datafeedstatuses.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            country: 'Test string',
            datafeedId: 'Test string',
            feedLabel: 'Test string',
            language: 'Test string',
            merchantId: 'Test string',
            method: 'Test string',
          },
        ],
      }
    );
    /** Retrieves the status of a datafeed from your Merchant Center account. */
    await gapi.client.content.datafeedstatuses.get({
      country: 'Test string',
      datafeedId: 'Test string',
      feedLabel: 'Test string',
      language: 'Test string',
      merchantId: 'Test string',
    });
    /** Lists the statuses of the datafeeds in your Merchant Center account. */
    await gapi.client.content.datafeedstatuses.list({
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Retrieves the status and review eligibility for the free listing program. Returns errors and warnings if they require action to resolve, will become disapprovals, or impact impressions. Use `accountstatuses` to view all issues for an account. */
    await gapi.client.content.freelistingsprogram.get({
      merchantId: 'Test string',
    });
    /** Requests a review of free listings in a specific region. This method deprecated. Use the `MerchantSupportService` to view product and account issues and request a review. */
    await gapi.client.content.freelistingsprogram.requestreview(
      {
        merchantId: 'Test string',
      },
      {
        regionCode: 'Test string',
      }
    );
    /** Deletes `Checkout` settings and unenrolls merchant from `Checkout` program. */
    await gapi.client.content.freelistingsprogram.checkoutsettings.delete({
      merchantId: 'Test string',
    });
    /** Gets Checkout settings for the given merchant. This includes information about review state, enrollment state and URL settings. */
    await gapi.client.content.freelistingsprogram.checkoutsettings.get({
      merchantId: 'Test string',
    });
    /** Enrolls merchant in `Checkout` program. */
    await gapi.client.content.freelistingsprogram.checkoutsettings.insert(
      {
        merchantId: 'Test string',
      },
      {
        uriSettings: {
          cartUriTemplate: 'Test string',
          checkoutUriTemplate: 'Test string',
        },
      }
    );
    /** Retrieves and/or updates the LIA settings of multiple accounts in a single request. */
    await gapi.client.content.liasettings.custombatch(
      {},
      {
        entries: [
          {
            accountId: 'Test string',
            batchId: 42,
            contactEmail: 'Test string',
            contactName: 'Test string',
            country: 'Test string',
            gmbEmail: 'Test string',
            liaSettings: {
              accountId: 'Test string',
              countrySettings: [
                {
                  about: {
                    status: 'Test string',
                    url: 'Test string',
                  },
                  country: 'Test string',
                  hostedLocalStorefrontActive: true,
                  inventory: {
                    inventoryVerificationContactEmail: 'Test string',
                    inventoryVerificationContactName: 'Test string',
                    inventoryVerificationContactStatus: 'Test string',
                    status: 'Test string',
                  },
                  omnichannelExperience: {
                    country: 'Test string',
                    lsfType: 'Test string',
                    pickupTypes: ['Test string'],
                  },
                  onDisplayToOrder: {
                    shippingCostPolicyUrl: 'Test string',
                    status: 'Test string',
                  },
                  posDataProvider: {
                    posDataProviderId: 'Test string',
                    posExternalAccountId: 'Test string',
                  },
                  storePickupActive: true,
                },
              ],
              kind: 'Test string',
            },
            merchantId: 'Test string',
            method: 'Test string',
            omnichannelExperience: {
              country: 'Test string',
              lsfType: 'Test string',
              pickupTypes: ['Test string'],
            },
            posDataProviderId: 'Test string',
            posExternalAccountId: 'Test string',
          },
        ],
      }
    );
    /** Retrieves the LIA settings of the account. */
    await gapi.client.content.liasettings.get({
      accountId: 'Test string',
      merchantId: 'Test string',
    });
    /** Retrieves the list of accessible Business Profiles. */
    await gapi.client.content.liasettings.getaccessiblegmbaccounts({
      accountId: 'Test string',
      merchantId: 'Test string',
    });
    /** Lists the LIA settings of the sub-accounts in your Merchant Center account. */
    await gapi.client.content.liasettings.list({
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Retrieves the list of POS data providers that have active settings for the all eiligible countries. */
    await gapi.client.content.liasettings.listposdataproviders({});
    /** Requests access to a specified Business Profile. */
    await gapi.client.content.liasettings.requestgmbaccess({
      accountId: 'Test string',
      gmbEmail: 'Test string',
      merchantId: 'Test string',
    });
    /** Requests inventory validation for the specified country. */
    await gapi.client.content.liasettings.requestinventoryverification({
      accountId: 'Test string',
      country: 'Test string',
      merchantId: 'Test string',
    });
    /** Sets the inventory verification contract for the specified country. */
    await gapi.client.content.liasettings.setinventoryverificationcontact({
      accountId: 'Test string',
      contactEmail: 'Test string',
      contactName: 'Test string',
      country: 'Test string',
      language: 'Test string',
      merchantId: 'Test string',
    });
    /** Sets the omnichannel experience for the specified country. Only supported for merchants whose POS data provider is trusted to enable the corresponding experience. For more context, see these help articles [about LFP](https://support.google.com/merchants/answer/7676652) and [how to get started](https://support.google.com/merchants/answer/7676578) with it. */
    await gapi.client.content.liasettings.setomnichannelexperience({
      accountId: 'Test string',
      country: 'Test string',
      lsfType: 'Test string',
      merchantId: 'Test string',
      pickupTypes: 'Test string',
    });
    /** Sets the POS data provider for the specified country. */
    await gapi.client.content.liasettings.setposdataprovider({
      accountId: 'Test string',
      country: 'Test string',
      merchantId: 'Test string',
      posDataProviderId: 'Test string',
      posExternalAccountId: 'Test string',
    });
    /** Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource. */
    await gapi.client.content.liasettings.update(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        accountId: 'Test string',
        countrySettings: [
          {
            about: {
              status: 'Test string',
              url: 'Test string',
            },
            country: 'Test string',
            hostedLocalStorefrontActive: true,
            inventory: {
              inventoryVerificationContactEmail: 'Test string',
              inventoryVerificationContactName: 'Test string',
              inventoryVerificationContactStatus: 'Test string',
              status: 'Test string',
            },
            omnichannelExperience: {
              country: 'Test string',
              lsfType: 'Test string',
              pickupTypes: ['Test string'],
            },
            onDisplayToOrder: {
              shippingCostPolicyUrl: 'Test string',
              status: 'Test string',
            },
            posDataProvider: {
              posDataProviderId: 'Test string',
              posExternalAccountId: 'Test string',
            },
            storePickupActive: true,
          },
        ],
        kind: 'Test string',
      }
    );
    /** Updates local inventory for multiple products or stores in a single request. */
    await gapi.client.content.localinventory.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            localInventory: {
              availability: 'Test string',
              customAttributes: [
                {
                  groupValues: undefined,
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              instoreProductLocation: 'Test string',
              kind: 'Test string',
              pickupMethod: 'Test string',
              pickupSla: 'Test string',
              price: {
                currency: 'Test string',
                value: 'Test string',
              },
              quantity: 42,
              salePrice: {
                currency: 'Test string',
                value: 'Test string',
              },
              salePriceEffectiveDate: 'Test string',
              storeCode: 'Test string',
            },
            merchantId: 'Test string',
            method: 'Test string',
            productId: 'Test string',
          },
        ],
      }
    );
    /** Updates the local inventory of a product in your Merchant Center account. */
    await gapi.client.content.localinventory.insert(
      {
        merchantId: 'Test string',
        productId: 'Test string',
      },
      {
        availability: 'Test string',
        customAttributes: [
          {
            groupValues: undefined,
            name: 'Test string',
            value: 'Test string',
          },
        ],
        instoreProductLocation: 'Test string',
        kind: 'Test string',
        pickupMethod: 'Test string',
        pickupSla: 'Test string',
        price: {
          currency: 'Test string',
          value: 'Test string',
        },
        quantity: 42,
        salePrice: {
          currency: 'Test string',
          value: 'Test string',
        },
        salePriceEffectiveDate: 'Test string',
        storeCode: 'Test string',
      }
    );
    /** Provide a list of merchant's issues with a support content and available actions. This content and actions are meant to be rendered and shown in third-party applications. */
    await gapi.client.content.merchantsupport.renderaccountissues(
      {
        languageCode: 'Test string',
        merchantId: 'Test string',
        timeZone: 'Test string',
      },
      {
        contentOption: 'Test string',
        userInputActionOption: 'Test string',
      }
    );
    /** Provide a list of issues for merchant's product with a support content and available actions. This content and actions are meant to be rendered and shown in third-party applications. */
    await gapi.client.content.merchantsupport.renderproductissues(
      {
        languageCode: 'Test string',
        merchantId: 'Test string',
        productId: 'Test string',
        timeZone: 'Test string',
      },
      {
        contentOption: 'Test string',
        userInputActionOption: 'Test string',
      }
    );
    /** Start an action. The action can be requested by merchants in third-party application. Before merchants can request the action, the third-party application needs to show them action specific content and display a user input form. The action can be successfully started only once all `required` inputs are provided. If any `required` input is missing, or invalid value was provided, the service will return 400 error. Validation errors will contain Ids for all problematic field together with translated, human readable error messages that can be shown to the user. */
    await gapi.client.content.merchantsupport.triggeraction(
      {
        languageCode: 'Test string',
        merchantId: 'Test string',
      },
      {
        actionContext: 'Test string',
        actionInput: {
          actionFlowId: 'Test string',
          inputValues: [
            {
              checkboxInputValue: {
                value: true,
              },
              choiceInputValue: {
                choiceInputOptionId: 'Test string',
              },
              inputFieldId: 'Test string',
              textInputValue: {
                value: 'Test string',
              },
            },
          ],
        },
      }
    );
    /** Creates new order tracking signal. */
    await gapi.client.content.ordertrackingsignals.create(
      {
        merchantId: 'Test string',
      },
      {
        customerShippingFee: {
          currency: 'Test string',
          value: 'Test string',
        },
        deliveryPostalCode: 'Test string',
        deliveryRegionCode: 'Test string',
        lineItems: [
          {
            brand: 'Test string',
            gtin: 'Test string',
            lineItemId: 'Test string',
            mpn: 'Test string',
            productDescription: 'Test string',
            productId: 'Test string',
            productTitle: 'Test string',
            quantity: 'Test string',
            sku: 'Test string',
            upc: 'Test string',
          },
        ],
        merchantId: 'Test string',
        orderCreatedTime: {
          day: 42,
          hours: 42,
          minutes: 42,
          month: 42,
          nanos: 42,
          seconds: 42,
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          utcOffset: 'Test string',
          year: 42,
        },
        orderId: 'Test string',
        orderTrackingSignalId: 'Test string',
        shipmentLineItemMapping: [
          {
            lineItemId: 'Test string',
            quantity: 'Test string',
            shipmentId: 'Test string',
          },
        ],
        shippingInfo: [
          {
            actualDeliveryTime: {
              day: 42,
              hours: 42,
              minutes: 42,
              month: 42,
              nanos: 42,
              seconds: 42,
              timeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              utcOffset: 'Test string',
              year: 42,
            },
            carrierName: 'Test string',
            carrierServiceName: 'Test string',
            earliestDeliveryPromiseTime: {
              day: 42,
              hours: 42,
              minutes: 42,
              month: 42,
              nanos: 42,
              seconds: 42,
              timeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              utcOffset: 'Test string',
              year: 42,
            },
            latestDeliveryPromiseTime: {
              day: 42,
              hours: 42,
              minutes: 42,
              month: 42,
              nanos: 42,
              seconds: 42,
              timeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              utcOffset: 'Test string',
              year: 42,
            },
            originPostalCode: 'Test string',
            originRegionCode: 'Test string',
            shipmentId: 'Test string',
            shippedTime: {
              day: 42,
              hours: 42,
              minutes: 42,
              month: 42,
              nanos: 42,
              seconds: 42,
              timeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              utcOffset: 'Test string',
              year: 42,
            },
            shippingStatus: 'Test string',
            trackingId: 'Test string',
          },
        ],
      }
    );
    /** Batches multiple POS-related calls in a single request. */
    await gapi.client.content.pos.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            inventory: {
              contentLanguage: 'Test string',
              gtin: 'Test string',
              itemId: 'Test string',
              kind: 'Test string',
              pickupMethod: 'Test string',
              pickupSla: 'Test string',
              price: {
                currency: 'Test string',
                value: 'Test string',
              },
              quantity: 'Test string',
              storeCode: 'Test string',
              targetCountry: 'Test string',
              timestamp: 'Test string',
            },
            merchantId: 'Test string',
            method: 'Test string',
            sale: {
              contentLanguage: 'Test string',
              gtin: 'Test string',
              itemId: 'Test string',
              kind: 'Test string',
              price: {
                currency: 'Test string',
                value: 'Test string',
              },
              quantity: 'Test string',
              saleId: 'Test string',
              storeCode: 'Test string',
              targetCountry: 'Test string',
              timestamp: 'Test string',
            },
            store: {
              gcidCategory: ['Test string'],
              kind: 'Test string',
              matchingStatus: 'Test string',
              matchingStatusHint: 'Test string',
              phoneNumber: 'Test string',
              placeId: 'Test string',
              storeAddress: 'Test string',
              storeCode: 'Test string',
              storeName: 'Test string',
              websiteUrl: 'Test string',
            },
            storeCode: 'Test string',
            targetMerchantId: 'Test string',
          },
        ],
      }
    );
    /** Deletes a store for the given merchant. */
    await gapi.client.content.pos.delete({
      merchantId: 'Test string',
      storeCode: 'Test string',
      targetMerchantId: 'Test string',
    });
    /** Retrieves information about the given store. */
    await gapi.client.content.pos.get({
      merchantId: 'Test string',
      storeCode: 'Test string',
      targetMerchantId: 'Test string',
    });
    /** Creates a store for the given merchant. */
    await gapi.client.content.pos.insert(
      {
        merchantId: 'Test string',
        targetMerchantId: 'Test string',
      },
      {
        gcidCategory: ['Test string'],
        kind: 'Test string',
        matchingStatus: 'Test string',
        matchingStatusHint: 'Test string',
        phoneNumber: 'Test string',
        placeId: 'Test string',
        storeAddress: 'Test string',
        storeCode: 'Test string',
        storeName: 'Test string',
        websiteUrl: 'Test string',
      }
    );
    /** Submit inventory for the given merchant. */
    await gapi.client.content.pos.inventory(
      {
        merchantId: 'Test string',
        targetMerchantId: 'Test string',
      },
      {
        contentLanguage: 'Test string',
        gtin: 'Test string',
        itemId: 'Test string',
        pickupMethod: 'Test string',
        pickupSla: 'Test string',
        price: {
          currency: 'Test string',
          value: 'Test string',
        },
        quantity: 'Test string',
        storeCode: 'Test string',
        targetCountry: 'Test string',
        timestamp: 'Test string',
      }
    );
    /** Lists the stores of the target merchant. */
    await gapi.client.content.pos.list({
      merchantId: 'Test string',
      targetMerchantId: 'Test string',
    });
    /** Submit a sale event for the given merchant. */
    await gapi.client.content.pos.sale(
      {
        merchantId: 'Test string',
        targetMerchantId: 'Test string',
      },
      {
        contentLanguage: 'Test string',
        gtin: 'Test string',
        itemId: 'Test string',
        price: {
          currency: 'Test string',
          value: 'Test string',
        },
        quantity: 'Test string',
        saleId: 'Test string',
        storeCode: 'Test string',
        targetCountry: 'Test string',
        timestamp: 'Test string',
      }
    );
    /** Creates or updates the delivery time of a product. */
    await gapi.client.content.productdeliverytime.create(
      {
        merchantId: 'Test string',
      },
      {
        areaDeliveryTimes: [
          {
            deliveryArea: {
              countryCode: 'Test string',
              postalCodeRange: {
                firstPostalCode: 'Test string',
                lastPostalCode: 'Test string',
              },
              regionCode: 'Test string',
            },
            deliveryTime: {
              maxHandlingTimeDays: 42,
              maxTransitTimeDays: 42,
              minHandlingTimeDays: 42,
              minTransitTimeDays: 42,
            },
          },
        ],
        productId: {
          productId: 'Test string',
        },
      }
    );
    /** Deletes the delivery time of a product. */
    await gapi.client.content.productdeliverytime.delete({
      merchantId: 'Test string',
      productId: 'Test string',
    });
    /** Gets `productDeliveryTime` by `productId`. */
    await gapi.client.content.productdeliverytime.get({
      merchantId: 'Test string',
      productId: 'Test string',
    });
    /** Retrieves, inserts, and deletes multiple products in a single request. */
    await gapi.client.content.products.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            feedId: 'Test string',
            merchantId: 'Test string',
            method: 'Test string',
            product: {
              additionalImageLinks: ['Test string'],
              additionalSizeType: 'Test string',
              adsGrouping: 'Test string',
              adsLabels: ['Test string'],
              adsRedirect: 'Test string',
              adult: true,
              ageGroup: 'Test string',
              autoPricingMinPrice: {
                currency: 'Test string',
                value: 'Test string',
              },
              availability: 'Test string',
              availabilityDate: 'Test string',
              brand: 'Test string',
              canonicalLink: 'Test string',
              certifications: [
                {
                  certificationAuthority: 'Test string',
                  certificationCode: 'Test string',
                  certificationName: 'Test string',
                  certificationValue: 'Test string',
                },
              ],
              channel: 'Test string',
              cloudExportAdditionalProperties: [
                {
                  boolValue: true,
                  floatValue: [42],
                  intValue: ['Test string'],
                  maxValue: 42,
                  minValue: 42,
                  propertyName: 'Test string',
                  textValue: ['Test string'],
                  unitCode: 'Test string',
                },
              ],
              color: 'Test string',
              condition: 'Test string',
              contentLanguage: 'Test string',
              costOfGoodsSold: {
                currency: 'Test string',
                value: 'Test string',
              },
              customAttributes: [
                {
                  groupValues: undefined,
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              customLabel0: 'Test string',
              customLabel1: 'Test string',
              customLabel2: 'Test string',
              customLabel3: 'Test string',
              customLabel4: 'Test string',
              description: 'Test string',
              disclosureDate: 'Test string',
              displayAdsId: 'Test string',
              displayAdsLink: 'Test string',
              displayAdsSimilarIds: ['Test string'],
              displayAdsTitle: 'Test string',
              displayAdsValue: 42,
              energyEfficiencyClass: 'Test string',
              excludedDestinations: ['Test string'],
              expirationDate: 'Test string',
              externalSellerId: 'Test string',
              feedLabel: 'Test string',
              freeShippingThreshold: [
                {
                  country: 'Test string',
                  priceThreshold: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                },
              ],
              gender: 'Test string',
              googleProductCategory: 'Test string',
              gtin: 'Test string',
              id: 'Test string',
              identifierExists: true,
              imageLink: 'Test string',
              includedDestinations: ['Test string'],
              installment: {
                amount: {
                  currency: 'Test string',
                  value: 'Test string',
                },
                creditType: 'Test string',
                downpayment: {
                  currency: 'Test string',
                  value: 'Test string',
                },
                months: 'Test string',
              },
              isBundle: true,
              itemGroupId: 'Test string',
              kind: 'Test string',
              lifestyleImageLinks: ['Test string'],
              link: 'Test string',
              linkTemplate: 'Test string',
              loyaltyProgram: {
                cashbackForFutureUse: {
                  currency: 'Test string',
                  value: 'Test string',
                },
                loyaltyPoints: 'Test string',
                memberPriceEffectiveDate: 'Test string',
                price: {
                  currency: 'Test string',
                  value: 'Test string',
                },
                programLabel: 'Test string',
                shippingLabel: 'Test string',
                tierLabel: 'Test string',
              },
              loyaltyPrograms: [
                {
                  cashbackForFutureUse: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                  loyaltyPoints: 'Test string',
                  memberPriceEffectiveDate: 'Test string',
                  price: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                  programLabel: 'Test string',
                  shippingLabel: 'Test string',
                  tierLabel: 'Test string',
                },
              ],
              material: 'Test string',
              maxEnergyEfficiencyClass: 'Test string',
              maxHandlingTime: 'Test string',
              minEnergyEfficiencyClass: 'Test string',
              minHandlingTime: 'Test string',
              mobileLink: 'Test string',
              mobileLinkTemplate: 'Test string',
              mpn: 'Test string',
              multipack: 'Test string',
              offerId: 'Test string',
              pattern: 'Test string',
              pause: 'Test string',
              pickupMethod: 'Test string',
              pickupSla: 'Test string',
              price: {
                currency: 'Test string',
                value: 'Test string',
              },
              productDetails: [
                {
                  attributeName: 'Test string',
                  attributeValue: 'Test string',
                  sectionName: 'Test string',
                },
              ],
              productHeight: {
                unit: 'Test string',
                value: 42,
              },
              productHighlights: ['Test string'],
              productLength: {
                unit: 'Test string',
                value: 42,
              },
              productTypes: ['Test string'],
              productWeight: {
                unit: 'Test string',
                value: 42,
              },
              productWidth: {
                unit: 'Test string',
                value: 42,
              },
              promotionIds: ['Test string'],
              salePrice: {
                currency: 'Test string',
                value: 'Test string',
              },
              salePriceEffectiveDate: 'Test string',
              sellOnGoogleQuantity: 'Test string',
              shipping: [
                {
                  country: 'Test string',
                  locationGroupName: 'Test string',
                  locationId: 'Test string',
                  maxHandlingTime: 'Test string',
                  maxTransitTime: 'Test string',
                  minHandlingTime: 'Test string',
                  minTransitTime: 'Test string',
                  postalCode: 'Test string',
                  price: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                  region: 'Test string',
                  service: 'Test string',
                },
              ],
              shippingHeight: {
                unit: 'Test string',
                value: 42,
              },
              shippingLabel: 'Test string',
              shippingLength: {
                unit: 'Test string',
                value: 42,
              },
              shippingWeight: {
                unit: 'Test string',
                value: 42,
              },
              shippingWidth: {
                unit: 'Test string',
                value: 42,
              },
              shoppingAdsExcludedCountries: ['Test string'],
              sizes: ['Test string'],
              sizeSystem: 'Test string',
              sizeType: 'Test string',
              source: 'Test string',
              structuredDescription: {
                content: 'Test string',
                digitalSourceType: 'Test string',
              },
              structuredTitle: {
                content: 'Test string',
                digitalSourceType: 'Test string',
              },
              subscriptionCost: {
                amount: {
                  currency: 'Test string',
                  value: 'Test string',
                },
                period: 'Test string',
                periodLength: 'Test string',
              },
              targetCountry: 'Test string',
              taxCategory: 'Test string',
              taxes: [
                {
                  country: 'Test string',
                  locationId: 'Test string',
                  postalCode: 'Test string',
                  rate: 42,
                  region: 'Test string',
                  taxShip: true,
                },
              ],
              title: 'Test string',
              transitTimeLabel: 'Test string',
              unitPricingBaseMeasure: {
                unit: 'Test string',
                value: 'Test string',
              },
              unitPricingMeasure: {
                unit: 'Test string',
                value: 42,
              },
              virtualModelLink: 'Test string',
            },
            productId: 'Test string',
            updateMask: 'Test string',
          },
        ],
      }
    );
    /** Deletes a product from your Merchant Center account. */
    await gapi.client.content.products.delete({
      feedId: 'Test string',
      merchantId: 'Test string',
      productId: 'Test string',
    });
    /** Retrieves a product from your Merchant Center account. */
    await gapi.client.content.products.get({
      merchantId: 'Test string',
      productId: 'Test string',
    });
    /** Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry. */
    await gapi.client.content.products.insert(
      {
        feedId: 'Test string',
        merchantId: 'Test string',
      },
      {
        additionalImageLinks: ['Test string'],
        additionalSizeType: 'Test string',
        adsGrouping: 'Test string',
        adsLabels: ['Test string'],
        adsRedirect: 'Test string',
        adult: true,
        ageGroup: 'Test string',
        autoPricingMinPrice: {
          currency: 'Test string',
          value: 'Test string',
        },
        availability: 'Test string',
        availabilityDate: 'Test string',
        brand: 'Test string',
        canonicalLink: 'Test string',
        certifications: [
          {
            certificationAuthority: 'Test string',
            certificationCode: 'Test string',
            certificationName: 'Test string',
            certificationValue: 'Test string',
          },
        ],
        channel: 'Test string',
        cloudExportAdditionalProperties: [
          {
            boolValue: true,
            floatValue: [42],
            intValue: ['Test string'],
            maxValue: 42,
            minValue: 42,
            propertyName: 'Test string',
            textValue: ['Test string'],
            unitCode: 'Test string',
          },
        ],
        color: 'Test string',
        condition: 'Test string',
        contentLanguage: 'Test string',
        costOfGoodsSold: {
          currency: 'Test string',
          value: 'Test string',
        },
        customAttributes: [
          {
            groupValues: undefined,
            name: 'Test string',
            value: 'Test string',
          },
        ],
        customLabel0: 'Test string',
        customLabel1: 'Test string',
        customLabel2: 'Test string',
        customLabel3: 'Test string',
        customLabel4: 'Test string',
        description: 'Test string',
        disclosureDate: 'Test string',
        displayAdsId: 'Test string',
        displayAdsLink: 'Test string',
        displayAdsSimilarIds: ['Test string'],
        displayAdsTitle: 'Test string',
        displayAdsValue: 42,
        energyEfficiencyClass: 'Test string',
        excludedDestinations: ['Test string'],
        expirationDate: 'Test string',
        externalSellerId: 'Test string',
        feedLabel: 'Test string',
        freeShippingThreshold: [
          {
            country: 'Test string',
            priceThreshold: {
              currency: 'Test string',
              value: 'Test string',
            },
          },
        ],
        gender: 'Test string',
        googleProductCategory: 'Test string',
        gtin: 'Test string',
        id: 'Test string',
        identifierExists: true,
        imageLink: 'Test string',
        includedDestinations: ['Test string'],
        installment: {
          amount: {
            currency: 'Test string',
            value: 'Test string',
          },
          creditType: 'Test string',
          downpayment: {
            currency: 'Test string',
            value: 'Test string',
          },
          months: 'Test string',
        },
        isBundle: true,
        itemGroupId: 'Test string',
        kind: 'Test string',
        lifestyleImageLinks: ['Test string'],
        link: 'Test string',
        linkTemplate: 'Test string',
        loyaltyProgram: {
          cashbackForFutureUse: {
            currency: 'Test string',
            value: 'Test string',
          },
          loyaltyPoints: 'Test string',
          memberPriceEffectiveDate: 'Test string',
          price: {
            currency: 'Test string',
            value: 'Test string',
          },
          programLabel: 'Test string',
          shippingLabel: 'Test string',
          tierLabel: 'Test string',
        },
        loyaltyPrograms: [
          {
            cashbackForFutureUse: {
              currency: 'Test string',
              value: 'Test string',
            },
            loyaltyPoints: 'Test string',
            memberPriceEffectiveDate: 'Test string',
            price: {
              currency: 'Test string',
              value: 'Test string',
            },
            programLabel: 'Test string',
            shippingLabel: 'Test string',
            tierLabel: 'Test string',
          },
        ],
        material: 'Test string',
        maxEnergyEfficiencyClass: 'Test string',
        maxHandlingTime: 'Test string',
        minEnergyEfficiencyClass: 'Test string',
        minHandlingTime: 'Test string',
        mobileLink: 'Test string',
        mobileLinkTemplate: 'Test string',
        mpn: 'Test string',
        multipack: 'Test string',
        offerId: 'Test string',
        pattern: 'Test string',
        pause: 'Test string',
        pickupMethod: 'Test string',
        pickupSla: 'Test string',
        price: {
          currency: 'Test string',
          value: 'Test string',
        },
        productDetails: [
          {
            attributeName: 'Test string',
            attributeValue: 'Test string',
            sectionName: 'Test string',
          },
        ],
        productHeight: {
          unit: 'Test string',
          value: 42,
        },
        productHighlights: ['Test string'],
        productLength: {
          unit: 'Test string',
          value: 42,
        },
        productTypes: ['Test string'],
        productWeight: {
          unit: 'Test string',
          value: 42,
        },
        productWidth: {
          unit: 'Test string',
          value: 42,
        },
        promotionIds: ['Test string'],
        salePrice: {
          currency: 'Test string',
          value: 'Test string',
        },
        salePriceEffectiveDate: 'Test string',
        sellOnGoogleQuantity: 'Test string',
        shipping: [
          {
            country: 'Test string',
            locationGroupName: 'Test string',
            locationId: 'Test string',
            maxHandlingTime: 'Test string',
            maxTransitTime: 'Test string',
            minHandlingTime: 'Test string',
            minTransitTime: 'Test string',
            postalCode: 'Test string',
            price: {
              currency: 'Test string',
              value: 'Test string',
            },
            region: 'Test string',
            service: 'Test string',
          },
        ],
        shippingHeight: {
          unit: 'Test string',
          value: 42,
        },
        shippingLabel: 'Test string',
        shippingLength: {
          unit: 'Test string',
          value: 42,
        },
        shippingWeight: {
          unit: 'Test string',
          value: 42,
        },
        shippingWidth: {
          unit: 'Test string',
          value: 42,
        },
        shoppingAdsExcludedCountries: ['Test string'],
        sizes: ['Test string'],
        sizeSystem: 'Test string',
        sizeType: 'Test string',
        source: 'Test string',
        structuredDescription: {
          content: 'Test string',
          digitalSourceType: 'Test string',
        },
        structuredTitle: {
          content: 'Test string',
          digitalSourceType: 'Test string',
        },
        subscriptionCost: {
          amount: {
            currency: 'Test string',
            value: 'Test string',
          },
          period: 'Test string',
          periodLength: 'Test string',
        },
        targetCountry: 'Test string',
        taxCategory: 'Test string',
        taxes: [
          {
            country: 'Test string',
            locationId: 'Test string',
            postalCode: 'Test string',
            rate: 42,
            region: 'Test string',
            taxShip: true,
          },
        ],
        title: 'Test string',
        transitTimeLabel: 'Test string',
        unitPricingBaseMeasure: {
          unit: 'Test string',
          value: 'Test string',
        },
        unitPricingMeasure: {
          unit: 'Test string',
          value: 42,
        },
        virtualModelLink: 'Test string',
      }
    );
    /** Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested. */
    await gapi.client.content.products.list({
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Updates an existing product in your Merchant Center account. Only updates attributes provided in the request. */
    await gapi.client.content.products.update(
      {
        merchantId: 'Test string',
        productId: 'Test string',
        updateMask: 'Test string',
      },
      {
        additionalImageLinks: ['Test string'],
        additionalSizeType: 'Test string',
        adsGrouping: 'Test string',
        adsLabels: ['Test string'],
        adsRedirect: 'Test string',
        adult: true,
        ageGroup: 'Test string',
        autoPricingMinPrice: {
          currency: 'Test string',
          value: 'Test string',
        },
        availability: 'Test string',
        availabilityDate: 'Test string',
        brand: 'Test string',
        canonicalLink: 'Test string',
        certifications: [
          {
            certificationAuthority: 'Test string',
            certificationCode: 'Test string',
            certificationName: 'Test string',
            certificationValue: 'Test string',
          },
        ],
        channel: 'Test string',
        cloudExportAdditionalProperties: [
          {
            boolValue: true,
            floatValue: [42],
            intValue: ['Test string'],
            maxValue: 42,
            minValue: 42,
            propertyName: 'Test string',
            textValue: ['Test string'],
            unitCode: 'Test string',
          },
        ],
        color: 'Test string',
        condition: 'Test string',
        contentLanguage: 'Test string',
        costOfGoodsSold: {
          currency: 'Test string',
          value: 'Test string',
        },
        customAttributes: [
          {
            groupValues: undefined,
            name: 'Test string',
            value: 'Test string',
          },
        ],
        customLabel0: 'Test string',
        customLabel1: 'Test string',
        customLabel2: 'Test string',
        customLabel3: 'Test string',
        customLabel4: 'Test string',
        description: 'Test string',
        disclosureDate: 'Test string',
        displayAdsId: 'Test string',
        displayAdsLink: 'Test string',
        displayAdsSimilarIds: ['Test string'],
        displayAdsTitle: 'Test string',
        displayAdsValue: 42,
        energyEfficiencyClass: 'Test string',
        excludedDestinations: ['Test string'],
        expirationDate: 'Test string',
        externalSellerId: 'Test string',
        feedLabel: 'Test string',
        freeShippingThreshold: [
          {
            country: 'Test string',
            priceThreshold: {
              currency: 'Test string',
              value: 'Test string',
            },
          },
        ],
        gender: 'Test string',
        googleProductCategory: 'Test string',
        gtin: 'Test string',
        id: 'Test string',
        identifierExists: true,
        imageLink: 'Test string',
        includedDestinations: ['Test string'],
        installment: {
          amount: {
            currency: 'Test string',
            value: 'Test string',
          },
          creditType: 'Test string',
          downpayment: {
            currency: 'Test string',
            value: 'Test string',
          },
          months: 'Test string',
        },
        isBundle: true,
        itemGroupId: 'Test string',
        kind: 'Test string',
        lifestyleImageLinks: ['Test string'],
        link: 'Test string',
        linkTemplate: 'Test string',
        loyaltyProgram: {
          cashbackForFutureUse: {
            currency: 'Test string',
            value: 'Test string',
          },
          loyaltyPoints: 'Test string',
          memberPriceEffectiveDate: 'Test string',
          price: {
            currency: 'Test string',
            value: 'Test string',
          },
          programLabel: 'Test string',
          shippingLabel: 'Test string',
          tierLabel: 'Test string',
        },
        loyaltyPrograms: [
          {
            cashbackForFutureUse: {
              currency: 'Test string',
              value: 'Test string',
            },
            loyaltyPoints: 'Test string',
            memberPriceEffectiveDate: 'Test string',
            price: {
              currency: 'Test string',
              value: 'Test string',
            },
            programLabel: 'Test string',
            shippingLabel: 'Test string',
            tierLabel: 'Test string',
          },
        ],
        material: 'Test string',
        maxEnergyEfficiencyClass: 'Test string',
        maxHandlingTime: 'Test string',
        minEnergyEfficiencyClass: 'Test string',
        minHandlingTime: 'Test string',
        mobileLink: 'Test string',
        mobileLinkTemplate: 'Test string',
        mpn: 'Test string',
        multipack: 'Test string',
        offerId: 'Test string',
        pattern: 'Test string',
        pause: 'Test string',
        pickupMethod: 'Test string',
        pickupSla: 'Test string',
        price: {
          currency: 'Test string',
          value: 'Test string',
        },
        productDetails: [
          {
            attributeName: 'Test string',
            attributeValue: 'Test string',
            sectionName: 'Test string',
          },
        ],
        productHeight: {
          unit: 'Test string',
          value: 42,
        },
        productHighlights: ['Test string'],
        productLength: {
          unit: 'Test string',
          value: 42,
        },
        productTypes: ['Test string'],
        productWeight: {
          unit: 'Test string',
          value: 42,
        },
        productWidth: {
          unit: 'Test string',
          value: 42,
        },
        promotionIds: ['Test string'],
        salePrice: {
          currency: 'Test string',
          value: 'Test string',
        },
        salePriceEffectiveDate: 'Test string',
        sellOnGoogleQuantity: 'Test string',
        shipping: [
          {
            country: 'Test string',
            locationGroupName: 'Test string',
            locationId: 'Test string',
            maxHandlingTime: 'Test string',
            maxTransitTime: 'Test string',
            minHandlingTime: 'Test string',
            minTransitTime: 'Test string',
            postalCode: 'Test string',
            price: {
              currency: 'Test string',
              value: 'Test string',
            },
            region: 'Test string',
            service: 'Test string',
          },
        ],
        shippingHeight: {
          unit: 'Test string',
          value: 42,
        },
        shippingLabel: 'Test string',
        shippingLength: {
          unit: 'Test string',
          value: 42,
        },
        shippingWeight: {
          unit: 'Test string',
          value: 42,
        },
        shippingWidth: {
          unit: 'Test string',
          value: 42,
        },
        shoppingAdsExcludedCountries: ['Test string'],
        sizes: ['Test string'],
        sizeSystem: 'Test string',
        sizeType: 'Test string',
        source: 'Test string',
        structuredDescription: {
          content: 'Test string',
          digitalSourceType: 'Test string',
        },
        structuredTitle: {
          content: 'Test string',
          digitalSourceType: 'Test string',
        },
        subscriptionCost: {
          amount: {
            currency: 'Test string',
            value: 'Test string',
          },
          period: 'Test string',
          periodLength: 'Test string',
        },
        targetCountry: 'Test string',
        taxCategory: 'Test string',
        taxes: [
          {
            country: 'Test string',
            locationId: 'Test string',
            postalCode: 'Test string',
            rate: 42,
            region: 'Test string',
            taxShip: true,
          },
        ],
        title: 'Test string',
        transitTimeLabel: 'Test string',
        unitPricingBaseMeasure: {
          unit: 'Test string',
          value: 'Test string',
        },
        unitPricingMeasure: {
          unit: 'Test string',
          value: 42,
        },
        virtualModelLink: 'Test string',
      }
    );
    /** Gets the statuses of multiple products in a single request. */
    await gapi.client.content.productstatuses.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            destinations: ['Test string'],
            includeAttributes: true,
            merchantId: 'Test string',
            method: 'Test string',
            productId: 'Test string',
          },
        ],
      }
    );
    /** Gets the status of a product from your Merchant Center account. */
    await gapi.client.content.productstatuses.get({
      destinations: 'Test string',
      merchantId: 'Test string',
      productId: 'Test string',
    });
    /** Lists the statuses of the products in your Merchant Center account. */
    await gapi.client.content.productstatuses.list({
      destinations: 'Test string',
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Inserts a promotion for your Merchant Center account. If the promotion already exists, then it updates the promotion instead. To [end or delete] (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion) a promotion update the time period of the promotion to a time that has already passed. */
    await gapi.client.content.promotions.create(
      {
        merchantId: 'Test string',
      },
      {
        brand: ['Test string'],
        brandExclusion: ['Test string'],
        contentLanguage: 'Test string',
        couponValueType: 'Test string',
        freeGiftDescription: 'Test string',
        freeGiftItemId: 'Test string',
        freeGiftValue: {
          currency: 'Test string',
          value: 'Test string',
        },
        genericRedemptionCode: 'Test string',
        getThisQuantityDiscounted: 42,
        id: 'Test string',
        itemGroupId: ['Test string'],
        itemGroupIdExclusion: ['Test string'],
        itemId: ['Test string'],
        itemIdExclusion: ['Test string'],
        limitQuantity: 42,
        limitValue: {
          currency: 'Test string',
          value: 'Test string',
        },
        longTitle: 'Test string',
        minimumPurchaseAmount: {
          currency: 'Test string',
          value: 'Test string',
        },
        minimumPurchaseQuantity: 42,
        moneyBudget: {
          currency: 'Test string',
          value: 'Test string',
        },
        moneyOffAmount: {
          currency: 'Test string',
          value: 'Test string',
        },
        offerType: 'Test string',
        orderLimit: 42,
        percentOff: 42,
        productApplicability: 'Test string',
        productType: ['Test string'],
        productTypeExclusion: ['Test string'],
        promotionDestinationIds: ['Test string'],
        promotionDisplayDates: 'Test string',
        promotionDisplayTimePeriod: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
        promotionEffectiveDates: 'Test string',
        promotionEffectiveTimePeriod: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
        promotionId: 'Test string',
        promotionStatus: {
          creationDate: 'Test string',
          destinationStatuses: [
            {
              destination: 'Test string',
              status: 'Test string',
            },
          ],
          lastUpdateDate: 'Test string',
          promotionIssue: [
            {
              code: 'Test string',
              detail: 'Test string',
            },
          ],
        },
        promotionUrl: 'Test string',
        redemptionChannel: ['Test string'],
        shippingServiceNames: ['Test string'],
        storeApplicability: 'Test string',
        storeCode: ['Test string'],
        storeCodeExclusion: ['Test string'],
        targetCountry: 'Test string',
      }
    );
    /** Retrieves a promotion from your Merchant Center account. */
    await gapi.client.content.promotions.get({
      id: 'Test string',
      merchantId: 'Test string',
    });
    /** List all promotions from your Merchant Center account. */
    await gapi.client.content.promotions.list({
      countryCode: 'Test string',
      languageCode: 'Test string',
      merchantId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Retrieves a Merchant Center account's pubsub notification settings. */
    await gapi.client.content.pubsubnotificationsettings.get({
      merchantId: 'Test string',
    });
    /** Register a Merchant Center account for pubsub notifications. Note that cloud topic name shouldn't be provided as part of the request. */
    await gapi.client.content.pubsubnotificationsettings.update(
      {
        merchantId: 'Test string',
      },
      {
        cloudTopicName: 'Test string',
        kind: 'Test string',
        registeredEvents: ['Test string'],
      }
    );
    /** Lists the daily call quota and usage per method for your Merchant Center account. */
    await gapi.client.content.quotas.list({
      merchantId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Generates recommendations for a merchant. */
    await gapi.client.content.recommendations.generate({
      allowedTag: 'Test string',
      languageCode: 'Test string',
      merchantId: 'Test string',
    });
    /** Reports an interaction on a recommendation for a merchant. */
    await gapi.client.content.recommendations.reportInteraction(
      {
        merchantId: 'Test string',
      },
      {
        interactionType: 'Test string',
        responseToken: 'Test string',
        subtype: 'Test string',
        type: 'Test string',
      }
    );
    /** Updates regional inventory for multiple products or regions in a single request. */
    await gapi.client.content.regionalinventory.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            merchantId: 'Test string',
            method: 'Test string',
            productId: 'Test string',
            regionalInventory: {
              availability: 'Test string',
              customAttributes: [
                {
                  groupValues: undefined,
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              kind: 'Test string',
              price: {
                currency: 'Test string',
                value: 'Test string',
              },
              regionId: 'Test string',
              salePrice: {
                currency: 'Test string',
                value: 'Test string',
              },
              salePriceEffectiveDate: 'Test string',
            },
          },
        ],
      }
    );
    /** Updates the regional inventory of a product in your Merchant Center account. If a regional inventory with the same region ID already exists, this method updates that entry. */
    await gapi.client.content.regionalinventory.insert(
      {
        merchantId: 'Test string',
        productId: 'Test string',
      },
      {
        availability: 'Test string',
        customAttributes: [
          {
            groupValues: undefined,
            name: 'Test string',
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        price: {
          currency: 'Test string',
          value: 'Test string',
        },
        regionId: 'Test string',
        salePrice: {
          currency: 'Test string',
          value: 'Test string',
        },
        salePriceEffectiveDate: 'Test string',
      }
    );
    /** Creates a region definition in your Merchant Center account. */
    await gapi.client.content.regions.create(
      {
        merchantId: 'Test string',
        regionId: 'Test string',
      },
      {
        displayName: 'Test string',
        geotargetArea: {
          geotargetCriteriaIds: ['Test string'],
        },
        merchantId: 'Test string',
        postalCodeArea: {
          postalCodes: [
            {
              begin: 'Test string',
              end: 'Test string',
            },
          ],
          regionCode: 'Test string',
        },
        regionalInventoryEligible: true,
        regionId: 'Test string',
        shippingEligible: true,
      }
    );
    /** Deletes a region definition from your Merchant Center account. */
    await gapi.client.content.regions.delete({
      merchantId: 'Test string',
      regionId: 'Test string',
    });
    /** Retrieves a region defined in your Merchant Center account. */
    await gapi.client.content.regions.get({
      merchantId: 'Test string',
      regionId: 'Test string',
    });
    /** Lists the regions in your Merchant Center account. */
    await gapi.client.content.regions.list({
      merchantId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a region definition in your Merchant Center account. */
    await gapi.client.content.regions.patch(
      {
        merchantId: 'Test string',
        regionId: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        geotargetArea: {
          geotargetCriteriaIds: ['Test string'],
        },
        merchantId: 'Test string',
        postalCodeArea: {
          postalCodes: [
            {
              begin: 'Test string',
              end: 'Test string',
            },
          ],
          regionCode: 'Test string',
        },
        regionalInventoryEligible: true,
        regionId: 'Test string',
        shippingEligible: true,
      }
    );
    /** Retrieves merchant performance metrics matching the search query and optionally segmented by selected dimensions. */
    await gapi.client.content.reports.search(
      {
        merchantId: 'Test string',
      },
      {
        pageSize: 42,
        pageToken: 'Test string',
        query: 'Test string',
      }
    );
    /** Batches multiple return address related calls in a single request. */
    await gapi.client.content.returnaddress.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            merchantId: 'Test string',
            method: 'Test string',
            returnAddress: {
              address: {
                country: 'Test string',
                locality: 'Test string',
                postalCode: 'Test string',
                recipientName: 'Test string',
                region: 'Test string',
                streetAddress: ['Test string'],
              },
              country: 'Test string',
              kind: 'Test string',
              label: 'Test string',
              phoneNumber: 'Test string',
              returnAddressId: 'Test string',
            },
            returnAddressId: 'Test string',
          },
        ],
      }
    );
    /** Deletes a return address for the given Merchant Center account. */
    await gapi.client.content.returnaddress.delete({
      merchantId: 'Test string',
      returnAddressId: 'Test string',
    });
    /** Gets a return address of the Merchant Center account. */
    await gapi.client.content.returnaddress.get({
      merchantId: 'Test string',
      returnAddressId: 'Test string',
    });
    /** Inserts a return address for the Merchant Center account. */
    await gapi.client.content.returnaddress.insert(
      {
        merchantId: 'Test string',
      },
      {
        address: {
          country: 'Test string',
          locality: 'Test string',
          postalCode: 'Test string',
          recipientName: 'Test string',
          region: 'Test string',
          streetAddress: ['Test string'],
        },
        country: 'Test string',
        kind: 'Test string',
        label: 'Test string',
        phoneNumber: 'Test string',
        returnAddressId: 'Test string',
      }
    );
    /** Lists the return addresses of the Merchant Center account. */
    await gapi.client.content.returnaddress.list({
      country: 'Test string',
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Batches multiple return policy related calls in a single request. */
    await gapi.client.content.returnpolicy.custombatch(
      {},
      {
        entries: [
          {
            batchId: 42,
            merchantId: 'Test string',
            method: 'Test string',
            returnPolicy: {
              country: 'Test string',
              kind: 'Test string',
              label: 'Test string',
              name: 'Test string',
              nonFreeReturnReasons: ['Test string'],
              policy: {
                lastReturnDate: 'Test string',
                numberOfDays: 'Test string',
                type: 'Test string',
              },
              returnPolicyId: 'Test string',
              returnShippingFee: {
                currency: 'Test string',
                value: 'Test string',
              },
              seasonalOverrides: [
                {
                  endDate: 'Test string',
                  name: 'Test string',
                  policy: {
                    lastReturnDate: 'Test string',
                    numberOfDays: 'Test string',
                    type: 'Test string',
                  },
                  startDate: 'Test string',
                },
              ],
            },
            returnPolicyId: 'Test string',
          },
        ],
      }
    );
    /** Deletes a return policy for the given Merchant Center account. */
    await gapi.client.content.returnpolicy.delete({
      merchantId: 'Test string',
      returnPolicyId: 'Test string',
    });
    /** Gets a return policy of the Merchant Center account. */
    await gapi.client.content.returnpolicy.get({
      merchantId: 'Test string',
      returnPolicyId: 'Test string',
    });
    /** Inserts a return policy for the Merchant Center account. */
    await gapi.client.content.returnpolicy.insert(
      {
        merchantId: 'Test string',
      },
      {
        country: 'Test string',
        kind: 'Test string',
        label: 'Test string',
        name: 'Test string',
        nonFreeReturnReasons: ['Test string'],
        policy: {
          lastReturnDate: 'Test string',
          numberOfDays: 'Test string',
          type: 'Test string',
        },
        returnPolicyId: 'Test string',
        returnShippingFee: {
          currency: 'Test string',
          value: 'Test string',
        },
        seasonalOverrides: [
          {
            endDate: 'Test string',
            name: 'Test string',
            policy: {
              lastReturnDate: 'Test string',
              numberOfDays: 'Test string',
              type: 'Test string',
            },
            startDate: 'Test string',
          },
        ],
      }
    );
    /** Lists the return policies of the Merchant Center account. */
    await gapi.client.content.returnpolicy.list({
      merchantId: 'Test string',
    });
    /** Creates a new return policy. */
    await gapi.client.content.returnpolicyonline.create(
      {
        merchantId: 'Test string',
      },
      {
        countries: ['Test string'],
        itemConditions: ['Test string'],
        label: 'Test string',
        name: 'Test string',
        policy: {
          days: 'Test string',
          type: 'Test string',
        },
        restockingFee: {
          fixedFee: {
            currency: 'Test string',
            value: 'Test string',
          },
          microPercent: 42,
        },
        returnMethods: ['Test string'],
        returnPolicyId: 'Test string',
        returnPolicyUri: 'Test string',
        returnReasonCategoryInfo: [
          {
            returnLabelSource: 'Test string',
            returnReasonCategory: 'Test string',
            returnShippingFee: {
              fixedFee: {
                currency: 'Test string',
                value: 'Test string',
              },
              type: 'Test string',
            },
          },
        ],
      }
    );
    /** Deletes an existing return policy. */
    await gapi.client.content.returnpolicyonline.delete({
      merchantId: 'Test string',
      returnPolicyId: 'Test string',
    });
    /** Gets an existing return policy. */
    await gapi.client.content.returnpolicyonline.get({
      merchantId: 'Test string',
      returnPolicyId: 'Test string',
    });
    /** Lists all existing return policies. */
    await gapi.client.content.returnpolicyonline.list({
      merchantId: 'Test string',
    });
    /** Updates an existing return policy. */
    await gapi.client.content.returnpolicyonline.patch(
      {
        merchantId: 'Test string',
        returnPolicyId: 'Test string',
      },
      {
        countries: ['Test string'],
        itemConditions: ['Test string'],
        label: 'Test string',
        name: 'Test string',
        policy: {
          days: 'Test string',
          type: 'Test string',
        },
        restockingFee: {
          fixedFee: {
            currency: 'Test string',
            value: 'Test string',
          },
          microPercent: 42,
        },
        returnMethods: ['Test string'],
        returnPolicyId: 'Test string',
        returnPolicyUri: 'Test string',
        returnReasonCategoryInfo: [
          {
            returnLabelSource: 'Test string',
            returnReasonCategory: 'Test string',
            returnShippingFee: {
              fixedFee: {
                currency: 'Test string',
                value: 'Test string',
              },
              type: 'Test string',
            },
          },
        ],
      }
    );
    /** Retrieves and updates the shipping settings of multiple accounts in a single request. */
    await gapi.client.content.shippingsettings.custombatch(
      {},
      {
        entries: [
          {
            accountId: 'Test string',
            batchId: 42,
            merchantId: 'Test string',
            method: 'Test string',
            shippingSettings: {
              accountId: 'Test string',
              postalCodeGroups: [
                {
                  country: 'Test string',
                  name: 'Test string',
                  postalCodeRanges: [
                    {
                      postalCodeRangeBegin: 'Test string',
                      postalCodeRangeEnd: 'Test string',
                    },
                  ],
                },
              ],
              services: [
                {
                  active: true,
                  currency: 'Test string',
                  deliveryCountry: 'Test string',
                  deliveryTime: {
                    cutoffTime: {
                      hour: 42,
                      minute: 42,
                      timezone: 'Test string',
                    },
                    handlingBusinessDayConfig: {
                      businessDays: ['Test string'],
                    },
                    holidayCutoffs: [
                      {
                        deadlineDate: 'Test string',
                        deadlineHour: 42,
                        deadlineTimezone: 'Test string',
                        holidayId: 'Test string',
                        visibleFromDate: 'Test string',
                      },
                    ],
                    maxHandlingTimeInDays: 42,
                    maxTransitTimeInDays: 42,
                    minHandlingTimeInDays: 42,
                    minTransitTimeInDays: 42,
                    transitBusinessDayConfig: {
                      businessDays: ['Test string'],
                    },
                    transitTimeTable: {
                      postalCodeGroupNames: ['Test string'],
                      rows: [
                        {
                          values: [
                            {
                              maxTransitTimeInDays: 42,
                              minTransitTimeInDays: 42,
                            },
                          ],
                        },
                      ],
                      transitTimeLabels: ['Test string'],
                    },
                    warehouseBasedDeliveryTimes: [
                      {
                        carrier: 'Test string',
                        carrierService: 'Test string',
                        originAdministrativeArea: 'Test string',
                        originCity: 'Test string',
                        originCountry: 'Test string',
                        originPostalCode: 'Test string',
                        originStreetAddress: 'Test string',
                        warehouseName: 'Test string',
                      },
                    ],
                  },
                  eligibility: 'Test string',
                  minimumOrderValue: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                  minimumOrderValueTable: {
                    storeCodeSetWithMovs: [
                      {
                        storeCodes: ['Test string'],
                        value: {
                          currency: 'Test string',
                          value: 'Test string',
                        },
                      },
                    ],
                  },
                  name: 'Test string',
                  pickupService: {
                    carrierName: 'Test string',
                    serviceName: 'Test string',
                  },
                  rateGroups: [
                    {
                      applicableShippingLabels: ['Test string'],
                      carrierRates: [
                        {
                          carrierName: 'Test string',
                          carrierService: 'Test string',
                          flatAdjustment: {
                            currency: 'Test string',
                            value: 'Test string',
                          },
                          name: 'Test string',
                          originPostalCode: 'Test string',
                          percentageAdjustment: 'Test string',
                        },
                      ],
                      mainTable: {
                        columnHeaders: {
                          locations: [
                            {
                              locationIds: ['Test string'],
                            },
                          ],
                          numberOfItems: ['Test string'],
                          postalCodeGroupNames: ['Test string'],
                          prices: [
                            {
                              currency: 'Test string',
                              value: 'Test string',
                            },
                          ],
                          weights: [
                            {
                              unit: 'Test string',
                              value: 'Test string',
                            },
                          ],
                        },
                        name: 'Test string',
                        rowHeaders: {
                          locations: [
                            {
                              locationIds: ['Test string'],
                            },
                          ],
                          numberOfItems: ['Test string'],
                          postalCodeGroupNames: ['Test string'],
                          prices: [
                            {
                              currency: 'Test string',
                              value: 'Test string',
                            },
                          ],
                          weights: [
                            {
                              unit: 'Test string',
                              value: 'Test string',
                            },
                          ],
                        },
                        rows: [
                          {
                            cells: [
                              {
                                carrierRateName: 'Test string',
                                flatRate: {
                                  currency: 'Test string',
                                  value: 'Test string',
                                },
                                noShipping: true,
                                pricePercentage: 'Test string',
                                subtableName: 'Test string',
                              },
                            ],
                          },
                        ],
                      },
                      name: 'Test string',
                      singleValue: {
                        carrierRateName: 'Test string',
                        flatRate: {
                          currency: 'Test string',
                          value: 'Test string',
                        },
                        noShipping: true,
                        pricePercentage: 'Test string',
                        subtableName: 'Test string',
                      },
                      subtables: [
                        {
                          columnHeaders: {
                            locations: [
                              {
                                locationIds: ['Test string'],
                              },
                            ],
                            numberOfItems: ['Test string'],
                            postalCodeGroupNames: ['Test string'],
                            prices: [
                              {
                                currency: 'Test string',
                                value: 'Test string',
                              },
                            ],
                            weights: [
                              {
                                unit: 'Test string',
                                value: 'Test string',
                              },
                            ],
                          },
                          name: 'Test string',
                          rowHeaders: {
                            locations: [
                              {
                                locationIds: ['Test string'],
                              },
                            ],
                            numberOfItems: ['Test string'],
                            postalCodeGroupNames: ['Test string'],
                            prices: [
                              {
                                currency: 'Test string',
                                value: 'Test string',
                              },
                            ],
                            weights: [
                              {
                                unit: 'Test string',
                                value: 'Test string',
                              },
                            ],
                          },
                          rows: [
                            {
                              cells: [
                                {
                                  carrierRateName: 'Test string',
                                  flatRate: {
                                    currency: 'Test string',
                                    value: 'Test string',
                                  },
                                  noShipping: true,
                                  pricePercentage: 'Test string',
                                  subtableName: 'Test string',
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                  shipmentType: 'Test string',
                  storeConfig: {
                    cutoffConfig: {
                      localCutoffTime: {
                        hour: 'Test string',
                        minute: 'Test string',
                      },
                      noDeliveryPostCutoff: true,
                      storeCloseOffsetHours: 'Test string',
                    },
                    serviceRadius: {
                      unit: 'Test string',
                      value: 'Test string',
                    },
                    storeCodes: ['Test string'],
                    storeServiceType: 'Test string',
                  },
                },
              ],
              warehouses: [
                {
                  businessDayConfig: {
                    businessDays: ['Test string'],
                  },
                  cutoffTime: {
                    hour: 42,
                    minute: 42,
                  },
                  handlingDays: 'Test string',
                  name: 'Test string',
                  shippingAddress: {
                    administrativeArea: 'Test string',
                    city: 'Test string',
                    country: 'Test string',
                    postalCode: 'Test string',
                    streetAddress: 'Test string',
                  },
                },
              ],
            },
          },
        ],
      }
    );
    /** Retrieves the shipping settings of the account. */
    await gapi.client.content.shippingsettings.get({
      accountId: 'Test string',
      merchantId: 'Test string',
    });
    /** Retrieves supported carriers and carrier services for an account. */
    await gapi.client.content.shippingsettings.getsupportedcarriers({
      merchantId: 'Test string',
    });
    /** Retrieves supported holidays for an account. */
    await gapi.client.content.shippingsettings.getsupportedholidays({
      merchantId: 'Test string',
    });
    /** Retrieves supported pickup services for an account. */
    await gapi.client.content.shippingsettings.getsupportedpickupservices({
      merchantId: 'Test string',
    });
    /** Lists the shipping settings of the sub-accounts in your Merchant Center account. */
    await gapi.client.content.shippingsettings.list({
      maxResults: 42,
      merchantId: 'Test string',
      pageToken: 'Test string',
    });
    /** Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource. */
    await gapi.client.content.shippingsettings.update(
      {
        accountId: 'Test string',
        merchantId: 'Test string',
      },
      {
        accountId: 'Test string',
        postalCodeGroups: [
          {
            country: 'Test string',
            name: 'Test string',
            postalCodeRanges: [
              {
                postalCodeRangeBegin: 'Test string',
                postalCodeRangeEnd: 'Test string',
              },
            ],
          },
        ],
        services: [
          {
            active: true,
            currency: 'Test string',
            deliveryCountry: 'Test string',
            deliveryTime: {
              cutoffTime: {
                hour: 42,
                minute: 42,
                timezone: 'Test string',
              },
              handlingBusinessDayConfig: {
                businessDays: ['Test string'],
              },
              holidayCutoffs: [
                {
                  deadlineDate: 'Test string',
                  deadlineHour: 42,
                  deadlineTimezone: 'Test string',
                  holidayId: 'Test string',
                  visibleFromDate: 'Test string',
                },
              ],
              maxHandlingTimeInDays: 42,
              maxTransitTimeInDays: 42,
              minHandlingTimeInDays: 42,
              minTransitTimeInDays: 42,
              transitBusinessDayConfig: {
                businessDays: ['Test string'],
              },
              transitTimeTable: {
                postalCodeGroupNames: ['Test string'],
                rows: [
                  {
                    values: [
                      {
                        maxTransitTimeInDays: 42,
                        minTransitTimeInDays: 42,
                      },
                    ],
                  },
                ],
                transitTimeLabels: ['Test string'],
              },
              warehouseBasedDeliveryTimes: [
                {
                  carrier: 'Test string',
                  carrierService: 'Test string',
                  originAdministrativeArea: 'Test string',
                  originCity: 'Test string',
                  originCountry: 'Test string',
                  originPostalCode: 'Test string',
                  originStreetAddress: 'Test string',
                  warehouseName: 'Test string',
                },
              ],
            },
            eligibility: 'Test string',
            minimumOrderValue: {
              currency: 'Test string',
              value: 'Test string',
            },
            minimumOrderValueTable: {
              storeCodeSetWithMovs: [
                {
                  storeCodes: ['Test string'],
                  value: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                },
              ],
            },
            name: 'Test string',
            pickupService: {
              carrierName: 'Test string',
              serviceName: 'Test string',
            },
            rateGroups: [
              {
                applicableShippingLabels: ['Test string'],
                carrierRates: [
                  {
                    carrierName: 'Test string',
                    carrierService: 'Test string',
                    flatAdjustment: {
                      currency: 'Test string',
                      value: 'Test string',
                    },
                    name: 'Test string',
                    originPostalCode: 'Test string',
                    percentageAdjustment: 'Test string',
                  },
                ],
                mainTable: {
                  columnHeaders: {
                    locations: [
                      {
                        locationIds: ['Test string'],
                      },
                    ],
                    numberOfItems: ['Test string'],
                    postalCodeGroupNames: ['Test string'],
                    prices: [
                      {
                        currency: 'Test string',
                        value: 'Test string',
                      },
                    ],
                    weights: [
                      {
                        unit: 'Test string',
                        value: 'Test string',
                      },
                    ],
                  },
                  name: 'Test string',
                  rowHeaders: {
                    locations: [
                      {
                        locationIds: ['Test string'],
                      },
                    ],
                    numberOfItems: ['Test string'],
                    postalCodeGroupNames: ['Test string'],
                    prices: [
                      {
                        currency: 'Test string',
                        value: 'Test string',
                      },
                    ],
                    weights: [
                      {
                        unit: 'Test string',
                        value: 'Test string',
                      },
                    ],
                  },
                  rows: [
                    {
                      cells: [
                        {
                          carrierRateName: 'Test string',
                          flatRate: {
                            currency: 'Test string',
                            value: 'Test string',
                          },
                          noShipping: true,
                          pricePercentage: 'Test string',
                          subtableName: 'Test string',
                        },
                      ],
                    },
                  ],
                },
                name: 'Test string',
                singleValue: {
                  carrierRateName: 'Test string',
                  flatRate: {
                    currency: 'Test string',
                    value: 'Test string',
                  },
                  noShipping: true,
                  pricePercentage: 'Test string',
                  subtableName: 'Test string',
                },
                subtables: [
                  {
                    columnHeaders: {
                      locations: [
                        {
                          locationIds: ['Test string'],
                        },
                      ],
                      numberOfItems: ['Test string'],
                      postalCodeGroupNames: ['Test string'],
                      prices: [
                        {
                          currency: 'Test string',
                          value: 'Test string',
                        },
                      ],
                      weights: [
                        {
                          unit: 'Test string',
                          value: 'Test string',
                        },
                      ],
                    },
                    name: 'Test string',
                    rowHeaders: {
                      locations: [
                        {
                          locationIds: ['Test string'],
                        },
                      ],
                      numberOfItems: ['Test string'],
                      postalCodeGroupNames: ['Test string'],
                      prices: [
                        {
                          currency: 'Test string',
                          value: 'Test string',
                        },
                      ],
                      weights: [
                        {
                          unit: 'Test string',
                          value: 'Test string',
                        },
                      ],
                    },
                    rows: [
                      {
                        cells: [
                          {
                            carrierRateName: 'Test string',
                            flatRate: {
                              currency: 'Test string',
                              value: 'Test string',
                            },
                            noShipping: true,
                            pricePercentage: 'Test string',
                            subtableName: 'Test string',
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
            shipmentType: 'Test string',
            storeConfig: {
              cutoffConfig: {
                localCutoffTime: {
                  hour: 'Test string',
                  minute: 'Test string',
                },
                noDeliveryPostCutoff: true,
                storeCloseOffsetHours: 'Test string',
              },
              serviceRadius: {
                unit: 'Test string',
                value: 'Test string',
              },
              storeCodes: ['Test string'],
              storeServiceType: 'Test string',
            },
          },
        ],
        warehouses: [
          {
            businessDayConfig: {
              businessDays: ['Test string'],
            },
            cutoffTime: {
              hour: 42,
              minute: 42,
            },
            handlingDays: 'Test string',
            name: 'Test string',
            shippingAddress: {
              administrativeArea: 'Test string',
              city: 'Test string',
              country: 'Test string',
              postalCode: 'Test string',
              streetAddress: 'Test string',
            },
          },
        ],
      }
    );
    /** Retrieves the status and review eligibility for the Shopping Ads program. Returns errors and warnings if they require action to resolve, will become disapprovals, or impact impressions. Use `accountstatuses` to view all issues for an account. */
    await gapi.client.content.shoppingadsprogram.get({
      merchantId: 'Test string',
    });
    /** Requests a review of Shopping ads in a specific region. This method deprecated. Use the `MerchantSupportService` to view product and account issues and request a review. */
    await gapi.client.content.shoppingadsprogram.requestreview(
      {
        merchantId: 'Test string',
      },
      {
        regionCode: 'Test string',
      }
    );
  }
});
