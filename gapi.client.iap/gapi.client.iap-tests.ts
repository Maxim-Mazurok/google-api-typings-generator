/* This is stub file for gapi.client.iap definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20210326

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('iap', 'v1', () => {
        /** now we can use gapi.client.iap */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, configure, and delete your Google Cloud Platform data */
            'https://www.googleapis.com/auth/cloud-platform',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Gets the access control policy for an Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at:
         * https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api
         */
        await gapi.client.iap.v1.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Gets the IAP settings on a particular IAP protected resource. */
        await gapi.client.iap.v1.getIapSettings({
            name: "Test string",
        });
        /**
         * Sets the access control policy for an Identity-Aware Proxy protected resource. Replaces any existing policy. More information about managing access via IAP can be found at:
         * https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api
         */
        await gapi.client.iap.v1.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at:
         * https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api
         */
        await gapi.client.iap.v1.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Updates the IAP settings on a particular IAP protected resource. It replaces all fields unless the `update_mask` is set. */
        await gapi.client.iap.v1.updateIapSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            accessSettings: {
                corsSettings: {
                    allowHttpOptions: true,
                },
                gcipSettings: {
                    loginPageUri: "Test string",
                    tenantIds: [
                        "Test string"                    ],
                },
                oauthSettings: {
                    loginHint: "Test string",
                },
                policyDelegationSettings: {
                    iamPermission: "Test string",
                    iamServiceName: "Test string",
                    policyName: {
                        id: "Test string",
                        region: "Test string",
                        type: "Test string",
                    },
                    resource: {
                        labels: {
                            A: "Test string"                        },
                        name: "Test string",
                        service: "Test string",
                        type: "Test string",
                    },
                },
            },
            applicationSettings: {
                accessDeniedPageSettings: {
                    accessDeniedPageUri: "Test string",
                },
                cookieDomain: "Test string",
                csmSettings: {
                    rctokenAud: "Test string",
                },
            },
            name: "Test string",
        });
    }
});
