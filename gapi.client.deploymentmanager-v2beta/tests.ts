/* This is stub file for gapi.client.deploymentmanager-v2beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220908

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://deploymentmanager.googleapis.com/$discovery/rest?version=v2beta');
    /** now we can use gapi.client.deploymentmanager */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        /** View and manage your Google Cloud Platform management resources and deployment status information */
        'https://www.googleapis.com/auth/ndev.cloudman',
        /** View your Google Cloud Platform management resources and deployment status information */
        'https://www.googleapis.com/auth/ndev.cloudman.readonly',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Deletes a composite type. */
        await gapi.client.deploymentmanager.compositeTypes.delete({
            compositeType: "Test string",
            project: "Test string",
        });
        /** Gets information about a specific composite type. */
        await gapi.client.deploymentmanager.compositeTypes.get({
            compositeType: "Test string",
            project: "Test string",
        });
        /** Creates a composite type. */
        await gapi.client.deploymentmanager.compositeTypes.insert({
            project: "Test string",
        }, {
            description: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            status: "Test string",
            templateContents: {
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }
                ],
                interpreter: "Test string",
                mainTemplate: "Test string",
                schema: "Test string",
                template: "Test string",
            },
        });
        /** Lists all composite types for Deployment Manager. */
        await gapi.client.deploymentmanager.compositeTypes.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Patches a composite type. */
        await gapi.client.deploymentmanager.compositeTypes.patch({
            compositeType: "Test string",
            project: "Test string",
        }, {
            description: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            status: "Test string",
            templateContents: {
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }
                ],
                interpreter: "Test string",
                mainTemplate: "Test string",
                schema: "Test string",
                template: "Test string",
            },
        });
        /** Updates a composite type. */
        await gapi.client.deploymentmanager.compositeTypes.update({
            compositeType: "Test string",
            project: "Test string",
        }, {
            description: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            status: "Test string",
            templateContents: {
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }
                ],
                interpreter: "Test string",
                mainTemplate: "Test string",
                schema: "Test string",
                template: "Test string",
            },
        });
        /** Cancels and removes the preview currently associated with the deployment. */
        await gapi.client.deploymentmanager.deployments.cancelPreview({
            deployment: "Test string",
            project: "Test string",
        }, {
            fingerprint: "Test string",
        });
        /** Deletes a deployment and all of the resources in the deployment. */
        await gapi.client.deploymentmanager.deployments.delete({
            deletePolicy: "Test string",
            deployment: "Test string",
            project: "Test string",
        });
        /** Gets information about a specific deployment. */
        await gapi.client.deploymentmanager.deployments.get({
            deployment: "Test string",
            project: "Test string",
        });
        /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
        await gapi.client.deploymentmanager.deployments.getIamPolicy({
            optionsRequestedPolicyVersion: 42,
            project: "Test string",
            resource: "Test string",
        });
        /** Creates a deployment and all of the resources described by the deployment manifest. */
        await gapi.client.deploymentmanager.deployments.insert({
            createPolicy: "Test string",
            preview: true,
            project: "Test string",
        }, {
            description: "Test string",
            fingerprint: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            manifest: "Test string",
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            target: {
                config: {
                    content: "Test string",
                },
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }
                ],
            },
            update: {
                description: "Test string",
                labels: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }
                ],
                manifest: "Test string",
            },
            updateTime: "Test string",
        });
        /** Lists all deployments for a given project. */
        await gapi.client.deploymentmanager.deployments.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Patches a deployment and all of the resources described by the deployment manifest. */
        await gapi.client.deploymentmanager.deployments.patch({
            createPolicy: "Test string",
            deletePolicy: "Test string",
            deployment: "Test string",
            preview: true,
            project: "Test string",
        }, {
            description: "Test string",
            fingerprint: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            manifest: "Test string",
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            target: {
                config: {
                    content: "Test string",
                },
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }
                ],
            },
            update: {
                description: "Test string",
                labels: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }
                ],
                manifest: "Test string",
            },
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. */
        await gapi.client.deploymentmanager.deployments.setIamPolicy({
            project: "Test string",
            resource: "Test string",
        }, {
            bindings: [
                {
                    condition: {
                        description: "Test string",
                        expression: "Test string",
                        location: "Test string",
                        title: "Test string",
                    },
                    members: [
                        "Test string"
                    ],
                    role: "Test string",
                }
            ],
            etag: "Test string",
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started. */
        await gapi.client.deploymentmanager.deployments.stop({
            deployment: "Test string",
            project: "Test string",
        }, {
            fingerprint: "Test string",
        });
        /** Returns permissions that a caller has on the specified resource. */
        await gapi.client.deploymentmanager.deployments.testIamPermissions({
            project: "Test string",
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Updates a deployment and all of the resources described by the deployment manifest. */
        await gapi.client.deploymentmanager.deployments.update({
            createPolicy: "Test string",
            deletePolicy: "Test string",
            deployment: "Test string",
            preview: true,
            project: "Test string",
        }, {
            description: "Test string",
            fingerprint: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            manifest: "Test string",
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            target: {
                config: {
                    content: "Test string",
                },
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }
                ],
            },
            update: {
                description: "Test string",
                labels: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }
                ],
                manifest: "Test string",
            },
            updateTime: "Test string",
        });
        /** Gets information about a specific manifest. */
        await gapi.client.deploymentmanager.manifests.get({
            deployment: "Test string",
            manifest: "Test string",
            project: "Test string",
        });
        /** Lists all manifests for a given deployment. */
        await gapi.client.deploymentmanager.manifests.list({
            deployment: "Test string",
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Gets information about a specific operation. */
        await gapi.client.deploymentmanager.operations.get({
            operation: "Test string",
            project: "Test string",
        });
        /** Lists all operations for a project. */
        await gapi.client.deploymentmanager.operations.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Gets information about a single resource. */
        await gapi.client.deploymentmanager.resources.get({
            deployment: "Test string",
            project: "Test string",
            resource: "Test string",
        });
        /** Lists all resources in a given deployment. */
        await gapi.client.deploymentmanager.resources.list({
            deployment: "Test string",
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Deletes a type provider. */
        await gapi.client.deploymentmanager.typeProviders.delete({
            project: "Test string",
            typeProvider: "Test string",
        });
        /** Gets information about a specific type provider. */
        await gapi.client.deploymentmanager.typeProviders.get({
            project: "Test string",
            typeProvider: "Test string",
        });
        /** Gets a type info for a type provided by a TypeProvider. */
        await gapi.client.deploymentmanager.typeProviders.getType({
            project: "Test string",
            type: "Test string",
            typeProvider: "Test string",
        });
        /** Creates a type provider. */
        await gapi.client.deploymentmanager.typeProviders.insert({
            project: "Test string",
        }, {
            collectionOverrides: [
                {
                    collection: "Test string",
                    options: {
                        asyncOptions: [
                            {
                                methodMatch: "Test string",
                                pollingOptions: {
                                    diagnostics: [
                                        {
                                            field: "Test string",
                                            level: "Test string",
                                        }
                                    ],
                                    failCondition: "Test string",
                                    finishCondition: "Test string",
                                    pollingLink: "Test string",
                                    targetLink: "Test string",
                                },
                            }
                        ],
                        inputMappings: [
                            {
                                fieldName: "Test string",
                                location: "Test string",
                                methodMatch: "Test string",
                                value: "Test string",
                            }
                        ],
                        validationOptions: {
                            schemaValidation: "Test string",
                            undeclaredProperties: "Test string",
                        },
                        virtualProperties: "Test string",
                    },
                }
            ],
            credential: {
                basicAuth: {
                    password: "Test string",
                    user: "Test string",
                },
                serviceAccount: {
                    email: "Test string",
                },
                useProjectDefault: true,
            },
            customCertificateAuthorityRoots: [
                "Test string"
            ],
            description: "Test string",
            descriptorUrl: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            options: {
                asyncOptions: [
                    {
                        methodMatch: "Test string",
                        pollingOptions: {
                            diagnostics: [
                                {
                                    field: "Test string",
                                    level: "Test string",
                                }
                            ],
                            failCondition: "Test string",
                            finishCondition: "Test string",
                            pollingLink: "Test string",
                            targetLink: "Test string",
                        },
                    }
                ],
                inputMappings: [
                    {
                        fieldName: "Test string",
                        location: "Test string",
                        methodMatch: "Test string",
                        value: "Test string",
                    }
                ],
                validationOptions: {
                    schemaValidation: "Test string",
                    undeclaredProperties: "Test string",
                },
                virtualProperties: "Test string",
            },
            selfLink: "Test string",
        });
        /** Lists all resource type providers for Deployment Manager. */
        await gapi.client.deploymentmanager.typeProviders.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Lists all the type info for a TypeProvider. */
        await gapi.client.deploymentmanager.typeProviders.listTypes({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
            typeProvider: "Test string",
        });
        /** Patches a type provider. */
        await gapi.client.deploymentmanager.typeProviders.patch({
            project: "Test string",
            typeProvider: "Test string",
        }, {
            collectionOverrides: [
                {
                    collection: "Test string",
                    options: {
                        asyncOptions: [
                            {
                                methodMatch: "Test string",
                                pollingOptions: {
                                    diagnostics: [
                                        {
                                            field: "Test string",
                                            level: "Test string",
                                        }
                                    ],
                                    failCondition: "Test string",
                                    finishCondition: "Test string",
                                    pollingLink: "Test string",
                                    targetLink: "Test string",
                                },
                            }
                        ],
                        inputMappings: [
                            {
                                fieldName: "Test string",
                                location: "Test string",
                                methodMatch: "Test string",
                                value: "Test string",
                            }
                        ],
                        validationOptions: {
                            schemaValidation: "Test string",
                            undeclaredProperties: "Test string",
                        },
                        virtualProperties: "Test string",
                    },
                }
            ],
            credential: {
                basicAuth: {
                    password: "Test string",
                    user: "Test string",
                },
                serviceAccount: {
                    email: "Test string",
                },
                useProjectDefault: true,
            },
            customCertificateAuthorityRoots: [
                "Test string"
            ],
            description: "Test string",
            descriptorUrl: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            options: {
                asyncOptions: [
                    {
                        methodMatch: "Test string",
                        pollingOptions: {
                            diagnostics: [
                                {
                                    field: "Test string",
                                    level: "Test string",
                                }
                            ],
                            failCondition: "Test string",
                            finishCondition: "Test string",
                            pollingLink: "Test string",
                            targetLink: "Test string",
                        },
                    }
                ],
                inputMappings: [
                    {
                        fieldName: "Test string",
                        location: "Test string",
                        methodMatch: "Test string",
                        value: "Test string",
                    }
                ],
                validationOptions: {
                    schemaValidation: "Test string",
                    undeclaredProperties: "Test string",
                },
                virtualProperties: "Test string",
            },
            selfLink: "Test string",
        });
        /** Updates a type provider. */
        await gapi.client.deploymentmanager.typeProviders.update({
            project: "Test string",
            typeProvider: "Test string",
        }, {
            collectionOverrides: [
                {
                    collection: "Test string",
                    options: {
                        asyncOptions: [
                            {
                                methodMatch: "Test string",
                                pollingOptions: {
                                    diagnostics: [
                                        {
                                            field: "Test string",
                                            level: "Test string",
                                        }
                                    ],
                                    failCondition: "Test string",
                                    finishCondition: "Test string",
                                    pollingLink: "Test string",
                                    targetLink: "Test string",
                                },
                            }
                        ],
                        inputMappings: [
                            {
                                fieldName: "Test string",
                                location: "Test string",
                                methodMatch: "Test string",
                                value: "Test string",
                            }
                        ],
                        validationOptions: {
                            schemaValidation: "Test string",
                            undeclaredProperties: "Test string",
                        },
                        virtualProperties: "Test string",
                    },
                }
            ],
            credential: {
                basicAuth: {
                    password: "Test string",
                    user: "Test string",
                },
                serviceAccount: {
                    email: "Test string",
                },
                useProjectDefault: true,
            },
            customCertificateAuthorityRoots: [
                "Test string"
            ],
            description: "Test string",
            descriptorUrl: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }
            ],
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }
                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationGroupId: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }
                        ],
                        message: "Test string",
                    }
                ],
                zone: "Test string",
            },
            options: {
                asyncOptions: [
                    {
                        methodMatch: "Test string",
                        pollingOptions: {
                            diagnostics: [
                                {
                                    field: "Test string",
                                    level: "Test string",
                                }
                            ],
                            failCondition: "Test string",
                            finishCondition: "Test string",
                            pollingLink: "Test string",
                            targetLink: "Test string",
                        },
                    }
                ],
                inputMappings: [
                    {
                        fieldName: "Test string",
                        location: "Test string",
                        methodMatch: "Test string",
                        value: "Test string",
                    }
                ],
                validationOptions: {
                    schemaValidation: "Test string",
                    undeclaredProperties: "Test string",
                },
                virtualProperties: "Test string",
            },
            selfLink: "Test string",
        });
        /** Lists all resource types for Deployment Manager. */
        await gapi.client.deploymentmanager.types.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
    }
});
