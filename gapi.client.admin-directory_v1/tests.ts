/* This is stub file for gapi.client.admin-directory_v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250120

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://admin.googleapis.com/$discovery/rest?version=directory_v1',
  );
  /** now we can use gapi.client.admin, gapi.client.directory */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, add, edit, and permanently delete the printers that your organization can use with Chrome */
    'https://www.googleapis.com/auth/admin.chrome.printers',
    /** See the printers that your organization can use with Chrome */
    'https://www.googleapis.com/auth/admin.chrome.printers.readonly',
    /** View and manage customer related information */
    'https://www.googleapis.com/auth/admin.directory.customer',
    /** View customer related information */
    'https://www.googleapis.com/auth/admin.directory.customer.readonly',
    /** View and manage your ChromeOS devices' metadata */
    'https://www.googleapis.com/auth/admin.directory.device.chromeos',
    /** View your ChromeOS devices' metadata */
    'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly',
    /** View and manage your mobile devices' metadata */
    'https://www.googleapis.com/auth/admin.directory.device.mobile',
    /** Manage your mobile devices by performing administrative tasks */
    'https://www.googleapis.com/auth/admin.directory.device.mobile.action',
    /** View your mobile devices' metadata */
    'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly',
    /** View and manage the provisioning of domains for your customers */
    'https://www.googleapis.com/auth/admin.directory.domain',
    /** View domains related to your customers */
    'https://www.googleapis.com/auth/admin.directory.domain.readonly',
    /** View and manage the provisioning of groups on your domain */
    'https://www.googleapis.com/auth/admin.directory.group',
    /** View and manage group subscriptions on your domain */
    'https://www.googleapis.com/auth/admin.directory.group.member',
    /** View group subscriptions on your domain */
    'https://www.googleapis.com/auth/admin.directory.group.member.readonly',
    /** View groups on your domain */
    'https://www.googleapis.com/auth/admin.directory.group.readonly',
    /** View and manage organization units on your domain */
    'https://www.googleapis.com/auth/admin.directory.orgunit',
    /** View organization units on your domain */
    'https://www.googleapis.com/auth/admin.directory.orgunit.readonly',
    /** View and manage the provisioning of calendar resources on your domain */
    'https://www.googleapis.com/auth/admin.directory.resource.calendar',
    /** View calendar resources on your domain */
    'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly',
    /** Manage delegated admin roles for your domain */
    'https://www.googleapis.com/auth/admin.directory.rolemanagement',
    /** View delegated admin roles for your domain */
    'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly',
    /** View and manage the provisioning of users on your domain */
    'https://www.googleapis.com/auth/admin.directory.user',
    /** View and manage user aliases on your domain */
    'https://www.googleapis.com/auth/admin.directory.user.alias',
    /** View user aliases on your domain */
    'https://www.googleapis.com/auth/admin.directory.user.alias.readonly',
    /** See info about users on your domain */
    'https://www.googleapis.com/auth/admin.directory.user.readonly',
    /** Manage data access permissions for users on your domain */
    'https://www.googleapis.com/auth/admin.directory.user.security',
    /** View and manage the provisioning of user schemas on your domain */
    'https://www.googleapis.com/auth/admin.directory.userschema',
    /** View user schemas on your domain */
    'https://www.googleapis.com/auth/admin.directory.userschema.readonly',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Stops watching resources through this channel. */
    await gapi.client.admin.channels.stop(
      {},
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      },
    );
    /** Changes the status of a batch of ChromeOS devices. For more information about changing a ChromeOS device state [Repair, repurpose, or retire ChromeOS devices](https://support.google.com/chrome/a/answer/3523633). */
    await gapi.client.admin.customer.devices.chromeos.batchChangeStatus(
      {
        customerId: 'Test string',
      },
      {
        changeChromeOsDeviceStatusAction: 'Test string',
        deprovisionReason: 'Test string',
        deviceIds: ['Test string'],
      },
    );
    /** Issues a command for the device to execute. */
    await gapi.client.admin.customer.devices.chromeos.issueCommand(
      {
        customerId: 'Test string',
        deviceId: 'Test string',
      },
      {
        commandType: 'Test string',
        payload: 'Test string',
      },
    );
    /** Gets command data a specific command issued to the device. */
    await gapi.client.admin.customer.devices.chromeos.commands.get({
      commandId: 'Test string',
      customerId: 'Test string',
      deviceId: 'Test string',
    });
    /** Creates printers under given Organization Unit. */
    await gapi.client.admin.customers.chrome.printers.batchCreatePrinters(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            printer: {
              auxiliaryMessages: [
                {
                  auxiliaryMessage: 'Test string',
                  fieldMask: 'Test string',
                  severity: 'Test string',
                },
              ],
              createTime: 'Test string',
              description: 'Test string',
              displayName: 'Test string',
              id: 'Test string',
              makeAndModel: 'Test string',
              name: 'Test string',
              orgUnitId: 'Test string',
              uri: 'Test string',
              useDriverlessConfig: true,
            },
          },
        ],
      },
    );
    /** Deletes printers in batch. */
    await gapi.client.admin.customers.chrome.printers.batchDeletePrinters(
      {
        parent: 'Test string',
      },
      {
        printerIds: ['Test string'],
      },
    );
    /** Creates a printer under given Organization Unit. */
    await gapi.client.admin.customers.chrome.printers.create(
      {
        parent: 'Test string',
      },
      {
        auxiliaryMessages: [
          {
            auxiliaryMessage: 'Test string',
            fieldMask: 'Test string',
            severity: 'Test string',
          },
        ],
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        id: 'Test string',
        makeAndModel: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        uri: 'Test string',
        useDriverlessConfig: true,
      },
    );
    /** Deletes a `Printer`. */
    await gapi.client.admin.customers.chrome.printers.delete({
      name: 'Test string',
    });
    /** Returns a `Printer` resource (printer's config). */
    await gapi.client.admin.customers.chrome.printers.get({
      name: 'Test string',
    });
    /** List printers configs. */
    await gapi.client.admin.customers.chrome.printers.list({
      filter: 'Test string',
      orderBy: 'Test string',
      orgUnitId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists the supported printer models. */
    await gapi.client.admin.customers.chrome.printers.listPrinterModels({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a `Printer` resource. */
    await gapi.client.admin.customers.chrome.printers.patch(
      {
        clearMask: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        auxiliaryMessages: [
          {
            auxiliaryMessage: 'Test string',
            fieldMask: 'Test string',
            severity: 'Test string',
          },
        ],
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        id: 'Test string',
        makeAndModel: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        uri: 'Test string',
        useDriverlessConfig: true,
      },
    );
    /** Creates multiple print servers. */
    await gapi.client.admin.customers.chrome.printServers.batchCreatePrintServers(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            printServer: {
              createTime: 'Test string',
              description: 'Test string',
              displayName: 'Test string',
              id: 'Test string',
              name: 'Test string',
              orgUnitId: 'Test string',
              uri: 'Test string',
            },
          },
        ],
      },
    );
    /** Deletes multiple print servers. */
    await gapi.client.admin.customers.chrome.printServers.batchDeletePrintServers(
      {
        parent: 'Test string',
      },
      {
        printServerIds: ['Test string'],
      },
    );
    /** Creates a print server. */
    await gapi.client.admin.customers.chrome.printServers.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        id: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        uri: 'Test string',
      },
    );
    /** Deletes a print server. */
    await gapi.client.admin.customers.chrome.printServers.delete({
      name: 'Test string',
    });
    /** Returns a print server's configuration. */
    await gapi.client.admin.customers.chrome.printServers.get({
      name: 'Test string',
    });
    /** Lists print server configurations. */
    await gapi.client.admin.customers.chrome.printServers.list({
      filter: 'Test string',
      orderBy: 'Test string',
      orgUnitId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a print server's configuration. */
    await gapi.client.admin.customers.chrome.printServers.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        id: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        uri: 'Test string',
      },
    );
    /** Deletes an ASP issued by a user. */
    await gapi.client.directory.asps.delete({
      codeId: 42,
      userKey: 'Test string',
    });
    /** Gets information about an ASP issued by a user. */
    await gapi.client.directory.asps.get({
      codeId: 42,
      userKey: 'Test string',
    });
    /** Lists the ASPs issued by a user. */
    await gapi.client.directory.asps.list({
      userKey: 'Test string',
    });
    /** Use [BatchChangeChromeOsDeviceStatus](/admin-sdk/directory/reference/rest/v1/customer.devices.chromeos/batchChangeStatus) instead. Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633). */
    await gapi.client.directory.chromeosdevices.action(
      {
        customerId: 'Test string',
        resourceId: 'Test string',
      },
      {
        action: 'Test string',
        deprovisionReason: 'Test string',
      },
    );
    /** Retrieves a Chrome OS device's properties. */
    await gapi.client.directory.chromeosdevices.get({
      customerId: 'Test string',
      deviceId: 'Test string',
      projection: 'Test string',
    });
    /** Retrieves a paginated list of Chrome OS devices within an account. */
    await gapi.client.directory.chromeosdevices.list({
      customerId: 'Test string',
      includeChildOrgunits: true,
      maxResults: 42,
      orderBy: 'Test string',
      orgUnitPath: 'Test string',
      pageToken: 'Test string',
      projection: 'Test string',
      query: 'Test string',
      sortOrder: 'Test string',
    });
    /** Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once. */
    await gapi.client.directory.chromeosdevices.moveDevicesToOu(
      {
        customerId: 'Test string',
        orgUnitPath: 'Test string',
      },
      {
        deviceIds: ['Test string'],
      },
    );
    /** Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
    await gapi.client.directory.chromeosdevices.patch(
      {
        customerId: 'Test string',
        deviceId: 'Test string',
        projection: 'Test string',
      },
      {
        activeTimeRanges: [
          {
            activeTime: 42,
            date: 'Test string',
          },
        ],
        annotatedAssetId: 'Test string',
        annotatedLocation: 'Test string',
        annotatedUser: 'Test string',
        autoUpdateExpiration: 'Test string',
        autoUpdateThrough: 'Test string',
        backlightInfo: [
          {
            brightness: 42,
            maxBrightness: 42,
            path: 'Test string',
          },
        ],
        bootMode: 'Test string',
        chromeOsType: 'Test string',
        cpuInfo: [
          {
            architecture: 'Test string',
            logicalCpus: [
              {
                cStates: [
                  {
                    displayName: 'Test string',
                    sessionDuration: 'Test string',
                  },
                ],
                currentScalingFrequencyKhz: 42,
                idleDuration: 'Test string',
                maxScalingFrequencyKhz: 42,
              },
            ],
            maxClockSpeedKhz: 42,
            model: 'Test string',
          },
        ],
        cpuStatusReports: [
          {
            cpuTemperatureInfo: [
              {
                label: 'Test string',
                temperature: 42,
              },
            ],
            cpuUtilizationPercentageInfo: [42],
            reportTime: 'Test string',
          },
        ],
        deprovisionReason: 'Test string',
        deviceFiles: [
          {
            createTime: 'Test string',
            downloadUrl: 'Test string',
            name: 'Test string',
            type: 'Test string',
          },
        ],
        deviceId: 'Test string',
        deviceLicenseType: 'Test string',
        diskSpaceUsage: {
          capacityBytes: 'Test string',
          usedBytes: 'Test string',
        },
        diskVolumeReports: [
          {
            volumeInfo: [
              {
                storageFree: 'Test string',
                storageTotal: 'Test string',
                volumeId: 'Test string',
              },
            ],
          },
        ],
        dockMacAddress: 'Test string',
        etag: 'Test string',
        ethernetMacAddress: 'Test string',
        ethernetMacAddress0: 'Test string',
        extendedSupportEligible: true,
        extendedSupportEnabled: true,
        extendedSupportStart: 'Test string',
        fanInfo: [
          {
            speedRpm: 42,
          },
        ],
        firmwareVersion: 'Test string',
        firstEnrollmentTime: 'Test string',
        kind: 'Test string',
        lastDeprovisionTimestamp: 'Test string',
        lastEnrollmentTime: 'Test string',
        lastKnownNetwork: [
          {
            ipAddress: 'Test string',
            wanIpAddress: 'Test string',
          },
        ],
        lastSync: 'Test string',
        macAddress: 'Test string',
        manufactureDate: 'Test string',
        meid: 'Test string',
        model: 'Test string',
        notes: 'Test string',
        orderNumber: 'Test string',
        orgUnitId: 'Test string',
        orgUnitPath: 'Test string',
        osUpdateStatus: {
          rebootTime: 'Test string',
          state: 'Test string',
          targetKioskAppVersion: 'Test string',
          targetOsVersion: 'Test string',
          updateCheckTime: 'Test string',
          updateTime: 'Test string',
        },
        osVersion: 'Test string',
        platformVersion: 'Test string',
        recentUsers: [
          {
            email: 'Test string',
            type: 'Test string',
          },
        ],
        screenshotFiles: [
          {
            createTime: 'Test string',
            downloadUrl: 'Test string',
            name: 'Test string',
            type: 'Test string',
          },
        ],
        serialNumber: 'Test string',
        status: 'Test string',
        supportEndDate: 'Test string',
        systemRamFreeReports: [
          {
            reportTime: 'Test string',
            systemRamFreeInfo: ['Test string'],
          },
        ],
        systemRamTotal: 'Test string',
        tpmVersionInfo: {
          family: 'Test string',
          firmwareVersion: 'Test string',
          manufacturer: 'Test string',
          specLevel: 'Test string',
          tpmModel: 'Test string',
          vendorSpecific: 'Test string',
        },
        willAutoRenew: true,
      },
    );
    /** Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. */
    await gapi.client.directory.chromeosdevices.update(
      {
        customerId: 'Test string',
        deviceId: 'Test string',
        projection: 'Test string',
      },
      {
        activeTimeRanges: [
          {
            activeTime: 42,
            date: 'Test string',
          },
        ],
        annotatedAssetId: 'Test string',
        annotatedLocation: 'Test string',
        annotatedUser: 'Test string',
        autoUpdateExpiration: 'Test string',
        autoUpdateThrough: 'Test string',
        backlightInfo: [
          {
            brightness: 42,
            maxBrightness: 42,
            path: 'Test string',
          },
        ],
        bootMode: 'Test string',
        chromeOsType: 'Test string',
        cpuInfo: [
          {
            architecture: 'Test string',
            logicalCpus: [
              {
                cStates: [
                  {
                    displayName: 'Test string',
                    sessionDuration: 'Test string',
                  },
                ],
                currentScalingFrequencyKhz: 42,
                idleDuration: 'Test string',
                maxScalingFrequencyKhz: 42,
              },
            ],
            maxClockSpeedKhz: 42,
            model: 'Test string',
          },
        ],
        cpuStatusReports: [
          {
            cpuTemperatureInfo: [
              {
                label: 'Test string',
                temperature: 42,
              },
            ],
            cpuUtilizationPercentageInfo: [42],
            reportTime: 'Test string',
          },
        ],
        deprovisionReason: 'Test string',
        deviceFiles: [
          {
            createTime: 'Test string',
            downloadUrl: 'Test string',
            name: 'Test string',
            type: 'Test string',
          },
        ],
        deviceId: 'Test string',
        deviceLicenseType: 'Test string',
        diskSpaceUsage: {
          capacityBytes: 'Test string',
          usedBytes: 'Test string',
        },
        diskVolumeReports: [
          {
            volumeInfo: [
              {
                storageFree: 'Test string',
                storageTotal: 'Test string',
                volumeId: 'Test string',
              },
            ],
          },
        ],
        dockMacAddress: 'Test string',
        etag: 'Test string',
        ethernetMacAddress: 'Test string',
        ethernetMacAddress0: 'Test string',
        extendedSupportEligible: true,
        extendedSupportEnabled: true,
        extendedSupportStart: 'Test string',
        fanInfo: [
          {
            speedRpm: 42,
          },
        ],
        firmwareVersion: 'Test string',
        firstEnrollmentTime: 'Test string',
        kind: 'Test string',
        lastDeprovisionTimestamp: 'Test string',
        lastEnrollmentTime: 'Test string',
        lastKnownNetwork: [
          {
            ipAddress: 'Test string',
            wanIpAddress: 'Test string',
          },
        ],
        lastSync: 'Test string',
        macAddress: 'Test string',
        manufactureDate: 'Test string',
        meid: 'Test string',
        model: 'Test string',
        notes: 'Test string',
        orderNumber: 'Test string',
        orgUnitId: 'Test string',
        orgUnitPath: 'Test string',
        osUpdateStatus: {
          rebootTime: 'Test string',
          state: 'Test string',
          targetKioskAppVersion: 'Test string',
          targetOsVersion: 'Test string',
          updateCheckTime: 'Test string',
          updateTime: 'Test string',
        },
        osVersion: 'Test string',
        platformVersion: 'Test string',
        recentUsers: [
          {
            email: 'Test string',
            type: 'Test string',
          },
        ],
        screenshotFiles: [
          {
            createTime: 'Test string',
            downloadUrl: 'Test string',
            name: 'Test string',
            type: 'Test string',
          },
        ],
        serialNumber: 'Test string',
        status: 'Test string',
        supportEndDate: 'Test string',
        systemRamFreeReports: [
          {
            reportTime: 'Test string',
            systemRamFreeInfo: ['Test string'],
          },
        ],
        systemRamTotal: 'Test string',
        tpmVersionInfo: {
          family: 'Test string',
          firmwareVersion: 'Test string',
          manufacturer: 'Test string',
          specLevel: 'Test string',
          tpmModel: 'Test string',
          vendorSpecific: 'Test string',
        },
        willAutoRenew: true,
      },
    );
    /** Retrieves a customer. */
    await gapi.client.directory.customers.get({
      customerKey: 'Test string',
    });
    /** Patches a customer. */
    await gapi.client.directory.customers.patch(
      {
        customerKey: 'Test string',
      },
      {
        alternateEmail: 'Test string',
        customerCreationTime: 'Test string',
        customerDomain: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        language: 'Test string',
        phoneNumber: 'Test string',
        postalAddress: {
          addressLine1: 'Test string',
          addressLine2: 'Test string',
          addressLine3: 'Test string',
          contactName: 'Test string',
          countryCode: 'Test string',
          locality: 'Test string',
          organizationName: 'Test string',
          postalCode: 'Test string',
          region: 'Test string',
        },
      },
    );
    /** Updates a customer. */
    await gapi.client.directory.customers.update(
      {
        customerKey: 'Test string',
      },
      {
        alternateEmail: 'Test string',
        customerCreationTime: 'Test string',
        customerDomain: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        language: 'Test string',
        phoneNumber: 'Test string',
        postalAddress: {
          addressLine1: 'Test string',
          addressLine2: 'Test string',
          addressLine3: 'Test string',
          contactName: 'Test string',
          countryCode: 'Test string',
          locality: 'Test string',
          organizationName: 'Test string',
          postalCode: 'Test string',
          region: 'Test string',
        },
      },
    );
    /** Deletes a domain Alias of the customer. */
    await gapi.client.directory.domainAliases.delete({
      customer: 'Test string',
      domainAliasName: 'Test string',
    });
    /** Retrieves a domain alias of the customer. */
    await gapi.client.directory.domainAliases.get({
      customer: 'Test string',
      domainAliasName: 'Test string',
    });
    /** Inserts a domain alias of the customer. */
    await gapi.client.directory.domainAliases.insert(
      {
        customer: 'Test string',
      },
      {
        creationTime: 'Test string',
        domainAliasName: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        parentDomainName: 'Test string',
        verified: true,
      },
    );
    /** Lists the domain aliases of the customer. */
    await gapi.client.directory.domainAliases.list({
      customer: 'Test string',
      parentDomainName: 'Test string',
    });
    /** Deletes a domain of the customer. */
    await gapi.client.directory.domains.delete({
      customer: 'Test string',
      domainName: 'Test string',
    });
    /** Retrieves a domain of the customer. */
    await gapi.client.directory.domains.get({
      customer: 'Test string',
      domainName: 'Test string',
    });
    /** Inserts a domain of the customer. */
    await gapi.client.directory.domains.insert(
      {
        customer: 'Test string',
      },
      {
        creationTime: 'Test string',
        domainAliases: [
          {
            creationTime: 'Test string',
            domainAliasName: 'Test string',
            etag: 'Test string',
            kind: 'Test string',
            parentDomainName: 'Test string',
            verified: true,
          },
        ],
        domainName: 'Test string',
        etag: 'Test string',
        isPrimary: true,
        kind: 'Test string',
        verified: true,
      },
    );
    /** Lists the domains of the customer. */
    await gapi.client.directory.domains.list({
      customer: 'Test string',
    });
    /** Deletes a group. */
    await gapi.client.directory.groups.delete({
      groupKey: 'Test string',
    });
    /** Retrieves a group's properties. */
    await gapi.client.directory.groups.get({
      groupKey: 'Test string',
    });
    /** Creates a group. */
    await gapi.client.directory.groups.insert(
      {},
      {
        adminCreated: true,
        aliases: ['Test string'],
        description: 'Test string',
        directMembersCount: 'Test string',
        email: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        nonEditableAliases: ['Test string'],
      },
    );
    /** Retrieves all groups of a domain or of a user given a userKey (paginated). */
    await gapi.client.directory.groups.list({
      customer: 'Test string',
      domain: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      query: 'Test string',
      sortOrder: 'Test string',
      userKey: 'Test string',
    });
    /** Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
    await gapi.client.directory.groups.patch(
      {
        groupKey: 'Test string',
      },
      {
        adminCreated: true,
        aliases: ['Test string'],
        description: 'Test string',
        directMembersCount: 'Test string',
        email: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        nonEditableAliases: ['Test string'],
      },
    );
    /** Updates a group's properties. */
    await gapi.client.directory.groups.update(
      {
        groupKey: 'Test string',
      },
      {
        adminCreated: true,
        aliases: ['Test string'],
        description: 'Test string',
        directMembersCount: 'Test string',
        email: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        nonEditableAliases: ['Test string'],
      },
    );
    /** Removes an alias. */
    await gapi.client.directory.groups.aliases.delete({
      alias: 'Test string',
      groupKey: 'Test string',
    });
    /** Adds an alias for the group. */
    await gapi.client.directory.groups.aliases.insert(
      {
        groupKey: 'Test string',
      },
      {
        alias: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        primaryEmail: 'Test string',
      },
    );
    /** Lists all aliases for a group. */
    await gapi.client.directory.groups.aliases.list({
      groupKey: 'Test string',
    });
    /** Removes a member from a group. */
    await gapi.client.directory.members.delete({
      groupKey: 'Test string',
      memberKey: 'Test string',
    });
    /** Retrieves a group member's properties. */
    await gapi.client.directory.members.get({
      groupKey: 'Test string',
      memberKey: 'Test string',
    });
    /** Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API. */
    await gapi.client.directory.members.hasMember({
      groupKey: 'Test string',
      memberKey: 'Test string',
    });
    /** Adds a user to the specified group. */
    await gapi.client.directory.members.insert(
      {
        groupKey: 'Test string',
      },
      {
        delivery_settings: 'Test string',
        email: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        role: 'Test string',
        status: 'Test string',
        type: 'Test string',
      },
    );
    /** Retrieves a paginated list of all members in a group. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes). */
    await gapi.client.directory.members.list({
      groupKey: 'Test string',
      includeDerivedMembership: true,
      maxResults: 42,
      pageToken: 'Test string',
      roles: 'Test string',
    });
    /** Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
    await gapi.client.directory.members.patch(
      {
        groupKey: 'Test string',
        memberKey: 'Test string',
      },
      {
        delivery_settings: 'Test string',
        email: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        role: 'Test string',
        status: 'Test string',
        type: 'Test string',
      },
    );
    /** Updates the membership of a user in the specified group. */
    await gapi.client.directory.members.update(
      {
        groupKey: 'Test string',
        memberKey: 'Test string',
      },
      {
        delivery_settings: 'Test string',
        email: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        role: 'Test string',
        status: 'Test string',
        type: 'Test string',
      },
    );
    /** Takes an action that affects a mobile device. For example, remotely wiping a device. */
    await gapi.client.directory.mobiledevices.action(
      {
        customerId: 'Test string',
        resourceId: 'Test string',
      },
      {
        action: 'Test string',
      },
    );
    /** Removes a mobile device. */
    await gapi.client.directory.mobiledevices.delete({
      customerId: 'Test string',
      resourceId: 'Test string',
    });
    /** Retrieves a mobile device's properties. */
    await gapi.client.directory.mobiledevices.get({
      customerId: 'Test string',
      projection: 'Test string',
      resourceId: 'Test string',
    });
    /** Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes). */
    await gapi.client.directory.mobiledevices.list({
      customerId: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      projection: 'Test string',
      query: 'Test string',
      sortOrder: 'Test string',
    });
    /** Removes an organizational unit. */
    await gapi.client.directory.orgunits.delete({
      customerId: 'Test string',
      orgUnitPath: 'Test string',
    });
    /** Retrieves an organizational unit. */
    await gapi.client.directory.orgunits.get({
      customerId: 'Test string',
      orgUnitPath: 'Test string',
    });
    /** Adds an organizational unit. */
    await gapi.client.directory.orgunits.insert(
      {
        customerId: 'Test string',
      },
      {
        blockInheritance: true,
        description: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        orgUnitPath: 'Test string',
        parentOrgUnitId: 'Test string',
        parentOrgUnitPath: 'Test string',
      },
    );
    /** Retrieves a list of all organizational units for an account. */
    await gapi.client.directory.orgunits.list({
      customerId: 'Test string',
      orgUnitPath: 'Test string',
      type: 'Test string',
    });
    /** Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch) */
    await gapi.client.directory.orgunits.patch(
      {
        customerId: 'Test string',
        orgUnitPath: 'Test string',
      },
      {
        blockInheritance: true,
        description: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        orgUnitPath: 'Test string',
        parentOrgUnitId: 'Test string',
        parentOrgUnitPath: 'Test string',
      },
    );
    /** Updates an organizational unit. */
    await gapi.client.directory.orgunits.update(
      {
        customerId: 'Test string',
        orgUnitPath: 'Test string',
      },
      {
        blockInheritance: true,
        description: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        orgUnitPath: 'Test string',
        parentOrgUnitId: 'Test string',
        parentOrgUnitPath: 'Test string',
      },
    );
    /** Retrieves a paginated list of all privileges for a customer. */
    await gapi.client.directory.privileges.list({
      customer: 'Test string',
    });
    /** Deletes a building. */
    await gapi.client.directory.resources.buildings.delete({
      buildingId: 'Test string',
      customer: 'Test string',
    });
    /** Retrieves a building. */
    await gapi.client.directory.resources.buildings.get({
      buildingId: 'Test string',
      customer: 'Test string',
    });
    /** Inserts a building. */
    await gapi.client.directory.resources.buildings.insert(
      {
        coordinatesSource: 'Test string',
        customer: 'Test string',
      },
      {
        address: {
          addressLines: ['Test string'],
          administrativeArea: 'Test string',
          languageCode: 'Test string',
          locality: 'Test string',
          postalCode: 'Test string',
          regionCode: 'Test string',
          sublocality: 'Test string',
        },
        buildingId: 'Test string',
        buildingName: 'Test string',
        coordinates: {
          latitude: 42,
          longitude: 42,
        },
        description: 'Test string',
        etags: 'Test string',
        floorNames: ['Test string'],
        kind: 'Test string',
      },
    );
    /** Retrieves a list of buildings for an account. */
    await gapi.client.directory.resources.buildings.list({
      customer: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Patches a building. */
    await gapi.client.directory.resources.buildings.patch(
      {
        buildingId: 'Test string',
        coordinatesSource: 'Test string',
        customer: 'Test string',
      },
      {
        address: {
          addressLines: ['Test string'],
          administrativeArea: 'Test string',
          languageCode: 'Test string',
          locality: 'Test string',
          postalCode: 'Test string',
          regionCode: 'Test string',
          sublocality: 'Test string',
        },
        buildingId: 'Test string',
        buildingName: 'Test string',
        coordinates: {
          latitude: 42,
          longitude: 42,
        },
        description: 'Test string',
        etags: 'Test string',
        floorNames: ['Test string'],
        kind: 'Test string',
      },
    );
    /** Updates a building. */
    await gapi.client.directory.resources.buildings.update(
      {
        buildingId: 'Test string',
        coordinatesSource: 'Test string',
        customer: 'Test string',
      },
      {
        address: {
          addressLines: ['Test string'],
          administrativeArea: 'Test string',
          languageCode: 'Test string',
          locality: 'Test string',
          postalCode: 'Test string',
          regionCode: 'Test string',
          sublocality: 'Test string',
        },
        buildingId: 'Test string',
        buildingName: 'Test string',
        coordinates: {
          latitude: 42,
          longitude: 42,
        },
        description: 'Test string',
        etags: 'Test string',
        floorNames: ['Test string'],
        kind: 'Test string',
      },
    );
    /** Deletes a calendar resource. */
    await gapi.client.directory.resources.calendars.delete({
      calendarResourceId: 'Test string',
      customer: 'Test string',
    });
    /** Retrieves a calendar resource. */
    await gapi.client.directory.resources.calendars.get({
      calendarResourceId: 'Test string',
      customer: 'Test string',
    });
    /** Inserts a calendar resource. */
    await gapi.client.directory.resources.calendars.insert(
      {
        customer: 'Test string',
      },
      {
        buildingId: 'Test string',
        capacity: 42,
        etags: 'Test string',
        featureInstances: 42,
        floorName: 'Test string',
        floorSection: 'Test string',
        generatedResourceName: 'Test string',
        kind: 'Test string',
        resourceCategory: 'Test string',
        resourceDescription: 'Test string',
        resourceEmail: 'Test string',
        resourceId: 'Test string',
        resourceName: 'Test string',
        resourceType: 'Test string',
        userVisibleDescription: 'Test string',
      },
    );
    /** Retrieves a list of calendar resources for an account. */
    await gapi.client.directory.resources.calendars.list({
      customer: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      query: 'Test string',
    });
    /** Patches a calendar resource. */
    await gapi.client.directory.resources.calendars.patch(
      {
        calendarResourceId: 'Test string',
        customer: 'Test string',
      },
      {
        buildingId: 'Test string',
        capacity: 42,
        etags: 'Test string',
        featureInstances: 42,
        floorName: 'Test string',
        floorSection: 'Test string',
        generatedResourceName: 'Test string',
        kind: 'Test string',
        resourceCategory: 'Test string',
        resourceDescription: 'Test string',
        resourceEmail: 'Test string',
        resourceId: 'Test string',
        resourceName: 'Test string',
        resourceType: 'Test string',
        userVisibleDescription: 'Test string',
      },
    );
    /** Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved. */
    await gapi.client.directory.resources.calendars.update(
      {
        calendarResourceId: 'Test string',
        customer: 'Test string',
      },
      {
        buildingId: 'Test string',
        capacity: 42,
        etags: 'Test string',
        featureInstances: 42,
        floorName: 'Test string',
        floorSection: 'Test string',
        generatedResourceName: 'Test string',
        kind: 'Test string',
        resourceCategory: 'Test string',
        resourceDescription: 'Test string',
        resourceEmail: 'Test string',
        resourceId: 'Test string',
        resourceName: 'Test string',
        resourceType: 'Test string',
        userVisibleDescription: 'Test string',
      },
    );
    /** Deletes a feature. */
    await gapi.client.directory.resources.features.delete({
      customer: 'Test string',
      featureKey: 'Test string',
    });
    /** Retrieves a feature. */
    await gapi.client.directory.resources.features.get({
      customer: 'Test string',
      featureKey: 'Test string',
    });
    /** Inserts a feature. */
    await gapi.client.directory.resources.features.insert(
      {
        customer: 'Test string',
      },
      {
        etags: 'Test string',
        kind: 'Test string',
        name: 'Test string',
      },
    );
    /** Retrieves a list of features for an account. */
    await gapi.client.directory.resources.features.list({
      customer: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Patches a feature. */
    await gapi.client.directory.resources.features.patch(
      {
        customer: 'Test string',
        featureKey: 'Test string',
      },
      {
        etags: 'Test string',
        kind: 'Test string',
        name: 'Test string',
      },
    );
    /** Renames a feature. */
    await gapi.client.directory.resources.features.rename(
      {
        customer: 'Test string',
        oldName: 'Test string',
      },
      {
        newName: 'Test string',
      },
    );
    /** Updates a feature. */
    await gapi.client.directory.resources.features.update(
      {
        customer: 'Test string',
        featureKey: 'Test string',
      },
      {
        etags: 'Test string',
        kind: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a role assignment. */
    await gapi.client.directory.roleAssignments.delete({
      customer: 'Test string',
      roleAssignmentId: 'Test string',
    });
    /** Retrieves a role assignment. */
    await gapi.client.directory.roleAssignments.get({
      customer: 'Test string',
      roleAssignmentId: 'Test string',
    });
    /** Creates a role assignment. */
    await gapi.client.directory.roleAssignments.insert(
      {
        customer: 'Test string',
      },
      {
        assignedTo: 'Test string',
        assigneeType: 'Test string',
        condition: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        orgUnitId: 'Test string',
        roleAssignmentId: 'Test string',
        roleId: 'Test string',
        scopeType: 'Test string',
      },
    );
    /** Retrieves a paginated list of all roleAssignments. */
    await gapi.client.directory.roleAssignments.list({
      customer: 'Test string',
      includeIndirectRoleAssignments: true,
      maxResults: 42,
      pageToken: 'Test string',
      roleId: 'Test string',
      userKey: 'Test string',
    });
    /** Deletes a role. */
    await gapi.client.directory.roles.delete({
      customer: 'Test string',
      roleId: 'Test string',
    });
    /** Retrieves a role. */
    await gapi.client.directory.roles.get({
      customer: 'Test string',
      roleId: 'Test string',
    });
    /** Creates a role. */
    await gapi.client.directory.roles.insert(
      {
        customer: 'Test string',
      },
      {
        etag: 'Test string',
        isSuperAdminRole: true,
        isSystemRole: true,
        kind: 'Test string',
        roleDescription: 'Test string',
        roleId: 'Test string',
        roleName: 'Test string',
        rolePrivileges: [
          {
            privilegeName: 'Test string',
            serviceId: 'Test string',
          },
        ],
      },
    );
    /** Retrieves a paginated list of all the roles in a domain. */
    await gapi.client.directory.roles.list({
      customer: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Patches a role. */
    await gapi.client.directory.roles.patch(
      {
        customer: 'Test string',
        roleId: 'Test string',
      },
      {
        etag: 'Test string',
        isSuperAdminRole: true,
        isSystemRole: true,
        kind: 'Test string',
        roleDescription: 'Test string',
        roleId: 'Test string',
        roleName: 'Test string',
        rolePrivileges: [
          {
            privilegeName: 'Test string',
            serviceId: 'Test string',
          },
        ],
      },
    );
    /** Updates a role. */
    await gapi.client.directory.roles.update(
      {
        customer: 'Test string',
        roleId: 'Test string',
      },
      {
        etag: 'Test string',
        isSuperAdminRole: true,
        isSystemRole: true,
        kind: 'Test string',
        roleDescription: 'Test string',
        roleId: 'Test string',
        roleName: 'Test string',
        rolePrivileges: [
          {
            privilegeName: 'Test string',
            serviceId: 'Test string',
          },
        ],
      },
    );
    /** Deletes a schema. */
    await gapi.client.directory.schemas.delete({
      customerId: 'Test string',
      schemaKey: 'Test string',
    });
    /** Retrieves a schema. */
    await gapi.client.directory.schemas.get({
      customerId: 'Test string',
      schemaKey: 'Test string',
    });
    /** Creates a schema. */
    await gapi.client.directory.schemas.insert(
      {
        customerId: 'Test string',
      },
      {
        displayName: 'Test string',
        etag: 'Test string',
        fields: [
          {
            displayName: 'Test string',
            etag: 'Test string',
            fieldId: 'Test string',
            fieldName: 'Test string',
            fieldType: 'Test string',
            indexed: true,
            kind: 'Test string',
            multiValued: true,
            numericIndexingSpec: {
              maxValue: 42,
              minValue: 42,
            },
            readAccessType: 'Test string',
          },
        ],
        kind: 'Test string',
        schemaId: 'Test string',
        schemaName: 'Test string',
      },
    );
    /** Retrieves all schemas for a customer. */
    await gapi.client.directory.schemas.list({
      customerId: 'Test string',
    });
    /** Patches a schema. */
    await gapi.client.directory.schemas.patch(
      {
        customerId: 'Test string',
        schemaKey: 'Test string',
      },
      {
        displayName: 'Test string',
        etag: 'Test string',
        fields: [
          {
            displayName: 'Test string',
            etag: 'Test string',
            fieldId: 'Test string',
            fieldName: 'Test string',
            fieldType: 'Test string',
            indexed: true,
            kind: 'Test string',
            multiValued: true,
            numericIndexingSpec: {
              maxValue: 42,
              minValue: 42,
            },
            readAccessType: 'Test string',
          },
        ],
        kind: 'Test string',
        schemaId: 'Test string',
        schemaName: 'Test string',
      },
    );
    /** Updates a schema. */
    await gapi.client.directory.schemas.update(
      {
        customerId: 'Test string',
        schemaKey: 'Test string',
      },
      {
        displayName: 'Test string',
        etag: 'Test string',
        fields: [
          {
            displayName: 'Test string',
            etag: 'Test string',
            fieldId: 'Test string',
            fieldName: 'Test string',
            fieldType: 'Test string',
            indexed: true,
            kind: 'Test string',
            multiValued: true,
            numericIndexingSpec: {
              maxValue: 42,
              minValue: 42,
            },
            readAccessType: 'Test string',
          },
        ],
        kind: 'Test string',
        schemaId: 'Test string',
        schemaName: 'Test string',
      },
    );
    /** Deletes all access tokens issued by a user for an application. */
    await gapi.client.directory.tokens.delete({
      clientId: 'Test string',
      userKey: 'Test string',
    });
    /** Gets information about an access token issued by a user. */
    await gapi.client.directory.tokens.get({
      clientId: 'Test string',
      userKey: 'Test string',
    });
    /** Returns the set of tokens specified user has issued to 3rd party applications. */
    await gapi.client.directory.tokens.list({
      userKey: 'Test string',
    });
    /** Turns off 2-Step Verification for user. */
    await gapi.client.directory.twoStepVerification.turnOff({
      userKey: 'Test string',
    });
    /** Deletes a user. */
    await gapi.client.directory.users.delete({
      userKey: 'Test string',
    });
    /** Retrieves a user. */
    await gapi.client.directory.users.get({
      customFieldMask: 'Test string',
      projection: 'Test string',
      userKey: 'Test string',
      viewType: 'Test string',
    });
    /** Creates a user. Mutate calls immediately following user creation might sometimes fail as the user isn't fully created due to propagation delay in our backends. Check the error details for the "User creation is not complete" message to see if this is the case. Retrying the calls after some time can help in this case. If `resolveConflictAccount` is set to `true`, a `202` response code means that a conflicting unmanaged account exists and was invited to join the organization. A `409` response code means that a conflicting account exists so the user wasn't created based on the [handling unmanaged user accounts](https://support.google.com/a/answer/11112794) option selected. */
    await gapi.client.directory.users.insert(
      {
        resolveConflictAccount: true,
      },
      {
        addresses: 42,
        agreedToTerms: true,
        aliases: ['Test string'],
        archived: true,
        changePasswordAtNextLogin: true,
        creationTime: 'Test string',
        customerId: 'Test string',
        customSchemas: {
          A: {
            A: 42,
          },
        },
        deletionTime: 'Test string',
        emails: 42,
        etag: 'Test string',
        externalIds: 42,
        gender: 42,
        hashFunction: 'Test string',
        id: 'Test string',
        ims: 42,
        includeInGlobalAddressList: true,
        ipWhitelisted: true,
        isAdmin: true,
        isDelegatedAdmin: true,
        isEnforcedIn2Sv: true,
        isEnrolledIn2Sv: true,
        isMailboxSetup: true,
        keywords: 42,
        kind: 'Test string',
        languages: 42,
        lastLoginTime: 'Test string',
        locations: 42,
        name: {
          displayName: 'Test string',
          familyName: 'Test string',
          fullName: 'Test string',
          givenName: 'Test string',
        },
        nonEditableAliases: ['Test string'],
        notes: 42,
        organizations: 42,
        orgUnitPath: 'Test string',
        password: 'Test string',
        phones: 42,
        posixAccounts: 42,
        primaryEmail: 'Test string',
        recoveryEmail: 'Test string',
        recoveryPhone: 'Test string',
        relations: 42,
        sshPublicKeys: 42,
        suspended: true,
        suspensionReason: 'Test string',
        thumbnailPhotoEtag: 'Test string',
        thumbnailPhotoUrl: 'Test string',
        websites: 42,
      },
    );
    /** Retrieves a paginated list of either deleted users or all users in a domain. */
    await gapi.client.directory.users.list({
      customer: 'Test string',
      customFieldMask: 'Test string',
      domain: 'Test string',
      event: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      projection: 'Test string',
      query: 'Test string',
      showDeleted: 'Test string',
      sortOrder: 'Test string',
      viewType: 'Test string',
    });
    /** Makes a user a super administrator. */
    await gapi.client.directory.users.makeAdmin(
      {
        userKey: 'Test string',
      },
      {
        status: true,
      },
    );
    /** Updates a user using patch semantics. The update method should be used instead, because it also supports patch semantics and has better performance. If you're mapping an external identity to a Google identity, use the [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update) method instead of the `patch` method. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead. */
    await gapi.client.directory.users.patch(
      {
        userKey: 'Test string',
      },
      {
        addresses: 42,
        agreedToTerms: true,
        aliases: ['Test string'],
        archived: true,
        changePasswordAtNextLogin: true,
        creationTime: 'Test string',
        customerId: 'Test string',
        customSchemas: {
          A: {
            A: 42,
          },
        },
        deletionTime: 'Test string',
        emails: 42,
        etag: 'Test string',
        externalIds: 42,
        gender: 42,
        hashFunction: 'Test string',
        id: 'Test string',
        ims: 42,
        includeInGlobalAddressList: true,
        ipWhitelisted: true,
        isAdmin: true,
        isDelegatedAdmin: true,
        isEnforcedIn2Sv: true,
        isEnrolledIn2Sv: true,
        isMailboxSetup: true,
        keywords: 42,
        kind: 'Test string',
        languages: 42,
        lastLoginTime: 'Test string',
        locations: 42,
        name: {
          displayName: 'Test string',
          familyName: 'Test string',
          fullName: 'Test string',
          givenName: 'Test string',
        },
        nonEditableAliases: ['Test string'],
        notes: 42,
        organizations: 42,
        orgUnitPath: 'Test string',
        password: 'Test string',
        phones: 42,
        posixAccounts: 42,
        primaryEmail: 'Test string',
        recoveryEmail: 'Test string',
        recoveryPhone: 'Test string',
        relations: 42,
        sshPublicKeys: 42,
        suspended: true,
        suspensionReason: 'Test string',
        thumbnailPhotoEtag: 'Test string',
        thumbnailPhotoUrl: 'Test string',
        websites: 42,
      },
    );
    /** Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again. */
    await gapi.client.directory.users.signOut({
      userKey: 'Test string',
    });
    /** Undeletes a deleted user. */
    await gapi.client.directory.users.undelete(
      {
        userKey: 'Test string',
      },
      {
        orgUnitPath: 'Test string',
      },
    );
    /** Updates a user. This method supports patch semantics, meaning that you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared. For repeating fields that contain arrays, individual items in the array can't be patched piecemeal; they must be supplied in the request body with the desired values for all items. See the [user accounts guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user) for more information. */
    await gapi.client.directory.users.update(
      {
        userKey: 'Test string',
      },
      {
        addresses: 42,
        agreedToTerms: true,
        aliases: ['Test string'],
        archived: true,
        changePasswordAtNextLogin: true,
        creationTime: 'Test string',
        customerId: 'Test string',
        customSchemas: {
          A: {
            A: 42,
          },
        },
        deletionTime: 'Test string',
        emails: 42,
        etag: 'Test string',
        externalIds: 42,
        gender: 42,
        hashFunction: 'Test string',
        id: 'Test string',
        ims: 42,
        includeInGlobalAddressList: true,
        ipWhitelisted: true,
        isAdmin: true,
        isDelegatedAdmin: true,
        isEnforcedIn2Sv: true,
        isEnrolledIn2Sv: true,
        isMailboxSetup: true,
        keywords: 42,
        kind: 'Test string',
        languages: 42,
        lastLoginTime: 'Test string',
        locations: 42,
        name: {
          displayName: 'Test string',
          familyName: 'Test string',
          fullName: 'Test string',
          givenName: 'Test string',
        },
        nonEditableAliases: ['Test string'],
        notes: 42,
        organizations: 42,
        orgUnitPath: 'Test string',
        password: 'Test string',
        phones: 42,
        posixAccounts: 42,
        primaryEmail: 'Test string',
        recoveryEmail: 'Test string',
        recoveryPhone: 'Test string',
        relations: 42,
        sshPublicKeys: 42,
        suspended: true,
        suspensionReason: 'Test string',
        thumbnailPhotoEtag: 'Test string',
        thumbnailPhotoUrl: 'Test string',
        websites: 42,
      },
    );
    /** Watches for changes in users list. */
    await gapi.client.directory.users.watch(
      {
        customer: 'Test string',
        customFieldMask: 'Test string',
        domain: 'Test string',
        event: 'Test string',
        maxResults: 42,
        orderBy: 'Test string',
        pageToken: 'Test string',
        projection: 'Test string',
        query: 'Test string',
        showDeleted: 'Test string',
        sortOrder: 'Test string',
        viewType: 'Test string',
      },
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      },
    );
    /** Removes an alias. */
    await gapi.client.directory.users.aliases.delete({
      alias: 'Test string',
      userKey: 'Test string',
    });
    /** Adds an alias. */
    await gapi.client.directory.users.aliases.insert(
      {
        userKey: 'Test string',
      },
      {
        alias: 'Test string',
        etag: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        primaryEmail: 'Test string',
      },
    );
    /** Lists all aliases for a user. */
    await gapi.client.directory.users.aliases.list({
      event: 'Test string',
      userKey: 'Test string',
    });
    /** Watches for changes in users list. */
    await gapi.client.directory.users.aliases.watch(
      {
        event: 'Test string',
        userKey: 'Test string',
      },
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      },
    );
    /** Removes the user's photo. */
    await gapi.client.directory.users.photos.delete({
      userKey: 'Test string',
    });
    /** Retrieves the user's photo. */
    await gapi.client.directory.users.photos.get({
      userKey: 'Test string',
    });
    /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
    await gapi.client.directory.users.photos.patch(
      {
        userKey: 'Test string',
      },
      {
        etag: 'Test string',
        height: 42,
        id: 'Test string',
        kind: 'Test string',
        mimeType: 'Test string',
        photoData: 'Test string',
        primaryEmail: 'Test string',
        width: 42,
      },
    );
    /** Adds a photo for the user. */
    await gapi.client.directory.users.photos.update(
      {
        userKey: 'Test string',
      },
      {
        etag: 'Test string',
        height: 42,
        id: 'Test string',
        kind: 'Test string',
        mimeType: 'Test string',
        photoData: 'Test string',
        primaryEmail: 'Test string',
        width: 42,
      },
    );
    /** Generates new backup verification codes for the user. */
    await gapi.client.directory.verificationCodes.generate({
      userKey: 'Test string',
    });
    /** Invalidates the current backup verification codes for the user. */
    await gapi.client.directory.verificationCodes.invalidate({
      userKey: 'Test string',
    });
    /** Returns the current set of valid backup verification codes for the specified user. */
    await gapi.client.directory.verificationCodes.list({
      userKey: 'Test string',
    });
  }
});
