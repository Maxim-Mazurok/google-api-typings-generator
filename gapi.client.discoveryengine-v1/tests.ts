/* This is stub file for gapi.client.discoveryengine-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240920

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://discoveryengine.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.discoveryengine */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Provisions the project resource. During the process, related systems will get prepared and initialized. Caller must read the [Terms for data use](https://cloud.google.com/retail/data-use-terms), and optionally specify in request to provide consent to that service terms. */
    await gapi.client.discoveryengine.projects.provision(
      {
        name: 'Test string',
      },
      {
        acceptDataUseTerms: true,
        dataUseTermsVersion: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataConnector.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataConnector.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Completes the specified user input with keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completeQuery(
      {
        dataStore: 'Test string',
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.create(
      {
        createAdvancedSiteSearch: true,
        dataStoreId: 'Test string',
        parent: 'Test string',
        skipDefaultSchemaCreation: true,
      },
      {
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {},
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {},
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        industryVertical: 'Test string',
        name: 'Test string',
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          type: 'Test string',
        },
      }
    );
    /** Deletes a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.get(
      {
        name: 'Test string',
      }
    );
    /** Gets the SiteSearchEngine. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.getSiteSearchEngine(
      {
        name: 'Test string',
      }
    );
    /** Lists all the DataStores associated with the project. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a DataStore */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {},
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {},
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        industryVertical: 'Test string',
        name: 'Test string',
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          type: 'Test string',
        },
      }
    );
    /** Trains a custom model. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.trainCustomModel(
      {
        dataStore: 'Test string',
      },
      {
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsTrainingInput: {
          corpusDataPath: 'Test string',
          queryDataPath: 'Test string',
          testDataPath: 'Test string',
          trainDataPath: 'Test string',
        },
        modelId: 'Test string',
        modelType: 'Test string',
      }
    );
    /** Gets index freshness metadata for Documents. Supported for website search only. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.batchGetDocumentsMetadata(
      {
        'matcher.fhirMatcher.fhirResources': 'Test string',
        'matcher.urisMatcher.uris': 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.create(
      {
        documentId: 'Test string',
        parent: 'Test string',
      },
      {
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      }
    );
    /** Deletes a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.get(
      {
        name: 'Test string',
      }
    );
    /** Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items are created. Note: It is possible for a subset of the Documents to be successfully updated. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.import(
      {
        parent: 'Test string',
      },
      {
        alloyDbSource: {
          clusterId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          locationId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        autoGenerateIds: true,
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        bigtableSource: {
          bigtableOptions: {
            families: {
              A: {
                columns: [
                  {
                    encoding: 'Test string',
                    fieldName: 'Test string',
                    qualifier: 'Test string',
                    type: 'Test string',
                  },
                ],
                encoding: 'Test string',
                fieldName: 'Test string',
                type: 'Test string',
              },
            },
            keyFieldName: 'Test string',
          },
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        cloudSqlSource: {
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          instanceId: 'Test string',
          offload: true,
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        fhirStoreSource: {
          fhirStore: 'Test string',
          gcsStagingDir: 'Test string',
          resourceTypes: ['Test string'],
        },
        firestoreSource: {
          collectionId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          projectId: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        idField: 'Test string',
        inlineSource: {
          documents: [
            {
              content: {
                mimeType: 'Test string',
                rawBytes: 'Test string',
                uri: 'Test string',
              },
              derivedStructData: {
                A: 42,
              },
              id: 'Test string',
              indexStatus: {
                errorSamples: [
                  {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                ],
                indexTime: 'Test string',
              },
              indexTime: 'Test string',
              jsonData: 'Test string',
              name: 'Test string',
              parentDocumentId: 'Test string',
              schemaId: 'Test string',
              structData: {
                A: 42,
              },
            },
          ],
        },
        reconciliationMode: 'Test string',
        spannerSource: {
          databaseId: 'Test string',
          enableDataBoost: true,
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        updateMask: 'Test string',
      }
    );
    /** Gets a list of Documents. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      }
    );
    /** Permanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.purge(
      {
        parent: 'Test string',
      },
      {
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        filter: 'Test string',
        force: true,
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          documents: ['Test string'],
        },
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Imports CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completionSuggestions.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          suggestions: [
            {
              alternativePhrases: ['Test string'],
              frequency: 'Test string',
              globalScore: 42,
              groupId: 'Test string',
              groupScore: 42,
              languageCode: 'Test string',
              suggestion: 'Test string',
            },
          ],
        },
      }
    );
    /** Permanently deletes all CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completionSuggestions.purge(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Creates a Control. By default 1000 controls are allowed for a data store. A request can be submitted to adjust this limit. If the Control to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.create(
      {
        controlId: 'Test string',
        parent: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      }
    );
    /** Deletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Control. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Controls by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Control. Control action type cannot be changed. If the Control to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      }
    );
    /** Converses a conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.converse(
      {
        name: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        conversation: {
          endTime: 'Test string',
          messages: [
            {
              createTime: 'Test string',
              reply: {
                summary: {
                  safetyAttributes: {
                    categories: ['Test string'],
                    scores: [42],
                  },
                  summarySkippedReasons: ['Test string'],
                  summaryText: 'Test string',
                  summaryWithMetadata: {
                    citationMetadata: {
                      citations: [
                        {
                          endIndex: 'Test string',
                          sources: [
                            {
                              referenceIndex: 'Test string',
                            },
                          ],
                          startIndex: 'Test string',
                        },
                      ],
                    },
                    references: [
                      {
                        chunkContents: [
                          {
                            content: 'Test string',
                            pageIdentifier: 'Test string',
                          },
                        ],
                        document: 'Test string',
                        title: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    summary: 'Test string',
                  },
                },
              },
              userInput: {
                context: {
                  activeDocument: 'Test string',
                  contextDocuments: ['Test string'],
                },
                input: 'Test string',
              },
            },
          ],
          name: 'Test string',
          startTime: 'Test string',
          state: 'Test string',
          userPseudoId: 'Test string',
        },
        filter: 'Test string',
        query: {
          context: {
            activeDocument: 'Test string',
            contextDocuments: ['Test string'],
          },
          input: 'Test string',
        },
        safeSearch: true,
        servingConfig: 'Test string',
        summarySpec: {
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonSummarySeekingQuery: true,
          includeCitations: true,
          languageCode: 'Test string',
          modelPromptSpec: {
            preamble: 'Test string',
          },
          modelSpec: {
            version: 'Test string',
          },
          summaryResultCount: 42,
          useSemanticChunks: true,
        },
        userLabels: {
          A: 'Test string',
        },
      }
    );
    /** Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Deletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Conversations by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Gets a list of all the custom models. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.customModels.list(
      {
        dataStore: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.models.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.models.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.create(
      {
        parent: 'Test string',
        schemaId: 'Test string',
      },
      {
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      }
    );
    /** Deletes a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.get(
      {
        name: 'Test string',
      }
    );
    /** Gets a list of Schemas. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.patch(
      {
        allowMissing: true,
        name: 'Test string',
      },
      {
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Answer query method. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.answer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStoreSpecs: [
              {
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Makes a recommendation, which requires a contextual user event. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.recommend(
      {
        servingConfig: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        params: {
          A: 42,
        },
        userEvent: {
          attributes: {
            A: {
              numbers: [42],
              text: ['Test string'],
            },
          },
          attributionToken: 'Test string',
          completionInfo: {
            selectedPosition: 42,
            selectedSuggestion: 'Test string',
          },
          dataStore: 'Test string',
          directUserRequest: true,
          documents: [
            {
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          engine: 'Test string',
          eventTime: 'Test string',
          eventType: 'Test string',
          filter: 'Test string',
          mediaInfo: {
            mediaProgressDuration: 'Test string',
            mediaProgressPercentage: 42,
          },
          pageInfo: {
            pageCategory: 'Test string',
            pageviewId: 'Test string',
            referrerUri: 'Test string',
            uri: 'Test string',
          },
          panel: {
            displayName: 'Test string',
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
          promotionIds: ['Test string'],
          searchInfo: {
            offset: 42,
            orderBy: 'Test string',
            searchQuery: 'Test string',
          },
          sessionId: 'Test string',
          tagIds: ['Test string'],
          transactionInfo: {
            cost: 42,
            currency: 'Test string',
            discountValue: 42,
            tax: 42,
            transactionId: 'Test string',
            value: 42,
          },
          userInfo: {
            userAgent: 'Test string',
            userId: 'Test string',
          },
          userPseudoId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        validateOnly: true,
      }
    );
    /** Performs a search. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.search(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        dataStoreSpecs: [
          {
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        offset: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Creates a Session. If the Session to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      }
    );
    /** Deletes a Session. If the Session to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Session. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Sessions by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Session. Session action type cannot be changed. If the Session to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      }
    );
    /** Gets a Answer. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.answers.get(
      {
        name: 'Test string',
      }
    );
    /** Verify target sites' ownership and validity. This API sends all the target sites under site search engine for verification. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.batchVerifyTargetSites(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Downgrade from advanced site search to basic site search. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.disableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {}
    );
    /** Upgrade from basic site search to advanced site search. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.enableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {}
    );
    /** Returns list of target sites with its domain verification status. This method can only be called under data store with BASIC_SITE_SEARCH state at the moment. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.fetchDomainVerificationStatus(
      {
        pageSize: 42,
        pageToken: 'Test string',
        siteSearchEngine: 'Test string',
      }
    );
    /** Request on-demand recrawl for a list of URIs. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.recrawlUris(
      {
        siteSearchEngine: 'Test string',
      },
      {
        siteCredential: 'Test string',
        uris: ['Test string'],
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates TargetSite in a batch. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            targetSite: {
              exactMatch: true,
              failureReason: {
                quotaFailure: {
                  totalRequiredQuota: 'Test string',
                },
              },
              generatedUriPattern: 'Test string',
              indexingStatus: 'Test string',
              name: 'Test string',
              providedUriPattern: 'Test string',
              rootDomainUri: 'Test string',
              siteVerificationInfo: {
                siteVerificationState: 'Test string',
                verifyTime: 'Test string',
              },
              type: 'Test string',
              updateTime: 'Test string',
            },
          },
        ],
      }
    );
    /** Creates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.create(
      {
        parent: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.get(
      {
        name: 'Test string',
      }
    );
    /** Gets a list of TargetSites. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.patch(
      {
        name: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Imports all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.suggestionDenyListEntries.import(
      {
        parent: 'Test string',
      },
      {
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          entries: [
            {
              blockPhrase: 'Test string',
              matchOperator: 'Test string',
            },
          ],
        },
      }
    );
    /** Permanently deletes all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.suggestionDenyListEntries.purge(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.collect(
      {
        ets: 'Test string',
        parent: 'Test string',
        uri: 'Test string',
        userEvent: 'Test string',
      }
    );
    /** Bulk import of user events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          userEvents: [
            {
              attributes: {
                A: {
                  numbers: [42],
                  text: ['Test string'],
                },
              },
              attributionToken: 'Test string',
              completionInfo: {
                selectedPosition: 42,
                selectedSuggestion: 'Test string',
              },
              dataStore: 'Test string',
              directUserRequest: true,
              documents: [
                {
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              engine: 'Test string',
              eventTime: 'Test string',
              eventType: 'Test string',
              filter: 'Test string',
              mediaInfo: {
                mediaProgressDuration: 'Test string',
                mediaProgressPercentage: 42,
              },
              pageInfo: {
                pageCategory: 'Test string',
                pageviewId: 'Test string',
                referrerUri: 'Test string',
                uri: 'Test string',
              },
              panel: {
                displayName: 'Test string',
                panelId: 'Test string',
                panelPosition: 42,
                totalPanels: 42,
              },
              promotionIds: ['Test string'],
              searchInfo: {
                offset: 42,
                orderBy: 'Test string',
                searchQuery: 'Test string',
              },
              sessionId: 'Test string',
              tagIds: ['Test string'],
              transactionInfo: {
                cost: 42,
                currency: 'Test string',
                discountValue: 42,
                tax: 42,
                transactionId: 'Test string',
                value: 42,
              },
              userInfo: {
                userAgent: 'Test string',
                userId: 'Test string',
              },
              userPseudoId: 'Test string',
            },
          ],
        },
      }
    );
    /** Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.purge(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        force: true,
      }
    );
    /** Writes a single user event. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.write(
      {
        parent: 'Test string',
        writeAsync: true,
      },
      {
        attributes: {
          A: {
            numbers: [42],
            text: ['Test string'],
          },
        },
        attributionToken: 'Test string',
        completionInfo: {
          selectedPosition: 42,
          selectedSuggestion: 'Test string',
        },
        dataStore: 'Test string',
        directUserRequest: true,
        documents: [
          {
            id: 'Test string',
            joined: true,
            name: 'Test string',
            promotionIds: ['Test string'],
            quantity: 42,
            uri: 'Test string',
          },
        ],
        engine: 'Test string',
        eventTime: 'Test string',
        eventType: 'Test string',
        filter: 'Test string',
        mediaInfo: {
          mediaProgressDuration: 'Test string',
          mediaProgressPercentage: 42,
        },
        pageInfo: {
          pageCategory: 'Test string',
          pageviewId: 'Test string',
          referrerUri: 'Test string',
          uri: 'Test string',
        },
        panel: {
          displayName: 'Test string',
          panelId: 'Test string',
          panelPosition: 42,
          totalPanels: 42,
        },
        promotionIds: ['Test string'],
        searchInfo: {
          offset: 42,
          orderBy: 'Test string',
          searchQuery: 'Test string',
        },
        sessionId: 'Test string',
        tagIds: ['Test string'],
        transactionInfo: {
          cost: 42,
          currency: 'Test string',
          discountValue: 42,
          tax: 42,
          transactionId: 'Test string',
          value: 42,
        },
        userInfo: {
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Creates a Engine. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.create(
      {
        engineId: 'Test string',
        parent: 'Test string',
      },
      {
        chatEngineConfig: {
          agentCreationConfig: {
            business: 'Test string',
            defaultLanguageCode: 'Test string',
            location: 'Test string',
            timeZone: 'Test string',
          },
          dialogflowAgentToLink: 'Test string',
        },
        chatEngineMetadata: {
          dialogflowAgent: 'Test string',
        },
        commonConfig: {
          companyName: 'Test string',
        },
        createTime: 'Test string',
        dataStoreIds: ['Test string'],
        displayName: 'Test string',
        industryVertical: 'Test string',
        name: 'Test string',
        searchEngineConfig: {
          searchAddOns: ['Test string'],
          searchTier: 'Test string',
        },
        solutionType: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a Engine. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Engine. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all the Engines associated with the project. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates an Engine */
    await gapi.client.discoveryengine.projects.locations.collections.engines.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        chatEngineConfig: {
          agentCreationConfig: {
            business: 'Test string',
            defaultLanguageCode: 'Test string',
            location: 'Test string',
            timeZone: 'Test string',
          },
          dialogflowAgentToLink: 'Test string',
        },
        chatEngineMetadata: {
          dialogflowAgent: 'Test string',
        },
        commonConfig: {
          companyName: 'Test string',
        },
        createTime: 'Test string',
        dataStoreIds: ['Test string'],
        displayName: 'Test string',
        industryVertical: 'Test string',
        name: 'Test string',
        searchEngineConfig: {
          searchAddOns: ['Test string'],
          searchTier: 'Test string',
        },
        solutionType: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a Control. By default 1000 controls are allowed for a data store. A request can be submitted to adjust this limit. If the Control to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.create(
      {
        controlId: 'Test string',
        parent: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      }
    );
    /** Deletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Control. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Controls by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Control. Control action type cannot be changed. If the Control to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      }
    );
    /** Converses a conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.converse(
      {
        name: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        conversation: {
          endTime: 'Test string',
          messages: [
            {
              createTime: 'Test string',
              reply: {
                summary: {
                  safetyAttributes: {
                    categories: ['Test string'],
                    scores: [42],
                  },
                  summarySkippedReasons: ['Test string'],
                  summaryText: 'Test string',
                  summaryWithMetadata: {
                    citationMetadata: {
                      citations: [
                        {
                          endIndex: 'Test string',
                          sources: [
                            {
                              referenceIndex: 'Test string',
                            },
                          ],
                          startIndex: 'Test string',
                        },
                      ],
                    },
                    references: [
                      {
                        chunkContents: [
                          {
                            content: 'Test string',
                            pageIdentifier: 'Test string',
                          },
                        ],
                        document: 'Test string',
                        title: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    summary: 'Test string',
                  },
                },
              },
              userInput: {
                context: {
                  activeDocument: 'Test string',
                  contextDocuments: ['Test string'],
                },
                input: 'Test string',
              },
            },
          ],
          name: 'Test string',
          startTime: 'Test string',
          state: 'Test string',
          userPseudoId: 'Test string',
        },
        filter: 'Test string',
        query: {
          context: {
            activeDocument: 'Test string',
            contextDocuments: ['Test string'],
          },
          input: 'Test string',
        },
        safeSearch: true,
        servingConfig: 'Test string',
        summarySpec: {
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonSummarySeekingQuery: true,
          includeCitations: true,
          languageCode: 'Test string',
          modelPromptSpec: {
            preamble: 'Test string',
          },
          modelSpec: {
            version: 'Test string',
          },
          summaryResultCount: 42,
          useSemanticChunks: true,
        },
        userLabels: {
          A: 'Test string',
        },
      }
    );
    /** Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Deletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Conversations by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Answer query method. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.answer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStoreSpecs: [
              {
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Makes a recommendation, which requires a contextual user event. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.recommend(
      {
        servingConfig: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        params: {
          A: 42,
        },
        userEvent: {
          attributes: {
            A: {
              numbers: [42],
              text: ['Test string'],
            },
          },
          attributionToken: 'Test string',
          completionInfo: {
            selectedPosition: 42,
            selectedSuggestion: 'Test string',
          },
          dataStore: 'Test string',
          directUserRequest: true,
          documents: [
            {
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          engine: 'Test string',
          eventTime: 'Test string',
          eventType: 'Test string',
          filter: 'Test string',
          mediaInfo: {
            mediaProgressDuration: 'Test string',
            mediaProgressPercentage: 42,
          },
          pageInfo: {
            pageCategory: 'Test string',
            pageviewId: 'Test string',
            referrerUri: 'Test string',
            uri: 'Test string',
          },
          panel: {
            displayName: 'Test string',
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
          promotionIds: ['Test string'],
          searchInfo: {
            offset: 42,
            orderBy: 'Test string',
            searchQuery: 'Test string',
          },
          sessionId: 'Test string',
          tagIds: ['Test string'],
          transactionInfo: {
            cost: 42,
            currency: 'Test string',
            discountValue: 42,
            tax: 42,
            transactionId: 'Test string',
            value: 42,
          },
          userInfo: {
            userAgent: 'Test string',
            userId: 'Test string',
          },
          userPseudoId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        validateOnly: true,
      }
    );
    /** Performs a search. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.search(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        dataStoreSpecs: [
          {
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        offset: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Creates a Session. If the Session to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      }
    );
    /** Deletes a Session. If the Session to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Session. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Sessions by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Session. Session action type cannot be changed. If the Session to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      }
    );
    /** Gets a Answer. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.answers.get(
      {
        name: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Completes the specified user input with keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completeQuery(
      {
        dataStore: 'Test string',
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately. */
    await gapi.client.discoveryengine.projects.locations.dataStores.create(
      {
        createAdvancedSiteSearch: true,
        dataStoreId: 'Test string',
        parent: 'Test string',
        skipDefaultSchemaCreation: true,
      },
      {
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {},
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {},
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        industryVertical: 'Test string',
        name: 'Test string',
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          type: 'Test string',
        },
      }
    );
    /** Deletes a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.delete({
      name: 'Test string',
    });
    /** Gets a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.get({
      name: 'Test string',
    });
    /** Gets the SiteSearchEngine. */
    await gapi.client.discoveryengine.projects.locations.dataStores.getSiteSearchEngine(
      {
        name: 'Test string',
      }
    );
    /** Lists all the DataStores associated with the project. */
    await gapi.client.discoveryengine.projects.locations.dataStores.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataStore */
    await gapi.client.discoveryengine.projects.locations.dataStores.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {},
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {},
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        industryVertical: 'Test string',
        name: 'Test string',
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          type: 'Test string',
        },
      }
    );
    /** Gets index freshness metadata for Documents. Supported for website search only. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.batchGetDocumentsMetadata(
      {
        'matcher.fhirMatcher.fhirResources': 'Test string',
        'matcher.urisMatcher.uris': 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.create(
      {
        documentId: 'Test string',
        parent: 'Test string',
      },
      {
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      }
    );
    /** Deletes a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.get(
      {
        name: 'Test string',
      }
    );
    /** Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items are created. Note: It is possible for a subset of the Documents to be successfully updated. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.import(
      {
        parent: 'Test string',
      },
      {
        alloyDbSource: {
          clusterId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          locationId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        autoGenerateIds: true,
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        bigtableSource: {
          bigtableOptions: {
            families: {
              A: {
                columns: [
                  {
                    encoding: 'Test string',
                    fieldName: 'Test string',
                    qualifier: 'Test string',
                    type: 'Test string',
                  },
                ],
                encoding: 'Test string',
                fieldName: 'Test string',
                type: 'Test string',
              },
            },
            keyFieldName: 'Test string',
          },
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        cloudSqlSource: {
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          instanceId: 'Test string',
          offload: true,
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        fhirStoreSource: {
          fhirStore: 'Test string',
          gcsStagingDir: 'Test string',
          resourceTypes: ['Test string'],
        },
        firestoreSource: {
          collectionId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          projectId: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        idField: 'Test string',
        inlineSource: {
          documents: [
            {
              content: {
                mimeType: 'Test string',
                rawBytes: 'Test string',
                uri: 'Test string',
              },
              derivedStructData: {
                A: 42,
              },
              id: 'Test string',
              indexStatus: {
                errorSamples: [
                  {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                ],
                indexTime: 'Test string',
              },
              indexTime: 'Test string',
              jsonData: 'Test string',
              name: 'Test string',
              parentDocumentId: 'Test string',
              schemaId: 'Test string',
              structData: {
                A: 42,
              },
            },
          ],
        },
        reconciliationMode: 'Test string',
        spannerSource: {
          databaseId: 'Test string',
          enableDataBoost: true,
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        updateMask: 'Test string',
      }
    );
    /** Gets a list of Documents. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      }
    );
    /** Permanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.purge(
      {
        parent: 'Test string',
      },
      {
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        filter: 'Test string',
        force: true,
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          documents: ['Test string'],
        },
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Imports CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completionSuggestions.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          suggestions: [
            {
              alternativePhrases: ['Test string'],
              frequency: 'Test string',
              globalScore: 42,
              groupId: 'Test string',
              groupScore: 42,
              languageCode: 'Test string',
              suggestion: 'Test string',
            },
          ],
        },
      }
    );
    /** Permanently deletes all CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completionSuggestions.purge(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Creates a Control. By default 1000 controls are allowed for a data store. A request can be submitted to adjust this limit. If the Control to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.create(
      {
        controlId: 'Test string',
        parent: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      }
    );
    /** Deletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Control. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Controls by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Control. Control action type cannot be changed. If the Control to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      }
    );
    /** Converses a conversation. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.converse(
      {
        name: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        conversation: {
          endTime: 'Test string',
          messages: [
            {
              createTime: 'Test string',
              reply: {
                summary: {
                  safetyAttributes: {
                    categories: ['Test string'],
                    scores: [42],
                  },
                  summarySkippedReasons: ['Test string'],
                  summaryText: 'Test string',
                  summaryWithMetadata: {
                    citationMetadata: {
                      citations: [
                        {
                          endIndex: 'Test string',
                          sources: [
                            {
                              referenceIndex: 'Test string',
                            },
                          ],
                          startIndex: 'Test string',
                        },
                      ],
                    },
                    references: [
                      {
                        chunkContents: [
                          {
                            content: 'Test string',
                            pageIdentifier: 'Test string',
                          },
                        ],
                        document: 'Test string',
                        title: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    summary: 'Test string',
                  },
                },
              },
              userInput: {
                context: {
                  activeDocument: 'Test string',
                  contextDocuments: ['Test string'],
                },
                input: 'Test string',
              },
            },
          ],
          name: 'Test string',
          startTime: 'Test string',
          state: 'Test string',
          userPseudoId: 'Test string',
        },
        filter: 'Test string',
        query: {
          context: {
            activeDocument: 'Test string',
            contextDocuments: ['Test string'],
          },
          input: 'Test string',
        },
        safeSearch: true,
        servingConfig: 'Test string',
        summarySpec: {
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonSummarySeekingQuery: true,
          includeCitations: true,
          languageCode: 'Test string',
          modelPromptSpec: {
            preamble: 'Test string',
          },
          modelSpec: {
            version: 'Test string',
          },
          summaryResultCount: 42,
          useSemanticChunks: true,
        },
        userLabels: {
          A: 'Test string',
        },
      }
    );
    /** Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Deletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Conversation. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Conversations by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.dataStores.models.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.models.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.dataStores.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.create(
      {
        parent: 'Test string',
        schemaId: 'Test string',
      },
      {
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      }
    );
    /** Deletes a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.get(
      {
        name: 'Test string',
      }
    );
    /** Gets a list of Schemas. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.patch(
      {
        allowMissing: true,
        name: 'Test string',
      },
      {
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      }
    );
    /** Answer query method. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.answer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStoreSpecs: [
              {
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Makes a recommendation, which requires a contextual user event. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.recommend(
      {
        servingConfig: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        params: {
          A: 42,
        },
        userEvent: {
          attributes: {
            A: {
              numbers: [42],
              text: ['Test string'],
            },
          },
          attributionToken: 'Test string',
          completionInfo: {
            selectedPosition: 42,
            selectedSuggestion: 'Test string',
          },
          dataStore: 'Test string',
          directUserRequest: true,
          documents: [
            {
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          engine: 'Test string',
          eventTime: 'Test string',
          eventType: 'Test string',
          filter: 'Test string',
          mediaInfo: {
            mediaProgressDuration: 'Test string',
            mediaProgressPercentage: 42,
          },
          pageInfo: {
            pageCategory: 'Test string',
            pageviewId: 'Test string',
            referrerUri: 'Test string',
            uri: 'Test string',
          },
          panel: {
            displayName: 'Test string',
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
          promotionIds: ['Test string'],
          searchInfo: {
            offset: 42,
            orderBy: 'Test string',
            searchQuery: 'Test string',
          },
          sessionId: 'Test string',
          tagIds: ['Test string'],
          transactionInfo: {
            cost: 42,
            currency: 'Test string',
            discountValue: 42,
            tax: 42,
            transactionId: 'Test string',
            value: 42,
          },
          userInfo: {
            userAgent: 'Test string',
            userId: 'Test string',
          },
          userPseudoId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        validateOnly: true,
      }
    );
    /** Performs a search. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.search(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        dataStoreSpecs: [
          {
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        offset: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Creates a Session. If the Session to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      }
    );
    /** Deletes a Session. If the Session to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a Session. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Sessions by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Session. Session action type cannot be changed. If the Session to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      }
    );
    /** Gets a Answer. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.answers.get(
      {
        name: 'Test string',
      }
    );
    /** Downgrade from advanced site search to basic site search. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.disableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {}
    );
    /** Upgrade from basic site search to advanced site search. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.enableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {}
    );
    /** Request on-demand recrawl for a list of URIs. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.recrawlUris(
      {
        siteSearchEngine: 'Test string',
      },
      {
        siteCredential: 'Test string',
        uris: ['Test string'],
      }
    );
    /** Creates TargetSite in a batch. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            targetSite: {
              exactMatch: true,
              failureReason: {
                quotaFailure: {
                  totalRequiredQuota: 'Test string',
                },
              },
              generatedUriPattern: 'Test string',
              indexingStatus: 'Test string',
              name: 'Test string',
              providedUriPattern: 'Test string',
              rootDomainUri: 'Test string',
              siteVerificationInfo: {
                siteVerificationState: 'Test string',
                verifyTime: 'Test string',
              },
              type: 'Test string',
              updateTime: 'Test string',
            },
          },
        ],
      }
    );
    /** Creates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.create(
      {
        parent: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.get(
      {
        name: 'Test string',
      }
    );
    /** Gets a list of TargetSites. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.patch(
      {
        name: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Imports all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.suggestionDenyListEntries.import(
      {
        parent: 'Test string',
      },
      {
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          entries: [
            {
              blockPhrase: 'Test string',
              matchOperator: 'Test string',
            },
          ],
        },
      }
    );
    /** Permanently deletes all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.suggestionDenyListEntries.purge(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.collect(
      {
        ets: 'Test string',
        parent: 'Test string',
        uri: 'Test string',
        userEvent: 'Test string',
      }
    );
    /** Bulk import of user events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          userEvents: [
            {
              attributes: {
                A: {
                  numbers: [42],
                  text: ['Test string'],
                },
              },
              attributionToken: 'Test string',
              completionInfo: {
                selectedPosition: 42,
                selectedSuggestion: 'Test string',
              },
              dataStore: 'Test string',
              directUserRequest: true,
              documents: [
                {
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              engine: 'Test string',
              eventTime: 'Test string',
              eventType: 'Test string',
              filter: 'Test string',
              mediaInfo: {
                mediaProgressDuration: 'Test string',
                mediaProgressPercentage: 42,
              },
              pageInfo: {
                pageCategory: 'Test string',
                pageviewId: 'Test string',
                referrerUri: 'Test string',
                uri: 'Test string',
              },
              panel: {
                displayName: 'Test string',
                panelId: 'Test string',
                panelPosition: 42,
                totalPanels: 42,
              },
              promotionIds: ['Test string'],
              searchInfo: {
                offset: 42,
                orderBy: 'Test string',
                searchQuery: 'Test string',
              },
              sessionId: 'Test string',
              tagIds: ['Test string'],
              transactionInfo: {
                cost: 42,
                currency: 'Test string',
                discountValue: 42,
                tax: 42,
                transactionId: 'Test string',
                value: 42,
              },
              userInfo: {
                userAgent: 'Test string',
                userId: 'Test string',
              },
              userPseudoId: 'Test string',
            },
          ],
        },
      }
    );
    /** Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.purge(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        force: true,
      }
    );
    /** Writes a single user event. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.write(
      {
        parent: 'Test string',
        writeAsync: true,
      },
      {
        attributes: {
          A: {
            numbers: [42],
            text: ['Test string'],
          },
        },
        attributionToken: 'Test string',
        completionInfo: {
          selectedPosition: 42,
          selectedSuggestion: 'Test string',
        },
        dataStore: 'Test string',
        directUserRequest: true,
        documents: [
          {
            id: 'Test string',
            joined: true,
            name: 'Test string',
            promotionIds: ['Test string'],
            quantity: 42,
            uri: 'Test string',
          },
        ],
        engine: 'Test string',
        eventTime: 'Test string',
        eventType: 'Test string',
        filter: 'Test string',
        mediaInfo: {
          mediaProgressDuration: 'Test string',
          mediaProgressPercentage: 42,
        },
        pageInfo: {
          pageCategory: 'Test string',
          pageviewId: 'Test string',
          referrerUri: 'Test string',
          uri: 'Test string',
        },
        panel: {
          displayName: 'Test string',
          panelId: 'Test string',
          panelPosition: 42,
          totalPanels: 42,
        },
        promotionIds: ['Test string'],
        searchInfo: {
          offset: 42,
          orderBy: 'Test string',
          searchQuery: 'Test string',
        },
        sessionId: 'Test string',
        tagIds: ['Test string'],
        transactionInfo: {
          cost: 42,
          currency: 'Test string',
          discountValue: 42,
          tax: 42,
          transactionId: 'Test string',
          value: 42,
        },
        userInfo: {
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Performs a grounding check. */
    await gapi.client.discoveryengine.projects.locations.groundingConfigs.check(
      {
        groundingConfig: 'Test string',
      },
      {
        answerCandidate: 'Test string',
        facts: [
          {
            attributes: {
              A: 'Test string',
            },
            factText: 'Test string',
          },
        ],
        groundingSpec: {
          citationThreshold: 42,
        },
        userLabels: {
          A: 'Test string',
        },
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.identity_mapping_stores.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.identity_mapping_stores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Ranks a list of text records based on the given input query. */
    await gapi.client.discoveryengine.projects.locations.rankingConfigs.rank(
      {
        rankingConfig: 'Test string',
      },
      {
        ignoreRecordDetailsInResponse: true,
        model: 'Test string',
        query: 'Test string',
        records: [
          {
            content: 'Test string',
            id: 'Test string',
            score: 42,
            title: 'Test string',
          },
        ],
        topN: 42,
        userLabels: {
          A: 'Test string',
        },
      }
    );
    /** Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly. */
    await gapi.client.discoveryengine.projects.locations.userEvents.collect({
      ets: 'Test string',
      parent: 'Test string',
      uri: 'Test string',
      userEvent: 'Test string',
    });
    /** Writes a single user event. */
    await gapi.client.discoveryengine.projects.locations.userEvents.write(
      {
        parent: 'Test string',
        writeAsync: true,
      },
      {
        attributes: {
          A: {
            numbers: [42],
            text: ['Test string'],
          },
        },
        attributionToken: 'Test string',
        completionInfo: {
          selectedPosition: 42,
          selectedSuggestion: 'Test string',
        },
        dataStore: 'Test string',
        directUserRequest: true,
        documents: [
          {
            id: 'Test string',
            joined: true,
            name: 'Test string',
            promotionIds: ['Test string'],
            quantity: 42,
            uri: 'Test string',
          },
        ],
        engine: 'Test string',
        eventTime: 'Test string',
        eventType: 'Test string',
        filter: 'Test string',
        mediaInfo: {
          mediaProgressDuration: 'Test string',
          mediaProgressPercentage: 42,
        },
        pageInfo: {
          pageCategory: 'Test string',
          pageviewId: 'Test string',
          referrerUri: 'Test string',
          uri: 'Test string',
        },
        panel: {
          displayName: 'Test string',
          panelId: 'Test string',
          panelPosition: 42,
          totalPanels: 42,
        },
        promotionIds: ['Test string'],
        searchInfo: {
          offset: 42,
          orderBy: 'Test string',
          searchQuery: 'Test string',
        },
        sessionId: 'Test string',
        tagIds: ['Test string'],
        transactionInfo: {
          cost: 42,
          currency: 'Test string',
          discountValue: 42,
          tax: 42,
          transactionId: 'Test string',
          value: 42,
        },
        userInfo: {
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.discoveryengine.projects.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
