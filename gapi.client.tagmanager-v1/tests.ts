/* This is stub file for gapi.client.tagmanager-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240923

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://tagmanager.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.tagmanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Delete your Google Tag Manager containers */
    'https://www.googleapis.com/auth/tagmanager.delete.containers',
    /** Manage your Google Tag Manager container and its subcomponents, excluding versioning and publishing */
    'https://www.googleapis.com/auth/tagmanager.edit.containers',
    /** Manage your Google Tag Manager container versions */
    'https://www.googleapis.com/auth/tagmanager.edit.containerversions',
    /** View and manage your Google Tag Manager accounts */
    'https://www.googleapis.com/auth/tagmanager.manage.accounts',
    /** Manage user permissions of your Google Tag Manager account and container */
    'https://www.googleapis.com/auth/tagmanager.manage.users',
    /** Publish your Google Tag Manager container versions */
    'https://www.googleapis.com/auth/tagmanager.publish',
    /** View your Google Tag Manager container and its subcomponents */
    'https://www.googleapis.com/auth/tagmanager.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets a GTM Account. */
    await gapi.client.tagmanager.accounts.get({
      accountId: 'Test string',
    });
    /** Lists all GTM Accounts that a user has access to. */
    await gapi.client.tagmanager.accounts.list({});
    /** Updates a GTM Account. */
    await gapi.client.tagmanager.accounts.update(
      {
        accountId: 'Test string',
        fingerprint: 'Test string',
      },
      {
        accountId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        shareData: true,
      }
    );
    /** Creates a Container. */
    await gapi.client.tagmanager.accounts.containers.create(
      {
        accountId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        domainName: ['Test string'],
        enabledBuiltInVariable: ['Test string'],
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        publicId: 'Test string',
        timeZoneCountryId: 'Test string',
        timeZoneId: 'Test string',
        usageContext: ['Test string'],
      }
    );
    /** Deletes a Container. */
    await gapi.client.tagmanager.accounts.containers.delete({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Gets a Container. */
    await gapi.client.tagmanager.accounts.containers.get({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Lists all Containers that belongs to a GTM Account. */
    await gapi.client.tagmanager.accounts.containers.list({
      accountId: 'Test string',
    });
    /** Updates a Container. */
    await gapi.client.tagmanager.accounts.containers.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        domainName: ['Test string'],
        enabledBuiltInVariable: ['Test string'],
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        publicId: 'Test string',
        timeZoneCountryId: 'Test string',
        timeZoneId: 'Test string',
        usageContext: ['Test string'],
      }
    );
    /** Creates a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.create(
      {
        accountId: 'Test string',
        containerId: 'Test string',
      },
      {
        accountId: 'Test string',
        authorizationCode: 'Test string',
        authorizationTimestampMs: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        description: 'Test string',
        enableDebug: true,
        environmentId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        type: 'Test string',
        url: 'Test string',
      }
    );
    /** Deletes a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.delete({
      accountId: 'Test string',
      containerId: 'Test string',
      environmentId: 'Test string',
    });
    /** Gets a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.get({
      accountId: 'Test string',
      containerId: 'Test string',
      environmentId: 'Test string',
    });
    /** Lists all GTM Environments of a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.environments.list({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Updates a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        environmentId: 'Test string',
        fingerprint: 'Test string',
      },
      {
        accountId: 'Test string',
        authorizationCode: 'Test string',
        authorizationTimestampMs: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        description: 'Test string',
        enableDebug: true,
        environmentId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        type: 'Test string',
        url: 'Test string',
      }
    );
    /** Creates a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.folders.create(
      {
        accountId: 'Test string',
        containerId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.folders.delete({
      accountId: 'Test string',
      containerId: 'Test string',
      folderId: 'Test string',
    });
    /** Gets a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.folders.get({
      accountId: 'Test string',
      containerId: 'Test string',
      folderId: 'Test string',
    });
    /** Lists all GTM Folders of a Container. */
    await gapi.client.tagmanager.accounts.containers.folders.list({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Updates a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.folders.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
        name: 'Test string',
      }
    );
    /** List all entities in a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.folders.entities.list({
      accountId: 'Test string',
      containerId: 'Test string',
      folderId: 'Test string',
    });
    /** Moves entities to a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.move_folders.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        folderId: 'Test string',
        tagId: 'Test string',
        triggerId: 'Test string',
        variableId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
        name: 'Test string',
      }
    );
    /** Re-generates the authorization code for a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.reauthorize_environments.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        environmentId: 'Test string',
      },
      {
        accountId: 'Test string',
        authorizationCode: 'Test string',
        authorizationTimestampMs: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        description: 'Test string',
        enableDebug: true,
        environmentId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        type: 'Test string',
        url: 'Test string',
      }
    );
    /** Creates a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.tags.create(
      {
        accountId: 'Test string',
        containerId: 'Test string',
      },
      {
        accountId: 'Test string',
        blockingRuleId: ['Test string'],
        blockingTriggerId: ['Test string'],
        containerId: 'Test string',
        fingerprint: 'Test string',
        firingRuleId: ['Test string'],
        firingTriggerId: ['Test string'],
        liveOnly: true,
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        paused: true,
        priority: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        setupTag: [
          {
            stopOnSetupFailure: true,
            tagName: 'Test string',
          },
        ],
        tagFiringOption: 'Test string',
        tagId: 'Test string',
        teardownTag: [
          {
            stopTeardownOnFailure: true,
            tagName: 'Test string',
          },
        ],
        type: 'Test string',
      }
    );
    /** Deletes a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.tags.delete({
      accountId: 'Test string',
      containerId: 'Test string',
      tagId: 'Test string',
    });
    /** Gets a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.tags.get({
      accountId: 'Test string',
      containerId: 'Test string',
      tagId: 'Test string',
    });
    /** Lists all GTM Tags of a Container. */
    await gapi.client.tagmanager.accounts.containers.tags.list({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Updates a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.tags.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        tagId: 'Test string',
      },
      {
        accountId: 'Test string',
        blockingRuleId: ['Test string'],
        blockingTriggerId: ['Test string'],
        containerId: 'Test string',
        fingerprint: 'Test string',
        firingRuleId: ['Test string'],
        firingTriggerId: ['Test string'],
        liveOnly: true,
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        paused: true,
        priority: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        setupTag: [
          {
            stopOnSetupFailure: true,
            tagName: 'Test string',
          },
        ],
        tagFiringOption: 'Test string',
        tagId: 'Test string',
        teardownTag: [
          {
            stopTeardownOnFailure: true,
            tagName: 'Test string',
          },
        ],
        type: 'Test string',
      }
    );
    /** Creates a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.triggers.create(
      {
        accountId: 'Test string',
        containerId: 'Test string',
      },
      {
        accountId: 'Test string',
        autoEventFilter: [
          {
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        checkValidation: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        containerId: 'Test string',
        continuousTimeMinMilliseconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        customEventFilter: [
          {
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        eventName: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        filter: [
          {
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        fingerprint: 'Test string',
        horizontalScrollPercentageList: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        interval: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        intervalSeconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        limit: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        maxTimerLengthSeconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        name: 'Test string',
        parameter: [
          {
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        selector: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        totalTimeMinMilliseconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        triggerId: 'Test string',
        type: 'Test string',
        uniqueTriggerId: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        verticalScrollPercentageList: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visibilitySelector: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMax: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMin: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTags: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTagsTimeout: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
      }
    );
    /** Deletes a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.triggers.delete({
      accountId: 'Test string',
      containerId: 'Test string',
      triggerId: 'Test string',
    });
    /** Gets a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.triggers.get({
      accountId: 'Test string',
      containerId: 'Test string',
      triggerId: 'Test string',
    });
    /** Lists all GTM Triggers of a Container. */
    await gapi.client.tagmanager.accounts.containers.triggers.list({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Updates a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.triggers.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        triggerId: 'Test string',
      },
      {
        accountId: 'Test string',
        autoEventFilter: [
          {
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        checkValidation: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        containerId: 'Test string',
        continuousTimeMinMilliseconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        customEventFilter: [
          {
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        eventName: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        filter: [
          {
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        fingerprint: 'Test string',
        horizontalScrollPercentageList: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        interval: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        intervalSeconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        limit: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        maxTimerLengthSeconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        name: 'Test string',
        parameter: [
          {
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        selector: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        totalTimeMinMilliseconds: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        triggerId: 'Test string',
        type: 'Test string',
        uniqueTriggerId: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        verticalScrollPercentageList: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visibilitySelector: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMax: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMin: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTags: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTagsTimeout: {
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
      }
    );
    /** Creates a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.variables.create(
      {
        accountId: 'Test string',
        containerId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        disablingTriggerId: ['Test string'],
        enablingTriggerId: ['Test string'],
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        type: 'Test string',
        variableId: 'Test string',
      }
    );
    /** Deletes a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.variables.delete({
      accountId: 'Test string',
      containerId: 'Test string',
      variableId: 'Test string',
    });
    /** Gets a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.variables.get({
      accountId: 'Test string',
      containerId: 'Test string',
      variableId: 'Test string',
    });
    /** Lists all GTM Variables of a Container. */
    await gapi.client.tagmanager.accounts.containers.variables.list({
      accountId: 'Test string',
      containerId: 'Test string',
    });
    /** Updates a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.variables.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        variableId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        disablingTriggerId: ['Test string'],
        enablingTriggerId: ['Test string'],
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        type: 'Test string',
        variableId: 'Test string',
      }
    );
    /** Creates a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.create(
      {
        accountId: 'Test string',
        containerId: 'Test string',
      },
      {
        name: 'Test string',
        notes: 'Test string',
        quickPreview: true,
      }
    );
    /** Deletes a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.delete({
      accountId: 'Test string',
      containerId: 'Test string',
      containerVersionId: 'Test string',
    });
    /** Gets a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.get({
      accountId: 'Test string',
      containerId: 'Test string',
      containerVersionId: 'Test string',
    });
    /** Lists all Container Versions of a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.versions.list({
      accountId: 'Test string',
      containerId: 'Test string',
      headers: true,
      includeDeleted: true,
    });
    /** Publishes a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.publish({
      accountId: 'Test string',
      containerId: 'Test string',
      containerVersionId: 'Test string',
      fingerprint: 'Test string',
    });
    /** Restores a Container Version. This will overwrite the container's current configuration (including its variables, triggers and tags). The operation will not have any effect on the version that is being served (i.e. the published version). */
    await gapi.client.tagmanager.accounts.containers.versions.restore({
      accountId: 'Test string',
      containerId: 'Test string',
      containerVersionId: 'Test string',
    });
    /** Undeletes a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.undelete({
      accountId: 'Test string',
      containerId: 'Test string',
      containerVersionId: 'Test string',
    });
    /** Updates a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.update(
      {
        accountId: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        fingerprint: 'Test string',
      },
      {
        accountId: 'Test string',
        container: {
          accountId: 'Test string',
          containerId: 'Test string',
          domainName: ['Test string'],
          enabledBuiltInVariable: ['Test string'],
          fingerprint: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          publicId: 'Test string',
          timeZoneCountryId: 'Test string',
          timeZoneId: 'Test string',
          usageContext: ['Test string'],
        },
        containerId: 'Test string',
        containerVersionId: 'Test string',
        deleted: true,
        fingerprint: 'Test string',
        folder: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            fingerprint: 'Test string',
            folderId: 'Test string',
            name: 'Test string',
          },
        ],
        macro: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            disablingRuleId: ['Test string'],
            enablingRuleId: ['Test string'],
            fingerprint: 'Test string',
            macroId: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            scheduleEndMs: 'Test string',
            scheduleStartMs: 'Test string',
            type: 'Test string',
          },
        ],
        name: 'Test string',
        notes: 'Test string',
        rule: [
          {
            accountId: 'Test string',
            condition: [
              {
                parameter: [
                  {
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            containerId: 'Test string',
            fingerprint: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            ruleId: 'Test string',
          },
        ],
        tag: [
          {
            accountId: 'Test string',
            blockingRuleId: ['Test string'],
            blockingTriggerId: ['Test string'],
            containerId: 'Test string',
            fingerprint: 'Test string',
            firingRuleId: ['Test string'],
            firingTriggerId: ['Test string'],
            liveOnly: true,
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            paused: true,
            priority: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            scheduleEndMs: 'Test string',
            scheduleStartMs: 'Test string',
            setupTag: [
              {
                stopOnSetupFailure: true,
                tagName: 'Test string',
              },
            ],
            tagFiringOption: 'Test string',
            tagId: 'Test string',
            teardownTag: [
              {
                stopTeardownOnFailure: true,
                tagName: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        trigger: [
          {
            accountId: 'Test string',
            autoEventFilter: [
              {
                parameter: [
                  {
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            checkValidation: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            containerId: 'Test string',
            continuousTimeMinMilliseconds: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            customEventFilter: [
              {
                parameter: [
                  {
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            eventName: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            filter: [
              {
                parameter: [
                  {
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            fingerprint: 'Test string',
            horizontalScrollPercentageList: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            interval: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            intervalSeconds: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            limit: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            maxTimerLengthSeconds: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            name: 'Test string',
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            selector: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            totalTimeMinMilliseconds: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            triggerId: 'Test string',
            type: 'Test string',
            uniqueTriggerId: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            verticalScrollPercentageList: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            visibilitySelector: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            visiblePercentageMax: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            visiblePercentageMin: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            waitForTags: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            waitForTagsTimeout: {
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          },
        ],
        variable: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            disablingTriggerId: ['Test string'],
            enablingTriggerId: ['Test string'],
            fingerprint: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            scheduleEndMs: 'Test string',
            scheduleStartMs: 'Test string',
            type: 'Test string',
            variableId: 'Test string',
          },
        ],
      }
    );
    /** Creates a user's Account & Container Permissions. */
    await gapi.client.tagmanager.accounts.permissions.create(
      {
        accountId: 'Test string',
      },
      {
        accountAccess: {
          permission: ['Test string'],
        },
        accountId: 'Test string',
        containerAccess: [
          {
            containerId: 'Test string',
            permission: ['Test string'],
          },
        ],
        emailAddress: 'Test string',
        permissionId: 'Test string',
      }
    );
    /** Removes a user from the account, revoking access to it and all of its containers. */
    await gapi.client.tagmanager.accounts.permissions.delete({
      accountId: 'Test string',
      permissionId: 'Test string',
    });
    /** Gets a user's Account & Container Permissions. */
    await gapi.client.tagmanager.accounts.permissions.get({
      accountId: 'Test string',
      permissionId: 'Test string',
    });
    /** List all users that have access to the account along with Account and Container Permissions granted to each of them. */
    await gapi.client.tagmanager.accounts.permissions.list({
      accountId: 'Test string',
    });
    /** Updates a user's Account & Container Permissions. */
    await gapi.client.tagmanager.accounts.permissions.update(
      {
        accountId: 'Test string',
        permissionId: 'Test string',
      },
      {
        accountAccess: {
          permission: ['Test string'],
        },
        accountId: 'Test string',
        containerAccess: [
          {
            containerId: 'Test string',
            permission: ['Test string'],
          },
        ],
        emailAddress: 'Test string',
        permissionId: 'Test string',
      }
    );
  }
});
