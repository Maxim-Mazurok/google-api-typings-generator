/* This is stub file for gapi.client.analyticsdata-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220822

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://analyticsdata.googleapis.com/$discovery/rest?version=v1beta');
    /** now we can use gapi.client.analyticsdata */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** View and manage your Google Analytics data */
        'https://www.googleapis.com/auth/analytics',
        /** See and download your Google Analytics data */
        'https://www.googleapis.com/auth/analytics.readonly',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Returns multiple pivot reports in a batch. All reports must be for the same GA4 Property. */
        await gapi.client.analyticsdata.properties.batchRunPivotReports({
            property: "Test string",
        }, {
            requests: [
                {
                    cohortSpec: {
                        cohortReportSettings: {
                            accumulate: true,
                        },
                        cohorts: [
                            {
                                dateRange: {
                                    endDate: "Test string",
                                    name: "Test string",
                                    startDate: "Test string",
                                },
                                dimension: "Test string",
                                name: "Test string",
                            }
                        ],
                        cohortsRange: {
                            endOffset: 42,
                            granularity: "Test string",
                            startOffset: 42,
                        },
                    },
                    currencyCode: "Test string",
                    dateRanges: [
                        {
                            endDate: "Test string",
                            name: "Test string",
                            startDate: "Test string",
                        }
                    ],
                    dimensionFilter: {
                        andGroup: {
                            expressions: undefined,
                        },
                        filter: {
                            betweenFilter: {
                                fromValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                                toValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            fieldName: "Test string",
                            inListFilter: {
                                caseSensitive: true,
                                values: [
                                    "Test string"
                                ],
                            },
                            numericFilter: {
                                operation: "Test string",
                                value: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            stringFilter: {
                                caseSensitive: true,
                                matchType: "Test string",
                                value: "Test string",
                            },
                        },
                        notExpression: undefined,
                        orGroup: {
                            expressions: undefined,
                        },
                    },
                    dimensions: [
                        {
                            dimensionExpression: {
                                concatenate: {
                                    delimiter: "Test string",
                                    dimensionNames: [
                                        "Test string"
                                    ],
                                },
                                lowerCase: {
                                    dimensionName: "Test string",
                                },
                                upperCase: {
                                    dimensionName: "Test string",
                                },
                            },
                            name: "Test string",
                        }
                    ],
                    keepEmptyRows: true,
                    metricFilter: {
                        andGroup: {
                            expressions: undefined,
                        },
                        filter: {
                            betweenFilter: {
                                fromValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                                toValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            fieldName: "Test string",
                            inListFilter: {
                                caseSensitive: true,
                                values: [
                                    "Test string"
                                ],
                            },
                            numericFilter: {
                                operation: "Test string",
                                value: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            stringFilter: {
                                caseSensitive: true,
                                matchType: "Test string",
                                value: "Test string",
                            },
                        },
                        notExpression: undefined,
                        orGroup: {
                            expressions: undefined,
                        },
                    },
                    metrics: [
                        {
                            expression: "Test string",
                            invisible: true,
                            name: "Test string",
                        }
                    ],
                    pivots: [
                        {
                            fieldNames: [
                                "Test string"
                            ],
                            limit: "Test string",
                            metricAggregations: [
                                "Test string"
                            ],
                            offset: "Test string",
                            orderBys: [
                                {
                                    desc: true,
                                    dimension: {
                                        dimensionName: "Test string",
                                        orderType: "Test string",
                                    },
                                    metric: {
                                        metricName: "Test string",
                                    },
                                    pivot: {
                                        metricName: "Test string",
                                        pivotSelections: [
                                            {
                                                dimensionName: "Test string",
                                                dimensionValue: "Test string",
                                            }
                                        ],
                                    },
                                }
                            ],
                        }
                    ],
                    property: "Test string",
                    returnPropertyQuota: true,
                }
            ],
        });
        /** Returns multiple reports in a batch. All reports must be for the same GA4 Property. */
        await gapi.client.analyticsdata.properties.batchRunReports({
            property: "Test string",
        }, {
            requests: [
                {
                    cohortSpec: {
                        cohortReportSettings: {
                            accumulate: true,
                        },
                        cohorts: [
                            {
                                dateRange: {
                                    endDate: "Test string",
                                    name: "Test string",
                                    startDate: "Test string",
                                },
                                dimension: "Test string",
                                name: "Test string",
                            }
                        ],
                        cohortsRange: {
                            endOffset: 42,
                            granularity: "Test string",
                            startOffset: 42,
                        },
                    },
                    currencyCode: "Test string",
                    dateRanges: [
                        {
                            endDate: "Test string",
                            name: "Test string",
                            startDate: "Test string",
                        }
                    ],
                    dimensionFilter: {
                        andGroup: {
                            expressions: undefined,
                        },
                        filter: {
                            betweenFilter: {
                                fromValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                                toValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            fieldName: "Test string",
                            inListFilter: {
                                caseSensitive: true,
                                values: [
                                    "Test string"
                                ],
                            },
                            numericFilter: {
                                operation: "Test string",
                                value: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            stringFilter: {
                                caseSensitive: true,
                                matchType: "Test string",
                                value: "Test string",
                            },
                        },
                        notExpression: undefined,
                        orGroup: {
                            expressions: undefined,
                        },
                    },
                    dimensions: [
                        {
                            dimensionExpression: {
                                concatenate: {
                                    delimiter: "Test string",
                                    dimensionNames: [
                                        "Test string"
                                    ],
                                },
                                lowerCase: {
                                    dimensionName: "Test string",
                                },
                                upperCase: {
                                    dimensionName: "Test string",
                                },
                            },
                            name: "Test string",
                        }
                    ],
                    keepEmptyRows: true,
                    limit: "Test string",
                    metricAggregations: [
                        "Test string"
                    ],
                    metricFilter: {
                        andGroup: {
                            expressions: undefined,
                        },
                        filter: {
                            betweenFilter: {
                                fromValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                                toValue: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            fieldName: "Test string",
                            inListFilter: {
                                caseSensitive: true,
                                values: [
                                    "Test string"
                                ],
                            },
                            numericFilter: {
                                operation: "Test string",
                                value: {
                                    doubleValue: 42,
                                    int64Value: "Test string",
                                },
                            },
                            stringFilter: {
                                caseSensitive: true,
                                matchType: "Test string",
                                value: "Test string",
                            },
                        },
                        notExpression: undefined,
                        orGroup: {
                            expressions: undefined,
                        },
                    },
                    metrics: [
                        {
                            expression: "Test string",
                            invisible: true,
                            name: "Test string",
                        }
                    ],
                    offset: "Test string",
                    orderBys: [
                        {
                            desc: true,
                            dimension: {
                                dimensionName: "Test string",
                                orderType: "Test string",
                            },
                            metric: {
                                metricName: "Test string",
                            },
                            pivot: {
                                metricName: "Test string",
                                pivotSelections: [
                                    {
                                        dimensionName: "Test string",
                                        dimensionValue: "Test string",
                                    }
                                ],
                            },
                        }
                    ],
                    property: "Test string",
                    returnPropertyQuota: true,
                }
            ],
        });
        /**
         * This compatibility method lists dimensions and metrics that can be added to a report request and maintain compatibility. This method fails if the request's dimensions and metrics are
         * incompatible. In Google Analytics, reports fail if they request incompatible dimensions and/or metrics; in that case, you will need to remove dimensions and/or metrics from the
         * incompatible report until the report is compatible. The Realtime and Core reports have different compatibility rules. This method checks compatibility for Core reports.
         */
        await gapi.client.analyticsdata.properties.checkCompatibility({
            property: "Test string",
        }, {
            compatibilityFilter: "Test string",
            dimensionFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            dimensions: [
                {
                    dimensionExpression: {
                        concatenate: {
                            delimiter: "Test string",
                            dimensionNames: [
                                "Test string"
                            ],
                        },
                        lowerCase: {
                            dimensionName: "Test string",
                        },
                        upperCase: {
                            dimensionName: "Test string",
                        },
                    },
                    name: "Test string",
                }
            ],
            metricFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            metrics: [
                {
                    expression: "Test string",
                    invisible: true,
                    name: "Test string",
                }
            ],
        });
        /**
         * Returns metadata for dimensions and metrics available in reporting methods. Used to explore the dimensions and metrics. In this method, a Google Analytics GA4 Property Identifier is
         * specified in the request, and the metadata response includes Custom dimensions and metrics as well as Universal metadata. For example if a custom metric with parameter name
         * `levels_unlocked` is registered to a property, the Metadata response will contain `customEvent:levels_unlocked`. Universal metadata are dimensions and metrics applicable to any property
         * such as `country` and `totalUsers`.
         */
        await gapi.client.analyticsdata.properties.getMetadata({
            name: "Test string",
        });
        /**
         * Returns a customized pivot report of your Google Analytics event data. Pivot reports are more advanced and expressive formats than regular reports. In a pivot report, dimensions are
         * only visible if they are included in a pivot. Multiple pivots can be specified to further dissect your data.
         */
        await gapi.client.analyticsdata.properties.runPivotReport({
            property: "Test string",
        }, {
            cohortSpec: {
                cohortReportSettings: {
                    accumulate: true,
                },
                cohorts: [
                    {
                        dateRange: {
                            endDate: "Test string",
                            name: "Test string",
                            startDate: "Test string",
                        },
                        dimension: "Test string",
                        name: "Test string",
                    }
                ],
                cohortsRange: {
                    endOffset: 42,
                    granularity: "Test string",
                    startOffset: 42,
                },
            },
            currencyCode: "Test string",
            dateRanges: [
                {
                    endDate: "Test string",
                    name: "Test string",
                    startDate: "Test string",
                }
            ],
            dimensionFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            dimensions: [
                {
                    dimensionExpression: {
                        concatenate: {
                            delimiter: "Test string",
                            dimensionNames: [
                                "Test string"
                            ],
                        },
                        lowerCase: {
                            dimensionName: "Test string",
                        },
                        upperCase: {
                            dimensionName: "Test string",
                        },
                    },
                    name: "Test string",
                }
            ],
            keepEmptyRows: true,
            metricFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            metrics: [
                {
                    expression: "Test string",
                    invisible: true,
                    name: "Test string",
                }
            ],
            pivots: [
                {
                    fieldNames: [
                        "Test string"
                    ],
                    limit: "Test string",
                    metricAggregations: [
                        "Test string"
                    ],
                    offset: "Test string",
                    orderBys: [
                        {
                            desc: true,
                            dimension: {
                                dimensionName: "Test string",
                                orderType: "Test string",
                            },
                            metric: {
                                metricName: "Test string",
                            },
                            pivot: {
                                metricName: "Test string",
                                pivotSelections: [
                                    {
                                        dimensionName: "Test string",
                                        dimensionValue: "Test string",
                                    }
                                ],
                            },
                        }
                    ],
                }
            ],
            property: "Test string",
            returnPropertyQuota: true,
        });
        /**
         * Returns a customized report of realtime event data for your property. Events appear in realtime reports seconds after they have been sent to the Google Analytics. Realtime reports show
         * events and usage data for the periods of time ranging from the present moment to 30 minutes ago (up to 60 minutes for Google Analytics 360 properties). For a guide to constructing
         * realtime requests & understanding responses, see [Creating a Realtime Report](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-basics).
         */
        await gapi.client.analyticsdata.properties.runRealtimeReport({
            property: "Test string",
        }, {
            dimensionFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            dimensions: [
                {
                    dimensionExpression: {
                        concatenate: {
                            delimiter: "Test string",
                            dimensionNames: [
                                "Test string"
                            ],
                        },
                        lowerCase: {
                            dimensionName: "Test string",
                        },
                        upperCase: {
                            dimensionName: "Test string",
                        },
                    },
                    name: "Test string",
                }
            ],
            limit: "Test string",
            metricAggregations: [
                "Test string"
            ],
            metricFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            metrics: [
                {
                    expression: "Test string",
                    invisible: true,
                    name: "Test string",
                }
            ],
            minuteRanges: [
                {
                    endMinutesAgo: 42,
                    name: "Test string",
                    startMinutesAgo: 42,
                }
            ],
            orderBys: [
                {
                    desc: true,
                    dimension: {
                        dimensionName: "Test string",
                        orderType: "Test string",
                    },
                    metric: {
                        metricName: "Test string",
                    },
                    pivot: {
                        metricName: "Test string",
                        pivotSelections: [
                            {
                                dimensionName: "Test string",
                                dimensionValue: "Test string",
                            }
                        ],
                    },
                }
            ],
            returnPropertyQuota: true,
        });
        /**
         * Returns a customized report of your Google Analytics event data. Reports contain statistics derived from data collected by the Google Analytics tracking code. The data returned from the
         * API is as a table with columns for the requested dimensions and metrics. Metrics are individual measurements of user activity on your property, such as active users or event count.
         * Dimensions break down metrics across some common criteria, such as country or event name. For a guide to constructing requests & understanding responses, see [Creating a
         * Report](https://developers.google.com/analytics/devguides/reporting/data/v1/basics).
         */
        await gapi.client.analyticsdata.properties.runReport({
            property: "Test string",
        }, {
            cohortSpec: {
                cohortReportSettings: {
                    accumulate: true,
                },
                cohorts: [
                    {
                        dateRange: {
                            endDate: "Test string",
                            name: "Test string",
                            startDate: "Test string",
                        },
                        dimension: "Test string",
                        name: "Test string",
                    }
                ],
                cohortsRange: {
                    endOffset: 42,
                    granularity: "Test string",
                    startOffset: 42,
                },
            },
            currencyCode: "Test string",
            dateRanges: [
                {
                    endDate: "Test string",
                    name: "Test string",
                    startDate: "Test string",
                }
            ],
            dimensionFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            dimensions: [
                {
                    dimensionExpression: {
                        concatenate: {
                            delimiter: "Test string",
                            dimensionNames: [
                                "Test string"
                            ],
                        },
                        lowerCase: {
                            dimensionName: "Test string",
                        },
                        upperCase: {
                            dimensionName: "Test string",
                        },
                    },
                    name: "Test string",
                }
            ],
            keepEmptyRows: true,
            limit: "Test string",
            metricAggregations: [
                "Test string"
            ],
            metricFilter: {
                andGroup: {
                    expressions: undefined,
                },
                filter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            metrics: [
                {
                    expression: "Test string",
                    invisible: true,
                    name: "Test string",
                }
            ],
            offset: "Test string",
            orderBys: [
                {
                    desc: true,
                    dimension: {
                        dimensionName: "Test string",
                        orderType: "Test string",
                    },
                    metric: {
                        metricName: "Test string",
                    },
                    pivot: {
                        metricName: "Test string",
                        pivotSelections: [
                            {
                                dimensionName: "Test string",
                                dimensionValue: "Test string",
                            }
                        ],
                    },
                }
            ],
            property: "Test string",
            returnPropertyQuota: true,
        });
    }
});
