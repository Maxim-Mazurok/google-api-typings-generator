/* This is stub file for gapi.client.addressvalidation-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250303

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://addressvalidation.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.addressvalidation */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** Private Service: https://www.googleapis.com/auth/maps-platform.addressvalidation */
    'https://www.googleapis.com/auth/maps-platform.addressvalidation',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Feedback about the outcome of the sequence of validation attempts. This should be the last call made after a sequence of validation calls for the same address, and should be called once the transaction is concluded. This should only be sent once for the sequence of `ValidateAddress` requests needed to validate an address fully. */
    await gapi.client.addressvalidation.v1.provideValidationFeedback(
      {},
      {
        conclusion: 'Test string',
        responseId: 'Test string',
      },
    );
    /** Validates an address. */
    await gapi.client.addressvalidation.v1.validateAddress(
      {},
      {
        address: {
          addressLines: ['Test string'],
          administrativeArea: 'Test string',
          languageCode: 'Test string',
          locality: 'Test string',
          organization: 'Test string',
          postalCode: 'Test string',
          recipients: ['Test string'],
          regionCode: 'Test string',
          revision: 42,
          sortingCode: 'Test string',
          sublocality: 'Test string',
        },
        enableUspsCass: true,
        languageOptions: {
          returnEnglishLatinAddress: true,
        },
        previousResponseId: 'Test string',
        sessionToken: 'Test string',
      },
    );
  }
});
