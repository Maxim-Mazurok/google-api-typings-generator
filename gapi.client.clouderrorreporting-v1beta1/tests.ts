/* This is stub file for gapi.client.clouderrorreporting-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250117

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://clouderrorreporting.googleapis.com/$discovery/rest?version=v1beta1'
  );
  /** now we can use gapi.client.clouderrorreporting */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Deletes all error events of a given project. */
    await gapi.client.clouderrorreporting.projects.deleteEvents({
      projectName: 'Test string',
    });
    /** Lists the specified events. */
    await gapi.client.clouderrorreporting.projects.events.list({
      groupId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectName: 'Test string',
      'serviceFilter.resourceType': 'Test string',
      'serviceFilter.service': 'Test string',
      'serviceFilter.version': 'Test string',
      'timeRange.period': 'Test string',
    });
    /** Report an individual error event and record the event to a log. This endpoint accepts **either** an OAuth token, **or** an [API key](https://support.google.com/cloud/answer/6158862) for authentication. To use an API key, append it to the URL as the value of a `key` parameter. For example: `POST https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report?key=123ABC456` **Note:** [Error Reporting] (https://cloud.google.com/error-reporting) is a service built on Cloud Logging and can analyze log entries when all of the following are true: * Customer-managed encryption keys (CMEK) are disabled on the log bucket. * The log bucket satisfies one of the following: * The log bucket is stored in the same project where the logs originated. * The logs were routed to a project, and then that project stored those logs in a log bucket that it owns. */
    await gapi.client.clouderrorreporting.projects.events.report(
      {
        projectName: 'Test string',
      },
      {
        context: {
          httpRequest: {
            method: 'Test string',
            referrer: 'Test string',
            remoteIp: 'Test string',
            responseStatusCode: 42,
            url: 'Test string',
            userAgent: 'Test string',
          },
          reportLocation: {
            filePath: 'Test string',
            functionName: 'Test string',
            lineNumber: 42,
          },
          sourceReferences: [
            {
              repository: 'Test string',
              revisionId: 'Test string',
            },
          ],
          user: 'Test string',
        },
        eventTime: 'Test string',
        message: 'Test string',
        serviceContext: {
          resourceType: 'Test string',
          service: 'Test string',
          version: 'Test string',
        },
      }
    );
    /** Get the specified group. */
    await gapi.client.clouderrorreporting.projects.groups.get({
      groupName: 'Test string',
    });
    /** Replace the data for the specified group. Fails if the group does not exist. */
    await gapi.client.clouderrorreporting.projects.groups.update(
      {
        name: 'Test string',
      },
      {
        groupId: 'Test string',
        name: 'Test string',
        resolutionStatus: 'Test string',
        trackingIssues: [
          {
            url: 'Test string',
          },
        ],
      }
    );
    /** Lists the specified groups. */
    await gapi.client.clouderrorreporting.projects.groupStats.list({
      alignment: 'Test string',
      alignmentTime: 'Test string',
      groupId: 'Test string',
      order: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectName: 'Test string',
      'serviceFilter.resourceType': 'Test string',
      'serviceFilter.service': 'Test string',
      'serviceFilter.version': 'Test string',
      timedCountDuration: 'Test string',
      'timeRange.period': 'Test string',
    });
    /** Deletes all error events of a given project. */
    await gapi.client.clouderrorreporting.projects.locations.deleteEvents({
      projectName: 'Test string',
    });
    /** Lists the specified events. */
    await gapi.client.clouderrorreporting.projects.locations.events.list({
      groupId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectName: 'Test string',
      'serviceFilter.resourceType': 'Test string',
      'serviceFilter.service': 'Test string',
      'serviceFilter.version': 'Test string',
      'timeRange.period': 'Test string',
    });
    /** Get the specified group. */
    await gapi.client.clouderrorreporting.projects.locations.groups.get({
      groupName: 'Test string',
    });
    /** Replace the data for the specified group. Fails if the group does not exist. */
    await gapi.client.clouderrorreporting.projects.locations.groups.update(
      {
        name: 'Test string',
      },
      {
        groupId: 'Test string',
        name: 'Test string',
        resolutionStatus: 'Test string',
        trackingIssues: [
          {
            url: 'Test string',
          },
        ],
      }
    );
    /** Lists the specified groups. */
    await gapi.client.clouderrorreporting.projects.locations.groupStats.list({
      alignment: 'Test string',
      alignmentTime: 'Test string',
      groupId: 'Test string',
      order: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectName: 'Test string',
      'serviceFilter.resourceType': 'Test string',
      'serviceFilter.service': 'Test string',
      'serviceFilter.version': 'Test string',
      timedCountDuration: 'Test string',
      'timeRange.period': 'Test string',
    });
  }
});
