/* This is stub file for gapi.client.cloudfunctions-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240104

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://cloudfunctions.googleapis.com/$discovery/rest?version=v2'
  );
  /** now we can use gapi.client.cloudfunctions */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Lists information about the supported locations for this service. */
    await gapi.client.cloudfunctions.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error. */
    await gapi.client.cloudfunctions.projects.locations.functions.create(
      {
        functionId: 'Test string',
        parent: 'Test string',
      },
      {
        buildConfig: {
          automaticUpdatePolicy: {},
          build: 'Test string',
          dockerRegistry: 'Test string',
          dockerRepository: 'Test string',
          entryPoint: 'Test string',
          environmentVariables: {
            A: 'Test string',
          },
          onDeployUpdatePolicy: {
            runtimeVersion: 'Test string',
          },
          runtime: 'Test string',
          serviceAccount: 'Test string',
          source: {
            gitUri: 'Test string',
            repoSource: {
              branchName: 'Test string',
              commitSha: 'Test string',
              dir: 'Test string',
              projectId: 'Test string',
              repoName: 'Test string',
              tagName: 'Test string',
            },
            storageSource: {
              bucket: 'Test string',
              generation: 'Test string',
              object: 'Test string',
            },
          },
          sourceProvenance: {
            gitUri: 'Test string',
            resolvedRepoSource: {
              branchName: 'Test string',
              commitSha: 'Test string',
              dir: 'Test string',
              projectId: 'Test string',
              repoName: 'Test string',
              tagName: 'Test string',
            },
            resolvedStorageSource: {
              bucket: 'Test string',
              generation: 'Test string',
              object: 'Test string',
            },
          },
          sourceToken: 'Test string',
          workerPool: 'Test string',
        },
        description: 'Test string',
        environment: 'Test string',
        eventTrigger: {
          channel: 'Test string',
          eventFilters: [
            {
              attribute: 'Test string',
              operator: 'Test string',
              value: 'Test string',
            },
          ],
          eventType: 'Test string',
          pubsubTopic: 'Test string',
          retryPolicy: 'Test string',
          service: 'Test string',
          serviceAccountEmail: 'Test string',
          trigger: 'Test string',
          triggerRegion: 'Test string',
        },
        kmsKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        satisfiesPzs: true,
        serviceConfig: {
          allTrafficOnLatestRevision: true,
          availableCpu: 'Test string',
          availableMemory: 'Test string',
          environmentVariables: {
            A: 'Test string',
          },
          ingressSettings: 'Test string',
          maxInstanceCount: 42,
          maxInstanceRequestConcurrency: 42,
          minInstanceCount: 42,
          revision: 'Test string',
          secretEnvironmentVariables: [
            {
              key: 'Test string',
              projectId: 'Test string',
              secret: 'Test string',
              version: 'Test string',
            },
          ],
          secretVolumes: [
            {
              mountPath: 'Test string',
              projectId: 'Test string',
              secret: 'Test string',
              versions: [
                {
                  path: 'Test string',
                  version: 'Test string',
                },
              ],
            },
          ],
          securityLevel: 'Test string',
          service: 'Test string',
          serviceAccountEmail: 'Test string',
          timeoutSeconds: 42,
          uri: 'Test string',
          vpcConnector: 'Test string',
          vpcConnectorEgressSettings: 'Test string',
        },
        state: 'Test string',
        stateMessages: [
          {
            message: 'Test string',
            severity: 'Test string',
            type: 'Test string',
          },
        ],
        updateTime: 'Test string',
        url: 'Test string',
      }
    );
    /** Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function. */
    await gapi.client.cloudfunctions.projects.locations.functions.delete({
      name: 'Test string',
    });
    /** Returns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within 30 minutes of generation. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls */
    await gapi.client.cloudfunctions.projects.locations.functions.generateDownloadUrl(
      {
        name: 'Test string',
      },
      {}
    );
    /** Returns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, specify this header: * `content-type: application/zip` Do not specify this header: * `Authorization: Bearer YOUR_TOKEN` */
    await gapi.client.cloudfunctions.projects.locations.functions.generateUploadUrl(
      {
        parent: 'Test string',
      },
      {
        environment: 'Test string',
        kmsKeyName: 'Test string',
      }
    );
    /** Returns a function with the given name from the requested project. */
    await gapi.client.cloudfunctions.projects.locations.functions.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.cloudfunctions.projects.locations.functions.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Returns a list of functions that belong to the requested project. */
    await gapi.client.cloudfunctions.projects.locations.functions.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates existing function. */
    await gapi.client.cloudfunctions.projects.locations.functions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        buildConfig: {
          automaticUpdatePolicy: {},
          build: 'Test string',
          dockerRegistry: 'Test string',
          dockerRepository: 'Test string',
          entryPoint: 'Test string',
          environmentVariables: {
            A: 'Test string',
          },
          onDeployUpdatePolicy: {
            runtimeVersion: 'Test string',
          },
          runtime: 'Test string',
          serviceAccount: 'Test string',
          source: {
            gitUri: 'Test string',
            repoSource: {
              branchName: 'Test string',
              commitSha: 'Test string',
              dir: 'Test string',
              projectId: 'Test string',
              repoName: 'Test string',
              tagName: 'Test string',
            },
            storageSource: {
              bucket: 'Test string',
              generation: 'Test string',
              object: 'Test string',
            },
          },
          sourceProvenance: {
            gitUri: 'Test string',
            resolvedRepoSource: {
              branchName: 'Test string',
              commitSha: 'Test string',
              dir: 'Test string',
              projectId: 'Test string',
              repoName: 'Test string',
              tagName: 'Test string',
            },
            resolvedStorageSource: {
              bucket: 'Test string',
              generation: 'Test string',
              object: 'Test string',
            },
          },
          sourceToken: 'Test string',
          workerPool: 'Test string',
        },
        description: 'Test string',
        environment: 'Test string',
        eventTrigger: {
          channel: 'Test string',
          eventFilters: [
            {
              attribute: 'Test string',
              operator: 'Test string',
              value: 'Test string',
            },
          ],
          eventType: 'Test string',
          pubsubTopic: 'Test string',
          retryPolicy: 'Test string',
          service: 'Test string',
          serviceAccountEmail: 'Test string',
          trigger: 'Test string',
          triggerRegion: 'Test string',
        },
        kmsKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        satisfiesPzs: true,
        serviceConfig: {
          allTrafficOnLatestRevision: true,
          availableCpu: 'Test string',
          availableMemory: 'Test string',
          environmentVariables: {
            A: 'Test string',
          },
          ingressSettings: 'Test string',
          maxInstanceCount: 42,
          maxInstanceRequestConcurrency: 42,
          minInstanceCount: 42,
          revision: 'Test string',
          secretEnvironmentVariables: [
            {
              key: 'Test string',
              projectId: 'Test string',
              secret: 'Test string',
              version: 'Test string',
            },
          ],
          secretVolumes: [
            {
              mountPath: 'Test string',
              projectId: 'Test string',
              secret: 'Test string',
              versions: [
                {
                  path: 'Test string',
                  version: 'Test string',
                },
              ],
            },
          ],
          securityLevel: 'Test string',
          service: 'Test string',
          serviceAccountEmail: 'Test string',
          timeoutSeconds: 42,
          uri: 'Test string',
          vpcConnector: 'Test string',
          vpcConnectorEgressSettings: 'Test string',
        },
        state: 'Test string',
        stateMessages: [
          {
            message: 'Test string',
            severity: 'Test string',
            type: 'Test string',
          },
        ],
        updateTime: 'Test string',
        url: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.cloudfunctions.projects.locations.functions.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.cloudfunctions.projects.locations.functions.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.cloudfunctions.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.cloudfunctions.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Returns a list of runtimes that are supported for the requested project. */
    await gapi.client.cloudfunctions.projects.locations.runtimes.list({
      filter: 'Test string',
      parent: 'Test string',
    });
  }
});
