/* This is stub file for gapi.client.vmmigration-v1alpha1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230316

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://vmmigration.googleapis.com/$discovery/rest?version=v1alpha1');
    /** now we can use gapi.client.vmmigration */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.vmmigration.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.vmmigration.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds a MigratingVm to a Group. */
        await gapi.client.vmmigration.projects.locations.groups.addGroupMigration({
            group: "Test string",
        }, {
            migratingVm: "Test string",
        });
        /** Creates a new Group in a given project and location. */
        await gapi.client.vmmigration.projects.locations.groups.create({
            groupId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single Group. */
        await gapi.client.vmmigration.projects.locations.groups.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets details of a single Group. */
        await gapi.client.vmmigration.projects.locations.groups.get({
            name: "Test string",
        });
        /** Lists Groups in a given project and location. */
        await gapi.client.vmmigration.projects.locations.groups.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single Group. */
        await gapi.client.vmmigration.projects.locations.groups.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Removes a MigratingVm from a Group. */
        await gapi.client.vmmigration.projects.locations.groups.removeGroupMigration({
            group: "Test string",
        }, {
            migratingVm: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.vmmigration.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.vmmigration.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.vmmigration.projects.locations.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.vmmigration.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new Source in a given project and location. */
        await gapi.client.vmmigration.projects.locations.sources.create({
            parent: "Test string",
            requestId: "Test string",
            sourceId: "Test string",
        }, {
            aws: {
                accessKeyCreds: {
                    accessKeyId: "Test string",
                    secretAccessKey: "Test string",
                },
                awsRegion: "Test string",
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                inventorySecurityGroupNames: [
                    "Test string"
                ],
                inventoryTagList: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }
                ],
                migrationResourcesUserTags: {
                    A: "Test string"
                },
                publicIp: "Test string",
                state: "Test string",
            },
            createTime: "Test string",
            description: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            updateTime: "Test string",
            vmware: {
                password: "Test string",
                thumbprint: "Test string",
                username: "Test string",
                vcenterIp: "Test string",
            },
        });
        /** Deletes a single Source. */
        await gapi.client.vmmigration.projects.locations.sources.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /**
         * List remote source's inventory of VMs. The remote source is the onprem vCenter (remote in the sense it's not in Compute Engine). The inventory describes the list of existing VMs in that
         * source. Note that this operation lists the VMs on the remote source, as opposed to listing the MigratingVms resources in the vmmigration service.
         */
        await gapi.client.vmmigration.projects.locations.sources.fetchInventory({
            forceRefresh: true,
            pageSize: 42,
            pageToken: "Test string",
            source: "Test string",
        });
        /** Gets details of a single Source. */
        await gapi.client.vmmigration.projects.locations.sources.get({
            name: "Test string",
        });
        /** Lists Sources in a given project and location. */
        await gapi.client.vmmigration.projects.locations.sources.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single Source. */
        await gapi.client.vmmigration.projects.locations.sources.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            aws: {
                accessKeyCreds: {
                    accessKeyId: "Test string",
                    secretAccessKey: "Test string",
                },
                awsRegion: "Test string",
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                inventorySecurityGroupNames: [
                    "Test string"
                ],
                inventoryTagList: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }
                ],
                migrationResourcesUserTags: {
                    A: "Test string"
                },
                publicIp: "Test string",
                state: "Test string",
            },
            createTime: "Test string",
            description: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            updateTime: "Test string",
            vmware: {
                password: "Test string",
                thumbprint: "Test string",
                username: "Test string",
                vcenterIp: "Test string",
            },
        });
        /** Creates a new DatacenterConnector in a given Source. */
        await gapi.client.vmmigration.projects.locations.sources.datacenterConnectors.create({
            datacenterConnectorId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            applianceInfrastructureVersion: "Test string",
            applianceSoftwareVersion: "Test string",
            availableVersions: {
                inPlaceUpdate: {
                    critical: true,
                    releaseNotesUri: "Test string",
                    uri: "Test string",
                    version: "Test string",
                },
                newDeployableAppliance: {
                    critical: true,
                    releaseNotesUri: "Test string",
                    uri: "Test string",
                    version: "Test string",
                },
            },
            bucket: "Test string",
            createTime: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            name: "Test string",
            registrationId: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
            stateTime: "Test string",
            updateTime: "Test string",
            upgradeStatus: {
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                previousVersion: "Test string",
                startTime: "Test string",
                state: "Test string",
                version: "Test string",
            },
            version: "Test string",
        });
        /** Deletes a single DatacenterConnector. */
        await gapi.client.vmmigration.projects.locations.sources.datacenterConnectors.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets details of a single DatacenterConnector. */
        await gapi.client.vmmigration.projects.locations.sources.datacenterConnectors.get({
            name: "Test string",
        });
        /** Lists DatacenterConnectors in a given Source. */
        await gapi.client.vmmigration.projects.locations.sources.datacenterConnectors.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Upgrades the appliance relate to this DatacenterConnector to the in-place updateable version. */
        await gapi.client.vmmigration.projects.locations.sources.datacenterConnectors.upgradeAppliance({
            datacenterConnector: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Creates a new MigratingVm in a given Source. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.create({
            migratingVmId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            awsSourceVmDetails: {
                committedStorageBytes: "Test string",
                firmware: "Test string",
            },
            computeEngineTargetDefaults: {
                additionalLicenses: [
                    "Test string"
                ],
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                hostname: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                secureBoot: true,
                serviceAccount: "Test string",
                targetProject: "Test string",
                vmName: "Test string",
                zone: "Test string",
            },
            computeEngineVmDefaults: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
            createTime: "Test string",
            currentSyncInfo: {
                cycleNumber: 42,
                endTime: "Test string",
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                name: "Test string",
                progress: 42,
                progressPercent: 42,
                startTime: "Test string",
                state: "Test string",
                steps: [
                    {
                        endTime: "Test string",
                        initializingReplication: {
                        },
                        postProcessing: {
                        },
                        replicating: {
                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                            replicatedBytes: "Test string",
                            totalBytes: "Test string",
                        },
                        startTime: "Test string",
                    }
                ],
                totalPauseDuration: "Test string",
                warnings: [
                    {
                        actionItem: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        code: "Test string",
                        helpLinks: [
                            {
                                description: "Test string",
                                url: "Test string",
                            }
                        ],
                        warningMessage: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        warningTime: "Test string",
                    }
                ],
            },
            description: "Test string",
            displayName: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            group: "Test string",
            labels: {
                A: "Test string"
            },
            lastReplicationCycle: {
                cycleNumber: 42,
                endTime: "Test string",
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                name: "Test string",
                progress: 42,
                progressPercent: 42,
                startTime: "Test string",
                state: "Test string",
                steps: [
                    {
                        endTime: "Test string",
                        initializingReplication: {
                        },
                        postProcessing: {
                        },
                        replicating: {
                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                            replicatedBytes: "Test string",
                            totalBytes: "Test string",
                        },
                        startTime: "Test string",
                    }
                ],
                totalPauseDuration: "Test string",
                warnings: [
                    {
                        actionItem: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        code: "Test string",
                        helpLinks: [
                            {
                                description: "Test string",
                                url: "Test string",
                            }
                        ],
                        warningMessage: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        warningTime: "Test string",
                    }
                ],
            },
            lastSync: {
                lastSyncTime: "Test string",
            },
            name: "Test string",
            policy: {
                idleDuration: "Test string",
                skipOsAdaptation: true,
            },
            recentCloneJobs: [
                {
                    computeEngineTargetDetails: {
                        additionalLicenses: [
                            "Test string"
                        ],
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        hostname: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        vmName: "Test string",
                        zone: "Test string",
                    },
                    computeEngineVmDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                    createTime: "Test string",
                    endTime: "Test string",
                    error: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    name: "Test string",
                    state: "Test string",
                    stateTime: "Test string",
                    steps: [
                        {
                            adaptingOs: {
                            },
                            endTime: "Test string",
                            instantiatingMigratedVm: {
                            },
                            preparingVmDisks: {
                            },
                            startTime: "Test string",
                        }
                    ],
                    targetDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                }
            ],
            recentCutoverJobs: [
                {
                    computeEngineTargetDetails: {
                        additionalLicenses: [
                            "Test string"
                        ],
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        hostname: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        vmName: "Test string",
                        zone: "Test string",
                    },
                    computeEngineVmDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                    createTime: "Test string",
                    endTime: "Test string",
                    error: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    name: "Test string",
                    progress: 42,
                    progressPercent: 42,
                    state: "Test string",
                    stateMessage: "Test string",
                    stateTime: "Test string",
                    steps: [
                        {
                            endTime: "Test string",
                            finalSync: {
                                cycleNumber: 42,
                                endTime: "Test string",
                                error: {
                                    code: 42,
                                    details: [
                                        {
                                            A: 42
                                        }
                                    ],
                                    message: "Test string",
                                },
                                name: "Test string",
                                progress: 42,
                                progressPercent: 42,
                                startTime: "Test string",
                                state: "Test string",
                                steps: [
                                    {
                                        endTime: "Test string",
                                        initializingReplication: {
                                        },
                                        postProcessing: {
                                        },
                                        replicating: {
                                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                                            replicatedBytes: "Test string",
                                            totalBytes: "Test string",
                                        },
                                        startTime: "Test string",
                                    }
                                ],
                                totalPauseDuration: "Test string",
                                warnings: [
                                    {
                                        actionItem: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        code: "Test string",
                                        helpLinks: [
                                            {
                                                description: "Test string",
                                                url: "Test string",
                                            }
                                        ],
                                        warningMessage: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        warningTime: "Test string",
                                    }
                                ],
                            },
                            instantiatingMigratedVm: {
                            },
                            preparingVmDisks: {
                            },
                            previousReplicationCycle: {
                                cycleNumber: 42,
                                endTime: "Test string",
                                error: {
                                    code: 42,
                                    details: [
                                        {
                                            A: 42
                                        }
                                    ],
                                    message: "Test string",
                                },
                                name: "Test string",
                                progress: 42,
                                progressPercent: 42,
                                startTime: "Test string",
                                state: "Test string",
                                steps: [
                                    {
                                        endTime: "Test string",
                                        initializingReplication: {
                                        },
                                        postProcessing: {
                                        },
                                        replicating: {
                                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                                            replicatedBytes: "Test string",
                                            totalBytes: "Test string",
                                        },
                                        startTime: "Test string",
                                    }
                                ],
                                totalPauseDuration: "Test string",
                                warnings: [
                                    {
                                        actionItem: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        code: "Test string",
                                        helpLinks: [
                                            {
                                                description: "Test string",
                                                url: "Test string",
                                            }
                                        ],
                                        warningMessage: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        warningTime: "Test string",
                                    }
                                ],
                            },
                            shuttingDownSourceVm: {
                            },
                            startTime: "Test string",
                        }
                    ],
                    targetDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                }
            ],
            sourceVmId: "Test string",
            state: "Test string",
            stateTime: "Test string",
            targetDefaults: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
            updateTime: "Test string",
        });
        /** Deletes a single MigratingVm. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.delete({
            name: "Test string",
        });
        /** Marks a migration as completed, deleting migration resources that are no longer being used. Only applicable after cutover is done. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.finalizeMigration({
            migratingVm: "Test string",
        }, {
        });
        /** Gets details of a single MigratingVm. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists MigratingVms in a given Source. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Updates the parameters of a single MigratingVm. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            awsSourceVmDetails: {
                committedStorageBytes: "Test string",
                firmware: "Test string",
            },
            computeEngineTargetDefaults: {
                additionalLicenses: [
                    "Test string"
                ],
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                hostname: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                secureBoot: true,
                serviceAccount: "Test string",
                targetProject: "Test string",
                vmName: "Test string",
                zone: "Test string",
            },
            computeEngineVmDefaults: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
            createTime: "Test string",
            currentSyncInfo: {
                cycleNumber: 42,
                endTime: "Test string",
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                name: "Test string",
                progress: 42,
                progressPercent: 42,
                startTime: "Test string",
                state: "Test string",
                steps: [
                    {
                        endTime: "Test string",
                        initializingReplication: {
                        },
                        postProcessing: {
                        },
                        replicating: {
                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                            replicatedBytes: "Test string",
                            totalBytes: "Test string",
                        },
                        startTime: "Test string",
                    }
                ],
                totalPauseDuration: "Test string",
                warnings: [
                    {
                        actionItem: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        code: "Test string",
                        helpLinks: [
                            {
                                description: "Test string",
                                url: "Test string",
                            }
                        ],
                        warningMessage: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        warningTime: "Test string",
                    }
                ],
            },
            description: "Test string",
            displayName: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            group: "Test string",
            labels: {
                A: "Test string"
            },
            lastReplicationCycle: {
                cycleNumber: 42,
                endTime: "Test string",
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                name: "Test string",
                progress: 42,
                progressPercent: 42,
                startTime: "Test string",
                state: "Test string",
                steps: [
                    {
                        endTime: "Test string",
                        initializingReplication: {
                        },
                        postProcessing: {
                        },
                        replicating: {
                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                            replicatedBytes: "Test string",
                            totalBytes: "Test string",
                        },
                        startTime: "Test string",
                    }
                ],
                totalPauseDuration: "Test string",
                warnings: [
                    {
                        actionItem: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        code: "Test string",
                        helpLinks: [
                            {
                                description: "Test string",
                                url: "Test string",
                            }
                        ],
                        warningMessage: {
                            locale: "Test string",
                            message: "Test string",
                        },
                        warningTime: "Test string",
                    }
                ],
            },
            lastSync: {
                lastSyncTime: "Test string",
            },
            name: "Test string",
            policy: {
                idleDuration: "Test string",
                skipOsAdaptation: true,
            },
            recentCloneJobs: [
                {
                    computeEngineTargetDetails: {
                        additionalLicenses: [
                            "Test string"
                        ],
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        hostname: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        vmName: "Test string",
                        zone: "Test string",
                    },
                    computeEngineVmDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                    createTime: "Test string",
                    endTime: "Test string",
                    error: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    name: "Test string",
                    state: "Test string",
                    stateTime: "Test string",
                    steps: [
                        {
                            adaptingOs: {
                            },
                            endTime: "Test string",
                            instantiatingMigratedVm: {
                            },
                            preparingVmDisks: {
                            },
                            startTime: "Test string",
                        }
                    ],
                    targetDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                }
            ],
            recentCutoverJobs: [
                {
                    computeEngineTargetDetails: {
                        additionalLicenses: [
                            "Test string"
                        ],
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        hostname: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        vmName: "Test string",
                        zone: "Test string",
                    },
                    computeEngineVmDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                    createTime: "Test string",
                    endTime: "Test string",
                    error: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    name: "Test string",
                    progress: 42,
                    progressPercent: 42,
                    state: "Test string",
                    stateMessage: "Test string",
                    stateTime: "Test string",
                    steps: [
                        {
                            endTime: "Test string",
                            finalSync: {
                                cycleNumber: 42,
                                endTime: "Test string",
                                error: {
                                    code: 42,
                                    details: [
                                        {
                                            A: 42
                                        }
                                    ],
                                    message: "Test string",
                                },
                                name: "Test string",
                                progress: 42,
                                progressPercent: 42,
                                startTime: "Test string",
                                state: "Test string",
                                steps: [
                                    {
                                        endTime: "Test string",
                                        initializingReplication: {
                                        },
                                        postProcessing: {
                                        },
                                        replicating: {
                                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                                            replicatedBytes: "Test string",
                                            totalBytes: "Test string",
                                        },
                                        startTime: "Test string",
                                    }
                                ],
                                totalPauseDuration: "Test string",
                                warnings: [
                                    {
                                        actionItem: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        code: "Test string",
                                        helpLinks: [
                                            {
                                                description: "Test string",
                                                url: "Test string",
                                            }
                                        ],
                                        warningMessage: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        warningTime: "Test string",
                                    }
                                ],
                            },
                            instantiatingMigratedVm: {
                            },
                            preparingVmDisks: {
                            },
                            previousReplicationCycle: {
                                cycleNumber: 42,
                                endTime: "Test string",
                                error: {
                                    code: 42,
                                    details: [
                                        {
                                            A: 42
                                        }
                                    ],
                                    message: "Test string",
                                },
                                name: "Test string",
                                progress: 42,
                                progressPercent: 42,
                                startTime: "Test string",
                                state: "Test string",
                                steps: [
                                    {
                                        endTime: "Test string",
                                        initializingReplication: {
                                        },
                                        postProcessing: {
                                        },
                                        replicating: {
                                            lastThirtyMinutesAverageBytesPerSecond: "Test string",
                                            lastTwoMinutesAverageBytesPerSecond: "Test string",
                                            replicatedBytes: "Test string",
                                            totalBytes: "Test string",
                                        },
                                        startTime: "Test string",
                                    }
                                ],
                                totalPauseDuration: "Test string",
                                warnings: [
                                    {
                                        actionItem: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        code: "Test string",
                                        helpLinks: [
                                            {
                                                description: "Test string",
                                                url: "Test string",
                                            }
                                        ],
                                        warningMessage: {
                                            locale: "Test string",
                                            message: "Test string",
                                        },
                                        warningTime: "Test string",
                                    }
                                ],
                            },
                            shuttingDownSourceVm: {
                            },
                            startTime: "Test string",
                        }
                    ],
                    targetDetails: {
                        appliedLicense: {
                            osLicense: "Test string",
                            type: "Test string",
                        },
                        bootOption: "Test string",
                        computeScheduling: {
                            automaticRestart: true,
                            minNodeCpus: 42,
                            nodeAffinities: [
                                {
                                    key: "Test string",
                                    operator: "Test string",
                                    values: [
                                        "Test string"
                                    ],
                                }
                            ],
                            onHostMaintenance: "Test string",
                            restartType: "Test string",
                        },
                        diskType: "Test string",
                        externalIp: "Test string",
                        internalIp: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        licenseType: "Test string",
                        machineType: "Test string",
                        machineTypeSeries: "Test string",
                        metadata: {
                            A: "Test string"
                        },
                        name: "Test string",
                        network: "Test string",
                        networkInterfaces: [
                            {
                                externalIp: "Test string",
                                internalIp: "Test string",
                                network: "Test string",
                                subnetwork: "Test string",
                            }
                        ],
                        networkTags: [
                            "Test string"
                        ],
                        project: "Test string",
                        secureBoot: true,
                        serviceAccount: "Test string",
                        subnetwork: "Test string",
                        targetProject: "Test string",
                        zone: "Test string",
                    },
                }
            ],
            sourceVmId: "Test string",
            state: "Test string",
            stateTime: "Test string",
            targetDefaults: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
            updateTime: "Test string",
        });
        /** Pauses a migration for a VM. If cycle tasks are running they will be cancelled, preserving source task data. Further replication cycles will not be triggered while the VM is paused. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.pauseMigration({
            migratingVm: "Test string",
        }, {
        });
        /**
         * Resumes a migration for a VM. When called on a paused migration, will start the process of uploading data and creating snapshots; when called on a completed cut-over migration, will
         * update the migration to active state and start the process of uploading data and creating snapshots.
         */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.resumeMigration({
            migratingVm: "Test string",
        }, {
        });
        /** Starts migration for a VM. Starts the process of uploading data and creating snapshots, in replication cycles scheduled by the policy. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.startMigration({
            migratingVm: "Test string",
        }, {
        });
        /** Initiates the cancellation of a running clone job. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cloneJobs.cancel({
            name: "Test string",
        }, {
        });
        /** Initiates a Clone of a specific migrating VM. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cloneJobs.create({
            cloneJobId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            computeEngineTargetDetails: {
                additionalLicenses: [
                    "Test string"
                ],
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                hostname: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                vmName: "Test string",
                zone: "Test string",
            },
            computeEngineVmDetails: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
            createTime: "Test string",
            endTime: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            name: "Test string",
            state: "Test string",
            stateTime: "Test string",
            steps: [
                {
                    adaptingOs: {
                    },
                    endTime: "Test string",
                    instantiatingMigratedVm: {
                    },
                    preparingVmDisks: {
                    },
                    startTime: "Test string",
                }
            ],
            targetDetails: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
        });
        /** Gets details of a single CloneJob. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cloneJobs.get({
            name: "Test string",
        });
        /** Lists CloneJobs of a given migrating VM. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cloneJobs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Initiates the cancellation of a running cutover job. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cutoverJobs.cancel({
            name: "Test string",
        }, {
        });
        /** Initiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cutoverJobs.create({
            cutoverJobId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            computeEngineTargetDetails: {
                additionalLicenses: [
                    "Test string"
                ],
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                hostname: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                vmName: "Test string",
                zone: "Test string",
            },
            computeEngineVmDetails: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
            createTime: "Test string",
            endTime: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            name: "Test string",
            progress: 42,
            progressPercent: 42,
            state: "Test string",
            stateMessage: "Test string",
            stateTime: "Test string",
            steps: [
                {
                    endTime: "Test string",
                    finalSync: {
                        cycleNumber: 42,
                        endTime: "Test string",
                        error: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        name: "Test string",
                        progress: 42,
                        progressPercent: 42,
                        startTime: "Test string",
                        state: "Test string",
                        steps: [
                            {
                                endTime: "Test string",
                                initializingReplication: {
                                },
                                postProcessing: {
                                },
                                replicating: {
                                    lastThirtyMinutesAverageBytesPerSecond: "Test string",
                                    lastTwoMinutesAverageBytesPerSecond: "Test string",
                                    replicatedBytes: "Test string",
                                    totalBytes: "Test string",
                                },
                                startTime: "Test string",
                            }
                        ],
                        totalPauseDuration: "Test string",
                        warnings: [
                            {
                                actionItem: {
                                    locale: "Test string",
                                    message: "Test string",
                                },
                                code: "Test string",
                                helpLinks: [
                                    {
                                        description: "Test string",
                                        url: "Test string",
                                    }
                                ],
                                warningMessage: {
                                    locale: "Test string",
                                    message: "Test string",
                                },
                                warningTime: "Test string",
                            }
                        ],
                    },
                    instantiatingMigratedVm: {
                    },
                    preparingVmDisks: {
                    },
                    previousReplicationCycle: {
                        cycleNumber: 42,
                        endTime: "Test string",
                        error: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        name: "Test string",
                        progress: 42,
                        progressPercent: 42,
                        startTime: "Test string",
                        state: "Test string",
                        steps: [
                            {
                                endTime: "Test string",
                                initializingReplication: {
                                },
                                postProcessing: {
                                },
                                replicating: {
                                    lastThirtyMinutesAverageBytesPerSecond: "Test string",
                                    lastTwoMinutesAverageBytesPerSecond: "Test string",
                                    replicatedBytes: "Test string",
                                    totalBytes: "Test string",
                                },
                                startTime: "Test string",
                            }
                        ],
                        totalPauseDuration: "Test string",
                        warnings: [
                            {
                                actionItem: {
                                    locale: "Test string",
                                    message: "Test string",
                                },
                                code: "Test string",
                                helpLinks: [
                                    {
                                        description: "Test string",
                                        url: "Test string",
                                    }
                                ],
                                warningMessage: {
                                    locale: "Test string",
                                    message: "Test string",
                                },
                                warningTime: "Test string",
                            }
                        ],
                    },
                    shuttingDownSourceVm: {
                    },
                    startTime: "Test string",
                }
            ],
            targetDetails: {
                appliedLicense: {
                    osLicense: "Test string",
                    type: "Test string",
                },
                bootOption: "Test string",
                computeScheduling: {
                    automaticRestart: true,
                    minNodeCpus: 42,
                    nodeAffinities: [
                        {
                            key: "Test string",
                            operator: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                    onHostMaintenance: "Test string",
                    restartType: "Test string",
                },
                diskType: "Test string",
                externalIp: "Test string",
                internalIp: "Test string",
                labels: {
                    A: "Test string"
                },
                licenseType: "Test string",
                machineType: "Test string",
                machineTypeSeries: "Test string",
                metadata: {
                    A: "Test string"
                },
                name: "Test string",
                network: "Test string",
                networkInterfaces: [
                    {
                        externalIp: "Test string",
                        internalIp: "Test string",
                        network: "Test string",
                        subnetwork: "Test string",
                    }
                ],
                networkTags: [
                    "Test string"
                ],
                project: "Test string",
                secureBoot: true,
                serviceAccount: "Test string",
                subnetwork: "Test string",
                targetProject: "Test string",
                zone: "Test string",
            },
        });
        /** Gets details of a single CutoverJob. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cutoverJobs.get({
            name: "Test string",
        });
        /** Lists CutoverJobs of a given migrating VM. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.cutoverJobs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets details of a single ReplicationCycle. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.replicationCycles.get({
            name: "Test string",
        });
        /** Lists ReplicationCycles in a given MigratingVM. */
        await gapi.client.vmmigration.projects.locations.sources.migratingVms.replicationCycles.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a new UtilizationReport. */
        await gapi.client.vmmigration.projects.locations.sources.utilizationReports.create({
            parent: "Test string",
            requestId: "Test string",
            utilizationReportId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            frameEndTime: "Test string",
            name: "Test string",
            state: "Test string",
            stateTime: "Test string",
            timeFrame: "Test string",
            vmCount: 42,
            vms: [
                {
                    utilization: {
                        cpuAverage: 42,
                        cpuAveragePercent: 42,
                        cpuMax: 42,
                        cpuMaxPercent: 42,
                        diskIoRateAverage: "Test string",
                        diskIoRateAverageKbps: "Test string",
                        diskIoRateMax: "Test string",
                        diskIoRateMaxKbps: "Test string",
                        memoryAverage: 42,
                        memoryAveragePercent: 42,
                        memoryMax: 42,
                        memoryMaxPercent: 42,
                        networkThroughputAverage: "Test string",
                        networkThroughputAverageKbps: "Test string",
                        networkThroughputMax: "Test string",
                        networkThroughputMaxKbps: "Test string",
                    },
                    vmId: "Test string",
                    vmwareVmDetails: {
                        bootOption: "Test string",
                        committedStorage: "Test string",
                        committedStorageMb: "Test string",
                        cpuCount: 42,
                        datacenterDescription: "Test string",
                        datacenterId: "Test string",
                        diskCount: 42,
                        displayName: "Test string",
                        guestDescription: "Test string",
                        memoryMb: 42,
                        powerState: "Test string",
                        uuid: "Test string",
                        vmId: "Test string",
                    },
                }
            ],
            vmsCount: 42,
        });
        /** Deletes a single Utilization Report. */
        await gapi.client.vmmigration.projects.locations.sources.utilizationReports.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets a single Utilization Report. */
        await gapi.client.vmmigration.projects.locations.sources.utilizationReports.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists Utilization Reports of the given Source. */
        await gapi.client.vmmigration.projects.locations.sources.utilizationReports.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Creates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.vmmigration.projects.locations.targetProjects.create({
            parent: "Test string",
            requestId: "Test string",
            targetProjectId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            project: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.vmmigration.projects.locations.targetProjects.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets details of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.vmmigration.projects.locations.targetProjects.get({
            name: "Test string",
        });
        /** Lists TargetProjects in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.vmmigration.projects.locations.targetProjects.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.vmmigration.projects.locations.targetProjects.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            name: "Test string",
            project: "Test string",
            updateTime: "Test string",
        });
    }
});
