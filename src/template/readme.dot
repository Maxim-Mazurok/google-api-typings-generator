# TypeScript typings for {{=it.restDescription.title}} {{=it.restDescription.version}}

{{=it.restDescription.description}}
For detailed description please check [documentation]({{=it.restDescription.documentationLink}}).

## Installing

Install typings for {{=it.restDescription.title}}:

```
npm install @types/{{=it.packageName}} --save-dev
```

## Usage

You need to initialize Google API client in your code:

```typescript
gapi.load('client', () => {
  // now we can use gapi.client
  // ...
});
```

Then load api client wrapper:

```typescript
gapi.client.load('{{=it.restDescriptionSource}}', () => {
  // now we can use:{{~ it.namespaces :namespace }}
  // gapi.client.{{=namespace}}{{~}}
});
```

```typescript
// Deprecated, use discovery document URL, see https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiclientloadname----version----callback--
gapi.client.load('{{=it.restDescription.name}}', '{{=it.restDescription.version}}', () => {
  // now we can use:{{~ it.namespaces :namespace }}
  // gapi.client.{{=namespace}}{{~}}
});
```

{{? it.restDescription.auth }}Don't forget to authenticate your client before sending any request to resources:

```typescript
// declare client_id registered in Google Developers Console
var client_id = '',
  scope = [{{ for(var scope in it.restDescription.auth.oauth2.scopes) { }}
      // {{=it.restDescription.auth.oauth2.scopes[scope].description}}
      '{{=scope}}',
{{ } }}    ],
    immediate = true;
// ...

gapi.auth.authorize(
  { client_id: client_id, scope: scope, immediate: immediate },
  authResult => {
    if (authResult && !authResult.error) {
        /* handle successful authorization */
    } else {
        /* handle authorization error */
    }
});
```{{?}}

After that you can use {{=it.restDescription.title}} resources: <!-- TODO: make this work for multiple namespaces -->

```typescript{{ for(var resource in it.restDescription.resources) { }}{{ for(var method in it.restDescription.resources[resource].methods) { }}

/*
{{=it.restDescription.resources[resource].methods[method].description}}
*/
await gapi.client.{{=it.restDescription.resources[resource].methods[method].id}}({ {{ for(var parameter in it.restDescription.resources[resource].methods[method].parameters) { }}{{? it.restDescription.resources[resource].methods[method].parameters[parameter].required }}{{=parameter }}: {{? it.restDescription.resources[resource].methods[method].parameters[parameter].type === 'integer'}}1{{?}}{{? it.restDescription.resources[resource].methods[method].parameters[parameter].type === 'string'}}"{{=parameter}}"{{?}}, {{?}}{{ } }} });{{ }}}{{ }}}
```
