/* This is stub file for gapi.client.merchantapi-notifications_v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250730

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://merchantapi.googleapis.com/$discovery/rest?version=notifications_v1beta',
  );
  /** now we can use gapi.client.merchantapi */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a notification subscription for a business. For standalone or subaccounts accounts, the business can create a subscription for self. For MCAs, the business can create a subscription for all managed accounts or for a specific subaccount. We will allow the following types of notification subscriptions to exist together (per business as a subscriber per event type): 1. Subscription for all managed accounts + subscription for self. 2. Multiple "partial" subscriptions for managed accounts + subscription for self. we will not allow (per business as a subscriber per event type): 1. Multiple self subscriptions. 2. Multiple "all managed accounts" subscriptions. 3. "All managed accounts" subscription and partial subscriptions at the same time. 4. Multiple partial subscriptions for the same target account. */
    await gapi.client.merchantapi.accounts.notificationsubscriptions.create(
      {
        parent: 'Test string',
      },
      {
        allManagedAccounts: true,
        callBackUri: 'Test string',
        name: 'Test string',
        registeredEvent: 'Test string',
        targetAccount: 'Test string',
      },
    );
    /** Deletes a notification subscription for a merchant. */
    await gapi.client.merchantapi.accounts.notificationsubscriptions.delete({
      name: 'Test string',
    });
    /** Gets notification subscriptions for an account. */
    await gapi.client.merchantapi.accounts.notificationsubscriptions.get({
      name: 'Test string',
    });
    /** Gets all the notification subscriptions for a merchant. */
    await gapi.client.merchantapi.accounts.notificationsubscriptions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing notification subscription for a merchant. */
    await gapi.client.merchantapi.accounts.notificationsubscriptions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        allManagedAccounts: true,
        callBackUri: 'Test string',
        name: 'Test string',
        registeredEvent: 'Test string',
        targetAccount: 'Test string',
      },
    );
  }
});
