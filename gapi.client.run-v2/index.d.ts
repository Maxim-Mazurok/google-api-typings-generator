/* Type definitions for non-npm package Cloud Run Admin API v2 0.0 */
// Project: https://cloud.google.com/run/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://run.googleapis.com/$discovery/rest?version=v2
// Revision: 20240802

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Run Admin API v2 */
  function load(
    urlOrObject: 'https://run.googleapis.com/$discovery/rest?version=v2'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'run', version: 'v2'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'run', version: 'v2', callback: () => any): void;

  namespace run {
    interface GoogleCloudRunV2BinaryAuthorization {
      /** Optional. If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass */
      breakglassJustification?: string;
      /** Optional. The path to a binary authorization policy. Format: projects/{project}/platforms/cloudRun/{policy-name} */
      policy?: string;
      /** Optional. If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled. */
      useDefault?: boolean;
    }
    interface GoogleCloudRunV2CancelExecutionRequest {
      /** A system-generated fingerprint for this version of the resource. This may be used to detect modification conflict during updates. */
      etag?: string;
      /** Indicates that the request should be validated without actually cancelling any resources. */
      validateOnly?: boolean;
    }
    interface GoogleCloudRunV2CloudSqlInstance {
      /** The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance} */
      instances?: string[];
    }
    interface GoogleCloudRunV2Condition {
      /** Output only. A reason for the execution condition. */
      executionReason?: string;
      /** Last time the condition transitioned from one status to another. */
      lastTransitionTime?: string;
      /** Human readable message indicating details about the current status. */
      message?: string;
      /** Output only. A common (service-level) reason for this condition. */
      reason?: string;
      /** Output only. A reason for the revision condition. */
      revisionReason?: string;
      /** How to interpret failures of this condition, one of Error, Warning, Info */
      severity?: string;
      /** State of the condition. */
      state?: string;
      /** type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready. */
      type?: string;
    }
    interface GoogleCloudRunV2Container {
      /** Arguments to the entrypoint. The docker image's CMD is used if this is not provided. */
      args?: string[];
      /** Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. */
      command?: string[];
      /** Names of the containers that must start before this container. */
      dependsOn?: string[];
      /** List of environment variables to set in the container. */
      env?: GoogleCloudRunV2EnvVar[];
      /** Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed. */
      image?: string;
      /** Periodic probe of container liveness. Container will be restarted if the probe fails. */
      livenessProbe?: GoogleCloudRunV2Probe;
      /** Name of the container specified as a DNS_LABEL (RFC 1123). */
      name?: string;
      /** List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on. */
      ports?: GoogleCloudRunV2ContainerPort[];
      /** Compute Resource requirements by this container. */
      resources?: GoogleCloudRunV2ResourceRequirements;
      /** Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. */
      startupProbe?: GoogleCloudRunV2Probe;
      /** Volume to mount into the container's filesystem. */
      volumeMounts?: GoogleCloudRunV2VolumeMount[];
      /** Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. */
      workingDir?: string;
    }
    interface GoogleCloudRunV2ContainerOverride {
      /** Optional. Arguments to the entrypoint. Will replace existing args for override. */
      args?: string[];
      /** Optional. True if the intention is to clear out existing args list. */
      clearArgs?: boolean;
      /** List of environment variables to set in the container. Will be merged with existing env for override. */
      env?: GoogleCloudRunV2EnvVar[];
      /** The name of the container specified as a DNS_LABEL. */
      name?: string;
    }
    interface GoogleCloudRunV2ContainerPort {
      /** Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536. */
      containerPort?: number;
      /** If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c". */
      name?: string;
    }
    interface GoogleCloudRunV2EmptyDirVolumeSource {
      /** The medium on which the data is stored. Acceptable values today is only MEMORY or none. When none, the default will currently be backed by memory but could change over time. +optional */
      medium?: string;
      /** Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir */
      sizeLimit?: string;
    }
    interface GoogleCloudRunV2EnvVar {
      /** Required. Name of the environment variable. Must not exceed 32768 characters. */
      name?: string;
      /** Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes. */
      value?: string;
      /** Source for the environment variable's value. */
      valueSource?: GoogleCloudRunV2EnvVarSource;
    }
    interface GoogleCloudRunV2EnvVarSource {
      /** Selects a secret and a specific version from Cloud Secret Manager. */
      secretKeyRef?: GoogleCloudRunV2SecretKeySelector;
    }
    interface GoogleCloudRunV2Execution {
      /** Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. */
      annotations?: {[P in string]: string};
      /** Output only. The number of tasks which reached phase Cancelled. */
      cancelledCount?: number;
      /** Output only. Represents time when the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. */
      completionTime?: string;
      /** Output only. The Condition of this Execution, containing its readiness status, and detailed error information in case it did not reach the desired state. */
      conditions?: GoogleCloudRunV2Condition[];
      /** Output only. Represents time when the execution was acknowledged by the execution controller. It is not guaranteed to be set in happens-before order across separate operations. */
      createTime?: string;
      /** Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request. */
      deleteTime?: string;
      /** Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
      etag?: string;
      /** Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request. */
      expireTime?: string;
      /** Output only. The number of tasks which reached phase Failed. */
      failedCount?: number;
      /** Output only. A number that monotonically increases every time the user modifies the desired state. */
      generation?: string;
      /** Output only. The name of the parent Job. */
      job?: string;
      /** Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels */
      labels?: {[P in string]: string};
      /** The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA. */
      launchStage?: string;
      /** Output only. URI where logs for this execution can be found in Cloud Console. */
      logUri?: string;
      /** Output only. The unique name of this Execution. */
      name?: string;
      /** Output only. The generation of this Execution. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      observedGeneration?: string;
      /** Output only. Specifies the maximum desired number of tasks the execution should run at any given time. Must be <= task_count. The actual number of tasks running in steady state will be less than this number when ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. */
      parallelism?: number;
      /** Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run. */
      reconciling?: boolean;
      /** Output only. The number of tasks which have retried at least once. */
      retriedCount?: number;
      /** Output only. The number of actively running tasks. */
      runningCount?: number;
      /** Output only. Reserved for future use. */
      satisfiesPzs?: boolean;
      /** Output only. Represents time when the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. */
      startTime?: string;
      /** Output only. The number of tasks which reached phase Succeeded. */
      succeededCount?: number;
      /** Output only. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. */
      taskCount?: number;
      /** Output only. The template used to create tasks for this execution. */
      template?: GoogleCloudRunV2TaskTemplate;
      /** Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted. */
      uid?: string;
      /** Output only. The last-modified time. */
      updateTime?: string;
    }
    interface GoogleCloudRunV2ExecutionReference {
      /** Status for the execution completion. */
      completionStatus?: string;
      /** Creation timestamp of the execution. */
      completionTime?: string;
      /** Creation timestamp of the execution. */
      createTime?: string;
      /** The deletion time of the execution. It is only populated as a response to a Delete request. */
      deleteTime?: string;
      /** Name of the execution. */
      name?: string;
    }
    interface GoogleCloudRunV2ExecutionTemplate {
      /** Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules. */
      annotations?: {[P in string]: string};
      /** Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 ExecutionTemplate. */
      labels?: {[P in string]: string};
      /** Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism. */
      parallelism?: number;
      /** Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1. */
      taskCount?: number;
      /** Required. Describes the task(s) that will be created when executing an execution. */
      template?: GoogleCloudRunV2TaskTemplate;
    }
    interface GoogleCloudRunV2ExportImageRequest {
      /** Required. The export destination url (the Artifact Registry repo). */
      destinationRepo?: string;
    }
    interface GoogleCloudRunV2ExportImageResponse {
      /** An operation ID used to track the status of image exports tied to the original pod ID in the request. */
      operationId?: string;
    }
    interface GoogleCloudRunV2ExportStatusResponse {
      /** The status of each image export job. */
      imageExportStatuses?: GoogleCloudRunV2ImageExportStatus[];
      /** The operation id. */
      operationId?: string;
      /** Output only. The state of the overall export operation. */
      operationState?: string;
    }
    interface GoogleCloudRunV2GCSVolumeSource {
      /** Cloud Storage Bucket name. */
      bucket?: string;
      /** If true, the volume will be mounted as read only for all mounts. */
      readOnly?: boolean;
    }
    interface GoogleCloudRunV2GRPCAction {
      /** Optional. Port number of the gRPC service. Number must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort. */
      port?: number;
      /** Optional. Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md ). If this is not specified, the default behavior is defined by gRPC. */
      service?: string;
    }
    interface GoogleCloudRunV2HTTPGetAction {
      /** Optional. Custom headers to set in the request. HTTP allows repeated headers. */
      httpHeaders?: GoogleCloudRunV2HTTPHeader[];
      /** Optional. Path to access on the HTTP server. Defaults to '/'. */
      path?: string;
      /** Optional. Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort. */
      port?: number;
    }
    interface GoogleCloudRunV2HTTPHeader {
      /** Required. The header field name */
      name?: string;
      /** Optional. The header field value */
      value?: string;
    }
    interface GoogleCloudRunV2ImageExportStatus {
      /** The exported image ID as it will appear in Artifact Registry. */
      exportedImageDigest?: string;
      /** Output only. Has the image export job finished (regardless of successful or failure). */
      exportJobState?: string;
      /** The status of the export task if done. */
      status?: UtilStatusProto;
      /** The image tag as it will appear in Artifact Registry. */
      tag?: string;
    }
    interface GoogleCloudRunV2Job {
      /** Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected on new resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes annotations' namespacing, limits, and rules. */
      annotations?: {[P in string]: string};
      /** Settings for the Binary Authorization feature. */
      binaryAuthorization?: GoogleCloudRunV2BinaryAuthorization;
      /** Arbitrary identifier for the API client. */
      client?: string;
      /** Arbitrary version identifier for the API client. */
      clientVersion?: string;
      /** Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      conditions?: GoogleCloudRunV2Condition[];
      /** Output only. The creation time. */
      createTime?: string;
      /** Output only. Email address of the authenticated creator. */
      creator?: string;
      /** Output only. The deletion time. It is only populated as a response to a Delete request. */
      deleteTime?: string;
      /** Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
      etag?: string;
      /** Output only. Number of executions created for this job. */
      executionCount?: number;
      /** Output only. For a deleted resource, the time after which it will be permamently deleted. */
      expireTime?: string;
      /** Output only. A number that monotonically increases every time the user modifies the desired state. */
      generation?: string;
      /** Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Job. */
      labels?: {[P in string]: string};
      /** Output only. Email address of the last authenticated modifier. */
      lastModifier?: string;
      /** Output only. Name of the last created execution. */
      latestCreatedExecution?: GoogleCloudRunV2ExecutionReference;
      /** The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output. */
      launchStage?: string;
      /** The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job} */
      name?: string;
      /** Output only. The generation of this Job. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      observedGeneration?: string;
      /** Output only. Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, `observed_generation` and `latest_succeeded_execution`, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `observed_generation` and `generation`, `latest_succeeded_execution` and `latest_created_execution`. If reconciliation failed, `observed_generation` and `latest_succeeded_execution` will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in `terminal_condition` and `conditions`. */
      reconciling?: boolean;
      /** A unique string used as a suffix for creating a new execution. The Job will become ready when the execution is successfully completed. The sum of job name and token length must be fewer than 63 characters. */
      runExecutionToken?: string;
      /** Output only. Reserved for future use. */
      satisfiesPzs?: boolean;
      /** A unique string used as a suffix creating a new execution. The Job will become ready when the execution is successfully started. The sum of job name and token length must be fewer than 63 characters. */
      startExecutionToken?: string;
      /** Required. The template used to create executions for this Job. */
      template?: GoogleCloudRunV2ExecutionTemplate;
      /** Output only. The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state. */
      terminalCondition?: GoogleCloudRunV2Condition;
      /** Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted. */
      uid?: string;
      /** Output only. The last-modified time. */
      updateTime?: string;
    }
    interface GoogleCloudRunV2ListExecutionsResponse {
      /** The resulting list of Executions. */
      executions?: GoogleCloudRunV2Execution[];
      /** A token indicating there are more items than page_size. Use it in the next ListExecutions request to continue. */
      nextPageToken?: string;
    }
    interface GoogleCloudRunV2ListJobsResponse {
      /** The resulting list of Jobs. */
      jobs?: GoogleCloudRunV2Job[];
      /** A token indicating there are more items than page_size. Use it in the next ListJobs request to continue. */
      nextPageToken?: string;
    }
    interface GoogleCloudRunV2ListRevisionsResponse {
      /** A token indicating there are more items than page_size. Use it in the next ListRevisions request to continue. */
      nextPageToken?: string;
      /** The resulting list of Revisions. */
      revisions?: GoogleCloudRunV2Revision[];
    }
    interface GoogleCloudRunV2ListServicesResponse {
      /** A token indicating there are more items than page_size. Use it in the next ListServices request to continue. */
      nextPageToken?: string;
      /** The resulting list of Services. */
      services?: GoogleCloudRunV2Service[];
    }
    interface GoogleCloudRunV2ListTasksResponse {
      /** A token indicating there are more items than page_size. Use it in the next ListTasks request to continue. */
      nextPageToken?: string;
      /** The resulting list of Tasks. */
      tasks?: GoogleCloudRunV2Task[];
    }
    interface GoogleCloudRunV2Metadata {
      /** JSON encoded Google-generated Customer Metadata for a given resource/project. */
      metadata?: string;
    }
    interface GoogleCloudRunV2NetworkInterface {
      /** Optional. The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be looked up from the subnetwork. */
      network?: string;
      /** Optional. The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both network and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the subnetwork with the same name with the network will be used. */
      subnetwork?: string;
      /** Optional. Network tags applied to this Cloud Run resource. */
      tags?: string[];
    }
    interface GoogleCloudRunV2NFSVolumeSource {
      /** Path that is exported by the NFS server. */
      path?: string;
      /** If true, the volume will be mounted as read only for all mounts. */
      readOnly?: boolean;
      /** Hostname or IP address of the NFS server */
      server?: string;
    }
    interface GoogleCloudRunV2NodeSelector {
      /** Required. GPU accelerator type to attach to an instance. */
      accelerator?: string;
    }
    interface GoogleCloudRunV2Overrides {
      /** Per container override specification. */
      containerOverrides?: GoogleCloudRunV2ContainerOverride[];
      /** Optional. The desired number of tasks the execution should run. Will replace existing task_count value. */
      taskCount?: number;
      /** Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. Will replace existing timeout_seconds value. */
      timeout?: string;
    }
    interface GoogleCloudRunV2Probe {
      /** Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. */
      failureThreshold?: number;
      /** Optional. GRPC specifies an action involving a gRPC port. Exactly one of httpGet, tcpSocket, or grpc must be specified. */
      grpc?: GoogleCloudRunV2GRPCAction;
      /** Optional. HTTPGet specifies the http request to perform. Exactly one of httpGet, tcpSocket, or grpc must be specified. */
      httpGet?: GoogleCloudRunV2HTTPGetAction;
      /** Optional. Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. */
      initialDelaySeconds?: number;
      /** Optional. How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds. */
      periodSeconds?: number;
      /** Optional. TCPSocket specifies an action involving a TCP port. Exactly one of httpGet, tcpSocket, or grpc must be specified. */
      tcpSocket?: GoogleCloudRunV2TCPSocketAction;
      /** Optional. Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. */
      timeoutSeconds?: number;
    }
    interface GoogleCloudRunV2ResourceRequirements {
      /** Determines whether CPU is only allocated during requests (true by default). However, if ResourceRequirements is set, the caller must explicitly set this field to true to preserve the default behavior. */
      cpuIdle?: boolean;
      /** Only `memory` and `cpu` keys in the map are supported. Notes: * The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. For more information, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits */
      limits?: {[P in string]: string};
      /** Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency. */
      startupCpuBoost?: boolean;
    }
    interface GoogleCloudRunV2Revision {
      /** Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. */
      annotations?: {[P in string]: string};
      /** Output only. The Condition of this Revision, containing its readiness status, and detailed error information in case it did not reach a serving state. */
      conditions?: GoogleCloudRunV2Condition[];
      /** Holds the single container that defines the unit of execution for this Revision. */
      containers?: GoogleCloudRunV2Container[];
      /** Output only. The creation time. */
      createTime?: string;
      /** Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request. */
      deleteTime?: string;
      /** A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek */
      encryptionKey?: string;
      /** The action to take if the encryption key is revoked. */
      encryptionKeyRevocationAction?: string;
      /** If encryption_key_revocation_action is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour. */
      encryptionKeyShutdownDuration?: string;
      /** Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
      etag?: string;
      /** The execution environment being used to host this Revision. */
      executionEnvironment?: string;
      /** Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request. */
      expireTime?: string;
      /** Output only. A number that monotonically increases every time the user modifies the desired state. */
      generation?: string;
      /** Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. */
      labels?: {[P in string]: string};
      /** The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA. */
      launchStage?: string;
      /** Output only. The Google Console URI to obtain logs for the Revision. */
      logUri?: string;
      /** Sets the maximum number of requests that each serving instance can receive. */
      maxInstanceRequestConcurrency?: number;
      /** Output only. The unique name of this Revision. */
      name?: string;
      /** The node selector for the revision. */
      nodeSelector?: GoogleCloudRunV2NodeSelector;
      /** Output only. The generation of this Revision currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      observedGeneration?: string;
      /** Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Service.reconciling` for additional information on reconciliation process in Cloud Run. */
      reconciling?: boolean;
      /** Output only. Reserved for future use. */
      satisfiesPzs?: boolean;
      /** Scaling settings for this revision. */
      scaling?: GoogleCloudRunV2RevisionScaling;
      /** Output only. The current effective scaling settings for the revision. */
      scalingStatus?: GoogleCloudRunV2RevisionScalingStatus;
      /** Output only. The name of the parent service. */
      service?: string;
      /** Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. */
      serviceAccount?: string;
      /** Enables service mesh connectivity. */
      serviceMesh?: GoogleCloudRunV2ServiceMesh;
      /** Enable session affinity. */
      sessionAffinity?: boolean;
      /** Max allowed time for an instance to respond to a request. */
      timeout?: string;
      /** Output only. Server assigned unique identifier for the Revision. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted. */
      uid?: string;
      /** Output only. The last-modified time. */
      updateTime?: string;
      /** A list of Volumes to make available to containers. */
      volumes?: GoogleCloudRunV2Volume[];
      /** VPC Access configuration for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc. */
      vpcAccess?: GoogleCloudRunV2VpcAccess;
    }
    interface GoogleCloudRunV2RevisionScaling {
      /** Optional. Maximum number of serving instances that this resource should have. */
      maxInstanceCount?: number;
      /** Optional. Minimum number of serving instances that this resource should have. */
      minInstanceCount?: number;
    }
    interface GoogleCloudRunV2RevisionScalingStatus {
      /** The current number of min instances provisioned for this revision. */
      desiredMinInstanceCount?: number;
    }
    interface GoogleCloudRunV2RevisionTemplate {
      /** Optional. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 RevisionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules. */
      annotations?: {[P in string]: string};
      /** Holds the single container that defines the unit of execution for this Revision. */
      containers?: GoogleCloudRunV2Container[];
      /** A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek */
      encryptionKey?: string;
      /** Optional. The sandbox environment to host this Revision. */
      executionEnvironment?: string;
      /** Optional. Disables health checking containers during deployment. */
      healthCheckDisabled?: boolean;
      /** Optional. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 RevisionTemplate. */
      labels?: {[P in string]: string};
      /** Optional. Sets the maximum number of requests that each serving instance can receive. If not specified or 0, defaults to 80 when requested CPU >= 1 and defaults to 1 when requested CPU < 1. */
      maxInstanceRequestConcurrency?: number;
      /** Optional. The node selector for the revision template. */
      nodeSelector?: GoogleCloudRunV2NodeSelector;
      /** Optional. The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name. */
      revision?: string;
      /** Optional. Scaling settings for this Revision. */
      scaling?: GoogleCloudRunV2RevisionScaling;
      /** Optional. Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account. */
      serviceAccount?: string;
      /** Optional. Enables service mesh connectivity. */
      serviceMesh?: GoogleCloudRunV2ServiceMesh;
      /** Optional. Enable session affinity. */
      sessionAffinity?: boolean;
      /** Optional. Max allowed time for an instance to respond to a request. */
      timeout?: string;
      /** Optional. A list of Volumes to make available to containers. */
      volumes?: GoogleCloudRunV2Volume[];
      /** Optional. VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc. */
      vpcAccess?: GoogleCloudRunV2VpcAccess;
    }
    interface GoogleCloudRunV2RunJobRequest {
      /** A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
      etag?: string;
      /** Overrides specification for a given execution of a job. If provided, overrides will be applied to update the execution or task spec. */
      overrides?: GoogleCloudRunV2Overrides;
      /** Indicates that the request should be validated without actually deleting any resources. */
      validateOnly?: boolean;
    }
    interface GoogleCloudRunV2SecretKeySelector {
      /** Required. The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project. */
      secret?: string;
      /** The Cloud Secret Manager secret version. Can be 'latest' for the latest version, an integer for a specific version, or a version alias. */
      version?: string;
    }
    interface GoogleCloudRunV2SecretVolumeSource {
      /** Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set. */
      defaultMode?: number;
      /** If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version. */
      items?: GoogleCloudRunV2VersionToPath[];
      /** Required. The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project. */
      secret?: string;
    }
    interface GoogleCloudRunV2Service {
      /** Optional. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources. All system annotations in v1 now have a corresponding field in v2 Service. This field follows Kubernetes annotations' namespacing, limits, and rules. */
      annotations?: {[P in string]: string};
      /** Optional. Settings for the Binary Authorization feature. */
      binaryAuthorization?: GoogleCloudRunV2BinaryAuthorization;
      /** Arbitrary identifier for the API client. */
      client?: string;
      /** Arbitrary version identifier for the API client. */
      clientVersion?: string;
      /** Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      conditions?: GoogleCloudRunV2Condition[];
      /** Output only. The creation time. */
      createTime?: string;
      /** Output only. Email address of the authenticated creator. */
      creator?: string;
      /** One or more custom audiences that you want this service to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests. For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences. */
      customAudiences?: string[];
      /** Optional. Disables public resolution of the default URI of this service. */
      defaultUriDisabled?: boolean;
      /** Output only. The deletion time. It is only populated as a response to a Delete request. */
      deleteTime?: string;
      /** User-provided description of the Service. This field currently has a 512-character limit. */
      description?: string;
      /** Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
      etag?: string;
      /** Output only. For a deleted resource, the time after which it will be permamently deleted. */
      expireTime?: string;
      /** Output only. A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`. */
      generation?: string;
      /** Optional. Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active. */
      ingress?: string;
      /** Optional. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Service. */
      labels?: {[P in string]: string};
      /** Output only. Email address of the last authenticated modifier. */
      lastModifier?: string;
      /** Output only. Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      latestCreatedRevision?: string;
      /** Output only. Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      latestReadyRevision?: string;
      /** Optional. The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output. */
      launchStage?: string;
      /** The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id} */
      name?: string;
      /** Output only. The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`. */
      observedGeneration?: string;
      /** Output only. Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`. */
      reconciling?: boolean;
      /** Output only. Reserved for future use. */
      satisfiesPzs?: boolean;
      /** Optional. Specifies service-level scaling settings */
      scaling?: GoogleCloudRunV2ServiceScaling;
      /** Required. The template used to create revisions for this Service. */
      template?: GoogleCloudRunV2RevisionTemplate;
      /** Output only. The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      terminalCondition?: GoogleCloudRunV2Condition;
      /** Optional. Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision. */
      traffic?: GoogleCloudRunV2TrafficTarget[];
      /** Output only. Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
      trafficStatuses?: GoogleCloudRunV2TrafficTargetStatus[];
      /** Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted. */
      uid?: string;
      /** Output only. The last-modified time. */
      updateTime?: string;
      /** Output only. The main URI in which this Service is serving traffic. */
      uri?: string;
    }
    interface GoogleCloudRunV2ServiceMesh {
      /** The service mesh resource name. Format: projects/{project_number}/locations/global/meshes/{mesh}. */
      mesh?: string;
    }
    interface GoogleCloudRunV2ServiceScaling {
      /** Optional. total min instances for the service. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving. (BETA) */
      minInstanceCount?: number;
    }
    interface GoogleCloudRunV2Task {
      /** Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. */
      annotations?: {[P in string]: string};
      /** Output only. Represents time when the Task was completed. It is not guaranteed to be set in happens-before order across separate operations. */
      completionTime?: string;
      /** Output only. The Condition of this Task, containing its readiness status, and detailed error information in case it did not reach the desired state. */
      conditions?: GoogleCloudRunV2Condition[];
      /** Holds the single container that defines the unit of execution for this task. */
      containers?: GoogleCloudRunV2Container[];
      /** Output only. Represents time when the task was created by the system. It is not guaranteed to be set in happens-before order across separate operations. */
      createTime?: string;
      /** Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request. */
      deleteTime?: string;
      /** Output only. A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek */
      encryptionKey?: string;
      /** Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
      etag?: string;
      /** Output only. The name of the parent Execution. */
      execution?: string;
      /** The execution environment being used to host this Task. */
      executionEnvironment?: string;
      /** Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request. */
      expireTime?: string;
      /** Output only. A number that monotonically increases every time the user modifies the desired state. */
      generation?: string;
      /** Output only. Index of the Task, unique per execution, and beginning at 0. */
      index?: number;
      /** Output only. The name of the parent Job. */
      job?: string;
      /** Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels */
      labels?: {[P in string]: string};
      /** Output only. Result of the last attempt of this Task. */
      lastAttemptResult?: GoogleCloudRunV2TaskAttemptResult;
      /** Output only. URI where logs for this execution can be found in Cloud Console. */
      logUri?: string;
      /** Number of retries allowed per Task, before marking this Task failed. */
      maxRetries?: number;
      /** Output only. The unique name of this Task. */
      name?: string;
      /** Output only. The generation of this Task. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run. */
      observedGeneration?: string;
      /** Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run. */
      reconciling?: boolean;
      /** Output only. The number of times this Task was retried. Tasks are retried when they fail up to the maxRetries limit. */
      retried?: number;
      /** Output only. Reserved for future use. */
      satisfiesPzs?: boolean;
      /** Output only. Represents time when the task was scheduled to run by the system. It is not guaranteed to be set in happens-before order across separate operations. */
      scheduledTime?: string;
      /** Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account. */
      serviceAccount?: string;
      /** Output only. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations. */
      startTime?: string;
      /** Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. */
      timeout?: string;
      /** Output only. Server assigned unique identifier for the Task. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted. */
      uid?: string;
      /** Output only. The last-modified time. */
      updateTime?: string;
      /** A list of Volumes to make available to containers. */
      volumes?: GoogleCloudRunV2Volume[];
      /** Output only. VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc. */
      vpcAccess?: GoogleCloudRunV2VpcAccess;
    }
    interface GoogleCloudRunV2TaskAttemptResult {
      /** Output only. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details. */
      exitCode?: number;
      /** Output only. The status of this attempt. If the status code is OK, then the attempt succeeded. */
      status?: GoogleRpcStatus;
    }
    interface GoogleCloudRunV2TaskTemplate {
      /** Holds the single container that defines the unit of execution for this task. */
      containers?: GoogleCloudRunV2Container[];
      /** A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek */
      encryptionKey?: string;
      /** Optional. The execution environment being used to host this Task. */
      executionEnvironment?: string;
      /** Number of retries allowed per Task, before marking this Task failed. Defaults to 3. */
      maxRetries?: number;
      /** Optional. Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account. */
      serviceAccount?: string;
      /** Optional. Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds. */
      timeout?: string;
      /** Optional. A list of Volumes to make available to containers. */
      volumes?: GoogleCloudRunV2Volume[];
      /** Optional. VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc. */
      vpcAccess?: GoogleCloudRunV2VpcAccess;
    }
    interface GoogleCloudRunV2TCPSocketAction {
      /** Optional. Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort. */
      port?: number;
    }
    interface GoogleCloudRunV2TrafficTarget {
      /** Specifies percent of the traffic to this Revision. This defaults to zero if unspecified. */
      percent?: number;
      /** Revision to which to send this portion of traffic, if traffic allocation is by revision. */
      revision?: string;
      /** Indicates a string to be part of the URI to exclusively reference this target. */
      tag?: string;
      /** The allocation type for this traffic target. */
      type?: string;
    }
    interface GoogleCloudRunV2TrafficTargetStatus {
      /** Specifies percent of the traffic to this Revision. */
      percent?: number;
      /** Revision to which this traffic is sent. */
      revision?: string;
      /** Indicates the string used in the URI to exclusively reference this target. */
      tag?: string;
      /** The allocation type for this traffic target. */
      type?: string;
      /** Displays the target URI. */
      uri?: string;
    }
    interface GoogleCloudRunV2VersionToPath {
      /** Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. */
      mode?: number;
      /** Required. The relative path of the secret in the container. */
      path?: string;
      /** The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. */
      version?: string;
    }
    interface GoogleCloudRunV2Volume {
      /** For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. */
      cloudSqlInstance?: GoogleCloudRunV2CloudSqlInstance;
      /** Ephemeral storage used as a shared volume. */
      emptyDir?: GoogleCloudRunV2EmptyDirVolumeSource;
      /** Persistent storage backed by a Google Cloud Storage bucket. */
      gcs?: GoogleCloudRunV2GCSVolumeSource;
      /** Required. Volume's name. */
      name?: string;
      /** For NFS Voumes, contains the path to the nfs Volume */
      nfs?: GoogleCloudRunV2NFSVolumeSource;
      /** Secret represents a secret that should populate this volume. */
      secret?: GoogleCloudRunV2SecretVolumeSource;
    }
    interface GoogleCloudRunV2VolumeMount {
      /** Required. Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run */
      mountPath?: string;
      /** Required. This must match the Name of a Volume. */
      name?: string;
    }
    interface GoogleCloudRunV2VpcAccess {
      /** VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number. For more information on sending traffic to a VPC network via a connector, visit https://cloud.google.com/run/docs/configuring/vpc-connectors. */
      connector?: string;
      /** Optional. Traffic VPC egress settings. If not provided, it defaults to PRIVATE_RANGES_ONLY. */
      egress?: string;
      /** Optional. Direct VPC egress settings. Currently only single network interface is supported. */
      networkInterfaces?: GoogleCloudRunV2NetworkInterface[];
    }
    interface GoogleDevtoolsCloudbuildV1ApprovalConfig {
      /** Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. */
      approvalRequired?: boolean;
    }
    interface GoogleDevtoolsCloudbuildV1ApprovalResult {
      /** Output only. The time when the approval decision was made. */
      approvalTime?: string;
      /** Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. */
      approverAccount?: string;
      /** Optional. An optional comment for this manual approval result. */
      comment?: string;
      /** Required. The decision of this manual approval. */
      decision?: string;
      /** Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. */
      url?: string;
    }
    interface GoogleDevtoolsCloudbuildV1ArtifactObjects {
      /** Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. */
      location?: string;
      /** Path globs used to match files in the build's workspace. */
      paths?: string[];
      /** Output only. Stores timing information for pushing all artifact objects. */
      timing?: GoogleDevtoolsCloudbuildV1TimeSpan;
    }
    interface GoogleDevtoolsCloudbuildV1Artifacts {
      /** A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. */
      images?: string[];
      /** A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE. */
      mavenArtifacts?: GoogleDevtoolsCloudbuildV1MavenArtifact[];
      /** A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE. */
      npmPackages?: GoogleDevtoolsCloudbuildV1NpmPackage[];
      /** A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE. */
      objects?: GoogleDevtoolsCloudbuildV1ArtifactObjects;
      /** A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE. */
      pythonPackages?: GoogleDevtoolsCloudbuildV1PythonPackage[];
    }
    interface GoogleDevtoolsCloudbuildV1Build {
      /** Output only. Describes this build's approval configuration, status, and result. */
      approval?: GoogleDevtoolsCloudbuildV1BuildApproval;
      /** Artifacts produced by the build that should be uploaded upon successful completion of all build steps. */
      artifacts?: GoogleDevtoolsCloudbuildV1Artifacts;
      /** Secrets and secret environment variables. */
      availableSecrets?: GoogleDevtoolsCloudbuildV1Secrets;
      /** Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically. */
      buildTriggerId?: string;
      /** Output only. Time at which the request to create the build was received. */
      createTime?: string;
      /** Output only. Contains information about the build when status=FAILURE. */
      failureInfo?: GoogleDevtoolsCloudbuildV1FailureInfo;
      /** Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. */
      finishTime?: string;
      /** Optional. Configuration for git operations. */
      gitConfig?: GoogleDevtoolsCloudbuildV1GitConfig;
      /** Output only. Unique identifier of the build. */
      id?: string;
      /** A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`. */
      images?: string[];
      /** Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`. */
      logsBucket?: string;
      /** Output only. URL to logs for this build in Google Cloud Console. */
      logUrl?: string;
      /** Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service. */
      name?: string;
      /** Special options for this build. */
      options?: GoogleDevtoolsCloudbuildV1BuildOptions;
      /** Output only. ID of the project. */
      projectId?: string;
      /** TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time. */
      queueTtl?: string;
      /** Output only. Results of the build. */
      results?: GoogleDevtoolsCloudbuildV1Results;
      /** Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets */
      secrets?: GoogleDevtoolsCloudbuildV1Secret[];
      /** IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. */
      serviceAccount?: string;
      /** Optional. The location of the source files to build. */
      source?: GoogleDevtoolsCloudbuildV1Source;
      /** Output only. A permanent fixed identifier for source. */
      sourceProvenance?: GoogleDevtoolsCloudbuildV1SourceProvenance;
      /** Output only. Time at which execution of the build was started. */
      startTime?: string;
      /** Output only. Status of the build. */
      status?: string;
      /** Output only. Customer-readable message about the current status. */
      statusDetail?: string;
      /** Required. The operations to be performed on the workspace. */
      steps?: GoogleDevtoolsCloudbuildV1BuildStep[];
      /** Substitutions data for `Build` resource. */
      substitutions?: {[P in string]: string};
      /** Tags for annotation of a `Build`. These are not docker tags. */
      tags?: string[];
      /** Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes. */
      timeout?: string;
      /** Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included. */
      timing?: {[P in string]: GoogleDevtoolsCloudbuildV1TimeSpan};
      /** Output only. Non-fatal problems encountered during the execution of the build. */
      warnings?: GoogleDevtoolsCloudbuildV1Warning[];
    }
    interface GoogleDevtoolsCloudbuildV1BuildApproval {
      /** Output only. Configuration for manual approval of this build. */
      config?: GoogleDevtoolsCloudbuildV1ApprovalConfig;
      /** Output only. Result of manual approval for this Build. */
      result?: GoogleDevtoolsCloudbuildV1ApprovalResult;
      /** Output only. The state of this build's approval. */
      state?: string;
    }
    interface GoogleDevtoolsCloudbuildV1BuildOperationMetadata {
      /** The build that the operation is tracking. */
      build?: GoogleDevtoolsCloudbuildV1Build;
    }
    interface GoogleDevtoolsCloudbuildV1BuildOptions {
      /** Option to include built-in and custom substitutions as env variables for all build steps. */
      automapSubstitutions?: boolean;
      /** Optional. Option to specify how default logs buckets are setup. */
      defaultLogsBucketBehavior?: string;
      /** Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 4000GB; builds that request more than the maximum are rejected with an error. */
      diskSizeGb?: string;
      /** Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. */
      dynamicSubstitutions?: boolean;
      /** A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
      env?: string[];
      /** Option to specify the logging mode, which determines if and where build logs are stored. */
      logging?: string;
      /** Option to define build log streaming behavior to Cloud Storage. */
      logStreamingOption?: string;
      /** Compute Engine machine type on which to run the build. */
      machineType?: string;
      /** Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information. */
      pool?: GoogleDevtoolsCloudbuildV1PoolOption;
      /** Requested verifiability options. */
      requestedVerifyOption?: string;
      /** A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build. */
      secretEnv?: string[];
      /** Requested hash for SourceProvenance. */
      sourceProvenanceHash?: string[];
      /** Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. */
      substitutionOption?: string;
      /** Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration. */
      volumes?: GoogleDevtoolsCloudbuildV1Volume[];
      /** This field deprecated; please use `pool.name` instead. */
      workerPool?: string;
    }
    interface GoogleDevtoolsCloudbuildV1BuildStep {
      /** Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence. */
      allowExitCodes?: number[];
      /** Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field. */
      allowFailure?: boolean;
      /** A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments. */
      args?: string[];
      /** Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption. */
      automapSubstitutions?: boolean;
      /** Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution. */
      dir?: string;
      /** Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used. */
      entrypoint?: string;
      /** A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
      env?: string[];
      /** Output only. Return code from running the step. */
      exitCode?: number;
      /** Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency. */
      id?: string;
      /** Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step. */
      name?: string;
      /** Output only. Stores timing information for pulling this build step's builder image only. */
      pullTiming?: GoogleDevtoolsCloudbuildV1TimeSpan;
      /** A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args. */
      script?: string;
      /** A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. */
      secretEnv?: string[];
      /** Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses. */
      status?: string;
      /** Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out. */
      timeout?: string;
      /** Output only. Stores timing information for executing this build step. */
      timing?: GoogleDevtoolsCloudbuildV1TimeSpan;
      /** List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration. */
      volumes?: GoogleDevtoolsCloudbuildV1Volume[];
      /** The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully. */
      waitFor?: string[];
    }
    interface GoogleDevtoolsCloudbuildV1BuiltImage {
      /** Docker Registry 2.0 digest. */
      digest?: string;
      /** Name used to push the container image to Google Container Registry, as presented to `docker push`. */
      name?: string;
      /** Output only. Stores timing information for pushing the specified image. */
      pushTiming?: GoogleDevtoolsCloudbuildV1TimeSpan;
    }
    interface GoogleDevtoolsCloudbuildV1ConnectedRepository {
      /** Optional. Directory, relative to the source root, in which to run the build. */
      dir?: string;
      /** Required. Name of the Google Cloud Build repository, formatted as `projects/*‍/locations/*‍/connections/*‍/repositories/*`. */
      repository?: string;
      /** Required. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. */
      revision?: string;
    }
    interface GoogleDevtoolsCloudbuildV1DeveloperConnectConfig {
      /** Required. Directory, relative to the source root, in which to run the build. */
      dir?: string;
      /** Required. The Developer Connect Git repository link, formatted as `projects/*‍/locations/*‍/connections/*‍/gitRepositoryLink/*`. */
      gitRepositoryLink?: string;
      /** Required. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. */
      revision?: string;
    }
    interface GoogleDevtoolsCloudbuildV1FailureInfo {
      /** Explains the failure issue in more detail using hard-coded text. */
      detail?: string;
      /** The name of the failure. */
      type?: string;
    }
    interface GoogleDevtoolsCloudbuildV1FileHashes {
      /** Collection of file hashes. */
      fileHash?: GoogleDevtoolsCloudbuildV1Hash[];
    }
    interface GoogleDevtoolsCloudbuildV1GitConfig {
      /** Configuration for HTTP related git operations. */
      http?: GoogleDevtoolsCloudbuildV1HttpConfig;
    }
    interface GoogleDevtoolsCloudbuildV1GitSource {
      /** Optional. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. */
      dir?: string;
      /** Optional. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch. */
      revision?: string;
      /** Required. Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote. */
      url?: string;
    }
    interface GoogleDevtoolsCloudbuildV1Hash {
      /** The type of hash that was performed. */
      type?: string;
      /** The hash value. */
      value?: string;
    }
    interface GoogleDevtoolsCloudbuildV1HttpConfig {
      /** SecretVersion resource of the HTTP proxy URL. The Service Account used in the build (either the default Service Account or user-specified Service Account) should have `secretmanager.versions.access` permissions on this secret. The proxy URL should be in format `protocol://@]proxyhost[:port]`. */
      proxySecretVersionName?: string;
    }
    interface GoogleDevtoolsCloudbuildV1InlineSecret {
      /** Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets. */
      envMap?: {[P in string]: string};
      /** Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*‍/locations/*‍/keyRings/*‍/cryptoKeys/* */
      kmsKeyName?: string;
    }
    interface GoogleDevtoolsCloudbuildV1MavenArtifact {
      /** Maven `artifactId` value used when uploading the artifact to Artifact Registry. */
      artifactId?: string;
      /** Maven `groupId` value used when uploading the artifact to Artifact Registry. */
      groupId?: string;
      /** Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar. */
      path?: string;
      /** Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix. */
      repository?: string;
      /** Maven `version` value used when uploading the artifact to Artifact Registry. */
      version?: string;
    }
    interface GoogleDevtoolsCloudbuildV1NpmPackage {
      /** Path to the package.json. e.g. workspace/path/to/package */
      packagePath?: string;
      /** Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix. */
      repository?: string;
    }
    interface GoogleDevtoolsCloudbuildV1PoolOption {
      /** The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} */
      name?: string;
    }
    interface GoogleDevtoolsCloudbuildV1PythonPackage {
      /** Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file. */
      paths?: string[];
      /** Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix. */
      repository?: string;
    }
    interface GoogleDevtoolsCloudbuildV1RepoSource {
      /** Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
      branchName?: string;
      /** Explicit commit SHA to build. */
      commitSha?: string;
      /** Optional. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. */
      dir?: string;
      /** Optional. Only trigger a build if the revision regex does NOT match the revision regex. */
      invertRegex?: boolean;
      /** Optional. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. */
      projectId?: string;
      /** Required. Name of the Cloud Source Repository. */
      repoName?: string;
      /** Optional. Substitutions to use in a triggered build. Should only be used with RunBuildTrigger */
      substitutions?: {[P in string]: string};
      /** Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
      tagName?: string;
    }
    interface GoogleDevtoolsCloudbuildV1Results {
      /** Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. */
      artifactManifest?: string;
      /** Time to push all non-container artifacts to Cloud Storage. */
      artifactTiming?: GoogleDevtoolsCloudbuildV1TimeSpan;
      /** List of build step digests, in the order corresponding to build step indices. */
      buildStepImages?: string[];
      /** List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored. Note that the `$BUILDER_OUTPUT` variable is read-only and can't be substituted. */
      buildStepOutputs?: string[];
      /** Container images that were built as a part of the build. */
      images?: GoogleDevtoolsCloudbuildV1BuiltImage[];
      /** Maven artifacts uploaded to Artifact Registry at the end of the build. */
      mavenArtifacts?: GoogleDevtoolsCloudbuildV1UploadedMavenArtifact[];
      /** Npm packages uploaded to Artifact Registry at the end of the build. */
      npmPackages?: GoogleDevtoolsCloudbuildV1UploadedNpmPackage[];
      /** Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. */
      numArtifacts?: string;
      /** Python artifacts uploaded to Artifact Registry at the end of the build. */
      pythonPackages?: GoogleDevtoolsCloudbuildV1UploadedPythonPackage[];
    }
    interface GoogleDevtoolsCloudbuildV1Secret {
      /** Cloud KMS key name to use to decrypt these envs. */
      kmsKeyName?: string;
      /** Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets. */
      secretEnv?: {[P in string]: string};
    }
    interface GoogleDevtoolsCloudbuildV1SecretManagerSecret {
      /** Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. */
      env?: string;
      /** Resource name of the SecretVersion. In format: projects/*‍/secrets/*‍/versions/* */
      versionName?: string;
    }
    interface GoogleDevtoolsCloudbuildV1Secrets {
      /** Secrets encrypted with KMS key and the associated secret environment variable. */
      inline?: GoogleDevtoolsCloudbuildV1InlineSecret[];
      /** Secrets in Secret Manager and associated secret environment variable. */
      secretManager?: GoogleDevtoolsCloudbuildV1SecretManagerSecret[];
    }
    interface GoogleDevtoolsCloudbuildV1Source {
      /** Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource. */
      connectedRepository?: GoogleDevtoolsCloudbuildV1ConnectedRepository;
      /** If provided, get the source from this Developer Connect config. */
      developerConnectConfig?: GoogleDevtoolsCloudbuildV1DeveloperConnectConfig;
      /** If provided, get the source from this Git repository. */
      gitSource?: GoogleDevtoolsCloudbuildV1GitSource;
      /** If provided, get the source from this location in a Cloud Source Repository. */
      repoSource?: GoogleDevtoolsCloudbuildV1RepoSource;
      /** If provided, get the source from this location in Cloud Storage. */
      storageSource?: GoogleDevtoolsCloudbuildV1StorageSource;
      /** If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher). */
      storageSourceManifest?: GoogleDevtoolsCloudbuildV1StorageSourceManifest;
    }
    interface GoogleDevtoolsCloudbuildV1SourceProvenance {
      /** Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file. */
      fileHashes?: {[P in string]: GoogleDevtoolsCloudbuildV1FileHashes};
      /** Output only. A copy of the build's `source.connected_repository`, if exists, with any revisions resolved. */
      resolvedConnectedRepository?: GoogleDevtoolsCloudbuildV1ConnectedRepository;
      /** Output only. A copy of the build's `source.git_source`, if exists, with any revisions resolved. */
      resolvedGitSource?: GoogleDevtoolsCloudbuildV1GitSource;
      /** A copy of the build's `source.repo_source`, if exists, with any revisions resolved. */
      resolvedRepoSource?: GoogleDevtoolsCloudbuildV1RepoSource;
      /** A copy of the build's `source.storage_source`, if exists, with any generations resolved. */
      resolvedStorageSource?: GoogleDevtoolsCloudbuildV1StorageSource;
      /** A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview. */
      resolvedStorageSourceManifest?: GoogleDevtoolsCloudbuildV1StorageSourceManifest;
    }
    interface GoogleDevtoolsCloudbuildV1StorageSource {
      /** Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
      bucket?: string;
      /** Optional. Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
      generation?: string;
      /** Required. Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build. */
      object?: string;
      /** Optional. Option to specify the tool to fetch the source file for the build. */
      sourceFetcher?: string;
    }
    interface GoogleDevtoolsCloudbuildV1StorageSourceManifest {
      /** Required. Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
      bucket?: string;
      /** Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
      generation?: string;
      /** Required. Cloud Storage object containing the source manifest. This object must be a JSON file. */
      object?: string;
    }
    interface GoogleDevtoolsCloudbuildV1TimeSpan {
      /** End of time span. */
      endTime?: string;
      /** Start of time span. */
      startTime?: string;
    }
    interface GoogleDevtoolsCloudbuildV1UploadedMavenArtifact {
      /** Hash types and values of the Maven Artifact. */
      fileHashes?: GoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: GoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded artifact. */
      uri?: string;
    }
    interface GoogleDevtoolsCloudbuildV1UploadedNpmPackage {
      /** Hash types and values of the npm package. */
      fileHashes?: GoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: GoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded npm package. */
      uri?: string;
    }
    interface GoogleDevtoolsCloudbuildV1UploadedPythonPackage {
      /** Hash types and values of the Python Artifact. */
      fileHashes?: GoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: GoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded artifact. */
      uri?: string;
    }
    interface GoogleDevtoolsCloudbuildV1Volume {
      /** Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps. */
      name?: string;
      /** Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths. */
      path?: string;
    }
    interface GoogleDevtoolsCloudbuildV1Warning {
      /** The priority for this warning. */
      priority?: string;
      /** Explanation of the warning generated. */
      text?: string;
    }
    interface GoogleIamV1AuditConfig {
      /** The configuration for logging of each type of permission. */
      auditLogConfigs?: GoogleIamV1AuditLogConfig[];
      /** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
      service?: string;
    }
    interface GoogleIamV1AuditLogConfig {
      /** Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
      exemptedMembers?: string[];
      /** The log type that this config enables. */
      logType?: string;
    }
    interface GoogleIamV1Binding {
      /** The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      condition?: GoogleTypeExpr;
      /** Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`. */
      members?: string[];
      /** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles). */
      role?: string;
    }
    interface GoogleIamV1Policy {
      /** Specifies cloud audit logging configuration for this policy. */
      auditConfigs?: GoogleIamV1AuditConfig[];
      /** Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`. */
      bindings?: GoogleIamV1Binding[];
      /** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
      etag?: string;
      /** Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      version?: number;
    }
    interface GoogleIamV1SetIamPolicyRequest {
      /** REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them. */
      policy?: GoogleIamV1Policy;
      /** OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"` */
      updateMask?: string;
    }
    interface GoogleIamV1TestIamPermissionsRequest {
      /** The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions). */
      permissions?: string[];
    }
    interface GoogleIamV1TestIamPermissionsResponse {
      /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
      permissions?: string[];
    }
    interface GoogleLongrunningListOperationsResponse {
      /** The standard List next-page token. */
      nextPageToken?: string;
      /** A list of operations that matches the specified filter in the request. */
      operations?: GoogleLongrunningOperation[];
    }
    interface GoogleLongrunningOperation {
      /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: GoogleRpcStatus;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
      name?: string;
      /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
      response?: {[P in string]: any};
    }
    interface GoogleLongrunningWaitOperationRequest {
      /** The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used. */
      timeout?: string;
    }
    interface GoogleProtobufEmpty {}
    interface GoogleRpcStatus {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface GoogleTypeExpr {
      /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
      description?: string;
      /** Textual representation of an expression in Common Expression Language syntax. */
      expression?: string;
      /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
      location?: string;
      /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
      title?: string;
    }
    interface Proto2BridgeMessageSet {}
    interface UtilStatusProto {
      /** The canonical error code (see codes.proto) that most closely corresponds to this status. This may be missing, and in the common case of the generic space, it definitely will be. */
      canonicalCode?: number;
      /** Numeric code drawn from the space specified below. Often, this is the canonical error space, and code is drawn from google3/util/task/codes.proto */
      code?: number;
      /** Detail message */
      message?: string;
      /** message_set associates an arbitrary proto message with the status. */
      messageSet?: any;
      /** The following are usually only present when code != 0 Space to which this status belongs */
      space?: string;
    }
    interface TasksResource {
      /** Gets information about a Task. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Task. Format: projects/{project}/locations/{location}/jobs/{job}/executions/{execution}/tasks/{task} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Task>;
      /** Lists Tasks from an Execution of a Job. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of Tasks to return in this call. */
        pageSize?: number;
        /** A page token received from a previous call to ListTasks. All other parameters must match. */
        pageToken?: string;
        /** Required. The Execution from which the Tasks should be listed. To list all Tasks across Executions of a Job, use "-" instead of Execution name. To list all Tasks across Jobs, use "-" instead of Job name. Format: projects/{project}/locations/{location}/jobs/{job}/executions/{execution} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If true, returns deleted (but unexpired) resources along with active ones. */
        showDeleted?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ListTasksResponse>;
    }
    interface ExecutionsResource {
      /** Cancels an Execution. */
      cancel(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the Execution to cancel. Format: `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`, where `{project}` can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleCloudRunV2CancelExecutionRequest;
      }): Request<GoogleLongrunningOperation>;
      cancel(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the Execution to cancel. Format: `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`, where `{project}` can be project id or number. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleCloudRunV2CancelExecutionRequest
      ): Request<GoogleLongrunningOperation>;
      /** Deletes an Execution. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** A system-generated fingerprint for this version of the resource. This may be used to detect modification conflict during updates. */
        etag?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the Execution to delete. Format: `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`, where `{project}` can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated without actually deleting any resources. */
        validateOnly?: boolean;
      }): Request<GoogleLongrunningOperation>;
      /** Read the status of an image export operation. */
      exportStatus(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource of which image export operation status has to be fetched. Format: `projects/{project_id_or_number}/locations/{location}/services/{service}/revisions/{revision}` for Revision `projects/{project_id_or_number}/locations/{location}/jobs/{job}/executions/{execution}` for Execution */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The operation id returned from ExportImage. */
        operationId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ExportStatusResponse>;
      /** Gets information about an Execution. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Execution. Format: `projects/{project}/locations/{location}/jobs/{job}/executions/{execution}`, where `{project}` can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Execution>;
      /** Lists Executions from a Job. Results are sorted by creation time, descending. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of Executions to return in this call. */
        pageSize?: number;
        /** A page token received from a previous call to ListExecutions. All other parameters must match. */
        pageToken?: string;
        /** Required. The Execution from which the Executions should be listed. To list all Executions across Jobs, use "-" instead of Job name. Format: `projects/{project}/locations/{location}/jobs/{job}`, where `{project}` can be project id or number. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If true, returns deleted (but unexpired) resources along with active ones. */
        showDeleted?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ListExecutionsResponse>;
      tasks: TasksResource;
    }
    interface JobsResource {
      /** Creates a Job. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. The unique identifier for the Job. The name of the job becomes {parent}/jobs/{job_id}. */
        jobId?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The location and project in which this Job should be created. Format: projects/{project}/locations/{location}, where {project} can be project id or number. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated and default values populated, without persisting the request or creating any resources. */
        validateOnly?: boolean;
        /** Request body */
        resource: GoogleCloudRunV2Job;
      }): Request<GoogleLongrunningOperation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Required. The unique identifier for the Job. The name of the job becomes {parent}/jobs/{job_id}. */
          jobId?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The location and project in which this Job should be created. Format: projects/{project}/locations/{location}, where {project} can be project id or number. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Indicates that the request should be validated and default values populated, without persisting the request or creating any resources. */
          validateOnly?: boolean;
        },
        body: GoogleCloudRunV2Job
      ): Request<GoogleLongrunningOperation>;
      /** Deletes a Job. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
        etag?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Job. Format: projects/{project}/locations/{location}/jobs/{job}, where {project} can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated without actually deleting any resources. */
        validateOnly?: boolean;
      }): Request<GoogleLongrunningOperation>;
      /** Gets information about a Job. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Job. Format: projects/{project}/locations/{location}/jobs/{job}, where {project} can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Job>;
      /** Gets the IAM Access Control policy currently in effect for the given Job. This result does not include any inherited policies. */
      getIamPolicy(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
        'options.requestedPolicyVersion'?: number;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
        resource: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleIamV1Policy>;
      /** Lists Jobs. Results are sorted by creation time, descending. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of Jobs to return in this call. */
        pageSize?: number;
        /** A page token received from a previous call to ListJobs. All other parameters must match. */
        pageToken?: string;
        /** Required. The location and project to list resources on. Format: projects/{project}/locations/{location}, where {project} can be project id or number. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If true, returns deleted (but unexpired) resources along with active ones. */
        showDeleted?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ListJobsResponse>;
      /** Updates a Job. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Optional. If set to true, and if the Job does not exist, it will create a new one. Caller must have both create and update permissions for this call if this is set to true. */
        allowMissing?: boolean;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated and default values populated, without persisting the request or updating any resources. */
        validateOnly?: boolean;
        /** Request body */
        resource: GoogleCloudRunV2Job;
      }): Request<GoogleLongrunningOperation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Optional. If set to true, and if the Job does not exist, it will create a new one. Caller must have both create and update permissions for this call if this is set to true. */
          allowMissing?: boolean;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Indicates that the request should be validated and default values populated, without persisting the request or updating any resources. */
          validateOnly?: boolean;
        },
        body: GoogleCloudRunV2Job
      ): Request<GoogleLongrunningOperation>;
      /** Triggers creation of a new Execution of this Job. */
      run(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Job. Format: projects/{project}/locations/{location}/jobs/{job}, where {project} can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleCloudRunV2RunJobRequest;
      }): Request<GoogleLongrunningOperation>;
      run(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The full name of the Job. Format: projects/{project}/locations/{location}/jobs/{job}, where {project} can be project id or number. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleCloudRunV2RunJobRequest
      ): Request<GoogleLongrunningOperation>;
      /** Sets the IAM Access control policy for the specified Job. Overwrites any existing policy. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleIamV1SetIamPolicyRequest
      ): Request<GoogleIamV1Policy>;
      /** Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleIamV1TestIamPermissionsRequest
      ): Request<GoogleIamV1TestIamPermissionsResponse>;
      executions: ExecutionsResource;
    }
    interface OperationsResource {
      /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be deleted. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleLongrunningOperation>;
      /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Optional. A filter for matching the completed or in-progress operations. The supported formats of *filter* are: To query for only completed operations: done:true To query for only ongoing operations: done:false Must be empty to query for all of the latest operations for the given parent project. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. To query for all of the operations for a project. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of records that should be returned. Requested page size cannot exceed 100. If not set or set to less than or equal to 0, the default page size is 100. . */
        pageSize?: number;
        /** Token identifying which result to start with, which is returned by a previous list call. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleLongrunningListOperationsResponse>;
      /** Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done. */
      wait(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to wait on. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleLongrunningWaitOperationRequest;
      }): Request<GoogleLongrunningOperation>;
      wait(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The name of the operation resource to wait on. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleLongrunningWaitOperationRequest
      ): Request<GoogleLongrunningOperation>;
    }
    interface RevisionsResource {
      /** Deletes a Revision. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** A system-generated fingerprint for this version of the resource. This may be used to detect modification conflict during updates. */
        etag?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the Revision to delete. Format: projects/{project}/locations/{location}/services/{service}/revisions/{revision} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated without actually deleting any resources. */
        validateOnly?: boolean;
      }): Request<GoogleLongrunningOperation>;
      /** Read the status of an image export operation. */
      exportStatus(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource of which image export operation status has to be fetched. Format: `projects/{project_id_or_number}/locations/{location}/services/{service}/revisions/{revision}` for Revision `projects/{project_id_or_number}/locations/{location}/jobs/{job}/executions/{execution}` for Execution */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The operation id returned from ExportImage. */
        operationId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ExportStatusResponse>;
      /** Gets information about a Revision. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Revision. Format: projects/{project}/locations/{location}/services/{service}/revisions/{revision} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Revision>;
      /** Lists Revisions from a given Service, or from a given location. Results are sorted by creation time, descending. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of revisions to return in this call. */
        pageSize?: number;
        /** A page token received from a previous call to ListRevisions. All other parameters must match. */
        pageToken?: string;
        /** Required. The Service from which the Revisions should be listed. To list all Revisions across Services, use "-" instead of Service name. Format: projects/{project}/locations/{location}/services/{service} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If true, returns deleted (but unexpired) resources along with active ones. */
        showDeleted?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ListRevisionsResponse>;
    }
    interface ServicesResource {
      /** Creates a new Service in a given project and location. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The location and project in which this service should be created. Format: projects/{project}/locations/{location}, where {project} can be project id or number. Only lowercase characters, digits, and hyphens. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The unique identifier for the Service. It must begin with letter, and cannot end with hyphen; must contain fewer than 50 characters. The name of the service becomes {parent}/services/{service_id}. */
        serviceId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated and default values populated, without persisting the request or creating any resources. */
        validateOnly?: boolean;
        /** Request body */
        resource: GoogleCloudRunV2Service;
      }): Request<GoogleLongrunningOperation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The location and project in which this service should be created. Format: projects/{project}/locations/{location}, where {project} can be project id or number. Only lowercase characters, digits, and hyphens. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The unique identifier for the Service. It must begin with letter, and cannot end with hyphen; must contain fewer than 50 characters. The name of the service becomes {parent}/services/{service_id}. */
          serviceId?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Indicates that the request should be validated and default values populated, without persisting the request or creating any resources. */
          validateOnly?: boolean;
        },
        body: GoogleCloudRunV2Service
      ): Request<GoogleLongrunningOperation>;
      /** Deletes a Service. This will cause the Service to stop serving traffic and will delete all revisions. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
        etag?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Service. Format: projects/{project}/locations/{location}/services/{service}, where {project} can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated without actually deleting any resources. */
        validateOnly?: boolean;
      }): Request<GoogleLongrunningOperation>;
      /** Gets information about a Service. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The full name of the Service. Format: projects/{project}/locations/{location}/services/{service}, where {project} can be project id or number. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Service>;
      /** Gets the IAM Access Control policy currently in effect for the given Cloud Run Service. This result does not include any inherited policies. */
      getIamPolicy(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
        'options.requestedPolicyVersion'?: number;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
        resource: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleIamV1Policy>;
      /** Lists Services. Results are sorted by creation time, descending. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of Services to return in this call. */
        pageSize?: number;
        /** A page token received from a previous call to ListServices. All other parameters must match. */
        pageToken?: string;
        /** Required. The location and project to list resources on. Location must be a valid Google Cloud region, and cannot be the "-" wildcard. Format: projects/{project}/locations/{location}, where {project} can be project id or number. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If true, returns deleted (but unexpired) resources along with active ones. */
        showDeleted?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2ListServicesResponse>;
      /** Updates a Service. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Optional. If set to true, and if the Service does not exist, it will create a new one. The caller must have 'run.services.create' permissions if this is set to true and the Service does not exist. */
        allowMissing?: boolean;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Optional. The list of fields to be updated. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Indicates that the request should be validated and default values populated, without persisting the request or updating any resources. */
        validateOnly?: boolean;
        /** Request body */
        resource: GoogleCloudRunV2Service;
      }): Request<GoogleLongrunningOperation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Optional. If set to true, and if the Service does not exist, it will create a new one. The caller must have 'run.services.create' permissions if this is set to true and the Service does not exist. */
          allowMissing?: boolean;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Optional. The list of fields to be updated. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Indicates that the request should be validated and default values populated, without persisting the request or updating any resources. */
          validateOnly?: boolean;
        },
        body: GoogleCloudRunV2Service
      ): Request<GoogleLongrunningOperation>;
      /** Sets the IAM Access control policy for the specified Service. Overwrites any existing policy. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleIamV1SetIamPolicyRequest
      ): Request<GoogleIamV1Policy>;
      /** Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleIamV1TestIamPermissionsRequest
      ): Request<GoogleIamV1TestIamPermissionsResponse>;
      revisions: RevisionsResource;
    }
    interface LocationsResource {
      /** Export image for a given resource. */
      exportImage(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource of which image metadata should be exported. Format: `projects/{project_id_or_number}/locations/{location}/services/{service}/revisions/{revision}` for Revision `projects/{project_id_or_number}/locations/{location}/jobs/{job}/executions/{execution}` for Execution */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleCloudRunV2ExportImageRequest;
      }): Request<GoogleCloudRunV2ExportImageResponse>;
      exportImage(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the resource of which image metadata should be exported. Format: `projects/{project_id_or_number}/locations/{location}/services/{service}/revisions/{revision}` for Revision `projects/{project_id_or_number}/locations/{location}/jobs/{job}/executions/{execution}` for Execution */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleCloudRunV2ExportImageRequest
      ): Request<GoogleCloudRunV2ExportImageResponse>;
      /** Export image metadata for a given resource. */
      exportImageMetadata(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource of which image metadata should be exported. Format: `projects/{project_id_or_number}/locations/{location}/services/{service}/revisions/{revision}` for Revision `projects/{project_id_or_number}/locations/{location}/jobs/{job}/executions/{execution}` for Execution */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Metadata>;
      /** Export generated customer metadata for a given resource. */
      exportMetadata(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource of which metadata should be exported. Format: `projects/{project_id_or_number}/locations/{location}/services/{service}` for Service `projects/{project_id_or_number}/locations/{location}/services/{service}/revisions/{revision}` for Revision `projects/{project_id_or_number}/locations/{location}/jobs/{job}/executions/{execution}` for Execution */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Metadata>;
      /** Export generated customer metadata for a given project. */
      exportProjectMetadata(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the project of which metadata should be exported. Format: `projects/{project_id_or_number}/locations/{location}` for Project in a given location. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleCloudRunV2Metadata>;
      jobs: JobsResource;
      operations: OperationsResource;
      services: ServicesResource;
    }
    interface ProjectsResource {
      locations: LocationsResource;
    }

    const projects: ProjectsResource;
  }
}
