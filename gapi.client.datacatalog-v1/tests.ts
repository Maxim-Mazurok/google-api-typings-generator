/* This is stub file for gapi.client.datacatalog-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250914

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://datacatalog.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.datacatalog */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Searches Data Catalog for multiple resources like entries and tags that match a query. This is a [Custom Method] (https://cloud.google.com/apis/design/custom_methods) that doesn't return all information on a resource, only its ID and high level fields. To get more information, you can subsequently call specific get methods. Note: Data Catalog search queries don't guarantee full recall. Results that match your query might not be returned, even in subsequent result pages. Additionally, returned (and not returned) results can vary if you repeat search queries. For more information, see [Data Catalog search syntax] (https://cloud.google.com/data-catalog/docs/how-to/search-reference). */
    await gapi.client.datacatalog.catalog.search(
      {},
      {
        adminSearch: true,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        query: 'Test string',
        scope: {
          includeGcpPublicDatasets: true,
          includeOrgIds: ['Test string'],
          includeProjectIds: ['Test string'],
          includePublicTagTemplates: true,
          restrictedLocations: ['Test string'],
          starredOnly: true,
        },
      },
    );
    /** Gets an entry by its target resource name. The resource name comes from the source Google Cloud Platform service. */
    await gapi.client.datacatalog.entries.lookup({
      fullyQualifiedName: 'Test string',
      linkedResource: 'Test string',
      location: 'Test string',
      project: 'Test string',
      sqlResource: 'Test string',
    });
    /** Retrieves the configuration related to the migration from Data Catalog to Dataplex Universal Catalog for a specific organization, including all the projects under it which have a separate configuration set. */
    await gapi.client.datacatalog.organizations.locations.retrieveConfig({
      name: 'Test string',
    });
    /** Retrieves the effective configuration related to the migration from Data Catalog to Dataplex Universal Catalog for a specific organization or project. If there is no specific configuration set for the resource, the setting is checked hierarchicahlly through the ancestors of the resource, starting from the resource itself. */
    await gapi.client.datacatalog.organizations.locations.retrieveEffectiveConfig(
      {
        name: 'Test string',
      },
    );
    /** Sets the configuration related to the migration to Dataplex Universal Catalog for an organization or project. */
    await gapi.client.datacatalog.organizations.locations.setConfig(
      {
        name: 'Test string',
      },
      {
        catalogUiExperience: 'Test string',
        tagTemplateMigration: 'Test string',
      },
    );
    /** Retrieves the effective configuration related to the migration from Data Catalog to Dataplex Universal Catalog for a specific organization or project. If there is no specific configuration set for the resource, the setting is checked hierarchicahlly through the ancestors of the resource, starting from the resource itself. */
    await gapi.client.datacatalog.projects.locations.retrieveEffectiveConfig({
      name: 'Test string',
    });
    /** Sets the configuration related to the migration to Dataplex Universal Catalog for an organization or project. */
    await gapi.client.datacatalog.projects.locations.setConfig(
      {
        name: 'Test string',
      },
      {
        catalogUiExperience: 'Test string',
        tagTemplateMigration: 'Test string',
      },
    );
    /** Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can't contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.entryGroups.create(
      {
        entryGroupId: 'Test string',
        parent: 'Test string',
      },
      {
        dataCatalogTimestamps: {
          createTime: 'Test string',
          expireTime: 'Test string',
          updateTime: 'Test string',
        },
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        transferredToDataplex: true,
      },
    );
    /** Deletes an entry group. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.entryGroups.delete({
      force: true,
      name: 'Test string',
    });
    /** Gets an entry group. */
    await gapi.client.datacatalog.projects.locations.entryGroups.get({
      name: 'Test string',
      readMask: 'Test string',
    });
    /** Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups. */
    await gapi.client.datacatalog.projects.locations.entryGroups.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists entry groups. */
    await gapi.client.datacatalog.projects.locations.entryGroups.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an entry group. You must enable the Data Catalog API in the project identified by the `entry_group.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.entryGroups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        dataCatalogTimestamps: {
          createTime: 'Test string',
          expireTime: 'Test string',
          updateTime: 'Test string',
        },
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        transferredToDataplex: true,
      },
    );
    /** Sets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can't be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups. */
    await gapi.client.datacatalog.projects.locations.entryGroups.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      },
    );
    /** Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method. */
    await gapi.client.datacatalog.projects.locations.entryGroups.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.create(
      {
        entryId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDateShardedSpec: {
          dataset: 'Test string',
          latestShardResource: 'Test string',
          shardCount: 'Test string',
          tablePrefix: 'Test string',
        },
        bigqueryTableSpec: {
          tableSourceType: 'Test string',
          tableSpec: {
            groupedEntry: 'Test string',
          },
          viewSpec: {
            viewQuery: 'Test string',
          },
        },
        businessContext: {
          contacts: {
            people: [
              {
                designation: 'Test string',
                email: 'Test string',
              },
            ],
          },
          entryOverview: {
            overview: 'Test string',
          },
        },
        cloudBigtableSystemSpec: {
          instanceDisplayName: 'Test string',
        },
        databaseTableSpec: {
          databaseViewSpec: {
            baseTable: 'Test string',
            sqlQuery: 'Test string',
            viewType: 'Test string',
          },
          dataplexTable: {
            dataplexSpec: {
              asset: 'Test string',
              compressionFormat: 'Test string',
              dataFormat: {
                avro: {
                  text: 'Test string',
                },
                csv: {},
                orc: {},
                parquet: {},
                protobuf: {
                  text: 'Test string',
                },
                thrift: {
                  text: 'Test string',
                },
              },
              projectId: 'Test string',
            },
            externalTables: [
              {
                dataCatalogEntry: 'Test string',
                fullyQualifiedName: 'Test string',
                googleCloudResource: 'Test string',
                system: 'Test string',
              },
            ],
            userManaged: true,
          },
          type: 'Test string',
        },
        datasetSpec: {
          vertexDatasetSpec: {
            dataItemCount: 'Test string',
            dataType: 'Test string',
          },
        },
        dataSource: {
          resource: 'Test string',
          service: 'Test string',
          sourceEntry: 'Test string',
          storageProperties: {
            filePattern: ['Test string'],
            fileType: 'Test string',
          },
        },
        dataSourceConnectionSpec: {
          bigqueryConnectionSpec: {
            cloudSql: {
              database: 'Test string',
              instanceId: 'Test string',
              type: 'Test string',
            },
            connectionType: 'Test string',
            hasCredential: true,
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        featureOnlineStoreSpec: {
          storageType: 'Test string',
        },
        filesetSpec: {
          dataplexFileset: {
            dataplexSpec: {
              asset: 'Test string',
              compressionFormat: 'Test string',
              dataFormat: {
                avro: {
                  text: 'Test string',
                },
                csv: {},
                orc: {},
                parquet: {},
                protobuf: {
                  text: 'Test string',
                },
                thrift: {
                  text: 'Test string',
                },
              },
              projectId: 'Test string',
            },
          },
        },
        fullyQualifiedName: 'Test string',
        gcsFilesetSpec: {
          filePatterns: ['Test string'],
          sampleGcsFileSpecs: [
            {
              filePath: 'Test string',
              gcsTimestamps: {
                createTime: 'Test string',
                expireTime: 'Test string',
                updateTime: 'Test string',
              },
              sizeBytes: 'Test string',
            },
          ],
        },
        integratedSystem: 'Test string',
        labels: {
          A: 'Test string',
        },
        linkedResource: 'Test string',
        lookerSystemSpec: {
          parentInstanceDisplayName: 'Test string',
          parentInstanceId: 'Test string',
          parentModelDisplayName: 'Test string',
          parentModelId: 'Test string',
          parentViewDisplayName: 'Test string',
          parentViewId: 'Test string',
        },
        modelSpec: {
          vertexModelSpec: {
            containerImageUri: 'Test string',
            versionAliases: ['Test string'],
            versionDescription: 'Test string',
            versionId: 'Test string',
            vertexModelSourceInfo: {
              copy: true,
              sourceType: 'Test string',
            },
          },
        },
        name: 'Test string',
        personalDetails: {
          starred: true,
          starTime: 'Test string',
        },
        routineSpec: {
          bigqueryRoutineSpec: {
            importedLibraries: ['Test string'],
          },
          definitionBody: 'Test string',
          language: 'Test string',
          returnType: 'Test string',
          routineArguments: [
            {
              mode: 'Test string',
              name: 'Test string',
              type: 'Test string',
            },
          ],
          routineType: 'Test string',
        },
        schema: {
          columns: [
            {
              column: 'Test string',
              defaultValue: 'Test string',
              description: 'Test string',
              gcRule: 'Test string',
              highestIndexingType: 'Test string',
              lookerColumnSpec: {
                type: 'Test string',
              },
              mode: 'Test string',
              ordinalPosition: 42,
              rangeElementType: {
                type: 'Test string',
              },
              subcolumns: undefined,
              type: 'Test string',
            },
          ],
        },
        serviceSpec: {
          cloudBigtableInstanceSpec: {
            cloudBigtableClusterSpecs: [
              {
                displayName: 'Test string',
                linkedResource: 'Test string',
                location: 'Test string',
                type: 'Test string',
              },
            ],
          },
        },
        sourceSystemTimestamps: {
          createTime: 'Test string',
          expireTime: 'Test string',
          updateTime: 'Test string',
        },
        sqlDatabaseSystemSpec: {
          databaseVersion: 'Test string',
          instanceHost: 'Test string',
          sqlEngine: 'Test string',
        },
        type: 'Test string',
        usageSignal: {
          commonUsageWithinTimeRange: {
            A: {
              viewCount: 'Test string',
            },
          },
          favoriteCount: 'Test string',
          updateTime: 'Test string',
          usageWithinTimeRange: {
            A: {
              totalCancellations: 42,
              totalCompletions: 42,
              totalExecutionTimeForCompletionsMillis: 42,
              totalFailures: 42,
            },
          },
        },
        userSpecifiedSystem: 'Test string',
        userSpecifiedType: 'Test string',
      },
    );
    /** Deletes an existing entry. You can delete only the entries created by the CreateEntry method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets an entry. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Imports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. `ImportEntries` accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. `ImportEntries` returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.import(
      {
        parent: 'Test string',
      },
      {
        gcsBucketPath: 'Test string',
        jobId: 'Test string',
      },
    );
    /** Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** Modifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.modifyEntryContacts(
      {
        name: 'Test string',
      },
      {
        contacts: {
          people: [
            {
              designation: 'Test string',
              email: 'Test string',
            },
          ],
        },
      },
    );
    /** Modifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.modifyEntryOverview(
      {
        name: 'Test string',
      },
      {
        entryOverview: {
          overview: 'Test string',
        },
      },
    );
    /** Updates an existing entry. You must enable the Data Catalog API in the project identified by the `entry.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        bigqueryDateShardedSpec: {
          dataset: 'Test string',
          latestShardResource: 'Test string',
          shardCount: 'Test string',
          tablePrefix: 'Test string',
        },
        bigqueryTableSpec: {
          tableSourceType: 'Test string',
          tableSpec: {
            groupedEntry: 'Test string',
          },
          viewSpec: {
            viewQuery: 'Test string',
          },
        },
        businessContext: {
          contacts: {
            people: [
              {
                designation: 'Test string',
                email: 'Test string',
              },
            ],
          },
          entryOverview: {
            overview: 'Test string',
          },
        },
        cloudBigtableSystemSpec: {
          instanceDisplayName: 'Test string',
        },
        databaseTableSpec: {
          databaseViewSpec: {
            baseTable: 'Test string',
            sqlQuery: 'Test string',
            viewType: 'Test string',
          },
          dataplexTable: {
            dataplexSpec: {
              asset: 'Test string',
              compressionFormat: 'Test string',
              dataFormat: {
                avro: {
                  text: 'Test string',
                },
                csv: {},
                orc: {},
                parquet: {},
                protobuf: {
                  text: 'Test string',
                },
                thrift: {
                  text: 'Test string',
                },
              },
              projectId: 'Test string',
            },
            externalTables: [
              {
                dataCatalogEntry: 'Test string',
                fullyQualifiedName: 'Test string',
                googleCloudResource: 'Test string',
                system: 'Test string',
              },
            ],
            userManaged: true,
          },
          type: 'Test string',
        },
        datasetSpec: {
          vertexDatasetSpec: {
            dataItemCount: 'Test string',
            dataType: 'Test string',
          },
        },
        dataSource: {
          resource: 'Test string',
          service: 'Test string',
          sourceEntry: 'Test string',
          storageProperties: {
            filePattern: ['Test string'],
            fileType: 'Test string',
          },
        },
        dataSourceConnectionSpec: {
          bigqueryConnectionSpec: {
            cloudSql: {
              database: 'Test string',
              instanceId: 'Test string',
              type: 'Test string',
            },
            connectionType: 'Test string',
            hasCredential: true,
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        featureOnlineStoreSpec: {
          storageType: 'Test string',
        },
        filesetSpec: {
          dataplexFileset: {
            dataplexSpec: {
              asset: 'Test string',
              compressionFormat: 'Test string',
              dataFormat: {
                avro: {
                  text: 'Test string',
                },
                csv: {},
                orc: {},
                parquet: {},
                protobuf: {
                  text: 'Test string',
                },
                thrift: {
                  text: 'Test string',
                },
              },
              projectId: 'Test string',
            },
          },
        },
        fullyQualifiedName: 'Test string',
        gcsFilesetSpec: {
          filePatterns: ['Test string'],
          sampleGcsFileSpecs: [
            {
              filePath: 'Test string',
              gcsTimestamps: {
                createTime: 'Test string',
                expireTime: 'Test string',
                updateTime: 'Test string',
              },
              sizeBytes: 'Test string',
            },
          ],
        },
        integratedSystem: 'Test string',
        labels: {
          A: 'Test string',
        },
        linkedResource: 'Test string',
        lookerSystemSpec: {
          parentInstanceDisplayName: 'Test string',
          parentInstanceId: 'Test string',
          parentModelDisplayName: 'Test string',
          parentModelId: 'Test string',
          parentViewDisplayName: 'Test string',
          parentViewId: 'Test string',
        },
        modelSpec: {
          vertexModelSpec: {
            containerImageUri: 'Test string',
            versionAliases: ['Test string'],
            versionDescription: 'Test string',
            versionId: 'Test string',
            vertexModelSourceInfo: {
              copy: true,
              sourceType: 'Test string',
            },
          },
        },
        name: 'Test string',
        personalDetails: {
          starred: true,
          starTime: 'Test string',
        },
        routineSpec: {
          bigqueryRoutineSpec: {
            importedLibraries: ['Test string'],
          },
          definitionBody: 'Test string',
          language: 'Test string',
          returnType: 'Test string',
          routineArguments: [
            {
              mode: 'Test string',
              name: 'Test string',
              type: 'Test string',
            },
          ],
          routineType: 'Test string',
        },
        schema: {
          columns: [
            {
              column: 'Test string',
              defaultValue: 'Test string',
              description: 'Test string',
              gcRule: 'Test string',
              highestIndexingType: 'Test string',
              lookerColumnSpec: {
                type: 'Test string',
              },
              mode: 'Test string',
              ordinalPosition: 42,
              rangeElementType: {
                type: 'Test string',
              },
              subcolumns: undefined,
              type: 'Test string',
            },
          ],
        },
        serviceSpec: {
          cloudBigtableInstanceSpec: {
            cloudBigtableClusterSpecs: [
              {
                displayName: 'Test string',
                linkedResource: 'Test string',
                location: 'Test string',
                type: 'Test string',
              },
            ],
          },
        },
        sourceSystemTimestamps: {
          createTime: 'Test string',
          expireTime: 'Test string',
          updateTime: 'Test string',
        },
        sqlDatabaseSystemSpec: {
          databaseVersion: 'Test string',
          instanceHost: 'Test string',
          sqlEngine: 'Test string',
        },
        type: 'Test string',
        usageSignal: {
          commonUsageWithinTimeRange: {
            A: {
              viewCount: 'Test string',
            },
          },
          favoriteCount: 'Test string',
          updateTime: 'Test string',
          usageWithinTimeRange: {
            A: {
              totalCancellations: 42,
              totalCompletions: 42,
              totalExecutionTimeForCompletionsMillis: 42,
              totalFailures: 42,
            },
          },
        },
        userSpecifiedSystem: 'Test string',
        userSpecifiedType: 'Test string',
      },
    );
    /** Marks an Entry as starred by the current user. Starring information is private to each user. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.star(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Marks an Entry as NOT starred by the current user. Starring information is private to each user. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.unstar(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.create(
      {
        parent: 'Test string',
      },
      {
        column: 'Test string',
        dataplexTransferStatus: 'Test string',
        fields: {
          A: {
            boolValue: true,
            displayName: 'Test string',
            doubleValue: 42,
            enumValue: {
              displayName: 'Test string',
            },
            order: 42,
            richtextValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        template: 'Test string',
        templateDisplayName: 'Test string',
      },
    );
    /** Deletes a tag. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.delete(
      {
        name: 'Test string',
      },
    );
    /** Lists tags assigned to an Entry. The columns in the response are lowercased. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates an existing tag. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        column: 'Test string',
        dataplexTransferStatus: 'Test string',
        fields: {
          A: {
            boolValue: true,
            displayName: 'Test string',
            doubleValue: 42,
            enumValue: {
              displayName: 'Test string',
            },
            order: 42,
            richtextValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        template: 'Test string',
        templateDisplayName: 'Test string',
      },
    );
    /** `ReconcileTags` creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. `ReconcileTags` returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message. Note: SearchCatalog might return stale search results for up to 24 hours after the `ReconcileTags` operation completes. */
    await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.reconcile(
      {
        parent: 'Test string',
      },
      {
        forceDeleteMissing: true,
        tags: [
          {
            column: 'Test string',
            dataplexTransferStatus: 'Test string',
            fields: {
              A: {
                boolValue: true,
                displayName: 'Test string',
                doubleValue: 42,
                enumValue: {
                  displayName: 'Test string',
                },
                order: 42,
                richtextValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
            name: 'Test string',
            template: 'Test string',
            templateDisplayName: 'Test string',
          },
        ],
        tagTemplate: 'Test string',
      },
    );
    /** Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization. */
    await gapi.client.datacatalog.projects.locations.entryGroups.tags.create(
      {
        parent: 'Test string',
      },
      {
        column: 'Test string',
        dataplexTransferStatus: 'Test string',
        fields: {
          A: {
            boolValue: true,
            displayName: 'Test string',
            doubleValue: 42,
            enumValue: {
              displayName: 'Test string',
            },
            order: 42,
            richtextValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        template: 'Test string',
        templateDisplayName: 'Test string',
      },
    );
    /** Deletes a tag. */
    await gapi.client.datacatalog.projects.locations.entryGroups.tags.delete({
      name: 'Test string',
    });
    /** Lists tags assigned to an Entry. The columns in the response are lowercased. */
    await gapi.client.datacatalog.projects.locations.entryGroups.tags.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing tag. */
    await gapi.client.datacatalog.projects.locations.entryGroups.tags.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        column: 'Test string',
        dataplexTransferStatus: 'Test string',
        fields: {
          A: {
            boolValue: true,
            displayName: 'Test string',
            doubleValue: 42,
            enumValue: {
              displayName: 'Test string',
            },
            order: 42,
            richtextValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        template: 'Test string',
        templateDisplayName: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.datacatalog.projects.locations.operations.cancel({
      name: 'Test string',
    });
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.datacatalog.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.datacatalog.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.datacatalog.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.create(
      {
        parent: 'Test string',
        tagTemplateId: 'Test string',
      },
      {
        dataplexTransferStatus: 'Test string',
        displayName: 'Test string',
        fields: {
          A: {
            description: 'Test string',
            displayName: 'Test string',
            isRequired: true,
            name: 'Test string',
            order: 42,
            type: {
              enumType: {
                allowedValues: [
                  {
                    displayName: 'Test string',
                  },
                ],
              },
              primitiveType: 'Test string',
            },
          },
        },
        isPubliclyReadable: true,
        name: 'Test string',
      },
    );
    /** Deletes a tag template and all tags that use it. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.delete({
      force: true,
      name: 'Test string',
    });
    /** Gets a tag template. */
    await gapi.client.datacatalog.projects.locations.tagTemplates.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn't exist or you don't have the permission to view it. * An empty policy if the resource exists but doesn't have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn't get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups. */
    await gapi.client.datacatalog.projects.locations.tagTemplates.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Updates a tag template. You can't update template fields with this method. These fields are separate resources with their own create, update, and delete methods. You must enable the Data Catalog API in the project identified by the `tag_template.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        dataplexTransferStatus: 'Test string',
        displayName: 'Test string',
        fields: {
          A: {
            description: 'Test string',
            displayName: 'Test string',
            isRequired: true,
            name: 'Test string',
            order: 42,
            type: {
              enumType: {
                allowedValues: [
                  {
                    displayName: 'Test string',
                  },
                ],
              },
              primitiveType: 'Test string',
            },
          },
        },
        isPubliclyReadable: true,
        name: 'Test string',
      },
    );
    /** Sets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can't be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups. */
    await gapi.client.datacatalog.projects.locations.tagTemplates.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      },
    );
    /** Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn't exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can't be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method. */
    await gapi.client.datacatalog.projects.locations.tagTemplates.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.fields.create(
      {
        parent: 'Test string',
        tagTemplateFieldId: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        isRequired: true,
        name: 'Test string',
        order: 42,
        type: {
          enumType: {
            allowedValues: [
              {
                displayName: 'Test string',
              },
            ],
          },
          primitiveType: 'Test string',
        },
      },
    );
    /** Deletes a field in a tag template and all uses of this field from the tags based on this template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.fields.delete(
      {
        force: true,
        name: 'Test string',
      },
    );
    /** Updates a field in a tag template. You can't update the field type with this method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.fields.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        isRequired: true,
        name: 'Test string',
        order: 42,
        type: {
          enumType: {
            allowedValues: [
              {
                displayName: 'Test string',
              },
            ],
          },
          primitiveType: 'Test string',
        },
      },
    );
    /** Renames a field in a tag template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project). */
    await gapi.client.datacatalog.projects.locations.tagTemplates.fields.rename(
      {
        name: 'Test string',
      },
      {
        newTagTemplateFieldId: 'Test string',
      },
    );
    /** Renames an enum value in a tag template. Within a single enum field, enum values must be unique. */
    await gapi.client.datacatalog.projects.locations.tagTemplates.fields.enumValues.rename(
      {
        name: 'Test string',
      },
      {
        newEnumValueDisplayName: 'Test string',
      },
    );
    /** Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags. */
    await gapi.client.datacatalog.projects.locations.taxonomies.create(
      {
        parent: 'Test string',
      },
      {
        activatedPolicyTypes: ['Test string'],
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        policyTagCount: 42,
        service: {
          identity: 'Test string',
          name: 'Test string',
        },
        taxonomyTimestamps: {
          createTime: 'Test string',
          expireTime: 'Test string',
          updateTime: 'Test string',
        },
      },
    );
    /** Deletes a taxonomy, including all policy tags in this taxonomy, their associated policies, and the policy tags references from BigQuery columns. */
    await gapi.client.datacatalog.projects.locations.taxonomies.delete({
      name: 'Test string',
    });
    /** Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls. */
    await gapi.client.datacatalog.projects.locations.taxonomies.export({
      parent: 'Test string',
      serializedTaxonomies: true,
      taxonomies: 'Test string',
    });
    /** Gets a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.get({
      name: 'Test string',
    });
    /** Gets the IAM policy for a policy tag or a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures. */
    await gapi.client.datacatalog.projects.locations.taxonomies.import(
      {
        parent: 'Test string',
      },
      {
        crossRegionalSource: {
          taxonomy: 'Test string',
        },
        inlineSource: {
          taxonomies: [
            {
              activatedPolicyTypes: ['Test string'],
              description: 'Test string',
              displayName: 'Test string',
              policyTags: [
                {
                  childPolicyTags: undefined,
                  description: 'Test string',
                  displayName: 'Test string',
                  policyTag: 'Test string',
                },
              ],
            },
          ],
        },
      },
    );
    /** Lists all taxonomies in a project in a particular location that you have a permission to view. */
    await gapi.client.datacatalog.projects.locations.taxonomies.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a taxonomy, including its display name, description, and activated policy types. */
    await gapi.client.datacatalog.projects.locations.taxonomies.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activatedPolicyTypes: ['Test string'],
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        policyTagCount: 42,
        service: {
          identity: 'Test string',
          name: 'Test string',
        },
        taxonomyTimestamps: {
          createTime: 'Test string',
          expireTime: 'Test string',
          updateTime: 'Test string',
        },
      },
    );
    /** Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly. */
    await gapi.client.datacatalog.projects.locations.taxonomies.replace(
      {
        name: 'Test string',
      },
      {
        serializedTaxonomy: {
          activatedPolicyTypes: ['Test string'],
          description: 'Test string',
          displayName: 'Test string',
          policyTags: [
            {
              childPolicyTags: undefined,
              description: 'Test string',
              displayName: 'Test string',
              policyTag: 'Test string',
            },
          ],
        },
      },
    );
    /** Sets the IAM policy for a policy tag or a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      },
    );
    /** Returns your permissions on a specified policy tag or taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a policy tag in a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.create(
      {
        parent: 'Test string',
      },
      {
        childPolicyTags: ['Test string'],
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        parentPolicyTag: 'Test string',
      },
    );
    /** Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a policy tag. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.get({
      name: 'Test string',
    });
    /** Gets the IAM policy for a policy tag or a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists all policy tags in a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a policy tag, including its display name, description, and parent policy tag. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        childPolicyTags: ['Test string'],
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        parentPolicyTag: 'Test string',
      },
    );
    /** Sets the IAM policy for a policy tag or a taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      },
    );
    /** Returns your permissions on a specified policy tag or taxonomy. */
    await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
  }
});
