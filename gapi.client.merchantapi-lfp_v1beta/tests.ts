/* This is stub file for gapi.client.merchantapi-lfp_v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250710

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://merchantapi.googleapis.com/$discovery/rest?version=lfp_v1beta',
  );
  /** now we can use gapi.client.merchantapi */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Inserts a `LfpInventory` resource for the given target merchant account. If the resource already exists, it will be replaced. The inventory automatically expires after 30 days. */
    await gapi.client.merchantapi.accounts.lfpInventories.insert(
      {
        parent: 'Test string',
      },
      {
        availability: 'Test string',
        collectionTime: 'Test string',
        contentLanguage: 'Test string',
        feedLabel: 'Test string',
        gtin: 'Test string',
        name: 'Test string',
        offerId: 'Test string',
        pickupMethod: 'Test string',
        pickupSla: 'Test string',
        price: {
          amountMicros: 'Test string',
          currencyCode: 'Test string',
        },
        quantity: 'Test string',
        regionCode: 'Test string',
        storeCode: 'Test string',
        targetAccount: 'Test string',
      },
    );
    /** Gets the LFP state of a merchant */
    await gapi.client.merchantapi.accounts.lfpMerchantStates.get({
      name: 'Test string',
    });
    /** Inserts a `LfpSale` for the given merchant. */
    await gapi.client.merchantapi.accounts.lfpSales.insert(
      {
        parent: 'Test string',
      },
      {
        contentLanguage: 'Test string',
        feedLabel: 'Test string',
        gtin: 'Test string',
        name: 'Test string',
        offerId: 'Test string',
        price: {
          amountMicros: 'Test string',
          currencyCode: 'Test string',
        },
        quantity: 'Test string',
        regionCode: 'Test string',
        saleTime: 'Test string',
        storeCode: 'Test string',
        targetAccount: 'Test string',
        uid: 'Test string',
      },
    );
    /** Deletes a store for a target merchant. */
    await gapi.client.merchantapi.accounts.lfpStores.delete({
      name: 'Test string',
    });
    /** Retrieves information about a store. */
    await gapi.client.merchantapi.accounts.lfpStores.get({
      name: 'Test string',
    });
    /** Inserts a store for the target merchant. If the store with the same store code already exists, it will be replaced. */
    await gapi.client.merchantapi.accounts.lfpStores.insert(
      {
        parent: 'Test string',
      },
      {
        gcidCategory: ['Test string'],
        matchingState: 'Test string',
        matchingStateHint: 'Test string',
        name: 'Test string',
        phoneNumber: 'Test string',
        placeId: 'Test string',
        storeAddress: 'Test string',
        storeCode: 'Test string',
        storeName: 'Test string',
        targetAccount: 'Test string',
        websiteUri: 'Test string',
      },
    );
    /** Lists the stores of the target merchant, specified by the filter in `ListLfpStoresRequest`. */
    await gapi.client.merchantapi.accounts.lfpStores.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      targetAccount: 'Test string',
    });
  }
});
