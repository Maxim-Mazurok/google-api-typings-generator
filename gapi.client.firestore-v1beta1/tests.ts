/* This is stub file for gapi.client.firestore-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250226

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://firestore.googleapis.com/$discovery/rest?version=v1beta1',
  );
  /** now we can use gapi.client.firestore */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and manage your Google Cloud Datastore data */
    'https://www.googleapis.com/auth/datastore',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. */
    await gapi.client.firestore.projects.databases.exportDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        outputUriPrefix: 'Test string',
      },
    );
    /** Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore. */
    await gapi.client.firestore.projects.databases.importDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        inputUriPrefix: 'Test string',
      },
    );
    /** Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested. */
    await gapi.client.firestore.projects.databases.documents.batchGet(
      {
        database: 'Test string',
      },
      {
        documents: ['Test string'],
        mask: {
          fieldPaths: ['Test string'],
        },
        newTransaction: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
        readTime: 'Test string',
        transaction: 'Test string',
      },
    );
    /** Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead. */
    await gapi.client.firestore.projects.databases.documents.batchWrite(
      {
        database: 'Test string',
      },
      {
        labels: {
          A: 'Test string',
        },
        writes: [
          {
            currentDocument: {
              exists: true,
              updateTime: 'Test string',
            },
            delete: 'Test string',
            transform: {
              document: 'Test string',
              fieldTransforms: [
                {
                  appendMissingElements: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  fieldPath: 'Test string',
                  increment: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  maximum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  minimum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  removeAllFromArray: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  setToServerValue: 'Test string',
                },
              ],
            },
            update: {
              createTime: 'Test string',
              fields: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              name: 'Test string',
              updateTime: 'Test string',
            },
            updateMask: {
              fieldPaths: ['Test string'],
            },
            updateTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                fieldPath: 'Test string',
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Starts a new transaction. */
    await gapi.client.firestore.projects.databases.documents.beginTransaction(
      {
        database: 'Test string',
      },
      {
        options: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
      },
    );
    /** Commits a transaction, while optionally updating documents. */
    await gapi.client.firestore.projects.databases.documents.commit(
      {
        database: 'Test string',
      },
      {
        transaction: 'Test string',
        writes: [
          {
            currentDocument: {
              exists: true,
              updateTime: 'Test string',
            },
            delete: 'Test string',
            transform: {
              document: 'Test string',
              fieldTransforms: [
                {
                  appendMissingElements: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  fieldPath: 'Test string',
                  increment: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  maximum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  minimum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  removeAllFromArray: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  setToServerValue: 'Test string',
                },
              ],
            },
            update: {
              createTime: 'Test string',
              fields: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              name: 'Test string',
              updateTime: 'Test string',
            },
            updateMask: {
              fieldPaths: ['Test string'],
            },
            updateTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                fieldPath: 'Test string',
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Creates a new document. */
    await gapi.client.firestore.projects.databases.documents.createDocument(
      {
        collectionId: 'Test string',
        documentId: 'Test string',
        'mask.fieldPaths': 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        fields: {
          A: {
            arrayValue: {
              values: undefined,
            },
            booleanValue: true,
            bytesValue: 'Test string',
            doubleValue: 42,
            geoPointValue: {
              latitude: 42,
              longitude: 42,
            },
            integerValue: 'Test string',
            mapValue: {
              fields: undefined,
            },
            nullValue: 'Test string',
            referenceValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a document. */
    await gapi.client.firestore.projects.databases.documents.delete({
      'currentDocument.exists': true,
      'currentDocument.updateTime': 'Test string',
      name: 'Test string',
    });
    /** Gets a single document. */
    await gapi.client.firestore.projects.databases.documents.get({
      'mask.fieldPaths': 'Test string',
      name: 'Test string',
      readTime: 'Test string',
      transaction: 'Test string',
    });
    /** Lists documents. */
    await gapi.client.firestore.projects.databases.documents.list({
      collectionId: 'Test string',
      'mask.fieldPaths': 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
      showMissing: true,
      transaction: 'Test string',
    });
    /** Lists all the collection IDs underneath a document. */
    await gapi.client.firestore.projects.databases.documents.listCollectionIds(
      {
        parent: 'Test string',
      },
      {
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      },
    );
    /** Lists documents. */
    await gapi.client.firestore.projects.databases.documents.listDocuments({
      collectionId: 'Test string',
      'mask.fieldPaths': 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
      showMissing: true,
      transaction: 'Test string',
    });
    /** Listens to changes. This method is only available via gRPC or WebChannel (not REST). */
    await gapi.client.firestore.projects.databases.documents.listen(
      {
        database: 'Test string',
      },
      {
        addTarget: {
          documents: {
            documents: ['Test string'],
          },
          expectedCount: 42,
          once: true,
          query: {
            parent: 'Test string',
            structuredQuery: {
              endAt: {
                before: true,
                values: [
                  {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                ],
              },
              findNearest: {
                distanceMeasure: 'Test string',
                distanceResultField: 'Test string',
                distanceThreshold: 42,
                limit: 42,
                queryVector: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                vectorField: {
                  fieldPath: 'Test string',
                },
              },
              from: [
                {
                  allDescendants: true,
                  collectionId: 'Test string',
                },
              ],
              limit: 42,
              offset: 42,
              orderBy: [
                {
                  direction: 'Test string',
                  field: {
                    fieldPath: 'Test string',
                  },
                },
              ],
              select: {
                fields: [
                  {
                    fieldPath: 'Test string',
                  },
                ],
              },
              startAt: {
                before: true,
                values: [
                  {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                ],
              },
              where: {
                compositeFilter: {
                  filters: undefined,
                  op: 'Test string',
                },
                fieldFilter: {
                  field: {
                    fieldPath: 'Test string',
                  },
                  op: 'Test string',
                  value: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                },
                unaryFilter: {
                  field: {
                    fieldPath: 'Test string',
                  },
                  op: 'Test string',
                },
              },
            },
          },
          readTime: 'Test string',
          resumeToken: 'Test string',
          targetId: 42,
        },
        labels: {
          A: 'Test string',
        },
        removeTarget: 42,
      },
    );
    /** Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results. */
    await gapi.client.firestore.projects.databases.documents.partitionQuery(
      {
        parent: 'Test string',
      },
      {
        pageSize: 42,
        pageToken: 'Test string',
        partitionCount: 'Test string',
        readTime: 'Test string',
        structuredQuery: {
          endAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          findNearest: {
            distanceMeasure: 'Test string',
            distanceResultField: 'Test string',
            distanceThreshold: 42,
            limit: 42,
            queryVector: {
              arrayValue: {
                values: undefined,
              },
              booleanValue: true,
              bytesValue: 'Test string',
              doubleValue: 42,
              geoPointValue: {
                latitude: 42,
                longitude: 42,
              },
              integerValue: 'Test string',
              mapValue: {
                fields: undefined,
              },
              nullValue: 'Test string',
              referenceValue: 'Test string',
              stringValue: 'Test string',
              timestampValue: 'Test string',
            },
            vectorField: {
              fieldPath: 'Test string',
            },
          },
          from: [
            {
              allDescendants: true,
              collectionId: 'Test string',
            },
          ],
          limit: 42,
          offset: 42,
          orderBy: [
            {
              direction: 'Test string',
              field: {
                fieldPath: 'Test string',
              },
            },
          ],
          select: {
            fields: [
              {
                fieldPath: 'Test string',
              },
            ],
          },
          startAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          where: {
            compositeFilter: {
              filters: undefined,
              op: 'Test string',
            },
            fieldFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
            unaryFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
            },
          },
        },
      },
    );
    /** Updates or inserts a document. */
    await gapi.client.firestore.projects.databases.documents.patch(
      {
        'currentDocument.exists': true,
        'currentDocument.updateTime': 'Test string',
        'mask.fieldPaths': 'Test string',
        name: 'Test string',
        'updateMask.fieldPaths': 'Test string',
      },
      {
        createTime: 'Test string',
        fields: {
          A: {
            arrayValue: {
              values: undefined,
            },
            booleanValue: true,
            bytesValue: 'Test string',
            doubleValue: 42,
            geoPointValue: {
              latitude: 42,
              longitude: 42,
            },
            integerValue: 'Test string',
            mapValue: {
              fields: undefined,
            },
            nullValue: 'Test string',
            referenceValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Rolls back a transaction. */
    await gapi.client.firestore.projects.databases.documents.rollback(
      {
        database: 'Test string',
      },
      {
        transaction: 'Test string',
      },
    );
    /** Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ``` */
    await gapi.client.firestore.projects.databases.documents.runAggregationQuery(
      {
        parent: 'Test string',
      },
      {
        explainOptions: {
          analyze: true,
        },
        newTransaction: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
        readTime: 'Test string',
        structuredAggregationQuery: {
          aggregations: [
            {
              alias: 'Test string',
              avg: {
                field: {
                  fieldPath: 'Test string',
                },
              },
              count: {
                upTo: 'Test string',
              },
              sum: {
                field: {
                  fieldPath: 'Test string',
                },
              },
            },
          ],
          structuredQuery: {
            endAt: {
              before: true,
              values: [
                {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              ],
            },
            findNearest: {
              distanceMeasure: 'Test string',
              distanceResultField: 'Test string',
              distanceThreshold: 42,
              limit: 42,
              queryVector: {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
              vectorField: {
                fieldPath: 'Test string',
              },
            },
            from: [
              {
                allDescendants: true,
                collectionId: 'Test string',
              },
            ],
            limit: 42,
            offset: 42,
            orderBy: [
              {
                direction: 'Test string',
                field: {
                  fieldPath: 'Test string',
                },
              },
            ],
            select: {
              fields: [
                {
                  fieldPath: 'Test string',
                },
              ],
            },
            startAt: {
              before: true,
              values: [
                {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              ],
            },
            where: {
              compositeFilter: {
                filters: undefined,
                op: 'Test string',
              },
              fieldFilter: {
                field: {
                  fieldPath: 'Test string',
                },
                op: 'Test string',
                value: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              unaryFilter: {
                field: {
                  fieldPath: 'Test string',
                },
                op: 'Test string',
              },
            },
          },
        },
        transaction: 'Test string',
      },
    );
    /** Runs a query. */
    await gapi.client.firestore.projects.databases.documents.runQuery(
      {
        parent: 'Test string',
      },
      {
        explainOptions: {
          analyze: true,
        },
        newTransaction: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
        readTime: 'Test string',
        structuredQuery: {
          endAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          findNearest: {
            distanceMeasure: 'Test string',
            distanceResultField: 'Test string',
            distanceThreshold: 42,
            limit: 42,
            queryVector: {
              arrayValue: {
                values: undefined,
              },
              booleanValue: true,
              bytesValue: 'Test string',
              doubleValue: 42,
              geoPointValue: {
                latitude: 42,
                longitude: 42,
              },
              integerValue: 'Test string',
              mapValue: {
                fields: undefined,
              },
              nullValue: 'Test string',
              referenceValue: 'Test string',
              stringValue: 'Test string',
              timestampValue: 'Test string',
            },
            vectorField: {
              fieldPath: 'Test string',
            },
          },
          from: [
            {
              allDescendants: true,
              collectionId: 'Test string',
            },
          ],
          limit: 42,
          offset: 42,
          orderBy: [
            {
              direction: 'Test string',
              field: {
                fieldPath: 'Test string',
              },
            },
          ],
          select: {
            fields: [
              {
                fieldPath: 'Test string',
              },
            ],
          },
          startAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          where: {
            compositeFilter: {
              filters: undefined,
              op: 'Test string',
            },
            fieldFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
            unaryFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
            },
          },
        },
        transaction: 'Test string',
      },
    );
    /** Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST). */
    await gapi.client.firestore.projects.databases.documents.write(
      {
        database: 'Test string',
      },
      {
        labels: {
          A: 'Test string',
        },
        streamId: 'Test string',
        streamToken: 'Test string',
        writes: [
          {
            currentDocument: {
              exists: true,
              updateTime: 'Test string',
            },
            delete: 'Test string',
            transform: {
              document: 'Test string',
              fieldTransforms: [
                {
                  appendMissingElements: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  fieldPath: 'Test string',
                  increment: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  maximum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  minimum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  removeAllFromArray: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  setToServerValue: 'Test string',
                },
              ],
            },
            update: {
              createTime: 'Test string',
              fields: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              name: 'Test string',
              updateTime: 'Test string',
            },
            updateMask: {
              fieldPaths: ['Test string'],
            },
            updateTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                fieldPath: 'Test string',
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single field cannot be created. */
    await gapi.client.firestore.projects.databases.indexes.create(
      {
        parent: 'Test string',
      },
      {
        collectionId: 'Test string',
        fields: [
          {
            fieldPath: 'Test string',
            mode: 'Test string',
          },
        ],
        name: 'Test string',
        state: 'Test string',
      },
    );
    /** Deletes an index. */
    await gapi.client.firestore.projects.databases.indexes.delete({
      name: 'Test string',
    });
    /** Gets an index. */
    await gapi.client.firestore.projects.databases.indexes.get({
      name: 'Test string',
    });
    /** Lists the indexes that match the specified filters. */
    await gapi.client.firestore.projects.databases.indexes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
