/* This is stub file for gapi.client.lifesciences-v2beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230915

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://lifesciences.googleapis.com/$discovery/rest?version=v2beta');
    /** now we can use gapi.client.lifesciences */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.lifesciences.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.lifesciences.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use
         * Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following
         * [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.cancel`
         */
        await gapi.client.lifesciences.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Authorization requires the
         * following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.get`
         */
        await gapi.client.lifesciences.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: *
         * `lifesciences.operations.list`
         */
        await gapi.client.lifesciences.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Runs a pipeline. The returned Operation's metadata field will contain a google.cloud.lifesciences.v2beta.Metadata object describing the status of the pipeline execution. The response
         * field will contain a google.cloud.lifesciences.v2beta.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the *Life Sciences
         * Service Agent* must have access to your project. This is done automatically when the Cloud Life Sciences API is first enabled, but if you delete this permission you must disable and
         * re-enable the API to grant the Life Sciences Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: *
         * `lifesciences.workflows.run`
         */
        await gapi.client.lifesciences.projects.locations.pipelines.run({
            parent: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
            pipeline: {
                actions: [
                    {
                        alwaysRun: true,
                        blockExternalNetwork: true,
                        commands: [
                            "Test string"
                        ],
                        containerName: "Test string",
                        credentials: {
                            cipherText: "Test string",
                            keyName: "Test string",
                        },
                        disableImagePrefetch: true,
                        disableStandardErrorCapture: true,
                        enableFuse: true,
                        encryptedEnvironment: {
                            cipherText: "Test string",
                            keyName: "Test string",
                        },
                        entrypoint: "Test string",
                        environment: {
                            A: "Test string"
                        },
                        ignoreExitStatus: true,
                        imageUri: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        mounts: [
                            {
                                disk: "Test string",
                                path: "Test string",
                                readOnly: true,
                            }
                        ],
                        pidNamespace: "Test string",
                        portMappings: {
                            A: 42
                        },
                        publishExposedPorts: true,
                        runInBackground: true,
                        timeout: "Test string",
                    }
                ],
                encryptedEnvironment: {
                    cipherText: "Test string",
                    keyName: "Test string",
                },
                environment: {
                    A: "Test string"
                },
                resources: {
                    regions: [
                        "Test string"
                    ],
                    virtualMachine: {
                        accelerators: [
                            {
                                count: "Test string",
                                type: "Test string",
                            }
                        ],
                        bootDiskSizeGb: 42,
                        bootImage: "Test string",
                        cpuPlatform: "Test string",
                        disks: [
                            {
                                name: "Test string",
                                sizeGb: 42,
                                sourceImage: "Test string",
                                type: "Test string",
                            }
                        ],
                        dockerCacheImages: [
                            "Test string"
                        ],
                        enableStackdriverMonitoring: true,
                        labels: {
                            A: "Test string"
                        },
                        machineType: "Test string",
                        network: {
                            network: "Test string",
                            subnetwork: "Test string",
                            usePrivateAddress: true,
                        },
                        nvidiaDriverVersion: "Test string",
                        preemptible: true,
                        reservation: "Test string",
                        serviceAccount: {
                            email: "Test string",
                            scopes: [
                                "Test string"
                            ],
                        },
                        volumes: [
                            {
                                existingDisk: {
                                    disk: "Test string",
                                },
                                nfsMount: {
                                    target: "Test string",
                                },
                                persistentDisk: {
                                    sizeGb: 42,
                                    sourceImage: "Test string",
                                    type: "Test string",
                                },
                                volume: "Test string",
                            }
                        ],
                    },
                    zones: [
                        "Test string"
                    ],
                },
                timeout: "Test string",
            },
            pubSubTopic: "Test string",
        });
    }
});
