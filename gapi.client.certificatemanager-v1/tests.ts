/* This is stub file for gapi.client.certificatemanager-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230927

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://certificatemanager.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.certificatemanager */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.certificatemanager.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.certificatemanager.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new CertificateIssuanceConfig in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificateIssuanceConfigs.create({
            certificateIssuanceConfigId: "Test string",
            parent: "Test string",
        }, {
            certificateAuthorityConfig: {
                certificateAuthorityServiceConfig: {
                    caPool: "Test string",
                },
            },
            createTime: "Test string",
            description: "Test string",
            keyAlgorithm: "Test string",
            labels: {
                A: "Test string"
            },
            lifetime: "Test string",
            name: "Test string",
            rotationWindowPercentage: 42,
            updateTime: "Test string",
        });
        /** Deletes a single CertificateIssuanceConfig. */
        await gapi.client.certificatemanager.projects.locations.certificateIssuanceConfigs.delete({
            name: "Test string",
        });
        /** Gets details of a single CertificateIssuanceConfig. */
        await gapi.client.certificatemanager.projects.locations.certificateIssuanceConfigs.get({
            name: "Test string",
        });
        /** Lists CertificateIssuanceConfigs in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificateIssuanceConfigs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a new CertificateMap in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.create({
            certificateMapId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gclbTargets: [
                {
                    ipConfigs: [
                        {
                            ipAddress: "Test string",
                            ports: [
                                42
                            ],
                        }
                    ],
                    targetHttpsProxy: "Test string",
                    targetSslProxy: "Test string",
                }
            ],
            labels: {
                A: "Test string"
            },
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single CertificateMap. A Certificate Map can't be deleted if it contains Certificate Map Entries. Remove all the entries from the map before calling this method. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.delete({
            name: "Test string",
        });
        /** Gets details of a single CertificateMap. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.get({
            name: "Test string",
        });
        /** Lists CertificateMaps in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a CertificateMap. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gclbTargets: [
                {
                    ipConfigs: [
                        {
                            ipAddress: "Test string",
                            ports: [
                                42
                            ],
                        }
                    ],
                    targetHttpsProxy: "Test string",
                    targetSslProxy: "Test string",
                }
            ],
            labels: {
                A: "Test string"
            },
            name: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new CertificateMapEntry in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.certificateMapEntries.create({
            certificateMapEntryId: "Test string",
            parent: "Test string",
        }, {
            certificates: [
                "Test string"
            ],
            createTime: "Test string",
            description: "Test string",
            hostname: "Test string",
            labels: {
                A: "Test string"
            },
            matcher: "Test string",
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single CertificateMapEntry. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.certificateMapEntries.delete({
            name: "Test string",
        });
        /** Gets details of a single CertificateMapEntry. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.certificateMapEntries.get({
            name: "Test string",
        });
        /** Lists CertificateMapEntries in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.certificateMapEntries.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a CertificateMapEntry. */
        await gapi.client.certificatemanager.projects.locations.certificateMaps.certificateMapEntries.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            certificates: [
                "Test string"
            ],
            createTime: "Test string",
            description: "Test string",
            hostname: "Test string",
            labels: {
                A: "Test string"
            },
            matcher: "Test string",
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new Certificate in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificates.create({
            certificateId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            expireTime: "Test string",
            labels: {
                A: "Test string"
            },
            managed: {
                authorizationAttemptInfo: [
                    {
                        details: "Test string",
                        domain: "Test string",
                        failureReason: "Test string",
                        state: "Test string",
                    }
                ],
                dnsAuthorizations: [
                    "Test string"
                ],
                domains: [
                    "Test string"
                ],
                issuanceConfig: "Test string",
                provisioningIssue: {
                    details: "Test string",
                    reason: "Test string",
                },
                state: "Test string",
            },
            name: "Test string",
            pemCertificate: "Test string",
            sanDnsnames: [
                "Test string"
            ],
            scope: "Test string",
            selfManaged: {
                pemCertificate: "Test string",
                pemPrivateKey: "Test string",
            },
            updateTime: "Test string",
        });
        /** Deletes a single Certificate. */
        await gapi.client.certificatemanager.projects.locations.certificates.delete({
            name: "Test string",
        });
        /** Gets details of a single Certificate. */
        await gapi.client.certificatemanager.projects.locations.certificates.get({
            name: "Test string",
        });
        /** Lists Certificates in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.certificates.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a Certificate. */
        await gapi.client.certificatemanager.projects.locations.certificates.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            expireTime: "Test string",
            labels: {
                A: "Test string"
            },
            managed: {
                authorizationAttemptInfo: [
                    {
                        details: "Test string",
                        domain: "Test string",
                        failureReason: "Test string",
                        state: "Test string",
                    }
                ],
                dnsAuthorizations: [
                    "Test string"
                ],
                domains: [
                    "Test string"
                ],
                issuanceConfig: "Test string",
                provisioningIssue: {
                    details: "Test string",
                    reason: "Test string",
                },
                state: "Test string",
            },
            name: "Test string",
            pemCertificate: "Test string",
            sanDnsnames: [
                "Test string"
            ],
            scope: "Test string",
            selfManaged: {
                pemCertificate: "Test string",
                pemPrivateKey: "Test string",
            },
            updateTime: "Test string",
        });
        /** Creates a new DnsAuthorization in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.dnsAuthorizations.create({
            dnsAuthorizationId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            dnsResourceRecord: {
                data: "Test string",
                name: "Test string",
                type: "Test string",
            },
            domain: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single DnsAuthorization. */
        await gapi.client.certificatemanager.projects.locations.dnsAuthorizations.delete({
            name: "Test string",
        });
        /** Gets details of a single DnsAuthorization. */
        await gapi.client.certificatemanager.projects.locations.dnsAuthorizations.get({
            name: "Test string",
        });
        /** Lists DnsAuthorizations in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.dnsAuthorizations.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a DnsAuthorization. */
        await gapi.client.certificatemanager.projects.locations.dnsAuthorizations.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            dnsResourceRecord: {
                data: "Test string",
                name: "Test string",
                type: "Test string",
            },
            domain: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.certificatemanager.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.certificatemanager.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.certificatemanager.projects.locations.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.certificatemanager.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new TrustConfig in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.trustConfigs.create({
            parent: "Test string",
            trustConfigId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            trustStores: [
                {
                    intermediateCas: [
                        {
                            pemCertificate: "Test string",
                        }
                    ],
                    trustAnchors: [
                        {
                            pemCertificate: "Test string",
                        }
                    ],
                }
            ],
            updateTime: "Test string",
        });
        /** Deletes a single TrustConfig. */
        await gapi.client.certificatemanager.projects.locations.trustConfigs.delete({
            etag: "Test string",
            name: "Test string",
        });
        /** Gets details of a single TrustConfig. */
        await gapi.client.certificatemanager.projects.locations.trustConfigs.get({
            name: "Test string",
        });
        /** Lists TrustConfigs in a given project and location. */
        await gapi.client.certificatemanager.projects.locations.trustConfigs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a TrustConfig. */
        await gapi.client.certificatemanager.projects.locations.trustConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            trustStores: [
                {
                    intermediateCas: [
                        {
                            pemCertificate: "Test string",
                        }
                    ],
                    trustAnchors: [
                        {
                            pemCertificate: "Test string",
                        }
                    ],
                }
            ],
            updateTime: "Test string",
        });
    }
});
