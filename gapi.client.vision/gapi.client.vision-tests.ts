/* This is stub file for gapi.client.vision definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20210317

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('vision', 'v1', () => {
        /** now we can use gapi.client.vision */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** Apply machine learning models to understand and label images */
            'https://www.googleapis.com/auth/cloud-vision',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Service that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most 5
         * (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
         */
        await gapi.client.vision.files.annotate({
        }, {
            parent: "Test string",
            requests: [
                {
                    features: [
                        {
                            maxResults: 42,
                            model: "Test string",
                            type: "Test string",
                        }                    ],
                    imageContext: {
                        cropHintsParams: {
                            aspectRatios: [
                                42                            ],
                        },
                        languageHints: [
                            "Test string"                        ],
                        latLongRect: {
                            maxLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                            minLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                        },
                        productSearchParams: {
                            boundingPoly: {
                                normalizedVertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                                vertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                            },
                            filter: "Test string",
                            productCategories: [
                                "Test string"                            ],
                            productSet: "Test string",
                        },
                        textDetectionParams: {
                            enableTextDetectionConfidenceScore: true,
                        },
                        webDetectionParams: {
                            includeGeoResults: true,
                        },
                    },
                    inputConfig: {
                        content: "Test string",
                        gcsSource: {
                            uri: "Test string",
                        },
                        mimeType: "Test string",
                    },
                    pages: [
                        42                    ],
                }            ],
        });
        /**
         * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can
         * be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains
         * `AsyncBatchAnnotateFilesResponse` (results).
         */
        await gapi.client.vision.files.asyncBatchAnnotate({
        }, {
            parent: "Test string",
            requests: [
                {
                    features: [
                        {
                            maxResults: 42,
                            model: "Test string",
                            type: "Test string",
                        }                    ],
                    imageContext: {
                        cropHintsParams: {
                            aspectRatios: [
                                42                            ],
                        },
                        languageHints: [
                            "Test string"                        ],
                        latLongRect: {
                            maxLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                            minLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                        },
                        productSearchParams: {
                            boundingPoly: {
                                normalizedVertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                                vertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                            },
                            filter: "Test string",
                            productCategories: [
                                "Test string"                            ],
                            productSet: "Test string",
                        },
                        textDetectionParams: {
                            enableTextDetectionConfidenceScore: true,
                        },
                        webDetectionParams: {
                            includeGeoResults: true,
                        },
                    },
                    inputConfig: {
                        content: "Test string",
                        gcsSource: {
                            uri: "Test string",
                        },
                        mimeType: "Test string",
                    },
                    outputConfig: {
                        batchSize: 42,
                        gcsDestination: {
                            uri: "Test string",
                        },
                    },
                }            ],
        });
        /** Run image detection and annotation for a batch of images. */
        await gapi.client.vision.images.annotate({
        }, {
            parent: "Test string",
            requests: [
                {
                    features: [
                        {
                            maxResults: 42,
                            model: "Test string",
                            type: "Test string",
                        }                    ],
                    image: {
                        content: "Test string",
                        source: {
                            gcsImageUri: "Test string",
                            imageUri: "Test string",
                        },
                    },
                    imageContext: {
                        cropHintsParams: {
                            aspectRatios: [
                                42                            ],
                        },
                        languageHints: [
                            "Test string"                        ],
                        latLongRect: {
                            maxLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                            minLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                        },
                        productSearchParams: {
                            boundingPoly: {
                                normalizedVertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                                vertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                            },
                            filter: "Test string",
                            productCategories: [
                                "Test string"                            ],
                            productSet: "Test string",
                        },
                        textDetectionParams: {
                            enableTextDetectionConfidenceScore: true,
                        },
                        webDetectionParams: {
                            includeGeoResults: true,
                        },
                    },
                }            ],
        });
        /**
         * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata`
         * contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in
         * customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
         */
        await gapi.client.vision.images.asyncBatchAnnotate({
        }, {
            outputConfig: {
                batchSize: 42,
                gcsDestination: {
                    uri: "Test string",
                },
            },
            parent: "Test string",
            requests: [
                {
                    features: [
                        {
                            maxResults: 42,
                            model: "Test string",
                            type: "Test string",
                        }                    ],
                    image: {
                        content: "Test string",
                        source: {
                            gcsImageUri: "Test string",
                            imageUri: "Test string",
                        },
                    },
                    imageContext: {
                        cropHintsParams: {
                            aspectRatios: [
                                42                            ],
                        },
                        languageHints: [
                            "Test string"                        ],
                        latLongRect: {
                            maxLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                            minLatLng: {
                                latitude: 42,
                                longitude: 42,
                            },
                        },
                        productSearchParams: {
                            boundingPoly: {
                                normalizedVertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                                vertices: [
                                    {
                                        x: 42,
                                        y: 42,
                                    }                                ],
                            },
                            filter: "Test string",
                            productCategories: [
                                "Test string"                            ],
                            productSet: "Test string",
                        },
                        textDetectionParams: {
                            enableTextDetectionConfidenceScore: true,
                        },
                        webDetectionParams: {
                            includeGeoResults: true,
                        },
                    },
                }            ],
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.vision.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.vision.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.vision.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.vision.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
