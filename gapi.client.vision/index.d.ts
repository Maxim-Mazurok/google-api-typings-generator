/* Type definitions for non-npm package Cloud Vision API v1 1.0 */
// Project: https://cloud.google.com/vision/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://vision.googleapis.com/$discovery/rest?version=v1
// Revision: 20220415

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Vision API v1 */
    function load(name: "vision", version: "v1"): PromiseLike<void>;
    function load(name: "vision", version: "v1", callback: () => any): void;

    namespace vision {
        interface AddProductToProductSetRequest {
            /** Required. The resource name for the Product to be added to this ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID` */
            product?: string;
        }
        interface AnnotateFileRequest {
            /** Required. Requested features. */
            features?: Feature[];
            /** Additional context that may accompany the image(s) in the file. */
            imageContext?: ImageContext;
            /** Required. Information about the input file. */
            inputConfig?: InputConfig;
            /**
             * Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative.
             * Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page
             * refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.
             */
            pages?: number[];
        }
        interface AnnotateFileResponse {
            /** If set, represents the error message for the failed request. The `responses` field will not be set in this case. */
            error?: Status;
            /** Information about the file for which this response is generated. */
            inputConfig?: InputConfig;
            /** Individual responses to images found within the file. This field will be empty if the `error` field is set. */
            responses?: AnnotateImageResponse[];
            /** This field gives the total number of pages in the file. */
            totalPages?: number;
        }
        interface AnnotateImageRequest {
            /** Requested features. */
            features?: Feature[];
            /** The image to be processed. */
            image?: Image;
            /** Additional context that may accompany the image. */
            imageContext?: ImageContext;
        }
        interface AnnotateImageResponse {
            /** If present, contextual information is needed to understand where this image comes from. */
            context?: ImageAnnotationContext;
            /** If present, crop hints have completed successfully. */
            cropHintsAnnotation?: CropHintsAnnotation;
            /** If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set. */
            error?: Status;
            /** If present, face detection has completed successfully. */
            faceAnnotations?: FaceAnnotation[];
            /** If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text. */
            fullTextAnnotation?: TextAnnotation;
            /** If present, image properties were extracted successfully. */
            imagePropertiesAnnotation?: ImageProperties;
            /** If present, label detection has completed successfully. */
            labelAnnotations?: EntityAnnotation[];
            /** If present, landmark detection has completed successfully. */
            landmarkAnnotations?: EntityAnnotation[];
            /** If present, localized object detection has completed successfully. This will be sorted descending by confidence score. */
            localizedObjectAnnotations?: LocalizedObjectAnnotation[];
            /** If present, logo detection has completed successfully. */
            logoAnnotations?: EntityAnnotation[];
            /** If present, product search has completed successfully. */
            productSearchResults?: ProductSearchResults;
            /** If present, safe-search annotation has completed successfully. */
            safeSearchAnnotation?: SafeSearchAnnotation;
            /** If present, text (OCR) detection has completed successfully. */
            textAnnotations?: EntityAnnotation[];
            /** If present, web detection has completed successfully. */
            webDetection?: WebDetection;
        }
        interface AsyncAnnotateFileRequest {
            /** Required. Requested features. */
            features?: Feature[];
            /** Additional context that may accompany the image(s) in the file. */
            imageContext?: ImageContext;
            /** Required. Information about the input file. */
            inputConfig?: InputConfig;
            /** Required. The desired output location and metadata (e.g. format). */
            outputConfig?: OutputConfig;
        }
        interface AsyncAnnotateFileResponse {
            /** The output location and metadata from AsyncAnnotateFileRequest. */
            outputConfig?: OutputConfig;
        }
        interface AsyncBatchAnnotateFilesRequest {
            /**
             * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
             * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
             */
            parent?: string;
            /** Required. Individual async file annotation requests for this batch. */
            requests?: AsyncAnnotateFileRequest[];
        }
        interface AsyncBatchAnnotateFilesResponse {
            /** The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest. */
            responses?: AsyncAnnotateFileResponse[];
        }
        interface AsyncBatchAnnotateImagesRequest {
            /** Required. The desired output location and metadata (e.g. format). */
            outputConfig?: OutputConfig;
            /**
             * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
             * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
             */
            parent?: string;
            /** Required. Individual image annotation requests for this batch. */
            requests?: AnnotateImageRequest[];
        }
        interface AsyncBatchAnnotateImagesResponse {
            /** The output location and metadata from AsyncBatchAnnotateImagesRequest. */
            outputConfig?: OutputConfig;
        }
        interface BatchAnnotateFilesRequest {
            /**
             * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
             * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
             */
            parent?: string;
            /** Required. The list of file annotation requests. Right now we support only one AnnotateFileRequest in BatchAnnotateFilesRequest. */
            requests?: AnnotateFileRequest[];
        }
        interface BatchAnnotateFilesResponse {
            /** The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest. */
            responses?: AnnotateFileResponse[];
        }
        interface BatchAnnotateImagesRequest {
            /**
             * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
             * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
             */
            parent?: string;
            /** Required. Individual image annotation requests for this batch. */
            requests?: AnnotateImageRequest[];
        }
        interface BatchAnnotateImagesResponse {
            /** Individual responses to image annotation requests within the batch. */
            responses?: AnnotateImageResponse[];
        }
        interface BatchOperationMetadata {
            /** The time when the batch request is finished and google.longrunning.Operation.done is set to true. */
            endTime?: string;
            /** The current state of the batch operation. */
            state?: string;
            /** The time when the batch request was submitted to the server. */
            submitTime?: string;
        }
        interface Block {
            /** Detected block type (text, image etc) for this block. */
            blockType?: string;
            /**
             * The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: BoundingPoly;
            /** Confidence of the OCR results on the block. Range [0, 1]. */
            confidence?: number;
            /** List of paragraphs in this block (if this blocks is of type text). */
            paragraphs?: Paragraph[];
            /** Additional information detected for the block. */
            property?: TextProperty;
        }
        interface BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: Vertex[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface Color {
            /**
             * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) *
             * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message
             * rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color
             * (as if the alpha value had been explicitly given a value of 1.0).
             */
            alpha?: number;
            /** The amount of blue in the color as a value in the interval [0, 1]. */
            blue?: number;
            /** The amount of green in the color as a value in the interval [0, 1]. */
            green?: number;
            /** The amount of red in the color as a value in the interval [0, 1]. */
            red?: number;
        }
        interface ColorInfo {
            /** RGB components of the color. */
            color?: Color;
            /** The fraction of pixels the color occupies in the image. Value in range [0, 1]. */
            pixelFraction?: number;
            /** Image-specific score for this color. Value in range [0, 1]. */
            score?: number;
        }
        interface CropHint {
            /** The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale. */
            boundingPoly?: BoundingPoly;
            /** Confidence of this being a salient region. Range [0, 1]. */
            confidence?: number;
            /** Fraction of importance of this salient region with respect to the original image. */
            importanceFraction?: number;
        }
        interface CropHintsAnnotation {
            /** Crop hint results. */
            cropHints?: CropHint[];
        }
        interface CropHintsParams {
            /**
             * Aspect ratios in floats, representing the ratio of the width to the height of the image. For example, if the desired aspect ratio is 4/3, the corresponding float value should be
             * 1.33333. If not specified, the best possible crop is returned. The number of provided aspect ratios is limited to a maximum of 16; any aspect ratios provided after the 16th are
             * ignored.
             */
            aspectRatios?: number[];
        }
        interface DetectedBreak {
            /** True if break prepends the element. */
            isPrefix?: boolean;
            /** Detected break type. */
            type?: string;
        }
        interface DetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface DominantColorsAnnotation {
            /** RGB color values with their score and pixel fraction. */
            colors?: ColorInfo[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface EntityAnnotation {
            /** Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features. */
            boundingPoly?: BoundingPoly;
            /**
             * **Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the "Eiffel Tower" entity is detected, this field
             * represents the confidence that there is a tower in the query image. Range [0, 1].
             */
            confidence?: number;
            /** Entity textual description, expressed in its `locale` language. */
            description?: string;
            /** The language code for the locale in which the entity textual `description` is expressed. */
            locale?: string;
            /**
             * The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and
             * another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
             */
            locations?: LocationInfo[];
            /** Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/). */
            mid?: string;
            /** Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity. */
            properties?: Property[];
            /** Overall score of the result. Range [0, 1]. */
            score?: number;
            /**
             * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of "tower" is likely higher to an image containing the detected "Eiffel Tower"
             * than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
             */
            topicality?: number;
        }
        interface FaceAnnotation {
            /** Anger likelihood. */
            angerLikelihood?: string;
            /** Blurred likelihood. */
            blurredLikelihood?: string;
            /**
             * The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to "frame" the face in accordance with
             * human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if
             * only a partial face appears in the image to be annotated.
             */
            boundingPoly?: BoundingPoly;
            /** Detection confidence. Range [0, 1]. */
            detectionConfidence?: number;
            /**
             * The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image
             * analysis that detects the "amount of skin" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.
             */
            fdBoundingPoly?: BoundingPoly;
            /** Headwear likelihood. */
            headwearLikelihood?: string;
            /** Joy likelihood. */
            joyLikelihood?: string;
            /** Face landmarking confidence. Range [0, 1]. */
            landmarkingConfidence?: number;
            /** Detected face landmarks. */
            landmarks?: Landmark[];
            /** Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]. */
            panAngle?: number;
            /** Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]. */
            rollAngle?: number;
            /** Sorrow likelihood. */
            sorrowLikelihood?: string;
            /** Surprise likelihood. */
            surpriseLikelihood?: string;
            /** Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]. */
            tiltAngle?: number;
            /** Under-exposed likelihood. */
            underExposedLikelihood?: string;
        }
        interface Feature {
            /** Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`. */
            maxResults?: number;
            /** Model to use for the feature. Supported values: "builtin/stable" (the default if unset) and "builtin/latest". */
            model?: string;
            /** The feature type. */
            type?: string;
        }
        interface GcsDestination {
            /**
             * Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent
             * a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri
             * prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will
             * begin with "filenameprefix". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output
             * files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the
             * full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.
             */
            uri?: string;
        }
        interface GcsSource {
            /** Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p1beta1AnnotateFileResponse {
            /** If set, represents the error message for the failed request. The `responses` field will not be set in this case. */
            error?: Status;
            /** Information about the file for which this response is generated. */
            inputConfig?: GoogleCloudVisionV1p1beta1InputConfig;
            /** Individual responses to images found within the file. This field will be empty if the `error` field is set. */
            responses?: GoogleCloudVisionV1p1beta1AnnotateImageResponse[];
            /** This field gives the total number of pages in the file. */
            totalPages?: number;
        }
        interface GoogleCloudVisionV1p1beta1AnnotateImageResponse {
            /** If present, contextual information is needed to understand where this image comes from. */
            context?: GoogleCloudVisionV1p1beta1ImageAnnotationContext;
            /** If present, crop hints have completed successfully. */
            cropHintsAnnotation?: GoogleCloudVisionV1p1beta1CropHintsAnnotation;
            /** If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set. */
            error?: Status;
            /** If present, face detection has completed successfully. */
            faceAnnotations?: GoogleCloudVisionV1p1beta1FaceAnnotation[];
            /** If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text. */
            fullTextAnnotation?: GoogleCloudVisionV1p1beta1TextAnnotation;
            /** If present, image properties were extracted successfully. */
            imagePropertiesAnnotation?: GoogleCloudVisionV1p1beta1ImageProperties;
            /** If present, label detection has completed successfully. */
            labelAnnotations?: GoogleCloudVisionV1p1beta1EntityAnnotation[];
            /** If present, landmark detection has completed successfully. */
            landmarkAnnotations?: GoogleCloudVisionV1p1beta1EntityAnnotation[];
            /** If present, localized object detection has completed successfully. This will be sorted descending by confidence score. */
            localizedObjectAnnotations?: GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation[];
            /** If present, logo detection has completed successfully. */
            logoAnnotations?: GoogleCloudVisionV1p1beta1EntityAnnotation[];
            /** If present, product search has completed successfully. */
            productSearchResults?: GoogleCloudVisionV1p1beta1ProductSearchResults;
            /** If present, safe-search annotation has completed successfully. */
            safeSearchAnnotation?: GoogleCloudVisionV1p1beta1SafeSearchAnnotation;
            /** If present, text (OCR) detection has completed successfully. */
            textAnnotations?: GoogleCloudVisionV1p1beta1EntityAnnotation[];
            /** If present, web detection has completed successfully. */
            webDetection?: GoogleCloudVisionV1p1beta1WebDetection;
        }
        interface GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse {
            /** The output location and metadata from AsyncAnnotateFileRequest. */
            outputConfig?: GoogleCloudVisionV1p1beta1OutputConfig;
        }
        interface GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse {
            /** The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest. */
            responses?: GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse[];
        }
        interface GoogleCloudVisionV1p1beta1Block {
            /** Detected block type (text, image etc) for this block. */
            blockType?: string;
            /**
             * The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Confidence of the OCR results on the block. Range [0, 1]. */
            confidence?: number;
            /** List of paragraphs in this block (if this blocks is of type text). */
            paragraphs?: GoogleCloudVisionV1p1beta1Paragraph[];
            /** Additional information detected for the block. */
            property?: GoogleCloudVisionV1p1beta1TextAnnotationTextProperty;
        }
        interface GoogleCloudVisionV1p1beta1BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: GoogleCloudVisionV1p1beta1NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: GoogleCloudVisionV1p1beta1Vertex[];
        }
        interface GoogleCloudVisionV1p1beta1ColorInfo {
            /** RGB components of the color. */
            color?: Color;
            /** The fraction of pixels the color occupies in the image. Value in range [0, 1]. */
            pixelFraction?: number;
            /** Image-specific score for this color. Value in range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p1beta1CropHint {
            /** The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale. */
            boundingPoly?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Confidence of this being a salient region. Range [0, 1]. */
            confidence?: number;
            /** Fraction of importance of this salient region with respect to the original image. */
            importanceFraction?: number;
        }
        interface GoogleCloudVisionV1p1beta1CropHintsAnnotation {
            /** Crop hint results. */
            cropHints?: GoogleCloudVisionV1p1beta1CropHint[];
        }
        interface GoogleCloudVisionV1p1beta1DominantColorsAnnotation {
            /** RGB color values with their score and pixel fraction. */
            colors?: GoogleCloudVisionV1p1beta1ColorInfo[];
        }
        interface GoogleCloudVisionV1p1beta1EntityAnnotation {
            /** Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features. */
            boundingPoly?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /**
             * **Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the "Eiffel Tower" entity is detected, this field
             * represents the confidence that there is a tower in the query image. Range [0, 1].
             */
            confidence?: number;
            /** Entity textual description, expressed in its `locale` language. */
            description?: string;
            /** The language code for the locale in which the entity textual `description` is expressed. */
            locale?: string;
            /**
             * The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and
             * another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
             */
            locations?: GoogleCloudVisionV1p1beta1LocationInfo[];
            /** Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/). */
            mid?: string;
            /** Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity. */
            properties?: GoogleCloudVisionV1p1beta1Property[];
            /** Overall score of the result. Range [0, 1]. */
            score?: number;
            /**
             * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of "tower" is likely higher to an image containing the detected "Eiffel Tower"
             * than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
             */
            topicality?: number;
        }
        interface GoogleCloudVisionV1p1beta1FaceAnnotation {
            /** Anger likelihood. */
            angerLikelihood?: string;
            /** Blurred likelihood. */
            blurredLikelihood?: string;
            /**
             * The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to "frame" the face in accordance with
             * human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if
             * only a partial face appears in the image to be annotated.
             */
            boundingPoly?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Detection confidence. Range [0, 1]. */
            detectionConfidence?: number;
            /**
             * The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image
             * analysis that detects the "amount of skin" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.
             */
            fdBoundingPoly?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Headwear likelihood. */
            headwearLikelihood?: string;
            /** Joy likelihood. */
            joyLikelihood?: string;
            /** Face landmarking confidence. Range [0, 1]. */
            landmarkingConfidence?: number;
            /** Detected face landmarks. */
            landmarks?: GoogleCloudVisionV1p1beta1FaceAnnotationLandmark[];
            /** Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]. */
            panAngle?: number;
            /** Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]. */
            rollAngle?: number;
            /** Sorrow likelihood. */
            sorrowLikelihood?: string;
            /** Surprise likelihood. */
            surpriseLikelihood?: string;
            /** Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]. */
            tiltAngle?: number;
            /** Under-exposed likelihood. */
            underExposedLikelihood?: string;
        }
        interface GoogleCloudVisionV1p1beta1FaceAnnotationLandmark {
            /** Face landmark position. */
            position?: GoogleCloudVisionV1p1beta1Position;
            /** Face landmark type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p1beta1GcsDestination {
            /**
             * Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent
             * a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri
             * prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will
             * begin with "filenameprefix". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output
             * files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the
             * full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.
             */
            uri?: string;
        }
        interface GoogleCloudVisionV1p1beta1GcsSource {
            /** Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p1beta1ImageAnnotationContext {
            /** If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image. */
            pageNumber?: number;
            /** The URI of the file used to produce the image. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p1beta1ImageProperties {
            /** If present, dominant colors completed successfully. */
            dominantColors?: GoogleCloudVisionV1p1beta1DominantColorsAnnotation;
        }
        interface GoogleCloudVisionV1p1beta1InputConfig {
            /**
             * File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently,
             * this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.
             */
            content?: string;
            /** The Google Cloud Storage location to read the input from. */
            gcsSource?: GoogleCloudVisionV1p1beta1GcsSource;
            /** The type of the file. Currently only "application/pdf", "image/tiff" and "image/gif" are supported. Wildcards are not supported. */
            mimeType?: string;
        }
        interface GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation {
            /** Image region to which this object belongs. This must be populated. */
            boundingPoly?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p1beta1LocationInfo {
            /** lat/long location coordinates. */
            latLng?: LatLng;
        }
        interface GoogleCloudVisionV1p1beta1NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p1beta1OperationMetadata {
            /** The time when the batch request was received. */
            createTime?: string;
            /** Current state of the batch operation. */
            state?: string;
            /** The time when the operation result was last updated. */
            updateTime?: string;
        }
        interface GoogleCloudVisionV1p1beta1OutputConfig {
            /**
             * The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for
             * one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix
             * `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.
             */
            batchSize?: number;
            /** The Google Cloud Storage location to write the output(s) to. */
            gcsDestination?: GoogleCloudVisionV1p1beta1GcsDestination;
        }
        interface GoogleCloudVisionV1p1beta1Page {
            /** List of blocks of text, images etc on this page. */
            blocks?: GoogleCloudVisionV1p1beta1Block[];
            /** Confidence of the OCR results on the page. Range [0, 1]. */
            confidence?: number;
            /** Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            height?: number;
            /** Additional information detected on the page. */
            property?: GoogleCloudVisionV1p1beta1TextAnnotationTextProperty;
            /** Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            width?: number;
        }
        interface GoogleCloudVisionV1p1beta1Paragraph {
            /**
             * The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Confidence of the OCR results for the paragraph. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the paragraph. */
            property?: GoogleCloudVisionV1p1beta1TextAnnotationTextProperty;
            /** List of all words in this paragraph. */
            words?: GoogleCloudVisionV1p1beta1Word[];
        }
        interface GoogleCloudVisionV1p1beta1Position {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
            /** Z coordinate (or depth). */
            z?: number;
        }
        interface GoogleCloudVisionV1p1beta1Product {
            /** User-provided metadata to be stored with this product. Must be at most 4096 characters long. */
            description?: string;
            /** The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long. */
            displayName?: string;
            /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
            name?: string;
            /**
             * Immutable. The category for the product identified by the reference image. This should be one of "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1" or "general-v1". The
             * legacy categories "homegoods", "apparel", and "toys" are still supported, but these should not be used for new products.
             */
            productCategory?: string;
            /**
             * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g.
             * "1199". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up
             * to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will
             * refuse to work for that ProductSet.
             */
            productLabels?: GoogleCloudVisionV1p1beta1ProductKeyValue[];
        }
        interface GoogleCloudVisionV1p1beta1ProductKeyValue {
            /** The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            key?: string;
            /** The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            value?: string;
        }
        interface GoogleCloudVisionV1p1beta1ProductSearchResults {
            /**
             * Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current
             * results.
             */
            indexTime?: string;
            /**
             * List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to
             * that region. There may be duplicate product matches in the union of all the per-product results.
             */
            productGroupedResults?: GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p1beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult {
            /** The bounding polygon around the product detected in the query image. */
            boundingPoly?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** List of generic predictions for the object in the bounding box. */
            objectAnnotations?: GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p1beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation {
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p1beta1ProductSearchResultsResult {
            /** The resource name of the image from the product that is the closest match to the query. */
            image?: string;
            /** The Product. */
            product?: GoogleCloudVisionV1p1beta1Product;
            /** A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence). */
            score?: number;
        }
        interface GoogleCloudVisionV1p1beta1Property {
            /** Name of the property. */
            name?: string;
            /** Value of numeric properties. */
            uint64Value?: string;
            /** Value of the property. */
            value?: string;
        }
        interface GoogleCloudVisionV1p1beta1SafeSearchAnnotation {
            /** Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities. */
            adult?: string;
            /** Likelihood that this is a medical image. */
            medical?: string;
            /**
             * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative
             * poses, or close-ups of sensitive body areas.
             */
            racy?: string;
            /** Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive. */
            spoof?: string;
            /** Likelihood that this image contains violent content. */
            violence?: string;
        }
        interface GoogleCloudVisionV1p1beta1Symbol {
            /**
             * The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Confidence of the OCR results for the symbol. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the symbol. */
            property?: GoogleCloudVisionV1p1beta1TextAnnotationTextProperty;
            /** The actual UTF-8 representation of the symbol. */
            text?: string;
        }
        interface GoogleCloudVisionV1p1beta1TextAnnotation {
            /** List of pages detected by OCR. */
            pages?: GoogleCloudVisionV1p1beta1Page[];
            /** UTF-8 text detected on the pages. */
            text?: string;
        }
        interface GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak {
            /** True if break prepends the element. */
            isPrefix?: boolean;
            /** Detected break type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p1beta1TextAnnotationTextProperty {
            /** Detected start or end of a text segment. */
            detectedBreak?: GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage[];
        }
        interface GoogleCloudVisionV1p1beta1Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p1beta1WebDetection {
            /** The service's best guess as to the topic of the request image. Inferred from similar images on the open web. */
            bestGuessLabels?: GoogleCloudVisionV1p1beta1WebDetectionWebLabel[];
            /** Fully matching images from the Internet. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p1beta1WebDetectionWebImage[];
            /** Web pages containing the matching images from the Internet. */
            pagesWithMatchingImages?: GoogleCloudVisionV1p1beta1WebDetectionWebPage[];
            /**
             * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its
             * crops.
             */
            partialMatchingImages?: GoogleCloudVisionV1p1beta1WebDetectionWebImage[];
            /** The visually similar image results. */
            visuallySimilarImages?: GoogleCloudVisionV1p1beta1WebDetectionWebImage[];
            /** Deduced entities from similar images on the Internet. */
            webEntities?: GoogleCloudVisionV1p1beta1WebDetectionWebEntity[];
        }
        interface GoogleCloudVisionV1p1beta1WebDetectionWebEntity {
            /** Canonical description of the entity, in English. */
            description?: string;
            /** Opaque entity ID. */
            entityId?: string;
            /** Overall relevancy score for the entity. Not normalized and not comparable across different image queries. */
            score?: number;
        }
        interface GoogleCloudVisionV1p1beta1WebDetectionWebImage {
            /** (Deprecated) Overall relevancy score for the image. */
            score?: number;
            /** The result image URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p1beta1WebDetectionWebLabel {
            /** Label for extra metadata. */
            label?: string;
            /** The BCP-47 language code for `label`, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p1beta1WebDetectionWebPage {
            /** Fully matching images on the page. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p1beta1WebDetectionWebImage[];
            /** Title for the web page, may contain HTML markups. */
            pageTitle?: string;
            /** Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops. */
            partialMatchingImages?: GoogleCloudVisionV1p1beta1WebDetectionWebImage[];
            /** (Deprecated) Overall relevancy score for the web page. */
            score?: number;
            /** The result web page URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p1beta1Word {
            /**
             * The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p1beta1BoundingPoly;
            /** Confidence of the OCR results for the word. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the word. */
            property?: GoogleCloudVisionV1p1beta1TextAnnotationTextProperty;
            /** List of symbols in the word. The order of the symbols follows the natural reading order. */
            symbols?: GoogleCloudVisionV1p1beta1Symbol[];
        }
        interface GoogleCloudVisionV1p2beta1AnnotateFileResponse {
            /** If set, represents the error message for the failed request. The `responses` field will not be set in this case. */
            error?: Status;
            /** Information about the file for which this response is generated. */
            inputConfig?: GoogleCloudVisionV1p2beta1InputConfig;
            /** Individual responses to images found within the file. This field will be empty if the `error` field is set. */
            responses?: GoogleCloudVisionV1p2beta1AnnotateImageResponse[];
            /** This field gives the total number of pages in the file. */
            totalPages?: number;
        }
        interface GoogleCloudVisionV1p2beta1AnnotateImageResponse {
            /** If present, contextual information is needed to understand where this image comes from. */
            context?: GoogleCloudVisionV1p2beta1ImageAnnotationContext;
            /** If present, crop hints have completed successfully. */
            cropHintsAnnotation?: GoogleCloudVisionV1p2beta1CropHintsAnnotation;
            /** If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set. */
            error?: Status;
            /** If present, face detection has completed successfully. */
            faceAnnotations?: GoogleCloudVisionV1p2beta1FaceAnnotation[];
            /** If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text. */
            fullTextAnnotation?: GoogleCloudVisionV1p2beta1TextAnnotation;
            /** If present, image properties were extracted successfully. */
            imagePropertiesAnnotation?: GoogleCloudVisionV1p2beta1ImageProperties;
            /** If present, label detection has completed successfully. */
            labelAnnotations?: GoogleCloudVisionV1p2beta1EntityAnnotation[];
            /** If present, landmark detection has completed successfully. */
            landmarkAnnotations?: GoogleCloudVisionV1p2beta1EntityAnnotation[];
            /** If present, localized object detection has completed successfully. This will be sorted descending by confidence score. */
            localizedObjectAnnotations?: GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation[];
            /** If present, logo detection has completed successfully. */
            logoAnnotations?: GoogleCloudVisionV1p2beta1EntityAnnotation[];
            /** If present, product search has completed successfully. */
            productSearchResults?: GoogleCloudVisionV1p2beta1ProductSearchResults;
            /** If present, safe-search annotation has completed successfully. */
            safeSearchAnnotation?: GoogleCloudVisionV1p2beta1SafeSearchAnnotation;
            /** If present, text (OCR) detection has completed successfully. */
            textAnnotations?: GoogleCloudVisionV1p2beta1EntityAnnotation[];
            /** If present, web detection has completed successfully. */
            webDetection?: GoogleCloudVisionV1p2beta1WebDetection;
        }
        interface GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse {
            /** The output location and metadata from AsyncAnnotateFileRequest. */
            outputConfig?: GoogleCloudVisionV1p2beta1OutputConfig;
        }
        interface GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse {
            /** The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest. */
            responses?: GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse[];
        }
        interface GoogleCloudVisionV1p2beta1Block {
            /** Detected block type (text, image etc) for this block. */
            blockType?: string;
            /**
             * The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Confidence of the OCR results on the block. Range [0, 1]. */
            confidence?: number;
            /** List of paragraphs in this block (if this blocks is of type text). */
            paragraphs?: GoogleCloudVisionV1p2beta1Paragraph[];
            /** Additional information detected for the block. */
            property?: GoogleCloudVisionV1p2beta1TextAnnotationTextProperty;
        }
        interface GoogleCloudVisionV1p2beta1BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: GoogleCloudVisionV1p2beta1NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: GoogleCloudVisionV1p2beta1Vertex[];
        }
        interface GoogleCloudVisionV1p2beta1ColorInfo {
            /** RGB components of the color. */
            color?: Color;
            /** The fraction of pixels the color occupies in the image. Value in range [0, 1]. */
            pixelFraction?: number;
            /** Image-specific score for this color. Value in range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p2beta1CropHint {
            /** The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale. */
            boundingPoly?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Confidence of this being a salient region. Range [0, 1]. */
            confidence?: number;
            /** Fraction of importance of this salient region with respect to the original image. */
            importanceFraction?: number;
        }
        interface GoogleCloudVisionV1p2beta1CropHintsAnnotation {
            /** Crop hint results. */
            cropHints?: GoogleCloudVisionV1p2beta1CropHint[];
        }
        interface GoogleCloudVisionV1p2beta1DominantColorsAnnotation {
            /** RGB color values with their score and pixel fraction. */
            colors?: GoogleCloudVisionV1p2beta1ColorInfo[];
        }
        interface GoogleCloudVisionV1p2beta1EntityAnnotation {
            /** Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features. */
            boundingPoly?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /**
             * **Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the "Eiffel Tower" entity is detected, this field
             * represents the confidence that there is a tower in the query image. Range [0, 1].
             */
            confidence?: number;
            /** Entity textual description, expressed in its `locale` language. */
            description?: string;
            /** The language code for the locale in which the entity textual `description` is expressed. */
            locale?: string;
            /**
             * The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and
             * another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
             */
            locations?: GoogleCloudVisionV1p2beta1LocationInfo[];
            /** Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/). */
            mid?: string;
            /** Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity. */
            properties?: GoogleCloudVisionV1p2beta1Property[];
            /** Overall score of the result. Range [0, 1]. */
            score?: number;
            /**
             * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of "tower" is likely higher to an image containing the detected "Eiffel Tower"
             * than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
             */
            topicality?: number;
        }
        interface GoogleCloudVisionV1p2beta1FaceAnnotation {
            /** Anger likelihood. */
            angerLikelihood?: string;
            /** Blurred likelihood. */
            blurredLikelihood?: string;
            /**
             * The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to "frame" the face in accordance with
             * human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if
             * only a partial face appears in the image to be annotated.
             */
            boundingPoly?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Detection confidence. Range [0, 1]. */
            detectionConfidence?: number;
            /**
             * The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image
             * analysis that detects the "amount of skin" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.
             */
            fdBoundingPoly?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Headwear likelihood. */
            headwearLikelihood?: string;
            /** Joy likelihood. */
            joyLikelihood?: string;
            /** Face landmarking confidence. Range [0, 1]. */
            landmarkingConfidence?: number;
            /** Detected face landmarks. */
            landmarks?: GoogleCloudVisionV1p2beta1FaceAnnotationLandmark[];
            /** Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]. */
            panAngle?: number;
            /** Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]. */
            rollAngle?: number;
            /** Sorrow likelihood. */
            sorrowLikelihood?: string;
            /** Surprise likelihood. */
            surpriseLikelihood?: string;
            /** Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]. */
            tiltAngle?: number;
            /** Under-exposed likelihood. */
            underExposedLikelihood?: string;
        }
        interface GoogleCloudVisionV1p2beta1FaceAnnotationLandmark {
            /** Face landmark position. */
            position?: GoogleCloudVisionV1p2beta1Position;
            /** Face landmark type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p2beta1GcsDestination {
            /**
             * Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent
             * a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri
             * prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will
             * begin with "filenameprefix". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output
             * files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the
             * full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.
             */
            uri?: string;
        }
        interface GoogleCloudVisionV1p2beta1GcsSource {
            /** Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p2beta1ImageAnnotationContext {
            /** If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image. */
            pageNumber?: number;
            /** The URI of the file used to produce the image. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p2beta1ImageProperties {
            /** If present, dominant colors completed successfully. */
            dominantColors?: GoogleCloudVisionV1p2beta1DominantColorsAnnotation;
        }
        interface GoogleCloudVisionV1p2beta1InputConfig {
            /**
             * File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently,
             * this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.
             */
            content?: string;
            /** The Google Cloud Storage location to read the input from. */
            gcsSource?: GoogleCloudVisionV1p2beta1GcsSource;
            /** The type of the file. Currently only "application/pdf", "image/tiff" and "image/gif" are supported. Wildcards are not supported. */
            mimeType?: string;
        }
        interface GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation {
            /** Image region to which this object belongs. This must be populated. */
            boundingPoly?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p2beta1LocationInfo {
            /** lat/long location coordinates. */
            latLng?: LatLng;
        }
        interface GoogleCloudVisionV1p2beta1NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p2beta1OperationMetadata {
            /** The time when the batch request was received. */
            createTime?: string;
            /** Current state of the batch operation. */
            state?: string;
            /** The time when the operation result was last updated. */
            updateTime?: string;
        }
        interface GoogleCloudVisionV1p2beta1OutputConfig {
            /**
             * The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for
             * one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix
             * `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.
             */
            batchSize?: number;
            /** The Google Cloud Storage location to write the output(s) to. */
            gcsDestination?: GoogleCloudVisionV1p2beta1GcsDestination;
        }
        interface GoogleCloudVisionV1p2beta1Page {
            /** List of blocks of text, images etc on this page. */
            blocks?: GoogleCloudVisionV1p2beta1Block[];
            /** Confidence of the OCR results on the page. Range [0, 1]. */
            confidence?: number;
            /** Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            height?: number;
            /** Additional information detected on the page. */
            property?: GoogleCloudVisionV1p2beta1TextAnnotationTextProperty;
            /** Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            width?: number;
        }
        interface GoogleCloudVisionV1p2beta1Paragraph {
            /**
             * The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Confidence of the OCR results for the paragraph. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the paragraph. */
            property?: GoogleCloudVisionV1p2beta1TextAnnotationTextProperty;
            /** List of all words in this paragraph. */
            words?: GoogleCloudVisionV1p2beta1Word[];
        }
        interface GoogleCloudVisionV1p2beta1Position {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
            /** Z coordinate (or depth). */
            z?: number;
        }
        interface GoogleCloudVisionV1p2beta1Product {
            /** User-provided metadata to be stored with this product. Must be at most 4096 characters long. */
            description?: string;
            /** The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long. */
            displayName?: string;
            /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
            name?: string;
            /**
             * Immutable. The category for the product identified by the reference image. This should be one of "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1" or "general-v1". The
             * legacy categories "homegoods", "apparel", and "toys" are still supported, but these should not be used for new products.
             */
            productCategory?: string;
            /**
             * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g.
             * "1199". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up
             * to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will
             * refuse to work for that ProductSet.
             */
            productLabels?: GoogleCloudVisionV1p2beta1ProductKeyValue[];
        }
        interface GoogleCloudVisionV1p2beta1ProductKeyValue {
            /** The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            key?: string;
            /** The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            value?: string;
        }
        interface GoogleCloudVisionV1p2beta1ProductSearchResults {
            /**
             * Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current
             * results.
             */
            indexTime?: string;
            /**
             * List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to
             * that region. There may be duplicate product matches in the union of all the per-product results.
             */
            productGroupedResults?: GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p2beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult {
            /** The bounding polygon around the product detected in the query image. */
            boundingPoly?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** List of generic predictions for the object in the bounding box. */
            objectAnnotations?: GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p2beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation {
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p2beta1ProductSearchResultsResult {
            /** The resource name of the image from the product that is the closest match to the query. */
            image?: string;
            /** The Product. */
            product?: GoogleCloudVisionV1p2beta1Product;
            /** A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence). */
            score?: number;
        }
        interface GoogleCloudVisionV1p2beta1Property {
            /** Name of the property. */
            name?: string;
            /** Value of numeric properties. */
            uint64Value?: string;
            /** Value of the property. */
            value?: string;
        }
        interface GoogleCloudVisionV1p2beta1SafeSearchAnnotation {
            /** Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities. */
            adult?: string;
            /** Likelihood that this is a medical image. */
            medical?: string;
            /**
             * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative
             * poses, or close-ups of sensitive body areas.
             */
            racy?: string;
            /** Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive. */
            spoof?: string;
            /** Likelihood that this image contains violent content. */
            violence?: string;
        }
        interface GoogleCloudVisionV1p2beta1Symbol {
            /**
             * The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Confidence of the OCR results for the symbol. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the symbol. */
            property?: GoogleCloudVisionV1p2beta1TextAnnotationTextProperty;
            /** The actual UTF-8 representation of the symbol. */
            text?: string;
        }
        interface GoogleCloudVisionV1p2beta1TextAnnotation {
            /** List of pages detected by OCR. */
            pages?: GoogleCloudVisionV1p2beta1Page[];
            /** UTF-8 text detected on the pages. */
            text?: string;
        }
        interface GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak {
            /** True if break prepends the element. */
            isPrefix?: boolean;
            /** Detected break type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p2beta1TextAnnotationTextProperty {
            /** Detected start or end of a text segment. */
            detectedBreak?: GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage[];
        }
        interface GoogleCloudVisionV1p2beta1Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p2beta1WebDetection {
            /** The service's best guess as to the topic of the request image. Inferred from similar images on the open web. */
            bestGuessLabels?: GoogleCloudVisionV1p2beta1WebDetectionWebLabel[];
            /** Fully matching images from the Internet. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p2beta1WebDetectionWebImage[];
            /** Web pages containing the matching images from the Internet. */
            pagesWithMatchingImages?: GoogleCloudVisionV1p2beta1WebDetectionWebPage[];
            /**
             * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its
             * crops.
             */
            partialMatchingImages?: GoogleCloudVisionV1p2beta1WebDetectionWebImage[];
            /** The visually similar image results. */
            visuallySimilarImages?: GoogleCloudVisionV1p2beta1WebDetectionWebImage[];
            /** Deduced entities from similar images on the Internet. */
            webEntities?: GoogleCloudVisionV1p2beta1WebDetectionWebEntity[];
        }
        interface GoogleCloudVisionV1p2beta1WebDetectionWebEntity {
            /** Canonical description of the entity, in English. */
            description?: string;
            /** Opaque entity ID. */
            entityId?: string;
            /** Overall relevancy score for the entity. Not normalized and not comparable across different image queries. */
            score?: number;
        }
        interface GoogleCloudVisionV1p2beta1WebDetectionWebImage {
            /** (Deprecated) Overall relevancy score for the image. */
            score?: number;
            /** The result image URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p2beta1WebDetectionWebLabel {
            /** Label for extra metadata. */
            label?: string;
            /** The BCP-47 language code for `label`, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p2beta1WebDetectionWebPage {
            /** Fully matching images on the page. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p2beta1WebDetectionWebImage[];
            /** Title for the web page, may contain HTML markups. */
            pageTitle?: string;
            /** Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops. */
            partialMatchingImages?: GoogleCloudVisionV1p2beta1WebDetectionWebImage[];
            /** (Deprecated) Overall relevancy score for the web page. */
            score?: number;
            /** The result web page URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p2beta1Word {
            /**
             * The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p2beta1BoundingPoly;
            /** Confidence of the OCR results for the word. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the word. */
            property?: GoogleCloudVisionV1p2beta1TextAnnotationTextProperty;
            /** List of symbols in the word. The order of the symbols follows the natural reading order. */
            symbols?: GoogleCloudVisionV1p2beta1Symbol[];
        }
        interface GoogleCloudVisionV1p3beta1AnnotateFileResponse {
            /** If set, represents the error message for the failed request. The `responses` field will not be set in this case. */
            error?: Status;
            /** Information about the file for which this response is generated. */
            inputConfig?: GoogleCloudVisionV1p3beta1InputConfig;
            /** Individual responses to images found within the file. This field will be empty if the `error` field is set. */
            responses?: GoogleCloudVisionV1p3beta1AnnotateImageResponse[];
            /** This field gives the total number of pages in the file. */
            totalPages?: number;
        }
        interface GoogleCloudVisionV1p3beta1AnnotateImageResponse {
            /** If present, contextual information is needed to understand where this image comes from. */
            context?: GoogleCloudVisionV1p3beta1ImageAnnotationContext;
            /** If present, crop hints have completed successfully. */
            cropHintsAnnotation?: GoogleCloudVisionV1p3beta1CropHintsAnnotation;
            /** If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set. */
            error?: Status;
            /** If present, face detection has completed successfully. */
            faceAnnotations?: GoogleCloudVisionV1p3beta1FaceAnnotation[];
            /** If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text. */
            fullTextAnnotation?: GoogleCloudVisionV1p3beta1TextAnnotation;
            /** If present, image properties were extracted successfully. */
            imagePropertiesAnnotation?: GoogleCloudVisionV1p3beta1ImageProperties;
            /** If present, label detection has completed successfully. */
            labelAnnotations?: GoogleCloudVisionV1p3beta1EntityAnnotation[];
            /** If present, landmark detection has completed successfully. */
            landmarkAnnotations?: GoogleCloudVisionV1p3beta1EntityAnnotation[];
            /** If present, localized object detection has completed successfully. This will be sorted descending by confidence score. */
            localizedObjectAnnotations?: GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation[];
            /** If present, logo detection has completed successfully. */
            logoAnnotations?: GoogleCloudVisionV1p3beta1EntityAnnotation[];
            /** If present, product search has completed successfully. */
            productSearchResults?: GoogleCloudVisionV1p3beta1ProductSearchResults;
            /** If present, safe-search annotation has completed successfully. */
            safeSearchAnnotation?: GoogleCloudVisionV1p3beta1SafeSearchAnnotation;
            /** If present, text (OCR) detection has completed successfully. */
            textAnnotations?: GoogleCloudVisionV1p3beta1EntityAnnotation[];
            /** If present, web detection has completed successfully. */
            webDetection?: GoogleCloudVisionV1p3beta1WebDetection;
        }
        interface GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse {
            /** The output location and metadata from AsyncAnnotateFileRequest. */
            outputConfig?: GoogleCloudVisionV1p3beta1OutputConfig;
        }
        interface GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse {
            /** The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest. */
            responses?: GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse[];
        }
        interface GoogleCloudVisionV1p3beta1BatchOperationMetadata {
            /** The time when the batch request is finished and google.longrunning.Operation.done is set to true. */
            endTime?: string;
            /** The current state of the batch operation. */
            state?: string;
            /** The time when the batch request was submitted to the server. */
            submitTime?: string;
        }
        interface GoogleCloudVisionV1p3beta1Block {
            /** Detected block type (text, image etc) for this block. */
            blockType?: string;
            /**
             * The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Confidence of the OCR results on the block. Range [0, 1]. */
            confidence?: number;
            /** List of paragraphs in this block (if this blocks is of type text). */
            paragraphs?: GoogleCloudVisionV1p3beta1Paragraph[];
            /** Additional information detected for the block. */
            property?: GoogleCloudVisionV1p3beta1TextAnnotationTextProperty;
        }
        interface GoogleCloudVisionV1p3beta1BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: GoogleCloudVisionV1p3beta1NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: GoogleCloudVisionV1p3beta1Vertex[];
        }
        interface GoogleCloudVisionV1p3beta1ColorInfo {
            /** RGB components of the color. */
            color?: Color;
            /** The fraction of pixels the color occupies in the image. Value in range [0, 1]. */
            pixelFraction?: number;
            /** Image-specific score for this color. Value in range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p3beta1CropHint {
            /** The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale. */
            boundingPoly?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Confidence of this being a salient region. Range [0, 1]. */
            confidence?: number;
            /** Fraction of importance of this salient region with respect to the original image. */
            importanceFraction?: number;
        }
        interface GoogleCloudVisionV1p3beta1CropHintsAnnotation {
            /** Crop hint results. */
            cropHints?: GoogleCloudVisionV1p3beta1CropHint[];
        }
        interface GoogleCloudVisionV1p3beta1DominantColorsAnnotation {
            /** RGB color values with their score and pixel fraction. */
            colors?: GoogleCloudVisionV1p3beta1ColorInfo[];
        }
        interface GoogleCloudVisionV1p3beta1EntityAnnotation {
            /** Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features. */
            boundingPoly?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /**
             * **Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the "Eiffel Tower" entity is detected, this field
             * represents the confidence that there is a tower in the query image. Range [0, 1].
             */
            confidence?: number;
            /** Entity textual description, expressed in its `locale` language. */
            description?: string;
            /** The language code for the locale in which the entity textual `description` is expressed. */
            locale?: string;
            /**
             * The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and
             * another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
             */
            locations?: GoogleCloudVisionV1p3beta1LocationInfo[];
            /** Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/). */
            mid?: string;
            /** Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity. */
            properties?: GoogleCloudVisionV1p3beta1Property[];
            /** Overall score of the result. Range [0, 1]. */
            score?: number;
            /**
             * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of "tower" is likely higher to an image containing the detected "Eiffel Tower"
             * than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
             */
            topicality?: number;
        }
        interface GoogleCloudVisionV1p3beta1FaceAnnotation {
            /** Anger likelihood. */
            angerLikelihood?: string;
            /** Blurred likelihood. */
            blurredLikelihood?: string;
            /**
             * The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to "frame" the face in accordance with
             * human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if
             * only a partial face appears in the image to be annotated.
             */
            boundingPoly?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Detection confidence. Range [0, 1]. */
            detectionConfidence?: number;
            /**
             * The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image
             * analysis that detects the "amount of skin" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.
             */
            fdBoundingPoly?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Headwear likelihood. */
            headwearLikelihood?: string;
            /** Joy likelihood. */
            joyLikelihood?: string;
            /** Face landmarking confidence. Range [0, 1]. */
            landmarkingConfidence?: number;
            /** Detected face landmarks. */
            landmarks?: GoogleCloudVisionV1p3beta1FaceAnnotationLandmark[];
            /** Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]. */
            panAngle?: number;
            /** Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]. */
            rollAngle?: number;
            /** Sorrow likelihood. */
            sorrowLikelihood?: string;
            /** Surprise likelihood. */
            surpriseLikelihood?: string;
            /** Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]. */
            tiltAngle?: number;
            /** Under-exposed likelihood. */
            underExposedLikelihood?: string;
        }
        interface GoogleCloudVisionV1p3beta1FaceAnnotationLandmark {
            /** Face landmark position. */
            position?: GoogleCloudVisionV1p3beta1Position;
            /** Face landmark type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p3beta1GcsDestination {
            /**
             * Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent
             * a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri
             * prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will
             * begin with "filenameprefix". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output
             * files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the
             * full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.
             */
            uri?: string;
        }
        interface GoogleCloudVisionV1p3beta1GcsSource {
            /** Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p3beta1ImageAnnotationContext {
            /** If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image. */
            pageNumber?: number;
            /** The URI of the file used to produce the image. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p3beta1ImageProperties {
            /** If present, dominant colors completed successfully. */
            dominantColors?: GoogleCloudVisionV1p3beta1DominantColorsAnnotation;
        }
        interface GoogleCloudVisionV1p3beta1ImportProductSetsResponse {
            /** The list of reference_images that are imported successfully. */
            referenceImages?: GoogleCloudVisionV1p3beta1ReferenceImage[];
            /**
             * The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i]
             * stores the success or failure status of processing the i-th line of the csv, starting from line 0.
             */
            statuses?: Status[];
        }
        interface GoogleCloudVisionV1p3beta1InputConfig {
            /**
             * File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently,
             * this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.
             */
            content?: string;
            /** The Google Cloud Storage location to read the input from. */
            gcsSource?: GoogleCloudVisionV1p3beta1GcsSource;
            /** The type of the file. Currently only "application/pdf", "image/tiff" and "image/gif" are supported. Wildcards are not supported. */
            mimeType?: string;
        }
        interface GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation {
            /** Image region to which this object belongs. This must be populated. */
            boundingPoly?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p3beta1LocationInfo {
            /** lat/long location coordinates. */
            latLng?: LatLng;
        }
        interface GoogleCloudVisionV1p3beta1NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p3beta1OperationMetadata {
            /** The time when the batch request was received. */
            createTime?: string;
            /** Current state of the batch operation. */
            state?: string;
            /** The time when the operation result was last updated. */
            updateTime?: string;
        }
        interface GoogleCloudVisionV1p3beta1OutputConfig {
            /**
             * The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for
             * one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix
             * `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.
             */
            batchSize?: number;
            /** The Google Cloud Storage location to write the output(s) to. */
            gcsDestination?: GoogleCloudVisionV1p3beta1GcsDestination;
        }
        interface GoogleCloudVisionV1p3beta1Page {
            /** List of blocks of text, images etc on this page. */
            blocks?: GoogleCloudVisionV1p3beta1Block[];
            /** Confidence of the OCR results on the page. Range [0, 1]. */
            confidence?: number;
            /** Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            height?: number;
            /** Additional information detected on the page. */
            property?: GoogleCloudVisionV1p3beta1TextAnnotationTextProperty;
            /** Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            width?: number;
        }
        interface GoogleCloudVisionV1p3beta1Paragraph {
            /**
             * The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Confidence of the OCR results for the paragraph. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the paragraph. */
            property?: GoogleCloudVisionV1p3beta1TextAnnotationTextProperty;
            /** List of all words in this paragraph. */
            words?: GoogleCloudVisionV1p3beta1Word[];
        }
        interface GoogleCloudVisionV1p3beta1Position {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
            /** Z coordinate (or depth). */
            z?: number;
        }
        interface GoogleCloudVisionV1p3beta1Product {
            /** User-provided metadata to be stored with this product. Must be at most 4096 characters long. */
            description?: string;
            /** The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long. */
            displayName?: string;
            /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
            name?: string;
            /**
             * Immutable. The category for the product identified by the reference image. This should be one of "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1" or "general-v1". The
             * legacy categories "homegoods", "apparel", and "toys" are still supported, but these should not be used for new products.
             */
            productCategory?: string;
            /**
             * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g.
             * "1199". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up
             * to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will
             * refuse to work for that ProductSet.
             */
            productLabels?: GoogleCloudVisionV1p3beta1ProductKeyValue[];
        }
        interface GoogleCloudVisionV1p3beta1ProductKeyValue {
            /** The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            key?: string;
            /** The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            value?: string;
        }
        interface GoogleCloudVisionV1p3beta1ProductSearchResults {
            /**
             * Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current
             * results.
             */
            indexTime?: string;
            /**
             * List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to
             * that region. There may be duplicate product matches in the union of all the per-product results.
             */
            productGroupedResults?: GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p3beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult {
            /** The bounding polygon around the product detected in the query image. */
            boundingPoly?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** List of generic predictions for the object in the bounding box. */
            objectAnnotations?: GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p3beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation {
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p3beta1ProductSearchResultsResult {
            /** The resource name of the image from the product that is the closest match to the query. */
            image?: string;
            /** The Product. */
            product?: GoogleCloudVisionV1p3beta1Product;
            /** A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence). */
            score?: number;
        }
        interface GoogleCloudVisionV1p3beta1Property {
            /** Name of the property. */
            name?: string;
            /** Value of numeric properties. */
            uint64Value?: string;
            /** Value of the property. */
            value?: string;
        }
        interface GoogleCloudVisionV1p3beta1ReferenceImage {
            /**
             * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding
             * polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The
             * aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
             */
            boundingPolys?: GoogleCloudVisionV1p3beta1BoundingPoly[];
            /**
             * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a
             * reference image.
             */
            name?: string;
            /** Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p3beta1SafeSearchAnnotation {
            /** Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities. */
            adult?: string;
            /** Likelihood that this is a medical image. */
            medical?: string;
            /**
             * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative
             * poses, or close-ups of sensitive body areas.
             */
            racy?: string;
            /** Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive. */
            spoof?: string;
            /** Likelihood that this image contains violent content. */
            violence?: string;
        }
        interface GoogleCloudVisionV1p3beta1Symbol {
            /**
             * The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Confidence of the OCR results for the symbol. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the symbol. */
            property?: GoogleCloudVisionV1p3beta1TextAnnotationTextProperty;
            /** The actual UTF-8 representation of the symbol. */
            text?: string;
        }
        interface GoogleCloudVisionV1p3beta1TextAnnotation {
            /** List of pages detected by OCR. */
            pages?: GoogleCloudVisionV1p3beta1Page[];
            /** UTF-8 text detected on the pages. */
            text?: string;
        }
        interface GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak {
            /** True if break prepends the element. */
            isPrefix?: boolean;
            /** Detected break type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p3beta1TextAnnotationTextProperty {
            /** Detected start or end of a text segment. */
            detectedBreak?: GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage[];
        }
        interface GoogleCloudVisionV1p3beta1Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p3beta1WebDetection {
            /** The service's best guess as to the topic of the request image. Inferred from similar images on the open web. */
            bestGuessLabels?: GoogleCloudVisionV1p3beta1WebDetectionWebLabel[];
            /** Fully matching images from the Internet. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p3beta1WebDetectionWebImage[];
            /** Web pages containing the matching images from the Internet. */
            pagesWithMatchingImages?: GoogleCloudVisionV1p3beta1WebDetectionWebPage[];
            /**
             * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its
             * crops.
             */
            partialMatchingImages?: GoogleCloudVisionV1p3beta1WebDetectionWebImage[];
            /** The visually similar image results. */
            visuallySimilarImages?: GoogleCloudVisionV1p3beta1WebDetectionWebImage[];
            /** Deduced entities from similar images on the Internet. */
            webEntities?: GoogleCloudVisionV1p3beta1WebDetectionWebEntity[];
        }
        interface GoogleCloudVisionV1p3beta1WebDetectionWebEntity {
            /** Canonical description of the entity, in English. */
            description?: string;
            /** Opaque entity ID. */
            entityId?: string;
            /** Overall relevancy score for the entity. Not normalized and not comparable across different image queries. */
            score?: number;
        }
        interface GoogleCloudVisionV1p3beta1WebDetectionWebImage {
            /** (Deprecated) Overall relevancy score for the image. */
            score?: number;
            /** The result image URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p3beta1WebDetectionWebLabel {
            /** Label for extra metadata. */
            label?: string;
            /** The BCP-47 language code for `label`, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p3beta1WebDetectionWebPage {
            /** Fully matching images on the page. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p3beta1WebDetectionWebImage[];
            /** Title for the web page, may contain HTML markups. */
            pageTitle?: string;
            /** Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops. */
            partialMatchingImages?: GoogleCloudVisionV1p3beta1WebDetectionWebImage[];
            /** (Deprecated) Overall relevancy score for the web page. */
            score?: number;
            /** The result web page URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p3beta1Word {
            /**
             * The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p3beta1BoundingPoly;
            /** Confidence of the OCR results for the word. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the word. */
            property?: GoogleCloudVisionV1p3beta1TextAnnotationTextProperty;
            /** List of symbols in the word. The order of the symbols follows the natural reading order. */
            symbols?: GoogleCloudVisionV1p3beta1Symbol[];
        }
        interface GoogleCloudVisionV1p4beta1AnnotateFileResponse {
            /** If set, represents the error message for the failed request. The `responses` field will not be set in this case. */
            error?: Status;
            /** Information about the file for which this response is generated. */
            inputConfig?: GoogleCloudVisionV1p4beta1InputConfig;
            /** Individual responses to images found within the file. This field will be empty if the `error` field is set. */
            responses?: GoogleCloudVisionV1p4beta1AnnotateImageResponse[];
            /** This field gives the total number of pages in the file. */
            totalPages?: number;
        }
        interface GoogleCloudVisionV1p4beta1AnnotateImageResponse {
            /** If present, contextual information is needed to understand where this image comes from. */
            context?: GoogleCloudVisionV1p4beta1ImageAnnotationContext;
            /** If present, crop hints have completed successfully. */
            cropHintsAnnotation?: GoogleCloudVisionV1p4beta1CropHintsAnnotation;
            /** If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set. */
            error?: Status;
            /** If present, face detection has completed successfully. */
            faceAnnotations?: GoogleCloudVisionV1p4beta1FaceAnnotation[];
            /** If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text. */
            fullTextAnnotation?: GoogleCloudVisionV1p4beta1TextAnnotation;
            /** If present, image properties were extracted successfully. */
            imagePropertiesAnnotation?: GoogleCloudVisionV1p4beta1ImageProperties;
            /** If present, label detection has completed successfully. */
            labelAnnotations?: GoogleCloudVisionV1p4beta1EntityAnnotation[];
            /** If present, landmark detection has completed successfully. */
            landmarkAnnotations?: GoogleCloudVisionV1p4beta1EntityAnnotation[];
            /** If present, localized object detection has completed successfully. This will be sorted descending by confidence score. */
            localizedObjectAnnotations?: GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation[];
            /** If present, logo detection has completed successfully. */
            logoAnnotations?: GoogleCloudVisionV1p4beta1EntityAnnotation[];
            /** If present, product search has completed successfully. */
            productSearchResults?: GoogleCloudVisionV1p4beta1ProductSearchResults;
            /** If present, safe-search annotation has completed successfully. */
            safeSearchAnnotation?: GoogleCloudVisionV1p4beta1SafeSearchAnnotation;
            /** If present, text (OCR) detection has completed successfully. */
            textAnnotations?: GoogleCloudVisionV1p4beta1EntityAnnotation[];
            /** If present, web detection has completed successfully. */
            webDetection?: GoogleCloudVisionV1p4beta1WebDetection;
        }
        interface GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse {
            /** The output location and metadata from AsyncAnnotateFileRequest. */
            outputConfig?: GoogleCloudVisionV1p4beta1OutputConfig;
        }
        interface GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse {
            /** The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest. */
            responses?: GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse[];
        }
        interface GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse {
            /** The output location and metadata from AsyncBatchAnnotateImagesRequest. */
            outputConfig?: GoogleCloudVisionV1p4beta1OutputConfig;
        }
        interface GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse {
            /** The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest. */
            responses?: GoogleCloudVisionV1p4beta1AnnotateFileResponse[];
        }
        interface GoogleCloudVisionV1p4beta1BatchOperationMetadata {
            /** The time when the batch request is finished and google.longrunning.Operation.done is set to true. */
            endTime?: string;
            /** The current state of the batch operation. */
            state?: string;
            /** The time when the batch request was submitted to the server. */
            submitTime?: string;
        }
        interface GoogleCloudVisionV1p4beta1Block {
            /** Detected block type (text, image etc) for this block. */
            blockType?: string;
            /**
             * The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Confidence of the OCR results on the block. Range [0, 1]. */
            confidence?: number;
            /** List of paragraphs in this block (if this blocks is of type text). */
            paragraphs?: GoogleCloudVisionV1p4beta1Paragraph[];
            /** Additional information detected for the block. */
            property?: GoogleCloudVisionV1p4beta1TextAnnotationTextProperty;
        }
        interface GoogleCloudVisionV1p4beta1BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: GoogleCloudVisionV1p4beta1NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: GoogleCloudVisionV1p4beta1Vertex[];
        }
        interface GoogleCloudVisionV1p4beta1Celebrity {
            /** The Celebrity's description. */
            description?: string;
            /** The Celebrity's display name. */
            displayName?: string;
            /** The resource name of the preloaded Celebrity. Has the format `builtin/{mid}`. */
            name?: string;
        }
        interface GoogleCloudVisionV1p4beta1ColorInfo {
            /** RGB components of the color. */
            color?: Color;
            /** The fraction of pixels the color occupies in the image. Value in range [0, 1]. */
            pixelFraction?: number;
            /** Image-specific score for this color. Value in range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p4beta1CropHint {
            /** The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale. */
            boundingPoly?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Confidence of this being a salient region. Range [0, 1]. */
            confidence?: number;
            /** Fraction of importance of this salient region with respect to the original image. */
            importanceFraction?: number;
        }
        interface GoogleCloudVisionV1p4beta1CropHintsAnnotation {
            /** Crop hint results. */
            cropHints?: GoogleCloudVisionV1p4beta1CropHint[];
        }
        interface GoogleCloudVisionV1p4beta1DominantColorsAnnotation {
            /** RGB color values with their score and pixel fraction. */
            colors?: GoogleCloudVisionV1p4beta1ColorInfo[];
        }
        interface GoogleCloudVisionV1p4beta1EntityAnnotation {
            /** Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features. */
            boundingPoly?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /**
             * **Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the "Eiffel Tower" entity is detected, this field
             * represents the confidence that there is a tower in the query image. Range [0, 1].
             */
            confidence?: number;
            /** Entity textual description, expressed in its `locale` language. */
            description?: string;
            /** The language code for the locale in which the entity textual `description` is expressed. */
            locale?: string;
            /**
             * The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and
             * another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
             */
            locations?: GoogleCloudVisionV1p4beta1LocationInfo[];
            /** Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/). */
            mid?: string;
            /** Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity. */
            properties?: GoogleCloudVisionV1p4beta1Property[];
            /** Overall score of the result. Range [0, 1]. */
            score?: number;
            /**
             * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of "tower" is likely higher to an image containing the detected "Eiffel Tower"
             * than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
             */
            topicality?: number;
        }
        interface GoogleCloudVisionV1p4beta1FaceAnnotation {
            /** Anger likelihood. */
            angerLikelihood?: string;
            /** Blurred likelihood. */
            blurredLikelihood?: string;
            /**
             * The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to "frame" the face in accordance with
             * human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if
             * only a partial face appears in the image to be annotated.
             */
            boundingPoly?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Detection confidence. Range [0, 1]. */
            detectionConfidence?: number;
            /**
             * The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image
             * analysis that detects the "amount of skin" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.
             */
            fdBoundingPoly?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Headwear likelihood. */
            headwearLikelihood?: string;
            /** Joy likelihood. */
            joyLikelihood?: string;
            /** Face landmarking confidence. Range [0, 1]. */
            landmarkingConfidence?: number;
            /** Detected face landmarks. */
            landmarks?: GoogleCloudVisionV1p4beta1FaceAnnotationLandmark[];
            /** Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]. */
            panAngle?: number;
            /**
             * Additional recognition information. Only computed if image_context.face_recognition_params is provided, **and** a match is found to a Celebrity in the input CelebritySet. This field
             * is sorted in order of decreasing confidence values.
             */
            recognitionResult?: GoogleCloudVisionV1p4beta1FaceRecognitionResult[];
            /** Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]. */
            rollAngle?: number;
            /** Sorrow likelihood. */
            sorrowLikelihood?: string;
            /** Surprise likelihood. */
            surpriseLikelihood?: string;
            /** Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]. */
            tiltAngle?: number;
            /** Under-exposed likelihood. */
            underExposedLikelihood?: string;
        }
        interface GoogleCloudVisionV1p4beta1FaceAnnotationLandmark {
            /** Face landmark position. */
            position?: GoogleCloudVisionV1p4beta1Position;
            /** Face landmark type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p4beta1FaceRecognitionResult {
            /** The Celebrity that this face was matched to. */
            celebrity?: GoogleCloudVisionV1p4beta1Celebrity;
            /** Recognition confidence. Range [0, 1]. */
            confidence?: number;
        }
        interface GoogleCloudVisionV1p4beta1GcsDestination {
            /**
             * Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent
             * a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri
             * prefix you provide. Examples: * File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will
             * begin with "filenameprefix". * Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output
             * files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the
             * full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.
             */
            uri?: string;
        }
        interface GoogleCloudVisionV1p4beta1GcsSource {
            /** Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p4beta1ImageAnnotationContext {
            /** If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image. */
            pageNumber?: number;
            /** The URI of the file used to produce the image. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p4beta1ImageProperties {
            /** If present, dominant colors completed successfully. */
            dominantColors?: GoogleCloudVisionV1p4beta1DominantColorsAnnotation;
        }
        interface GoogleCloudVisionV1p4beta1ImportProductSetsResponse {
            /** The list of reference_images that are imported successfully. */
            referenceImages?: GoogleCloudVisionV1p4beta1ReferenceImage[];
            /**
             * The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i]
             * stores the success or failure status of processing the i-th line of the csv, starting from line 0.
             */
            statuses?: Status[];
        }
        interface GoogleCloudVisionV1p4beta1InputConfig {
            /**
             * File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently,
             * this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.
             */
            content?: string;
            /** The Google Cloud Storage location to read the input from. */
            gcsSource?: GoogleCloudVisionV1p4beta1GcsSource;
            /** The type of the file. Currently only "application/pdf", "image/tiff" and "image/gif" are supported. Wildcards are not supported. */
            mimeType?: string;
        }
        interface GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation {
            /** Image region to which this object belongs. This must be populated. */
            boundingPoly?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p4beta1LocationInfo {
            /** lat/long location coordinates. */
            latLng?: LatLng;
        }
        interface GoogleCloudVisionV1p4beta1NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p4beta1OperationMetadata {
            /** The time when the batch request was received. */
            createTime?: string;
            /** Current state of the batch operation. */
            state?: string;
            /** The time when the operation result was last updated. */
            updateTime?: string;
        }
        interface GoogleCloudVisionV1p4beta1OutputConfig {
            /**
             * The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for
             * one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix
             * `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.
             */
            batchSize?: number;
            /** The Google Cloud Storage location to write the output(s) to. */
            gcsDestination?: GoogleCloudVisionV1p4beta1GcsDestination;
        }
        interface GoogleCloudVisionV1p4beta1Page {
            /** List of blocks of text, images etc on this page. */
            blocks?: GoogleCloudVisionV1p4beta1Block[];
            /** Confidence of the OCR results on the page. Range [0, 1]. */
            confidence?: number;
            /** Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            height?: number;
            /** Additional information detected on the page. */
            property?: GoogleCloudVisionV1p4beta1TextAnnotationTextProperty;
            /** Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            width?: number;
        }
        interface GoogleCloudVisionV1p4beta1Paragraph {
            /**
             * The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Confidence of the OCR results for the paragraph. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the paragraph. */
            property?: GoogleCloudVisionV1p4beta1TextAnnotationTextProperty;
            /** List of all words in this paragraph. */
            words?: GoogleCloudVisionV1p4beta1Word[];
        }
        interface GoogleCloudVisionV1p4beta1Position {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
            /** Z coordinate (or depth). */
            z?: number;
        }
        interface GoogleCloudVisionV1p4beta1Product {
            /** User-provided metadata to be stored with this product. Must be at most 4096 characters long. */
            description?: string;
            /** The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long. */
            displayName?: string;
            /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
            name?: string;
            /**
             * Immutable. The category for the product identified by the reference image. This should be one of "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1" or "general-v1". The
             * legacy categories "homegoods", "apparel", and "toys" are still supported, but these should not be used for new products.
             */
            productCategory?: string;
            /**
             * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g.
             * "1199". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up
             * to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will
             * refuse to work for that ProductSet.
             */
            productLabels?: GoogleCloudVisionV1p4beta1ProductKeyValue[];
        }
        interface GoogleCloudVisionV1p4beta1ProductKeyValue {
            /** The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            key?: string;
            /** The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            value?: string;
        }
        interface GoogleCloudVisionV1p4beta1ProductSearchResults {
            /**
             * Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current
             * results.
             */
            indexTime?: string;
            /**
             * List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to
             * that region. There may be duplicate product matches in the union of all the per-product results.
             */
            productGroupedResults?: GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p4beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult {
            /** The bounding polygon around the product detected in the query image. */
            boundingPoly?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** List of generic predictions for the object in the bounding box. */
            objectAnnotations?: GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation[];
            /** List of results, one for each product match. */
            results?: GoogleCloudVisionV1p4beta1ProductSearchResultsResult[];
        }
        interface GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation {
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface GoogleCloudVisionV1p4beta1ProductSearchResultsResult {
            /** The resource name of the image from the product that is the closest match to the query. */
            image?: string;
            /** The Product. */
            product?: GoogleCloudVisionV1p4beta1Product;
            /** A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence). */
            score?: number;
        }
        interface GoogleCloudVisionV1p4beta1Property {
            /** Name of the property. */
            name?: string;
            /** Value of numeric properties. */
            uint64Value?: string;
            /** Value of the property. */
            value?: string;
        }
        interface GoogleCloudVisionV1p4beta1ReferenceImage {
            /**
             * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding
             * polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The
             * aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
             */
            boundingPolys?: GoogleCloudVisionV1p4beta1BoundingPoly[];
            /**
             * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a
             * reference image.
             */
            name?: string;
            /** Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`. */
            uri?: string;
        }
        interface GoogleCloudVisionV1p4beta1SafeSearchAnnotation {
            /** Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities. */
            adult?: string;
            /** Likelihood that this is a medical image. */
            medical?: string;
            /**
             * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative
             * poses, or close-ups of sensitive body areas.
             */
            racy?: string;
            /** Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive. */
            spoof?: string;
            /** Likelihood that this image contains violent content. */
            violence?: string;
        }
        interface GoogleCloudVisionV1p4beta1Symbol {
            /**
             * The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Confidence of the OCR results for the symbol. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the symbol. */
            property?: GoogleCloudVisionV1p4beta1TextAnnotationTextProperty;
            /** The actual UTF-8 representation of the symbol. */
            text?: string;
        }
        interface GoogleCloudVisionV1p4beta1TextAnnotation {
            /** List of pages detected by OCR. */
            pages?: GoogleCloudVisionV1p4beta1Page[];
            /** UTF-8 text detected on the pages. */
            text?: string;
        }
        interface GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak {
            /** True if break prepends the element. */
            isPrefix?: boolean;
            /** Detected break type. */
            type?: string;
        }
        interface GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p4beta1TextAnnotationTextProperty {
            /** Detected start or end of a text segment. */
            detectedBreak?: GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage[];
        }
        interface GoogleCloudVisionV1p4beta1Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudVisionV1p4beta1WebDetection {
            /** The service's best guess as to the topic of the request image. Inferred from similar images on the open web. */
            bestGuessLabels?: GoogleCloudVisionV1p4beta1WebDetectionWebLabel[];
            /** Fully matching images from the Internet. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p4beta1WebDetectionWebImage[];
            /** Web pages containing the matching images from the Internet. */
            pagesWithMatchingImages?: GoogleCloudVisionV1p4beta1WebDetectionWebPage[];
            /**
             * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its
             * crops.
             */
            partialMatchingImages?: GoogleCloudVisionV1p4beta1WebDetectionWebImage[];
            /** The visually similar image results. */
            visuallySimilarImages?: GoogleCloudVisionV1p4beta1WebDetectionWebImage[];
            /** Deduced entities from similar images on the Internet. */
            webEntities?: GoogleCloudVisionV1p4beta1WebDetectionWebEntity[];
        }
        interface GoogleCloudVisionV1p4beta1WebDetectionWebEntity {
            /** Canonical description of the entity, in English. */
            description?: string;
            /** Opaque entity ID. */
            entityId?: string;
            /** Overall relevancy score for the entity. Not normalized and not comparable across different image queries. */
            score?: number;
        }
        interface GoogleCloudVisionV1p4beta1WebDetectionWebImage {
            /** (Deprecated) Overall relevancy score for the image. */
            score?: number;
            /** The result image URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p4beta1WebDetectionWebLabel {
            /** Label for extra metadata. */
            label?: string;
            /** The BCP-47 language code for `label`, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface GoogleCloudVisionV1p4beta1WebDetectionWebPage {
            /** Fully matching images on the page. Can include resized copies of the query image. */
            fullMatchingImages?: GoogleCloudVisionV1p4beta1WebDetectionWebImage[];
            /** Title for the web page, may contain HTML markups. */
            pageTitle?: string;
            /** Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops. */
            partialMatchingImages?: GoogleCloudVisionV1p4beta1WebDetectionWebImage[];
            /** (Deprecated) Overall relevancy score for the web page. */
            score?: number;
            /** The result web page URL. */
            url?: string;
        }
        interface GoogleCloudVisionV1p4beta1Word {
            /**
             * The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: GoogleCloudVisionV1p4beta1BoundingPoly;
            /** Confidence of the OCR results for the word. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the word. */
            property?: GoogleCloudVisionV1p4beta1TextAnnotationTextProperty;
            /** List of symbols in the word. The order of the symbols follows the natural reading order. */
            symbols?: GoogleCloudVisionV1p4beta1Symbol[];
        }
        interface GroupedResult {
            /** The bounding polygon around the product detected in the query image. */
            boundingPoly?: BoundingPoly;
            /** List of generic predictions for the object in the bounding box. */
            objectAnnotations?: ObjectAnnotation[];
            /** List of results, one for each product match. */
            results?: Result[];
        }
        interface Image {
            /**
             * Image content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently,
             * this field only works for BatchAnnotateImages requests. It does not work for AsyncBatchAnnotateImages requests.
             */
            content?: string;
            /**
             * Google Cloud Storage image location, or publicly-accessible image URL. If both `content` and `source` are provided for an image, `content` takes precedence and is used to perform
             * the image annotation request.
             */
            source?: ImageSource;
        }
        interface ImageAnnotationContext {
            /** If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image. */
            pageNumber?: number;
            /** The URI of the file used to produce the image. */
            uri?: string;
        }
        interface ImageContext {
            /** Parameters for crop hints annotation request. */
            cropHintsParams?: CropHintsParams;
            /**
             * List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin
             * alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will
             * be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported
             * languages](https://cloud.google.com/vision/docs/languages).
             */
            languageHints?: string[];
            /** Not used. */
            latLongRect?: LatLongRect;
            /** Parameters for product search. */
            productSearchParams?: ProductSearchParams;
            /** Parameters for text detection and document text detection. */
            textDetectionParams?: TextDetectionParams;
            /** Parameters for web detection. */
            webDetectionParams?: WebDetectionParams;
        }
        interface ImageProperties {
            /** If present, dominant colors completed successfully. */
            dominantColors?: DominantColorsAnnotation;
        }
        interface ImageSource {
            /**
             * **Use `image_uri` instead.** The Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request
             * URIs](https://cloud.google.com/storage/docs/reference-uris) for more info.
             */
            gcsImageUri?: string;
            /**
             * The URI of the source image. Can be either: 1. A Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage
             * Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info. 2. A publicly-accessible image HTTP/HTTPS URL. When fetching images from HTTP/HTTPS URLs, Google
             * cannot guarantee that the request will be completed. Your request may fail if the specified host denies the request (e.g. due to request throttling or DOS prevention), or if Google
             * throttles requests to the site for abuse prevention. You should not depend on externally-hosted images for production applications. When both `gcs_image_uri` and `image_uri` are
             * specified, `image_uri` takes precedence.
             */
            imageUri?: string;
        }
        interface ImportProductSetsGcsSource {
            /**
             * The Google Cloud Storage URI of the input csv file. The URI must start with `gs://`. The format of the input csv file should be one image per line. In each line, there are 8
             * columns. 1. image-uri 2. image-id 3. product-set-id 4. product-id 5. product-category 6. product-display-name 7. labels 8. bounding-poly The `image-uri`, `product-set-id`,
             * `product-id`, and `product-category` columns are required. All other columns are optional. If the `ProductSet` or `Product` specified by the `product-set-id` and `product-id` values
             * does not exist, then the system will create a new `ProductSet` or `Product` for the image. In this case, the `product-display-name` column refers to display_name, the
             * `product-category` column refers to product_category, and the `labels` column refers to product_labels. The `image-id` column is optional but must be unique if provided. If it is
             * empty, the system will automatically assign a unique id to the image. The `product-display-name` column is optional. If it is empty, the system sets the display_name field for the
             * product to a space (" "). You can update the `display_name` later by using the API. If a `Product` with the specified `product-id` already exists, then the system ignores the
             * `product-display-name`, `product-category`, and `labels` columns. The `labels` column (optional) is a line containing a list of comma-separated key-value pairs, in the following
             * format: "key_1=value_1,key_2=value_2,...,key_n=value_n" The `bounding-poly` column (optional) identifies one region of interest from the image in the same manner as
             * `CreateReferenceImage`. If you do not specify the `bounding-poly` column, then the system will try to detect regions of interest automatically. At most one `bounding-poly` column is
             * allowed per line. If the image contains multiple regions of interest, add a line to the CSV file that includes the same product information, and the `bounding-poly` values for each
             * region of interest. The `bounding-poly` column must contain an even number of comma-separated numbers, in the format "p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y". Use non-negative integers
             * for absolute bounding polygons, and float values in [0, 1] for normalized bounding polygons. The system will resize the image if the image resolution is too large to process (larger
             * than 20MP).
             */
            csvFileUri?: string;
        }
        interface ImportProductSetsInputConfig {
            /** The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line. */
            gcsSource?: ImportProductSetsGcsSource;
        }
        interface ImportProductSetsRequest {
            /** Required. The input content for the list of requests. */
            inputConfig?: ImportProductSetsInputConfig;
        }
        interface ImportProductSetsResponse {
            /** The list of reference_images that are imported successfully. */
            referenceImages?: ReferenceImage[];
            /**
             * The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i]
             * stores the success or failure status of processing the i-th line of the csv, starting from line 0.
             */
            statuses?: Status[];
        }
        interface InputConfig {
            /**
             * File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently,
             * this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.
             */
            content?: string;
            /** The Google Cloud Storage location to read the input from. */
            gcsSource?: GcsSource;
            /** The type of the file. Currently only "application/pdf", "image/tiff" and "image/gif" are supported. Wildcards are not supported. */
            mimeType?: string;
        }
        interface KeyValue {
            /** The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            key?: string;
            /** The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes. */
            value?: string;
        }
        interface Landmark {
            /** Face landmark position. */
            position?: Position;
            /** Face landmark type. */
            type?: string;
        }
        interface LatLng {
            /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
            latitude?: number;
            /** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
            longitude?: number;
        }
        interface LatLongRect {
            /** Max lat/long pair. */
            maxLatLng?: LatLng;
            /** Min lat/long pair. */
            minLatLng?: LatLng;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface ListProductSetsResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            /** List of ProductSets. */
            productSets?: ProductSet[];
        }
        interface ListProductsInProductSetResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            /** The list of Products. */
            products?: Product[];
        }
        interface ListProductsResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            /** List of products. */
            products?: Product[];
        }
        interface ListReferenceImagesResponse {
            /** The next_page_token returned from a previous List request, if any. */
            nextPageToken?: string;
            /** The maximum number of items to return. Default 10, maximum 100. */
            pageSize?: number;
            /** The list of reference images. */
            referenceImages?: ReferenceImage[];
        }
        interface LocalizedObjectAnnotation {
            /** Image region to which this object belongs. This must be populated. */
            boundingPoly?: BoundingPoly;
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface LocationInfo {
            /** lat/long location coordinates. */
            latLng?: LatLng;
        }
        interface NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface ObjectAnnotation {
            /** The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
            /** Object ID that should align with EntityAnnotation mid. */
            mid?: string;
            /** Object name, expressed in its `language_code` language. */
            name?: string;
            /** Score of the result. Range [0, 1]. */
            score?: number;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface OperationMetadata {
            /** The time when the batch request was received. */
            createTime?: string;
            /** Current state of the batch operation. */
            state?: string;
            /** The time when the operation result was last updated. */
            updateTime?: string;
        }
        interface OutputConfig {
            /**
             * The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for
             * one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix
             * `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.
             */
            batchSize?: number;
            /** The Google Cloud Storage location to write the output(s) to. */
            gcsDestination?: GcsDestination;
        }
        interface Page {
            /** List of blocks of text, images etc on this page. */
            blocks?: Block[];
            /** Confidence of the OCR results on the page. Range [0, 1]. */
            confidence?: number;
            /** Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            height?: number;
            /** Additional information detected on the page. */
            property?: TextProperty;
            /** Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. */
            width?: number;
        }
        interface Paragraph {
            /**
             * The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: BoundingPoly;
            /** Confidence of the OCR results for the paragraph. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the paragraph. */
            property?: TextProperty;
            /** List of all words in this paragraph. */
            words?: Word[];
        }
        interface Position {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
            /** Z coordinate (or depth). */
            z?: number;
        }
        interface Product {
            /** User-provided metadata to be stored with this product. Must be at most 4096 characters long. */
            description?: string;
            /** The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long. */
            displayName?: string;
            /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
            name?: string;
            /**
             * Immutable. The category for the product identified by the reference image. This should be one of "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1" or "general-v1". The
             * legacy categories "homegoods", "apparel", and "toys" are still supported, but these should not be used for new products.
             */
            productCategory?: string;
            /**
             * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g.
             * "1199". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up
             * to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will
             * refuse to work for that ProductSet.
             */
            productLabels?: KeyValue[];
        }
        interface ProductSearchParams {
            /** The bounding polygon around the area of interest in the image. If it is not specified, system discretion will be applied. */
            boundingPoly?: BoundingPoly;
            /**
             * The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression
             * within an OR must have the same key. An '=' should be used to connect the key and value. For example, "(color = red OR color = blue) AND brand = Google" is acceptable, but "(color =
             * red OR brand = Google)" is not acceptable. "color: red" is not acceptable because it uses a ':' instead of an '='.
             */
            filter?: string;
            /**
             * The list of product categories to search in. Currently, we only consider the first category, and either "homegoods-v2", "apparel-v2", "toys-v2", "packagedgoods-v1", or "general-v1"
             * should be specified. The legacy categories "homegoods", "apparel", and "toys" are still supported but will be deprecated. For new products, please use "homegoods-v2", "apparel-v2",
             * or "toys-v2" for better product search accuracy. It is recommended to migrate existing products to these categories as well.
             */
            productCategories?: string[];
            /** The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. */
            productSet?: string;
        }
        interface ProductSearchResults {
            /**
             * Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current
             * results.
             */
            indexTime?: string;
            /**
             * List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to
             * that region. There may be duplicate product matches in the union of all the per-product results.
             */
            productGroupedResults?: GroupedResult[];
            /** List of results, one for each product match. */
            results?: Result[];
        }
        interface ProductSet {
            /** The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long. */
            displayName?: string;
            /** Output only. If there was an error with indexing the product set, the field is populated. This field is ignored when creating a ProductSet. */
            indexError?: Status;
            /**
             * Output only. The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp
             * is the default value "1970-01-01T00:00:00Z". This field is ignored when creating a ProductSet.
             */
            indexTime?: string;
            /** The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet. */
            name?: string;
        }
        interface ProductSetPurgeConfig {
            /** The ProductSet that contains the Products to delete. If a Product is a member of product_set_id in addition to other ProductSets, the Product will still be deleted. */
            productSetId?: string;
        }
        interface Property {
            /** Name of the property. */
            name?: string;
            /** Value of numeric properties. */
            uint64Value?: string;
            /** Value of the property. */
            value?: string;
        }
        interface PurgeProductsRequest {
            /** If delete_orphan_products is true, all Products that are not in any ProductSet will be deleted. */
            deleteOrphanProducts?: boolean;
            /** The default value is false. Override this value to true to actually perform the purge. */
            force?: boolean;
            /** Specify which ProductSet contains the Products to be deleted. */
            productSetPurgeConfig?: ProductSetPurgeConfig;
        }
        interface ReferenceImage {
            /**
             * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding
             * polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The
             * aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
             */
            boundingPolys?: BoundingPoly[];
            /**
             * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a
             * reference image.
             */
            name?: string;
            /** Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`. */
            uri?: string;
        }
        interface RemoveProductFromProductSetRequest {
            /** Required. The resource name for the Product to be removed from this ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID` */
            product?: string;
        }
        interface Result {
            /** The resource name of the image from the product that is the closest match to the query. */
            image?: string;
            /** The Product. */
            product?: Product;
            /** A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence). */
            score?: number;
        }
        interface SafeSearchAnnotation {
            /** Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities. */
            adult?: string;
            /** Likelihood that this is a medical image. */
            medical?: string;
            /**
             * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative
             * poses, or close-ups of sensitive body areas.
             */
            racy?: string;
            /** Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive. */
            spoof?: string;
            /** Likelihood that this image contains violent content. */
            violence?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface Symbol {
            /**
             * The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: BoundingPoly;
            /** Confidence of the OCR results for the symbol. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the symbol. */
            property?: TextProperty;
            /** The actual UTF-8 representation of the symbol. */
            text?: string;
        }
        interface TextAnnotation {
            /** List of pages detected by OCR. */
            pages?: Page[];
            /** UTF-8 text detected on the pages. */
            text?: string;
        }
        interface TextDetectionParams {
            /** By default, Cloud Vision API only includes confidence score for DOCUMENT_TEXT_DETECTION result. Set the flag to true to include confidence score for TEXT_DETECTION as well. */
            enableTextDetectionConfidenceScore?: boolean;
        }
        interface TextProperty {
            /** Detected start or end of a text segment. */
            detectedBreak?: DetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: DetectedLanguage[];
        }
        interface Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface WebDetection {
            /** The service's best guess as to the topic of the request image. Inferred from similar images on the open web. */
            bestGuessLabels?: WebLabel[];
            /** Fully matching images from the Internet. Can include resized copies of the query image. */
            fullMatchingImages?: WebImage[];
            /** Web pages containing the matching images from the Internet. */
            pagesWithMatchingImages?: WebPage[];
            /**
             * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its
             * crops.
             */
            partialMatchingImages?: WebImage[];
            /** The visually similar image results. */
            visuallySimilarImages?: WebImage[];
            /** Deduced entities from similar images on the Internet. */
            webEntities?: WebEntity[];
        }
        interface WebDetectionParams {
            /** Whether to include results derived from the geo information in the image. */
            includeGeoResults?: boolean;
        }
        interface WebEntity {
            /** Canonical description of the entity, in English. */
            description?: string;
            /** Opaque entity ID. */
            entityId?: string;
            /** Overall relevancy score for the entity. Not normalized and not comparable across different image queries. */
            score?: number;
        }
        interface WebImage {
            /** (Deprecated) Overall relevancy score for the image. */
            score?: number;
            /** The result image URL. */
            url?: string;
        }
        interface WebLabel {
            /** Label for extra metadata. */
            label?: string;
            /** The BCP-47 language code for `label`, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. */
            languageCode?: string;
        }
        interface WebPage {
            /** Fully matching images on the page. Can include resized copies of the query image. */
            fullMatchingImages?: WebImage[];
            /** Title for the web page, may contain HTML markups. */
            pageTitle?: string;
            /** Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops. */
            partialMatchingImages?: WebImage[];
            /** (Deprecated) Overall relevancy score for the web page. */
            score?: number;
            /** The result web page URL. */
            url?: string;
        }
        interface Word {
            /**
             * The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is
             * represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | |
             * 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).
             */
            boundingBox?: BoundingPoly;
            /** Confidence of the OCR results for the word. Range [0, 1]. */
            confidence?: number;
            /** Additional information detected for the word. */
            property?: TextProperty;
            /** List of symbols in the word. The order of the symbols follows the natural reading order. */
            // tslint:disable-next-line:ban-types
            symbols?: Symbol[];
        }
        interface FilesResource {
            /**
             * Service that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most
             * 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image
             * extracted.
             */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchAnnotateFilesRequest;
            }): Request<BatchAnnotateFilesResponse>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchAnnotateFilesRequest): Request<BatchAnnotateFilesResponse>;
            /**
             * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results
             * can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains
             * `AsyncBatchAnnotateFilesResponse` (results).
             */
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AsyncBatchAnnotateFilesRequest;
            }): Request<Operation>;
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AsyncBatchAnnotateFilesRequest): Request<Operation>;
        }
        interface ImagesResource {
            /** Run image detection and annotation for a batch of images. */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchAnnotateImagesRequest;
            }): Request<BatchAnnotateImagesResponse>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchAnnotateImagesRequest): Request<BatchAnnotateImagesResponse>;
            /**
             * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface.
             * `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation
             * outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
             */
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AsyncBatchAnnotateImagesRequest;
            }): Request<Operation>;
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AsyncBatchAnnotateImagesRequest): Request<Operation>;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface LocationsResource {
            operations: OperationsResource;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services
             * to override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
             * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
             * ensure the name binding is the parent resource, without the operations collection id.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
        }
        interface FilesResource {
            /**
             * Service that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most
             * 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image
             * extracted.
             */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchAnnotateFilesRequest;
            }): Request<BatchAnnotateFilesResponse>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchAnnotateFilesRequest): Request<BatchAnnotateFilesResponse>;
            /**
             * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results
             * can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains
             * `AsyncBatchAnnotateFilesResponse` (results).
             */
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AsyncBatchAnnotateFilesRequest;
            }): Request<Operation>;
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AsyncBatchAnnotateFilesRequest): Request<Operation>;
        }
        interface ImagesResource {
            /** Run image detection and annotation for a batch of images. */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchAnnotateImagesRequest;
            }): Request<BatchAnnotateImagesResponse>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchAnnotateImagesRequest): Request<BatchAnnotateImagesResponse>;
            /**
             * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface.
             * `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation
             * outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
             */
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AsyncBatchAnnotateImagesRequest;
            }): Request<Operation>;
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AsyncBatchAnnotateImagesRequest): Request<Operation>;
        }
        interface FilesResource {
            /**
             * Service that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most
             * 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image
             * extracted.
             */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchAnnotateFilesRequest;
            }): Request<BatchAnnotateFilesResponse>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchAnnotateFilesRequest): Request<BatchAnnotateFilesResponse>;
            /**
             * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results
             * can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains
             * `AsyncBatchAnnotateFilesResponse` (results).
             */
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AsyncBatchAnnotateFilesRequest;
            }): Request<Operation>;
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AsyncBatchAnnotateFilesRequest): Request<Operation>;
        }
        interface ImagesResource {
            /** Run image detection and annotation for a batch of images. */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchAnnotateImagesRequest;
            }): Request<BatchAnnotateImagesResponse>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchAnnotateImagesRequest): Request<BatchAnnotateImagesResponse>;
            /**
             * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface.
             * `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation
             * outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
             */
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AsyncBatchAnnotateImagesRequest;
            }): Request<Operation>;
            asyncBatchAnnotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically.
                 * Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AsyncBatchAnnotateImagesRequest): Request<Operation>;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface ReferenceImagesResource {
            /**
             * Creates and returns a new ReferenceImage resource. The `bounding_poly` field is optional. If `bounding_poly` is not specified, the system will try to detect regions of interest in
             * the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated
             * rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri
             * is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing
             * compatible with the parent product's product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Resource name of the product in which to create the reference image. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is
                 * returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
                 */
                referenceImageId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ReferenceImage;
            }): Request<ReferenceImage>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Resource name of the product in which to create the reference image. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A user-supplied resource id for the ReferenceImage to be added. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is
                 * returned with code ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
                 */
                referenceImageId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ReferenceImage): Request<ReferenceImage>;
            /**
             * Permanently deletes a reference image. The image metadata will be deleted right away, but search queries against ProductSets containing the image may still work until all related
             * caches are refreshed. The actual image files are not deleted from Google Cloud Storage.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name of the reference image to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets information associated with a ReferenceImage. Possible errors: * Returns NOT_FOUND if the specified image does not exist. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name of the ReferenceImage to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ReferenceImage>;
            /** Lists reference images. Possible errors: * Returns NOT_FOUND if the parent product does not exist. * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less than 1. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of items to return. Default 10, maximum 100. */
                pageSize?: number;
                /**
                 * A token identifying a page of results to be returned. This is the value of `nextPageToken` returned in a previous reference image list request. Defaults to the first page if not
                 * specified.
                 */
                pageToken?: string;
                /** Required. Resource name of the product containing the reference images. Format is `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListReferenceImagesResponse>;
        }
        interface ProductsResource {
            /**
             * Creates and returns a new product resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if
             * description is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is missing or invalid.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which the Product should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code
                 * ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
                 */
                productId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Product;
            }): Request<Product>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which the Product should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * A user-supplied resource id for this Product. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code
                 * ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
                 */
                productId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Product): Request<Product>;
            /**
             * Permanently deletes a product and its reference images. Metadata of the product and all its images will be deleted right away, but search queries against ProductSets containing the
             * product may still work until all related caches are refreshed.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of product to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets information associated with a Product. Possible errors: * Returns NOT_FOUND if the Product does not exist. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the Product to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Product>;
            /** Lists products in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of items to return. Default 10, maximum 100. */
                pageSize?: number;
                /** The next_page_token returned from a previous List request, if any. */
                pageToken?: string;
                /** Required. The project OR ProductSet from which Products should be listed. Format: `projects/PROJECT_ID/locations/LOC_ID` */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProductsResponse>;
            /**
             * Makes changes to a Product resource. Only the `display_name`, `description`, and `labels` fields can be updated right now. If labels are updated, the change will not be reflected in
             * queries until the next index time. Possible errors: * Returns NOT_FOUND if the Product does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but is
             * missing from the request or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is present in update_mask but is longer than 4096 characters. * Returns
             * INVALID_ARGUMENT if product_category is present in update_mask.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask paths include `product_labels`,
                 * `display_name`, and `description`.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Product;
            }): Request<Product>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask paths include `product_labels`,
                 * `display_name`, and `description`.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Product): Request<Product>;
            /**
             * Asynchronous API to delete all Products in a ProductSet or all Products that are in no ProductSet. If a Product is a member of the specified ProductSet in addition to other
             * ProductSets, the Product will still be deleted. It is recommended to not delete the specified ProductSet until after this operation has completed. It is also recommended to not add
             * any of the Products involved in the batch delete to a new ProductSet while this operation is running because those Products may still end up deleted. It's not possible to undo the
             * PurgeProducts operation. Therefore, it is recommended to keep the csv files used in ImportProductSets (if that was how you originally built the Product Set) before starting
             * PurgeProducts, in case you need to re-import the data after deletion. If the plan is to purge all of the Products from a ProductSet and then re-use the empty ProductSet to re-import
             * new Products into the empty ProductSet, you must wait until the PurgeProducts operation has finished for that ProductSet. The google.longrunning.Operation API can be used to keep
             * track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress)
             */
            purge(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project and location in which the Products should be deleted. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PurgeProductsRequest;
            }): Request<Operation>;
            purge(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project and location in which the Products should be deleted. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PurgeProductsRequest): Request<Operation>;
            referenceImages: ReferenceImagesResource;
        }
        interface ProductsResource {
            /**
             * Lists the Products in a ProductSet, in an unspecified order. If the ProductSet does not exist, the products field of the response will be empty. Possible errors: * Returns
             * INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The ProductSet resource for which to retrieve Products. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of items to return. Default 10, maximum 100. */
                pageSize?: number;
                /** The next_page_token returned from a previous List request, if any. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProductsInProductSetResponse>;
        }
        interface ProductSetsResource {
            /**
             * Adds a Product to the specified ProductSet. If the Product is already present, no change is made. One Product can be added to at most 100 ProductSets. Possible errors: * Returns
             * NOT_FOUND if the Product or the ProductSet doesn't exist.
             */
            addProduct(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddProductToProductSetRequest;
            }): Request<{}>;
            addProduct(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddProductToProductSetRequest): Request<{}>;
            /** Creates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which the ProductSet should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * A user-supplied resource id for this ProductSet. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code
                 * ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
                 */
                productSetId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ProductSet;
            }): Request<ProductSet>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which the ProductSet should be created. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * A user-supplied resource id for this ProductSet. If set, the server will attempt to use this value as the resource id. If it is already in use, an error is returned with code
                 * ALREADY_EXISTS. Must be at most 128 characters long. It cannot contain the character `/`.
                 */
                productSetId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ProductSet): Request<ProductSet>;
            /** Permanently deletes a ProductSet. Products and ReferenceImages in the ProductSet are not deleted. The actual image files are not deleted from Google Cloud Storage. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the ProductSet to delete. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets information associated with a ProductSet. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the ProductSet to get. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ProductSet>;
            /**
             * Asynchronous API that imports a list of reference images to specified product sets based on a list of image information. The google.longrunning.Operation API can be used to keep
             * track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress) `Operation.response` contains `ImportProductSetsResponse`.
             * (results) The input source of this method is a csv file on Google Cloud Storage. For the format of the csv file please see ImportProductSetsGcsSource.csv_file_uri.
             */
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which the ProductSets should be imported. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ImportProductSetsRequest;
            }): Request<Operation>;
            import(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which the ProductSets should be imported. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ImportProductSetsRequest): Request<Operation>;
            /** Lists ProductSets in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100, or less than 1. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of items to return. Default 10, maximum 100. */
                pageSize?: number;
                /** The next_page_token returned from a previous List request, if any. */
                pageToken?: string;
                /** Required. The project from which ProductSets should be listed. Format is `projects/PROJECT_ID/locations/LOC_ID`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProductSetsResponse>;
            /**
             * Makes changes to a ProductSet resource. Only display_name can be updated currently. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. * Returns INVALID_ARGUMENT
             * if display_name is present in update_mask but missing from the request or longer than 4096 characters.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask path is `display_name`. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ProductSet;
            }): Request<ProductSet>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The FieldMask that specifies which fields to update. If update_mask isn't specified, all mutable fields are to be updated. Valid mask path is `display_name`. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ProductSet): Request<ProductSet>;
            /** Removes a Product from the specified ProductSet. */
            removeProduct(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RemoveProductFromProductSetRequest;
            }): Request<{}>;
            removeProduct(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name for the ProductSet to modify. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RemoveProductFromProductSetRequest): Request<{}>;
            products: ProductsResource;
        }
        interface LocationsResource {
            files: FilesResource;
            images: ImagesResource;
            operations: OperationsResource;
            products: ProductsResource;
            productSets: ProductSetsResource;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface ProjectsResource {
            files: FilesResource;
            images: ImagesResource;
            locations: LocationsResource;
            operations: OperationsResource;
        }

        const files: FilesResource;

        const images: ImagesResource;

        const locations: LocationsResource;

        const operations: OperationsResource;

        const projects: ProjectsResource;
    }
}
