/* This is stub file for gapi.client.iam-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230112

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://iam.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.iam */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Lints, or validates, an IAM policy. Currently checks the google.iam.v1.Binding.condition field, which contains a condition expression for a role binding. Successful calls to this method
         * always return an HTTP `200 OK` status code, even if the linter detects an issue in the IAM policy.
         */
        await gapi.client.iam.iamPolicies.lintPolicy({
        }, {
            condition: {
                description: "Test string",
                expression: "Test string",
                location: "Test string",
                title: "Test string",
            },
            fullResourceName: "Test string",
        });
        /**
         * Returns a list of services that allow you to opt into audit logs that are not generated by default. To learn more about audit logs, see the [Logging
         * documentation](https://cloud.google.com/logging/docs/audit).
         */
        await gapi.client.iam.iamPolicies.queryAuditableServices({
        }, {
            fullResourceName: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.locations.workforcePools.operations.get({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.locations.workforcePools.providers.keys.operations.get({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.locations.workforcePools.providers.operations.get({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.locations.workforcePools.subjects.operations.get({
            name: "Test string",
        });
        /** Creates a new custom Role. */
        await gapi.client.iam.organizations.roles.create({
            parent: "Test string",
        }, {
            role: {
                deleted: true,
                description: "Test string",
                etag: "Test string",
                includedPermissions: [
                    "Test string"
                ],
                name: "Test string",
                stage: "Test string",
                title: "Test string",
            },
            roleId: "Test string",
        });
        /**
         * Deletes a custom Role. When you delete a custom role, the following changes occur immediately: * You cannot bind a principal to the custom role in an IAM Policy. * Existing bindings to
         * the custom role are not changed, but they have no effect. * By default, the response from ListRoles does not include the custom role. You have 7 days to undelete the custom role. After
         * 7 days, the following changes occur: * The custom role is permanently deleted and cannot be recovered. * If an IAM policy contains a binding to the custom role, the binding is
         * permanently removed.
         */
        await gapi.client.iam.organizations.roles.delete({
            etag: "Test string",
            name: "Test string",
        });
        /** Gets the definition of a Role. */
        await gapi.client.iam.organizations.roles.get({
            name: "Test string",
        });
        /** Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project. */
        await gapi.client.iam.organizations.roles.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
            view: "Test string",
        });
        /** Updates the definition of a custom Role. */
        await gapi.client.iam.organizations.roles.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            deleted: true,
            description: "Test string",
            etag: "Test string",
            includedPermissions: [
                "Test string"
            ],
            name: "Test string",
            stage: "Test string",
            title: "Test string",
        });
        /** Undeletes a custom Role. */
        await gapi.client.iam.organizations.roles.undelete({
            name: "Test string",
        }, {
            etag: "Test string",
        });
        /** Lists every permission that you can test on a resource. A permission is testable if you can check whether a principal has that permission on the resource. */
        await gapi.client.iam.permissions.queryTestablePermissions({
        }, {
            fullResourceName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new WorkloadIdentityPool. You cannot reuse the name of a deleted pool until 30 days after deletion. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.create({
            parent: "Test string",
            workloadIdentityPoolId: "Test string",
        }, {
            description: "Test string",
            disabled: true,
            displayName: "Test string",
            name: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a WorkloadIdentityPool. You cannot use a deleted pool to exchange external credentials for Google Cloud credentials. However, deletion does not revoke credentials that have
         * already been issued. Credentials issued for a deleted pool do not grant access to resources. If the pool is undeleted, and the credentials are not expired, they grant access again. You
         * can undelete a pool for 30 days. After 30 days, deletion is permanent. You cannot update deleted pools. However, you can view and list them.
         */
        await gapi.client.iam.projects.locations.workloadIdentityPools.delete({
            name: "Test string",
        });
        /** Gets an individual WorkloadIdentityPool. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.get({
            name: "Test string",
        });
        /** Lists all non-deleted WorkloadIdentityPools in a project. If `show_deleted` is set to `true`, then deleted pools are also listed. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
        });
        /** Updates an existing WorkloadIdentityPool. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            disabled: true,
            displayName: "Test string",
            name: "Test string",
            state: "Test string",
        });
        /** Undeletes a WorkloadIdentityPool, as long as it was deleted fewer than 30 days ago. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.undelete({
            name: "Test string",
        }, {
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.operations.get({
            name: "Test string",
        });
        /** Creates a new WorkloadIdentityPoolProvider in a WorkloadIdentityPool. You cannot reuse the name of a deleted provider until 30 days after deletion. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.create({
            parent: "Test string",
            workloadIdentityPoolProviderId: "Test string",
        }, {
            attributeCondition: "Test string",
            attributeMapping: {
                A: "Test string"
            },
            aws: {
                accountId: "Test string",
            },
            description: "Test string",
            disabled: true,
            displayName: "Test string",
            name: "Test string",
            oidc: {
                allowedAudiences: [
                    "Test string"
                ],
                issuerUri: "Test string",
            },
            saml: {
                idpMetadataXml: "Test string",
            },
            state: "Test string",
        });
        /**
         * Deletes a WorkloadIdentityPoolProvider. Deleting a provider does not revoke credentials that have already been issued; they continue to grant access. You can undelete a provider for 30
         * days. After 30 days, deletion is permanent. You cannot update deleted providers. However, you can view and list them.
         */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.delete({
            name: "Test string",
        });
        /** Gets an individual WorkloadIdentityPoolProvider. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.get({
            name: "Test string",
        });
        /** Lists all non-deleted WorkloadIdentityPoolProviders in a WorkloadIdentityPool. If `show_deleted` is set to `true`, then deleted providers are also listed. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
        });
        /** Updates an existing WorkloadIdentityPoolProvider. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            attributeCondition: "Test string",
            attributeMapping: {
                A: "Test string"
            },
            aws: {
                accountId: "Test string",
            },
            description: "Test string",
            disabled: true,
            displayName: "Test string",
            name: "Test string",
            oidc: {
                allowedAudiences: [
                    "Test string"
                ],
                issuerUri: "Test string",
            },
            saml: {
                idpMetadataXml: "Test string",
            },
            state: "Test string",
        });
        /** Undeletes a WorkloadIdentityPoolProvider, as long as it was deleted fewer than 30 days ago. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.undelete({
            name: "Test string",
        }, {
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.keys.operations.get({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.iam.projects.locations.workloadIdentityPools.providers.operations.get({
            name: "Test string",
        });
        /** Creates a new custom Role. */
        await gapi.client.iam.projects.roles.create({
            parent: "Test string",
        }, {
            role: {
                deleted: true,
                description: "Test string",
                etag: "Test string",
                includedPermissions: [
                    "Test string"
                ],
                name: "Test string",
                stage: "Test string",
                title: "Test string",
            },
            roleId: "Test string",
        });
        /**
         * Deletes a custom Role. When you delete a custom role, the following changes occur immediately: * You cannot bind a principal to the custom role in an IAM Policy. * Existing bindings to
         * the custom role are not changed, but they have no effect. * By default, the response from ListRoles does not include the custom role. You have 7 days to undelete the custom role. After
         * 7 days, the following changes occur: * The custom role is permanently deleted and cannot be recovered. * If an IAM policy contains a binding to the custom role, the binding is
         * permanently removed.
         */
        await gapi.client.iam.projects.roles.delete({
            etag: "Test string",
            name: "Test string",
        });
        /** Gets the definition of a Role. */
        await gapi.client.iam.projects.roles.get({
            name: "Test string",
        });
        /** Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project. */
        await gapi.client.iam.projects.roles.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
            view: "Test string",
        });
        /** Updates the definition of a custom Role. */
        await gapi.client.iam.projects.roles.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            deleted: true,
            description: "Test string",
            etag: "Test string",
            includedPermissions: [
                "Test string"
            ],
            name: "Test string",
            stage: "Test string",
            title: "Test string",
        });
        /** Undeletes a custom Role. */
        await gapi.client.iam.projects.roles.undelete({
            name: "Test string",
        }, {
            etag: "Test string",
        });
        /** Creates a ServiceAccount. */
        await gapi.client.iam.projects.serviceAccounts.create({
            name: "Test string",
        }, {
            accountId: "Test string",
            serviceAccount: {
                description: "Test string",
                disabled: true,
                displayName: "Test string",
                email: "Test string",
                etag: "Test string",
                name: "Test string",
                oauth2ClientId: "Test string",
                projectId: "Test string",
                uniqueId: "Test string",
            },
        });
        /**
         * Deletes a ServiceAccount. **Warning:** After you delete a service account, you might not be able to undelete it. If you know that you need to re-enable the service account in the
         * future, use DisableServiceAccount instead. If you delete a service account, IAM permanently removes the service account 30 days later. Google Cloud cannot recover the service account
         * after it is permanently removed, even if you file a support request. To help avoid unplanned outages, we recommend that you disable the service account before you delete it. Use
         * DisableServiceAccount to disable the service account, then wait at least 24 hours and watch for unintended consequences. If there are no unintended consequences, you can delete the
         * service account.
         */
        await gapi.client.iam.projects.serviceAccounts.delete({
            name: "Test string",
        });
        /**
         * Disables a ServiceAccount immediately. If an application uses the service account to authenticate, that application can no longer call Google APIs or access Google Cloud resources.
         * Existing access tokens for the service account are rejected, and requests for new access tokens will fail. To re-enable the service account, use EnableServiceAccount. After you
         * re-enable the service account, its existing access tokens will be accepted, and you can request new access tokens. To help avoid unplanned outages, we recommend that you disable the
         * service account before you delete it. Use this method to disable the service account, then wait at least 24 hours and watch for unintended consequences. If there are no unintended
         * consequences, you can delete the service account with DeleteServiceAccount.
         */
        await gapi.client.iam.projects.serviceAccounts.disable({
            name: "Test string",
        }, {
        });
        /**
         * Enables a ServiceAccount that was disabled by DisableServiceAccount. If the service account is already enabled, then this method has no effect. If the service account was disabled by
         * other means—for example, if Google disabled the service account because it was compromised—you cannot use this method to enable the service account.
         */
        await gapi.client.iam.projects.serviceAccounts.enable({
            name: "Test string",
        }, {
        });
        /** Gets a ServiceAccount. */
        await gapi.client.iam.projects.serviceAccounts.get({
            name: "Test string",
        });
        /**
         * Gets the IAM policy that is attached to a ServiceAccount. This IAM policy specifies which principals have access to the service account. This method does not tell you whether the
         * service account has been granted any roles on other resources. To check whether a service account has role grants on a resource, use the `getIamPolicy` method for that resource. For
         * example, to view the role grants for a project, call the Resource Manager API's
         * [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy) method.
         */
        await gapi.client.iam.projects.serviceAccounts.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists every ServiceAccount that belongs to a specific project. */
        await gapi.client.iam.projects.serviceAccounts.list({
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Patches a ServiceAccount. */
        await gapi.client.iam.projects.serviceAccounts.patch({
            name: "Test string",
        }, {
            serviceAccount: {
                description: "Test string",
                disabled: true,
                displayName: "Test string",
                email: "Test string",
                etag: "Test string",
                name: "Test string",
                oauth2ClientId: "Test string",
                projectId: "Test string",
                uniqueId: "Test string",
            },
            updateMask: "Test string",
        });
        /**
         * Sets the IAM policy that is attached to a ServiceAccount. Use this method to grant or revoke access to the service account. For example, you could grant a principal the ability to
         * impersonate the service account. This method does not enable the service account to access other resources. To grant roles to a service account on a resource, follow these steps: 1.
         * Call the resource's `getIamPolicy` method to get its current IAM policy. 2. Edit the policy so that it binds the service account to an IAM role for the resource. 3. Call the resource's
         * `setIamPolicy` method to update its IAM policy. For detailed instructions, see [Manage access to project, folders, and
         * organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts) or [Manage access to other
         * resources](https://cloud.google.com/iam/help/access/manage-other-resources).
         */
        await gapi.client.iam.projects.serviceAccounts.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * **Note:** This method is deprecated. Use the [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob) method in the IAM Service Account
         * Credentials API instead. If you currently use this method, see the [migration guide](https://cloud.google.com/iam/help/credentials/migrate-api) for instructions. Signs a blob using the
         * system-managed private key for a ServiceAccount.
         */
        await gapi.client.iam.projects.serviceAccounts.signBlob({
            name: "Test string",
        }, {
            bytesToSign: "Test string",
        });
        /**
         * **Note:** This method is deprecated. Use the [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt) method in the IAM Service Account
         * Credentials API instead. If you currently use this method, see the [migration guide](https://cloud.google.com/iam/help/credentials/migrate-api) for instructions. Signs a JSON Web Token
         * (JWT) using the system-managed private key for a ServiceAccount.
         */
        await gapi.client.iam.projects.serviceAccounts.signJwt({
            name: "Test string",
        }, {
            payload: "Test string",
        });
        /** Tests whether the caller has the specified permissions on a ServiceAccount. */
        await gapi.client.iam.projects.serviceAccounts.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Restores a deleted ServiceAccount. **Important:** It is not always possible to restore a deleted service account. Use this method only as a last resort. After you delete a service
         * account, IAM permanently removes the service account 30 days later. There is no way to restore a deleted service account that has been permanently removed.
         */
        await gapi.client.iam.projects.serviceAccounts.undelete({
            name: "Test string",
        }, {
        });
        /** **Note:** We are in the process of deprecating this method. Use PatchServiceAccount instead. Updates a ServiceAccount. You can update only the `display_name` field. */
        await gapi.client.iam.projects.serviceAccounts.update({
            name: "Test string",
        }, {
            description: "Test string",
            disabled: true,
            displayName: "Test string",
            email: "Test string",
            etag: "Test string",
            name: "Test string",
            oauth2ClientId: "Test string",
            projectId: "Test string",
            uniqueId: "Test string",
        });
        /** Creates a ServiceAccountKey. */
        await gapi.client.iam.projects.serviceAccounts.keys.create({
            name: "Test string",
        }, {
            keyAlgorithm: "Test string",
            privateKeyType: "Test string",
        });
        /** Deletes a ServiceAccountKey. Deleting a service account key does not revoke short-lived credentials that have been issued based on the service account key. */
        await gapi.client.iam.projects.serviceAccounts.keys.delete({
            name: "Test string",
        });
        /** Disable a ServiceAccountKey. A disabled service account key can be re-enabled with EnableServiceAccountKey. */
        await gapi.client.iam.projects.serviceAccounts.keys.disable({
            name: "Test string",
        }, {
        });
        /** Enable a ServiceAccountKey. */
        await gapi.client.iam.projects.serviceAccounts.keys.enable({
            name: "Test string",
        }, {
        });
        /** Gets a ServiceAccountKey. */
        await gapi.client.iam.projects.serviceAccounts.keys.get({
            name: "Test string",
            publicKeyType: "Test string",
        });
        /** Lists every ServiceAccountKey for a service account. */
        await gapi.client.iam.projects.serviceAccounts.keys.list({
            keyTypes: "Test string",
            name: "Test string",
        });
        /**
         * Uploads the public key portion of a key pair that you manage, and associates the public key with a ServiceAccount. After you upload the public key, you can use the private key from the
         * key pair as a service account key.
         */
        await gapi.client.iam.projects.serviceAccounts.keys.upload({
            name: "Test string",
        }, {
            publicKeyData: "Test string",
        });
        /** Gets the definition of a Role. */
        await gapi.client.iam.roles.get({
            name: "Test string",
        });
        /** Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project. */
        await gapi.client.iam.roles.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
            view: "Test string",
        });
        /** Lists roles that can be granted on a Google Cloud resource. A role is grantable if the IAM policy for the resource can contain bindings to the role. */
        await gapi.client.iam.roles.queryGrantableRoles({
        }, {
            fullResourceName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
    }
});
