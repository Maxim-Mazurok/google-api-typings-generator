/* This is stub file for gapi.client.accesscontextmanager-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231011

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://accesscontextmanager.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.accesscontextmanager */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Creates an access policy. This method fails if the organization already has an access policy. The long-running operation has a successful status after the access policy propagates to
         * long-lasting storage. Syntactic and basic semantic errors are returned in `metadata` as a BadRequest proto.
         */
        await gapi.client.accesscontextmanager.accessPolicies.create({
        }, {
            etag: "Test string",
            name: "Test string",
            parent: "Test string",
            scopes: [
                "Test string"
            ],
            title: "Test string",
        });
        /** Deletes an access policy based on the resource name. The long-running operation has a successful status after the access policy is removed from long-lasting storage. */
        await gapi.client.accesscontextmanager.accessPolicies.delete({
            name: "Test string",
        });
        /** Returns an access policy based on the name. */
        await gapi.client.accesscontextmanager.accessPolicies.get({
            name: "Test string",
        });
        /** Gets the IAM policy for the specified Access Context Manager access policy. */
        await gapi.client.accesscontextmanager.accessPolicies.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists all access policies in an organization. */
        await gapi.client.accesscontextmanager.accessPolicies.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an access policy. The long-running operation from this RPC has a successful status after the changes to the access policy propagate to long-lasting storage. */
        await gapi.client.accesscontextmanager.accessPolicies.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            etag: "Test string",
            name: "Test string",
            parent: "Test string",
            scopes: [
                "Test string"
            ],
            title: "Test string",
        });
        /**
         * Sets the IAM policy for the specified Access Context Manager access policy. This method replaces the existing IAM policy on the access policy. The IAM policy controls the set of users
         * who can perform specific operations on the Access Context Manager access policy.
         */
        await gapi.client.accesscontextmanager.accessPolicies.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does
         * not support other resources.
         */
        await gapi.client.accesscontextmanager.accessPolicies.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Creates an access level. The long-running operation from this RPC has a successful status after the access level propagates to long-lasting storage. If access levels contain errors, an
         * error response is returned for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"
                            ],
                            allowedEncryptionStatuses: [
                                "Test string"
                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }
                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"
                        ],
                        members: [
                            "Test string"
                        ],
                        negate: true,
                        regions: [
                            "Test string"
                        ],
                        requiredAccessLevels: [
                            "Test string"
                        ],
                        vpcNetworkSources: [
                            {
                                vpcSubnetwork: {
                                    network: "Test string",
                                    vpcIpSubnetworks: [
                                        "Test string"
                                    ],
                                },
                            }
                        ],
                    }
                ],
            },
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
        });
        /** Deletes an access level based on the resource name. The long-running operation from this RPC has a successful status after the access level has been removed from long-lasting storage. */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /** Gets an access level based on the resource name. */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /** Lists all access levels for an access policy. */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates an access level. The long-running operation from this RPC has a successful status after the changes to the access level propagate to long-lasting storage. If access levels
         * contain errors, an error response is returned for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"
                            ],
                            allowedEncryptionStatuses: [
                                "Test string"
                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }
                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"
                        ],
                        members: [
                            "Test string"
                        ],
                        negate: true,
                        regions: [
                            "Test string"
                        ],
                        requiredAccessLevels: [
                            "Test string"
                        ],
                        vpcNetworkSources: [
                            {
                                vpcSubnetwork: {
                                    network: "Test string",
                                    vpcIpSubnetworks: [
                                        "Test string"
                                    ],
                                },
                            }
                        ],
                    }
                ],
            },
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
        });
        /**
         * Replaces all existing access levels in an access policy with the access levels provided. This is done atomically. The long-running operation from this RPC has a successful status after
         * all replacements propagate to long-lasting storage. If the replacement contains errors, an error response is returned for the first error encountered. Upon error, the replacement is
         * cancelled, and existing access levels are not affected. The Operation.response field contains ReplaceAccessLevelsResponse. Removing access levels contained in existing service
         * perimeters result in an error.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.replaceAll({
            parent: "Test string",
        }, {
            accessLevels: [
                {
                    basic: {
                        combiningFunction: "Test string",
                        conditions: [
                            {
                                devicePolicy: {
                                    allowedDeviceManagementLevels: [
                                        "Test string"
                                    ],
                                    allowedEncryptionStatuses: [
                                        "Test string"
                                    ],
                                    osConstraints: [
                                        {
                                            minimumVersion: "Test string",
                                            osType: "Test string",
                                            requireVerifiedChromeOs: true,
                                        }
                                    ],
                                    requireAdminApproval: true,
                                    requireCorpOwned: true,
                                    requireScreenlock: true,
                                },
                                ipSubnetworks: [
                                    "Test string"
                                ],
                                members: [
                                    "Test string"
                                ],
                                negate: true,
                                regions: [
                                    "Test string"
                                ],
                                requiredAccessLevels: [
                                    "Test string"
                                ],
                                vpcNetworkSources: [
                                    {
                                        vpcSubnetwork: {
                                            network: "Test string",
                                            vpcIpSubnetworks: [
                                                "Test string"
                                            ],
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    custom: {
                        expr: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                    },
                    description: "Test string",
                    name: "Test string",
                    title: "Test string",
                }
            ],
            etag: "Test string",
        });
        /**
         * Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does
         * not support other resources.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Creates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs
         * desc contains errors, an error response is returned for the first error encountered. The name of this `AuthorizedOrgsDesc` will be assigned during creation.
         */
        await gapi.client.accesscontextmanager.accessPolicies.authorizedOrgsDescs.create({
            parent: "Test string",
        }, {
            assetType: "Test string",
            authorizationDirection: "Test string",
            authorizationType: "Test string",
            name: "Test string",
            orgs: [
                "Test string"
            ],
        });
        /**
         * Deletes an authorized orgs desc based on the resource name. The long-running operation from this RPC has a successful status after the authorized orgs desc is removed from long-lasting
         * storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.authorizedOrgsDescs.delete({
            name: "Test string",
        });
        /** Gets an authorized orgs desc based on the resource name. */
        await gapi.client.accesscontextmanager.accessPolicies.authorizedOrgsDescs.get({
            name: "Test string",
        });
        /** Lists all authorized orgs descs for an access policy. */
        await gapi.client.accesscontextmanager.accessPolicies.authorizedOrgsDescs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs
         * desc contains errors, an error response is returned for the first error encountered. Only the organization list in `AuthorizedOrgsDesc` can be updated. The name, authorization_type,
         * asset_type and authorization_direction cannot be updated.
         */
        await gapi.client.accesscontextmanager.accessPolicies.authorizedOrgsDescs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            assetType: "Test string",
            authorizationDirection: "Test string",
            authorizationType: "Test string",
            name: "Test string",
            orgs: [
                "Test string"
            ],
        });
        /**
         * Commits the dry-run specification for all the service perimeters in an access policy. A commit operation on a service perimeter involves copying its `spec` field to the `status` field
         * of the service perimeter. Only service perimeters with `use_explicit_dry_run_spec` field set to true are affected by a commit operation. The long-running operation from this RPC has a
         * successful status after the dry-run specifications for all the service perimeters have been committed. If a commit fails, it causes the long-running operation to return an error
         * response and the entire commit operation is cancelled. When successful, the Operation.response field contains CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are
         * cleared after a successful commit operation.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.commit({
            parent: "Test string",
        }, {
            etag: "Test string",
        });
        /**
         * Creates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter
         * contains errors, an error response is returned for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            spec: {
                accessLevels: [
                    "Test string"
                ],
                egressPolicies: [
                    {
                        egressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sourceRestriction: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                }
                            ],
                        },
                        egressTo: {
                            externalResources: [
                                "Test string"
                            ],
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                ingressPolicies: [
                    {
                        ingressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                    resource: "Test string",
                                }
                            ],
                        },
                        ingressTo: {
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                resources: [
                    "Test string"
                ],
                restrictedServices: [
                    "Test string"
                ],
                vpcAccessibleServices: {
                    allowedServices: [
                        "Test string"
                    ],
                    enableRestriction: true,
                },
            },
            status: {
                accessLevels: [
                    "Test string"
                ],
                egressPolicies: [
                    {
                        egressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sourceRestriction: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                }
                            ],
                        },
                        egressTo: {
                            externalResources: [
                                "Test string"
                            ],
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                ingressPolicies: [
                    {
                        ingressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                    resource: "Test string",
                                }
                            ],
                        },
                        ingressTo: {
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                resources: [
                    "Test string"
                ],
                restrictedServices: [
                    "Test string"
                ],
                vpcAccessibleServices: {
                    allowedServices: [
                        "Test string"
                    ],
                    enableRestriction: true,
                },
            },
            title: "Test string",
            useExplicitDryRunSpec: true,
        });
        /**
         * Deletes a service perimeter based on the resource name. The long-running operation from this RPC has a successful status after the service perimeter is removed from long-lasting
         * storage.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /** Gets a service perimeter based on the resource name. */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /** Lists all service perimeters for an access policy. */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter
         * contains errors, an error response is returned for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            spec: {
                accessLevels: [
                    "Test string"
                ],
                egressPolicies: [
                    {
                        egressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sourceRestriction: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                }
                            ],
                        },
                        egressTo: {
                            externalResources: [
                                "Test string"
                            ],
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                ingressPolicies: [
                    {
                        ingressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                    resource: "Test string",
                                }
                            ],
                        },
                        ingressTo: {
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                resources: [
                    "Test string"
                ],
                restrictedServices: [
                    "Test string"
                ],
                vpcAccessibleServices: {
                    allowedServices: [
                        "Test string"
                    ],
                    enableRestriction: true,
                },
            },
            status: {
                accessLevels: [
                    "Test string"
                ],
                egressPolicies: [
                    {
                        egressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sourceRestriction: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                }
                            ],
                        },
                        egressTo: {
                            externalResources: [
                                "Test string"
                            ],
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                ingressPolicies: [
                    {
                        ingressFrom: {
                            identities: [
                                "Test string"
                            ],
                            identityType: "Test string",
                            sources: [
                                {
                                    accessLevel: "Test string",
                                    resource: "Test string",
                                }
                            ],
                        },
                        ingressTo: {
                            operations: [
                                {
                                    methodSelectors: [
                                        {
                                            method: "Test string",
                                            permission: "Test string",
                                        }
                                    ],
                                    serviceName: "Test string",
                                }
                            ],
                            resources: [
                                "Test string"
                            ],
                        },
                    }
                ],
                resources: [
                    "Test string"
                ],
                restrictedServices: [
                    "Test string"
                ],
                vpcAccessibleServices: {
                    allowedServices: [
                        "Test string"
                    ],
                    enableRestriction: true,
                },
            },
            title: "Test string",
            useExplicitDryRunSpec: true,
        });
        /**
         * Replace all existing service perimeters in an access policy with the service perimeters provided. This is done atomically. The long-running operation from this RPC has a successful
         * status after all replacements propagate to long-lasting storage. Replacements containing errors result in an error response for the first error encountered. Upon an error, replacement
         * are cancelled and existing service perimeters are not affected. The Operation.response field contains ReplaceServicePerimetersResponse.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.replaceAll({
            parent: "Test string",
        }, {
            etag: "Test string",
            servicePerimeters: [
                {
                    description: "Test string",
                    name: "Test string",
                    perimeterType: "Test string",
                    spec: {
                        accessLevels: [
                            "Test string"
                        ],
                        egressPolicies: [
                            {
                                egressFrom: {
                                    identities: [
                                        "Test string"
                                    ],
                                    identityType: "Test string",
                                    sourceRestriction: "Test string",
                                    sources: [
                                        {
                                            accessLevel: "Test string",
                                        }
                                    ],
                                },
                                egressTo: {
                                    externalResources: [
                                        "Test string"
                                    ],
                                    operations: [
                                        {
                                            methodSelectors: [
                                                {
                                                    method: "Test string",
                                                    permission: "Test string",
                                                }
                                            ],
                                            serviceName: "Test string",
                                        }
                                    ],
                                    resources: [
                                        "Test string"
                                    ],
                                },
                            }
                        ],
                        ingressPolicies: [
                            {
                                ingressFrom: {
                                    identities: [
                                        "Test string"
                                    ],
                                    identityType: "Test string",
                                    sources: [
                                        {
                                            accessLevel: "Test string",
                                            resource: "Test string",
                                        }
                                    ],
                                },
                                ingressTo: {
                                    operations: [
                                        {
                                            methodSelectors: [
                                                {
                                                    method: "Test string",
                                                    permission: "Test string",
                                                }
                                            ],
                                            serviceName: "Test string",
                                        }
                                    ],
                                    resources: [
                                        "Test string"
                                    ],
                                },
                            }
                        ],
                        resources: [
                            "Test string"
                        ],
                        restrictedServices: [
                            "Test string"
                        ],
                        vpcAccessibleServices: {
                            allowedServices: [
                                "Test string"
                            ],
                            enableRestriction: true,
                        },
                    },
                    status: {
                        accessLevels: [
                            "Test string"
                        ],
                        egressPolicies: [
                            {
                                egressFrom: {
                                    identities: [
                                        "Test string"
                                    ],
                                    identityType: "Test string",
                                    sourceRestriction: "Test string",
                                    sources: [
                                        {
                                            accessLevel: "Test string",
                                        }
                                    ],
                                },
                                egressTo: {
                                    externalResources: [
                                        "Test string"
                                    ],
                                    operations: [
                                        {
                                            methodSelectors: [
                                                {
                                                    method: "Test string",
                                                    permission: "Test string",
                                                }
                                            ],
                                            serviceName: "Test string",
                                        }
                                    ],
                                    resources: [
                                        "Test string"
                                    ],
                                },
                            }
                        ],
                        ingressPolicies: [
                            {
                                ingressFrom: {
                                    identities: [
                                        "Test string"
                                    ],
                                    identityType: "Test string",
                                    sources: [
                                        {
                                            accessLevel: "Test string",
                                            resource: "Test string",
                                        }
                                    ],
                                },
                                ingressTo: {
                                    operations: [
                                        {
                                            methodSelectors: [
                                                {
                                                    method: "Test string",
                                                    permission: "Test string",
                                                }
                                            ],
                                            serviceName: "Test string",
                                        }
                                    ],
                                    resources: [
                                        "Test string"
                                    ],
                                },
                            }
                        ],
                        resources: [
                            "Test string"
                        ],
                        restrictedServices: [
                            "Test string"
                        ],
                        vpcAccessibleServices: {
                            allowedServices: [
                                "Test string"
                            ],
                            enableRestriction: true,
                        },
                    },
                    title: "Test string",
                    useExplicitDryRunSpec: true,
                }
            ],
        });
        /**
         * Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does
         * not support other resources.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.accesscontextmanager.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.accesscontextmanager.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.accesscontextmanager.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.accesscontextmanager.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Creates a GcpUserAccessBinding. If the client specifies a name, the server ignores it. Fails if a resource already exists with the same group_key. Completion of this long-running
         * operation does not necessarily signify that the new binding is deployed onto all affected users, which may take more time.
         */
        await gapi.client.accesscontextmanager.organizations.gcpUserAccessBindings.create({
            parent: "Test string",
        }, {
            accessLevels: [
                "Test string"
            ],
            dryRunAccessLevels: [
                "Test string"
            ],
            groupKey: "Test string",
            name: "Test string",
        });
        /**
         * Deletes a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the binding deletion is deployed onto all affected users, which may take more
         * time.
         */
        await gapi.client.accesscontextmanager.organizations.gcpUserAccessBindings.delete({
            name: "Test string",
        });
        /** Gets the GcpUserAccessBinding with the given name. */
        await gapi.client.accesscontextmanager.organizations.gcpUserAccessBindings.get({
            name: "Test string",
        });
        /** Lists all GcpUserAccessBindings for a Google Cloud organization. */
        await gapi.client.accesscontextmanager.organizations.gcpUserAccessBindings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the changed binding is deployed onto all affected users, which may take more
         * time.
         */
        await gapi.client.accesscontextmanager.organizations.gcpUserAccessBindings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            accessLevels: [
                "Test string"
            ],
            dryRunAccessLevels: [
                "Test string"
            ],
            groupKey: "Test string",
            name: "Test string",
        });
    }
});
