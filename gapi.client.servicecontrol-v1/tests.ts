/* This is stub file for gapi.client.servicecontrol-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230414

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://servicecontrol.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.servicecontrol */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** Manage your Google Service Control data */
        'https://www.googleapis.com/auth/servicecontrol',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Attempts to allocate quota for the specified consumer. It should be called before the operation is executed. This method requires the `servicemanagement.services.quota` permission on
         * the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam). **NOTE:** The client **must** fail-open on server errors `INTERNAL`, `UNKNOWN`,
         * `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system reliability, the server may inject these errors to prohibit any hard dependency on the quota functionality.
         */
        await gapi.client.servicecontrol.services.allocateQuota({
            serviceName: "Test string",
        }, {
            allocateOperation: {
                consumerId: "Test string",
                labels: {
                    A: "Test string"
                },
                methodName: "Test string",
                operationId: "Test string",
                quotaMetrics: [
                    {
                        metricName: "Test string",
                        metricValues: [
                            {
                                boolValue: true,
                                distributionValue: {
                                    bucketCounts: [
                                        "Test string"
                                    ],
                                    count: "Test string",
                                    exemplars: [
                                        {
                                            attachments: [
                                                {
                                                    A: 42
                                                }
                                            ],
                                            timestamp: "Test string",
                                            value: 42,
                                        }
                                    ],
                                    explicitBuckets: {
                                        bounds: [
                                            42
                                        ],
                                    },
                                    exponentialBuckets: {
                                        growthFactor: 42,
                                        numFiniteBuckets: 42,
                                        scale: 42,
                                    },
                                    linearBuckets: {
                                        numFiniteBuckets: 42,
                                        offset: 42,
                                        width: 42,
                                    },
                                    maximum: 42,
                                    mean: 42,
                                    minimum: 42,
                                    sumOfSquaredDeviation: 42,
                                },
                                doubleValue: 42,
                                endTime: "Test string",
                                int64Value: "Test string",
                                labels: {
                                    A: "Test string"
                                },
                                moneyValue: {
                                    currencyCode: "Test string",
                                    nanos: 42,
                                    units: "Test string",
                                },
                                startTime: "Test string",
                                stringValue: "Test string",
                            }
                        ],
                    }
                ],
                quotaMode: "Test string",
            },
            serviceConfigId: "Test string",
        });
        /**
         * Checks whether an operation on a service should be allowed to proceed based on the configuration of the service and related policies. It must be called before the operation is executed.
         * If feasible, the client should cache the check results and reuse them for 60 seconds. In case of any server errors, the client should rely on the cached results for much longer time to
         * avoid outage. WARNING: There is general 60s delay for the configuration and policy propagation, therefore callers MUST NOT depend on the `Check` method having the latest policy
         * information. NOTE: the CheckRequest has the size limit (wire-format byte size) of 1MB. This method requires the `servicemanagement.services.check` permission on the specified service.
         * For more information, see [Cloud IAM](https://cloud.google.com/iam).
         */
        await gapi.client.servicecontrol.services.check({
            serviceName: "Test string",
        }, {
            operation: {
                consumerId: "Test string",
                endTime: "Test string",
                importance: "Test string",
                labels: {
                    A: "Test string"
                },
                logEntries: [
                    {
                        httpRequest: {
                            cacheFillBytes: "Test string",
                            cacheHit: true,
                            cacheLookup: true,
                            cacheValidatedWithOriginServer: true,
                            latency: "Test string",
                            protocol: "Test string",
                            referer: "Test string",
                            remoteIp: "Test string",
                            requestMethod: "Test string",
                            requestSize: "Test string",
                            requestUrl: "Test string",
                            responseSize: "Test string",
                            serverIp: "Test string",
                            status: 42,
                            userAgent: "Test string",
                        },
                        insertId: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        operation: {
                            first: true,
                            id: "Test string",
                            last: true,
                            producer: "Test string",
                        },
                        protoPayload: {
                            A: 42
                        },
                        severity: "Test string",
                        sourceLocation: {
                            file: "Test string",
                            function: "Test string",
                            line: "Test string",
                        },
                        structPayload: {
                            A: 42
                        },
                        textPayload: "Test string",
                        timestamp: "Test string",
                        trace: "Test string",
                    }
                ],
                metricValueSets: [
                    {
                        metricName: "Test string",
                        metricValues: [
                            {
                                boolValue: true,
                                distributionValue: {
                                    bucketCounts: [
                                        "Test string"
                                    ],
                                    count: "Test string",
                                    exemplars: [
                                        {
                                            attachments: [
                                                {
                                                    A: 42
                                                }
                                            ],
                                            timestamp: "Test string",
                                            value: 42,
                                        }
                                    ],
                                    explicitBuckets: {
                                        bounds: [
                                            42
                                        ],
                                    },
                                    exponentialBuckets: {
                                        growthFactor: 42,
                                        numFiniteBuckets: 42,
                                        scale: 42,
                                    },
                                    linearBuckets: {
                                        numFiniteBuckets: 42,
                                        offset: 42,
                                        width: 42,
                                    },
                                    maximum: 42,
                                    mean: 42,
                                    minimum: 42,
                                    sumOfSquaredDeviation: 42,
                                },
                                doubleValue: 42,
                                endTime: "Test string",
                                int64Value: "Test string",
                                labels: {
                                    A: "Test string"
                                },
                                moneyValue: {
                                    currencyCode: "Test string",
                                    nanos: 42,
                                    units: "Test string",
                                },
                                startTime: "Test string",
                                stringValue: "Test string",
                            }
                        ],
                    }
                ],
                operationId: "Test string",
                operationName: "Test string",
                quotaProperties: {
                    quotaMode: "Test string",
                },
                resources: [
                    {
                        permission: "Test string",
                        resourceContainer: "Test string",
                        resourceLocation: "Test string",
                        resourceName: "Test string",
                    }
                ],
                startTime: "Test string",
                traceSpans: [
                    {
                        attributes: {
                            attributeMap: {
                                A: {
                                    boolValue: true,
                                    intValue: "Test string",
                                    stringValue: {
                                        truncatedByteCount: 42,
                                        value: "Test string",
                                    },
                                }
                            },
                            droppedAttributesCount: 42,
                        },
                        childSpanCount: 42,
                        displayName: {
                            truncatedByteCount: 42,
                            value: "Test string",
                        },
                        endTime: "Test string",
                        name: "Test string",
                        parentSpanId: "Test string",
                        sameProcessAsParentSpan: true,
                        spanId: "Test string",
                        spanKind: "Test string",
                        startTime: "Test string",
                        status: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                    }
                ],
                userLabels: {
                    A: "Test string"
                },
            },
            requestProjectSettings: true,
            serviceConfigId: "Test string",
            skipActivationCheck: true,
        });
        /**
         * Reports operation results to Google Service Control, such as logs and metrics. It should be called after an operation is completed. If feasible, the client should aggregate reporting
         * data for up to 5 seconds to reduce API traffic. Limiting aggregation to 5 seconds is to reduce data loss during client crashes. Clients should carefully choose the aggregation time
         * window to avoid data loss risk more than 0.01% for business and compliance reasons. NOTE: the ReportRequest has the size limit (wire-format byte size) of 1MB. This method requires the
         * `servicemanagement.services.report` permission on the specified service. For more information, see [Google Cloud IAM](https://cloud.google.com/iam).
         */
        await gapi.client.servicecontrol.services.report({
            serviceName: "Test string",
        }, {
            operations: [
                {
                    consumerId: "Test string",
                    endTime: "Test string",
                    importance: "Test string",
                    labels: {
                        A: "Test string"
                    },
                    logEntries: [
                        {
                            httpRequest: {
                                cacheFillBytes: "Test string",
                                cacheHit: true,
                                cacheLookup: true,
                                cacheValidatedWithOriginServer: true,
                                latency: "Test string",
                                protocol: "Test string",
                                referer: "Test string",
                                remoteIp: "Test string",
                                requestMethod: "Test string",
                                requestSize: "Test string",
                                requestUrl: "Test string",
                                responseSize: "Test string",
                                serverIp: "Test string",
                                status: 42,
                                userAgent: "Test string",
                            },
                            insertId: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            name: "Test string",
                            operation: {
                                first: true,
                                id: "Test string",
                                last: true,
                                producer: "Test string",
                            },
                            protoPayload: {
                                A: 42
                            },
                            severity: "Test string",
                            sourceLocation: {
                                file: "Test string",
                                function: "Test string",
                                line: "Test string",
                            },
                            structPayload: {
                                A: 42
                            },
                            textPayload: "Test string",
                            timestamp: "Test string",
                            trace: "Test string",
                        }
                    ],
                    metricValueSets: [
                        {
                            metricName: "Test string",
                            metricValues: [
                                {
                                    boolValue: true,
                                    distributionValue: {
                                        bucketCounts: [
                                            "Test string"
                                        ],
                                        count: "Test string",
                                        exemplars: [
                                            {
                                                attachments: [
                                                    {
                                                        A: 42
                                                    }
                                                ],
                                                timestamp: "Test string",
                                                value: 42,
                                            }
                                        ],
                                        explicitBuckets: {
                                            bounds: [
                                                42
                                            ],
                                        },
                                        exponentialBuckets: {
                                            growthFactor: 42,
                                            numFiniteBuckets: 42,
                                            scale: 42,
                                        },
                                        linearBuckets: {
                                            numFiniteBuckets: 42,
                                            offset: 42,
                                            width: 42,
                                        },
                                        maximum: 42,
                                        mean: 42,
                                        minimum: 42,
                                        sumOfSquaredDeviation: 42,
                                    },
                                    doubleValue: 42,
                                    endTime: "Test string",
                                    int64Value: "Test string",
                                    labels: {
                                        A: "Test string"
                                    },
                                    moneyValue: {
                                        currencyCode: "Test string",
                                        nanos: 42,
                                        units: "Test string",
                                    },
                                    startTime: "Test string",
                                    stringValue: "Test string",
                                }
                            ],
                        }
                    ],
                    operationId: "Test string",
                    operationName: "Test string",
                    quotaProperties: {
                        quotaMode: "Test string",
                    },
                    resources: [
                        {
                            permission: "Test string",
                            resourceContainer: "Test string",
                            resourceLocation: "Test string",
                            resourceName: "Test string",
                        }
                    ],
                    startTime: "Test string",
                    traceSpans: [
                        {
                            attributes: {
                                attributeMap: {
                                    A: {
                                        boolValue: true,
                                        intValue: "Test string",
                                        stringValue: {
                                            truncatedByteCount: 42,
                                            value: "Test string",
                                        },
                                    }
                                },
                                droppedAttributesCount: 42,
                            },
                            childSpanCount: 42,
                            displayName: {
                                truncatedByteCount: 42,
                                value: "Test string",
                            },
                            endTime: "Test string",
                            name: "Test string",
                            parentSpanId: "Test string",
                            sameProcessAsParentSpan: true,
                            spanId: "Test string",
                            spanKind: "Test string",
                            startTime: "Test string",
                            status: {
                                code: 42,
                                details: [
                                    {
                                        A: 42
                                    }
                                ],
                                message: "Test string",
                            },
                        }
                    ],
                    userLabels: {
                        A: "Test string"
                    },
                }
            ],
            serviceConfigId: "Test string",
        });
    }
});
