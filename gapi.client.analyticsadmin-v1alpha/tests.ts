/* This is stub file for gapi.client.analyticsadmin-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230301

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://analyticsadmin.googleapis.com/$discovery/rest?version=v1alpha');
    /** now we can use gapi.client.analyticsadmin */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** Edit Google Analytics management entities */
        'https://www.googleapis.com/auth/analytics.edit',
        /** Manage Google Analytics Account users by email address */
        'https://www.googleapis.com/auth/analytics.manage.users',
        /** View Google Analytics user permissions */
        'https://www.googleapis.com/auth/analytics.manage.users.readonly',
        /** See and download your Google Analytics data */
        'https://www.googleapis.com/auth/analytics.readonly',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Marks target Account as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted accounts. However, they can be restored using the Trash Can
         * UI. If the accounts are not restored before the expiration time, the account and all child resources (eg: Properties, GoogleAdsLinks, Streams, UserLinks) will be permanently purged.
         * https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found.
         */
        await gapi.client.analyticsadmin.accounts.delete({
            name: "Test string",
        });
        /** Lookup for a single Account. */
        await gapi.client.analyticsadmin.accounts.get({
            name: "Test string",
        });
        /** Get data sharing settings on an account. Data sharing settings are singletons. */
        await gapi.client.analyticsadmin.accounts.getDataSharingSettings({
            name: "Test string",
        });
        /**
         * Returns all accounts accessible by the caller. Note that these accounts might not currently have GA4 properties. Soft-deleted (ie: "trashed") accounts are excluded by default. Returns
         * an empty list if no relevant accounts are found.
         */
        await gapi.client.analyticsadmin.accounts.list({
            pageSize: 42,
            pageToken: "Test string",
            showDeleted: true,
        });
        /** Updates an account. */
        await gapi.client.analyticsadmin.accounts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            deleted: true,
            displayName: "Test string",
            name: "Test string",
            regionCode: "Test string",
            updateTime: "Test string",
        });
        /** Requests a ticket for creating an account. */
        await gapi.client.analyticsadmin.accounts.provisionAccountTicket({
        }, {
            account: {
                createTime: "Test string",
                deleted: true,
                displayName: "Test string",
                name: "Test string",
                regionCode: "Test string",
                updateTime: "Test string",
            },
            redirectUri: "Test string",
        });
        /**
         * Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years.
         * Data Access Reports can be requested for a property. The property must be in Google Analytics 360. This method is only available to Administrators. These data access records include GA4
         * UI Reporting, GA4 UI Explorations, GA4 Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include
         * property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see
         * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
         */
        await gapi.client.analyticsadmin.accounts.runAccessReport({
            entity: "Test string",
        }, {
            dateRanges: [
                {
                    endDate: "Test string",
                    startDate: "Test string",
                }
            ],
            dimensionFilter: {
                accessFilter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                andGroup: {
                    expressions: undefined,
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            dimensions: [
                {
                    dimensionName: "Test string",
                }
            ],
            limit: "Test string",
            metricFilter: {
                accessFilter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                andGroup: {
                    expressions: undefined,
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            metrics: [
                {
                    metricName: "Test string",
                }
            ],
            offset: "Test string",
            orderBys: [
                {
                    desc: true,
                    dimension: {
                        dimensionName: "Test string",
                        orderType: "Test string",
                    },
                    metric: {
                        metricName: "Test string",
                    },
                }
            ],
            returnEntityQuota: true,
            timeZone: "Test string",
        });
        /** Searches through all changes to an account or its children given the specified set of filters. */
        await gapi.client.analyticsadmin.accounts.searchChangeHistoryEvents({
            account: "Test string",
        }, {
            action: [
                "Test string"
            ],
            actorEmail: [
                "Test string"
            ],
            earliestChangeTime: "Test string",
            latestChangeTime: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            property: "Test string",
            resourceType: [
                "Test string"
            ],
        });
        /**
         * Creates information about multiple access bindings to an account or property. This method is transactional. If any AccessBinding cannot be created, none of the AccessBindings will be
         * created.
         */
        await gapi.client.analyticsadmin.accounts.accessBindings.batchCreate({
            parent: "Test string",
        }, {
            requests: [
                {
                    accessBinding: {
                        name: "Test string",
                        roles: [
                            "Test string"
                        ],
                        user: "Test string",
                    },
                    parent: "Test string",
                }
            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }
            ],
        });
        /** Gets information about multiple access bindings to an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple access bindings to an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    accessBinding: {
                        name: "Test string",
                        roles: [
                            "Test string"
                        ],
                        user: "Test string",
                    },
                }
            ],
        });
        /** Creates an access binding on an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.create({
            parent: "Test string",
        }, {
            name: "Test string",
            roles: [
                "Test string"
            ],
            user: "Test string",
        });
        /** Deletes an access binding on an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.delete({
            name: "Test string",
        });
        /** Gets information about an access binding. */
        await gapi.client.analyticsadmin.accounts.accessBindings.get({
            name: "Test string",
        });
        /** Lists all access bindings on an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an access binding on an account or property. */
        await gapi.client.analyticsadmin.accounts.accessBindings.patch({
            name: "Test string",
        }, {
            name: "Test string",
            roles: [
                "Test string"
            ],
            user: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"
                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }
            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }
            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"
                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }
            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"
            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"
            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Returns summaries of all accounts accessible by the caller. */
        await gapi.client.analyticsadmin.accountSummaries.list({
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or through this API) before
         * MeasurementProtocolSecret resources may be created.
         */
        await gapi.client.analyticsadmin.properties.acknowledgeUserDataCollection({
            property: "Test string",
        }, {
            acknowledgement: "Test string",
        });
        /** Creates an "GA4" property with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.create({
        }, {
            account: "Test string",
            createTime: "Test string",
            currencyCode: "Test string",
            deleteTime: "Test string",
            displayName: "Test string",
            expireTime: "Test string",
            industryCategory: "Test string",
            name: "Test string",
            parent: "Test string",
            propertyType: "Test string",
            serviceLevel: "Test string",
            timeZone: "Test string",
            updateTime: "Test string",
        });
        /**
         * Marks target Property as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted properties. However, they can be restored using the Trash
         * Can UI. If the properties are not restored before the expiration time, the Property and all child resources (eg: GoogleAdsLinks, Streams, UserLinks) will be permanently purged.
         * https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found, or is not a GA4 Property.
         */
        await gapi.client.analyticsadmin.properties.delete({
            name: "Test string",
        });
        /** Deletes a connected site tag for a Universal Analytics property. Note: this has no effect on GA4 properties. */
        await gapi.client.analyticsadmin.properties.deleteConnectedSiteTag({
        }, {
            measurementId: "Test string",
            property: "Test string",
        });
        /** Fetches the opt out status for the automated GA4 setup process for a UA property. Note: this has no effect on GA4 property. */
        await gapi.client.analyticsadmin.properties.fetchAutomatedGa4ConfigurationOptOut({
        }, {
            property: "Test string",
        });
        /** Lookup for a single "GA4" Property. */
        await gapi.client.analyticsadmin.properties.get({
            name: "Test string",
        });
        /** Lookup for a AttributionSettings singleton. */
        await gapi.client.analyticsadmin.properties.getAttributionSettings({
            name: "Test string",
        });
        /** Returns the singleton data retention settings for this property. */
        await gapi.client.analyticsadmin.properties.getDataRetentionSettings({
            name: "Test string",
        });
        /** Lookup for Google Signals settings for a property. */
        await gapi.client.analyticsadmin.properties.getGoogleSignalsSettings({
            name: "Test string",
        });
        /**
         * Returns child Properties under the specified parent Account. Only "GA4" properties will be returned. Properties will be excluded if the caller does not have access. Soft-deleted (ie:
         * "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found.
         */
        await gapi.client.analyticsadmin.properties.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            showDeleted: true,
        });
        /** Lists the connected site tags for a Universal Analytics property. Note: this has no effect on GA4 property. */
        await gapi.client.analyticsadmin.properties.listConnectedSiteTags({
        }, {
            pageSize: 42,
            pageToken: "Test string",
            property: "Test string",
        });
        /** Updates a property. */
        await gapi.client.analyticsadmin.properties.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            account: "Test string",
            createTime: "Test string",
            currencyCode: "Test string",
            deleteTime: "Test string",
            displayName: "Test string",
            expireTime: "Test string",
            industryCategory: "Test string",
            name: "Test string",
            parent: "Test string",
            propertyType: "Test string",
            serviceLevel: "Test string",
            timeZone: "Test string",
            updateTime: "Test string",
        });
        /**
         * Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years.
         * Data Access Reports can be requested for a property. The property must be in Google Analytics 360. This method is only available to Administrators. These data access records include GA4
         * UI Reporting, GA4 UI Explorations, GA4 Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include
         * property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see
         * [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
         */
        await gapi.client.analyticsadmin.properties.runAccessReport({
            entity: "Test string",
        }, {
            dateRanges: [
                {
                    endDate: "Test string",
                    startDate: "Test string",
                }
            ],
            dimensionFilter: {
                accessFilter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                andGroup: {
                    expressions: undefined,
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            dimensions: [
                {
                    dimensionName: "Test string",
                }
            ],
            limit: "Test string",
            metricFilter: {
                accessFilter: {
                    betweenFilter: {
                        fromValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                        toValue: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    numericFilter: {
                        operation: "Test string",
                        value: {
                            doubleValue: 42,
                            int64Value: "Test string",
                        },
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                andGroup: {
                    expressions: undefined,
                },
                notExpression: undefined,
                orGroup: {
                    expressions: undefined,
                },
            },
            metrics: [
                {
                    metricName: "Test string",
                }
            ],
            offset: "Test string",
            orderBys: [
                {
                    desc: true,
                    dimension: {
                        dimensionName: "Test string",
                        orderType: "Test string",
                    },
                    metric: {
                        metricName: "Test string",
                    },
                }
            ],
            returnEntityQuota: true,
            timeZone: "Test string",
        });
        /** Sets the opt out status for the automated GA4 setup process for a UA property. Note: this has no effect on GA4 property. */
        await gapi.client.analyticsadmin.properties.setAutomatedGa4ConfigurationOptOut({
        }, {
            optOut: true,
            property: "Test string",
        });
        /** Updates attribution settings on a property. */
        await gapi.client.analyticsadmin.properties.updateAttributionSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acquisitionConversionEventLookbackWindow: "Test string",
            name: "Test string",
            otherConversionEventLookbackWindow: "Test string",
            reportingAttributionModel: "Test string",
        });
        /** Updates the singleton data retention settings for this property. */
        await gapi.client.analyticsadmin.properties.updateDataRetentionSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            eventDataRetention: "Test string",
            name: "Test string",
            resetUserDataOnNewActivity: true,
        });
        /** Updates Google Signals settings for a property. */
        await gapi.client.analyticsadmin.properties.updateGoogleSignalsSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            consent: "Test string",
            name: "Test string",
            state: "Test string",
        });
        /**
         * Creates information about multiple access bindings to an account or property. This method is transactional. If any AccessBinding cannot be created, none of the AccessBindings will be
         * created.
         */
        await gapi.client.analyticsadmin.properties.accessBindings.batchCreate({
            parent: "Test string",
        }, {
            requests: [
                {
                    accessBinding: {
                        name: "Test string",
                        roles: [
                            "Test string"
                        ],
                        user: "Test string",
                    },
                    parent: "Test string",
                }
            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }
            ],
        });
        /** Gets information about multiple access bindings to an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple access bindings to an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    accessBinding: {
                        name: "Test string",
                        roles: [
                            "Test string"
                        ],
                        user: "Test string",
                    },
                }
            ],
        });
        /** Creates an access binding on an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.create({
            parent: "Test string",
        }, {
            name: "Test string",
            roles: [
                "Test string"
            ],
            user: "Test string",
        });
        /** Deletes an access binding on an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.delete({
            name: "Test string",
        });
        /** Gets information about an access binding. */
        await gapi.client.analyticsadmin.properties.accessBindings.get({
            name: "Test string",
        });
        /** Lists all access bindings on an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an access binding on an account or property. */
        await gapi.client.analyticsadmin.properties.accessBindings.patch({
            name: "Test string",
        }, {
            name: "Test string",
            roles: [
                "Test string"
            ],
            user: "Test string",
        });
        /** Archives an Audience on a property. */
        await gapi.client.analyticsadmin.properties.audiences.archive({
            name: "Test string",
        }, {
        });
        /** Creates an Audience. */
        await gapi.client.analyticsadmin.properties.audiences.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            description: "Test string",
            displayName: "Test string",
            eventTrigger: {
                eventName: "Test string",
                logCondition: "Test string",
            },
            exclusionDurationMode: "Test string",
            filterClauses: [
                {
                    clauseType: "Test string",
                    sequenceFilter: {
                        scope: "Test string",
                        sequenceMaximumDuration: "Test string",
                        sequenceSteps: [
                            {
                                constraintDuration: "Test string",
                                filterExpression: {
                                    andGroup: {
                                        filterExpressions: undefined,
                                    },
                                    dimensionOrMetricFilter: {
                                        atAnyPointInTime: true,
                                        betweenFilter: {
                                            fromValue: {
                                                doubleValue: 42,
                                                int64Value: "Test string",
                                            },
                                            toValue: {
                                                doubleValue: 42,
                                                int64Value: "Test string",
                                            },
                                        },
                                        fieldName: "Test string",
                                        inAnyNDayPeriod: 42,
                                        inListFilter: {
                                            caseSensitive: true,
                                            values: [
                                                "Test string"
                                            ],
                                        },
                                        numericFilter: {
                                            operation: "Test string",
                                            value: {
                                                doubleValue: 42,
                                                int64Value: "Test string",
                                            },
                                        },
                                        stringFilter: {
                                            caseSensitive: true,
                                            matchType: "Test string",
                                            value: "Test string",
                                        },
                                    },
                                    eventFilter: {
                                        eventName: "Test string",
                                        eventParameterFilterExpression: undefined,
                                    },
                                    notExpression: undefined,
                                    orGroup: {
                                        filterExpressions: undefined,
                                    },
                                },
                                immediatelyFollows: true,
                                scope: "Test string",
                            }
                        ],
                    },
                    simpleFilter: {
                        filterExpression: {
                            andGroup: {
                                filterExpressions: undefined,
                            },
                            dimensionOrMetricFilter: {
                                atAnyPointInTime: true,
                                betweenFilter: {
                                    fromValue: {
                                        doubleValue: 42,
                                        int64Value: "Test string",
                                    },
                                    toValue: {
                                        doubleValue: 42,
                                        int64Value: "Test string",
                                    },
                                },
                                fieldName: "Test string",
                                inAnyNDayPeriod: 42,
                                inListFilter: {
                                    caseSensitive: true,
                                    values: [
                                        "Test string"
                                    ],
                                },
                                numericFilter: {
                                    operation: "Test string",
                                    value: {
                                        doubleValue: 42,
                                        int64Value: "Test string",
                                    },
                                },
                                stringFilter: {
                                    caseSensitive: true,
                                    matchType: "Test string",
                                    value: "Test string",
                                },
                            },
                            eventFilter: {
                                eventName: "Test string",
                                eventParameterFilterExpression: undefined,
                            },
                            notExpression: undefined,
                            orGroup: {
                                filterExpressions: undefined,
                            },
                        },
                        scope: "Test string",
                    },
                }
            ],
            membershipDurationDays: 42,
            name: "Test string",
        });
        /** Lookup for a single Audience. Audiences created before 2020 may not be supported. Default audiences will not show filter definitions. */
        await gapi.client.analyticsadmin.properties.audiences.get({
            name: "Test string",
        });
        /** Lists Audiences on a property. Audiences created before 2020 may not be supported. Default audiences will not show filter definitions. */
        await gapi.client.analyticsadmin.properties.audiences.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an Audience on a property. */
        await gapi.client.analyticsadmin.properties.audiences.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            description: "Test string",
            displayName: "Test string",
            eventTrigger: {
                eventName: "Test string",
                logCondition: "Test string",
            },
            exclusionDurationMode: "Test string",
            filterClauses: [
                {
                    clauseType: "Test string",
                    sequenceFilter: {
                        scope: "Test string",
                        sequenceMaximumDuration: "Test string",
                        sequenceSteps: [
                            {
                                constraintDuration: "Test string",
                                filterExpression: {
                                    andGroup: {
                                        filterExpressions: undefined,
                                    },
                                    dimensionOrMetricFilter: {
                                        atAnyPointInTime: true,
                                        betweenFilter: {
                                            fromValue: {
                                                doubleValue: 42,
                                                int64Value: "Test string",
                                            },
                                            toValue: {
                                                doubleValue: 42,
                                                int64Value: "Test string",
                                            },
                                        },
                                        fieldName: "Test string",
                                        inAnyNDayPeriod: 42,
                                        inListFilter: {
                                            caseSensitive: true,
                                            values: [
                                                "Test string"
                                            ],
                                        },
                                        numericFilter: {
                                            operation: "Test string",
                                            value: {
                                                doubleValue: 42,
                                                int64Value: "Test string",
                                            },
                                        },
                                        stringFilter: {
                                            caseSensitive: true,
                                            matchType: "Test string",
                                            value: "Test string",
                                        },
                                    },
                                    eventFilter: {
                                        eventName: "Test string",
                                        eventParameterFilterExpression: undefined,
                                    },
                                    notExpression: undefined,
                                    orGroup: {
                                        filterExpressions: undefined,
                                    },
                                },
                                immediatelyFollows: true,
                                scope: "Test string",
                            }
                        ],
                    },
                    simpleFilter: {
                        filterExpression: {
                            andGroup: {
                                filterExpressions: undefined,
                            },
                            dimensionOrMetricFilter: {
                                atAnyPointInTime: true,
                                betweenFilter: {
                                    fromValue: {
                                        doubleValue: 42,
                                        int64Value: "Test string",
                                    },
                                    toValue: {
                                        doubleValue: 42,
                                        int64Value: "Test string",
                                    },
                                },
                                fieldName: "Test string",
                                inAnyNDayPeriod: 42,
                                inListFilter: {
                                    caseSensitive: true,
                                    values: [
                                        "Test string"
                                    ],
                                },
                                numericFilter: {
                                    operation: "Test string",
                                    value: {
                                        doubleValue: 42,
                                        int64Value: "Test string",
                                    },
                                },
                                stringFilter: {
                                    caseSensitive: true,
                                    matchType: "Test string",
                                    value: "Test string",
                                },
                            },
                            eventFilter: {
                                eventName: "Test string",
                                eventParameterFilterExpression: undefined,
                            },
                            notExpression: undefined,
                            orGroup: {
                                filterExpressions: undefined,
                            },
                        },
                        scope: "Test string",
                    },
                }
            ],
            membershipDurationDays: 42,
            name: "Test string",
        });
        /** Lookup for a single BigQuery Link. */
        await gapi.client.analyticsadmin.properties.bigQueryLinks.get({
            name: "Test string",
        });
        /** Lists BigQuery Links on a property. */
        await gapi.client.analyticsadmin.properties.bigQueryLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a conversion event with the specified attributes. */
        await gapi.client.analyticsadmin.properties.conversionEvents.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            custom: true,
            deletable: true,
            eventName: "Test string",
            name: "Test string",
        });
        /** Deletes a conversion event in a property. */
        await gapi.client.analyticsadmin.properties.conversionEvents.delete({
            name: "Test string",
        });
        /** Retrieve a single conversion event. */
        await gapi.client.analyticsadmin.properties.conversionEvents.get({
            name: "Test string",
        });
        /** Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found. */
        await gapi.client.analyticsadmin.properties.conversionEvents.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Archives a CustomDimension on a property. */
        await gapi.client.analyticsadmin.properties.customDimensions.archive({
            name: "Test string",
        }, {
        });
        /** Creates a CustomDimension. */
        await gapi.client.analyticsadmin.properties.customDimensions.create({
            parent: "Test string",
        }, {
            description: "Test string",
            disallowAdsPersonalization: true,
            displayName: "Test string",
            name: "Test string",
            parameterName: "Test string",
            scope: "Test string",
        });
        /** Lookup for a single CustomDimension. */
        await gapi.client.analyticsadmin.properties.customDimensions.get({
            name: "Test string",
        });
        /** Lists CustomDimensions on a property. */
        await gapi.client.analyticsadmin.properties.customDimensions.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a CustomDimension on a property. */
        await gapi.client.analyticsadmin.properties.customDimensions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            disallowAdsPersonalization: true,
            displayName: "Test string",
            name: "Test string",
            parameterName: "Test string",
            scope: "Test string",
        });
        /** Archives a CustomMetric on a property. */
        await gapi.client.analyticsadmin.properties.customMetrics.archive({
            name: "Test string",
        }, {
        });
        /** Creates a CustomMetric. */
        await gapi.client.analyticsadmin.properties.customMetrics.create({
            parent: "Test string",
        }, {
            description: "Test string",
            displayName: "Test string",
            measurementUnit: "Test string",
            name: "Test string",
            parameterName: "Test string",
            restrictedMetricType: [
                "Test string"
            ],
            scope: "Test string",
        });
        /** Lookup for a single CustomMetric. */
        await gapi.client.analyticsadmin.properties.customMetrics.get({
            name: "Test string",
        });
        /** Lists CustomMetrics on a property. */
        await gapi.client.analyticsadmin.properties.customMetrics.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a CustomMetric on a property. */
        await gapi.client.analyticsadmin.properties.customMetrics.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            displayName: "Test string",
            measurementUnit: "Test string",
            name: "Test string",
            parameterName: "Test string",
            restrictedMetricType: [
                "Test string"
            ],
            scope: "Test string",
        });
        /** Creates a DataStream. */
        await gapi.client.analyticsadmin.properties.dataStreams.create({
            parent: "Test string",
        }, {
            androidAppStreamData: {
                firebaseAppId: "Test string",
                packageName: "Test string",
            },
            createTime: "Test string",
            displayName: "Test string",
            iosAppStreamData: {
                bundleId: "Test string",
                firebaseAppId: "Test string",
            },
            name: "Test string",
            type: "Test string",
            updateTime: "Test string",
            webStreamData: {
                defaultUri: "Test string",
                firebaseAppId: "Test string",
                measurementId: "Test string",
            },
        });
        /** Deletes a DataStream on a property. */
        await gapi.client.analyticsadmin.properties.dataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single DataStream. */
        await gapi.client.analyticsadmin.properties.dataStreams.get({
            name: "Test string",
        });
        /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
        await gapi.client.analyticsadmin.properties.dataStreams.getGlobalSiteTag({
            name: "Test string",
        });
        /** Lists DataStreams on a property. */
        await gapi.client.analyticsadmin.properties.dataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a DataStream on a property. */
        await gapi.client.analyticsadmin.properties.dataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            androidAppStreamData: {
                firebaseAppId: "Test string",
                packageName: "Test string",
            },
            createTime: "Test string",
            displayName: "Test string",
            iosAppStreamData: {
                bundleId: "Test string",
                firebaseAppId: "Test string",
            },
            name: "Test string",
            type: "Test string",
            updateTime: "Test string",
            webStreamData: {
                defaultUri: "Test string",
                firebaseAppId: "Test string",
                measurementId: "Test string",
            },
        });
        /** Creates a measurement protocol secret. */
        await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.create({
            parent: "Test string",
        }, {
            displayName: "Test string",
            name: "Test string",
            secretValue: "Test string",
        });
        /** Deletes target MeasurementProtocolSecret. */
        await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.delete({
            name: "Test string",
        });
        /** Lookup for a single "GA4" MeasurementProtocolSecret. */
        await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.get({
            name: "Test string",
        });
        /** Returns child MeasurementProtocolSecrets under the specified parent Property. */
        await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a measurement protocol secret. */
        await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            name: "Test string",
            secretValue: "Test string",
        });
        /** Approves a DisplayVideo360AdvertiserLinkProposal. The DisplayVideo360AdvertiserLinkProposal will be deleted and a new DisplayVideo360AdvertiserLink will be created. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.approve({
            name: "Test string",
        }, {
        });
        /**
         * Cancels a DisplayVideo360AdvertiserLinkProposal. Cancelling can mean either: - Declining a proposal initiated from Display & Video 360 - Withdrawing a proposal initiated from Google
         * Analytics After being cancelled, a proposal will eventually be deleted automatically.
         */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.cancel({
            name: "Test string",
        }, {
        });
        /** Creates a DisplayVideo360AdvertiserLinkProposal. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            advertiserDisplayName: "Test string",
            advertiserId: "Test string",
            campaignDataSharingEnabled: true,
            costDataSharingEnabled: true,
            linkProposalStatusDetails: {
                linkProposalInitiatingProduct: "Test string",
                linkProposalState: "Test string",
                requestorEmail: "Test string",
            },
            name: "Test string",
            validationEmail: "Test string",
        });
        /** Deletes a DisplayVideo360AdvertiserLinkProposal on a property. This can only be used on cancelled proposals. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.delete({
            name: "Test string",
        });
        /** Lookup for a single DisplayVideo360AdvertiserLinkProposal. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.get({
            name: "Test string",
        });
        /** Lists DisplayVideo360AdvertiserLinkProposals on a property. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Creates a DisplayVideo360AdvertiserLink. This can only be utilized by users who have proper authorization both on the Google Analytics property and on the Display & Video 360
         * advertiser. Users who do not have access to the Display & Video 360 advertiser should instead seek to create a DisplayVideo360LinkProposal.
         */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            advertiserDisplayName: "Test string",
            advertiserId: "Test string",
            campaignDataSharingEnabled: true,
            costDataSharingEnabled: true,
            name: "Test string",
        });
        /** Deletes a DisplayVideo360AdvertiserLink on a property. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.delete({
            name: "Test string",
        });
        /** Look up a single DisplayVideo360AdvertiserLink */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.get({
            name: "Test string",
        });
        /** Lists all DisplayVideo360AdvertiserLinks on a property. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a DisplayVideo360AdvertiserLink on a property. */
        await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            advertiserDisplayName: "Test string",
            advertiserId: "Test string",
            campaignDataSharingEnabled: true,
            costDataSharingEnabled: true,
            name: "Test string",
        });
        /** Creates a ExpandedDataSet. */
        await gapi.client.analyticsadmin.properties.expandedDataSets.create({
            parent: "Test string",
        }, {
            dataCollectionStartTime: "Test string",
            description: "Test string",
            dimensionFilterExpression: {
                andGroup: {
                    filterExpressions: undefined,
                },
                filter: {
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
            },
            dimensionNames: [
                "Test string"
            ],
            displayName: "Test string",
            metricNames: [
                "Test string"
            ],
            name: "Test string",
        });
        /** Deletes a ExpandedDataSet on a property. */
        await gapi.client.analyticsadmin.properties.expandedDataSets.delete({
            name: "Test string",
        });
        /** Lookup for a single ExpandedDataSet. */
        await gapi.client.analyticsadmin.properties.expandedDataSets.get({
            name: "Test string",
        });
        /** Lists ExpandedDataSets on a property. */
        await gapi.client.analyticsadmin.properties.expandedDataSets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a ExpandedDataSet on a property. */
        await gapi.client.analyticsadmin.properties.expandedDataSets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            dataCollectionStartTime: "Test string",
            description: "Test string",
            dimensionFilterExpression: {
                andGroup: {
                    filterExpressions: undefined,
                },
                filter: {
                    fieldName: "Test string",
                    inListFilter: {
                        caseSensitive: true,
                        values: [
                            "Test string"
                        ],
                    },
                    stringFilter: {
                        caseSensitive: true,
                        matchType: "Test string",
                        value: "Test string",
                    },
                },
                notExpression: undefined,
            },
            dimensionNames: [
                "Test string"
            ],
            displayName: "Test string",
            metricNames: [
                "Test string"
            ],
            name: "Test string",
        });
        /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Deletes a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
            name: "Test string",
        });
        /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a GoogleAdsLink. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            creatorEmailAddress: "Test string",
            customerId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
            name: "Test string",
        });
        /** Lists GoogleAdsLinks on a property. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            creatorEmailAddress: "Test string",
            customerId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Creates a SearchAds360Link. */
        await gapi.client.analyticsadmin.properties.searchAds360Links.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            advertiserDisplayName: "Test string",
            advertiserId: "Test string",
            campaignDataSharingEnabled: true,
            costDataSharingEnabled: true,
            name: "Test string",
            siteStatsSharingEnabled: true,
        });
        /** Deletes a SearchAds360Link on a property. */
        await gapi.client.analyticsadmin.properties.searchAds360Links.delete({
            name: "Test string",
        });
        /** Look up a single SearchAds360Link */
        await gapi.client.analyticsadmin.properties.searchAds360Links.get({
            name: "Test string",
        });
        /** Lists all SearchAds360Links on a property. */
        await gapi.client.analyticsadmin.properties.searchAds360Links.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a SearchAds360Link on a property. */
        await gapi.client.analyticsadmin.properties.searchAds360Links.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            advertiserDisplayName: "Test string",
            advertiserId: "Test string",
            campaignDataSharingEnabled: true,
            costDataSharingEnabled: true,
            name: "Test string",
            siteStatsSharingEnabled: true,
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.properties.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.properties.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"
                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }
            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }
            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"
                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }
            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.properties.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"
            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"
            ],
            emailAddress: "Test string",
            name: "Test string",
        });
    }
});
