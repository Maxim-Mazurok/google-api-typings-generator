/* This is stub file for gapi.client.analyticsadmin-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241112

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://analyticsadmin.googleapis.com/$discovery/rest?version=v1alpha'
  );
  /** now we can use gapi.client.analyticsadmin */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Edit Google Analytics management entities */
    'https://www.googleapis.com/auth/analytics.edit',
    /** Manage Google Analytics Account users by email address */
    'https://www.googleapis.com/auth/analytics.manage.users',
    /** View Google Analytics user permissions */
    'https://www.googleapis.com/auth/analytics.manage.users.readonly',
    /** See and download your Google Analytics data */
    'https://www.googleapis.com/auth/analytics.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Marks target Account as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted accounts. However, they can be restored using the Trash Can UI. If the accounts are not restored before the expiration time, the account and all child resources (eg: Properties, GoogleAdsLinks, Streams, AccessBindings) will be permanently purged. https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found. */
    await gapi.client.analyticsadmin.accounts.delete({
      name: 'Test string',
    });
    /** Lookup for a single Account. */
    await gapi.client.analyticsadmin.accounts.get({
      name: 'Test string',
    });
    /** Get data sharing settings on an account. Data sharing settings are singletons. */
    await gapi.client.analyticsadmin.accounts.getDataSharingSettings({
      name: 'Test string',
    });
    /** Returns all accounts accessible by the caller. Note that these accounts might not currently have GA properties. Soft-deleted (ie: "trashed") accounts are excluded by default. Returns an empty list if no relevant accounts are found. */
    await gapi.client.analyticsadmin.accounts.list({
      pageSize: 42,
      pageToken: 'Test string',
      showDeleted: true,
    });
    /** Updates an account. */
    await gapi.client.analyticsadmin.accounts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        deleted: true,
        displayName: 'Test string',
        gmpOrganization: 'Test string',
        name: 'Test string',
        regionCode: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Requests a ticket for creating an account. */
    await gapi.client.analyticsadmin.accounts.provisionAccountTicket(
      {},
      {
        account: {
          createTime: 'Test string',
          deleted: true,
          displayName: 'Test string',
          gmpOrganization: 'Test string',
          name: 'Test string',
          regionCode: 'Test string',
          updateTime: 'Test string',
        },
        redirectUri: 'Test string',
      }
    );
    /** Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. Reports may be requested for any property, but dimensions that aren't related to quota can only be requested on Google Analytics 360 properties. This method is only available to Administrators. These data access records include GA UI Reporting, GA UI Explorations, GA Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents). To give your feedback on this API, complete the [Google Analytics Access Reports feedback](https://docs.google.com/forms/d/e/1FAIpQLSdmEBUrMzAEdiEKk5TV5dEHvDUZDRlgWYdQdAeSdtR4hVjEhw/viewform) form. */
    await gapi.client.analyticsadmin.accounts.runAccessReport(
      {
        entity: 'Test string',
      },
      {
        dateRanges: [
          {
            endDate: 'Test string',
            startDate: 'Test string',
          },
        ],
        dimensionFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        dimensions: [
          {
            dimensionName: 'Test string',
          },
        ],
        expandGroups: true,
        includeAllUsers: true,
        limit: 'Test string',
        metricFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        metrics: [
          {
            metricName: 'Test string',
          },
        ],
        offset: 'Test string',
        orderBys: [
          {
            desc: true,
            dimension: {
              dimensionName: 'Test string',
              orderType: 'Test string',
            },
            metric: {
              metricName: 'Test string',
            },
          },
        ],
        returnEntityQuota: true,
        timeZone: 'Test string',
      }
    );
    /** Searches through all changes to an account or its children given the specified set of filters. */
    await gapi.client.analyticsadmin.accounts.searchChangeHistoryEvents(
      {
        account: 'Test string',
      },
      {
        action: ['Test string'],
        actorEmail: ['Test string'],
        earliestChangeTime: 'Test string',
        latestChangeTime: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        property: 'Test string',
        resourceType: ['Test string'],
      }
    );
    /** Creates information about multiple access bindings to an account or property. This method is transactional. If any AccessBinding cannot be created, none of the AccessBindings will be created. */
    await gapi.client.analyticsadmin.accounts.accessBindings.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            accessBinding: {
              name: 'Test string',
              roles: ['Test string'],
              user: 'Test string',
            },
            parent: 'Test string',
          },
        ],
      }
    );
    /** Deletes information about multiple users' links to an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.batchDelete(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            name: 'Test string',
          },
        ],
      }
    );
    /** Gets information about multiple access bindings to an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.batchGet({
      names: 'Test string',
      parent: 'Test string',
    });
    /** Updates information about multiple access bindings to an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            accessBinding: {
              name: 'Test string',
              roles: ['Test string'],
              user: 'Test string',
            },
          },
        ],
      }
    );
    /** Creates an access binding on an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.create(
      {
        parent: 'Test string',
      },
      {
        name: 'Test string',
        roles: ['Test string'],
        user: 'Test string',
      }
    );
    /** Deletes an access binding on an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.delete({
      name: 'Test string',
    });
    /** Gets information about an access binding. */
    await gapi.client.analyticsadmin.accounts.accessBindings.get({
      name: 'Test string',
    });
    /** Lists all access bindings on an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an access binding on an account or property. */
    await gapi.client.analyticsadmin.accounts.accessBindings.patch(
      {
        name: 'Test string',
      },
      {
        name: 'Test string',
        roles: ['Test string'],
        user: 'Test string',
      }
    );
    /** Returns summaries of all accounts accessible by the caller. */
    await gapi.client.analyticsadmin.accountSummaries.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or through this API) before MeasurementProtocolSecret resources may be created. */
    await gapi.client.analyticsadmin.properties.acknowledgeUserDataCollection(
      {
        property: 'Test string',
      },
      {
        acknowledgement: 'Test string',
      }
    );
    /** Creates a Google Analytics property with the specified location and attributes. */
    await gapi.client.analyticsadmin.properties.create(
      {},
      {
        account: 'Test string',
        createTime: 'Test string',
        currencyCode: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        expireTime: 'Test string',
        industryCategory: 'Test string',
        name: 'Test string',
        parent: 'Test string',
        propertyType: 'Test string',
        serviceLevel: 'Test string',
        timeZone: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a connected site tag for a Universal Analytics property. You can create a maximum of 20 connected site tags per property. Note: This API cannot be used on GA4 properties. */
    await gapi.client.analyticsadmin.properties.createConnectedSiteTag(
      {},
      {
        connectedSiteTag: {
          displayName: 'Test string',
          tagId: 'Test string',
        },
        property: 'Test string',
      }
    );
    /** Create a roll-up property and all roll-up property source links. */
    await gapi.client.analyticsadmin.properties.createRollupProperty(
      {},
      {
        rollupProperty: {
          account: 'Test string',
          createTime: 'Test string',
          currencyCode: 'Test string',
          deleteTime: 'Test string',
          displayName: 'Test string',
          expireTime: 'Test string',
          industryCategory: 'Test string',
          name: 'Test string',
          parent: 'Test string',
          propertyType: 'Test string',
          serviceLevel: 'Test string',
          timeZone: 'Test string',
          updateTime: 'Test string',
        },
        sourceProperties: ['Test string'],
      }
    );
    /** Marks target Property as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted properties. However, they can be restored using the Trash Can UI. If the properties are not restored before the expiration time, the Property and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings) will be permanently purged. https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found. */
    await gapi.client.analyticsadmin.properties.delete({
      name: 'Test string',
    });
    /** Deletes a connected site tag for a Universal Analytics property. Note: this has no effect on GA4 properties. */
    await gapi.client.analyticsadmin.properties.deleteConnectedSiteTag(
      {},
      {
        property: 'Test string',
        tagId: 'Test string',
      }
    );
    /** Fetches the opt out status for the automated GA4 setup process for a UA property. Note: this has no effect on GA4 property. */
    await gapi.client.analyticsadmin.properties.fetchAutomatedGa4ConfigurationOptOut(
      {},
      {
        property: 'Test string',
      }
    );
    /** Given a specified UA property, looks up the GA4 property connected to it. Note: this cannot be used with GA4 properties. */
    await gapi.client.analyticsadmin.properties.fetchConnectedGa4Property({
      property: 'Test string',
    });
    /** Lookup for a single GA Property. */
    await gapi.client.analyticsadmin.properties.get({
      name: 'Test string',
    });
    /** Lookup for a AttributionSettings singleton. */
    await gapi.client.analyticsadmin.properties.getAttributionSettings({
      name: 'Test string',
    });
    /** Returns the singleton data retention settings for this property. */
    await gapi.client.analyticsadmin.properties.getDataRetentionSettings({
      name: 'Test string',
    });
    /** Lookup for Google Signals settings for a property. */
    await gapi.client.analyticsadmin.properties.getGoogleSignalsSettings({
      name: 'Test string',
    });
    /** Returns child Properties under the specified parent Account. Properties will be excluded if the caller does not have access. Soft-deleted (ie: "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found. */
    await gapi.client.analyticsadmin.properties.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      showDeleted: true,
    });
    /** Lists the connected site tags for a Universal Analytics property. A maximum of 20 connected site tags will be returned. Note: this has no effect on GA4 property. */
    await gapi.client.analyticsadmin.properties.listConnectedSiteTags(
      {},
      {
        property: 'Test string',
      }
    );
    /** Updates a property. */
    await gapi.client.analyticsadmin.properties.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        account: 'Test string',
        createTime: 'Test string',
        currencyCode: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        expireTime: 'Test string',
        industryCategory: 'Test string',
        name: 'Test string',
        parent: 'Test string',
        propertyType: 'Test string',
        serviceLevel: 'Test string',
        timeZone: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Create a subproperty and a subproperty event filter that applies to the created subproperty. */
    await gapi.client.analyticsadmin.properties.provisionSubproperty(
      {},
      {
        subproperty: {
          account: 'Test string',
          createTime: 'Test string',
          currencyCode: 'Test string',
          deleteTime: 'Test string',
          displayName: 'Test string',
          expireTime: 'Test string',
          industryCategory: 'Test string',
          name: 'Test string',
          parent: 'Test string',
          propertyType: 'Test string',
          serviceLevel: 'Test string',
          timeZone: 'Test string',
          updateTime: 'Test string',
        },
        subpropertyEventFilter: {
          applyToProperty: 'Test string',
          filterClauses: [
            {
              filterClauseType: 'Test string',
              filterExpression: {
                filterCondition: {
                  fieldName: 'Test string',
                  nullFilter: true,
                  stringFilter: {
                    caseSensitive: true,
                    matchType: 'Test string',
                    value: 'Test string',
                  },
                },
                notExpression: undefined,
                orGroup: {
                  filterExpressions: undefined,
                },
              },
            },
          ],
          name: 'Test string',
        },
      }
    );
    /** Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. Reports may be requested for any property, but dimensions that aren't related to quota can only be requested on Google Analytics 360 properties. This method is only available to Administrators. These data access records include GA UI Reporting, GA UI Explorations, GA Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents). To give your feedback on this API, complete the [Google Analytics Access Reports feedback](https://docs.google.com/forms/d/e/1FAIpQLSdmEBUrMzAEdiEKk5TV5dEHvDUZDRlgWYdQdAeSdtR4hVjEhw/viewform) form. */
    await gapi.client.analyticsadmin.properties.runAccessReport(
      {
        entity: 'Test string',
      },
      {
        dateRanges: [
          {
            endDate: 'Test string',
            startDate: 'Test string',
          },
        ],
        dimensionFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        dimensions: [
          {
            dimensionName: 'Test string',
          },
        ],
        expandGroups: true,
        includeAllUsers: true,
        limit: 'Test string',
        metricFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        metrics: [
          {
            metricName: 'Test string',
          },
        ],
        offset: 'Test string',
        orderBys: [
          {
            desc: true,
            dimension: {
              dimensionName: 'Test string',
              orderType: 'Test string',
            },
            metric: {
              metricName: 'Test string',
            },
          },
        ],
        returnEntityQuota: true,
        timeZone: 'Test string',
      }
    );
    /** Sets the opt out status for the automated GA4 setup process for a UA property. Note: this has no effect on GA4 property. */
    await gapi.client.analyticsadmin.properties.setAutomatedGa4ConfigurationOptOut(
      {},
      {
        optOut: true,
        property: 'Test string',
      }
    );
    /** Updates attribution settings on a property. */
    await gapi.client.analyticsadmin.properties.updateAttributionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        acquisitionConversionEventLookbackWindow: 'Test string',
        adsWebConversionDataExportScope: 'Test string',
        name: 'Test string',
        otherConversionEventLookbackWindow: 'Test string',
        reportingAttributionModel: 'Test string',
      }
    );
    /** Updates the singleton data retention settings for this property. */
    await gapi.client.analyticsadmin.properties.updateDataRetentionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        eventDataRetention: 'Test string',
        name: 'Test string',
        resetUserDataOnNewActivity: true,
      }
    );
    /** Updates Google Signals settings for a property. */
    await gapi.client.analyticsadmin.properties.updateGoogleSignalsSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        consent: 'Test string',
        name: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates information about multiple access bindings to an account or property. This method is transactional. If any AccessBinding cannot be created, none of the AccessBindings will be created. */
    await gapi.client.analyticsadmin.properties.accessBindings.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            accessBinding: {
              name: 'Test string',
              roles: ['Test string'],
              user: 'Test string',
            },
            parent: 'Test string',
          },
        ],
      }
    );
    /** Deletes information about multiple users' links to an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.batchDelete(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            name: 'Test string',
          },
        ],
      }
    );
    /** Gets information about multiple access bindings to an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.batchGet({
      names: 'Test string',
      parent: 'Test string',
    });
    /** Updates information about multiple access bindings to an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            accessBinding: {
              name: 'Test string',
              roles: ['Test string'],
              user: 'Test string',
            },
          },
        ],
      }
    );
    /** Creates an access binding on an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.create(
      {
        parent: 'Test string',
      },
      {
        name: 'Test string',
        roles: ['Test string'],
        user: 'Test string',
      }
    );
    /** Deletes an access binding on an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.delete({
      name: 'Test string',
    });
    /** Gets information about an access binding. */
    await gapi.client.analyticsadmin.properties.accessBindings.get({
      name: 'Test string',
    });
    /** Lists all access bindings on an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an access binding on an account or property. */
    await gapi.client.analyticsadmin.properties.accessBindings.patch(
      {
        name: 'Test string',
      },
      {
        name: 'Test string',
        roles: ['Test string'],
        user: 'Test string',
      }
    );
    /** Creates an AdSenseLink. */
    await gapi.client.analyticsadmin.properties.adSenseLinks.create(
      {
        parent: 'Test string',
      },
      {
        adClientCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes an AdSenseLink. */
    await gapi.client.analyticsadmin.properties.adSenseLinks.delete({
      name: 'Test string',
    });
    /** Looks up a single AdSenseLink. */
    await gapi.client.analyticsadmin.properties.adSenseLinks.get({
      name: 'Test string',
    });
    /** Lists AdSenseLinks on a property. */
    await gapi.client.analyticsadmin.properties.adSenseLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Archives an Audience on a property. */
    await gapi.client.analyticsadmin.properties.audiences.archive(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates an Audience. */
    await gapi.client.analyticsadmin.properties.audiences.create(
      {
        parent: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        eventTrigger: {
          eventName: 'Test string',
          logCondition: 'Test string',
        },
        exclusionDurationMode: 'Test string',
        filterClauses: [
          {
            clauseType: 'Test string',
            sequenceFilter: {
              scope: 'Test string',
              sequenceMaximumDuration: 'Test string',
              sequenceSteps: [
                {
                  constraintDuration: 'Test string',
                  filterExpression: {
                    andGroup: {
                      filterExpressions: undefined,
                    },
                    dimensionOrMetricFilter: {
                      atAnyPointInTime: true,
                      betweenFilter: {
                        fromValue: {
                          doubleValue: 42,
                          int64Value: 'Test string',
                        },
                        toValue: {
                          doubleValue: 42,
                          int64Value: 'Test string',
                        },
                      },
                      fieldName: 'Test string',
                      inAnyNDayPeriod: 42,
                      inListFilter: {
                        caseSensitive: true,
                        values: ['Test string'],
                      },
                      numericFilter: {
                        operation: 'Test string',
                        value: {
                          doubleValue: 42,
                          int64Value: 'Test string',
                        },
                      },
                      stringFilter: {
                        caseSensitive: true,
                        matchType: 'Test string',
                        value: 'Test string',
                      },
                    },
                    eventFilter: {
                      eventName: 'Test string',
                      eventParameterFilterExpression: undefined,
                    },
                    notExpression: undefined,
                    orGroup: {
                      filterExpressions: undefined,
                    },
                  },
                  immediatelyFollows: true,
                  scope: 'Test string',
                },
              ],
            },
            simpleFilter: {
              filterExpression: {
                andGroup: {
                  filterExpressions: undefined,
                },
                dimensionOrMetricFilter: {
                  atAnyPointInTime: true,
                  betweenFilter: {
                    fromValue: {
                      doubleValue: 42,
                      int64Value: 'Test string',
                    },
                    toValue: {
                      doubleValue: 42,
                      int64Value: 'Test string',
                    },
                  },
                  fieldName: 'Test string',
                  inAnyNDayPeriod: 42,
                  inListFilter: {
                    caseSensitive: true,
                    values: ['Test string'],
                  },
                  numericFilter: {
                    operation: 'Test string',
                    value: {
                      doubleValue: 42,
                      int64Value: 'Test string',
                    },
                  },
                  stringFilter: {
                    caseSensitive: true,
                    matchType: 'Test string',
                    value: 'Test string',
                  },
                },
                eventFilter: {
                  eventName: 'Test string',
                  eventParameterFilterExpression: undefined,
                },
                notExpression: undefined,
                orGroup: {
                  filterExpressions: undefined,
                },
              },
              scope: 'Test string',
            },
          },
        ],
        membershipDurationDays: 42,
        name: 'Test string',
      }
    );
    /** Lookup for a single Audience. Audiences created before 2020 may not be supported. Default audiences will not show filter definitions. */
    await gapi.client.analyticsadmin.properties.audiences.get({
      name: 'Test string',
    });
    /** Lists Audiences on a property. Audiences created before 2020 may not be supported. Default audiences will not show filter definitions. */
    await gapi.client.analyticsadmin.properties.audiences.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an Audience on a property. */
    await gapi.client.analyticsadmin.properties.audiences.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        eventTrigger: {
          eventName: 'Test string',
          logCondition: 'Test string',
        },
        exclusionDurationMode: 'Test string',
        filterClauses: [
          {
            clauseType: 'Test string',
            sequenceFilter: {
              scope: 'Test string',
              sequenceMaximumDuration: 'Test string',
              sequenceSteps: [
                {
                  constraintDuration: 'Test string',
                  filterExpression: {
                    andGroup: {
                      filterExpressions: undefined,
                    },
                    dimensionOrMetricFilter: {
                      atAnyPointInTime: true,
                      betweenFilter: {
                        fromValue: {
                          doubleValue: 42,
                          int64Value: 'Test string',
                        },
                        toValue: {
                          doubleValue: 42,
                          int64Value: 'Test string',
                        },
                      },
                      fieldName: 'Test string',
                      inAnyNDayPeriod: 42,
                      inListFilter: {
                        caseSensitive: true,
                        values: ['Test string'],
                      },
                      numericFilter: {
                        operation: 'Test string',
                        value: {
                          doubleValue: 42,
                          int64Value: 'Test string',
                        },
                      },
                      stringFilter: {
                        caseSensitive: true,
                        matchType: 'Test string',
                        value: 'Test string',
                      },
                    },
                    eventFilter: {
                      eventName: 'Test string',
                      eventParameterFilterExpression: undefined,
                    },
                    notExpression: undefined,
                    orGroup: {
                      filterExpressions: undefined,
                    },
                  },
                  immediatelyFollows: true,
                  scope: 'Test string',
                },
              ],
            },
            simpleFilter: {
              filterExpression: {
                andGroup: {
                  filterExpressions: undefined,
                },
                dimensionOrMetricFilter: {
                  atAnyPointInTime: true,
                  betweenFilter: {
                    fromValue: {
                      doubleValue: 42,
                      int64Value: 'Test string',
                    },
                    toValue: {
                      doubleValue: 42,
                      int64Value: 'Test string',
                    },
                  },
                  fieldName: 'Test string',
                  inAnyNDayPeriod: 42,
                  inListFilter: {
                    caseSensitive: true,
                    values: ['Test string'],
                  },
                  numericFilter: {
                    operation: 'Test string',
                    value: {
                      doubleValue: 42,
                      int64Value: 'Test string',
                    },
                  },
                  stringFilter: {
                    caseSensitive: true,
                    matchType: 'Test string',
                    value: 'Test string',
                  },
                },
                eventFilter: {
                  eventName: 'Test string',
                  eventParameterFilterExpression: undefined,
                },
                notExpression: undefined,
                orGroup: {
                  filterExpressions: undefined,
                },
              },
              scope: 'Test string',
            },
          },
        ],
        membershipDurationDays: 42,
        name: 'Test string',
      }
    );
    /** Creates a BigQueryLink. */
    await gapi.client.analyticsadmin.properties.bigQueryLinks.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        dailyExportEnabled: true,
        datasetLocation: 'Test string',
        excludedEvents: ['Test string'],
        exportStreams: ['Test string'],
        freshDailyExportEnabled: true,
        includeAdvertisingId: true,
        name: 'Test string',
        project: 'Test string',
        streamingExportEnabled: true,
      }
    );
    /** Deletes a BigQueryLink on a property. */
    await gapi.client.analyticsadmin.properties.bigQueryLinks.delete({
      name: 'Test string',
    });
    /** Lookup for a single BigQuery Link. */
    await gapi.client.analyticsadmin.properties.bigQueryLinks.get({
      name: 'Test string',
    });
    /** Lists BigQuery Links on a property. */
    await gapi.client.analyticsadmin.properties.bigQueryLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a BigQueryLink. */
    await gapi.client.analyticsadmin.properties.bigQueryLinks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        dailyExportEnabled: true,
        datasetLocation: 'Test string',
        excludedEvents: ['Test string'],
        exportStreams: ['Test string'],
        freshDailyExportEnabled: true,
        includeAdvertisingId: true,
        name: 'Test string',
        project: 'Test string',
        streamingExportEnabled: true,
      }
    );
    /** Creates a CalculatedMetric. */
    await gapi.client.analyticsadmin.properties.calculatedMetrics.create(
      {
        calculatedMetricId: 'Test string',
        parent: 'Test string',
      },
      {
        calculatedMetricId: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        formula: 'Test string',
        invalidMetricReference: true,
        metricUnit: 'Test string',
        name: 'Test string',
        restrictedMetricType: ['Test string'],
      }
    );
    /** Deletes a CalculatedMetric on a property. */
    await gapi.client.analyticsadmin.properties.calculatedMetrics.delete({
      name: 'Test string',
    });
    /** Lookup for a single CalculatedMetric. */
    await gapi.client.analyticsadmin.properties.calculatedMetrics.get({
      name: 'Test string',
    });
    /** Lists CalculatedMetrics on a property. */
    await gapi.client.analyticsadmin.properties.calculatedMetrics.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a CalculatedMetric on a property. */
    await gapi.client.analyticsadmin.properties.calculatedMetrics.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        calculatedMetricId: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        formula: 'Test string',
        invalidMetricReference: true,
        metricUnit: 'Test string',
        name: 'Test string',
        restrictedMetricType: ['Test string'],
      }
    );
    /** Creates a ChannelGroup. */
    await gapi.client.analyticsadmin.properties.channelGroups.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        groupingRule: [
          {
            displayName: 'Test string',
            expression: {
              andGroup: {
                filterExpressions: undefined,
              },
              filter: {
                fieldName: 'Test string',
                inListFilter: {
                  values: ['Test string'],
                },
                stringFilter: {
                  matchType: 'Test string',
                  value: 'Test string',
                },
              },
              notExpression: undefined,
              orGroup: {
                filterExpressions: undefined,
              },
            },
          },
        ],
        name: 'Test string',
        primary: true,
        systemDefined: true,
      }
    );
    /** Deletes a ChannelGroup on a property. */
    await gapi.client.analyticsadmin.properties.channelGroups.delete({
      name: 'Test string',
    });
    /** Lookup for a single ChannelGroup. */
    await gapi.client.analyticsadmin.properties.channelGroups.get({
      name: 'Test string',
    });
    /** Lists ChannelGroups on a property. */
    await gapi.client.analyticsadmin.properties.channelGroups.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a ChannelGroup. */
    await gapi.client.analyticsadmin.properties.channelGroups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        groupingRule: [
          {
            displayName: 'Test string',
            expression: {
              andGroup: {
                filterExpressions: undefined,
              },
              filter: {
                fieldName: 'Test string',
                inListFilter: {
                  values: ['Test string'],
                },
                stringFilter: {
                  matchType: 'Test string',
                  value: 'Test string',
                },
              },
              notExpression: undefined,
              orGroup: {
                filterExpressions: undefined,
              },
            },
          },
        ],
        name: 'Test string',
        primary: true,
        systemDefined: true,
      }
    );
    /** Deprecated: Use `CreateKeyEvent` instead. Creates a conversion event with the specified attributes. */
    await gapi.client.analyticsadmin.properties.conversionEvents.create(
      {
        parent: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultConversionValue: {
          currencyCode: 'Test string',
          value: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      }
    );
    /** Deprecated: Use `DeleteKeyEvent` instead. Deletes a conversion event in a property. */
    await gapi.client.analyticsadmin.properties.conversionEvents.delete({
      name: 'Test string',
    });
    /** Deprecated: Use `GetKeyEvent` instead. Retrieve a single conversion event. */
    await gapi.client.analyticsadmin.properties.conversionEvents.get({
      name: 'Test string',
    });
    /** Deprecated: Use `ListKeyEvents` instead. Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found. */
    await gapi.client.analyticsadmin.properties.conversionEvents.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deprecated: Use `UpdateKeyEvent` instead. Updates a conversion event with the specified attributes. */
    await gapi.client.analyticsadmin.properties.conversionEvents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultConversionValue: {
          currencyCode: 'Test string',
          value: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      }
    );
    /** Archives a CustomDimension on a property. */
    await gapi.client.analyticsadmin.properties.customDimensions.archive(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates a CustomDimension. */
    await gapi.client.analyticsadmin.properties.customDimensions.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        disallowAdsPersonalization: true,
        displayName: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        scope: 'Test string',
      }
    );
    /** Lookup for a single CustomDimension. */
    await gapi.client.analyticsadmin.properties.customDimensions.get({
      name: 'Test string',
    });
    /** Lists CustomDimensions on a property. */
    await gapi.client.analyticsadmin.properties.customDimensions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a CustomDimension on a property. */
    await gapi.client.analyticsadmin.properties.customDimensions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        disallowAdsPersonalization: true,
        displayName: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        scope: 'Test string',
      }
    );
    /** Archives a CustomMetric on a property. */
    await gapi.client.analyticsadmin.properties.customMetrics.archive(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates a CustomMetric. */
    await gapi.client.analyticsadmin.properties.customMetrics.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        measurementUnit: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        restrictedMetricType: ['Test string'],
        scope: 'Test string',
      }
    );
    /** Lookup for a single CustomMetric. */
    await gapi.client.analyticsadmin.properties.customMetrics.get({
      name: 'Test string',
    });
    /** Lists CustomMetrics on a property. */
    await gapi.client.analyticsadmin.properties.customMetrics.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a CustomMetric on a property. */
    await gapi.client.analyticsadmin.properties.customMetrics.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        measurementUnit: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        restrictedMetricType: ['Test string'],
        scope: 'Test string',
      }
    );
    /** Creates a DataStream. */
    await gapi.client.analyticsadmin.properties.dataStreams.create(
      {
        parent: 'Test string',
      },
      {
        androidAppStreamData: {
          firebaseAppId: 'Test string',
          packageName: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        iosAppStreamData: {
          bundleId: 'Test string',
          firebaseAppId: 'Test string',
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        webStreamData: {
          defaultUri: 'Test string',
          firebaseAppId: 'Test string',
          measurementId: 'Test string',
        },
      }
    );
    /** Deletes a DataStream on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.delete({
      name: 'Test string',
    });
    /** Lookup for a single DataStream. */
    await gapi.client.analyticsadmin.properties.dataStreams.get({
      name: 'Test string',
    });
    /** Lookup for a single DataRedactionSettings. */
    await gapi.client.analyticsadmin.properties.dataStreams.getDataRedactionSettings(
      {
        name: 'Test string',
      }
    );
    /** Returns the enhanced measurement settings for this data stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
    await gapi.client.analyticsadmin.properties.dataStreams.getEnhancedMeasurementSettings(
      {
        name: 'Test string',
      }
    );
    /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
    await gapi.client.analyticsadmin.properties.dataStreams.getGlobalSiteTag({
      name: 'Test string',
    });
    /** Lists DataStreams on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataStream on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        androidAppStreamData: {
          firebaseAppId: 'Test string',
          packageName: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        iosAppStreamData: {
          bundleId: 'Test string',
          firebaseAppId: 'Test string',
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        webStreamData: {
          defaultUri: 'Test string',
          firebaseAppId: 'Test string',
          measurementId: 'Test string',
        },
      }
    );
    /** Updates a DataRedactionSettings on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.updateDataRedactionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        emailRedactionEnabled: true,
        name: 'Test string',
        queryParameterKeys: ['Test string'],
        queryParameterRedactionEnabled: true,
      }
    );
    /** Updates the enhanced measurement settings for this data stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
    await gapi.client.analyticsadmin.properties.dataStreams.updateEnhancedMeasurementSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        fileDownloadsEnabled: true,
        formInteractionsEnabled: true,
        name: 'Test string',
        outboundClicksEnabled: true,
        pageChangesEnabled: true,
        scrollsEnabled: true,
        searchQueryParameter: 'Test string',
        siteSearchEnabled: true,
        streamEnabled: true,
        uriQueryParameter: 'Test string',
        videoEngagementEnabled: true,
      }
    );
    /** Creates an EventCreateRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventCreateRules.create(
      {
        parent: 'Test string',
      },
      {
        destinationEvent: 'Test string',
        eventConditions: [
          {
            comparisonType: 'Test string',
            field: 'Test string',
            negated: true,
            value: 'Test string',
          },
        ],
        name: 'Test string',
        parameterMutations: [
          {
            parameter: 'Test string',
            parameterValue: 'Test string',
          },
        ],
        sourceCopyParameters: true,
      }
    );
    /** Deletes an EventCreateRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventCreateRules.delete(
      {
        name: 'Test string',
      }
    );
    /** Lookup for a single EventCreateRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventCreateRules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists EventCreateRules on a web data stream. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventCreateRules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates an EventCreateRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventCreateRules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        destinationEvent: 'Test string',
        eventConditions: [
          {
            comparisonType: 'Test string',
            field: 'Test string',
            negated: true,
            value: 'Test string',
          },
        ],
        name: 'Test string',
        parameterMutations: [
          {
            parameter: 'Test string',
            parameterValue: 'Test string',
          },
        ],
        sourceCopyParameters: true,
      }
    );
    /** Creates an EventEditRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventEditRules.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        eventConditions: [
          {
            comparisonType: 'Test string',
            field: 'Test string',
            negated: true,
            value: 'Test string',
          },
        ],
        name: 'Test string',
        parameterMutations: [
          {
            parameter: 'Test string',
            parameterValue: 'Test string',
          },
        ],
        processingOrder: 'Test string',
      }
    );
    /** Deletes an EventEditRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventEditRules.delete(
      {
        name: 'Test string',
      }
    );
    /** Lookup for a single EventEditRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventEditRules.get({
      name: 'Test string',
    });
    /** Lists EventEditRules on a web data stream. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventEditRules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates an EventEditRule. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventEditRules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        eventConditions: [
          {
            comparisonType: 'Test string',
            field: 'Test string',
            negated: true,
            value: 'Test string',
          },
        ],
        name: 'Test string',
        parameterMutations: [
          {
            parameter: 'Test string',
            parameterValue: 'Test string',
          },
        ],
        processingOrder: 'Test string',
      }
    );
    /** Changes the processing order of event edit rules on the specified stream. */
    await gapi.client.analyticsadmin.properties.dataStreams.eventEditRules.reorder(
      {
        parent: 'Test string',
      },
      {
        eventEditRules: ['Test string'],
      }
    );
    /** Creates a measurement protocol secret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        secretValue: 'Test string',
      }
    );
    /** Deletes target MeasurementProtocolSecret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.delete(
      {
        name: 'Test string',
      }
    );
    /** Lookup for a single MeasurementProtocolSecret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.get(
      {
        name: 'Test string',
      }
    );
    /** Returns child MeasurementProtocolSecrets under the specified parent Property. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a measurement protocol secret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        secretValue: 'Test string',
      }
    );
    /** Creates a SKAdNetworkConversionValueSchema. */
    await gapi.client.analyticsadmin.properties.dataStreams.sKAdNetworkConversionValueSchema.create(
      {
        parent: 'Test string',
      },
      {
        applyConversionValues: true,
        name: 'Test string',
        postbackWindowOne: {
          conversionValues: [
            {
              coarseValue: 'Test string',
              displayName: 'Test string',
              eventMappings: [
                {
                  eventName: 'Test string',
                  maxEventCount: 'Test string',
                  maxEventValue: 42,
                  minEventCount: 'Test string',
                  minEventValue: 42,
                },
              ],
              fineValue: 42,
              lockEnabled: true,
            },
          ],
          postbackWindowSettingsEnabled: true,
        },
        postbackWindowThree: {
          conversionValues: [
            {
              coarseValue: 'Test string',
              displayName: 'Test string',
              eventMappings: [
                {
                  eventName: 'Test string',
                  maxEventCount: 'Test string',
                  maxEventValue: 42,
                  minEventCount: 'Test string',
                  minEventValue: 42,
                },
              ],
              fineValue: 42,
              lockEnabled: true,
            },
          ],
          postbackWindowSettingsEnabled: true,
        },
        postbackWindowTwo: {
          conversionValues: [
            {
              coarseValue: 'Test string',
              displayName: 'Test string',
              eventMappings: [
                {
                  eventName: 'Test string',
                  maxEventCount: 'Test string',
                  maxEventValue: 42,
                  minEventCount: 'Test string',
                  minEventValue: 42,
                },
              ],
              fineValue: 42,
              lockEnabled: true,
            },
          ],
          postbackWindowSettingsEnabled: true,
        },
      }
    );
    /** Deletes target SKAdNetworkConversionValueSchema. */
    await gapi.client.analyticsadmin.properties.dataStreams.sKAdNetworkConversionValueSchema.delete(
      {
        name: 'Test string',
      }
    );
    /** Looks up a single SKAdNetworkConversionValueSchema. */
    await gapi.client.analyticsadmin.properties.dataStreams.sKAdNetworkConversionValueSchema.get(
      {
        name: 'Test string',
      }
    );
    /** Lists SKAdNetworkConversionValueSchema on a stream. Properties can have at most one SKAdNetworkConversionValueSchema. */
    await gapi.client.analyticsadmin.properties.dataStreams.sKAdNetworkConversionValueSchema.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a SKAdNetworkConversionValueSchema. */
    await gapi.client.analyticsadmin.properties.dataStreams.sKAdNetworkConversionValueSchema.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        applyConversionValues: true,
        name: 'Test string',
        postbackWindowOne: {
          conversionValues: [
            {
              coarseValue: 'Test string',
              displayName: 'Test string',
              eventMappings: [
                {
                  eventName: 'Test string',
                  maxEventCount: 'Test string',
                  maxEventValue: 42,
                  minEventCount: 'Test string',
                  minEventValue: 42,
                },
              ],
              fineValue: 42,
              lockEnabled: true,
            },
          ],
          postbackWindowSettingsEnabled: true,
        },
        postbackWindowThree: {
          conversionValues: [
            {
              coarseValue: 'Test string',
              displayName: 'Test string',
              eventMappings: [
                {
                  eventName: 'Test string',
                  maxEventCount: 'Test string',
                  maxEventValue: 42,
                  minEventCount: 'Test string',
                  minEventValue: 42,
                },
              ],
              fineValue: 42,
              lockEnabled: true,
            },
          ],
          postbackWindowSettingsEnabled: true,
        },
        postbackWindowTwo: {
          conversionValues: [
            {
              coarseValue: 'Test string',
              displayName: 'Test string',
              eventMappings: [
                {
                  eventName: 'Test string',
                  maxEventCount: 'Test string',
                  maxEventValue: 42,
                  minEventCount: 'Test string',
                  minEventValue: 42,
                },
              ],
              fineValue: 42,
              lockEnabled: true,
            },
          ],
          postbackWindowSettingsEnabled: true,
        },
      }
    );
    /** Approves a DisplayVideo360AdvertiserLinkProposal. The DisplayVideo360AdvertiserLinkProposal will be deleted and a new DisplayVideo360AdvertiserLink will be created. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.approve(
      {
        name: 'Test string',
      },
      {}
    );
    /** Cancels a DisplayVideo360AdvertiserLinkProposal. Cancelling can mean either: - Declining a proposal initiated from Display & Video 360 - Withdrawing a proposal initiated from Google Analytics After being cancelled, a proposal will eventually be deleted automatically. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates a DisplayVideo360AdvertiserLinkProposal. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.create(
      {
        parent: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        advertiserDisplayName: 'Test string',
        advertiserId: 'Test string',
        campaignDataSharingEnabled: true,
        costDataSharingEnabled: true,
        linkProposalStatusDetails: {
          linkProposalInitiatingProduct: 'Test string',
          linkProposalState: 'Test string',
          requestorEmail: 'Test string',
        },
        name: 'Test string',
        validationEmail: 'Test string',
      }
    );
    /** Deletes a DisplayVideo360AdvertiserLinkProposal on a property. This can only be used on cancelled proposals. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.delete(
      {
        name: 'Test string',
      }
    );
    /** Lookup for a single DisplayVideo360AdvertiserLinkProposal. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.get(
      {
        name: 'Test string',
      }
    );
    /** Lists DisplayVideo360AdvertiserLinkProposals on a property. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a DisplayVideo360AdvertiserLink. This can only be utilized by users who have proper authorization both on the Google Analytics property and on the Display & Video 360 advertiser. Users who do not have access to the Display & Video 360 advertiser should instead seek to create a DisplayVideo360LinkProposal. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.create(
      {
        parent: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        advertiserDisplayName: 'Test string',
        advertiserId: 'Test string',
        campaignDataSharingEnabled: true,
        costDataSharingEnabled: true,
        name: 'Test string',
      }
    );
    /** Deletes a DisplayVideo360AdvertiserLink on a property. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.delete(
      {
        name: 'Test string',
      }
    );
    /** Look up a single DisplayVideo360AdvertiserLink */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all DisplayVideo360AdvertiserLinks on a property. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a DisplayVideo360AdvertiserLink on a property. */
    await gapi.client.analyticsadmin.properties.displayVideo360AdvertiserLinks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        advertiserDisplayName: 'Test string',
        advertiserId: 'Test string',
        campaignDataSharingEnabled: true,
        costDataSharingEnabled: true,
        name: 'Test string',
      }
    );
    /** Creates a ExpandedDataSet. */
    await gapi.client.analyticsadmin.properties.expandedDataSets.create(
      {
        parent: 'Test string',
      },
      {
        dataCollectionStartTime: 'Test string',
        description: 'Test string',
        dimensionFilterExpression: {
          andGroup: {
            filterExpressions: undefined,
          },
          filter: {
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          notExpression: undefined,
        },
        dimensionNames: ['Test string'],
        displayName: 'Test string',
        metricNames: ['Test string'],
        name: 'Test string',
      }
    );
    /** Deletes a ExpandedDataSet on a property. */
    await gapi.client.analyticsadmin.properties.expandedDataSets.delete({
      name: 'Test string',
    });
    /** Lookup for a single ExpandedDataSet. */
    await gapi.client.analyticsadmin.properties.expandedDataSets.get({
      name: 'Test string',
    });
    /** Lists ExpandedDataSets on a property. */
    await gapi.client.analyticsadmin.properties.expandedDataSets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a ExpandedDataSet on a property. */
    await gapi.client.analyticsadmin.properties.expandedDataSets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        dataCollectionStartTime: 'Test string',
        description: 'Test string',
        dimensionFilterExpression: {
          andGroup: {
            filterExpressions: undefined,
          },
          filter: {
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          notExpression: undefined,
        },
        dimensionNames: ['Test string'],
        displayName: 'Test string',
        metricNames: ['Test string'],
        name: 'Test string',
      }
    );
    /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
    await gapi.client.analyticsadmin.properties.firebaseLinks.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        project: 'Test string',
      }
    );
    /** Deletes a FirebaseLink on a property */
    await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
      name: 'Test string',
    });
    /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
    await gapi.client.analyticsadmin.properties.firebaseLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a GoogleAdsLink. */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.create(
      {
        parent: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        canManageClients: true,
        createTime: 'Test string',
        creatorEmailAddress: 'Test string',
        customerId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a GoogleAdsLink on a property */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
      name: 'Test string',
    });
    /** Lists GoogleAdsLinks on a property. */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a GoogleAdsLink on a property */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        canManageClients: true,
        createTime: 'Test string',
        creatorEmailAddress: 'Test string',
        customerId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.create(
      {
        parent: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultValue: {
          currencyCode: 'Test string',
          numericValue: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes a Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.delete({
      name: 'Test string',
    });
    /** Retrieve a single Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.get({
      name: 'Test string',
    });
    /** Returns a list of Key Events in the specified parent property. Returns an empty list if no Key Events are found. */
    await gapi.client.analyticsadmin.properties.keyEvents.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultValue: {
          currencyCode: 'Test string',
          numericValue: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates a roll-up property source link. Only roll-up properties can have source links, so this method will throw an error if used on other types of properties. */
    await gapi.client.analyticsadmin.properties.rollupPropertySourceLinks.create(
      {
        parent: 'Test string',
      },
      {
        name: 'Test string',
        sourceProperty: 'Test string',
      }
    );
    /** Deletes a roll-up property source link. Only roll-up properties can have source links, so this method will throw an error if used on other types of properties. */
    await gapi.client.analyticsadmin.properties.rollupPropertySourceLinks.delete(
      {
        name: 'Test string',
      }
    );
    /** Lookup for a single roll-up property source Link. Only roll-up properties can have source links, so this method will throw an error if used on other types of properties. */
    await gapi.client.analyticsadmin.properties.rollupPropertySourceLinks.get({
      name: 'Test string',
    });
    /** Lists roll-up property source Links on a property. Only roll-up properties can have source links, so this method will throw an error if used on other types of properties. */
    await gapi.client.analyticsadmin.properties.rollupPropertySourceLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a SearchAds360Link. */
    await gapi.client.analyticsadmin.properties.searchAds360Links.create(
      {
        parent: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        advertiserDisplayName: 'Test string',
        advertiserId: 'Test string',
        campaignDataSharingEnabled: true,
        costDataSharingEnabled: true,
        name: 'Test string',
        siteStatsSharingEnabled: true,
      }
    );
    /** Deletes a SearchAds360Link on a property. */
    await gapi.client.analyticsadmin.properties.searchAds360Links.delete({
      name: 'Test string',
    });
    /** Look up a single SearchAds360Link */
    await gapi.client.analyticsadmin.properties.searchAds360Links.get({
      name: 'Test string',
    });
    /** Lists all SearchAds360Links on a property. */
    await gapi.client.analyticsadmin.properties.searchAds360Links.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a SearchAds360Link on a property. */
    await gapi.client.analyticsadmin.properties.searchAds360Links.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        advertiserDisplayName: 'Test string',
        advertiserId: 'Test string',
        campaignDataSharingEnabled: true,
        costDataSharingEnabled: true,
        name: 'Test string',
        siteStatsSharingEnabled: true,
      }
    );
    /** Creates a subproperty Event Filter. */
    await gapi.client.analyticsadmin.properties.subpropertyEventFilters.create(
      {
        parent: 'Test string',
      },
      {
        applyToProperty: 'Test string',
        filterClauses: [
          {
            filterClauseType: 'Test string',
            filterExpression: {
              filterCondition: {
                fieldName: 'Test string',
                nullFilter: true,
                stringFilter: {
                  caseSensitive: true,
                  matchType: 'Test string',
                  value: 'Test string',
                },
              },
              notExpression: undefined,
              orGroup: {
                filterExpressions: undefined,
              },
            },
          },
        ],
        name: 'Test string',
      }
    );
    /** Deletes a subproperty event filter. */
    await gapi.client.analyticsadmin.properties.subpropertyEventFilters.delete({
      name: 'Test string',
    });
    /** Lookup for a single subproperty Event Filter. */
    await gapi.client.analyticsadmin.properties.subpropertyEventFilters.get({
      name: 'Test string',
    });
    /** List all subproperty Event Filters on a property. */
    await gapi.client.analyticsadmin.properties.subpropertyEventFilters.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a subproperty Event Filter. */
    await gapi.client.analyticsadmin.properties.subpropertyEventFilters.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        applyToProperty: 'Test string',
        filterClauses: [
          {
            filterClauseType: 'Test string',
            filterExpression: {
              filterCondition: {
                fieldName: 'Test string',
                nullFilter: true,
                stringFilter: {
                  caseSensitive: true,
                  matchType: 'Test string',
                  value: 'Test string',
                },
              },
              notExpression: undefined,
              orGroup: {
                filterExpressions: undefined,
              },
            },
          },
        ],
        name: 'Test string',
      }
    );
  }
});
