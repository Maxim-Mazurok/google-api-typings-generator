/* This is stub file for gapi.client.firestore-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250325

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://firestore.googleapis.com/$discovery/rest?version=v1beta2',
  );
  /** now we can use gapi.client.firestore */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and manage your Google Cloud Datastore data */
    'https://www.googleapis.com/auth/datastore',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. */
    await gapi.client.firestore.projects.databases.exportDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        outputUriPrefix: 'Test string',
      },
    );
    /** Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore. */
    await gapi.client.firestore.projects.databases.importDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        inputUriPrefix: 'Test string',
      },
    );
    /** Gets the metadata and configuration for a Field. */
    await gapi.client.firestore.projects.databases.collectionGroups.fields.get({
      name: 'Test string',
    });
    /** Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`. */
    await gapi.client.firestore.projects.databases.collectionGroups.fields.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`. */
    await gapi.client.firestore.projects.databases.collectionGroups.fields.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        indexConfig: {
          ancestorField: 'Test string',
          indexes: [
            {
              fields: [
                {
                  arrayConfig: 'Test string',
                  fieldPath: 'Test string',
                  order: 'Test string',
                },
              ],
              name: 'Test string',
              queryScope: 'Test string',
              state: 'Test string',
            },
          ],
          reverting: true,
          usesAncestorConfig: true,
        },
        name: 'Test string',
      },
    );
    /** Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.create(
      {
        parent: 'Test string',
      },
      {
        fields: [
          {
            arrayConfig: 'Test string',
            fieldPath: 'Test string',
            order: 'Test string',
          },
        ],
        name: 'Test string',
        queryScope: 'Test string',
        state: 'Test string',
      },
    );
    /** Deletes a composite index. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a composite index. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.get(
      {
        name: 'Test string',
      },
    );
    /** Lists composite indexes. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
  }
});
