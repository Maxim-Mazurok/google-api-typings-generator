/* Type definitions for non-npm package Cloud Firestore API v1beta2 0.0 */
// Project: https://cloud.google.com/firestore
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firestore.googleapis.com/$discovery/rest?version=v1beta2
// Revision: 20241212

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Firestore API v1beta2 */
  function load(
    urlOrObject: 'https://firestore.googleapis.com/$discovery/rest?version=v1beta2'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'firestore', version: 'v1beta2'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'firestore',
    version: 'v1beta2',
    callback: () => any
  ): void;

  namespace firestore {
    interface Empty {}
    interface GoogleFirestoreAdminV1beta2ExportDocumentsMetadata {
      /** Which collection ids are being exported. */
      collectionIds?: string[];
      /** The time this operation completed. Will be unset if operation still in progress. */
      endTime?: string;
      /** The state of the export operation. */
      operationState?: string;
      /** Where the entities are being exported to. */
      outputUriPrefix?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1beta2Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1beta2Progress;
      /** The time this operation started. */
      startTime?: string;
    }
    interface GoogleFirestoreAdminV1beta2ExportDocumentsRequest {
      /** Which collection ids to export. Unspecified means all collections. */
      collectionIds?: string[];
      /** The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time. */
      outputUriPrefix?: string;
    }
    interface GoogleFirestoreAdminV1beta2ExportDocumentsResponse {
      /** Location of the output files. This can be used to begin an import into Cloud Firestore (this project or another project) after the operation completes successfully. */
      outputUriPrefix?: string;
    }
    interface GoogleFirestoreAdminV1beta2Field {
      /** The index configuration for this field. If unset, field indexing will revert to the configuration defined by the `ancestor_field`. To explicitly remove all indexes for this field, specify an index config with an empty list of indexes. */
      indexConfig?: GoogleFirestoreAdminV1beta2IndexConfig;
      /** A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration. */
      name?: string;
    }
    interface GoogleFirestoreAdminV1beta2FieldOperationMetadata {
      /** The progress, in bytes, of this operation. */
      bytesProgress?: GoogleFirestoreAdminV1beta2Progress;
      /** The progress, in documents, of this operation. */
      documentProgress?: GoogleFirestoreAdminV1beta2Progress;
      /** The time this operation completed. Will be unset if operation still in progress. */
      endTime?: string;
      /** The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` */
      field?: string;
      /** A list of IndexConfigDelta, which describe the intent of this operation. */
      indexConfigDeltas?: GoogleFirestoreAdminV1beta2IndexConfigDelta[];
      /** The time this operation started. */
      startTime?: string;
      /** The state of the operation. */
      state?: string;
    }
    interface GoogleFirestoreAdminV1beta2ImportDocumentsMetadata {
      /** Which collection ids are being imported. */
      collectionIds?: string[];
      /** The time this operation completed. Will be unset if operation still in progress. */
      endTime?: string;
      /** The location of the documents being imported. */
      inputUriPrefix?: string;
      /** The state of the import operation. */
      operationState?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1beta2Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1beta2Progress;
      /** The time this operation started. */
      startTime?: string;
    }
    interface GoogleFirestoreAdminV1beta2ImportDocumentsRequest {
      /** Which collection ids to import. Unspecified means all collections included in the import. */
      collectionIds?: string[];
      /** Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1beta2.ExportDocumentsResponse.output_uri_prefix. */
      inputUriPrefix?: string;
    }
    interface GoogleFirestoreAdminV1beta2Index {
      /** The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field. */
      fields?: GoogleFirestoreAdminV1beta2IndexField[];
      /** Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty. */
      name?: string;
      /** Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index. */
      queryScope?: string;
      /** Output only. The serving state of the index. */
      state?: string;
    }
    interface GoogleFirestoreAdminV1beta2IndexConfig {
      /** Output only. Specifies the resource name of the `Field` from which this field's index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false). */
      ancestorField?: string;
      /** The indexes supported for this field. */
      indexes?: GoogleFirestoreAdminV1beta2Index[];
      /** Output only When true, the `Field`'s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`. */
      reverting?: boolean;
      /** Output only. When true, the `Field`'s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`'s index configuration is defined explicitly. */
      usesAncestorConfig?: boolean;
    }
    interface GoogleFirestoreAdminV1beta2IndexConfigDelta {
      /** Specifies how the index is changing. */
      changeType?: string;
      /** The index being changed. */
      index?: GoogleFirestoreAdminV1beta2Index;
    }
    interface GoogleFirestoreAdminV1beta2IndexField {
      /** Indicates that this field supports operations on `array_value`s. */
      arrayConfig?: string;
      /** Can be __name__. For single field indexes, this must match the name of the field or may be omitted. */
      fieldPath?: string;
      /** Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=. */
      order?: string;
    }
    interface GoogleFirestoreAdminV1beta2IndexOperationMetadata {
      /** The time this operation completed. Will be unset if operation still in progress. */
      endTime?: string;
      /** The index resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}` */
      index?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1beta2Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1beta2Progress;
      /** The time this operation started. */
      startTime?: string;
      /** The state of the operation. */
      state?: string;
    }
    interface GoogleFirestoreAdminV1beta2ListFieldsResponse {
      /** The requested fields. */
      fields?: GoogleFirestoreAdminV1beta2Field[];
      /** A page token that may be used to request another page of results. If blank, this is the last page. */
      nextPageToken?: string;
    }
    interface GoogleFirestoreAdminV1beta2ListIndexesResponse {
      /** The requested indexes. */
      indexes?: GoogleFirestoreAdminV1beta2Index[];
      /** A page token that may be used to request another page of results. If blank, this is the last page. */
      nextPageToken?: string;
    }
    interface GoogleFirestoreAdminV1beta2Progress {
      /** The amount of work completed. */
      completedWork?: string;
      /** The amount of work estimated. */
      estimatedWork?: string;
    }
    interface GoogleFirestoreAdminV1BulkDeleteDocumentsMetadata {
      /** The IDs of the collection groups that are being deleted. */
      collectionIds?: string[];
      /** The time this operation completed. Will be unset if operation still in progress. */
      endTime?: string;
      /** Which namespace IDs are being deleted. */
      namespaceIds?: string[];
      /** The state of the operation. */
      operationState?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1Progress;
      /** The timestamp that corresponds to the version of the database that is being read to get the list of documents to delete. This time can also be used as the timestamp of PITR in case of disaster recovery (subject to PITR window limit). */
      snapshotTime?: string;
      /** The time this operation started. */
      startTime?: string;
    }
    interface GoogleFirestoreAdminV1CreateDatabaseMetadata {}
    interface GoogleFirestoreAdminV1DeleteDatabaseMetadata {}
    interface GoogleFirestoreAdminV1Progress {
      /** The amount of work completed. */
      completedWork?: string;
      /** The amount of work estimated. */
      estimatedWork?: string;
    }
    interface GoogleFirestoreAdminV1RestoreDatabaseMetadata {
      /** The name of the backup restoring from. */
      backup?: string;
      /** The name of the database being restored to. */
      database?: string;
      /** The time the restore finished, unset for ongoing restores. */
      endTime?: string;
      /** The operation state of the restore. */
      operationState?: string;
      /** How far along the restore is as an estimated percentage of remaining time. */
      progressPercentage?: GoogleFirestoreAdminV1Progress;
      /** The time the restore was started. */
      startTime?: string;
    }
    interface GoogleFirestoreAdminV1UpdateDatabaseMetadata {}
    interface GoogleLongrunningOperation {
      /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: Status;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
      name?: string;
      /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
      response?: {[P in string]: any};
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface FieldsResource {
      /** Gets the metadata and configuration for a Field. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleFirestoreAdminV1beta2Field>;
      /** Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The number of results to return. */
        pageSize?: number;
        /** A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get the next page of results. */
        pageToken?: string;
        /** A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleFirestoreAdminV1beta2ListFieldsResponse>;
      /** Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** A mask, relative to the field. If specified, only configuration specified by this field_mask will be updated in the field. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleFirestoreAdminV1beta2Field;
      }): Request<GoogleLongrunningOperation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** A mask, relative to the field. If specified, only configuration specified by this field_mask will be updated in the field. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleFirestoreAdminV1beta2Field
      ): Request<GoogleLongrunningOperation>;
    }
    interface IndexesResource {
      /** Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleFirestoreAdminV1beta2Index;
      }): Request<GoogleLongrunningOperation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleFirestoreAdminV1beta2Index
      ): Request<GoogleLongrunningOperation>;
      /** Deletes a composite index. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets a composite index. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleFirestoreAdminV1beta2Index>;
      /** Lists composite indexes. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter to apply to list results. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The number of results to return. */
        pageSize?: number;
        /** A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get the next page of results. */
        pageToken?: string;
        /** A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleFirestoreAdminV1beta2ListIndexesResponse>;
    }
    interface CollectionGroupsResource {
      fields: FieldsResource;
      indexes: IndexesResource;
    }
    interface DatabasesResource {
      /** Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. */
      exportDocuments(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleFirestoreAdminV1beta2ExportDocumentsRequest;
      }): Request<GoogleLongrunningOperation>;
      exportDocuments(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleFirestoreAdminV1beta2ExportDocumentsRequest
      ): Request<GoogleLongrunningOperation>;
      /** Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore. */
      importDocuments(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleFirestoreAdminV1beta2ImportDocumentsRequest;
      }): Request<GoogleLongrunningOperation>;
      importDocuments(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleFirestoreAdminV1beta2ImportDocumentsRequest
      ): Request<GoogleLongrunningOperation>;
      collectionGroups: CollectionGroupsResource;
    }
    interface ProjectsResource {
      databases: DatabasesResource;
    }

    const projects: ProjectsResource;
  }
}
