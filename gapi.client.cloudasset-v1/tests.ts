/* This is stub file for gapi.client.cloudasset-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221015

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://cloudasset.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.cloudasset */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Lists assets with time and resource types and returns paged results in response. */
        await gapi.client.cloudasset.assets.list({
            assetTypes: "Test string",
            contentType: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
            relationshipTypes: "Test string",
        });
        /** Gets effective IAM policies for a batch of resources. */
        await gapi.client.cloudasset.effectiveIamPolicies.batchGet({
            names: "Test string",
            scope: "Test string",
        });
        /** Creates a feed in a parent project/folder/organization to listen to its asset updates. */
        await gapi.client.cloudasset.feeds.create({
            parent: "Test string",
        }, {
            feed: {
                assetNames: [
                    "Test string"
                ],
                assetTypes: [
                    "Test string"
                ],
                condition: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
                contentType: "Test string",
                feedOutputConfig: {
                    pubsubDestination: {
                        topic: "Test string",
                    },
                },
                name: "Test string",
                relationshipTypes: [
                    "Test string"
                ],
            },
            feedId: "Test string",
        });
        /** Deletes an asset feed. */
        await gapi.client.cloudasset.feeds.delete({
            name: "Test string",
        });
        /** Gets details about an asset feed. */
        await gapi.client.cloudasset.feeds.get({
            name: "Test string",
        });
        /** Lists all asset feeds in a parent project/folder/organization. */
        await gapi.client.cloudasset.feeds.list({
            parent: "Test string",
        });
        /** Updates an asset feed configuration. */
        await gapi.client.cloudasset.feeds.patch({
            name: "Test string",
        }, {
            feed: {
                assetNames: [
                    "Test string"
                ],
                assetTypes: [
                    "Test string"
                ],
                condition: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
                contentType: "Test string",
                feedOutputConfig: {
                    pubsubDestination: {
                        topic: "Test string",
                    },
                },
                name: "Test string",
                relationshipTypes: [
                    "Test string"
                ],
            },
            updateMask: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.cloudasset.operations.get({
            name: "Test string",
        });
        /** Creates a saved query in a parent project/folder/organization. */
        await gapi.client.cloudasset.savedQueries.create({
            parent: "Test string",
            savedQueryId: "Test string",
        }, {
            content: {
                iamPolicyAnalysisQuery: {
                    accessSelector: {
                        permissions: [
                            "Test string"
                        ],
                        roles: [
                            "Test string"
                        ],
                    },
                    conditionContext: {
                        accessTime: "Test string",
                    },
                    identitySelector: {
                        identity: "Test string",
                    },
                    options: {
                        analyzeServiceAccountImpersonation: true,
                        expandGroups: true,
                        expandResources: true,
                        expandRoles: true,
                        outputGroupEdges: true,
                        outputResourceEdges: true,
                    },
                    resourceSelector: {
                        fullResourceName: "Test string",
                    },
                    scope: "Test string",
                },
            },
            createTime: "Test string",
            creator: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            lastUpdater: "Test string",
            lastUpdateTime: "Test string",
            name: "Test string",
        });
        /** Deletes a saved query. */
        await gapi.client.cloudasset.savedQueries.delete({
            name: "Test string",
        });
        /** Gets details about a saved query. */
        await gapi.client.cloudasset.savedQueries.get({
            name: "Test string",
        });
        /** Lists all saved queries in a parent project/folder/organization. */
        await gapi.client.cloudasset.savedQueries.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a saved query. */
        await gapi.client.cloudasset.savedQueries.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            content: {
                iamPolicyAnalysisQuery: {
                    accessSelector: {
                        permissions: [
                            "Test string"
                        ],
                        roles: [
                            "Test string"
                        ],
                    },
                    conditionContext: {
                        accessTime: "Test string",
                    },
                    identitySelector: {
                        identity: "Test string",
                    },
                    options: {
                        analyzeServiceAccountImpersonation: true,
                        expandGroups: true,
                        expandResources: true,
                        expandRoles: true,
                        outputGroupEdges: true,
                        outputResourceEdges: true,
                    },
                    resourceSelector: {
                        fullResourceName: "Test string",
                    },
                    scope: "Test string",
                },
            },
            createTime: "Test string",
            creator: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            lastUpdater: "Test string",
            lastUpdateTime: "Test string",
            name: "Test string",
        });
        /** Analyzes IAM policies to answer which identities have what accesses on which resources. */
        await gapi.client.cloudasset.v1.analyzeIamPolicy({
            "analysisQuery.accessSelector.permissions": "Test string",
            "analysisQuery.accessSelector.roles": "Test string",
            "analysisQuery.conditionContext.accessTime": "Test string",
            "analysisQuery.identitySelector.identity": "Test string",
            "analysisQuery.options.analyzeServiceAccountImpersonation": true,
            "analysisQuery.options.expandGroups": true,
            "analysisQuery.options.expandResources": true,
            "analysisQuery.options.expandRoles": true,
            "analysisQuery.options.outputGroupEdges": true,
            "analysisQuery.options.outputResourceEdges": true,
            "analysisQuery.resourceSelector.fullResourceName": "Test string",
            executionTimeout: "Test string",
            savedAnalysisQuery: "Test string",
            scope: "Test string",
        });
        /**
         * Analyzes IAM policies asynchronously to answer which identities have what accesses on which resources, and writes the analysis results to a Google Cloud Storage or a BigQuery
         * destination. For Cloud Storage destination, the output format is the JSON format that represents a AnalyzeIamPolicyResponse. This method implements the google.longrunning.Operation,
         * which allows you to track the operation status. We recommend intervals of at least 2 seconds with exponential backoff retry to poll the operation result. The metadata contains the
         * metadata for the long-running operation.
         */
        await gapi.client.cloudasset.v1.analyzeIamPolicyLongrunning({
            scope: "Test string",
        }, {
            analysisQuery: {
                accessSelector: {
                    permissions: [
                        "Test string"
                    ],
                    roles: [
                        "Test string"
                    ],
                },
                conditionContext: {
                    accessTime: "Test string",
                },
                identitySelector: {
                    identity: "Test string",
                },
                options: {
                    analyzeServiceAccountImpersonation: true,
                    expandGroups: true,
                    expandResources: true,
                    expandRoles: true,
                    outputGroupEdges: true,
                    outputResourceEdges: true,
                },
                resourceSelector: {
                    fullResourceName: "Test string",
                },
                scope: "Test string",
            },
            outputConfig: {
                bigqueryDestination: {
                    dataset: "Test string",
                    partitionKey: "Test string",
                    tablePrefix: "Test string",
                    writeDisposition: "Test string",
                },
                gcsDestination: {
                    uri: "Test string",
                },
            },
            savedAnalysisQuery: "Test string",
        });
        /**
         * Analyze moving a resource to a specified destination without kicking off the actual move. The analysis is best effort depending on the user's permissions of viewing different
         * hierarchical policies and configurations. The policies and configuration are subject to change before the actual resource migration takes place.
         */
        await gapi.client.cloudasset.v1.analyzeMove({
            destinationParent: "Test string",
            resource: "Test string",
            view: "Test string",
        });
        /**
         * Batch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can
         * create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an
         * INVALID_ARGUMENT error.
         */
        await gapi.client.cloudasset.v1.batchGetAssetsHistory({
            assetNames: "Test string",
            contentType: "Test string",
            parent: "Test string",
            "readTimeWindow.endTime": "Test string",
            "readTimeWindow.startTime": "Test string",
            relationshipTypes: "Test string",
        });
        /**
         * Exports assets with time and resource types to a given Cloud Storage location/BigQuery table. For Cloud Storage location destinations, the output format is newline-delimited JSON. Each
         * line represents a google.cloud.asset.v1.Asset in the JSON format; for BigQuery table destinations, the output table stores the fields in asset Protobuf as columns. This API implements
         * the google.longrunning.Operation API, which allows you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation
         * result. For regular-size resource parent, the export operation usually finishes within 5 minutes.
         */
        await gapi.client.cloudasset.v1.exportAssets({
            parent: "Test string",
        }, {
            assetTypes: [
                "Test string"
            ],
            contentType: "Test string",
            outputConfig: {
                bigqueryDestination: {
                    dataset: "Test string",
                    force: true,
                    partitionSpec: {
                        partitionKey: "Test string",
                    },
                    separateTablesPerAssetType: true,
                    table: "Test string",
                },
                gcsDestination: {
                    uri: "Test string",
                    uriPrefix: "Test string",
                },
            },
            readTime: "Test string",
            relationshipTypes: [
                "Test string"
            ],
        });
        /**
         * Searches all IAM policies within the specified scope, such as a project, folder, or organization. The caller must be granted the `cloudasset.assets.searchAllIamPolicies` permission on
         * the desired scope, otherwise the request will be rejected.
         */
        await gapi.client.cloudasset.v1.searchAllIamPolicies({
            assetTypes: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            query: "Test string",
            scope: "Test string",
        });
        /**
         * Searches all Cloud resources within the specified scope, such as a project, folder, or organization. The caller must be granted the `cloudasset.assets.searchAllResources` permission on
         * the desired scope, otherwise the request will be rejected.
         */
        await gapi.client.cloudasset.v1.searchAllResources({
            assetTypes: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            query: "Test string",
            readMask: "Test string",
            scope: "Test string",
        });
    }
});
