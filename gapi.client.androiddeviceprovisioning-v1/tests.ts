/* This is stub file for gapi.client.androiddeviceprovisioning-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231031

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://androiddeviceprovisioning.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.androiddeviceprovisioning */

    run();

    async function run() {
        /** Lists the user's customer accounts. */
        await gapi.client.androiddeviceprovisioning.customers.list({
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new configuration. Once created, a customer can apply the configuration to devices. */
        await gapi.client.androiddeviceprovisioning.customers.configurations.create({
            parent: "Test string",
        }, {
            companyName: "Test string",
            configurationId: "Test string",
            configurationName: "Test string",
            contactEmail: "Test string",
            contactPhone: "Test string",
            customMessage: "Test string",
            dpcExtras: "Test string",
            dpcResourcePath: "Test string",
            forcedResetTime: "Test string",
            isDefault: true,
            name: "Test string",
        });
        /** Deletes an unused configuration. The API call fails if the customer has devices with the configuration applied. */
        await gapi.client.androiddeviceprovisioning.customers.configurations.delete({
            name: "Test string",
        });
        /** Gets the details of a configuration. */
        await gapi.client.androiddeviceprovisioning.customers.configurations.get({
            name: "Test string",
        });
        /** Lists a customer's configurations. */
        await gapi.client.androiddeviceprovisioning.customers.configurations.list({
            parent: "Test string",
        });
        /** Updates a configuration's field values. */
        await gapi.client.androiddeviceprovisioning.customers.configurations.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            companyName: "Test string",
            configurationId: "Test string",
            configurationName: "Test string",
            contactEmail: "Test string",
            contactPhone: "Test string",
            customMessage: "Test string",
            dpcExtras: "Test string",
            dpcResourcePath: "Test string",
            forcedResetTime: "Test string",
            isDefault: true,
            name: "Test string",
        });
        /**
         * Applies a Configuration to the device to register the device for zero-touch enrollment. After applying a configuration to a device, the device automatically provisions itself on first
         * boot, or next factory reset.
         */
        await gapi.client.androiddeviceprovisioning.customers.devices.applyConfiguration({
            parent: "Test string",
        }, {
            configuration: "Test string",
            device: {
                deviceId: "Test string",
                deviceIdentifier: {
                    chromeOsAttestedDeviceId: "Test string",
                    deviceType: "Test string",
                    imei: "Test string",
                    manufacturer: "Test string",
                    meid: "Test string",
                    model: "Test string",
                    serialNumber: "Test string",
                },
            },
        });
        /** Gets the details of a device. */
        await gapi.client.androiddeviceprovisioning.customers.devices.get({
            name: "Test string",
        });
        /** Lists a customer's devices. */
        await gapi.client.androiddeviceprovisioning.customers.devices.list({
            pageSize: "Test string",
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Removes a configuration from device. */
        await gapi.client.androiddeviceprovisioning.customers.devices.removeConfiguration({
            parent: "Test string",
        }, {
            device: {
                deviceId: "Test string",
                deviceIdentifier: {
                    chromeOsAttestedDeviceId: "Test string",
                    deviceType: "Test string",
                    imei: "Test string",
                    manufacturer: "Test string",
                    meid: "Test string",
                    model: "Test string",
                    serialNumber: "Test string",
                },
            },
        });
        /**
         * Unclaims a device from a customer and removes it from zero-touch enrollment. After removing a device, a customer must contact their reseller to register the device into zero-touch
         * enrollment again.
         */
        await gapi.client.androiddeviceprovisioning.customers.devices.unclaim({
            parent: "Test string",
        }, {
            device: {
                deviceId: "Test string",
                deviceIdentifier: {
                    chromeOsAttestedDeviceId: "Test string",
                    deviceType: "Test string",
                    imei: "Test string",
                    manufacturer: "Test string",
                    meid: "Test string",
                    model: "Test string",
                    serialNumber: "Test string",
                },
            },
        });
        /** Lists the DPCs (device policy controllers) that support zero-touch enrollment. */
        await gapi.client.androiddeviceprovisioning.customers.dpcs.list({
            parent: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.androiddeviceprovisioning.operations.get({
            name: "Test string",
        });
        /**
         * Creates a customer for zero-touch enrollment. After the method returns successfully, admin and owner roles can manage devices and EMM configs by calling API methods or using their
         * zero-touch enrollment portal. The customer receives an email that welcomes them to zero-touch enrollment and explains how to sign into the portal.
         */
        await gapi.client.androiddeviceprovisioning.partners.customers.create({
            parent: "Test string",
        }, {
            customer: {
                adminEmails: [
                    "Test string"
                ],
                companyId: "Test string",
                companyName: "Test string",
                googleWorkspaceAccount: {
                    customerId: "Test string",
                    preProvisioningTokens: [
                        "Test string"
                    ],
                },
                languageCode: "Test string",
                name: "Test string",
                ownerEmails: [
                    "Test string"
                ],
                skipWelcomeEmail: true,
                termsStatus: "Test string",
            },
        });
        /**
         * Lists the customers that are enrolled to the reseller identified by the `partnerId` argument. This list includes customers that the reseller created and customers that enrolled
         * themselves using the portal.
         */
        await gapi.client.androiddeviceprovisioning.partners.customers.list({
            pageSize: 42,
            pageToken: "Test string",
            partnerId: "Test string",
        });
        /** Claims a device for a customer and adds it to zero-touch enrollment. If the device is already claimed by another customer, the call returns an error. */
        await gapi.client.androiddeviceprovisioning.partners.devices.claim({
            partnerId: "Test string",
        }, {
            configurationId: "Test string",
            customerId: "Test string",
            deviceIdentifier: {
                chromeOsAttestedDeviceId: "Test string",
                deviceType: "Test string",
                imei: "Test string",
                manufacturer: "Test string",
                meid: "Test string",
                model: "Test string",
                serialNumber: "Test string",
            },
            deviceMetadata: {
                entries: {
                    A: "Test string"
                },
            },
            googleWorkspaceCustomerId: "Test string",
            preProvisioningToken: "Test string",
            sectionType: "Test string",
            simlockProfileId: "Test string",
        });
        /**
         * Claims a batch of devices for a customer asynchronously. Adds the devices to zero-touch enrollment. To learn more, read [Longâ€‘running batch
         * operations](/zero-touch/guides/how-it-works#operations).
         */
        await gapi.client.androiddeviceprovisioning.partners.devices.claimAsync({
            partnerId: "Test string",
        }, {
            claims: [
                {
                    configurationId: "Test string",
                    customerId: "Test string",
                    deviceIdentifier: {
                        chromeOsAttestedDeviceId: "Test string",
                        deviceType: "Test string",
                        imei: "Test string",
                        manufacturer: "Test string",
                        meid: "Test string",
                        model: "Test string",
                        serialNumber: "Test string",
                    },
                    deviceMetadata: {
                        entries: {
                            A: "Test string"
                        },
                    },
                    googleWorkspaceCustomerId: "Test string",
                    preProvisioningToken: "Test string",
                    sectionType: "Test string",
                    simlockProfileId: "Test string",
                }
            ],
        });
        /** Finds devices by hardware identifiers, such as IMEI. */
        await gapi.client.androiddeviceprovisioning.partners.devices.findByIdentifier({
            partnerId: "Test string",
        }, {
            deviceIdentifier: {
                chromeOsAttestedDeviceId: "Test string",
                deviceType: "Test string",
                imei: "Test string",
                manufacturer: "Test string",
                meid: "Test string",
                model: "Test string",
                serialNumber: "Test string",
            },
            limit: "Test string",
            pageToken: "Test string",
        });
        /**
         * Finds devices claimed for customers. The results only contain devices registered to the reseller that's identified by the `partnerId` argument. The customer's devices purchased from
         * other resellers don't appear in the results.
         */
        await gapi.client.androiddeviceprovisioning.partners.devices.findByOwner({
            partnerId: "Test string",
        }, {
            customerId: [
                "Test string"
            ],
            googleWorkspaceCustomerId: [
                "Test string"
            ],
            limit: "Test string",
            pageToken: "Test string",
            sectionType: "Test string",
        });
        /** Gets a device. */
        await gapi.client.androiddeviceprovisioning.partners.devices.get({
            name: "Test string",
        });
        /** Gets a device's SIM lock state. */
        await gapi.client.androiddeviceprovisioning.partners.devices.getSimLockState({
            partnerId: "Test string",
        }, {
            deviceIdentifier: {
                chromeOsAttestedDeviceId: "Test string",
                deviceType: "Test string",
                imei: "Test string",
                manufacturer: "Test string",
                meid: "Test string",
                model: "Test string",
                serialNumber: "Test string",
            },
        });
        /** Updates reseller metadata associated with the device. Android devices only. */
        await gapi.client.androiddeviceprovisioning.partners.devices.metadata({
            deviceId: "Test string",
            metadataOwnerId: "Test string",
        }, {
            deviceMetadata: {
                entries: {
                    A: "Test string"
                },
            },
        });
        /** Unclaims a device from a customer and removes it from zero-touch enrollment. */
        await gapi.client.androiddeviceprovisioning.partners.devices.unclaim({
            partnerId: "Test string",
        }, {
            deviceId: "Test string",
            deviceIdentifier: {
                chromeOsAttestedDeviceId: "Test string",
                deviceType: "Test string",
                imei: "Test string",
                manufacturer: "Test string",
                meid: "Test string",
                model: "Test string",
                serialNumber: "Test string",
            },
            sectionType: "Test string",
            vacationModeDays: 42,
            vacationModeExpireTime: "Test string",
        });
        /**
         * Unclaims a batch of devices for a customer asynchronously. Removes the devices from zero-touch enrollment. To learn more, read [Longâ€‘running batch
         * operations](/zero-touch/guides/how-it-works#operations).
         */
        await gapi.client.androiddeviceprovisioning.partners.devices.unclaimAsync({
            partnerId: "Test string",
        }, {
            unclaims: [
                {
                    deviceId: "Test string",
                    deviceIdentifier: {
                        chromeOsAttestedDeviceId: "Test string",
                        deviceType: "Test string",
                        imei: "Test string",
                        manufacturer: "Test string",
                        meid: "Test string",
                        model: "Test string",
                        serialNumber: "Test string",
                    },
                    sectionType: "Test string",
                    vacationModeDays: 42,
                    vacationModeExpireTime: "Test string",
                }
            ],
        });
        /**
         * Updates the reseller metadata attached to a batch of devices. This method updates devices asynchronously and returns an `Operation` that can be used to track progress. Read
         * [Longâ€‘running batch operations](/zero-touch/guides/how-it-works#operations). Android Devices only.
         */
        await gapi.client.androiddeviceprovisioning.partners.devices.updateMetadataAsync({
            partnerId: "Test string",
        }, {
            updates: [
                {
                    deviceId: "Test string",
                    deviceIdentifier: {
                        chromeOsAttestedDeviceId: "Test string",
                        deviceType: "Test string",
                        imei: "Test string",
                        manufacturer: "Test string",
                        meid: "Test string",
                        model: "Test string",
                        serialNumber: "Test string",
                    },
                    deviceMetadata: {
                        entries: {
                            A: "Test string"
                        },
                    },
                }
            ],
        });
        /** Lists the vendors of the partner. */
        await gapi.client.androiddeviceprovisioning.partners.vendors.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Lists the customers of the vendor. */
        await gapi.client.androiddeviceprovisioning.partners.vendors.customers.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
    }
});
