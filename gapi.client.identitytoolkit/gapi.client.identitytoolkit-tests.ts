/* This is stub file for gapi.client.identitytoolkit definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('identitytoolkit', 'v3', () => {
        /** now we can use gapi.client.identitytoolkit */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View and administer all your Firebase data and settings */
            'https://www.googleapis.com/auth/firebase',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Creates the URI used by the IdP to authenticate the user. */
        await gapi.client.identitytoolkit.relyingparty.createAuthUri({} , {
            appId: "Test string",
            authFlowType: "Test string",
            clientId: "Test string",
            context: "Test string",
            continueUri: "Test string",
            customParameter: {
                A: "Test string"            },
            hostedDomain: "Test string",
            identifier: "Test string",
            oauthConsumerKey: "Test string",
            oauthScope: "Test string",
            openidRealm: "Test string",
            otaApp: "Test string",
            providerId: "Test string",
            sessionId: "Test string",
            tenantId: "Test string",
            tenantProjectNumber: "Test string",
        });
        /** Delete user account. */
        await gapi.client.identitytoolkit.relyingparty.deleteAccount({} , {
            delegatedProjectNumber: "Test string",
            idToken: "Test string",
            localId: "Test string",
        });
        /** Batch download user accounts. */
        await gapi.client.identitytoolkit.relyingparty.downloadAccount({} , {
            delegatedProjectNumber: "Test string",
            maxResults: 42,
            nextPageToken: "Test string",
            targetProjectId: "Test string",
        });
        /** Reset password for a user. */
        await gapi.client.identitytoolkit.relyingparty.emailLinkSignin({} , {
            email: "Test string",
            idToken: "Test string",
            oobCode: "Test string",
        });
        /** Returns the account info. */
        await gapi.client.identitytoolkit.relyingparty.getAccountInfo({} , {
            delegatedProjectNumber: "Test string",
            email: [
                "Test string"            ],
            idToken: "Test string",
            localId: [
                "Test string"            ],
            phoneNumber: [
                "Test string"            ],
        });
        /** Get a code for user action confirmation. */
        await gapi.client.identitytoolkit.relyingparty.getOobConfirmationCode({} , {
            androidInstallApp: true,
            androidMinimumVersion: "Test string",
            androidPackageName: "Test string",
            canHandleCodeInApp: true,
            captchaResp: "Test string",
            challenge: "Test string",
            continueUrl: "Test string",
            email: "Test string",
            idToken: "Test string",
            iOSAppStoreId: "Test string",
            iOSBundleId: "Test string",
            kind: "Test string",
            newEmail: "Test string",
            requestType: "Test string",
            userIp: "Test string",
        });
        /** Get project configuration. */
        await gapi.client.identitytoolkit.relyingparty.getProjectConfig({
            delegatedProjectNumber: "Test string",
            projectNumber: "Test string",
        });
        /** Get token signing public key. */
        await gapi.client.identitytoolkit.relyingparty.getPublicKeys();
        /** Get recaptcha secure param. */
        await gapi.client.identitytoolkit.relyingparty.getRecaptchaParam();
        /** Reset password for a user. */
        await gapi.client.identitytoolkit.relyingparty.resetPassword({} , {
            email: "Test string",
            newPassword: "Test string",
            oldPassword: "Test string",
            oobCode: "Test string",
        });
        /** Send SMS verification code. */
        await gapi.client.identitytoolkit.relyingparty.sendVerificationCode({} , {
            iosReceipt: "Test string",
            iosSecret: "Test string",
            phoneNumber: "Test string",
            recaptchaToken: "Test string",
        });
        /** Set account info for a user. */
        await gapi.client.identitytoolkit.relyingparty.setAccountInfo({} , {
            captchaChallenge: "Test string",
            captchaResponse: "Test string",
            createdAt: "Test string",
            customAttributes: "Test string",
            delegatedProjectNumber: "Test string",
            deleteAttribute: [
                "Test string"            ],
            deleteProvider: [
                "Test string"            ],
            disableUser: true,
            displayName: "Test string",
            email: "Test string",
            emailVerified: true,
            idToken: "Test string",
            instanceId: "Test string",
            lastLoginAt: "Test string",
            localId: "Test string",
            oobCode: "Test string",
            password: "Test string",
            phoneNumber: "Test string",
            photoUrl: "Test string",
            provider: [
                "Test string"            ],
            returnSecureToken: true,
            upgradeToFederatedLogin: true,
            validSince: "Test string",
        });
        /** Set project configuration. */
        await gapi.client.identitytoolkit.relyingparty.setProjectConfig({} , {
            allowPasswordUser: true,
            apiKey: "Test string",
            authorizedDomains: [
                "Test string"            ],
            changeEmailTemplate: {
                body: "Test string",
                format: "Test string",
                from: "Test string",
                fromDisplayName: "Test string",
                replyTo: "Test string",
                subject: "Test string",
            },
            delegatedProjectNumber: "Test string",
            enableAnonymousUser: true,
            idpConfig: [
                {
                    clientId: "Test string",
                    enabled: true,
                    experimentPercent: 42,
                    provider: "Test string",
                    secret: "Test string",
                    whitelistedAudiences: [
                        "Test string"                    ],
                }            ],
            legacyResetPasswordTemplate: {
                body: "Test string",
                format: "Test string",
                from: "Test string",
                fromDisplayName: "Test string",
                replyTo: "Test string",
                subject: "Test string",
            },
            resetPasswordTemplate: {
                body: "Test string",
                format: "Test string",
                from: "Test string",
                fromDisplayName: "Test string",
                replyTo: "Test string",
                subject: "Test string",
            },
            useEmailSending: true,
            verifyEmailTemplate: {
                body: "Test string",
                format: "Test string",
                from: "Test string",
                fromDisplayName: "Test string",
                replyTo: "Test string",
                subject: "Test string",
            },
        });
        /** Sign out user. */
        await gapi.client.identitytoolkit.relyingparty.signOutUser({} , {
            instanceId: "Test string",
            localId: "Test string",
        });
        /** Signup new user. */
        await gapi.client.identitytoolkit.relyingparty.signupNewUser({} , {
            captchaChallenge: "Test string",
            captchaResponse: "Test string",
            disabled: true,
            displayName: "Test string",
            email: "Test string",
            emailVerified: true,
            idToken: "Test string",
            instanceId: "Test string",
            localId: "Test string",
            password: "Test string",
            phoneNumber: "Test string",
            photoUrl: "Test string",
            tenantId: "Test string",
            tenantProjectNumber: "Test string",
        });
        /** Batch upload existing user accounts. */
        await gapi.client.identitytoolkit.relyingparty.uploadAccount({} , {
            allowOverwrite: true,
            blockSize: 42,
            cpuMemCost: 42,
            delegatedProjectNumber: "Test string",
            dkLen: 42,
            hashAlgorithm: "Test string",
            memoryCost: 42,
            parallelization: 42,
            rounds: 42,
            saltSeparator: "Test string",
            sanityCheck: true,
            signerKey: "Test string",
            targetProjectId: "Test string",
            users: [
                {
                    createdAt: "Test string",
                    customAttributes: "Test string",
                    customAuth: true,
                    disabled: true,
                    displayName: "Test string",
                    email: "Test string",
                    emailVerified: true,
                    lastLoginAt: "Test string",
                    localId: "Test string",
                    passwordHash: "Test string",
                    passwordUpdatedAt: 42,
                    phoneNumber: "Test string",
                    photoUrl: "Test string",
                    providerUserInfo: [
                        {
                            displayName: "Test string",
                            email: "Test string",
                            federatedId: "Test string",
                            phoneNumber: "Test string",
                            photoUrl: "Test string",
                            providerId: "Test string",
                            rawId: "Test string",
                            screenName: "Test string",
                        }                    ],
                    rawPassword: "Test string",
                    salt: "Test string",
                    screenName: "Test string",
                    validSince: "Test string",
                    version: 42,
                }            ],
        });
        /** Verifies the assertion returned by the IdP. */
        await gapi.client.identitytoolkit.relyingparty.verifyAssertion({} , {
            autoCreate: true,
            delegatedProjectNumber: "Test string",
            idToken: "Test string",
            instanceId: "Test string",
            pendingIdToken: "Test string",
            postBody: "Test string",
            requestUri: "Test string",
            returnIdpCredential: true,
            returnRefreshToken: true,
            returnSecureToken: true,
            sessionId: "Test string",
            tenantId: "Test string",
            tenantProjectNumber: "Test string",
        });
        /** Verifies the developer asserted ID token. */
        await gapi.client.identitytoolkit.relyingparty.verifyCustomToken({} , {
            delegatedProjectNumber: "Test string",
            instanceId: "Test string",
            returnSecureToken: true,
            token: "Test string",
        });
        /** Verifies the user entered password. */
        await gapi.client.identitytoolkit.relyingparty.verifyPassword({} , {
            captchaChallenge: "Test string",
            captchaResponse: "Test string",
            delegatedProjectNumber: "Test string",
            email: "Test string",
            idToken: "Test string",
            instanceId: "Test string",
            password: "Test string",
            pendingIdToken: "Test string",
            returnSecureToken: true,
            tenantId: "Test string",
            tenantProjectNumber: "Test string",
        });
        /** Verifies ownership of a phone number and creates/updates the user account accordingly. */
        await gapi.client.identitytoolkit.relyingparty.verifyPhoneNumber({} , {
            code: "Test string",
            idToken: "Test string",
            operation: "Test string",
            phoneNumber: "Test string",
            sessionInfo: "Test string",
            temporaryProof: "Test string",
            verificationProof: "Test string",
        });
    }
});
