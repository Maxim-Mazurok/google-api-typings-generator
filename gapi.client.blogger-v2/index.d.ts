/* Type definitions for non-npm package Blogger API v2 0.0 */
// Project: https://developers.google.com/blogger/docs/3.0/getting_started
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://blogger.googleapis.com/$discovery/rest?version=v2
// Revision: 20230507

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Blogger API v2 */
    function load(urlOrObject: "https://blogger.googleapis.com/$discovery/rest?version=v2"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "blogger", version: "v2"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "blogger", version: "v2", callback: () => any): void;

    namespace blogger {
        interface Blog {
            /** The JSON custom meta-data for the Blog. */
            customMetaData?:
                string;
            /** The description of this blog. This is displayed underneath the title. */
            description?:
                string;
            /** The identifier for this resource. */
            id?:
                string;
            /** The kind of this entry. Always blogger#blog. */
            kind?:
                string;
            /** The locale this Blog is set to. */
            locale?:
                {
                    /** The country this blog's locale is set to. */
                    country?:
                        string;
                    /** The language this blog is authored in. */
                    language?:
                        string;
                    /** The language variant this blog is authored in. */
                    variant?:
                        string;
                };
            /** The name of this blog. This is displayed as the title. */
            name?:
                string;
            /** The container of pages in this blog. */
            pages?:
                {
                    /** The URL of the container for pages in this blog. */
                    selfLink?:
                        string;
                    /** The count of pages in this blog. */
                    totalItems?:
                        number;
                };
            /** The container of posts in this blog. */
            posts?:
                {
                    /** The List of Posts for this Blog. */
                    items?:
                        Post[];
                    /** The URL of the container for posts in this blog. */
                    selfLink?:
                        string;
                    /** The count of posts in this blog. */
                    totalItems?:
                        number;
                };
            /** RFC 3339 date-time when this blog was published. */
            published?:
                string;
            /** The API REST URL to fetch this resource from. */
            selfLink?:
                string;
            /** The status of the blog. */
            status?:
                string;
            /** RFC 3339 date-time when this blog was last updated. */
            updated?:
                string;
            /** The URL where this blog is published. */
            url?:
                string;
        }
        interface BlogList {
            /** Admin level list of blog per-user information. */
            blogUserInfos?:
                BlogUserInfo[];
            /** The list of Blogs this user has Authorship or Admin rights over. */
            items?:
                Blog[];
            /** The kind of this entity. Always blogger#blogList. */
            kind?:
                string;
        }
        interface BlogPerUserInfo {
            /** ID of the Blog resource. */
            blogId?:
                string;
            /** True if the user has Admin level access to the blog. */
            hasAdminAccess?:
                boolean;
            /** The kind of this entity. Always blogger#blogPerUserInfo. */
            kind?:
                string;
            /** The Photo Album Key for the user when adding photos to the blog. */
            photosAlbumKey?:
                string;
            /** Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER). */
            role?:
                string;
            /** ID of the User. */
            userId?:
                string;
        }
        interface BlogUserInfo {
            /** The Blog resource. */
            blog?:
                Blog;
            /** Information about a User for the Blog. */
            blog_user_info?:
                BlogPerUserInfo;
            /** The kind of this entity. Always blogger#blogUserInfo. */
            kind?:
                string;
        }
        interface Comment {
            /** The author of this Comment. */
            author?:
                {
                    /** The display name. */
                    displayName?:
                        string;
                    /** The identifier of the creator. */
                    id?:
                        string;
                    /** The creator's avatar. */
                    image?:
                        {
                            /** The creator's avatar URL. */
                            url?:
                                string;
                        };
                    /** The URL of the creator's Profile page. */
                    url?:
                        string;
                };
            /** Data about the blog containing this comment. */
            blog?:
                {
                    /** The identifier of the blog containing this comment. */
                    id?:
                        string;
                };
            /** The actual content of the comment. May include HTML markup. */
            content?:
                string;
            /** The identifier for this resource. */
            id?:
                string;
            /** Data about the comment this is in reply to. */
            inReplyTo?:
                {
                    /** The identified of the parent of this comment. */
                    id?:
                        string;
                };
            /** The kind of this entry. Always blogger#comment. */
            kind?:
                string;
            /** Data about the post containing this comment. */
            post?:
                {
                    /** The identifier of the post containing this comment. */
                    id?:
                        string;
                };
            /** RFC 3339 date-time when this comment was published. */
            published?:
                string;
            /** The API REST URL to fetch this resource from. */
            selfLink?:
                string;
            /** The status of the comment (only populated for admin users). */
            status?:
                string;
            /** RFC 3339 date-time when this comment was last updated. */
            updated?:
                string;
        }
        interface CommentList {
            /** Etag of the response. */
            etag?:
                string;
            /** The List of Comments for a Post. */
            items?:
                Comment[];
            /** The kind of this entry. Always blogger#commentList. */
            kind?:
                string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?:
                string;
            /** Pagination token to fetch the previous page, if one exists. */
            prevPageToken?:
                string;
        }
        interface Page {
            /** The author of this Page. */
            author?:
                {
                    /** The display name. */
                    displayName?:
                        string;
                    /** The identifier of the creator. */
                    id?:
                        string;
                    /** The creator's avatar. */
                    image?:
                        {
                            /** The creator's avatar URL. */
                            url?:
                                string;
                        };
                    /** The URL of the creator's Profile page. */
                    url?:
                        string;
                };
            /** Data about the blog containing this Page. */
            blog?:
                {
                    /** The identifier of the blog containing this page. */
                    id?:
                        string;
                };
            /** The body content of this Page, in HTML. */
            content?:
                string;
            /** Etag of the resource. */
            etag?:
                string;
            /** The identifier for this resource. */
            id?:
                string;
            /** The kind of this entity. Always blogger#page. */
            kind?:
                string;
            /** RFC 3339 date-time when this Page was published. */
            published?:
                string;
            /** The API REST URL to fetch this resource from. */
            selfLink?:
                string;
            /** The status of the page for admin resources (either LIVE or DRAFT). */
            status?:
                string;
            /** The title of this entity. This is the name displayed in the Admin user interface. */
            title?:
                string;
            /** RFC 3339 date-time when this Page was trashed. */
            trashed?:
                string;
            /** RFC 3339 date-time when this Page was last updated. */
            updated?:
                string;
            /** The URL that this Page is displayed at. */
            url?:
                string;
        }
        interface PageList {
            /** Etag of the response. */
            etag?:
                string;
            /** The list of Pages for a Blog. */
            items?:
                Page[];
            /** The kind of this entity. Always blogger#pageList. */
            kind?:
                string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?:
                string;
        }
        interface Post {
            /** The author of this Post. */
            author?:
                {
                    /** The display name. */
                    displayName?:
                        string;
                    /** The identifier of the creator. */
                    id?:
                        string;
                    /** The creator's avatar. */
                    image?:
                        {
                            /** The creator's avatar URL. */
                            url?:
                                string;
                        };
                    /** The URL of the creator's Profile page. */
                    url?:
                        string;
                };
            /** Data about the blog containing this Post. */
            blog?:
                {
                    /** The identifier of the Blog that contains this Post. */
                    id?:
                        string;
                };
            /** The content of the Post. May contain HTML markup. */
            content?:
                string;
            /** The JSON meta-data for the Post. */
            customMetaData?:
                string;
            /** Etag of the resource. */
            etag?:
                string;
            /** The identifier of this Post. */
            id?:
                string;
            /** Display image for the Post. */
            images?:
                Array<{
                    url?:
                        string;
                }>;
            /** The kind of this entity. Always blogger#post. */
            kind?:
                string;
            /** The list of labels this Post was tagged with. */
            labels?:
                string[];
            /** The location for geotagged posts. */
            location?:
                {
                    /** Location's latitude. */
                    lat?:
                        number;
                    /** Location's longitude. */
                    lng?:
                        number;
                    /** Location name. */
                    name?:
                        string;
                    /** Location's viewport span. Can be used when rendering a map preview. */
                    span?:
                        string;
                };
            /** RFC 3339 date-time when this Post was published. */
            published?:
                string;
            /** Comment control and display setting for readers of this post. */
            readerComments?:
                string;
            /** The container of comments on this Post. */
            replies?:
                {
                    /** The List of Comments for this Post. */
                    items?:
                        Comment[];
                    /** The URL of the comments on this post. */
                    selfLink?:
                        string;
                    /** The count of comments on this post. */
                    totalItems?:
                        string;
                };
            /** The API REST URL to fetch this resource from. */
            selfLink?:
                string;
            /** Status of the post. Only set for admin-level requests. */
            status?:
                string;
            /** The title of the Post. */
            title?:
                string;
            /** The title link URL, similar to atom's related link. */
            titleLink?:
                string;
            /** RFC 3339 date-time when this Post was last trashed. */
            trashed?:
                string;
            /** RFC 3339 date-time when this Post was last updated. */
            updated?:
                string;
            /** The URL where this Post is displayed. */
            url?:
                string;
        }
        interface PostList {
            /** Etag of the response. */
            etag?:
                string;
            /** The list of Posts for this Blog. */
            items?:
                Post[];
            /** The kind of this entity. Always blogger#postList. */
            kind?:
                string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?:
                string;
            /** Pagination token to fetch the previous page, if one exists. */
            prevPageToken?:
                string;
        }
        interface User {
            /** Profile summary information. */
            about?:
                string;
            /** The container of blogs for this user. */
            blogs?:
                {
                    /** The URL of the Blogs for this user. */
                    selfLink?:
                        string;
                };
            /** The timestamp of when this profile was created, in seconds since epoch. */
            created?:
                string;
            /** The display name. */
            displayName?:
                string;
            /** The identifier for this User. */
            id?:
                string;
            /** The kind of this entity. Always blogger#user. */
            kind?:
                string;
            /** This user's locale */
            locale?:
                {
                    /** The country this blog's locale is set to. */
                    country?:
                        string;
                    /** The language this blog is authored in. */
                    language?:
                        string;
                    /** The language variant this blog is authored in. */
                    variant?:
                        string;
                };
            /** The API REST URL to fetch this resource from. */
            selfLink?:
                string;
            /** The user's profile page. */
            url?:
                string;
        }
        interface BlogsResource {
            /** Gets a blog by id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Blog>;
            /** Lists blogs by user id, possibly filtered. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                userId:
                    string;
            }): Request<BlogList>;
        }
        interface CommentsResource {
            /** Gets a comment by blog id, post id and comment id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                commentId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                postId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Comment>;
            /** Lists comments. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                fetchBodies?:
                    boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                maxResults?:
                    number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                pageToken?:
                    string;
                postId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                startDate?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CommentList>;
        }
        interface PagesResource {
            /** Gets a page by blog id and page id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                pageId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Page>;
            /** Lists pages. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                fetchBodies?:
                    boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<PageList>;
        }
        interface PostsResource {
            /** Gets a post by blog id and post id */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                postId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Post>;
            /** Lists posts. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                blogId:
                    string;
                /** JSONP */
                callback?:
                    string;
                fetchBodies?:
                    boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                maxResults?:
                    number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                startDate?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<PostList>;
        }
        interface UsersResource {
            /** Gets a user by user id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                userId:
                    string;
            }): Request<User>;
        }

        const blogs: BlogsResource;

        const comments: CommentsResource;

        const pages: PagesResource;

        const posts: PostsResource;

        const users: UsersResource;
    }
}
