/* This is stub file for gapi.client.blogger-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220912

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://blogger.googleapis.com/$discovery/rest?version=v2');
    /** now we can use gapi.client.blogger */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** Manage your Blogger account */
        'https://www.googleapis.com/auth/blogger',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets a blog by id. */
        await gapi.client.blogger.blogs.get({
            blogId: "Test string",
        });
        /** Lists blogs by user id, possibly filtered. */
        await gapi.client.blogger.blogs.list({
            userId: "Test string",
        });
        /** Gets a comment by blog id, post id and comment id. */
        await gapi.client.blogger.comments.get({
            blogId: "Test string",
            commentId: "Test string",
            postId: "Test string",
        });
        /** Lists comments. */
        await gapi.client.blogger.comments.list({
            blogId: "Test string",
            fetchBodies: true,
            maxResults: 42,
            pageToken: "Test string",
            postId: "Test string",
            startDate: "Test string",
        });
        /** Gets a page by blog id and page id. */
        await gapi.client.blogger.pages.get({
            blogId: "Test string",
            pageId: "Test string",
        });
        /** Lists pages. */
        await gapi.client.blogger.pages.list({
            blogId: "Test string",
            fetchBodies: true,
        });
        /** Gets a post by blog id and post id */
        await gapi.client.blogger.posts.get({
            blogId: "Test string",
            postId: "Test string",
        });
        /** Lists posts. */
        await gapi.client.blogger.posts.list({
            blogId: "Test string",
            fetchBodies: true,
            maxResults: 42,
            pageToken: "Test string",
            startDate: "Test string",
        });
        /** Gets a user by user id. */
        await gapi.client.blogger.users.get({
            userId: "Test string",
        });
    }
});
