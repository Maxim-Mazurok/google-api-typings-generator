/* This is stub file for gapi.client.apphub-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20251028

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://apphub.googleapis.com/$discovery/rest?version=v1alpha',
  );
  /** now we can use gapi.client.apphub */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Detaches a service project from a host project. You can call this API from any service project without needing access to the host project that it is attached to. */
    await gapi.client.apphub.projects.locations.detachServiceProjectAttachment(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets information about a location. */
    await gapi.client.apphub.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.apphub.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists a service project attachment for a given service project. You can call this API from any project to find if it is attached to a host project. */
    await gapi.client.apphub.projects.locations.lookupServiceProjectAttachment({
      name: 'Test string',
    });
    /** Creates an Application in a host project and location. */
    await gapi.client.apphub.projects.locations.applications.create(
      {
        applicationId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        attributes: {
          businessOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          criticality: {
            level: 'Test string',
            missionCritical: true,
            type: 'Test string',
          },
          developerOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          environment: {
            environment: 'Test string',
            type: 'Test string',
          },
          operatorOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        scope: {
          type: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an Application in a host project and location. */
    await gapi.client.apphub.projects.locations.applications.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets an Application in a host project and location. */
    await gapi.client.apphub.projects.locations.applications.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.apphub.projects.locations.applications.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists Applications in a host project and location. */
    await gapi.client.apphub.projects.locations.applications.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an Application in a host project and location. */
    await gapi.client.apphub.projects.locations.applications.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          businessOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          criticality: {
            level: 'Test string',
            missionCritical: true,
            type: 'Test string',
          },
          developerOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          environment: {
            environment: 'Test string',
            type: 'Test string',
          },
          operatorOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        scope: {
          type: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.apphub.projects.locations.applications.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.apphub.projects.locations.applications.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a Service in an Application. */
    await gapi.client.apphub.projects.locations.applications.services.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        serviceId: 'Test string',
      },
      {
        attributes: {
          businessOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          criticality: {
            level: 'Test string',
            missionCritical: true,
            type: 'Test string',
          },
          developerOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          environment: {
            environment: 'Test string',
            type: 'Test string',
          },
          operatorOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        description: 'Test string',
        discoveredService: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        serviceProperties: {
          functionalType: {
            type: 'Test string',
          },
          gcpProject: 'Test string',
          location: 'Test string',
          zone: 'Test string',
        },
        serviceReference: {
          path: 'Test string',
          uri: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a Service from an Application. */
    await gapi.client.apphub.projects.locations.applications.services.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets a Service in an Application. */
    await gapi.client.apphub.projects.locations.applications.services.get({
      name: 'Test string',
    });
    /** Lists Services in an Application. */
    await gapi.client.apphub.projects.locations.applications.services.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Service in an Application. */
    await gapi.client.apphub.projects.locations.applications.services.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          businessOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          criticality: {
            level: 'Test string',
            missionCritical: true,
            type: 'Test string',
          },
          developerOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          environment: {
            environment: 'Test string',
            type: 'Test string',
          },
          operatorOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        description: 'Test string',
        discoveredService: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        serviceProperties: {
          functionalType: {
            type: 'Test string',
          },
          gcpProject: 'Test string',
          location: 'Test string',
          zone: 'Test string',
        },
        serviceReference: {
          path: 'Test string',
          uri: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a Workload in an Application. */
    await gapi.client.apphub.projects.locations.applications.workloads.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        workloadId: 'Test string',
      },
      {
        attributes: {
          businessOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          criticality: {
            level: 'Test string',
            missionCritical: true,
            type: 'Test string',
          },
          developerOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          environment: {
            environment: 'Test string',
            type: 'Test string',
          },
          operatorOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        description: 'Test string',
        discoveredWorkload: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        workloadProperties: {
          functionalType: {
            type: 'Test string',
          },
          gcpProject: 'Test string',
          location: 'Test string',
          zone: 'Test string',
        },
        workloadReference: {
          uri: 'Test string',
        },
      },
    );
    /** Deletes a Workload from an Application. */
    await gapi.client.apphub.projects.locations.applications.workloads.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets a Workload in an Application. */
    await gapi.client.apphub.projects.locations.applications.workloads.get({
      name: 'Test string',
    });
    /** Lists Workloads in an Application. */
    await gapi.client.apphub.projects.locations.applications.workloads.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Workload in an Application. */
    await gapi.client.apphub.projects.locations.applications.workloads.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          businessOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          criticality: {
            level: 'Test string',
            missionCritical: true,
            type: 'Test string',
          },
          developerOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
          environment: {
            environment: 'Test string',
            type: 'Test string',
          },
          operatorOwners: [
            {
              channel: {
                uri: 'Test string',
              },
              displayName: 'Test string',
              email: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        description: 'Test string',
        discoveredWorkload: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        workloadProperties: {
          functionalType: {
            type: 'Test string',
          },
          gcpProject: 'Test string',
          location: 'Test string',
          zone: 'Test string',
        },
        workloadReference: {
          uri: 'Test string',
        },
      },
    );
    /** Finds unregistered services in a host project and location. */
    await gapi.client.apphub.projects.locations.discoveredServices.findUnregistered(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Gets a Discovered Service in a host project and location. */
    await gapi.client.apphub.projects.locations.discoveredServices.get({
      name: 'Test string',
    });
    /** Lists Discovered Services that can be added to an Application in a host project and location. */
    await gapi.client.apphub.projects.locations.discoveredServices.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists a Discovered Service in a host project and location, with a given resource URI. */
    await gapi.client.apphub.projects.locations.discoveredServices.lookup({
      parent: 'Test string',
      uri: 'Test string',
    });
    /** Finds unregistered workloads in a host project and location. */
    await gapi.client.apphub.projects.locations.discoveredWorkloads.findUnregistered(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Gets a Discovered Workload in a host project and location. */
    await gapi.client.apphub.projects.locations.discoveredWorkloads.get({
      name: 'Test string',
    });
    /** Lists Discovered Workloads that can be added to an Application in a host project and location. */
    await gapi.client.apphub.projects.locations.discoveredWorkloads.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists a Discovered Workload in a host project and location, with a given resource URI. */
    await gapi.client.apphub.projects.locations.discoveredWorkloads.lookup({
      parent: 'Test string',
      uri: 'Test string',
    });
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.apphub.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.apphub.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.apphub.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.apphub.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      returnPartialSuccess: true,
    });
    /** Attaches a service project to the host project. */
    await gapi.client.apphub.projects.locations.serviceProjectAttachments.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        serviceProjectAttachmentId: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        serviceProject: 'Test string',
        state: 'Test string',
        uid: 'Test string',
      },
    );
    /** Deletes a service project attachment. */
    await gapi.client.apphub.projects.locations.serviceProjectAttachments.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets a service project attachment. */
    await gapi.client.apphub.projects.locations.serviceProjectAttachments.get({
      name: 'Test string',
    });
    /** Lists service projects attached to the host project. */
    await gapi.client.apphub.projects.locations.serviceProjectAttachments.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
