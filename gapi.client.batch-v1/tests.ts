/* This is stub file for gapi.client.batch-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230111

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://batch.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.batch */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.batch.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.batch.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Create a Job. */
        await gapi.client.batch.projects.locations.jobs.create({
            jobId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            allocationPolicy: {
                instances: [
                    {
                        installGpuDrivers: true,
                        instanceTemplate: "Test string",
                        policy: {
                            accelerators: [
                                {
                                    count: "Test string",
                                    installGpuDrivers: true,
                                    type: "Test string",
                                }
                            ],
                            bootDisk: {
                                diskInterface: "Test string",
                                image: "Test string",
                                sizeGb: "Test string",
                                snapshot: "Test string",
                                type: "Test string",
                            },
                            disks: [
                                {
                                    deviceName: "Test string",
                                    existingDisk: "Test string",
                                    newDisk: {
                                        diskInterface: "Test string",
                                        image: "Test string",
                                        sizeGb: "Test string",
                                        snapshot: "Test string",
                                        type: "Test string",
                                    },
                                }
                            ],
                            machineType: "Test string",
                            minCpuPlatform: "Test string",
                            provisioningModel: "Test string",
                        },
                    }
                ],
                labels: {
                    A: "Test string"
                },
                location: {
                    allowedLocations: [
                        "Test string"
                    ],
                },
                network: {
                    networkInterfaces: [
                        {
                            network: "Test string",
                            noExternalIpAddress: true,
                            subnetwork: "Test string",
                        }
                    ],
                },
                serviceAccount: {
                    email: "Test string",
                },
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            logsPolicy: {
                destination: "Test string",
                logsPath: "Test string",
            },
            name: "Test string",
            notifications: [
                {
                    message: {
                        newJobState: "Test string",
                        newTaskState: "Test string",
                        type: "Test string",
                    },
                    pubsubTopic: "Test string",
                }
            ],
            priority: "Test string",
            status: {
                runDuration: "Test string",
                state: "Test string",
                statusEvents: [
                    {
                        description: "Test string",
                        eventTime: "Test string",
                        taskExecution: {
                            exitCode: 42,
                        },
                        type: "Test string",
                    }
                ],
                taskGroups: {
                    A: {
                        counts: {
                            A: "Test string"
                        },
                        instances: [
                            {
                                machineType: "Test string",
                                provisioningModel: "Test string",
                                taskPack: "Test string",
                            }
                        ],
                    }
                },
            },
            taskGroups: [
                {
                    name: "Test string",
                    parallelism: "Test string",
                    permissiveSsh: true,
                    requireHostsFile: true,
                    taskCount: "Test string",
                    taskCountPerNode: "Test string",
                    taskEnvironments: [
                        {
                            encryptedVariables: {
                                cipherText: "Test string",
                                keyName: "Test string",
                            },
                            secretVariables: {
                                A: "Test string"
                            },
                            variables: {
                                A: "Test string"
                            },
                        }
                    ],
                    taskSpec: {
                        computeResource: {
                            bootDiskMib: "Test string",
                            cpuMilli: "Test string",
                            memoryMib: "Test string",
                        },
                        environment: {
                            encryptedVariables: {
                                cipherText: "Test string",
                                keyName: "Test string",
                            },
                            secretVariables: {
                                A: "Test string"
                            },
                            variables: {
                                A: "Test string"
                            },
                        },
                        environments: {
                            A: "Test string"
                        },
                        lifecyclePolicies: [
                            {
                                action: "Test string",
                                actionCondition: {
                                    exitCodes: [
                                        42
                                    ],
                                },
                            }
                        ],
                        maxRetryCount: 42,
                        maxRunDuration: "Test string",
                        runnables: [
                            {
                                alwaysRun: true,
                                background: true,
                                barrier: {
                                    name: "Test string",
                                },
                                container: {
                                    blockExternalNetwork: true,
                                    commands: [
                                        "Test string"
                                    ],
                                    entrypoint: "Test string",
                                    imageUri: "Test string",
                                    options: "Test string",
                                    password: "Test string",
                                    username: "Test string",
                                    volumes: [
                                        "Test string"
                                    ],
                                },
                                environment: {
                                    encryptedVariables: {
                                        cipherText: "Test string",
                                        keyName: "Test string",
                                    },
                                    secretVariables: {
                                        A: "Test string"
                                    },
                                    variables: {
                                        A: "Test string"
                                    },
                                },
                                ignoreExitStatus: true,
                                script: {
                                    path: "Test string",
                                    text: "Test string",
                                },
                                timeout: "Test string",
                            }
                        ],
                        volumes: [
                            {
                                deviceName: "Test string",
                                gcs: {
                                    remotePath: "Test string",
                                },
                                mountOptions: [
                                    "Test string"
                                ],
                                mountPath: "Test string",
                                nfs: {
                                    remotePath: "Test string",
                                    server: "Test string",
                                },
                            }
                        ],
                    },
                }
            ],
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Delete a Job. */
        await gapi.client.batch.projects.locations.jobs.delete({
            name: "Test string",
            reason: "Test string",
            requestId: "Test string",
        });
        /** Get a Job specified by its resource name. */
        await gapi.client.batch.projects.locations.jobs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.batch.projects.locations.jobs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** List all Jobs for a project within a region. */
        await gapi.client.batch.projects.locations.jobs.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.batch.projects.locations.jobs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.batch.projects.locations.jobs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Return a single Task. */
        await gapi.client.batch.projects.locations.jobs.taskGroups.tasks.get({
            name: "Test string",
        });
        /** List Tasks associated with a job. */
        await gapi.client.batch.projects.locations.jobs.taskGroups.tasks.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.batch.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.batch.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.batch.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.batch.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Report agent's state, e.g. agent status and tasks information */
        await gapi.client.batch.projects.locations.state.report({
            parent: "Test string",
        }, {
            agentInfo: {
                jobId: "Test string",
                reportTime: "Test string",
                state: "Test string",
                taskGroupId: "Test string",
                tasks: [
                    {
                        runnable: "Test string",
                        taskId: "Test string",
                        taskStatus: {
                            state: "Test string",
                            statusEvents: [
                                {
                                    description: "Test string",
                                    eventTime: "Test string",
                                    taskExecution: {
                                        exitCode: 42,
                                    },
                                    type: "Test string",
                                }
                            ],
                        },
                    }
                ],
            },
            agentTimingInfo: {
                agentStartupTime: "Test string",
                bootTime: "Test string",
                scriptStartupTime: "Test string",
            },
            metadata: {
                creationTime: "Test string",
                creator: "Test string",
                imageVersion: "Test string",
                instance: "Test string",
                instanceId: "Test string",
                instancePreemptionNoticeReceived: true,
                osRelease: {
                    A: "Test string"
                },
                version: "Test string",
                zone: "Test string",
            },
        });
    }
});
