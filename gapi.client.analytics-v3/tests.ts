/* This is stub file for gapi.client.analytics-v3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20190807

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://analytics.googleapis.com/$discovery/rest?version=v3');
    /** now we can use gapi.client.analytics */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** View and manage your Google Analytics data */
        'https://www.googleapis.com/auth/analytics',
        /** Edit Google Analytics management entities */
        'https://www.googleapis.com/auth/analytics.edit',
        /** Manage Google Analytics Account users by email address */
        'https://www.googleapis.com/auth/analytics.manage.users',
        /** View Google Analytics user permissions */
        'https://www.googleapis.com/auth/analytics.manage.users.readonly',
        /** Create a new Google Analytics account along with its default property and view */
        'https://www.googleapis.com/auth/analytics.provision',
        /** View your Google Analytics data */
        'https://www.googleapis.com/auth/analytics.readonly',
        /** Manage Google Analytics user deletion requests */
        'https://www.googleapis.com/auth/analytics.user.deletion',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Returns Analytics data for a view (profile). */
        await gapi.client.analytics.data.ga.get({
            dimensions: "Test string",
            "end-date": "Test string",
            filters: "Test string",
            ids: "Test string",
            "include-empty-rows": true,
            "max-results": 42,
            metrics: "Test string",
            output: "Test string",
            samplingLevel: "Test string",
            segment: "Test string",
            sort: "Test string",
            "start-date": "Test string",
            "start-index": 42,
        });
        /** Returns Analytics Multi-Channel Funnels data for a view (profile). */
        await gapi.client.analytics.data.mcf.get({
            dimensions: "Test string",
            "end-date": "Test string",
            filters: "Test string",
            ids: "Test string",
            "max-results": 42,
            metrics: "Test string",
            samplingLevel: "Test string",
            sort: "Test string",
            "start-date": "Test string",
            "start-index": 42,
        });
        /** Returns real time data for a view (profile). */
        await gapi.client.analytics.data.realtime.get({
            dimensions: "Test string",
            filters: "Test string",
            ids: "Test string",
            "max-results": 42,
            metrics: "Test string",
            sort: "Test string",
        });
        /** Lists all accounts to which the user has access. */
        await gapi.client.analytics.management.accounts.list({
            "max-results": 42,
            "start-index": 42,
        });
        /** Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access. */
        await gapi.client.analytics.management.accountSummaries.list({
            "max-results": 42,
            "start-index": 42,
        });
        /** Removes a user from the given account. */
        await gapi.client.analytics.management.accountUserLinks.delete({
            accountId: "Test string",
            linkId: "Test string",
        });
        /** Adds a new user to the given account. */
        await gapi.client.analytics.management.accountUserLinks.insert({
            accountId: "Test string",
        }, {
            entity: {
                accountRef: {
                    href: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
                profileRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    webPropertyId: "Test string",
                },
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            permissions: {
                effective: [
                    "Test string"
                ],
                local: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            userRef: {
                email: "Test string",
                id: "Test string",
                kind: "Test string",
            },
        });
        /** Lists account-user links for a given account. */
        await gapi.client.analytics.management.accountUserLinks.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
        });
        /** Updates permissions for an existing user on the given account. */
        await gapi.client.analytics.management.accountUserLinks.update({
            accountId: "Test string",
            linkId: "Test string",
        }, {
            entity: {
                accountRef: {
                    href: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
                profileRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    webPropertyId: "Test string",
                },
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            permissions: {
                effective: [
                    "Test string"
                ],
                local: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            userRef: {
                email: "Test string",
                id: "Test string",
                kind: "Test string",
            },
        });
        /** Hashes the given Client ID. */
        await gapi.client.analytics.management.clientId.hashClientId({} , {
            clientId: "Test string",
            kind: "Test string",
            webPropertyId: "Test string",
        });
        /** List custom data sources to which the user has access. */
        await gapi.client.analytics.management.customDataSources.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Get a custom dimension to which the user has access. */
        await gapi.client.analytics.management.customDimensions.get({
            accountId: "Test string",
            customDimensionId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new custom dimension. */
        await gapi.client.analytics.management.customDimensions.insert({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            id: "Test string",
            index: 42,
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            scope: "Test string",
            selfLink: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Lists custom dimensions to which the user has access. */
        await gapi.client.analytics.management.customDimensions.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates an existing custom dimension. This method supports patch semantics. */
        await gapi.client.analytics.management.customDimensions.patch({
            accountId: "Test string",
            customDimensionId: "Test string",
            ignoreCustomDataSourceLinks: true,
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            id: "Test string",
            index: 42,
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            scope: "Test string",
            selfLink: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Updates an existing custom dimension. */
        await gapi.client.analytics.management.customDimensions.update({
            accountId: "Test string",
            customDimensionId: "Test string",
            ignoreCustomDataSourceLinks: true,
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            id: "Test string",
            index: 42,
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            scope: "Test string",
            selfLink: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Get a custom metric to which the user has access. */
        await gapi.client.analytics.management.customMetrics.get({
            accountId: "Test string",
            customMetricId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new custom metric. */
        await gapi.client.analytics.management.customMetrics.insert({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            id: "Test string",
            index: 42,
            kind: "Test string",
            max_value: "Test string",
            min_value: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            scope: "Test string",
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Lists custom metrics to which the user has access. */
        await gapi.client.analytics.management.customMetrics.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates an existing custom metric. This method supports patch semantics. */
        await gapi.client.analytics.management.customMetrics.patch({
            accountId: "Test string",
            customMetricId: "Test string",
            ignoreCustomDataSourceLinks: true,
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            id: "Test string",
            index: 42,
            kind: "Test string",
            max_value: "Test string",
            min_value: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            scope: "Test string",
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Updates an existing custom metric. */
        await gapi.client.analytics.management.customMetrics.update({
            accountId: "Test string",
            customMetricId: "Test string",
            ignoreCustomDataSourceLinks: true,
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            id: "Test string",
            index: 42,
            kind: "Test string",
            max_value: "Test string",
            min_value: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            scope: "Test string",
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Delete an experiment. */
        await gapi.client.analytics.management.experiments.delete({
            accountId: "Test string",
            experimentId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Returns an experiment to which the user has access. */
        await gapi.client.analytics.management.experiments.get({
            accountId: "Test string",
            experimentId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new experiment. */
        await gapi.client.analytics.management.experiments.insert({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            created: "Test string",
            description: "Test string",
            editableInGaUi: true,
            endTime: "Test string",
            equalWeighting: true,
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            minimumExperimentLengthInDays: 42,
            name: "Test string",
            objectiveMetric: "Test string",
            optimizationType: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            profileId: "Test string",
            reasonExperimentEnded: "Test string",
            rewriteVariationUrlsAsOriginal: true,
            selfLink: "Test string",
            servingFramework: "Test string",
            snippet: "Test string",
            startTime: "Test string",
            status: "Test string",
            trafficCoverage: 42,
            updated: "Test string",
            variations: [
                {
                    name: "Test string",
                    status: "Test string",
                    url: "Test string",
                    weight: 42,
                    won: true,
                }
            ],
            webPropertyId: "Test string",
            winnerConfidenceLevel: 42,
            winnerFound: true,
        });
        /** Lists experiments to which the user has access. */
        await gapi.client.analytics.management.experiments.list({
            accountId: "Test string",
            "max-results": 42,
            profileId: "Test string",
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Update an existing experiment. This method supports patch semantics. */
        await gapi.client.analytics.management.experiments.patch({
            accountId: "Test string",
            experimentId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            created: "Test string",
            description: "Test string",
            editableInGaUi: true,
            endTime: "Test string",
            equalWeighting: true,
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            minimumExperimentLengthInDays: 42,
            name: "Test string",
            objectiveMetric: "Test string",
            optimizationType: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            profileId: "Test string",
            reasonExperimentEnded: "Test string",
            rewriteVariationUrlsAsOriginal: true,
            selfLink: "Test string",
            servingFramework: "Test string",
            snippet: "Test string",
            startTime: "Test string",
            status: "Test string",
            trafficCoverage: 42,
            updated: "Test string",
            variations: [
                {
                    name: "Test string",
                    status: "Test string",
                    url: "Test string",
                    weight: 42,
                    won: true,
                }
            ],
            webPropertyId: "Test string",
            winnerConfidenceLevel: 42,
            winnerFound: true,
        });
        /** Update an existing experiment. */
        await gapi.client.analytics.management.experiments.update({
            accountId: "Test string",
            experimentId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            created: "Test string",
            description: "Test string",
            editableInGaUi: true,
            endTime: "Test string",
            equalWeighting: true,
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            minimumExperimentLengthInDays: 42,
            name: "Test string",
            objectiveMetric: "Test string",
            optimizationType: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            profileId: "Test string",
            reasonExperimentEnded: "Test string",
            rewriteVariationUrlsAsOriginal: true,
            selfLink: "Test string",
            servingFramework: "Test string",
            snippet: "Test string",
            startTime: "Test string",
            status: "Test string",
            trafficCoverage: 42,
            updated: "Test string",
            variations: [
                {
                    name: "Test string",
                    status: "Test string",
                    url: "Test string",
                    weight: 42,
                    won: true,
                }
            ],
            webPropertyId: "Test string",
            winnerConfidenceLevel: 42,
            winnerFound: true,
        });
        /** Delete a filter. */
        await gapi.client.analytics.management.filters.delete({
            accountId: "Test string",
            filterId: "Test string",
        });
        /** Returns filters to which the user has access. */
        await gapi.client.analytics.management.filters.get({
            accountId: "Test string",
            filterId: "Test string",
        });
        /** Create a new filter. */
        await gapi.client.analytics.management.filters.insert({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            advancedDetails: {
                caseSensitive: true,
                extractA: "Test string",
                extractB: "Test string",
                fieldA: "Test string",
                fieldAIndex: 42,
                fieldARequired: true,
                fieldB: "Test string",
                fieldBIndex: 42,
                fieldBRequired: true,
                outputConstructor: "Test string",
                outputToField: "Test string",
                outputToFieldIndex: 42,
                overrideOutputField: true,
            },
            created: "Test string",
            excludeDetails: {
                caseSensitive: true,
                expressionValue: "Test string",
                field: "Test string",
                fieldIndex: 42,
                kind: "Test string",
                matchType: "Test string",
            },
            id: "Test string",
            includeDetails: {
                caseSensitive: true,
                expressionValue: "Test string",
                field: "Test string",
                fieldIndex: 42,
                kind: "Test string",
                matchType: "Test string",
            },
            kind: "Test string",
            lowercaseDetails: {
                field: "Test string",
                fieldIndex: 42,
            },
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            searchAndReplaceDetails: {
                caseSensitive: true,
                field: "Test string",
                fieldIndex: 42,
                replaceString: "Test string",
                searchString: "Test string",
            },
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            uppercaseDetails: {
                field: "Test string",
                fieldIndex: 42,
            },
        });
        /** Lists all filters for an account */
        await gapi.client.analytics.management.filters.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
        });
        /** Updates an existing filter. This method supports patch semantics. */
        await gapi.client.analytics.management.filters.patch({
            accountId: "Test string",
            filterId: "Test string",
        }, {
            accountId: "Test string",
            advancedDetails: {
                caseSensitive: true,
                extractA: "Test string",
                extractB: "Test string",
                fieldA: "Test string",
                fieldAIndex: 42,
                fieldARequired: true,
                fieldB: "Test string",
                fieldBIndex: 42,
                fieldBRequired: true,
                outputConstructor: "Test string",
                outputToField: "Test string",
                outputToFieldIndex: 42,
                overrideOutputField: true,
            },
            created: "Test string",
            excludeDetails: {
                caseSensitive: true,
                expressionValue: "Test string",
                field: "Test string",
                fieldIndex: 42,
                kind: "Test string",
                matchType: "Test string",
            },
            id: "Test string",
            includeDetails: {
                caseSensitive: true,
                expressionValue: "Test string",
                field: "Test string",
                fieldIndex: 42,
                kind: "Test string",
                matchType: "Test string",
            },
            kind: "Test string",
            lowercaseDetails: {
                field: "Test string",
                fieldIndex: 42,
            },
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            searchAndReplaceDetails: {
                caseSensitive: true,
                field: "Test string",
                fieldIndex: 42,
                replaceString: "Test string",
                searchString: "Test string",
            },
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            uppercaseDetails: {
                field: "Test string",
                fieldIndex: 42,
            },
        });
        /** Updates an existing filter. */
        await gapi.client.analytics.management.filters.update({
            accountId: "Test string",
            filterId: "Test string",
        }, {
            accountId: "Test string",
            advancedDetails: {
                caseSensitive: true,
                extractA: "Test string",
                extractB: "Test string",
                fieldA: "Test string",
                fieldAIndex: 42,
                fieldARequired: true,
                fieldB: "Test string",
                fieldBIndex: 42,
                fieldBRequired: true,
                outputConstructor: "Test string",
                outputToField: "Test string",
                outputToFieldIndex: 42,
                overrideOutputField: true,
            },
            created: "Test string",
            excludeDetails: {
                caseSensitive: true,
                expressionValue: "Test string",
                field: "Test string",
                fieldIndex: 42,
                kind: "Test string",
                matchType: "Test string",
            },
            id: "Test string",
            includeDetails: {
                caseSensitive: true,
                expressionValue: "Test string",
                field: "Test string",
                fieldIndex: 42,
                kind: "Test string",
                matchType: "Test string",
            },
            kind: "Test string",
            lowercaseDetails: {
                field: "Test string",
                fieldIndex: 42,
            },
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            searchAndReplaceDetails: {
                caseSensitive: true,
                field: "Test string",
                fieldIndex: 42,
                replaceString: "Test string",
                searchString: "Test string",
            },
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            uppercaseDetails: {
                field: "Test string",
                fieldIndex: 42,
            },
        });
        /** Gets a goal to which the user has access. */
        await gapi.client.analytics.management.goals.get({
            accountId: "Test string",
            goalId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new goal. */
        await gapi.client.analytics.management.goals.insert({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            eventDetails: {
                eventConditions: [
                    {
                        comparisonType: "Test string",
                        comparisonValue: "Test string",
                        expression: "Test string",
                        matchType: "Test string",
                        type: "Test string",
                    }
                ],
                useEventValue: true,
            },
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            profileId: "Test string",
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            urlDestinationDetails: {
                caseSensitive: true,
                firstStepRequired: true,
                matchType: "Test string",
                steps: [
                    {
                        name: "Test string",
                        number: 42,
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
            value: 42,
            visitNumPagesDetails: {
                comparisonType: "Test string",
                comparisonValue: "Test string",
            },
            visitTimeOnSiteDetails: {
                comparisonType: "Test string",
                comparisonValue: "Test string",
            },
            webPropertyId: "Test string",
        });
        /** Lists goals to which the user has access. */
        await gapi.client.analytics.management.goals.list({
            accountId: "Test string",
            "max-results": 42,
            profileId: "Test string",
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates an existing goal. This method supports patch semantics. */
        await gapi.client.analytics.management.goals.patch({
            accountId: "Test string",
            goalId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            eventDetails: {
                eventConditions: [
                    {
                        comparisonType: "Test string",
                        comparisonValue: "Test string",
                        expression: "Test string",
                        matchType: "Test string",
                        type: "Test string",
                    }
                ],
                useEventValue: true,
            },
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            profileId: "Test string",
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            urlDestinationDetails: {
                caseSensitive: true,
                firstStepRequired: true,
                matchType: "Test string",
                steps: [
                    {
                        name: "Test string",
                        number: 42,
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
            value: 42,
            visitNumPagesDetails: {
                comparisonType: "Test string",
                comparisonValue: "Test string",
            },
            visitTimeOnSiteDetails: {
                comparisonType: "Test string",
                comparisonValue: "Test string",
            },
            webPropertyId: "Test string",
        });
        /** Updates an existing goal. */
        await gapi.client.analytics.management.goals.update({
            accountId: "Test string",
            goalId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            created: "Test string",
            eventDetails: {
                eventConditions: [
                    {
                        comparisonType: "Test string",
                        comparisonValue: "Test string",
                        expression: "Test string",
                        matchType: "Test string",
                        type: "Test string",
                    }
                ],
                useEventValue: true,
            },
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            profileId: "Test string",
            selfLink: "Test string",
            type: "Test string",
            updated: "Test string",
            urlDestinationDetails: {
                caseSensitive: true,
                firstStepRequired: true,
                matchType: "Test string",
                steps: [
                    {
                        name: "Test string",
                        number: 42,
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
            value: 42,
            visitNumPagesDetails: {
                comparisonType: "Test string",
                comparisonValue: "Test string",
            },
            visitTimeOnSiteDetails: {
                comparisonType: "Test string",
                comparisonValue: "Test string",
            },
            webPropertyId: "Test string",
        });
        /** Delete a profile filter link. */
        await gapi.client.analytics.management.profileFilterLinks.delete({
            accountId: "Test string",
            linkId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Returns a single profile filter link. */
        await gapi.client.analytics.management.profileFilterLinks.get({
            accountId: "Test string",
            linkId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new profile filter link. */
        await gapi.client.analytics.management.profileFilterLinks.insert({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            filterRef: {
                accountId: "Test string",
                href: "Test string",
                id: "Test string",
                kind: "Test string",
                name: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            profileRef: {
                accountId: "Test string",
                href: "Test string",
                id: "Test string",
                internalWebPropertyId: "Test string",
                kind: "Test string",
                name: "Test string",
                webPropertyId: "Test string",
            },
            rank: 42,
            selfLink: "Test string",
        });
        /** Lists all profile filter links for a profile. */
        await gapi.client.analytics.management.profileFilterLinks.list({
            accountId: "Test string",
            "max-results": 42,
            profileId: "Test string",
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Update an existing profile filter link. This method supports patch semantics. */
        await gapi.client.analytics.management.profileFilterLinks.patch({
            accountId: "Test string",
            linkId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            filterRef: {
                accountId: "Test string",
                href: "Test string",
                id: "Test string",
                kind: "Test string",
                name: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            profileRef: {
                accountId: "Test string",
                href: "Test string",
                id: "Test string",
                internalWebPropertyId: "Test string",
                kind: "Test string",
                name: "Test string",
                webPropertyId: "Test string",
            },
            rank: 42,
            selfLink: "Test string",
        });
        /** Update an existing profile filter link. */
        await gapi.client.analytics.management.profileFilterLinks.update({
            accountId: "Test string",
            linkId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            filterRef: {
                accountId: "Test string",
                href: "Test string",
                id: "Test string",
                kind: "Test string",
                name: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            profileRef: {
                accountId: "Test string",
                href: "Test string",
                id: "Test string",
                internalWebPropertyId: "Test string",
                kind: "Test string",
                name: "Test string",
                webPropertyId: "Test string",
            },
            rank: 42,
            selfLink: "Test string",
        });
        /** Deletes a view (profile). */
        await gapi.client.analytics.management.profiles.delete({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Gets a view (profile) to which the user has access. */
        await gapi.client.analytics.management.profiles.get({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new view (profile). */
        await gapi.client.analytics.management.profiles.insert({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            botFilteringEnabled: true,
            childLink: {
                href: "Test string",
                type: "Test string",
            },
            created: "Test string",
            currency: "Test string",
            defaultPage: "Test string",
            eCommerceTracking: true,
            enhancedECommerceTracking: true,
            excludeQueryParameters: "Test string",
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            permissions: {
                effective: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            siteSearchCategoryParameters: "Test string",
            siteSearchQueryParameters: "Test string",
            starred: true,
            stripSiteSearchCategoryParameters: true,
            stripSiteSearchQueryParameters: true,
            timezone: "Test string",
            type: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
            websiteUrl: "Test string",
        });
        /** Lists views (profiles) to which the user has access. */
        await gapi.client.analytics.management.profiles.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates an existing view (profile). This method supports patch semantics. */
        await gapi.client.analytics.management.profiles.patch({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            botFilteringEnabled: true,
            childLink: {
                href: "Test string",
                type: "Test string",
            },
            created: "Test string",
            currency: "Test string",
            defaultPage: "Test string",
            eCommerceTracking: true,
            enhancedECommerceTracking: true,
            excludeQueryParameters: "Test string",
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            permissions: {
                effective: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            siteSearchCategoryParameters: "Test string",
            siteSearchQueryParameters: "Test string",
            starred: true,
            stripSiteSearchCategoryParameters: true,
            stripSiteSearchQueryParameters: true,
            timezone: "Test string",
            type: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
            websiteUrl: "Test string",
        });
        /** Updates an existing view (profile). */
        await gapi.client.analytics.management.profiles.update({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            botFilteringEnabled: true,
            childLink: {
                href: "Test string",
                type: "Test string",
            },
            created: "Test string",
            currency: "Test string",
            defaultPage: "Test string",
            eCommerceTracking: true,
            enhancedECommerceTracking: true,
            excludeQueryParameters: "Test string",
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            permissions: {
                effective: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            siteSearchCategoryParameters: "Test string",
            siteSearchQueryParameters: "Test string",
            starred: true,
            stripSiteSearchCategoryParameters: true,
            stripSiteSearchQueryParameters: true,
            timezone: "Test string",
            type: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
            websiteUrl: "Test string",
        });
        /** Removes a user from the given view (profile). */
        await gapi.client.analytics.management.profileUserLinks.delete({
            accountId: "Test string",
            linkId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        });
        /** Adds a new user to the given view (profile). */
        await gapi.client.analytics.management.profileUserLinks.insert({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            entity: {
                accountRef: {
                    href: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
                profileRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    webPropertyId: "Test string",
                },
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            permissions: {
                effective: [
                    "Test string"
                ],
                local: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            userRef: {
                email: "Test string",
                id: "Test string",
                kind: "Test string",
            },
        });
        /** Lists profile-user links for a given view (profile). */
        await gapi.client.analytics.management.profileUserLinks.list({
            accountId: "Test string",
            "max-results": 42,
            profileId: "Test string",
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates permissions for an existing user on the given view (profile). */
        await gapi.client.analytics.management.profileUserLinks.update({
            accountId: "Test string",
            linkId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            entity: {
                accountRef: {
                    href: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
                profileRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    webPropertyId: "Test string",
                },
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            permissions: {
                effective: [
                    "Test string"
                ],
                local: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            userRef: {
                email: "Test string",
                id: "Test string",
                kind: "Test string",
            },
        });
        /** Delete a remarketing audience. */
        await gapi.client.analytics.management.remarketingAudience.delete({
            accountId: "Test string",
            remarketingAudienceId: "Test string",
            webPropertyId: "Test string",
        });
        /** Gets a remarketing audience to which the user has access. */
        await gapi.client.analytics.management.remarketingAudience.get({
            accountId: "Test string",
            remarketingAudienceId: "Test string",
            webPropertyId: "Test string",
        });
        /** Creates a new remarketing audience. */
        await gapi.client.analytics.management.remarketingAudience.insert({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            audienceDefinition: {
                includeConditions: {
                    daysToLookBack: 42,
                    isSmartList: true,
                    kind: "Test string",
                    membershipDurationDays: 42,
                    segment: "Test string",
                },
            },
            audienceType: "Test string",
            created: "Test string",
            description: "Test string",
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            linkedAdAccounts: [
                {
                    accountId: "Test string",
                    eligibleForSearch: true,
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    linkedAccountId: "Test string",
                    remarketingAudienceId: "Test string",
                    status: "Test string",
                    type: "Test string",
                    webPropertyId: "Test string",
                }
            ],
            linkedViews: [
                "Test string"
            ],
            name: "Test string",
            stateBasedAudienceDefinition: {
                excludeConditions: {
                    exclusionDuration: "Test string",
                    segment: "Test string",
                },
                includeConditions: {
                    daysToLookBack: 42,
                    isSmartList: true,
                    kind: "Test string",
                    membershipDurationDays: 42,
                    segment: "Test string",
                },
            },
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Lists remarketing audiences to which the user has access. */
        await gapi.client.analytics.management.remarketingAudience.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            type: "Test string",
            webPropertyId: "Test string",
        });
        /** Updates an existing remarketing audience. This method supports patch semantics. */
        await gapi.client.analytics.management.remarketingAudience.patch({
            accountId: "Test string",
            remarketingAudienceId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            audienceDefinition: {
                includeConditions: {
                    daysToLookBack: 42,
                    isSmartList: true,
                    kind: "Test string",
                    membershipDurationDays: 42,
                    segment: "Test string",
                },
            },
            audienceType: "Test string",
            created: "Test string",
            description: "Test string",
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            linkedAdAccounts: [
                {
                    accountId: "Test string",
                    eligibleForSearch: true,
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    linkedAccountId: "Test string",
                    remarketingAudienceId: "Test string",
                    status: "Test string",
                    type: "Test string",
                    webPropertyId: "Test string",
                }
            ],
            linkedViews: [
                "Test string"
            ],
            name: "Test string",
            stateBasedAudienceDefinition: {
                excludeConditions: {
                    exclusionDuration: "Test string",
                    segment: "Test string",
                },
                includeConditions: {
                    daysToLookBack: 42,
                    isSmartList: true,
                    kind: "Test string",
                    membershipDurationDays: 42,
                    segment: "Test string",
                },
            },
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Updates an existing remarketing audience. */
        await gapi.client.analytics.management.remarketingAudience.update({
            accountId: "Test string",
            remarketingAudienceId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            audienceDefinition: {
                includeConditions: {
                    daysToLookBack: 42,
                    isSmartList: true,
                    kind: "Test string",
                    membershipDurationDays: 42,
                    segment: "Test string",
                },
            },
            audienceType: "Test string",
            created: "Test string",
            description: "Test string",
            id: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            linkedAdAccounts: [
                {
                    accountId: "Test string",
                    eligibleForSearch: true,
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    linkedAccountId: "Test string",
                    remarketingAudienceId: "Test string",
                    status: "Test string",
                    type: "Test string",
                    webPropertyId: "Test string",
                }
            ],
            linkedViews: [
                "Test string"
            ],
            name: "Test string",
            stateBasedAudienceDefinition: {
                excludeConditions: {
                    exclusionDuration: "Test string",
                    segment: "Test string",
                },
                includeConditions: {
                    daysToLookBack: 42,
                    isSmartList: true,
                    kind: "Test string",
                    membershipDurationDays: 42,
                    segment: "Test string",
                },
            },
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Lists segments to which the user has access. */
        await gapi.client.analytics.management.segments.list({
            "max-results": 42,
            "start-index": 42,
        });
        /** Deletes an unsampled report. */
        await gapi.client.analytics.management.unsampledReports.delete({
            accountId: "Test string",
            profileId: "Test string",
            unsampledReportId: "Test string",
            webPropertyId: "Test string",
        });
        /** Returns a single unsampled report. */
        await gapi.client.analytics.management.unsampledReports.get({
            accountId: "Test string",
            profileId: "Test string",
            unsampledReportId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new unsampled report. */
        await gapi.client.analytics.management.unsampledReports.insert({
            accountId: "Test string",
            profileId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            cloudStorageDownloadDetails: {
                bucketId: "Test string",
                objectId: "Test string",
            },
            created: "Test string",
            dimensions: "Test string",
            downloadType: "Test string",
            driveDownloadDetails: {
                documentId: "Test string",
            },
            "end-date": "Test string",
            filters: "Test string",
            id: "Test string",
            kind: "Test string",
            metrics: "Test string",
            profileId: "Test string",
            segment: "Test string",
            selfLink: "Test string",
            "start-date": "Test string",
            status: "Test string",
            title: "Test string",
            updated: "Test string",
            webPropertyId: "Test string",
        });
        /** Lists unsampled reports to which the user has access. */
        await gapi.client.analytics.management.unsampledReports.list({
            accountId: "Test string",
            "max-results": 42,
            profileId: "Test string",
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Delete data associated with a previous upload. */
        await gapi.client.analytics.management.uploads.deleteUploadData({
            accountId: "Test string",
            customDataSourceId: "Test string",
            webPropertyId: "Test string",
        }, {
            customDataImportUids: [
                "Test string"
            ],
        });
        /** List uploads to which the user has access. */
        await gapi.client.analytics.management.uploads.get({
            accountId: "Test string",
            customDataSourceId: "Test string",
            uploadId: "Test string",
            webPropertyId: "Test string",
        });
        /** List uploads to which the user has access. */
        await gapi.client.analytics.management.uploads.list({
            accountId: "Test string",
            customDataSourceId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Upload data for a custom data source. */
        await gapi.client.analytics.management.uploads.uploadData({
            accountId: "Test string",
            customDataSourceId: "Test string",
            webPropertyId: "Test string",
        });
        /** Gets a web property to which the user has access. */
        await gapi.client.analytics.management.webproperties.get({
            accountId: "Test string",
            webPropertyId: "Test string",
        });
        /** Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile. */
        await gapi.client.analytics.management.webproperties.insert({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            childLink: {
                href: "Test string",
                type: "Test string",
            },
            created: "Test string",
            dataRetentionResetOnNewActivity: true,
            dataRetentionTtl: "Test string",
            defaultProfileId: "Test string",
            id: "Test string",
            industryVertical: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            level: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            permissions: {
                effective: [
                    "Test string"
                ],
            },
            profileCount: 42,
            selfLink: "Test string",
            starred: true,
            updated: "Test string",
            websiteUrl: "Test string",
        });
        /** Lists web properties to which the user has access. */
        await gapi.client.analytics.management.webproperties.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
        });
        /** Updates an existing web property. This method supports patch semantics. */
        await gapi.client.analytics.management.webproperties.patch({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            childLink: {
                href: "Test string",
                type: "Test string",
            },
            created: "Test string",
            dataRetentionResetOnNewActivity: true,
            dataRetentionTtl: "Test string",
            defaultProfileId: "Test string",
            id: "Test string",
            industryVertical: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            level: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            permissions: {
                effective: [
                    "Test string"
                ],
            },
            profileCount: 42,
            selfLink: "Test string",
            starred: true,
            updated: "Test string",
            websiteUrl: "Test string",
        });
        /** Updates an existing web property. */
        await gapi.client.analytics.management.webproperties.update({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            accountId: "Test string",
            childLink: {
                href: "Test string",
                type: "Test string",
            },
            created: "Test string",
            dataRetentionResetOnNewActivity: true,
            dataRetentionTtl: "Test string",
            defaultProfileId: "Test string",
            id: "Test string",
            industryVertical: "Test string",
            internalWebPropertyId: "Test string",
            kind: "Test string",
            level: "Test string",
            name: "Test string",
            parentLink: {
                href: "Test string",
                type: "Test string",
            },
            permissions: {
                effective: [
                    "Test string"
                ],
            },
            profileCount: 42,
            selfLink: "Test string",
            starred: true,
            updated: "Test string",
            websiteUrl: "Test string",
        });
        /** Deletes a web property-Google Ads link. */
        await gapi.client.analytics.management.webPropertyAdWordsLinks.delete({
            accountId: "Test string",
            webPropertyAdWordsLinkId: "Test string",
            webPropertyId: "Test string",
        });
        /** Returns a web property-Google Ads link to which the user has access. */
        await gapi.client.analytics.management.webPropertyAdWordsLinks.get({
            accountId: "Test string",
            webPropertyAdWordsLinkId: "Test string",
            webPropertyId: "Test string",
        });
        /** Creates a webProperty-Google Ads link. */
        await gapi.client.analytics.management.webPropertyAdWordsLinks.insert({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            adWordsAccounts: [
                {
                    autoTaggingEnabled: true,
                    customerId: "Test string",
                    kind: "Test string",
                }
            ],
            entity: {
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            profileIds: [
                "Test string"
            ],
            selfLink: "Test string",
        });
        /** Lists webProperty-Google Ads links for a given web property. */
        await gapi.client.analytics.management.webPropertyAdWordsLinks.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates an existing webProperty-Google Ads link. This method supports patch semantics. */
        await gapi.client.analytics.management.webPropertyAdWordsLinks.patch({
            accountId: "Test string",
            webPropertyAdWordsLinkId: "Test string",
            webPropertyId: "Test string",
        }, {
            adWordsAccounts: [
                {
                    autoTaggingEnabled: true,
                    customerId: "Test string",
                    kind: "Test string",
                }
            ],
            entity: {
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            profileIds: [
                "Test string"
            ],
            selfLink: "Test string",
        });
        /** Updates an existing webProperty-Google Ads link. */
        await gapi.client.analytics.management.webPropertyAdWordsLinks.update({
            accountId: "Test string",
            webPropertyAdWordsLinkId: "Test string",
            webPropertyId: "Test string",
        }, {
            adWordsAccounts: [
                {
                    autoTaggingEnabled: true,
                    customerId: "Test string",
                    kind: "Test string",
                }
            ],
            entity: {
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            profileIds: [
                "Test string"
            ],
            selfLink: "Test string",
        });
        /** Removes a user from the given web property. */
        await gapi.client.analytics.management.webpropertyUserLinks.delete({
            accountId: "Test string",
            linkId: "Test string",
            webPropertyId: "Test string",
        });
        /** Adds a new user to the given web property. */
        await gapi.client.analytics.management.webpropertyUserLinks.insert({
            accountId: "Test string",
            webPropertyId: "Test string",
        }, {
            entity: {
                accountRef: {
                    href: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
                profileRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    webPropertyId: "Test string",
                },
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            permissions: {
                effective: [
                    "Test string"
                ],
                local: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            userRef: {
                email: "Test string",
                id: "Test string",
                kind: "Test string",
            },
        });
        /** Lists webProperty-user links for a given web property. */
        await gapi.client.analytics.management.webpropertyUserLinks.list({
            accountId: "Test string",
            "max-results": 42,
            "start-index": 42,
            webPropertyId: "Test string",
        });
        /** Updates permissions for an existing user on the given web property. */
        await gapi.client.analytics.management.webpropertyUserLinks.update({
            accountId: "Test string",
            linkId: "Test string",
            webPropertyId: "Test string",
        }, {
            entity: {
                accountRef: {
                    href: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
                profileRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    webPropertyId: "Test string",
                },
                webPropertyRef: {
                    accountId: "Test string",
                    href: "Test string",
                    id: "Test string",
                    internalWebPropertyId: "Test string",
                    kind: "Test string",
                    name: "Test string",
                },
            },
            id: "Test string",
            kind: "Test string",
            permissions: {
                effective: [
                    "Test string"
                ],
                local: [
                    "Test string"
                ],
            },
            selfLink: "Test string",
            userRef: {
                email: "Test string",
                id: "Test string",
                kind: "Test string",
            },
        });
        /** Lists all columns for a report type */
        await gapi.client.analytics.metadata.columns.list({
            reportType: "Test string",
        });
        /** Creates an account ticket. */
        await gapi.client.analytics.provisioning.createAccountTicket({} , {
            account: {
                childLink: {
                    href: "Test string",
                    type: "Test string",
                },
                created: "Test string",
                id: "Test string",
                kind: "Test string",
                name: "Test string",
                permissions: {
                    effective: [
                        "Test string"
                    ],
                },
                selfLink: "Test string",
                starred: true,
                updated: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            profile: {
                accountId: "Test string",
                botFilteringEnabled: true,
                childLink: {
                    href: "Test string",
                    type: "Test string",
                },
                created: "Test string",
                currency: "Test string",
                defaultPage: "Test string",
                eCommerceTracking: true,
                enhancedECommerceTracking: true,
                excludeQueryParameters: "Test string",
                id: "Test string",
                internalWebPropertyId: "Test string",
                kind: "Test string",
                name: "Test string",
                parentLink: {
                    href: "Test string",
                    type: "Test string",
                },
                permissions: {
                    effective: [
                        "Test string"
                    ],
                },
                selfLink: "Test string",
                siteSearchCategoryParameters: "Test string",
                siteSearchQueryParameters: "Test string",
                starred: true,
                stripSiteSearchCategoryParameters: true,
                stripSiteSearchQueryParameters: true,
                timezone: "Test string",
                type: "Test string",
                updated: "Test string",
                webPropertyId: "Test string",
                websiteUrl: "Test string",
            },
            redirectUri: "Test string",
            webproperty: {
                accountId: "Test string",
                childLink: {
                    href: "Test string",
                    type: "Test string",
                },
                created: "Test string",
                dataRetentionResetOnNewActivity: true,
                dataRetentionTtl: "Test string",
                defaultProfileId: "Test string",
                id: "Test string",
                industryVertical: "Test string",
                internalWebPropertyId: "Test string",
                kind: "Test string",
                level: "Test string",
                name: "Test string",
                parentLink: {
                    href: "Test string",
                    type: "Test string",
                },
                permissions: {
                    effective: [
                        "Test string"
                    ],
                },
                profileCount: 42,
                selfLink: "Test string",
                starred: true,
                updated: "Test string",
                websiteUrl: "Test string",
            },
        });
        /** Provision account. */
        await gapi.client.analytics.provisioning.createAccountTree({} , {
            accountName: "Test string",
            kind: "Test string",
            profileName: "Test string",
            timezone: "Test string",
            webpropertyName: "Test string",
            websiteUrl: "Test string",
        });
        /** Insert or update a user deletion requests. */
        await gapi.client.analytics.userDeletion.userDeletionRequest.upsert({} , {
            deletionRequestTime: "Test string",
            firebaseProjectId: "Test string",
            id: {
                type: "Test string",
                userId: "Test string",
            },
            kind: "Test string",
            propertyId: "Test string",
            webPropertyId: "Test string",
        });
    }
});
