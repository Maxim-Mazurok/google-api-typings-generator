/* Type definitions for non-npm package Google Drive API v3 0.0 */
// Project: https://developers.google.com/drive/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://www.googleapis.com/discovery/v1/apis/drive/v3/rest
// Revision: 20241110

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Google Drive API v3 */
  function load(
    urlOrObject: 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'drive', version: 'v3'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'drive', version: 'v3', callback: () => any): void;

  namespace drive {
    interface About {
      /** Whether the user has installed the requesting app. */
      appInstalled?: boolean;
      /** Whether the user can create shared drives. */
      canCreateDrives?: boolean;
      /** Deprecated: Use `canCreateDrives` instead. */
      canCreateTeamDrives?: boolean;
      /** A list of themes that are supported for shared drives. */
      driveThemes?: Array<{
        /** A link to this theme's background image. */
        backgroundImageLink?: string;
        /** The color of this theme as an RGB hex string. */
        colorRgb?: string;
        /** The ID of the theme. */
        id?: string;
      }>;
      /** A map of source MIME type to possible targets for all supported exports. */
      exportFormats?: {[P in string]: string[]};
      /** The currently supported folder colors as RGB hex strings. */
      folderColorPalette?: string[];
      /** A map of source MIME type to possible targets for all supported imports. */
      importFormats?: {[P in string]: string[]};
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#about"`. */
      kind?: string;
      /** A map of maximum import sizes by MIME type, in bytes. */
      maxImportSizes?: {[P in string]: string};
      /** The maximum upload size in bytes. */
      maxUploadSize?: string;
      /** The user's storage quota limits and usage. For users that are part of an organization with pooled storage, information about the limit and usage across all services is for the organization, rather than the individual user. All fields are measured in bytes. */
      storageQuota?: {
        /** The usage limit, if applicable. This will not be present if the user has unlimited storage. For users that are part of an organization with pooled storage, this is the limit for the organization, rather than the individual user. */
        limit?: string;
        /** The total usage across all services. For users that are part of an organization with pooled storage, this is the usage across all services for the organization, rather than the individual user. */
        usage?: string;
        /** The usage by all files in Google Drive. */
        usageInDrive?: string;
        /** The usage by trashed files in Google Drive. */
        usageInDriveTrash?: string;
      };
      /** Deprecated: Use `driveThemes` instead. */
      teamDriveThemes?: Array<{
        /** Deprecated: Use `driveThemes/backgroundImageLink` instead. */
        backgroundImageLink?: string;
        /** Deprecated: Use `driveThemes/colorRgb` instead. */
        colorRgb?: string;
        /** Deprecated: Use `driveThemes/id` instead. */
        id?: string;
      }>;
      /** The authenticated user. */
      user?: User;
    }
    interface AccessProposal {
      /** The creation time */
      createTime?: string;
      /** The file id that the proposal for access is on */
      fileId?: string;
      /** The id of the access proposal */
      proposalId?: string;
      /** The email address of the user that will receive permissions if accepted */
      recipientEmailAddress?: string;
      /** The email address of the requesting user */
      requesterEmailAddress?: string;
      /** The message that the requester added to the proposal */
      requestMessage?: string;
      /** A wrapper for the role and view of an access proposal. */
      rolesAndViews?: AccessProposalRoleAndView[];
    }
    interface AccessProposalRoleAndView {
      /** The role that was proposed by the requester New values may be added in the future, but the following are currently possible: * `writer` * `commenter` * `reader` */
      role?: string;
      /** Indicates the view for this access proposal. Only populated for proposals that belong to a view. `published` is the only supported value. */
      view?: string;
    }
    interface App {
      /** Whether the app is authorized to access data on the user's Drive. */
      authorized?: boolean;
      /** The template URL to create a file with this app in a given folder. The template contains the {folderId} to be replaced by the folder ID house the new file. */
      createInFolderTemplate?: string;
      /** The URL to create a file with this app. */
      createUrl?: string;
      /** Whether the app has Drive-wide scope. An app with Drive-wide scope can access all files in the user's Drive. */
      hasDriveWideScope?: boolean;
      /** The various icons for the app. */
      icons?: AppIcons[];
      /** The ID of the app. */
      id?: string;
      /** Whether the app is installed. */
      installed?: boolean;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string "drive#app". */
      kind?: string;
      /** A long description of the app. */
      longDescription?: string;
      /** The name of the app. */
      name?: string;
      /** The type of object this app creates such as a Chart. If empty, the app name should be used instead. */
      objectType?: string;
      /** The template URL for opening files with this app. The template contains {ids} or {exportIds} to be replaced by the actual file IDs. For more information, see Open Files for the full documentation. */
      openUrlTemplate?: string;
      /** The list of primary file extensions. */
      primaryFileExtensions?: string[];
      /** The list of primary MIME types. */
      primaryMimeTypes?: string[];
      /** The ID of the product listing for this app. */
      productId?: string;
      /** A link to the product listing for this app. */
      productUrl?: string;
      /** The list of secondary file extensions. */
      secondaryFileExtensions?: string[];
      /** The list of secondary MIME types. */
      secondaryMimeTypes?: string[];
      /** A short description of the app. */
      shortDescription?: string;
      /** Whether this app supports creating objects. */
      supportsCreate?: boolean;
      /** Whether this app supports importing from Google Docs. */
      supportsImport?: boolean;
      /** Whether this app supports opening more than one file. */
      supportsMultiOpen?: boolean;
      /** Whether this app supports creating files when offline. */
      supportsOfflineCreate?: boolean;
      /** Whether the app is selected as the default handler for the types it supports. */
      useByDefault?: boolean;
    }
    interface AppIcons {
      /** Category of the icon. Allowed values are: * `application` - The icon for the application. * `document` - The icon for a file associated with the app. * `documentShared` - The icon for a shared file associated with the app. */
      category?: string;
      /** URL for the icon. */
      iconUrl?: string;
      /** Size of the icon. Represented as the maximum of the width and height. */
      size?: number;
    }
    interface AppList {
      /** The list of app IDs that the user has specified to use by default. The list is in reverse-priority order (lowest to highest). */
      defaultAppIds?: string[];
      /** The list of apps. */
      items?: App[];
      /** Output only. Identifies what kind of resource this is. Value: the fixed string "drive#appList". */
      kind?: string;
      /** A link back to this list. */
      selfLink?: string;
    }
    interface Change {
      /** The type of the change. Possible values are `file` and `drive`. */
      changeType?: string;
      /** The updated state of the shared drive. Present if the changeType is drive, the user is still a member of the shared drive, and the shared drive has not been deleted. */
      drive?: Drive;
      /** The ID of the shared drive associated with this change. */
      driveId?: string;
      /** The updated state of the file. Present if the type is file and the file has not been removed from this list of changes. */
      file?: File;
      /** The ID of the file which has changed. */
      fileId?: string;
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#change"`. */
      kind?: string;
      /** Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access. */
      removed?: boolean;
      /** Deprecated: Use `drive` instead. */
      teamDrive?: TeamDrive;
      /** Deprecated: Use `driveId` instead. */
      teamDriveId?: string;
      /** The time of this change (RFC 3339 date-time). */
      time?: string;
      /** Deprecated: Use `changeType` instead. */
      type?: string;
    }
    interface ChangeList {
      /** The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      changes?: Change[];
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#changeList"`. */
      kind?: string;
      /** The starting page token for future changes. This will be present only if the end of the current changes list has been reached. The page token doesn't expire. */
      newStartPageToken?: string;
      /** The page token for the next page of changes. This will be absent if the end of the changes list has been reached. The page token doesn't expire. */
      nextPageToken?: string;
    }
    interface Channel {
      /** The address where notifications are delivered for this channel. */
      address?: string;
      /** Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional. */
      expiration?: string;
      /** A UUID or similar unique string that identifies this channel. */
      id?: string;
      /** Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`. */
      kind?: string;
      /** Additional parameters controlling delivery channel behavior. Optional. */
      params?: {[P in string]: string};
      /** A Boolean value to indicate whether payload is wanted. Optional. */
      payload?: boolean;
      /** An opaque ID that identifies the resource being watched on this channel. Stable across different API versions. */
      resourceId?: string;
      /** A version-specific identifier for the watched resource. */
      resourceUri?: string;
      /** An arbitrary string delivered to the target address with each notification delivered over this channel. Optional. */
      token?: string;
      /** The type of delivery mechanism used for this channel. Valid values are "web_hook" or "webhook". */
      type?: string;
    }
    interface Comment {
      /** A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments). */
      anchor?: string;
      /** Output only. The author of the comment. The author's email address and permission ID will not be populated. */
      author?: User;
      /** The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed. */
      content?: string;
      /** The time at which the comment was created (RFC 3339 date-time). */
      createdTime?: string;
      /** Output only. Whether the comment has been deleted. A deleted comment has no content. */
      deleted?: boolean;
      /** Output only. The content of the comment with HTML formatting. */
      htmlContent?: string;
      /** Output only. The ID of the comment. */
      id?: string;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#comment"`. */
      kind?: string;
      /** The last time the comment or any of its replies was modified (RFC 3339 date-time). */
      modifiedTime?: string;
      /** The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment. */
      quotedFileContent?: {
        /** The MIME type of the quoted content. */
        mimeType?: string;
        /** The quoted content itself. This is interpreted as plain text if set through the API. */
        value?: string;
      };
      /** Output only. The full list of replies to the comment in chronological order. */
      replies?: Reply[];
      /** Output only. Whether the comment has been resolved by one of its replies. */
      resolved?: boolean;
    }
    interface CommentList {
      /** The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      comments?: Comment[];
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#commentList"`. */
      kind?: string;
      /** The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
    }
    interface ContentRestriction {
      /** Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction. */
      ownerRestricted?: boolean;
      /** Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified. */
      readOnly?: boolean;
      /** Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`. */
      reason?: string;
      /** Output only. The user who set the content restriction. Only populated if `readOnly` is true. */
      restrictingUser?: User;
      /** The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true. */
      restrictionTime?: string;
      /** Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions. */
      systemRestricted?: boolean;
      /** Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`. */
      type?: string;
    }
    interface Drive {
      /** An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on `drive.drives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set. */
      backgroundImageFile?: {
        /** The ID of an image file in Google Drive to use for the background image. */
        id?: string;
        /** The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high. */
        width?: number;
        /** The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image. */
        xCoordinate?: number;
        /** The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image. */
        yCoordinate?: number;
      };
      /** Output only. A short-lived link to this shared drive's background image. */
      backgroundImageLink?: string;
      /** Output only. Capabilities the current user has on this shared drive. */
      capabilities?: {
        /** Output only. Whether the current user can add children to folders in this shared drive. */
        canAddChildren?: boolean;
        /** Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this shared drive. */
        canChangeCopyRequiresWriterPermissionRestriction?: boolean;
        /** Output only. Whether the current user can change the `domainUsersOnly` restriction of this shared drive. */
        canChangeDomainUsersOnlyRestriction?: boolean;
        /** Output only. Whether the current user can change the background of this shared drive. */
        canChangeDriveBackground?: boolean;
        /** Output only. Whether the current user can change the `driveMembersOnly` restriction of this shared drive. */
        canChangeDriveMembersOnlyRestriction?: boolean;
        /** Output only. Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this shared drive. */
        canChangeSharingFoldersRequiresOrganizerPermissionRestriction?: boolean;
        /** Output only. Whether the current user can comment on files in this shared drive. */
        canComment?: boolean;
        /** Output only. Whether the current user can copy files in this shared drive. */
        canCopy?: boolean;
        /** Output only. Whether the current user can delete children from folders in this shared drive. */
        canDeleteChildren?: boolean;
        /** Output only. Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive. */
        canDeleteDrive?: boolean;
        /** Output only. Whether the current user can download files in this shared drive. */
        canDownload?: boolean;
        /** Output only. Whether the current user can edit files in this shared drive */
        canEdit?: boolean;
        /** Output only. Whether the current user can list the children of folders in this shared drive. */
        canListChildren?: boolean;
        /** Output only. Whether the current user can add members to this shared drive or remove them or change their role. */
        canManageMembers?: boolean;
        /** Output only. Whether the current user can read the revisions resource of files in this shared drive. */
        canReadRevisions?: boolean;
        /** Output only. Whether the current user can rename files or folders in this shared drive. */
        canRename?: boolean;
        /** Output only. Whether the current user can rename this shared drive. */
        canRenameDrive?: boolean;
        /** Output only. Whether the current user can reset the shared drive restrictions to defaults. */
        canResetDriveRestrictions?: boolean;
        /** Output only. Whether the current user can share files or folders in this shared drive. */
        canShare?: boolean;
        /** Output only. Whether the current user can trash children from folders in this shared drive. */
        canTrashChildren?: boolean;
      };
      /** The color of this shared drive as an RGB hex string. It can only be set on a `drive.drives.update` request that does not set `themeId`. */
      colorRgb?: string;
      /** The time at which the shared drive was created (RFC 3339 date-time). */
      createdTime?: string;
      /** Whether the shared drive is hidden from default view. */
      hidden?: boolean;
      /** Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive. */
      id?: string;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#drive"`. */
      kind?: string;
      /** The name of this shared drive. */
      name?: string;
      /** Output only. The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`. */
      orgUnitId?: string;
      /** A set of restrictions that apply to this shared drive or items inside this shared drive. Note that restrictions can't be set when creating a shared drive. To add a restriction, first create a shared drive and then use `drives.update` to add restrictions. */
      restrictions?: {
        /** Whether administrative privileges on this shared drive are required to modify restrictions. */
        adminManagedRestrictions?: boolean;
        /** Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this shared drive. */
        copyRequiresWriterPermission?: boolean;
        /** Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive. */
        domainUsersOnly?: boolean;
        /** Whether access to items inside this shared drive is restricted to its members. */
        driveMembersOnly?: boolean;
        /** If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders. */
        sharingFoldersRequiresOrganizerPermission?: boolean;
      };
      /** The ID of the theme from which the background image and color will be set. The set of possible `driveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.drives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`. */
      themeId?: string;
    }
    interface DriveList {
      /** The list of shared drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      drives?: Drive[];
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#driveList"`. */
      kind?: string;
      /** The page token for the next page of shared drives. This will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
    }
    interface File {
      /**
       * A collection of arbitrary key-value pairs which are private to the requesting app.
       * Entries with null values are cleared in update and copy requests. These properties can only be retrieved using an authenticated request. An authenticated request uses an access token obtained with a OAuth 2 client ID. You cannot use an API key to retrieve private properties.
       */
      appProperties?: {[P in string]: string};
      /** Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take. */
      capabilities?: {
        /** Output only. Whether the current user is the pending owner of the file. Not populated for shared drive files. */
        canAcceptOwnership?: boolean;
        /** Output only. Whether the current user can add children to this folder. This is always false when the item is not a folder. */
        canAddChildren?: boolean;
        /** Output only. Whether the current user can add a folder from another drive (different shared drive or My Drive) to this folder. This is false when the item is not a folder. Only populated for items in shared drives. */
        canAddFolderFromAnotherDrive?: boolean;
        /** Output only. Whether the current user can add a parent for the item without removing an existing parent in the same request. Not populated for shared drive files. */
        canAddMyDriveParent?: boolean;
        /** Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this file. */
        canChangeCopyRequiresWriterPermission?: boolean;
        /** Output only. Whether the current user can change the securityUpdateEnabled field on link share metadata. */
        canChangeSecurityUpdateEnabled?: boolean;
        /** Deprecated: Output only. */
        canChangeViewersCanCopyContent?: boolean;
        /** Output only. Whether the current user can comment on this file. */
        canComment?: boolean;
        /** Output only. Whether the current user can copy this file. For an item in a shared drive, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder. */
        canCopy?: boolean;
        /** Output only. Whether the current user can delete this file. */
        canDelete?: boolean;
        /** Output only. Whether the current user can delete children of this folder. This is false when the item is not a folder. Only populated for items in shared drives. */
        canDeleteChildren?: boolean;
        /** Output only. Whether the current user can download this file. */
        canDownload?: boolean;
        /** Output only. Whether the current user can edit this file. Other factors may limit the type of changes a user can make to a file. For example, see `canChangeCopyRequiresWriterPermission` or `canModifyContent`. */
        canEdit?: boolean;
        /** Output only. Whether the current user can list the children of this folder. This is always false when the item is not a folder. */
        canListChildren?: boolean;
        /** Output only. Whether the current user can modify the content of this file. */
        canModifyContent?: boolean;
        /** Deprecated: Output only. Use one of `canModifyEditorContentRestriction`, `canModifyOwnerContentRestriction` or `canRemoveContentRestriction`. */
        canModifyContentRestriction?: boolean;
        /** Output only. Whether the current user can add or modify content restrictions on the file which are editor restricted. */
        canModifyEditorContentRestriction?: boolean;
        /** Output only. Whether the current user can modify the labels on the file. */
        canModifyLabels?: boolean;
        /** Output only. Whether the current user can add or modify content restrictions which are owner restricted. */
        canModifyOwnerContentRestriction?: boolean;
        /** Output only. Whether the current user can move children of this folder outside of the shared drive. This is false when the item is not a folder. Only populated for items in shared drives. */
        canMoveChildrenOutOfDrive?: boolean;
        /** Deprecated: Output only. Use `canMoveChildrenOutOfDrive` instead. */
        canMoveChildrenOutOfTeamDrive?: boolean;
        /** Output only. Whether the current user can move children of this folder within this drive. This is false when the item is not a folder. Note that a request to move the child may still fail depending on the current user's access to the child and to the destination folder. */
        canMoveChildrenWithinDrive?: boolean;
        /** Deprecated: Output only. Use `canMoveChildrenWithinDrive` instead. */
        canMoveChildrenWithinTeamDrive?: boolean;
        /** Deprecated: Output only. Use `canMoveItemOutOfDrive` instead. */
        canMoveItemIntoTeamDrive?: boolean;
        /** Output only. Whether the current user can move this item outside of this drive by changing its parent. Note that a request to change the parent of the item may still fail depending on the new parent that is being added. */
        canMoveItemOutOfDrive?: boolean;
        /** Deprecated: Output only. Use `canMoveItemOutOfDrive` instead. */
        canMoveItemOutOfTeamDrive?: boolean;
        /** Output only. Whether the current user can move this item within this drive. Note that a request to change the parent of the item may still fail depending on the new parent that is being added and the parent that is being removed. */
        canMoveItemWithinDrive?: boolean;
        /** Deprecated: Output only. Use `canMoveItemWithinDrive` instead. */
        canMoveItemWithinTeamDrive?: boolean;
        /** Deprecated: Output only. Use `canMoveItemWithinDrive` or `canMoveItemOutOfDrive` instead. */
        canMoveTeamDriveItem?: boolean;
        /** Output only. Whether the current user can read the shared drive to which this file belongs. Only populated for items in shared drives. */
        canReadDrive?: boolean;
        /** Output only. Whether the current user can read the labels on the file. */
        canReadLabels?: boolean;
        /** Output only. Whether the current user can read the revisions resource of this file. For a shared drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read. */
        canReadRevisions?: boolean;
        /** Deprecated: Output only. Use `canReadDrive` instead. */
        canReadTeamDrive?: boolean;
        /** Output only. Whether the current user can remove children from this folder. This is always false when the item is not a folder. For a folder in a shared drive, use `canDeleteChildren` or `canTrashChildren` instead. */
        canRemoveChildren?: boolean;
        /** Output only. Whether there is a content restriction on the file that can be removed by the current user. */
        canRemoveContentRestriction?: boolean;
        /** Output only. Whether the current user can remove a parent from the item without adding another parent in the same request. Not populated for shared drive files. */
        canRemoveMyDriveParent?: boolean;
        /** Output only. Whether the current user can rename this file. */
        canRename?: boolean;
        /** Output only. Whether the current user can modify the sharing settings for this file. */
        canShare?: boolean;
        /** Output only. Whether the current user can move this file to trash. */
        canTrash?: boolean;
        /** Output only. Whether the current user can trash children of this folder. This is false when the item is not a folder. Only populated for items in shared drives. */
        canTrashChildren?: boolean;
        /** Output only. Whether the current user can restore this file from trash. */
        canUntrash?: boolean;
      };
      /** Additional information about the content of the file. These fields are never populated in responses. */
      contentHints?: {
        /** Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length and may contain HTML elements. */
        indexableText?: string;
        /** A thumbnail for the file. This will only be used if Google Drive cannot generate a standard thumbnail. */
        thumbnail?: {
          /** The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5). */
          image?: string;
          /** The MIME type of the thumbnail. */
          mimeType?: string;
        };
      };
      /** Restrictions for accessing the content of the file. Only populated if such a restriction exists. */
      contentRestrictions?: ContentRestriction[];
      /** Whether the options to copy, print, or download this file, should be disabled for readers and commenters. */
      copyRequiresWriterPermission?: boolean;
      /** The time at which the file was created (RFC 3339 date-time). */
      createdTime?: string;
      /** A short description of the file. */
      description?: string;
      /** Output only. ID of the shared drive the file resides in. Only populated for items in shared drives. */
      driveId?: string;
      /** Output only. Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder. */
      explicitlyTrashed?: boolean;
      /** Output only. Links for exporting Docs Editors files to specific formats. */
      exportLinks?: {[P in string]: string};
      /** Output only. The final component of `fullFileExtension`. This is only available for files with binary content in Google Drive. */
      fileExtension?: string;
      /** The color for a folder or a shortcut to a folder as an RGB hex string. The supported colors are published in the `folderColorPalette` field of the About resource. If an unsupported color is specified, the closest color in the palette is used instead. */
      folderColorRgb?: string;
      /** Output only. The full file extension extracted from the `name` field. May contain multiple concatenated extensions, such as "tar.gz". This is only available for files with binary content in Google Drive. This is automatically updated when the `name` field changes, however it is not cleared if the new name does not contain a valid extension. */
      fullFileExtension?: string;
      /** Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives. */
      hasAugmentedPermissions?: boolean;
      /** Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field. */
      hasThumbnail?: boolean;
      /** Output only. The ID of the file's head revision. This is currently only available for files with binary content in Google Drive. */
      headRevisionId?: string;
      /** Output only. A static, unauthenticated link to the file's icon. */
      iconLink?: string;
      /** The ID of the file. */
      id?: string;
      /** Output only. Additional metadata about image media, if available. */
      imageMediaMetadata?: {
        /** Output only. The aperture used to create the photo (f-number). */
        aperture?: number;
        /** Output only. The make of the camera used to create the photo. */
        cameraMake?: string;
        /** Output only. The model of the camera used to create the photo. */
        cameraModel?: string;
        /** Output only. The color space of the photo. */
        colorSpace?: string;
        /** Output only. The exposure bias of the photo (APEX value). */
        exposureBias?: number;
        /** Output only. The exposure mode used to create the photo. */
        exposureMode?: string;
        /** Output only. The length of the exposure, in seconds. */
        exposureTime?: number;
        /** Output only. Whether a flash was used to create the photo. */
        flashUsed?: boolean;
        /** Output only. The focal length used to create the photo, in millimeters. */
        focalLength?: number;
        /** Output only. The height of the image in pixels. */
        height?: number;
        /** Output only. The ISO speed used to create the photo. */
        isoSpeed?: number;
        /** Output only. The lens used to create the photo. */
        lens?: string;
        /** Output only. Geographic location information stored in the image. */
        location?: {
          /** Output only. The altitude stored in the image. */
          altitude?: number;
          /** Output only. The latitude stored in the image. */
          latitude?: number;
          /** Output only. The longitude stored in the image. */
          longitude?: number;
        };
        /** Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value). */
        maxApertureValue?: number;
        /** Output only. The metering mode used to create the photo. */
        meteringMode?: string;
        /** Output only. The number of clockwise 90 degree rotations applied from the image's original orientation. */
        rotation?: number;
        /** Output only. The type of sensor used to create the photo. */
        sensor?: string;
        /** Output only. The distance to the subject of the photo, in meters. */
        subjectDistance?: number;
        /** Output only. The date and time the photo was taken (EXIF DateTime). */
        time?: string;
        /** Output only. The white balance mode used to create the photo. */
        whiteBalance?: string;
        /** Output only. The width of the image in pixels. */
        width?: number;
      };
      /** Output only. Whether the file was created or opened by the requesting app. */
      isAppAuthorized?: boolean;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#file"`. */
      kind?: string;
      /** Output only. An overview of the labels on the file. */
      labelInfo?: {
        /** Output only. The set of labels on the file as requested by the label IDs in the `includeLabels` parameter. By default, no labels are returned. */
        labels?: Label[];
      };
      /** Output only. The last user to modify the file. This field is only populated when the last modification was performed by a signed-in user. */
      lastModifyingUser?: User;
      /** Contains details about the link URLs that clients are using to refer to this item. */
      linkShareMetadata?: {
        /** Output only. Whether the file is eligible for security update. */
        securityUpdateEligible?: boolean;
        /** Output only. Whether the security update is enabled for this file. */
        securityUpdateEnabled?: boolean;
      };
      /** Output only. The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive. */
      md5Checksum?: string;
      /** The MIME type of the file. Google Drive attempts to automatically detect an appropriate value from uploaded content, if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content is imported, if possible. The supported import formats are published in the About resource. */
      mimeType?: string;
      /** Output only. Whether the file has been modified by this user. */
      modifiedByMe?: boolean;
      /** The last time the file was modified by the user (RFC 3339 date-time). */
      modifiedByMeTime?: string;
      /** he last time the file was modified by anyone (RFC 3339 date-time). Note that setting modifiedTime will also update modifiedByMeTime for the user. */
      modifiedTime?: string;
      /** The name of the file. This is not necessarily unique within a folder. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the name is constant. */
      name?: string;
      /** The original filename of the uploaded content if available, or else the original value of the `name` field. This is only available for files with binary content in Google Drive. */
      originalFilename?: string;
      /** Output only. Whether the user owns the file. Not populated for items in shared drives. */
      ownedByMe?: boolean;
      /** Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives. */
      owners?: User[];
      /** The ID of the parent folder containing the file. A file can only have one parent folder; specifying multiple parents isn't supported. If not specified as part of a create request, the file is placed directly in the user's My Drive folder. If not specified as part of a copy request, the file inherits any discoverable parent of the source file. Update requests must use the `addParents` and `removeParents` parameters to modify the parents list. */
      parents?: string[];
      /** Output only. List of permission IDs for users with access to this file. */
      permissionIds?: string[];
      /** Output only. The full list of permissions for the file. This is only available if the requesting user can share the file. Not populated for items in shared drives. */
      permissions?: Permission[];
      /**
       * A collection of arbitrary key-value pairs which are visible to all apps.
       * Entries with null values are cleared in update and copy requests.
       */
      properties?: {[P in string]: string};
      /** Output only. The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with `keepForever` enabled. */
      quotaBytesUsed?: string;
      /** Output only. A key needed to access the item via a shared link. */
      resourceKey?: string;
      /** Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files. */
      sha1Checksum?: string;
      /** Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files. */
      sha256Checksum?: string;
      /** Output only. Whether the file has been shared. Not populated for items in shared drives. */
      shared?: boolean;
      /** The time at which the file was shared with the user, if applicable (RFC 3339 date-time). */
      sharedWithMeTime?: string;
      /** Output only. The user who shared the file with the requesting user, if applicable. */
      sharingUser?: User;
      /** Shortcut file details. Only populated for shortcut files, which have the mimeType field set to `application/vnd.google-apps.shortcut`. Can only be set on `files.create` requests. */
      shortcutDetails?: {
        /** The ID of the file that this shortcut points to. Can only be set on `files.create` requests. */
        targetId?: string;
        /** Output only. The MIME type of the file that this shortcut points to. The value of this field is a snapshot of the target's MIME type, captured when the shortcut is created. */
        targetMimeType?: string;
        /** Output only. The ResourceKey for the target file. */
        targetResourceKey?: string;
      };
      /** Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders. */
      size?: string;
      /** Output only. The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'. */
      spaces?: string[];
      /** Whether the user has starred the file. */
      starred?: boolean;
      /** Deprecated: Output only. Use `driveId` instead. */
      teamDriveId?: string;
      /** Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Not intended for direct usage on web applications due to [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) policies, consider using a proxy server. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request. */
      thumbnailLink?: string;
      /** Output only. The thumbnail version for use in thumbnail cache invalidation. */
      thumbnailVersion?: string;
      /** Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner's trash. */
      trashed?: boolean;
      /** The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared drives. */
      trashedTime?: string;
      /** Output only. If the file has been explicitly trashed, the user who trashed it. Only populated for items in shared drives. */
      trashingUser?: User;
      /** Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user. */
      version?: string;
      /** Output only. Additional metadata about video media. This may not be available immediately upon upload. */
      videoMediaMetadata?: {
        /** Output only. The duration of the video in milliseconds. */
        durationMillis?: string;
        /** Output only. The height of the video in pixels. */
        height?: number;
        /** Output only. The width of the video in pixels. */
        width?: number;
      };
      /** Output only. Whether the file has been viewed by this user. */
      viewedByMe?: boolean;
      /** The last time the file was viewed by the user (RFC 3339 date-time). */
      viewedByMeTime?: string;
      /** Deprecated: Use `copyRequiresWriterPermission` instead. */
      viewersCanCopyContent?: boolean;
      /** Output only. A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive. */
      webContentLink?: string;
      /** Output only. A link for opening the file in a relevant Google editor or viewer in a browser. */
      webViewLink?: string;
      /** Whether users with only `writer` permission can modify the file's permissions. Not populated for items in shared drives. */
      writersCanShare?: boolean;
    }
    interface FileList {
      /** The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      files?: File[];
      /** Whether the search process was incomplete. If true, then some search results might be missing, since all documents were not searched. This can occur when searching multiple drives with the 'allDrives' corpora, but all corpora couldn't be searched. When this happens, it's suggested that clients narrow their query by choosing a different corpus such as 'user' or 'drive'. */
      incompleteSearch?: boolean;
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#fileList"`. */
      kind?: string;
      /** The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
    }
    interface GeneratedIds {
      /** The IDs generated for the requesting user in the specified space. */
      ids?: string[];
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#generatedIds"`. */
      kind?: string;
      /** The type of file that can be created with these IDs. */
      space?: string;
    }
    interface Label {
      /** A map of the fields on the label, keyed by the field's ID. */
      fields?: {[P in string]: LabelField};
      /** The ID of the label. */
      id?: string;
      /** This is always drive#label */
      kind?: string;
      /** The revision ID of the label. */
      revisionId?: string;
    }
    interface LabelField {
      /** Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD. */
      dateString?: string[];
      /** The identifier of this label field. */
      id?: string;
      /** Only present if `valueType` is `integer`. */
      integer?: string[];
      /** This is always drive#labelField. */
      kind?: string;
      /** Only present if `valueType` is `selection` */
      selection?: string[];
      /** Only present if `valueType` is `text`. */
      text?: string[];
      /** Only present if `valueType` is `user`. */
      user?: User[];
      /** The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user` */
      valueType?: string;
    }
    interface LabelFieldModification {
      /** The ID of the field to be modified. */
      fieldId?: string;
      /** This is always drive#labelFieldModification. */
      kind?: string;
      /** Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD. */
      setDateValues?: string[];
      /** Replaces the value of an `integer` field with these new values. */
      setIntegerValues?: string[];
      /** Replaces a `selection` field with these new values. */
      setSelectionValues?: string[];
      /** Sets the value of a `text` field. */
      setTextValues?: string[];
      /** Replaces a `user` field with these new values. The values must be valid email addresses. */
      setUserValues?: string[];
      /** Unsets the values for this field. */
      unsetValues?: boolean;
    }
    interface LabelList {
      /** This is always drive#labelList */
      kind?: string;
      /** The list of labels. */
      labels?: Label[];
      /** The page token for the next page of labels. This field will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
    }
    interface LabelModification {
      /** The list of modifications to this label's fields. */
      fieldModifications?: LabelFieldModification[];
      /** This is always drive#labelModification. */
      kind?: string;
      /** The ID of the label to modify. */
      labelId?: string;
      /** If true, the label will be removed from the file. */
      removeLabel?: boolean;
    }
    interface ListAccessProposalsResponse {
      /** The list of Access Proposals. This field is only populated in v3 and v3beta. */
      accessProposals?: AccessProposal[];
      /** The continuation token for the next page of results. This will be absent if the end of the results list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. */
      nextPageToken?: string;
    }
    interface ListOperationsResponse {
      /** The standard List next-page token. */
      nextPageToken?: string;
      /** A list of operations that matches the specified filter in the request. */
      operations?: Operation[];
    }
    interface ModifyLabelsRequest {
      /** This is always drive#modifyLabelsRequest. */
      kind?: string;
      /** The list of modifications to apply to the labels on the file. */
      labelModifications?: LabelModification[];
    }
    interface ModifyLabelsResponse {
      /** This is always drive#modifyLabelsResponse */
      kind?: string;
      /** The list of labels which were added or updated by the request. */
      modifiedLabels?: Label[];
    }
    interface Operation {
      /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: Status;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
      name?: string;
      /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
      response?: {[P in string]: any};
    }
    interface Permission {
      /** Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type `domain` or `anyone`. */
      allowFileDiscovery?: boolean;
      /** Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions. */
      deleted?: boolean;
      /** Output only. The "pretty" name of the value of the permission. The following is a list of examples for each type of permission: * `user` - User's full name, as defined for their Google account, such as "Joe Smith." * `group` - Name of the Google Group, such as "The Company Administrators." * `domain` - String domain name, such as "thecompany.com." * `anyone` - No `displayName` is present. */
      displayName?: string;
      /** The domain to which this permission refers. */
      domain?: string;
      /** The email address of the user or group to which this permission refers. */
      emailAddress?: string;
      /** The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions: - They can only be set on user and group permissions - The time must be in the future - The time cannot be more than a year in the future */
      expirationTime?: string;
      /** Output only. The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as `permissionId`. IDs should be treated as opaque values. */
      id?: string;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#permission"`. */
      kind?: string;
      /** Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive. */
      pendingOwner?: boolean;
      /** Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items. */
      permissionDetails?: Array<{
        /** Output only. Whether this permission is inherited. This field is always populated. This is an output-only field. */
        inherited?: boolean;
        /** Output only. The ID of the item from which this permission is inherited. This is an output-only field. */
        inheritedFrom?: string;
        /** Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member` */
        permissionType?: string;
        /** Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader` */
        role?: string;
      }>;
      /** Output only. A link to the user's profile photo, if available. */
      photoLink?: string;
      /** The role granted by this permission. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader` */
      role?: string;
      /** Output only. Deprecated: Output only. Use `permissionDetails` instead. */
      teamDrivePermissionDetails?: Array<{
        /** Deprecated: Output only. Use `permissionDetails/inherited` instead. */
        inherited?: boolean;
        /** Deprecated: Output only. Use `permissionDetails/inheritedFrom` instead. */
        inheritedFrom?: string;
        /** Deprecated: Output only. Use `permissionDetails/role` instead. */
        role?: string;
        /** Deprecated: Output only. Use `permissionDetails/permissionType` instead. */
        teamDrivePermissionType?: string;
      }>;
      /** The type of the grantee. Valid values are: * `user` * `group` * `domain` * `anyone` When creating a permission, if `type` is `user` or `group`, you must provide an `emailAddress` for the user or group. When `type` is `domain`, you must provide a `domain`. There isn't extra information required for an `anyone` type. */
      type?: string;
      /** Indicates the view for this permission. Only populated for permissions that belong to a view. 'published' is the only supported value. */
      view?: string;
    }
    interface PermissionList {
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#permissionList"`. */
      kind?: string;
      /** The page token for the next page of permissions. This field will be absent if the end of the permissions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
      /** The list of permissions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      permissions?: Permission[];
    }
    interface Reply {
      /** The action the reply performed to the parent comment. Valid values are: * `resolve` * `reopen` */
      action?: string;
      /** Output only. The author of the reply. The author's email address and permission ID will not be populated. */
      author?: User;
      /** The plain text content of the reply. This field is used for setting the content, while `htmlContent` should be displayed. This is required on creates if no `action` is specified. */
      content?: string;
      /** The time at which the reply was created (RFC 3339 date-time). */
      createdTime?: string;
      /** Output only. Whether the reply has been deleted. A deleted reply has no content. */
      deleted?: boolean;
      /** Output only. The content of the reply with HTML formatting. */
      htmlContent?: string;
      /** Output only. The ID of the reply. */
      id?: string;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#reply"`. */
      kind?: string;
      /** The last time the reply was modified (RFC 3339 date-time). */
      modifiedTime?: string;
    }
    interface ReplyList {
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#replyList"`. */
      kind?: string;
      /** The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
      /** The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      replies?: Reply[];
    }
    interface ResolveAccessProposalRequest {
      /** Required. The action to take on the AccessProposal. */
      action?: string;
      /** Optional. The roles the approver has allowed, if any. Note: This field is required for the `ACCEPT` action. */
      role?: string[];
      /** Optional. Whether to send an email to the requester when the AccessProposal is denied or accepted. */
      sendNotification?: boolean;
      /** Optional. Indicates the view for this access proposal. This should only be set when the proposal belongs to a view. `published` is the only supported value. */
      view?: string;
    }
    interface Revision {
      /** Output only. Links for exporting Docs Editors files to specific formats. */
      exportLinks?: {[P in string]: string};
      /** Output only. The ID of the revision. */
      id?: string;
      /** Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive. */
      keepForever?: boolean;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#revision"`. */
      kind?: string;
      /** Output only. The last user to modify this revision. This field is only populated when the last modification was performed by a signed-in user. */
      lastModifyingUser?: User;
      /** Output only. The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive. */
      md5Checksum?: string;
      /** Output only. The MIME type of the revision. */
      mimeType?: string;
      /** The last time the revision was modified (RFC 3339 date-time). */
      modifiedTime?: string;
      /** Output only. The original filename used to create this revision. This is only applicable to files with binary content in Drive. */
      originalFilename?: string;
      /** Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files. */
      publishAuto?: boolean;
      /** Whether this revision is published. This is only applicable to Docs Editors files. */
      published?: boolean;
      /** Output only. A link to the published revision. This is only populated for Google Sites files. */
      publishedLink?: string;
      /** Whether this revision is published outside the domain. This is only applicable to Docs Editors files. */
      publishedOutsideDomain?: boolean;
      /** Output only. The size of the revision's content in bytes. This is only applicable to files with binary content in Drive. */
      size?: string;
    }
    interface RevisionList {
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#revisionList"`. */
      kind?: string;
      /** The page token for the next page of revisions. This will be absent if the end of the revisions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
      /** The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      revisions?: Revision[];
    }
    interface StartPageToken {
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#startPageToken"`. */
      kind?: string;
      /** The starting page token for listing future changes. The page token doesn't expire. */
      startPageToken?: string;
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface TeamDrive {
      /** An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on `drive.teamdrives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set. */
      backgroundImageFile?: {
        /** The ID of an image file in Drive to use for the background image. */
        id?: string;
        /** The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high. */
        width?: number;
        /** The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image. */
        xCoordinate?: number;
        /** The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image. */
        yCoordinate?: number;
      };
      /** A short-lived link to this Team Drive's background image. */
      backgroundImageLink?: string;
      /** Capabilities the current user has on this Team Drive. */
      capabilities?: {
        /** Whether the current user can add children to folders in this Team Drive. */
        canAddChildren?: boolean;
        /** Whether the current user can change the `copyRequiresWriterPermission` restriction of this Team Drive. */
        canChangeCopyRequiresWriterPermissionRestriction?: boolean;
        /** Whether the current user can change the `domainUsersOnly` restriction of this Team Drive. */
        canChangeDomainUsersOnlyRestriction?: boolean;
        /** Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this Team Drive. */
        canChangeSharingFoldersRequiresOrganizerPermissionRestriction?: boolean;
        /** Whether the current user can change the background of this Team Drive. */
        canChangeTeamDriveBackground?: boolean;
        /** Whether the current user can change the `teamMembersOnly` restriction of this Team Drive. */
        canChangeTeamMembersOnlyRestriction?: boolean;
        /** Whether the current user can comment on files in this Team Drive. */
        canComment?: boolean;
        /** Whether the current user can copy files in this Team Drive. */
        canCopy?: boolean;
        /** Whether the current user can delete children from folders in this Team Drive. */
        canDeleteChildren?: boolean;
        /** Whether the current user can delete this Team Drive. Attempting to delete the Team Drive may still fail if there are untrashed items inside the Team Drive. */
        canDeleteTeamDrive?: boolean;
        /** Whether the current user can download files in this Team Drive. */
        canDownload?: boolean;
        /** Whether the current user can edit files in this Team Drive */
        canEdit?: boolean;
        /** Whether the current user can list the children of folders in this Team Drive. */
        canListChildren?: boolean;
        /** Whether the current user can add members to this Team Drive or remove them or change their role. */
        canManageMembers?: boolean;
        /** Whether the current user can read the revisions resource of files in this Team Drive. */
        canReadRevisions?: boolean;
        /** Deprecated: Use `canDeleteChildren` or `canTrashChildren` instead. */
        canRemoveChildren?: boolean;
        /** Whether the current user can rename files or folders in this Team Drive. */
        canRename?: boolean;
        /** Whether the current user can rename this Team Drive. */
        canRenameTeamDrive?: boolean;
        /** Whether the current user can reset the Team Drive restrictions to defaults. */
        canResetTeamDriveRestrictions?: boolean;
        /** Whether the current user can share files or folders in this Team Drive. */
        canShare?: boolean;
        /** Whether the current user can trash children from folders in this Team Drive. */
        canTrashChildren?: boolean;
      };
      /** The color of this Team Drive as an RGB hex string. It can only be set on a `drive.teamdrives.update` request that does not set `themeId`. */
      colorRgb?: string;
      /** The time at which the Team Drive was created (RFC 3339 date-time). */
      createdTime?: string;
      /** The ID of this Team Drive which is also the ID of the top level folder of this Team Drive. */
      id?: string;
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#teamDrive"`. */
      kind?: string;
      /** The name of this Team Drive. */
      name?: string;
      /** The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`. */
      orgUnitId?: string;
      /** A set of restrictions that apply to this Team Drive or items inside this Team Drive. */
      restrictions?: {
        /** Whether administrative privileges on this Team Drive are required to modify restrictions. */
        adminManagedRestrictions?: boolean;
        /** Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive. */
        copyRequiresWriterPermission?: boolean;
        /** Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive. */
        domainUsersOnly?: boolean;
        /** If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders. */
        sharingFoldersRequiresOrganizerPermission?: boolean;
        /** Whether access to items inside this Team Drive is restricted to members of this Team Drive. */
        teamMembersOnly?: boolean;
      };
      /** The ID of the theme from which the background image and color will be set. The set of possible `teamDriveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.teamdrives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`. */
      themeId?: string;
    }
    interface TeamDriveList {
      /** Identifies what kind of resource this is. Value: the fixed string `"drive#teamDriveList"`. */
      kind?: string;
      /** The page token for the next page of Team Drives. This will be absent if the end of the Team Drives list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ. */
      nextPageToken?: string;
      /** The list of Team Drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched. */
      teamDrives?: TeamDrive[];
    }
    interface User {
      /** Output only. A plain text displayable name for this user. */
      displayName?: string;
      /** Output only. The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester. */
      emailAddress?: string;
      /** Output only. Identifies what kind of resource this is. Value: the fixed string `"drive#user"`. */
      kind?: string;
      /** Output only. Whether this user is the requesting user. */
      me?: boolean;
      /** Output only. The user's ID as visible in Permission resources. */
      permissionId?: string;
      /** Output only. A link to the user's profile photo, if available. */
      photoLink?: string;
    }
    interface AboutResource {
      /** Gets information about the user, the user's Drive, and system capabilities. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<About>;
    }
    interface AccessproposalsResource {
      /** Retrieves an AccessProposal by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. The id of the item the request is on. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The id of the access proposal to resolve. */
        proposalId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<AccessProposal>;
      /** List the AccessProposals on a file. Note: Only approvers are able to list AccessProposals on a file. If the user is not an approver, returns a 403. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. The id of the item the request is on. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The number of results per page */
        pageSize?: number;
        /** Optional. The continuation token on the list of access requests. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListAccessProposalsResponse>;
      /** Used to approve or deny an Access Proposal. */
      resolve(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. The id of the item the request is on. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The id of the access proposal to resolve. */
        proposalId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ResolveAccessProposalRequest;
      }): Request<void>;
      resolve(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Required. The id of the item the request is on. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The id of the access proposal to resolve. */
          proposalId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ResolveAccessProposalRequest
      ): Request<void>;
    }
    interface AppsResource {
      /** Gets a specific app. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** The ID of the app. */
        appId: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<App>;
      /** Lists a user's installed apps. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** A comma-separated list of file extensions to limit returned results. All results within the given app query scope which can open any of the given file extensions are included in the response. If `appFilterMimeTypes` are provided as well, the result is a union of the two resulting app lists. */
        appFilterExtensions?: string;
        /** A comma-separated list of file extensions to limit returned results. All results within the given app query scope which can open any of the given MIME types will be included in the response. If `appFilterExtensions` are provided as well, the result is a union of the two resulting app lists. */
        appFilterMimeTypes?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/). */
        languageCode?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<AppList>;
    }
    interface ChangesResource {
      /** Gets the starting pageToken for listing future changes. */
      getStartPageToken(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned. */
        driveId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Deprecated: Use `driveId` instead. */
        teamDriveId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<StartPageToken>;
      /** Lists the changes for a user or shared drive. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier. */
        driveId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file. */
        includeCorpusRemovals?: boolean;
        /** Whether both My Drive and shared drive items should be included in results. */
        includeItemsFromAllDrives?: boolean;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access. */
        includeRemoved?: boolean;
        /** Deprecated: Use `includeItemsFromAllDrives` instead. */
        includeTeamDriveItems?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of changes to return per page. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method. */
        pageToken: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive. */
        restrictToMyDrive?: boolean;
        /** A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'. */
        spaces?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Deprecated: Use `driveId` instead. */
        teamDriveId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ChangeList>;
      /** Subscribes to changes for a user. */
      watch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier. */
        driveId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file. */
        includeCorpusRemovals?: boolean;
        /** Whether both My Drive and shared drive items should be included in results. */
        includeItemsFromAllDrives?: boolean;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access. */
        includeRemoved?: boolean;
        /** Deprecated: Use `includeItemsFromAllDrives` instead. */
        includeTeamDriveItems?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of changes to return per page. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method. */
        pageToken: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive. */
        restrictToMyDrive?: boolean;
        /** A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'. */
        spaces?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Deprecated: Use `driveId` instead. */
        teamDriveId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Channel;
      }): Request<Channel>;
      watch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier. */
          driveId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file. */
          includeCorpusRemovals?: boolean;
          /** Whether both My Drive and shared drive items should be included in results. */
          includeItemsFromAllDrives?: boolean;
          /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
          includeLabels?: string;
          /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
          includePermissionsForView?: string;
          /** Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access. */
          includeRemoved?: boolean;
          /** Deprecated: Use `includeItemsFromAllDrives` instead. */
          includeTeamDriveItems?: boolean;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** The maximum number of changes to return per page. */
          pageSize?: number;
          /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response or to the response from the getStartPageToken method. */
          pageToken: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to files such as those in the Application Data folder or shared files which have not been added to My Drive. */
          restrictToMyDrive?: boolean;
          /** A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'. */
          spaces?: string;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Deprecated: Use `driveId` instead. */
          teamDriveId?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Channel
      ): Request<Channel>;
    }
    interface ChannelsResource {
      /** Stops watching resources through this channel. */
      stop(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Channel;
      }): Request<void>;
      stop(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Channel
      ): Request<void>;
    }
    interface CommentsResource {
      /** Creates a comment on a file. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Comment;
      }): Request<Comment>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Comment
      ): Request<Comment>;
      /** Deletes a comment. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Gets a comment by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** Whether to return deleted comments. Deleted comments will not include their original content. */
        includeDeleted?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Comment>;
      /** Lists a file's comments. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** Whether to include deleted comments. Deleted comments will not include their original content. */
        includeDeleted?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of comments to return per page. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time). */
        startModifiedTime?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<CommentList>;
      /** Updates a comment with patch semantics. */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Comment;
      }): Request<Comment>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** The ID of the comment. */
          commentId: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Comment
      ): Request<Comment>;
    }
    interface DrivesResource {
      /** Creates a shared drive. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned. */
        requestId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Drive;
      }): Request<Drive>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned. */
          requestId: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Drive
      ): Request<Drive>;
      /** Permanently deletes a shared drive for which the user is an `organizer`. The shared drive cannot contain any untrashed items. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Whether any items inside the shared drive should also be deleted. This option is only supported when `useDomainAdminAccess` is also set to `true`. */
        allowItemDeletion?: boolean;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the shared drive. */
        driveId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
      }): Request<void>;
      /** Gets a shared drive's metadata by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the shared drive. */
        driveId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
      }): Request<Drive>;
      /** Hides a shared drive from the default view. */
      hide(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the shared drive. */
        driveId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Drive>;
      /** Lists the user's shared drives. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/drive/api/guides/search-shareddrives) guide. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of shared drives to return per page. */
        pageSize?: number;
        /** Page token for shared drives. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Query string for searching shared drives. */
        q?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then all shared drives of the domain in which the requester is an administrator are returned. */
        useDomainAdminAccess?: boolean;
      }): Request<DriveList>;
      /** Restores a shared drive to the default view. */
      unhide(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the shared drive. */
        driveId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Drive>;
      /** Updates the metadata for a shared drive. */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the shared drive. */
        driveId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
        /** Request body */
        resource: Drive;
      }): Request<Drive>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** The ID of the shared drive. */
          driveId: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs. */
          useDomainAdminAccess?: boolean;
        },
        body: Drive
      ): Request<Drive>;
    }
    interface FilesResource {
      /** Creates a copy of a file and applies any requested updates with patch semantics. */
      copy(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts instead. */
        enforceSingleParent?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders. */
        ignoreDefaultVisibility?: boolean;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions. */
        keepRevisionForever?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A language hint for OCR processing during image import (ISO 639-1 code). */
        ocrLanguage?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: File;
      }): Request<File>;
      copy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts instead. */
          enforceSingleParent?: boolean;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders. */
          ignoreDefaultVisibility?: boolean;
          /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
          includeLabels?: string;
          /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
          includePermissionsForView?: string;
          /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions. */
          keepRevisionForever?: boolean;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** A language hint for OCR processing during image import (ISO 639-1 code). */
          ocrLanguage?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: File
      ): Request<File>;
      /** Creates a new file. This method supports an *‍/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*`*‍/*` Note: Specify a valid MIME type, rather than the literal `*‍/*` value. The literal `*‍/*` is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with `files.create` must specify the MIME type `application/vnd.google-apps.shortcut`. Apps should specify a file extension in the `name` property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like `"name": "cat.jpg"` in the metadata. Subsequent `GET` requests include the read-only `fileExtension` property populated with the extension originally specified in the `title` property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file's MIME type. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Deprecated. Creating files in multiple folders is no longer supported. */
        enforceSingleParent?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders. */
        ignoreDefaultVisibility?: boolean;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions. */
        keepRevisionForever?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A language hint for OCR processing during image import (ISO 639-1 code). */
        ocrLanguage?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Whether to use the uploaded content as indexable text. */
        useContentAsIndexableText?: boolean;
        /** Request body */
        resource: File;
      }): Request<File>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Deprecated. Creating files in multiple folders is no longer supported. */
          enforceSingleParent?: boolean;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** Whether to ignore the domain's default visibility settings for the created file. Domain administrators can choose to make all uploaded files visible to the domain by default; this parameter bypasses that behavior for the request. Permissions are still inherited from parent folders. */
          ignoreDefaultVisibility?: boolean;
          /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
          includeLabels?: string;
          /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
          includePermissionsForView?: string;
          /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions. */
          keepRevisionForever?: boolean;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** A language hint for OCR processing during image import (ISO 639-1 code). */
          ocrLanguage?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Whether to use the uploaded content as indexable text. */
          useContentAsIndexableText?: boolean;
        },
        body: File
      ): Request<File>;
      /** Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an `organizer` on the parent folder. If the target is a folder, all descendants owned by the user are also deleted. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item will be placed under its owner's root. */
        enforceSingleParent?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Downloads content of a file. Operations are valid for 24 hours from the time of creation. */
      download(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. The ID of the file to download. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Optional. The MIME type the file should be downloaded as. This field can only be set when downloading Google Workspace documents. See [Export MIME types for Google Workspace documents](/drive/api/guides/ref-export-formats) for the list of supported MIME types. If not set, a Google Workspace document is downloaded with a default MIME type. The default MIME type might change in the future. */
        mimeType?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Optional. The revision ID of the file to download. This field can only be set when downloading blob files, Google Docs, and Google Sheets. Returns `INVALID_ARGUMENT` if downloading a specific revision on the file is unsupported. */
        revisionId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Permanently deletes all of the user's trashed files. */
      emptyTrash(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** If set, empties the trash of the provided shared drive. */
        driveId?: string;
        /** Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item will be placed under its owner's root. */
        enforceSingleParent?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB. */
      export(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The MIME type of the format requested for this export. */
        mimeType: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Generates a set of file IDs which can be provided in create or copy requests. */
      generateIds(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The number of IDs to return. */
        count?: number;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The space in which the IDs can be used to create new files. Supported values are 'drive' and 'appDataFolder'. (Default: 'drive') */
        space?: string;
        /** The type of items which the IDs can be used for. Supported values are 'files' and 'shortcuts'. Note that 'shortcuts' are only supported in the `drive` 'space'. (Default: 'files') */
        type?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GeneratedIds>;
      /** Gets a file's metadata or content by ID. If you provide the URL parameter `alt=media`, then the response includes the file contents in the response body. Downloading content with `alt=media` only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [`files.export`](/drive/api/reference/rest/v3/files/export) instead. For more information, see [Download & export files](/drive/api/guides/manage-downloads). */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when the `alt` parameter is set to `media` and the user is the owner of the file or an organizer of the shared drive in which the file resides. */
        acknowledgeAbuse?: boolean;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<File>;
      /** Lists the user's files. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for files & folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don't want trashed files to appear in the list, use the `trashed=false` query parameter to remove trashed files from the results. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Bodies of items (files/documents) to which the query applies. Supported bodies are 'user', 'domain', 'drive', and 'allDrives'. Prefer 'user' or 'drive' to 'allDrives' for efficiency. By default, corpora is set to 'user'. However, this can change depending on the filter set through the 'q' parameter. */
        corpora?: string;
        /** Deprecated: The source of files to list. Use 'corpora' instead. */
        corpus?: string;
        /** ID of the shared drive to search. */
        driveId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Whether both My Drive and shared drive items should be included in results. */
        includeItemsFromAllDrives?: boolean;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** Deprecated: Use `includeItemsFromAllDrives` instead. */
        includeTeamDriveItems?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A comma-separated list of sort keys. Valid keys are: * `createdTime`: When the file was created. * `folder`: The folder ID. This field is sorted using alphabetical ordering. * `modifiedByMeTime`: The last time the file was modified by the user. * `modifiedTime`: The last time the file was modified by anyone. * `name`: The name of the file. This field is sorted using alphabetical ordering, so 1, 12, 2, 22. * `name_natural`: The name of the file. This field is sorted using natural sort ordering, so 1, 2, 12, 22. * `quotaBytesUsed`: The number of storage quota bytes used by the file. * `recency`: The most recent timestamp from the file's date-time fields. * `sharedWithMeTime`: When the file was shared with the user, if applicable. * `starred`: Whether the user has starred the file. * `viewedByMeTime`: The last time the file was viewed by the user. Each key sorts ascending by default, but can be reversed with the 'desc' modifier. Example usage: `?orderBy=folder,modifiedTime desc,name`. */
        orderBy?: string;
        /** The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** A query for filtering the file results. See the "Search for files & folders" guide for supported syntax. */
        q?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** A comma-separated list of spaces to query within the corpora. Supported values are 'drive' and 'appDataFolder'. */
        spaces?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Deprecated: Use `driveId` instead. */
        teamDriveId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<FileList>;
      /** Lists the labels on a file. */
      listLabels(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID for the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The maximum number of labels to return per page. When not set, defaults to 100. */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<LabelList>;
      /** Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified. */
      modifyLabels(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file to which the labels belong. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ModifyLabelsRequest;
      }): Request<ModifyLabelsResponse>;
      modifyLabels(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file to which the labels belong. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ModifyLabelsRequest
      ): Request<ModifyLabelsResponse>;
      /** Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as `modifiedDate`. This method supports patch semantics. This method supports an *‍/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*`*‍/*` Note: Specify a valid MIME type, rather than the literal `*‍/*` value. The literal `*‍/*` is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** A comma-separated list of parent IDs to add. */
        addParents?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Deprecated: Adding files to multiple folders is no longer supported. Use shortcuts instead. */
        enforceSingleParent?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions. */
        keepRevisionForever?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** A language hint for OCR processing during image import (ISO 639-1 code). */
        ocrLanguage?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** A comma-separated list of parent IDs to remove. */
        removeParents?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Whether to use the uploaded content as indexable text. */
        useContentAsIndexableText?: boolean;
        /** Request body */
        resource: File;
      }): Request<File>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** A comma-separated list of parent IDs to add. */
          addParents?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Deprecated: Adding files to multiple folders is no longer supported. Use shortcuts instead. */
          enforceSingleParent?: boolean;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
          includeLabels?: string;
          /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
          includePermissionsForView?: string;
          /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the limit is reached, try deleting pinned revisions. */
          keepRevisionForever?: boolean;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** A language hint for OCR processing during image import (ISO 639-1 code). */
          ocrLanguage?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** A comma-separated list of parent IDs to remove. */
          removeParents?: string;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Whether to use the uploaded content as indexable text. */
          useContentAsIndexableText?: boolean;
        },
        body: File
      ): Request<File>;
      /** Subscribes to changes to a file. */
      watch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when the `alt` parameter is set to `media` and the user is the owner of the file or an organizer of the shared drive in which the file resides. */
        acknowledgeAbuse?: boolean;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
        includeLabels?: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Channel;
      }): Request<Channel>;
      watch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when the `alt` parameter is set to `media` and the user is the owner of the file or an organizer of the shared drive in which the file resides. */
          acknowledgeAbuse?: boolean;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** A comma-separated list of IDs of labels to include in the `labelInfo` part of the response. */
          includeLabels?: string;
          /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
          includePermissionsForView?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Channel
      ): Request<Channel>;
    }
    interface OperationResource {
      /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
      cancel(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be cancelled. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be deleted. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
    }
    interface OperationsResource {
      /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The standard list filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation's parent resource. */
        name?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The standard list page size. */
        pageSize?: number;
        /** The standard list page token. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListOperationsResponse>;
    }
    interface PermissionsResource {
      /** Creates a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** A plain text custom message to include in the notification email. */
        emailMessage?: string;
        /** Deprecated: See `moveToNewOwnersRoot` for details. */
        enforceSingleParent?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file or shared drive. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. If set to `true`, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to `false`, parents are not changed. */
        moveToNewOwnersRoot?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether to send a notification email when sharing to users or groups. This defaults to true for users and groups, and is not allowed for other requests. It must not be disabled for ownership transfers. */
        sendNotificationEmail?: boolean;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect. */
        transferOwnership?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
        /** Request body */
        resource: Permission;
      }): Request<Permission>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** A plain text custom message to include in the notification email. */
          emailMessage?: string;
          /** Deprecated: See `moveToNewOwnersRoot` for details. */
          enforceSingleParent?: boolean;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file or shared drive. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. If set to `true`, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to `false`, parents are not changed. */
          moveToNewOwnersRoot?: boolean;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether to send a notification email when sharing to users or groups. This defaults to true for users and groups, and is not allowed for other requests. It must not be disabled for ownership transfers. */
          sendNotificationEmail?: boolean;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect. */
          transferOwnership?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
          useDomainAdminAccess?: boolean;
        },
        body: Permission
      ): Request<Permission>;
      /** Deletes a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file or shared drive. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the permission. */
        permissionId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
      }): Request<void>;
      /** Gets a permission by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the permission. */
        permissionId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
      }): Request<Permission>;
      /** Lists a file's or shared drive's permissions. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file or shared drive. */
        fileId: string;
        /** Specifies which additional view's permissions to include in the response. Only 'published' is supported. */
        includePermissionsForView?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
      }): Request<PermissionList>;
      /** Updates a permission with patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file or shared drive. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the permission. */
        permissionId: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether to remove the expiration date. */
        removeExpiration?: boolean;
        /** Whether the requesting application supports both My Drives and shared drives. */
        supportsAllDrives?: boolean;
        /** Deprecated: Use `supportsAllDrives` instead. */
        supportsTeamDrives?: boolean;
        /** Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect. */
        transferOwnership?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
        useDomainAdminAccess?: boolean;
        /** Request body */
        resource: Permission;
      }): Request<Permission>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file or shared drive. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** The ID of the permission. */
          permissionId: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether to remove the expiration date. */
          removeExpiration?: boolean;
          /** Whether the requesting application supports both My Drives and shared drives. */
          supportsAllDrives?: boolean;
          /** Deprecated: Use `supportsAllDrives` instead. */
          supportsTeamDrives?: boolean;
          /** Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect. */
          transferOwnership?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs. */
          useDomainAdminAccess?: boolean;
        },
        body: Permission
      ): Request<Permission>;
    }
    interface RepliesResource {
      /** Creates a reply to a comment. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Reply;
      }): Request<Reply>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** The ID of the comment. */
          commentId: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Reply
      ): Request<Reply>;
      /** Deletes a reply. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the reply. */
        replyId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Gets a reply by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** Whether to return deleted replies. Deleted replies will not include their original content. */
        includeDeleted?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the reply. */
        replyId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Reply>;
      /** Lists a comment's replies. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** Whether to include deleted replies. Deleted replies will not include their original content. */
        includeDeleted?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of replies to return per page. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ReplyList>;
      /** Updates a reply with patch semantics. */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** The ID of the comment. */
        commentId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the reply. */
        replyId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Reply;
      }): Request<Reply>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** The ID of the comment. */
          commentId: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The ID of the reply. */
          replyId: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Reply
      ): Request<Reply>;
    }
    interface RevisionsResource {
      /** Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the revision. */
        revisionId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Gets a revision's metadata or content by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Whether the user is acknowledging the risk of downloading known malware or other abusive files. This is only applicable when the `alt` parameter is set to `media` and the user is the owner of the file or an organizer of the shared drive in which the file resides. */
        acknowledgeAbuse?: boolean;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the revision. */
        revisionId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Revision>;
      /** Lists a file's revisions. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of revisions to return per page. */
        pageSize?: number;
        /** The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<RevisionList>;
      /** Updates a revision with patch semantics. */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the file. */
        fileId: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the revision. */
        revisionId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Revision;
      }): Request<Revision>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** The ID of the file. */
          fileId: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The ID of the revision. */
          revisionId: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Revision
      ): Request<Revision>;
    }
    interface TeamdrivesResource {
      /** Deprecated: Use `drives.create` instead. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned. */
        requestId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: TeamDrive;
      }): Request<TeamDrive>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned. */
          requestId: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TeamDrive
      ): Request<TeamDrive>;
      /** Deprecated: Use `drives.delete` instead. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the Team Drive */
        teamDriveId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Deprecated: Use `drives.get` instead. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the Team Drive */
        teamDriveId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs. */
        useDomainAdminAccess?: boolean;
      }): Request<TeamDrive>;
      /** Deprecated: Use `drives.list` instead. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of Team Drives to return. */
        pageSize?: number;
        /** Page token for Team Drives. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Query string for searching Team Drives. */
        q?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned. */
        useDomainAdminAccess?: boolean;
      }): Request<TeamDriveList>;
      /** Deprecated: Use `drives.update` instead. */
      update(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The ID of the Team Drive */
        teamDriveId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs. */
        useDomainAdminAccess?: boolean;
        /** Request body */
        resource: TeamDrive;
      }): Request<TeamDrive>;
      update(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The ID of the Team Drive */
          teamDriveId: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
          /** Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs. */
          useDomainAdminAccess?: boolean;
        },
        body: TeamDrive
      ): Request<TeamDrive>;
    }

    const about: AboutResource;

    const accessproposals: AccessproposalsResource;

    const apps: AppsResource;

    const changes: ChangesResource;

    const channels: ChannelsResource;

    const comments: CommentsResource;

    const drives: DrivesResource;

    const files: FilesResource;

    const operation: OperationResource;

    const operations: OperationsResource;

    const permissions: PermissionsResource;

    const replies: RepliesResource;

    const revisions: RevisionsResource;

    const teamdrives: TeamdrivesResource;
  }
}
