/* This is stub file for gapi.client.drive-v3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250909

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',
  );
  /** now we can use gapi.client.drive */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, create, and delete all of your Google Drive files */
    'https://www.googleapis.com/auth/drive',
    /** See, create, and delete its own configuration data in your Google Drive */
    'https://www.googleapis.com/auth/drive.appdata',
    /** View your Google Drive apps */
    'https://www.googleapis.com/auth/drive.apps.readonly',
    /** See, edit, create, and delete only the specific Google Drive files you use with this app */
    'https://www.googleapis.com/auth/drive.file',
    /** See and download your Google Drive files that were created or edited by Google Meet. */
    'https://www.googleapis.com/auth/drive.meet.readonly',
    /** View and manage metadata of files in your Google Drive */
    'https://www.googleapis.com/auth/drive.metadata',
    /** See information about your Google Drive files */
    'https://www.googleapis.com/auth/drive.metadata.readonly',
    /** View the photos, videos and albums in your Google Photos */
    'https://www.googleapis.com/auth/drive.photos.readonly',
    /** See and download all your Google Drive files */
    'https://www.googleapis.com/auth/drive.readonly',
    /** Modify your Google Apps Script scripts' behavior */
    'https://www.googleapis.com/auth/drive.scripts',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about the user, the user's Drive, and system capabilities. For more information, see [Return user info](https://developers.google.com/workspace/drive/api/guides/user-info). Required: The `fields` parameter must be set. To return the exact fields you need, see [Return specific fields](https://developers.google.com/workspace/drive/api/guides/fields-parameter). */
    await gapi.client.drive.about.get({});
    /** Retrieves an AccessProposal by ID. */
    await gapi.client.drive.accessproposals.get({
      fileId: 'Test string',
      proposalId: 'Test string',
    });
    /** List the AccessProposals on a file. Note: Only approvers are able to list AccessProposals on a file. If the user is not an approver, returns a 403. */
    await gapi.client.drive.accessproposals.list({
      fileId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Used to approve or deny an Access Proposal. */
    await gapi.client.drive.accessproposals.resolve(
      {
        fileId: 'Test string',
        proposalId: 'Test string',
      },
      {
        action: 'Test string',
        role: ['Test string'],
        sendNotification: true,
        view: 'Test string',
      },
    );
    /** Gets a specific app. For more information, see [Return user info](https://developers.google.com/workspace/drive/api/guides/user-info). */
    await gapi.client.drive.apps.get({
      appId: 'Test string',
    });
    /** Lists a user's installed apps. For more information, see [Return user info](https://developers.google.com/workspace/drive/api/guides/user-info). */
    await gapi.client.drive.apps.list({
      appFilterExtensions: 'Test string',
      appFilterMimeTypes: 'Test string',
      languageCode: 'Test string',
    });
    /** Gets the starting pageToken for listing future changes. For more information, see [Retrieve changes](https://developers.google.com/workspace/drive/api/guides/manage-changes). */
    await gapi.client.drive.changes.getStartPageToken({
      driveId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Lists the changes for a user or shared drive. For more information, see [Retrieve changes](https://developers.google.com/workspace/drive/api/guides/manage-changes). */
    await gapi.client.drive.changes.list({
      driveId: 'Test string',
      includeCorpusRemovals: true,
      includeItemsFromAllDrives: true,
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      includeRemoved: true,
      includeTeamDriveItems: true,
      pageSize: 42,
      pageToken: 'Test string',
      restrictToMyDrive: true,
      spaces: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Subscribes to changes for a user. For more information, see [Notifications for resource changes](https://developers.google.com/workspace/drive/api/guides/push). */
    await gapi.client.drive.changes.watch(
      {
        driveId: 'Test string',
        includeCorpusRemovals: true,
        includeItemsFromAllDrives: true,
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        includeRemoved: true,
        includeTeamDriveItems: true,
        pageSize: 42,
        pageToken: 'Test string',
        restrictToMyDrive: true,
        spaces: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
        teamDriveId: 'Test string',
      },
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      },
    );
    /** Stops watching resources through this channel. For more information, see [Notifications for resource changes](https://developers.google.com/workspace/drive/api/guides/push). */
    await gapi.client.drive.channels.stop(
      {},
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      },
    );
    /** Creates a comment on a file. For more information, see [Manage comments and replies](https://developers.google.com/workspace/drive/api/guides/manage-comments). Required: The `fields` parameter must be set. To return the exact fields you need, see [Return specific fields](https://developers.google.com/workspace/drive/api/guides/fields-parameter). */
    await gapi.client.drive.comments.create(
      {
        fileId: 'Test string',
      },
      {
        anchor: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        content: 'Test string',
        createdTime: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        modifiedTime: 'Test string',
        quotedFileContent: {
          mimeType: 'Test string',
          value: 'Test string',
        },
        replies: [
          {
            action: 'Test string',
            author: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              kind: 'Test string',
              me: true,
              permissionId: 'Test string',
              photoLink: 'Test string',
            },
            content: 'Test string',
            createdTime: 'Test string',
            deleted: true,
            htmlContent: 'Test string',
            id: 'Test string',
            kind: 'Test string',
            modifiedTime: 'Test string',
          },
        ],
        resolved: true,
      },
    );
    /** Deletes a comment. For more information, see [Manage comments and replies](https://developers.google.com/workspace/drive/api/guides/manage-comments). */
    await gapi.client.drive.comments.delete({
      commentId: 'Test string',
      fileId: 'Test string',
    });
    /** Gets a comment by ID. For more information, see [Manage comments and replies](https://developers.google.com/workspace/drive/api/guides/manage-comments). Required: The `fields` parameter must be set. To return the exact fields you need, see [Return specific fields](https://developers.google.com/workspace/drive/api/guides/fields-parameter). */
    await gapi.client.drive.comments.get({
      commentId: 'Test string',
      fileId: 'Test string',
      includeDeleted: true,
    });
    /** Lists a file's comments. For more information, see [Manage comments and replies](https://developers.google.com/workspace/drive/api/guides/manage-comments). Required: The `fields` parameter must be set. To return the exact fields you need, see [Return specific fields](https://developers.google.com/workspace/drive/api/guides/fields-parameter). */
    await gapi.client.drive.comments.list({
      fileId: 'Test string',
      includeDeleted: true,
      pageSize: 42,
      pageToken: 'Test string',
      startModifiedTime: 'Test string',
    });
    /** Updates a comment with patch semantics. For more information, see [Manage comments and replies](https://developers.google.com/workspace/drive/api/guides/manage-comments). Required: The `fields` parameter must be set. To return the exact fields you need, see [Return specific fields](https://developers.google.com/workspace/drive/api/guides/fields-parameter). */
    await gapi.client.drive.comments.update(
      {
        commentId: 'Test string',
        fileId: 'Test string',
      },
      {
        anchor: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        content: 'Test string',
        createdTime: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        modifiedTime: 'Test string',
        quotedFileContent: {
          mimeType: 'Test string',
          value: 'Test string',
        },
        replies: [
          {
            action: 'Test string',
            author: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              kind: 'Test string',
              me: true,
              permissionId: 'Test string',
              photoLink: 'Test string',
            },
            content: 'Test string',
            createdTime: 'Test string',
            deleted: true,
            htmlContent: 'Test string',
            id: 'Test string',
            kind: 'Test string',
            modifiedTime: 'Test string',
          },
        ],
        resolved: true,
      },
    );
    /** Creates a shared drive. For more information, see [Manage shared drives](https://developers.google.com/workspace/drive/api/guides/manage-shareddrives). */
    await gapi.client.drive.drives.create(
      {
        requestId: 'Test string',
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeDownloadRestriction: true,
          canChangeDriveBackground: true,
          canChangeDriveMembersOnlyRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRename: true,
          canRenameDrive: true,
          canResetDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdTime: 'Test string',
        hidden: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          downloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          driveMembersOnly: true,
          sharingFoldersRequiresOrganizerPermission: true,
        },
        themeId: 'Test string',
      },
    );
    /** Permanently deletes a shared drive for which the user is an `organizer`. The shared drive cannot contain any untrashed items. For more information, see [Manage shared drives](https://developers.google.com/workspace/drive/api/guides/manage-shareddrives). */
    await gapi.client.drive.drives.delete({
      allowItemDeletion: true,
      driveId: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Gets a shared drive's metadata by ID. For more information, see [Manage shared drives](https://developers.google.com/workspace/drive/api/guides/manage-shareddrives). */
    await gapi.client.drive.drives.get({
      driveId: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Hides a shared drive from the default view. For more information, see [Manage shared drives](https://developers.google.com/workspace/drive/api/guides/manage-shareddrives). */
    await gapi.client.drive.drives.hide({
      driveId: 'Test string',
    });
    /** Lists the user's shared drives. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/workspace/drive/api/guides/search-shareddrives) guide. */
    await gapi.client.drive.drives.list({
      pageSize: 42,
      pageToken: 'Test string',
      q: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Restores a shared drive to the default view. For more information, see [Manage shared drives](https://developers.google.com/workspace/drive/api/guides/manage-shareddrives). */
    await gapi.client.drive.drives.unhide({
      driveId: 'Test string',
    });
    /** Updates the metadata for a shared drive. For more information, see [Manage shared drives](https://developers.google.com/workspace/drive/api/guides/manage-shareddrives). */
    await gapi.client.drive.drives.update(
      {
        driveId: 'Test string',
        useDomainAdminAccess: true,
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeDownloadRestriction: true,
          canChangeDriveBackground: true,
          canChangeDriveMembersOnlyRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRename: true,
          canRenameDrive: true,
          canResetDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdTime: 'Test string',
        hidden: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          downloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          driveMembersOnly: true,
          sharingFoldersRequiresOrganizerPermission: true,
        },
        themeId: 'Test string',
      },
    );
    /** Creates a copy of a file and applies any requested updates with patch semantics. For more information, see [Create and manage files](https://developers.google.com/workspace/drive/api/guides/create-file). */
    await gapi.client.drive.files.copy(
      {
        enforceSingleParent: true,
        fileId: 'Test string',
        ignoreDefaultVisibility: true,
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        keepRevisionForever: true,
        ocrLanguage: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
      },
      {
        appProperties: {
          A: 'Test string',
        },
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeItemDownloadRestriction: true,
          canChangeSecurityUpdateEnabled: true,
          canChangeViewersCanCopyContent: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDisableInheritedPermissions: true,
          canDownload: true,
          canEdit: true,
          canEnableInheritedPermissions: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentHints: {
          indexableText: 'Test string',
          thumbnail: {
            image: 'Test string',
            mimeType: 'Test string',
          },
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              kind: 'Test string',
              me: true,
              permissionId: 'Test string',
              photoLink: 'Test string',
            },
            restrictionTime: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyRequiresWriterPermission: true,
        createdTime: 'Test string',
        description: 'Test string',
        downloadRestrictions: {
          effectiveDownloadRestrictionWithContext: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          itemDownloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
        },
        driveId: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          time: 'Test string',
          whiteBalance: 'Test string',
          width: 42,
        },
        inheritedPermissionsDisabled: true,
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      kind: 'Test string',
                      me: true,
                      permissionId: 'Test string',
                      photoLink: 'Test string',
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMe: true,
        modifiedByMeTime: 'Test string',
        modifiedTime: 'Test string',
        name: 'Test string',
        originalFilename: 'Test string',
        ownedByMe: true,
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            kind: 'Test string',
            me: true,
            permissionId: 'Test string',
            photoLink: 'Test string',
          },
        ],
        parents: ['Test string'],
        permissionIds: ['Test string'],
        permissions: [
          {
            allowFileDiscovery: true,
            deleted: true,
            displayName: 'Test string',
            domain: 'Test string',
            emailAddress: 'Test string',
            expirationTime: 'Test string',
            id: 'Test string',
            inheritedPermissionsDisabled: true,
            kind: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            teamDrivePermissionDetails: [
              {
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            view: 'Test string',
          },
        ],
        properties: {
          A: 'Test string',
        },
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shared: true,
        sharedWithMeTime: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        size: 'Test string',
        spaces: ['Test string'],
        starred: true,
        teamDriveId: 'Test string',
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        trashed: true,
        trashedTime: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        viewedByMe: true,
        viewedByMeTime: 'Test string',
        viewersCanCopyContent: true,
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      },
    );
    /** Creates a file. For more information, see [Create and manage files](/workspace/drive/api/guides/create-file). This method supports an *‍/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:* `*‍/*` (Specify a valid MIME type, rather than the literal `*‍/*` value. The literal `*‍/*` is only used to indicate that any valid MIME type can be uploaded. For more information, see [Google Workspace and Google Drive supported MIME types](/workspace/drive/api/guides/mime-types).) For more information on uploading files, see [Upload file data](/workspace/drive/api/guides/manage-uploads). Apps creating shortcuts with the `create` method must specify the MIME type `application/vnd.google-apps.shortcut`. Apps should specify a file extension in the `name` property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like `"name": "cat.jpg"` in the metadata. Subsequent `GET` requests include the read-only `fileExtension` property populated with the extension originally specified in the `name` property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the name. In cases where the extension is missing, Drive attempts to determine the extension based on the file's MIME type. */
    await gapi.client.drive.files.create(
      {
        enforceSingleParent: true,
        ignoreDefaultVisibility: true,
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        keepRevisionForever: true,
        ocrLanguage: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
        useContentAsIndexableText: true,
      },
      {
        appProperties: {
          A: 'Test string',
        },
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeItemDownloadRestriction: true,
          canChangeSecurityUpdateEnabled: true,
          canChangeViewersCanCopyContent: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDisableInheritedPermissions: true,
          canDownload: true,
          canEdit: true,
          canEnableInheritedPermissions: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentHints: {
          indexableText: 'Test string',
          thumbnail: {
            image: 'Test string',
            mimeType: 'Test string',
          },
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              kind: 'Test string',
              me: true,
              permissionId: 'Test string',
              photoLink: 'Test string',
            },
            restrictionTime: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyRequiresWriterPermission: true,
        createdTime: 'Test string',
        description: 'Test string',
        downloadRestrictions: {
          effectiveDownloadRestrictionWithContext: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          itemDownloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
        },
        driveId: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          time: 'Test string',
          whiteBalance: 'Test string',
          width: 42,
        },
        inheritedPermissionsDisabled: true,
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      kind: 'Test string',
                      me: true,
                      permissionId: 'Test string',
                      photoLink: 'Test string',
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMe: true,
        modifiedByMeTime: 'Test string',
        modifiedTime: 'Test string',
        name: 'Test string',
        originalFilename: 'Test string',
        ownedByMe: true,
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            kind: 'Test string',
            me: true,
            permissionId: 'Test string',
            photoLink: 'Test string',
          },
        ],
        parents: ['Test string'],
        permissionIds: ['Test string'],
        permissions: [
          {
            allowFileDiscovery: true,
            deleted: true,
            displayName: 'Test string',
            domain: 'Test string',
            emailAddress: 'Test string',
            expirationTime: 'Test string',
            id: 'Test string',
            inheritedPermissionsDisabled: true,
            kind: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            teamDrivePermissionDetails: [
              {
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            view: 'Test string',
          },
        ],
        properties: {
          A: 'Test string',
        },
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shared: true,
        sharedWithMeTime: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        size: 'Test string',
        spaces: ['Test string'],
        starred: true,
        teamDriveId: 'Test string',
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        trashed: true,
        trashedTime: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        viewedByMe: true,
        viewedByMeTime: 'Test string',
        viewersCanCopyContent: true,
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      },
    );
    /** Permanently deletes a file owned by the user without moving it to the trash. For more information, see [Trash or delete files and folders](https://developers.google.com/workspace/drive/api/guides/delete). If the file belongs to a shared drive, the user must be an `organizer` on the parent folder. If the target is a folder, all descendants owned by the user are also deleted. */
    await gapi.client.drive.files.delete({
      enforceSingleParent: true,
      fileId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
    });
    /** Downloads the content of a file. For more information, see [Download and export files](https://developers.google.com/workspace/drive/api/guides/manage-downloads). Operations are valid for 24 hours from the time of creation. */
    await gapi.client.drive.files.download({
      fileId: 'Test string',
      mimeType: 'Test string',
      revisionId: 'Test string',
    });
    /** Permanently deletes all of the user's trashed files. For more information, see [Trash or delete files and folders](https://developers.google.com/workspace/drive/api/guides/delete). */
    await gapi.client.drive.files.emptyTrash({
      driveId: 'Test string',
      enforceSingleParent: true,
    });
    /** Exports a Google Workspace document to the requested MIME type and returns exported byte content. For more information, see [Download and export files](https://developers.google.com/workspace/drive/api/guides/manage-downloads). Note that the exported content is limited to 10 MB. */
    await gapi.client.drive.files.export({
      fileId: 'Test string',
      mimeType: 'Test string',
    });
    /** Generates a set of file IDs which can be provided in create or copy requests. For more information, see [Create and manage files](https://developers.google.com/workspace/drive/api/guides/create-file). */
    await gapi.client.drive.files.generateIds({
      count: 42,
      space: 'Test string',
      type: 'Test string',
    });
    /** Gets a file's metadata or content by ID. For more information, see [Search for files and folders](/workspace/drive/api/guides/search-files). If you provide the URL parameter `alt=media`, then the response includes the file contents in the response body. Downloading content with `alt=media` only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [`files.export`](/workspace/drive/api/reference/rest/v3/files/export) instead. For more information, see [Download and export files](/workspace/drive/api/guides/manage-downloads). */
    await gapi.client.drive.files.get({
      acknowledgeAbuse: true,
      fileId: 'Test string',
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
    });
    /** Lists the user's files. For more information, see [Search for files and folders](/workspace/drive/api/guides/search-files). This method accepts the `q` parameter, which is a search query combining one or more search terms. This method returns *all* files by default, including trashed files. If you don't want trashed files to appear in the list, use the `trashed=false` query parameter to remove trashed files from the results. */
    await gapi.client.drive.files.list({
      corpora: 'Test string',
      corpus: 'Test string',
      driveId: 'Test string',
      includeItemsFromAllDrives: true,
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      includeTeamDriveItems: true,
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      q: 'Test string',
      spaces: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Lists the labels on a file. For more information, see [List labels on a file](https://developers.google.com/workspace/drive/api/guides/list-labels). */
    await gapi.client.drive.files.listLabels({
      fileId: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Modifies the set of labels applied to a file. For more information, see [Set a label field on a file](https://developers.google.com/workspace/drive/api/guides/set-label). Returns a list of the labels that were added or modified. */
    await gapi.client.drive.files.modifyLabels(
      {
        fileId: 'Test string',
      },
      {
        kind: 'Test string',
        labelModifications: [
          {
            fieldModifications: [
              {
                fieldId: 'Test string',
                kind: 'Test string',
                setDateValues: ['Test string'],
                setIntegerValues: ['Test string'],
                setSelectionValues: ['Test string'],
                setTextValues: ['Test string'],
                setUserValues: ['Test string'],
                unsetValues: true,
              },
            ],
            kind: 'Test string',
            labelId: 'Test string',
            removeLabel: true,
          },
        ],
      },
    );
    /** Updates a file's metadata, content, or both. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as `modifiedDate`. This method supports patch semantics. This method supports an *‍/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:* `*‍/*` (Specify a valid MIME type, rather than the literal `*‍/*` value. The literal `*‍/*` is only used to indicate that any valid MIME type can be uploaded. For more information, see [Google Workspace and Google Drive supported MIME types](/workspace/drive/api/guides/mime-types).) For more information on uploading files, see [Upload file data](/workspace/drive/api/guides/manage-uploads). */
    await gapi.client.drive.files.update(
      {
        addParents: 'Test string',
        enforceSingleParent: true,
        fileId: 'Test string',
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        keepRevisionForever: true,
        ocrLanguage: 'Test string',
        removeParents: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
        useContentAsIndexableText: true,
      },
      {
        appProperties: {
          A: 'Test string',
        },
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeItemDownloadRestriction: true,
          canChangeSecurityUpdateEnabled: true,
          canChangeViewersCanCopyContent: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDisableInheritedPermissions: true,
          canDownload: true,
          canEdit: true,
          canEnableInheritedPermissions: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentHints: {
          indexableText: 'Test string',
          thumbnail: {
            image: 'Test string',
            mimeType: 'Test string',
          },
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              kind: 'Test string',
              me: true,
              permissionId: 'Test string',
              photoLink: 'Test string',
            },
            restrictionTime: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyRequiresWriterPermission: true,
        createdTime: 'Test string',
        description: 'Test string',
        downloadRestrictions: {
          effectiveDownloadRestrictionWithContext: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          itemDownloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
        },
        driveId: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          time: 'Test string',
          whiteBalance: 'Test string',
          width: 42,
        },
        inheritedPermissionsDisabled: true,
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      kind: 'Test string',
                      me: true,
                      permissionId: 'Test string',
                      photoLink: 'Test string',
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMe: true,
        modifiedByMeTime: 'Test string',
        modifiedTime: 'Test string',
        name: 'Test string',
        originalFilename: 'Test string',
        ownedByMe: true,
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            kind: 'Test string',
            me: true,
            permissionId: 'Test string',
            photoLink: 'Test string',
          },
        ],
        parents: ['Test string'],
        permissionIds: ['Test string'],
        permissions: [
          {
            allowFileDiscovery: true,
            deleted: true,
            displayName: 'Test string',
            domain: 'Test string',
            emailAddress: 'Test string',
            expirationTime: 'Test string',
            id: 'Test string',
            inheritedPermissionsDisabled: true,
            kind: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            teamDrivePermissionDetails: [
              {
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            view: 'Test string',
          },
        ],
        properties: {
          A: 'Test string',
        },
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shared: true,
        sharedWithMeTime: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        size: 'Test string',
        spaces: ['Test string'],
        starred: true,
        teamDriveId: 'Test string',
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        trashed: true,
        trashedTime: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        viewedByMe: true,
        viewedByMeTime: 'Test string',
        viewersCanCopyContent: true,
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      },
    );
    /** Subscribes to changes to a file. For more information, see [Notifications for resource changes](https://developers.google.com/workspace/drive/api/guides/push). */
    await gapi.client.drive.files.watch(
      {
        acknowledgeAbuse: true,
        fileId: 'Test string',
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
      },
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.drive.operations.get({
      name: 'Test string',
    });
    /** Creates a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.create(
      {
        emailMessage: 'Test string',
        enforceExpansiveAccess: true,
        enforceSingleParent: true,
        fileId: 'Test string',
        moveToNewOwnersRoot: true,
        sendNotificationEmail: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        transferOwnership: true,
        useDomainAdminAccess: true,
      },
      {
        allowFileDiscovery: true,
        deleted: true,
        displayName: 'Test string',
        domain: 'Test string',
        emailAddress: 'Test string',
        expirationTime: 'Test string',
        id: 'Test string',
        inheritedPermissionsDisabled: true,
        kind: 'Test string',
        pendingOwner: true,
        permissionDetails: [
          {
            inherited: true,
            inheritedFrom: 'Test string',
            permissionType: 'Test string',
            role: 'Test string',
          },
        ],
        photoLink: 'Test string',
        role: 'Test string',
        teamDrivePermissionDetails: [
          {
            inherited: true,
            inheritedFrom: 'Test string',
            role: 'Test string',
            teamDrivePermissionType: 'Test string',
          },
        ],
        type: 'Test string',
        view: 'Test string',
      },
    );
    /** Deletes a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.delete({
      enforceExpansiveAccess: true,
      fileId: 'Test string',
      permissionId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      useDomainAdminAccess: true,
    });
    /** Gets a permission by ID. */
    await gapi.client.drive.permissions.get({
      fileId: 'Test string',
      permissionId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      useDomainAdminAccess: true,
    });
    /** Lists a file's or shared drive's permissions. */
    await gapi.client.drive.permissions.list({
      fileId: 'Test string',
      includePermissionsForView: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      useDomainAdminAccess: true,
    });
    /** Updates a permission with patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.update(
      {
        enforceExpansiveAccess: true,
        fileId: 'Test string',
        permissionId: 'Test string',
        removeExpiration: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        transferOwnership: true,
        useDomainAdminAccess: true,
      },
      {
        allowFileDiscovery: true,
        deleted: true,
        displayName: 'Test string',
        domain: 'Test string',
        emailAddress: 'Test string',
        expirationTime: 'Test string',
        id: 'Test string',
        inheritedPermissionsDisabled: true,
        kind: 'Test string',
        pendingOwner: true,
        permissionDetails: [
          {
            inherited: true,
            inheritedFrom: 'Test string',
            permissionType: 'Test string',
            role: 'Test string',
          },
        ],
        photoLink: 'Test string',
        role: 'Test string',
        teamDrivePermissionDetails: [
          {
            inherited: true,
            inheritedFrom: 'Test string',
            role: 'Test string',
            teamDrivePermissionType: 'Test string',
          },
        ],
        type: 'Test string',
        view: 'Test string',
      },
    );
    /** Creates a reply to a comment. */
    await gapi.client.drive.replies.create(
      {
        commentId: 'Test string',
        fileId: 'Test string',
      },
      {
        action: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        content: 'Test string',
        createdTime: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        modifiedTime: 'Test string',
      },
    );
    /** Deletes a reply. */
    await gapi.client.drive.replies.delete({
      commentId: 'Test string',
      fileId: 'Test string',
      replyId: 'Test string',
    });
    /** Gets a reply by ID. */
    await gapi.client.drive.replies.get({
      commentId: 'Test string',
      fileId: 'Test string',
      includeDeleted: true,
      replyId: 'Test string',
    });
    /** Lists a comment's replies. */
    await gapi.client.drive.replies.list({
      commentId: 'Test string',
      fileId: 'Test string',
      includeDeleted: true,
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a reply with patch semantics. */
    await gapi.client.drive.replies.update(
      {
        commentId: 'Test string',
        fileId: 'Test string',
        replyId: 'Test string',
      },
      {
        action: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        content: 'Test string',
        createdTime: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        modifiedTime: 'Test string',
      },
    );
    /** Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted. For more information, see [Manage file revisions](https://developers.google.com/drive/api/guides/manage-revisions). */
    await gapi.client.drive.revisions.delete({
      fileId: 'Test string',
      revisionId: 'Test string',
    });
    /** Gets a revision's metadata or content by ID. For more information, see [Manage file revisions](https://developers.google.com/workspace/drive/api/guides/manage-revisions). */
    await gapi.client.drive.revisions.get({
      acknowledgeAbuse: true,
      fileId: 'Test string',
      revisionId: 'Test string',
    });
    /** Lists a file's revisions. For more information, see [Manage file revisions](https://developers.google.com/workspace/drive/api/guides/manage-revisions). */
    await gapi.client.drive.revisions.list({
      fileId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a revision with patch semantics. For more information, see [Manage file revisions](https://developers.google.com/workspace/drive/api/guides/manage-revisions). */
    await gapi.client.drive.revisions.update(
      {
        fileId: 'Test string',
        revisionId: 'Test string',
      },
      {
        exportLinks: {
          A: 'Test string',
        },
        id: 'Test string',
        keepForever: true,
        kind: 'Test string',
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          kind: 'Test string',
          me: true,
          permissionId: 'Test string',
          photoLink: 'Test string',
        },
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedTime: 'Test string',
        originalFilename: 'Test string',
        publishAuto: true,
        published: true,
        publishedLink: 'Test string',
        publishedOutsideDomain: true,
        size: 'Test string',
      },
    );
    /** Deprecated: Use `drives.create` instead. */
    await gapi.client.drive.teamdrives.create(
      {
        requestId: 'Test string',
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeDownloadRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canChangeTeamDriveBackground: true,
          canChangeTeamMembersOnlyRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteTeamDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRemoveChildren: true,
          canRename: true,
          canRenameTeamDrive: true,
          canResetTeamDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdTime: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          downloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          sharingFoldersRequiresOrganizerPermission: true,
          teamMembersOnly: true,
        },
        themeId: 'Test string',
      },
    );
    /** Deprecated: Use `drives.delete` instead. */
    await gapi.client.drive.teamdrives.delete({
      teamDriveId: 'Test string',
    });
    /** Deprecated: Use `drives.get` instead. */
    await gapi.client.drive.teamdrives.get({
      teamDriveId: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Deprecated: Use `drives.list` instead. */
    await gapi.client.drive.teamdrives.list({
      pageSize: 42,
      pageToken: 'Test string',
      q: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Deprecated: Use `drives.update` instead. */
    await gapi.client.drive.teamdrives.update(
      {
        teamDriveId: 'Test string',
        useDomainAdminAccess: true,
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeDownloadRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canChangeTeamDriveBackground: true,
          canChangeTeamMembersOnlyRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteTeamDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRemoveChildren: true,
          canRename: true,
          canRenameTeamDrive: true,
          canResetTeamDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdTime: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          downloadRestriction: {
            restrictedForReaders: true,
            restrictedForWriters: true,
          },
          sharingFoldersRequiresOrganizerPermission: true,
          teamMembersOnly: true,
        },
        themeId: 'Test string',
      },
    );
  }
});
