/* This is stub file for gapi.client.dataform-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230107

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://dataform.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.dataform */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.dataform.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.dataform.projects.locations.list({
            filter: "Test string",
            includeUnrevealedLocations: true,
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new Repository in a given project and location. */
        await gapi.client.dataform.projects.locations.repositories.create({
            parent: "Test string",
            repositoryId: "Test string",
        }, {
            gitRemoteSettings: {
                authenticationTokenSecretVersion: "Test string",
                defaultBranch: "Test string",
                tokenStatus: "Test string",
                url: "Test string",
            },
            name: "Test string",
            npmrcEnvironmentVariablesSecretVersion: "Test string",
        });
        /** Deletes a single Repository. */
        await gapi.client.dataform.projects.locations.repositories.delete({
            force: true,
            name: "Test string",
        });
        /** Fetches a Repository's remote branches. */
        await gapi.client.dataform.projects.locations.repositories.fetchRemoteBranches({
            name: "Test string",
        });
        /** Fetches a single Repository. */
        await gapi.client.dataform.projects.locations.repositories.get({
            name: "Test string",
        });
        /** Lists Repositories in a given project and location. */
        await gapi.client.dataform.projects.locations.repositories.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a single Repository. */
        await gapi.client.dataform.projects.locations.repositories.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            gitRemoteSettings: {
                authenticationTokenSecretVersion: "Test string",
                defaultBranch: "Test string",
                tokenStatus: "Test string",
                url: "Test string",
            },
            name: "Test string",
            npmrcEnvironmentVariablesSecretVersion: "Test string",
        });
        /** Creates a new CompilationResult in a given project and location. */
        await gapi.client.dataform.projects.locations.repositories.compilationResults.create({
            parent: "Test string",
        }, {
            codeCompilationConfig: {
                assertionSchema: "Test string",
                databaseSuffix: "Test string",
                defaultDatabase: "Test string",
                defaultLocation: "Test string",
                defaultSchema: "Test string",
                schemaSuffix: "Test string",
                tablePrefix: "Test string",
                vars: {
                    A: "Test string"
                },
            },
            compilationErrors: [
                {
                    actionTarget: {
                        database: "Test string",
                        name: "Test string",
                        schema: "Test string",
                    },
                    message: "Test string",
                    path: "Test string",
                    stack: "Test string",
                }
            ],
            dataformCoreVersion: "Test string",
            gitCommitish: "Test string",
            name: "Test string",
            releaseConfig: "Test string",
            resolvedGitCommitSha: "Test string",
            workspace: "Test string",
        });
        /** Fetches a single CompilationResult. */
        await gapi.client.dataform.projects.locations.repositories.compilationResults.get({
            name: "Test string",
        });
        /** Lists CompilationResults in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.compilationResults.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Returns CompilationResultActions in a given CompilationResult. */
        await gapi.client.dataform.projects.locations.repositories.compilationResults.query({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new ReleaseConfig in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.releaseConfigs.create({
            parent: "Test string",
            releaseConfigId: "Test string",
        }, {
            codeCompilationConfig: {
                assertionSchema: "Test string",
                databaseSuffix: "Test string",
                defaultDatabase: "Test string",
                defaultLocation: "Test string",
                defaultSchema: "Test string",
                schemaSuffix: "Test string",
                tablePrefix: "Test string",
                vars: {
                    A: "Test string"
                },
            },
            cronSchedule: "Test string",
            gitCommitish: "Test string",
            name: "Test string",
            recentScheduledReleaseRecords: [
                {
                    compilationResult: "Test string",
                    errorStatus: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    releaseTime: "Test string",
                }
            ],
            releaseCompilationResult: "Test string",
            timeZone: "Test string",
        });
        /** Deletes a single ReleaseConfig. */
        await gapi.client.dataform.projects.locations.repositories.releaseConfigs.delete({
            name: "Test string",
        });
        /** Fetches a single ReleaseConfig. */
        await gapi.client.dataform.projects.locations.repositories.releaseConfigs.get({
            name: "Test string",
        });
        /** Lists ReleaseConfigs in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.releaseConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a single ReleaseConfig. */
        await gapi.client.dataform.projects.locations.repositories.releaseConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            codeCompilationConfig: {
                assertionSchema: "Test string",
                databaseSuffix: "Test string",
                defaultDatabase: "Test string",
                defaultLocation: "Test string",
                defaultSchema: "Test string",
                schemaSuffix: "Test string",
                tablePrefix: "Test string",
                vars: {
                    A: "Test string"
                },
            },
            cronSchedule: "Test string",
            gitCommitish: "Test string",
            name: "Test string",
            recentScheduledReleaseRecords: [
                {
                    compilationResult: "Test string",
                    errorStatus: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    releaseTime: "Test string",
                }
            ],
            releaseCompilationResult: "Test string",
            timeZone: "Test string",
        });
        /** Creates a new WorkflowConfig in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.workflowConfigs.create({
            parent: "Test string",
            workflowConfigId: "Test string",
        }, {
            cronSchedule: "Test string",
            invocationConfig: {
                fullyRefreshIncrementalTablesEnabled: true,
                includedTags: [
                    "Test string"
                ],
                includedTargets: [
                    {
                        database: "Test string",
                        name: "Test string",
                        schema: "Test string",
                    }
                ],
                transitiveDependenciesIncluded: true,
                transitiveDependentsIncluded: true,
            },
            name: "Test string",
            recentScheduledExecutionRecords: [
                {
                    errorStatus: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    executionTime: "Test string",
                    workflowInvocation: "Test string",
                }
            ],
            releaseConfig: "Test string",
            timeZone: "Test string",
        });
        /** Deletes a single WorkflowConfig. */
        await gapi.client.dataform.projects.locations.repositories.workflowConfigs.delete({
            name: "Test string",
        });
        /** Fetches a single WorkflowConfig. */
        await gapi.client.dataform.projects.locations.repositories.workflowConfigs.get({
            name: "Test string",
        });
        /** Lists WorkflowConfigs in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.workflowConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a single WorkflowConfig. */
        await gapi.client.dataform.projects.locations.repositories.workflowConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            cronSchedule: "Test string",
            invocationConfig: {
                fullyRefreshIncrementalTablesEnabled: true,
                includedTags: [
                    "Test string"
                ],
                includedTargets: [
                    {
                        database: "Test string",
                        name: "Test string",
                        schema: "Test string",
                    }
                ],
                transitiveDependenciesIncluded: true,
                transitiveDependentsIncluded: true,
            },
            name: "Test string",
            recentScheduledExecutionRecords: [
                {
                    errorStatus: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    executionTime: "Test string",
                    workflowInvocation: "Test string",
                }
            ],
            releaseConfig: "Test string",
            timeZone: "Test string",
        });
        /** Requests cancellation of a running WorkflowInvocation. */
        await gapi.client.dataform.projects.locations.repositories.workflowInvocations.cancel({
            name: "Test string",
        }, {
        });
        /** Creates a new WorkflowInvocation in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.workflowInvocations.create({
            parent: "Test string",
        }, {
            compilationResult: "Test string",
            invocationConfig: {
                fullyRefreshIncrementalTablesEnabled: true,
                includedTags: [
                    "Test string"
                ],
                includedTargets: [
                    {
                        database: "Test string",
                        name: "Test string",
                        schema: "Test string",
                    }
                ],
                transitiveDependenciesIncluded: true,
                transitiveDependentsIncluded: true,
            },
            invocationTiming: {
                endTime: "Test string",
                startTime: "Test string",
            },
            name: "Test string",
            state: "Test string",
            workflowConfig: "Test string",
        });
        /** Deletes a single WorkflowInvocation. */
        await gapi.client.dataform.projects.locations.repositories.workflowInvocations.delete({
            name: "Test string",
        });
        /** Fetches a single WorkflowInvocation. */
        await gapi.client.dataform.projects.locations.repositories.workflowInvocations.get({
            name: "Test string",
        });
        /** Lists WorkflowInvocations in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.workflowInvocations.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Returns WorkflowInvocationActions in a given WorkflowInvocation. */
        await gapi.client.dataform.projects.locations.repositories.workflowInvocations.query({
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Applies a Git commit for uncommitted files in a Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.commit({
            name: "Test string",
        }, {
            author: {
                emailAddress: "Test string",
                name: "Test string",
            },
            commitMessage: "Test string",
            paths: [
                "Test string"
            ],
        });
        /** Creates a new Workspace in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.create({
            parent: "Test string",
            workspaceId: "Test string",
        }, {
            name: "Test string",
        });
        /** Deletes a single Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.delete({
            name: "Test string",
        });
        /** Fetches Git diff for an uncommitted file in a Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.fetchFileDiff({
            path: "Test string",
            workspace: "Test string",
        });
        /** Fetches Git statuses for the files in a Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.fetchFileGitStatuses({
            name: "Test string",
        });
        /** Fetches Git ahead/behind against a remote branch. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.fetchGitAheadBehind({
            name: "Test string",
            remoteBranch: "Test string",
        });
        /** Fetches a single Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.get({
            name: "Test string",
        });
        /** Installs dependency NPM packages (inside a Workspace). */
        await gapi.client.dataform.projects.locations.repositories.workspaces.installNpmPackages({
            workspace: "Test string",
        }, {
        });
        /** Lists Workspaces in a given Repository. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a directory inside a Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.makeDirectory({
            workspace: "Test string",
        }, {
            path: "Test string",
        });
        /** Moves a directory (inside a Workspace), and all of its contents, to a new location. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.moveDirectory({
            workspace: "Test string",
        }, {
            newPath: "Test string",
            path: "Test string",
        });
        /** Moves a file (inside a Workspace) to a new location. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.moveFile({
            workspace: "Test string",
        }, {
            newPath: "Test string",
            path: "Test string",
        });
        /** Pulls Git commits from the Repository's remote into a Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.pull({
            name: "Test string",
        }, {
            author: {
                emailAddress: "Test string",
                name: "Test string",
            },
            remoteBranch: "Test string",
        });
        /** Pushes Git commits from a Workspace to the Repository's remote. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.push({
            name: "Test string",
        }, {
            remoteBranch: "Test string",
        });
        /** Returns the contents of a given Workspace directory. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.queryDirectoryContents({
            pageSize: 42,
            pageToken: "Test string",
            path: "Test string",
            workspace: "Test string",
        });
        /** Returns the contents of a file (inside a Workspace). */
        await gapi.client.dataform.projects.locations.repositories.workspaces.readFile({
            path: "Test string",
            workspace: "Test string",
        });
        /** Deletes a directory (inside a Workspace) and all of its contents. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.removeDirectory({
            workspace: "Test string",
        }, {
            path: "Test string",
        });
        /** Deletes a file (inside a Workspace). */
        await gapi.client.dataform.projects.locations.repositories.workspaces.removeFile({
            workspace: "Test string",
        }, {
            path: "Test string",
        });
        /** Performs a Git reset for uncommitted files in a Workspace. */
        await gapi.client.dataform.projects.locations.repositories.workspaces.reset({
            name: "Test string",
        }, {
            clean: true,
            paths: [
                "Test string"
            ],
        });
        /** Writes to a file (inside a Workspace). */
        await gapi.client.dataform.projects.locations.repositories.workspaces.writeFile({
            workspace: "Test string",
        }, {
            contents: "Test string",
            path: "Test string",
        });
    }
});
