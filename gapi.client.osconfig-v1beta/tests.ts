/* This is stub file for gapi.client.osconfig-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241014

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://osconfig.googleapis.com/$discovery/rest?version=v1beta'
  );
  /** now we can use gapi.client.osconfig */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Create an OS Config guest policy. */
    await gapi.client.osconfig.projects.guestPolicies.create(
      {
        guestPolicyId: 'Test string',
        parent: 'Test string',
      },
      {
        assignment: {
          groupLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          instanceNamePrefixes: ['Test string'],
          instances: ['Test string'],
          osTypes: [
            {
              osArchitecture: 'Test string',
              osShortName: 'Test string',
              osVersion: 'Test string',
            },
          ],
          zones: ['Test string'],
        },
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        packageRepositories: [
          {
            apt: {
              archiveType: 'Test string',
              components: ['Test string'],
              distribution: 'Test string',
              gpgKey: 'Test string',
              uri: 'Test string',
            },
            goo: {
              name: 'Test string',
              url: 'Test string',
            },
            yum: {
              baseUrl: 'Test string',
              displayName: 'Test string',
              gpgKeys: ['Test string'],
              id: 'Test string',
            },
            zypper: {
              baseUrl: 'Test string',
              displayName: 'Test string',
              gpgKeys: ['Test string'],
              id: 'Test string',
            },
          },
        ],
        packages: [
          {
            desiredState: 'Test string',
            manager: 'Test string',
            name: 'Test string',
          },
        ],
        recipes: [
          {
            artifacts: [
              {
                allowInsecure: true,
                gcs: {
                  bucket: 'Test string',
                  generation: 'Test string',
                  object: 'Test string',
                },
                id: 'Test string',
                remote: {
                  checksum: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            desiredState: 'Test string',
            installSteps: [
              {
                archiveExtraction: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  type: 'Test string',
                },
                dpkgInstallation: {
                  artifactId: 'Test string',
                },
                fileCopy: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  overwrite: true,
                  permissions: 'Test string',
                },
                fileExec: {
                  allowedExitCodes: [42],
                  args: ['Test string'],
                  artifactId: 'Test string',
                  localPath: 'Test string',
                },
                msiInstallation: {
                  allowedExitCodes: [42],
                  artifactId: 'Test string',
                  flags: ['Test string'],
                },
                rpmInstallation: {
                  artifactId: 'Test string',
                },
                scriptRun: {
                  allowedExitCodes: [42],
                  interpreter: 'Test string',
                  script: 'Test string',
                },
              },
            ],
            name: 'Test string',
            updateSteps: [
              {
                archiveExtraction: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  type: 'Test string',
                },
                dpkgInstallation: {
                  artifactId: 'Test string',
                },
                fileCopy: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  overwrite: true,
                  permissions: 'Test string',
                },
                fileExec: {
                  allowedExitCodes: [42],
                  args: ['Test string'],
                  artifactId: 'Test string',
                  localPath: 'Test string',
                },
                msiInstallation: {
                  allowedExitCodes: [42],
                  artifactId: 'Test string',
                  flags: ['Test string'],
                },
                rpmInstallation: {
                  artifactId: 'Test string',
                },
                scriptRun: {
                  allowedExitCodes: [42],
                  interpreter: 'Test string',
                  script: 'Test string',
                },
              },
            ],
            version: 'Test string',
          },
        ],
        updateTime: 'Test string',
      }
    );
    /** Delete an OS Config guest policy. */
    await gapi.client.osconfig.projects.guestPolicies.delete({
      name: 'Test string',
    });
    /** Get an OS Config guest policy. */
    await gapi.client.osconfig.projects.guestPolicies.get({
      name: 'Test string',
    });
    /** Get a page of OS Config guest policies. */
    await gapi.client.osconfig.projects.guestPolicies.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an OS Config guest policy. */
    await gapi.client.osconfig.projects.guestPolicies.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        assignment: {
          groupLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          instanceNamePrefixes: ['Test string'],
          instances: ['Test string'],
          osTypes: [
            {
              osArchitecture: 'Test string',
              osShortName: 'Test string',
              osVersion: 'Test string',
            },
          ],
          zones: ['Test string'],
        },
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        packageRepositories: [
          {
            apt: {
              archiveType: 'Test string',
              components: ['Test string'],
              distribution: 'Test string',
              gpgKey: 'Test string',
              uri: 'Test string',
            },
            goo: {
              name: 'Test string',
              url: 'Test string',
            },
            yum: {
              baseUrl: 'Test string',
              displayName: 'Test string',
              gpgKeys: ['Test string'],
              id: 'Test string',
            },
            zypper: {
              baseUrl: 'Test string',
              displayName: 'Test string',
              gpgKeys: ['Test string'],
              id: 'Test string',
            },
          },
        ],
        packages: [
          {
            desiredState: 'Test string',
            manager: 'Test string',
            name: 'Test string',
          },
        ],
        recipes: [
          {
            artifacts: [
              {
                allowInsecure: true,
                gcs: {
                  bucket: 'Test string',
                  generation: 'Test string',
                  object: 'Test string',
                },
                id: 'Test string',
                remote: {
                  checksum: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            desiredState: 'Test string',
            installSteps: [
              {
                archiveExtraction: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  type: 'Test string',
                },
                dpkgInstallation: {
                  artifactId: 'Test string',
                },
                fileCopy: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  overwrite: true,
                  permissions: 'Test string',
                },
                fileExec: {
                  allowedExitCodes: [42],
                  args: ['Test string'],
                  artifactId: 'Test string',
                  localPath: 'Test string',
                },
                msiInstallation: {
                  allowedExitCodes: [42],
                  artifactId: 'Test string',
                  flags: ['Test string'],
                },
                rpmInstallation: {
                  artifactId: 'Test string',
                },
                scriptRun: {
                  allowedExitCodes: [42],
                  interpreter: 'Test string',
                  script: 'Test string',
                },
              },
            ],
            name: 'Test string',
            updateSteps: [
              {
                archiveExtraction: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  type: 'Test string',
                },
                dpkgInstallation: {
                  artifactId: 'Test string',
                },
                fileCopy: {
                  artifactId: 'Test string',
                  destination: 'Test string',
                  overwrite: true,
                  permissions: 'Test string',
                },
                fileExec: {
                  allowedExitCodes: [42],
                  args: ['Test string'],
                  artifactId: 'Test string',
                  localPath: 'Test string',
                },
                msiInstallation: {
                  allowedExitCodes: [42],
                  artifactId: 'Test string',
                  flags: ['Test string'],
                },
                rpmInstallation: {
                  artifactId: 'Test string',
                },
                scriptRun: {
                  allowedExitCodes: [42],
                  interpreter: 'Test string',
                  script: 'Test string',
                },
              },
            ],
            version: 'Test string',
          },
        ],
        updateTime: 'Test string',
      }
    );
    /** Create an OS Config patch deployment. */
    await gapi.client.osconfig.projects.patchDeployments.create(
      {
        parent: 'Test string',
        patchDeploymentId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        duration: 'Test string',
        instanceFilter: {
          all: true,
          groupLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          instanceNamePrefixes: ['Test string'],
          instances: ['Test string'],
          zones: ['Test string'],
        },
        lastExecuteTime: 'Test string',
        name: 'Test string',
        oneTimeSchedule: {
          executeTime: 'Test string',
        },
        patchConfig: {
          apt: {
            excludes: ['Test string'],
            exclusivePackages: ['Test string'],
            type: 'Test string',
          },
          goo: {},
          migInstancesAllowed: true,
          postStep: {
            linuxExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
            windowsExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
          },
          preStep: {
            linuxExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
            windowsExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
          },
          rebootConfig: 'Test string',
          windowsUpdate: {
            classifications: ['Test string'],
            excludes: ['Test string'],
            exclusivePatches: ['Test string'],
          },
          yum: {
            excludes: ['Test string'],
            exclusivePackages: ['Test string'],
            minimal: true,
            security: true,
          },
          zypper: {
            categories: ['Test string'],
            excludes: ['Test string'],
            exclusivePatches: ['Test string'],
            severities: ['Test string'],
            withOptional: true,
            withUpdate: true,
          },
        },
        recurringSchedule: {
          endTime: 'Test string',
          frequency: 'Test string',
          lastExecuteTime: 'Test string',
          monthly: {
            monthDay: 42,
            weekDayOfMonth: {
              dayOffset: 42,
              dayOfWeek: 'Test string',
              weekOrdinal: 42,
            },
          },
          nextExecuteTime: 'Test string',
          startTime: 'Test string',
          timeOfDay: {
            hours: 42,
            minutes: 42,
            nanos: 42,
            seconds: 42,
          },
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          weekly: {
            dayOfWeek: 'Test string',
          },
        },
        rollout: {
          disruptionBudget: {
            fixed: 42,
            percent: 42,
          },
          mode: 'Test string',
        },
        state: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Delete an OS Config patch deployment. */
    await gapi.client.osconfig.projects.patchDeployments.delete({
      name: 'Test string',
    });
    /** Get an OS Config patch deployment. */
    await gapi.client.osconfig.projects.patchDeployments.get({
      name: 'Test string',
    });
    /** Get a page of OS Config patch deployments. */
    await gapi.client.osconfig.projects.patchDeployments.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an OS Config patch deployment. */
    await gapi.client.osconfig.projects.patchDeployments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        duration: 'Test string',
        instanceFilter: {
          all: true,
          groupLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          instanceNamePrefixes: ['Test string'],
          instances: ['Test string'],
          zones: ['Test string'],
        },
        lastExecuteTime: 'Test string',
        name: 'Test string',
        oneTimeSchedule: {
          executeTime: 'Test string',
        },
        patchConfig: {
          apt: {
            excludes: ['Test string'],
            exclusivePackages: ['Test string'],
            type: 'Test string',
          },
          goo: {},
          migInstancesAllowed: true,
          postStep: {
            linuxExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
            windowsExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
          },
          preStep: {
            linuxExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
            windowsExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
          },
          rebootConfig: 'Test string',
          windowsUpdate: {
            classifications: ['Test string'],
            excludes: ['Test string'],
            exclusivePatches: ['Test string'],
          },
          yum: {
            excludes: ['Test string'],
            exclusivePackages: ['Test string'],
            minimal: true,
            security: true,
          },
          zypper: {
            categories: ['Test string'],
            excludes: ['Test string'],
            exclusivePatches: ['Test string'],
            severities: ['Test string'],
            withOptional: true,
            withUpdate: true,
          },
        },
        recurringSchedule: {
          endTime: 'Test string',
          frequency: 'Test string',
          lastExecuteTime: 'Test string',
          monthly: {
            monthDay: 42,
            weekDayOfMonth: {
              dayOffset: 42,
              dayOfWeek: 'Test string',
              weekOrdinal: 42,
            },
          },
          nextExecuteTime: 'Test string',
          startTime: 'Test string',
          timeOfDay: {
            hours: 42,
            minutes: 42,
            nanos: 42,
            seconds: 42,
          },
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          weekly: {
            dayOfWeek: 'Test string',
          },
        },
        rollout: {
          disruptionBudget: {
            fixed: 42,
            percent: 42,
          },
          mode: 'Test string',
        },
        state: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Change state of patch deployment to "PAUSED". Patch deployment in paused state doesn't generate patch jobs. */
    await gapi.client.osconfig.projects.patchDeployments.pause(
      {
        name: 'Test string',
      },
      {}
    );
    /** Change state of patch deployment back to "ACTIVE". Patch deployment in active state continues to generate patch jobs. */
    await gapi.client.osconfig.projects.patchDeployments.resume(
      {
        name: 'Test string',
      },
      {}
    );
    /** Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted. */
    await gapi.client.osconfig.projects.patchJobs.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Patch VM instances by creating and running a patch job. */
    await gapi.client.osconfig.projects.patchJobs.execute(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        dryRun: true,
        duration: 'Test string',
        instanceFilter: {
          all: true,
          groupLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          instanceNamePrefixes: ['Test string'],
          instances: ['Test string'],
          zones: ['Test string'],
        },
        patchConfig: {
          apt: {
            excludes: ['Test string'],
            exclusivePackages: ['Test string'],
            type: 'Test string',
          },
          goo: {},
          migInstancesAllowed: true,
          postStep: {
            linuxExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
            windowsExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
          },
          preStep: {
            linuxExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
            windowsExecStepConfig: {
              allowedSuccessCodes: [42],
              gcsObject: {
                bucket: 'Test string',
                generationNumber: 'Test string',
                object: 'Test string',
              },
              interpreter: 'Test string',
              localPath: 'Test string',
            },
          },
          rebootConfig: 'Test string',
          windowsUpdate: {
            classifications: ['Test string'],
            excludes: ['Test string'],
            exclusivePatches: ['Test string'],
          },
          yum: {
            excludes: ['Test string'],
            exclusivePackages: ['Test string'],
            minimal: true,
            security: true,
          },
          zypper: {
            categories: ['Test string'],
            excludes: ['Test string'],
            exclusivePatches: ['Test string'],
            severities: ['Test string'],
            withOptional: true,
            withUpdate: true,
          },
        },
        rollout: {
          disruptionBudget: {
            fixed: 42,
            percent: 42,
          },
          mode: 'Test string',
        },
      }
    );
    /** Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs. */
    await gapi.client.osconfig.projects.patchJobs.get({
      name: 'Test string',
    });
    /** Get a list of patch jobs. */
    await gapi.client.osconfig.projects.patchJobs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Get a list of instance details for a given patch job. */
    await gapi.client.osconfig.projects.patchJobs.instanceDetails.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lookup the effective guest policy that applies to a VM instance. This lookup merges all policies that are assigned to the instance ancestry. */
    await gapi.client.osconfig.projects.zones.instances.lookupEffectiveGuestPolicy(
      {
        instance: 'Test string',
      },
      {
        osArchitecture: 'Test string',
        osShortName: 'Test string',
        osVersion: 'Test string',
      }
    );
  }
});
