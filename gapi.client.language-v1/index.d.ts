/* Type definitions for non-npm package Cloud Natural Language API v1 0.0 */
// Project: https://cloud.google.com/natural-language/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://language.googleapis.com/$discovery/rest?version=v1
// Revision: 20250914

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Natural Language API v1 */
  function load(
    urlOrObject: 'https://language.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'language', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'language', version: 'v1', callback: () => any): void;

  namespace language {
    interface AnalyzeEntitiesRequest {
      /** Required. Input document. */
      document?: Document;
      /** The encoding type used by the API to calculate offsets. */
      encodingType?: string;
    }
    interface AnalyzeEntitiesResponse {
      /** The recognized entities in the input document. */
      entities?: Entity[];
      /** The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details. */
      language?: string;
    }
    interface AnalyzeEntitySentimentRequest {
      /** Required. Input document. */
      document?: Document;
      /** The encoding type used by the API to calculate offsets. */
      encodingType?: string;
    }
    interface AnalyzeEntitySentimentResponse {
      /** The recognized entities in the input document with associated sentiments. */
      entities?: Entity[];
      /** The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details. */
      language?: string;
    }
    interface AnalyzeSentimentRequest {
      /** Required. Input document. */
      document?: Document;
      /** The encoding type used by the API to calculate sentence offsets. */
      encodingType?: string;
    }
    interface AnalyzeSentimentResponse {
      /** The overall sentiment of the input document. */
      documentSentiment?: Sentiment;
      /** The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details. */
      language?: string;
      /** The sentiment for all the sentences in the document. */
      sentences?: Sentence[];
    }
    interface AnalyzeSyntaxRequest {
      /** Required. Input document. */
      document?: Document;
      /** The encoding type used by the API to calculate offsets. */
      encodingType?: string;
    }
    interface AnalyzeSyntaxResponse {
      /** The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details. */
      language?: string;
      /** Sentences in the input document. */
      sentences?: Sentence[];
      /** Tokens, along with their syntactic information, in the input document. */
      tokens?: Token[];
    }
    interface AnnotateTextRequest {
      /** Required. Input document. */
      document?: Document;
      /** The encoding type used by the API to calculate offsets. */
      encodingType?: string;
      /** Required. The enabled features. */
      features?: AnnotateTextRequestFeatures;
    }
    interface AnnotateTextRequestFeatures {
      /** Optional. The model options to use for classification. Defaults to v1 options if not specified. Only used if `classify_text` is set to true. */
      classificationModelOptions?: ClassificationModelOptions;
      /** Classify the full document into categories. */
      classifyText?: boolean;
      /** Extract document-level sentiment. */
      extractDocumentSentiment?: boolean;
      /** Extract entities. */
      extractEntities?: boolean;
      /** Extract entities and their associated sentiment. */
      extractEntitySentiment?: boolean;
      /** Extract syntax information. */
      extractSyntax?: boolean;
      /** Moderate the document for harmful and sensitive categories. */
      moderateText?: boolean;
    }
    interface AnnotateTextResponse {
      /** Categories identified in the input document. */
      categories?: ClassificationCategory[];
      /** The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment. */
      documentSentiment?: Sentiment;
      /** Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities. */
      entities?: Entity[];
      /** The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details. */
      language?: string;
      /** Harmful and sensitive categories identified in the input document. */
      moderationCategories?: ClassificationCategory[];
      /** Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax. */
      sentences?: Sentence[];
      /** Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax. */
      tokens?: Token[];
    }
    interface ClassificationCategory {
      /** The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text. */
      confidence?: number;
      /** The name of the category representing the document. */
      name?: string;
    }
    interface ClassificationModelOptions {
      /** Setting this field will use the V1 model and V1 content categories version. The V1 model is a legacy model; support for this will be discontinued in the future. */
      v1Model?: any;
      /** Setting this field will use the V2 model with the appropriate content categories version. The V2 model is a better performing model. */
      v2Model?: ClassificationModelOptionsV2Model;
    }
    interface ClassificationModelOptionsV1Model {}
    interface ClassificationModelOptionsV2Model {
      /** The content categories used for classification. */
      contentCategoriesVersion?: string;
    }
    interface ClassifyTextRequest {
      /** Optional. Model options to use for classification. Defaults to v1 options if not specified. */
      classificationModelOptions?: ClassificationModelOptions;
      /** Required. Input document. */
      document?: Document;
    }
    interface ClassifyTextResponse {
      /** Categories representing the input document. */
      categories?: ClassificationCategory[];
    }
    interface Color {
      /** The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). */
      alpha?: number;
      /** The amount of blue in the color as a value in the interval [0, 1]. */
      blue?: number;
      /** The amount of green in the color as a value in the interval [0, 1]. */
      green?: number;
      /** The amount of red in the color as a value in the interval [0, 1]. */
      red?: number;
    }
    interface CpuMetric {
      /** Required. Number of CPU cores. */
      coreNumber?: string;
      /** Required. Total seconds of core usage, e.g. 4. */
      coreSec?: string;
      /** Required. Type of cpu, e.g. N2. */
      cpuType?: string;
      /** Required. Machine spec, e.g. N1_STANDARD_4. */
      machineSpec?: string;
      /** Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\p{Ll}\p{N}]+ E.g. "key": "goog-k8s-cluster-name","value": "us-east1-b4rk" */
      trackingLabels?: {[P in string]: string};
    }
    interface DependencyEdge {
      /** Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index. */
      headTokenIndex?: number;
      /** The parse label for the token. */
      label?: string;
    }
    interface DiskMetric {
      /** Required. Type of Disk, e.g. REGIONAL_SSD. */
      diskType?: string;
      /** Required. Seconds of physical disk usage, e.g. 3600. */
      gibSec?: string;
    }
    interface Document {
      /** The content of the input in string format. Cloud audit logging exempt since it is based on user data. */
      content?: string;
      /** The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported. */
      gcsContentUri?: string;
      /** The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned. */
      language?: string;
      /** Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error. */
      type?: string;
    }
    interface Entity {
      /** The mentions of this entity in the input document. The API currently supports proper noun mentions. */
      mentions?: EntityMention[];
      /** Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below. */
      metadata?: {[P in string]: string};
      /** The representative name for the entity. */
      name?: string;
      /** The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient. */
      salience?: number;
      /** For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document. */
      sentiment?: Sentiment;
      /** The entity type. */
      type?: string;
    }
    interface EntityMention {
      /** For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document. */
      sentiment?: Sentiment;
      /** The mention text. */
      text?: TextSpan;
      /** The type of the entity mention. */
      type?: string;
    }
    interface GpuMetric {
      /** Required. Seconds of GPU usage, e.g. 3600. */
      gpuSec?: string;
      /** Required. Type of GPU, e.g. NVIDIA_TESLA_V100. */
      gpuType?: string;
      /** Required. Machine spec, e.g. N1_STANDARD_4. */
      machineSpec?: string;
      /** Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\p{Ll}\p{N}]+ E.g. "key": "goog-k8s-cluster-name","value": "us-east1-b4rk" */
      trackingLabels?: {[P in string]: string};
    }
    interface InfraUsage {
      /** Aggregated core metrics since requested start_time. */
      cpuMetrics?: CpuMetric[];
      /** Aggregated persistent disk metrics since requested start_time. */
      diskMetrics?: DiskMetric[];
      /** Aggregated gpu metrics since requested start_time. */
      gpuMetrics?: GpuMetric[];
      /** Aggregated ram metrics since requested start_time. */
      ramMetrics?: RamMetric[];
      /** Aggregated tpu metrics since requested start_time. */
      tpuMetrics?: TpuMetric[];
    }
    interface ModerateTextRequest {
      /** Required. Input document. */
      document?: Document;
    }
    interface ModerateTextResponse {
      /** Harmful and sensitive categories representing the input document. */
      moderationCategories?: ClassificationCategory[];
    }
    interface PartOfSpeech {
      /** The grammatical aspect. */
      aspect?: string;
      /** The grammatical case. */
      case?: string;
      /** The grammatical form. */
      form?: string;
      /** The grammatical gender. */
      gender?: string;
      /** The grammatical mood. */
      mood?: string;
      /** The grammatical number. */
      number?: string;
      /** The grammatical person. */
      person?: string;
      /** The grammatical properness. */
      proper?: string;
      /** The grammatical reciprocity. */
      reciprocity?: string;
      /** The part of speech tag. */
      tag?: string;
      /** The grammatical tense. */
      tense?: string;
      /** The grammatical voice. */
      voice?: string;
    }
    interface RamMetric {
      /** Required. VM memory in Gigabyte second, e.g. 3600. Using int64 type to match billing metrics definition. */
      gibSec?: string;
      /** Required. Machine spec, e.g. N1_STANDARD_4. */
      machineSpec?: string;
      /** Required. VM memory in gb. */
      memories?: number;
      /** Required. Type of ram. */
      ramType?: string;
      /** Billing tracking labels. They do not contain any user data but only the labels set by Vertex Core Infra itself. Tracking labels' keys are defined with special format: goog-[\p{Ll}\p{N}]+ E.g. "key": "goog-k8s-cluster-name","value": "us-east1-b4rk" */
      trackingLabels?: {[P in string]: string};
    }
    interface Sentence {
      /** For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence. */
      sentiment?: Sentiment;
      /** The sentence text. */
      text?: TextSpan;
    }
    interface Sentiment {
      /** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative). */
      magnitude?: number;
      /** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
      score?: number;
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface TextSpan {
      /** The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request. */
      beginOffset?: number;
      /** The content of the text span, which is a substring of the document. */
      content?: string;
    }
    interface Token {
      /** Dependency tree parse for this token. */
      dependencyEdge?: DependencyEdge;
      /** [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token. */
      lemma?: string;
      /** Parts of speech tag for this token. */
      partOfSpeech?: PartOfSpeech;
      /** The token text. */
      text?: TextSpan;
    }
    interface TpuMetric {
      /** Required. Seconds of TPU usage, e.g. 3600. */
      tpuSec?: string;
      /** Required. Type of TPU, e.g. TPU_V2, TPU_V3_POD. */
      tpuType?: string;
    }
    interface XPSArrayStats {
      commonStats?: XPSCommonStats;
      /** Stats of all the values of all arrays, as if they were a single long series of data. The type depends on the element type of the array. */
      memberStats?: XPSDataStats;
    }
    interface XPSBatchPredictResponse {
      /** Examples for batch prediction result. Under full API implementation, results are stored in shared RecordIO of AnnotatedExample protobufs, the annotations field of which is populated by XPS backend. */
      exampleSet?: XPSExampleSet;
    }
    interface XPSBoundingBoxMetricsEntry {
      /** Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. */
      confidenceMetricsEntries?: XPSBoundingBoxMetricsEntryConfidenceMetricsEntry[];
      /** The intersection-over-union threshold value used to compute this metrics entry. */
      iouThreshold?: number;
      /** The mean average precision. */
      meanAveragePrecision?: number;
    }
    interface XPSBoundingBoxMetricsEntryConfidenceMetricsEntry {
      /** The confidence threshold value used to compute the metrics. */
      confidenceThreshold?: number;
      /** The harmonic mean of recall and precision. */
      f1Score?: number;
      /** Precision for the given confidence threshold. */
      precision?: number;
      /** Recall for the given confidence threshold. */
      recall?: number;
    }
    interface XPSCategoryStats {
      commonStats?: XPSCommonStats;
      /** The statistics of the top 20 CATEGORY values, ordered by CategoryStats.SingleCategoryStats.count. */
      topCategoryStats?: XPSCategoryStatsSingleCategoryStats[];
    }
    interface XPSCategoryStatsSingleCategoryStats {
      /** The number of occurrences of this value in the series. */
      count?: string;
      /** The CATEGORY value. */
      value?: string;
    }
    interface XPSClassificationEvaluationMetrics {
      /** The Area under precision recall curve metric. */
      auPrc?: number;
      /** The Area Under Receiver Operating Characteristic curve metric. Micro-averaged for the overall evaluation. */
      auRoc?: number;
      /** The Area under precision recall curve metric based on priors. */
      baseAuPrc?: number;
      /** Metrics that have confidence thresholds. Precision-recall curve can be derived from it. */
      confidenceMetricsEntries?: XPSConfidenceMetricsEntry[];
      /** Confusion matrix of the evaluation. Only set for MULTICLASS classification problems where number of annotation specs is no more than 10. Only set for model level evaluation, not for evaluation per label. */
      confusionMatrix?: XPSConfusionMatrix;
      /** The number of examples used for model evaluation. */
      evaluatedExamplesCount?: number;
      /** The Log Loss metric. */
      logLoss?: number;
    }
    interface XPSColorMap {
      /** Should be used during training. */
      annotationSpecIdToken?: string;
      /** This type is deprecated in favor of the IntColor below. This is because google.type.Color represent color has a float which semantically does not reflect discrete classes/categories concept. Moreover, to handle it well we need to have some tolerance when converting to a discretized color. As such, the recommendation is to have API surface still use google.type.Color while internally IntColor is used. */
      color?: Color;
      /** Should be used during preprocessing. */
      displayName?: string;
      intColor?: XPSColorMapIntColor;
    }
    interface XPSColorMapIntColor {
      /** The value should be in range of [0, 255]. */
      blue?: number;
      /** The value should be in range of [0, 255]. */
      green?: number;
      /** The value should be in range of [0, 255]. */
      red?: number;
    }
    interface XPSColumnSpec {
      /** The unique id of the column. When Preprocess, the Tables BE will popuate the order id of the column, which reflects the order of the column inside the table, i.e. 0 means the first column in the table, N-1 means the last column. AutoML BE will persist this order id in Spanner and set the order id here when calling RefreshTablesStats and Train. Note: it's different than the column_spec_id that is generated in AutoML BE. */
      columnId?: number;
      /** The data stats of the column. It's outputed in RefreshTablesStats and a required input for Train. */
      dataStats?: XPSDataStats;
      /** The data type of the column. It's outputed in Preprocess rpc and a required input for RefreshTablesStats and Train. */
      dataType?: XPSDataType;
      /** The display name of the column. It's outputed in Preprocess and a required input for RefreshTablesStats and Train. */
      displayName?: string;
      forecastingMetadata?: XPSColumnSpecForecastingMetadata;
      /** It's outputed in RefreshTablesStats, and a required input in Train. */
      topCorrelatedColumns?: XPSColumnSpecCorrelatedColumn[];
    }
    interface XPSColumnSpecCorrelatedColumn {
      columnId?: number;
      correlationStats?: XPSCorrelationStats;
    }
    interface XPSColumnSpecForecastingMetadata {
      /** The type of the column for FORECASTING model training purposes. */
      columnType?: string;
    }
    interface XPSCommonStats {
      distinctValueCount?: string;
      nullValueCount?: string;
      validValueCount?: string;
    }
    interface XPSConfidenceMetricsEntry {
      /** Metrics are computed with an assumption that the model never return predictions with score lower than this value. */
      confidenceThreshold?: number;
      /** The harmonic mean of recall and precision. */
      f1Score?: number;
      /** The harmonic mean of recall_at1 and precision_at1. */
      f1ScoreAt1?: number;
      /** The number of ground truth labels that are not matched by a model created label. */
      falseNegativeCount?: string;
      /** The number of model created labels that do not match a ground truth label. */
      falsePositiveCount?: string;
      /** False Positive Rate for the given confidence threshold. */
      falsePositiveRate?: number;
      /** The False Positive Rate when only considering the label that has the highest prediction score and not below the confidence threshold for each example. */
      falsePositiveRateAt1?: number;
      /** Metrics are computed with an assumption that the model always returns at most this many predictions (ordered by their score, descendingly), but they all still need to meet the confidence_threshold. */
      positionThreshold?: number;
      /** Precision for the given confidence threshold. */
      precision?: number;
      /** The precision when only considering the label that has the highest prediction score and not below the confidence threshold for each example. */
      precisionAt1?: number;
      /** Recall (true positive rate) for the given confidence threshold. */
      recall?: number;
      /** The recall (true positive rate) when only considering the label that has the highest prediction score and not below the confidence threshold for each example. */
      recallAt1?: number;
      /** The number of labels that were not created by the model, but if they would, they would not match a ground truth label. */
      trueNegativeCount?: string;
      /** The number of model created labels that match a ground truth label. */
      truePositiveCount?: string;
    }
    interface XPSConfusionMatrix {
      /** For the following three repeated fields, only one is intended to be set. annotation_spec_id_token is preferable to be set. ID tokens of the annotation specs used in the confusion matrix. */
      annotationSpecIdToken?: string[];
      /** Category (mainly for segmentation). Set only for image segmentation models. Note: uCAIP Image Segmentation should use annotation_spec_id_token. */
      category?: number[];
      /** Rows in the confusion matrix. The number of rows is equal to the size of `annotation_spec_id_token`. `row[i].value[j]` is the number of examples that have ground truth of the `annotation_spec_id_token[i]` and are predicted as `annotation_spec_id_token[j]` by the model being evaluated. */
      row?: XPSConfusionMatrixRow[];
      /** Sentiment labels used in the confusion matrix. Set only for text sentiment models. For AutoML Text Revamp, use `annotation_spec_id_token` instead and leave this field empty. */
      sentimentLabel?: number[];
    }
    interface XPSConfusionMatrixRow {
      /** Same as above except intended to represent other counts (for e.g. for segmentation this is pixel count). NOTE(params): Only example_count or count is set (oneoff does not support repeated fields unless they are embedded inside another message). */
      count?: string[];
      /** Value of the specific cell in the confusion matrix. The number of values each row has (i.e. the length of the row) is equal to the length of the annotation_spec_id_token field. */
      exampleCount?: number[];
    }
    interface XPSCoreMlFormat {}
    interface XPSCorrelationStats {
      /** The correlation value using the Cramer's V measure. */
      cramersV?: number;
    }
    interface XPSDataErrors {
      /** Number of records having errors associated with the enum. */
      count?: number;
      /** Type of the error. */
      errorType?: string;
    }
    interface XPSDataStats {
      /** The statistics for ARRAY DataType. */
      arrayStats?: XPSArrayStats;
      /** The statistics for CATEGORY DataType. */
      categoryStats?: XPSCategoryStats;
      /** The number of distinct values. */
      distinctValueCount?: string;
      /** The statistics for FLOAT64 DataType. */
      float64Stats?: XPSFloat64Stats;
      /** The number of values that are null. */
      nullValueCount?: string;
      /** The statistics for STRING DataType. */
      stringStats?: XPSStringStats;
      /** The statistics for STRUCT DataType. */
      structStats?: XPSStructStats;
      /** The statistics for TIMESTAMP DataType. */
      timestampStats?: XPSTimestampStats;
      /** The number of values that are valid. */
      validValueCount?: string;
    }
    interface XPSDataType {
      /** The highly compatible data types to this data type. */
      compatibleDataTypes?: XPSDataType[];
      /** If type_code == ARRAY, then `list_element_type` is the type of the elements. */
      listElementType?: XPSDataType;
      /** If true, this DataType can also be `null`. */
      nullable?: boolean;
      /** If type_code == STRUCT, then `struct_type` provides type information for the struct's fields. */
      structType?: XPSStructType;
      /** If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must be written in `strftime` syntax. If time_format is not set, then the default format as described on the field is used. */
      timeFormat?: string;
      /** Required. The TypeCode for this type. */
      typeCode?: string;
    }
    interface XPSDockerFormat {
      /** Optional. Additional cpu information describing the requirements for the to be exported model files. */
      cpuArchitecture?: string;
      /** Optional. Additional gpu information describing the requirements for the to be exported model files. */
      gpuArchitecture?: string;
    }
    interface XPSEdgeTpuTfLiteFormat {}
    interface XPSEvaluationMetrics {
      /** The annotation_spec for which this evaluation metrics instance had been created. Empty iff this is an overall model evaluation (like Tables evaluation metrics), i.e. aggregated across all labels. The value comes from the input annotations in AnnotatedExample. For MVP product or for text sentiment models where annotation_spec_id_token is not available, set label instead. */
      annotationSpecIdToken?: string;
      /** The integer category label for which this evaluation metric instance had been created. Valid categories are 0 or higher. Overall model evaluation should set this to negative values (rather than implicit zero). Only used for Image Segmentation (prefer to set annotation_spec_id_token instead). Note: uCAIP Image Segmentation should use annotation_spec_id_token. */
      category?: number;
      /** The number of examples used to create this evaluation metrics instance. */
      evaluatedExampleCount?: number;
      imageClassificationEvalMetrics?: XPSClassificationEvaluationMetrics;
      imageObjectDetectionEvalMetrics?: XPSImageObjectDetectionEvaluationMetrics;
      imageSegmentationEvalMetrics?: XPSImageSegmentationEvaluationMetrics;
      /** The label for which this evaluation metrics instance had been created. Empty iff this is an overall model evaluation (like Tables evaluation metrics), i.e. aggregated across all labels. The label maps to AnnotationSpec.display_name in Public API protos. Only used by MVP implementation and text sentiment FULL implementation. */
      label?: string;
      regressionEvalMetrics?: XPSRegressionEvaluationMetrics;
      tablesClassificationEvalMetrics?: XPSClassificationEvaluationMetrics;
      tablesEvalMetrics?: XPSTablesEvaluationMetrics;
      textClassificationEvalMetrics?: XPSClassificationEvaluationMetrics;
      textExtractionEvalMetrics?: XPSTextExtractionEvaluationMetrics;
      textSentimentEvalMetrics?: XPSTextSentimentEvaluationMetrics;
      translationEvalMetrics?: XPSTranslationEvaluationMetrics;
      videoActionRecognitionEvalMetrics?: XPSVideoActionRecognitionEvaluationMetrics;
      videoClassificationEvalMetrics?: XPSClassificationEvaluationMetrics;
      videoObjectTrackingEvalMetrics?: XPSVideoObjectTrackingEvaluationMetrics;
    }
    interface XPSEvaluationMetricsSet {
      /** Inline EvaluationMetrics - should be relatively small. For passing large quantities of exhaustive metrics, use file_spec. */
      evaluationMetrics?: XPSEvaluationMetrics[];
      /** File spec containing evaluation metrics of a model, must point to RecordIO file(s) of intelligence.cloud.automl.xps.EvaluationMetrics messages. */
      fileSpec?: XPSFileSpec;
      /** Number of the evaluation metrics (usually one per label plus overall). */
      numEvaluationMetrics?: string;
    }
    interface XPSExampleSet {
      /** File spec of the examples or input sources. */
      fileSpec?: XPSFileSpec;
      /** Fingerprint of the example set. */
      fingerprint?: string;
      /** Number of examples. */
      numExamples?: string;
      /** Number of input sources. */
      numInputSources?: string;
    }
    interface XPSExportModelOutputConfig {
      coreMlFormat?: any;
      dockerFormat?: XPSDockerFormat;
      edgeTpuTfLiteFormat?: any;
      /** For any model and format: If true, will additionally export FirebaseExportedModelInfo in a firebase.txt file. */
      exportFirebaseAuxiliaryInfo?: boolean;
      /** The Google Contained Registry path the exported files to be pushed to. This location is set if the exported format is DOCKDER. */
      outputGcrUri?: string;
      /** The Google Cloud Storage directory where XPS will output the exported models and related files. Format: gs://bucket/directory */
      outputGcsUri?: string;
      tfJsFormat?: any;
      tfLiteFormat?: any;
      tfSavedModelFormat?: any;
    }
    interface XPSFileSpec {
      /** Deprecated. Use file_spec. */
      directoryPath?: string;
      fileFormat?: string;
      /** Single file path, or file pattern of format "/path/to/file@shard_count". E.g. /cns/cell-d/somewhere/file@2 is expanded to two files: /cns/cell-d/somewhere/file-00000-of-00002 and /cns/cell-d/somewhere/file-00001-of-00002. */
      fileSpec?: string;
      /** Deprecated. Use file_spec. */
      singleFilePath?: string;
    }
    interface XPSFloat64Stats {
      commonStats?: XPSCommonStats;
      /** Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `"-Infinity"`, and max of the last one being `"Infinity"`. */
      histogramBuckets?: XPSFloat64StatsHistogramBucket[];
      /** The mean of the series. */
      mean?: number;
      /** Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values. */
      quantiles?: number[];
      /** The standard deviation of the series. */
      standardDeviation?: number;
    }
    interface XPSFloat64StatsHistogramBucket {
      /** The number of data values that are in the bucket, i.e. are between min and max values. */
      count?: string;
      /** The maximum value of the bucket, exclusive unless max = `"Infinity"`, in which case it's inclusive. */
      max?: number;
      /** The minimum value of the bucket, inclusive. */
      min?: number;
    }
    interface XPSImageClassificationTrainResponse {
      /** Total number of classes. */
      classCount?: string;
      /** Information of downloadable models that are pre-generated as part of training flow and will be persisted in AutoMl backend. Populated for AutoMl requests. */
      exportModelSpec?: XPSImageExportModelSpec;
      /** ## The fields below are only populated under uCAIP request scope. */
      modelArtifactSpec?: XPSImageModelArtifactSpec;
      modelServingSpec?: XPSImageModelServingSpec;
      /** Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED', 'MODEL_EARLY_STOPPED'. */
      stopReason?: string;
      /** The actual cost to create this model. - For edge type model, the cost is expressed in node hour. - For cloud type model,the cost is expressed in compute hour. - Populated for models created before GA. To be deprecated after GA. */
      trainCostInNodeTime?: string;
      /** The actual training cost, expressed in node seconds. Populated for models trained in node time. */
      trainCostNodeSeconds?: string;
    }
    interface XPSImageExportModelSpec {
      /** Contains the model format and internal location of the model files to be exported/downloaded. Use the Google Cloud Storage bucket name which is provided via TrainRequest.gcs_bucket_name to store the model files. */
      exportModelOutputConfig?: XPSExportModelOutputConfig[];
    }
    interface XPSImageModelArtifactSpec {
      /** The Tensorflow checkpoint files. e.g. Used for resumable training. */
      checkpointArtifact?: XPSModelArtifactItem;
      /** The model binary files in different formats for model export. */
      exportArtifact?: XPSModelArtifactItem[];
      /** Google Cloud Storage URI of decoded labels file for model export 'dict.txt'. */
      labelGcsUri?: string;
      /** The default model binary file used for serving (e.g. online predict, batch predict) via public Cloud AI Platform API. */
      servingArtifact?: XPSModelArtifactItem;
      /** Google Cloud Storage URI prefix of Tensorflow JavaScript binary files 'groupX-shardXofX.bin'. Deprecated. */
      tfJsBinaryGcsPrefix?: string;
      /** Google Cloud Storage URI of Tensorflow Lite metadata 'tflite_metadata.json'. */
      tfLiteMetadataGcsUri?: string;
    }
    interface XPSImageModelServingSpec {
      /** Populate under uCAIP request scope. */
      modelThroughputEstimation?: XPSImageModelServingSpecModelThroughputEstimation[];
      /** An estimated value of how much traffic a node can serve. Populated for AutoMl request only. */
      nodeQps?: number;
      /** ## The fields below are only populated under uCAIP request scope. https://cloud.google.com/ml-engine/docs/runtime-version-list */
      tfRuntimeVersion?: string;
    }
    interface XPSImageModelServingSpecModelThroughputEstimation {
      computeEngineAcceleratorType?: string;
      /** Estimated latency. */
      latencyInMilliseconds?: number;
      /** The approximate qps a deployed node can serve. */
      nodeQps?: number;
      servomaticPartitionType?: string;
    }
    interface XPSImageObjectDetectionEvaluationMetrics {
      /** The single metric for bounding boxes evaluation: the mean_average_precision averaged over all bounding_box_metrics_entries. */
      boundingBoxMeanAveragePrecision?: number;
      /** The bounding boxes match metrics for each Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and each label confidence threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 pair. */
      boundingBoxMetricsEntries?: XPSBoundingBoxMetricsEntry[];
      /** The total number of bounding boxes (i.e. summed over all images) the ground truth used to create this evaluation had. */
      evaluatedBoundingBoxCount?: number;
    }
    interface XPSImageObjectDetectionModelSpec {
      /** Total number of classes. */
      classCount?: string;
      exportModelSpec?: XPSImageExportModelSpec;
      /** Max number of bounding box. */
      maxBoundingBoxCount?: string;
      /** ## The fields below are only populated under uCAIP request scope. */
      modelArtifactSpec?: XPSImageModelArtifactSpec;
      modelServingSpec?: XPSImageModelServingSpec;
      /** Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED'. */
      stopReason?: string;
      /** The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour. */
      trainCostNodeSeconds?: string;
    }
    interface XPSImageSegmentationEvaluationMetrics {
      /** Metrics that have confidence thresholds. Precision-recall curve can be derived from it. */
      confidenceMetricsEntries?: XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry[];
    }
    interface XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry {
      /** The confidence threshold value used to compute the metrics. */
      confidenceThreshold?: number;
      /** Confusion matrix of the per confidence_threshold evaluation. Pixel counts are set here. Only set for model level evaluation, not for evaluation per label. */
      confusionMatrix?: XPSConfusionMatrix;
      /** DSC or the F1 score: The harmonic mean of recall and precision. */
      diceScoreCoefficient?: number;
      /** IOU score. */
      iouScore?: number;
      /** Precision for the given confidence threshold. */
      precision?: number;
      /** Recall for the given confidence threshold. */
      recall?: number;
    }
    interface XPSImageSegmentationTrainResponse {
      /** Color map of the model. */
      colorMaps?: XPSColorMap[];
      /** NOTE: These fields are not used/needed in EAP but will be set later. */
      exportModelSpec?: XPSImageExportModelSpec;
      /** ## The fields below are only populated under uCAIP request scope. Model artifact spec stores and model gcs pathes and related metadata */
      modelArtifactSpec?: XPSImageModelArtifactSpec;
      modelServingSpec?: XPSImageModelServingSpec;
      /** Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED', 'MODEL_CONVERGED'. */
      stopReason?: string;
      /** The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour. */
      trainCostNodeSeconds?: string;
    }
    interface XPSIntegratedGradientsAttribution {
      /** The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is within the desired error range. Valid range of its value is [1, 100], inclusively. */
      stepCount?: number;
    }
    interface XPSMetricEntry {
      /** For billing metrics that are using legacy sku's, set the legacy billing metric id here. This will be sent to Chemist as the "cloudbilling.googleapis.com/argentum_metric_id" label. Otherwise leave empty. */
      argentumMetricId?: string;
      /** A double value. */
      doubleValue?: number;
      /** A signed 64-bit integer value. */
      int64Value?: string;
      /** The metric name defined in the service configuration. */
      metricName?: string;
      /** Billing system labels for this (metric, value) pair. */
      systemLabels?: XPSMetricEntryLabel[];
    }
    interface XPSMetricEntryLabel {
      /** The name of the label. */
      labelName?: string;
      /** The value of the label. */
      labelValue?: string;
    }
    interface XPSModelArtifactItem {
      /** The model artifact format. */
      artifactFormat?: string;
      /** The Google Cloud Storage URI that stores the model binary files. */
      gcsUri?: string;
    }
    interface XPSPreprocessResponse {
      /** Preprocessed examples, that are to be imported into AutoML storage. This should point to RecordIO file(s) of PreprocessedExample messages. The PreprocessedExample.mvp_training_data-s returned here are later verbatim passed to Train() call in TrainExample.mvp_training_data. */
      outputExampleSet?: XPSExampleSet;
      speechPreprocessResp?: XPSSpeechPreprocessResponse;
      tablesPreprocessResponse?: XPSTablesPreprocessResponse;
      translationPreprocessResp?: XPSTranslationPreprocessResponse;
    }
    interface XPSRegressionEvaluationMetrics {
      /** Mean Absolute Error (MAE). */
      meanAbsoluteError?: number;
      /** Mean absolute percentage error. Only set if all ground truth values are positive. */
      meanAbsolutePercentageError?: number;
      /** A list of actual versus predicted points for the model being evaluated. */
      regressionMetricsEntries?: XPSRegressionMetricsEntry[];
      /** Root Mean Squared Error (RMSE). */
      rootMeanSquaredError?: number;
      /** Root mean squared log error. */
      rootMeanSquaredLogError?: number;
      /** R squared. */
      rSquared?: number;
    }
    interface XPSRegressionMetricsEntry {
      /** The observed value for a row in the dataset. */
      predictedValue?: number;
      /** The actual target value for a row in the dataset. */
      trueValue?: number;
    }
    interface XPSReportingMetrics {
      /** The effective time training used. If set, this is used for quota management and billing. Deprecated. AutoML BE doesn't use this. Don't set. */
      effectiveTrainingDuration?: string;
      /** One entry per metric name. The values must be aggregated per metric name. */
      metricEntries?: XPSMetricEntry[];
    }
    interface XPSResponseExplanationMetadata {
      /** Metadata of the input. */
      inputs?: {[P in string]: XPSResponseExplanationMetadataInputMetadata};
      /** Metadata of the output. */
      outputs?: {[P in string]: XPSResponseExplanationMetadataOutputMetadata};
    }
    interface XPSResponseExplanationMetadataInputMetadata {
      /** Name of the input tensor for this model. Only needed in train response. */
      inputTensorName?: string;
      /** Modality of the feature. Valid values are: numeric, image. Defaults to numeric. */
      modality?: string;
      /** Visualization configurations for image explanation. */
      visualizationConfig?: XPSVisualization;
    }
    interface XPSResponseExplanationMetadataOutputMetadata {
      /** Name of the output tensor. Only needed in train response. */
      outputTensorName?: string;
    }
    interface XPSResponseExplanationParameters {
      /** An attribution method that computes Aumann-Shapley values taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365 */
      integratedGradientsAttribution?: XPSIntegratedGradientsAttribution;
      /** An attribution method that redistributes Integrated Gradients attribution to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 XRAI currently performs better on natural images, like a picture of a house or an animal. If the images are taken in artificial environments, like a lab or manufacturing line, or from diagnostic equipment, like x-rays or quality-control cameras, use Integrated Gradients instead. */
      xraiAttribution?: XPSXraiAttribution;
    }
    interface XPSResponseExplanationSpec {
      /** Explanation type. For AutoML Image Classification models, possible values are: * `image-integrated-gradients` * `image-xrai` */
      explanationType?: string;
      /** Metadata describing the Model's input and output for explanation. */
      metadata?: XPSResponseExplanationMetadata;
      /** Parameters that configure explaining of the Model's predictions. */
      parameters?: XPSResponseExplanationParameters;
    }
    interface XPSRow {
      /** The ids of the columns. Note: The below `values` field must match order of this field, if this field is set. */
      columnIds?: number[];
      /** The values of the row cells, given in the same order as the column_ids. If column_ids is not set, then in the same order as the input_feature_column_ids in TablesModelMetadata. */
      values?: any[];
    }
    interface XPSSpeechEvaluationMetrics {
      /** Evaluation metrics for all submodels contained in this model. */
      subModelEvaluationMetrics?: XPSSpeechEvaluationMetricsSubModelEvaluationMetric[];
    }
    interface XPSSpeechEvaluationMetricsSubModelEvaluationMetric {
      /** Type of the biasing model. */
      biasingModelType?: string;
      /** If true then it means we have an enhanced version of the biasing models. */
      isEnhancedModel?: boolean;
      numDeletions?: number;
      numInsertions?: number;
      numSubstitutions?: number;
      /** Number of utterances used in the wer computation. */
      numUtterances?: number;
      /** Number of words over which the word error rate was computed. */
      numWords?: number;
      /** Below fields are used for debugging purposes */
      sentenceAccuracy?: number;
      /** Word error rate (standard error metric used for speech recognition). */
      wer?: number;
    }
    interface XPSSpeechModelSpec {
      /** Required for speech xps backend. Speech xps has to use dataset_id and model_id as the primary key in db so that speech API can query the db directly. */
      datasetId?: string;
      language?: string;
      /** Model specs for all submodels contained in this model. */
      subModelSpecs?: XPSSpeechModelSpecSubModelSpec[];
    }
    interface XPSSpeechModelSpecSubModelSpec {
      /** Type of the biasing model. */
      biasingModelType?: string;
      /** In S3, Recognition ClientContextId.client_id */
      clientId?: string;
      /** In S3, Recognition ClientContextId.context_id */
      contextId?: string;
      /** If true then it means we have an enhanced version of the biasing models. */
      isEnhancedModel?: boolean;
    }
    interface XPSSpeechPreprocessResponse {
      /** Location od shards of sstables (test data) of DataUtterance protos. */
      cnsTestDataPath?: string;
      /** Location of shards of sstables (training data) of DataUtterance protos. */
      cnsTrainDataPath?: string;
      /** The metrics for prebuilt speech models. They are included here because there is no prebuilt speech models stored in the AutoML. */
      prebuiltModelEvaluationMetrics?: XPSSpeechEvaluationMetrics;
      /** Stats associated with the data. */
      speechPreprocessStats?: XPSSpeechPreprocessStats;
    }
    interface XPSSpeechPreprocessStats {
      /** Different types of data errors and the counts associated with them. */
      dataErrors?: XPSDataErrors[];
      /** The number of rows marked HUMAN_LABELLED */
      numHumanLabeledExamples?: number;
      /** The number of samples found in the previously recorded logs data. */
      numLogsExamples?: number;
      /** The number of rows marked as MACHINE_TRANSCRIBED */
      numMachineTranscribedExamples?: number;
      /** The number of examples labelled as TEST by Speech xps server. */
      testExamplesCount?: number;
      /** The number of sentences in the test data set. */
      testSentencesCount?: number;
      /** The number of words in the test data set. */
      testWordsCount?: number;
      /** The number of examples labeled as TRAIN by Speech xps server. */
      trainExamplesCount?: number;
      /** The number of sentences in the training data set. */
      trainSentencesCount?: number;
      /** The number of words in the training data set. */
      trainWordsCount?: number;
    }
    interface XPSStringStats {
      commonStats?: XPSCommonStats;
      /** The statistics of the top 20 unigrams, ordered by StringStats.UnigramStats.count. */
      topUnigramStats?: XPSStringStatsUnigramStats[];
    }
    interface XPSStringStatsUnigramStats {
      /** The number of occurrences of this unigram in the series. */
      count?: string;
      /** The unigram. */
      value?: string;
    }
    interface XPSStructStats {
      commonStats?: XPSCommonStats;
      /** Map from a field name of the struct to data stats aggregated over series of all data in that field across all the structs. */
      fieldStats?: {[P in string]: XPSDataStats};
    }
    interface XPSStructType {
      /** Unordered map of struct field names to their data types. */
      fields?: {[P in string]: XPSDataType};
    }
    interface XPSTablesClassificationMetrics {
      /** Metrics building a curve. */
      curveMetrics?: XPSTablesClassificationMetricsCurveMetrics[];
    }
    interface XPSTablesClassificationMetricsCurveMetrics {
      /** The area under the precision-recall curve. */
      aucPr?: number;
      /** The area under receiver operating characteristic curve. */
      aucRoc?: number;
      /** Metrics that have confidence thresholds. Precision-recall curve and ROC curve can be derived from them. */
      confidenceMetricsEntries?: XPSTablesConfidenceMetricsEntry[];
      /** The Log loss metric. */
      logLoss?: number;
      /** The position threshold value used to compute the metrics. */
      positionThreshold?: number;
      /** The CATEGORY row value (for ARRAY unnested) the curve metrics are for. */
      value?: string;
    }
    interface XPSTablesConfidenceMetricsEntry {
      /** The confidence threshold value used to compute the metrics. */
      confidenceThreshold?: number;
      /** The harmonic mean of recall and precision. (2 * precision * recall) / (precision + recall) */
      f1Score?: number;
      /** False negative count. */
      falseNegativeCount?: string;
      /** False positive count. */
      falsePositiveCount?: string;
      /** FPR = #false positives / (#false positives + #true negatives) */
      falsePositiveRate?: number;
      /** Precision = #true positives / (#true positives + #false positives). */
      precision?: number;
      /** Recall = #true positives / (#true positives + #false negatives). */
      recall?: number;
      /** True negative count. */
      trueNegativeCount?: string;
      /** True positive count. */
      truePositiveCount?: string;
      /** TPR = #true positives / (#true positives + #false negatvies) */
      truePositiveRate?: number;
    }
    interface XPSTablesDatasetMetadata {
      /** Id the column to split the table. */
      mlUseColumnId?: number;
      /** Primary table. */
      primaryTableSpec?: XPSTableSpec;
      /** (the column id : its CorrelationStats with target column). */
      targetColumnCorrelations?: {[P in string]: XPSCorrelationStats};
      /** Id of the primary table column that should be used as the training label. */
      targetColumnId?: number;
      /** Id of the primary table column that should be used as the weight column. */
      weightColumnId?: number;
    }
    interface XPSTablesEvaluationMetrics {
      /** Classification metrics. */
      classificationMetrics?: XPSTablesClassificationMetrics;
      /** Regression metrics. */
      regressionMetrics?: XPSTablesRegressionMetrics;
    }
    interface XPSTablesModelColumnInfo {
      /** The ID of the column. */
      columnId?: number;
      /** When given as part of a Model: Measurement of how much model predictions correctness on the TEST data depend on values in this column. A value between 0 and 1, higher means higher influence. These values are normalized - for all input feature columns of a given model they add to 1. When given back by Predict or Batch Predict: Measurement of how impactful for the prediction returned for the given row the value in this column was. Specifically, the feature importance specifies the marginal contribution that the feature made to the prediction score compared to the baseline score. These values are computed using the Sampled Shapley method. */
      featureImportance?: number;
    }
    interface XPSTablesModelStructure {
      /** A list of models. */
      modelParameters?: XPSTablesModelStructureModelParameters[];
    }
    interface XPSTablesModelStructureModelParameters {
      hyperparameters?: XPSTablesModelStructureModelParametersParameter[];
    }
    interface XPSTablesModelStructureModelParametersParameter {
      /** Float type parameter value. */
      floatValue?: number;
      /** Integer type parameter value. */
      intValue?: string;
      /** Parameter name. */
      name?: string;
      /** String type parameter value. */
      stringValue?: string;
    }
    interface XPSTableSpec {
      /** Mapping from column id to column spec. */
      columnSpecs?: {[P in string]: XPSColumnSpec};
      /** The total size of imported data of the table. */
      importedDataSizeInBytes?: string;
      /** The number of rows in the table. */
      rowCount?: string;
      /** The id of the time column. */
      timeColumnId?: number;
      /** The number of valid rows. */
      validRowCount?: string;
    }
    interface XPSTablesPreprocessResponse {
      /** The table/column id, column_name and the DataTypes of the columns will be populated. */
      tablesDatasetMetadata?: XPSTablesDatasetMetadata;
    }
    interface XPSTablesRegressionMetrics {
      /** Mean absolute error. */
      meanAbsoluteError?: number;
      /** Mean absolute percentage error, only set if all of the target column's values are positive. */
      meanAbsolutePercentageError?: number;
      /** A list of actual versus predicted points for the model being evaluated. */
      regressionMetricsEntries?: XPSRegressionMetricsEntry[];
      /** Root mean squared error. */
      rootMeanSquaredError?: number;
      /** Root mean squared log error. */
      rootMeanSquaredLogError?: number;
      /** R squared. */
      rSquared?: number;
    }
    interface XPSTablesTrainingOperationMetadata {
      /** Current stage of creating model. */
      createModelStage?: string;
      /** The optimization objective for model. */
      optimizationObjective?: string;
      /** This field is for training. When the operation is terminated successfully, AutoML Backend post this field to operation metadata in spanner. If the metadata has no trials returned, the training operation is supposed to be a failure. */
      topTrials?: XPSTuningTrial[];
      /** Creating model budget. */
      trainBudgetMilliNodeHours?: string;
      /** This field records the training objective value with respect to time, giving insight into how the model architecture search is performing as training time elapses. */
      trainingObjectivePoints?: XPSTrainingObjectivePoint[];
      /** Timestamp when training process starts. */
      trainingStartTime?: string;
    }
    interface XPSTablesTrainResponse {
      modelStructure?: XPSTablesModelStructure;
      /** Sample rows from the dataset this model was trained. */
      predictionSampleRows?: XPSRow[];
      /** Output only. Auxiliary information for each of the input_feature_column_specs, with respect to this particular model. */
      tablesModelColumnInfo?: XPSTablesModelColumnInfo[];
      /** The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget. */
      trainCostMilliNodeHours?: string;
    }
    interface XPSTextComponentModel {
      /** The Cloud Storage resource path to hold batch prediction model. */
      batchPredictionModelGcsUri?: string;
      /** The Cloud Storage resource path to hold online prediction model. */
      onlinePredictionModelGcsUri?: string;
      /** The partition where the model is deployed. Populated by uCAIP BE as part of online PredictRequest. */
      partition?: string;
      /** The default model binary file used for serving (e.g. online predict, batch predict) via public Cloud Ai Platform API. */
      servingArtifact?: XPSModelArtifactItem;
      /** The name of servo model. Populated by uCAIP BE as part of online PredictRequest. */
      servoModelName?: string;
      /** The name of the trained NL submodel. */
      submodelName?: string;
      /** The type of trained NL submodel */
      submodelType?: string;
      /** ## The fields below are only populated under uCAIP request scope. https://cloud.google.com/ml-engine/docs/runtime-version-list */
      tfRuntimeVersion?: string;
      /** The servomatic model version number. Populated by uCAIP BE as part of online PredictRequest. */
      versionNumber?: string;
    }
    interface XPSTextExtractionEvaluationMetrics {
      /** Values are at the highest F1 score on the precision-recall curve. Only confidence_threshold, recall, precision, and f1_score will be set. */
      bestF1ConfidenceMetrics?: XPSConfidenceMetricsEntry;
      /** If the enclosing EvaluationMetrics.label is empty, confidence_metrics_entries is an evaluation of the entire model across all labels. If the enclosing EvaluationMetrics.label is set, confidence_metrics_entries applies to that label. */
      confidenceMetricsEntries?: XPSConfidenceMetricsEntry[];
      /** Confusion matrix of the model, at the default confidence threshold (0.0). Only set for whole-model evaluation, not for evaluation per label. */
      confusionMatrix?: XPSConfusionMatrix;
      /** Only recall, precision, and f1_score will be set. */
      perLabelConfidenceMetrics?: {[P in string]: XPSConfidenceMetricsEntry};
    }
    interface XPSTextSentimentEvaluationMetrics {
      /** Output only. Confusion matrix of the evaluation. Only set for the overall model evaluation, not for evaluation of a single annotation spec. */
      confusionMatrix?: XPSConfusionMatrix;
      /** Output only. The harmonic mean of recall and precision. */
      f1Score?: number;
      /** Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec. */
      linearKappa?: number;
      /** Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec. */
      meanAbsoluteError?: number;
      /** Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec. */
      meanSquaredError?: number;
      /** Output only. Precision. */
      precision?: number;
      /** Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec. */
      quadraticKappa?: number;
      /** Output only. Recall. */
      recall?: number;
    }
    interface XPSTextToSpeechTrainResponse {}
    interface XPSTextTrainResponse {
      /** Component submodels. */
      componentModel?: XPSTextComponentModel[];
    }
    interface XPSTfJsFormat {}
    interface XPSTfLiteFormat {}
    interface XPSTfSavedModelFormat {}
    interface XPSTimestampStats {
      commonStats?: XPSCommonStats;
      /** The string key is the pre-defined granularity. Currently supported: hour_of_day, day_of_week, month_of_year. Granularities finer that the granularity of timestamp data are not populated (e.g. if timestamps are at day granularity, then hour_of_day is not populated). */
      granularStats?: {[P in string]: XPSTimestampStatsGranularStats};
      medianTimestampNanos?: string;
    }
    interface XPSTimestampStatsGranularStats {
      /** A map from granularity key to example count for that key. E.g. for hour_of_day `13` means 1pm, or for month_of_year `5` means May). */
      buckets?: {[P in string]: string};
    }
    interface XPSTrackMetricsEntry {
      /** Output only. Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. Precision-recall curve is derived from them. */
      confidenceMetricsEntries?: XPSTrackMetricsEntryConfidenceMetricsEntry[];
      /** Output only. The intersection-over-union threshold value between bounding boxes across frames used to compute this metric entry. */
      iouThreshold?: number;
      /** Output only. The mean bounding box iou over all confidence thresholds. */
      meanBoundingBoxIou?: number;
      /** Output only. The mean mismatch rate over all confidence thresholds. */
      meanMismatchRate?: number;
      /** Output only. The mean average precision over all confidence thresholds. */
      meanTrackingAveragePrecision?: number;
    }
    interface XPSTrackMetricsEntryConfidenceMetricsEntry {
      /** Output only. Bounding box intersection-over-union precision. Measures how well the bounding boxes overlap between each other (e.g. complete overlap or just barely above iou_threshold). */
      boundingBoxIou?: number;
      /** Output only. The confidence threshold value used to compute the metrics. */
      confidenceThreshold?: number;
      /** Output only. Mismatch rate, which measures the tracking consistency, i.e. correctness of instance ID continuity. */
      mismatchRate?: number;
      /** Output only. Tracking precision. */
      trackingPrecision?: number;
      /** Output only. Tracking recall. */
      trackingRecall?: number;
    }
    interface XPSTrainingObjectivePoint {
      /** The time at which this point was recorded. */
      createTime?: string;
      /** The objective value when this point was recorded. */
      value?: number;
    }
    interface XPSTrainResponse {
      /** Estimated model size in bytes once deployed. */
      deployedModelSizeBytes?: string;
      /** Optional vision model error analysis configuration. The field is set when model error analysis is enabled in the training request. The results of error analysis will be binded together with evaluation results (in the format of AnnotatedExample). */
      errorAnalysisConfigs?: XPSVisionErrorAnalysisConfig[];
      /** Examples used to evaluate the model (usually the test set), with the predicted annotations. The file_spec should point to recordio file(s) of AnnotatedExample. For each returned example, the example_id_token and annotations predicted by the model must be set. The example payload can and is recommended to be omitted. */
      evaluatedExampleSet?: XPSExampleSet;
      /** The trained model evaluation metrics. This can be optionally returned. */
      evaluationMetricsSet?: XPSEvaluationMetricsSet;
      /** VisionExplanationConfig for XAI on test set. Optional for when XAI is enable in training request. */
      explanationConfigs?: XPSResponseExplanationSpec[];
      imageClassificationTrainResp?: XPSImageClassificationTrainResponse;
      imageObjectDetectionTrainResp?: XPSImageObjectDetectionModelSpec;
      imageSegmentationTrainResp?: XPSImageSegmentationTrainResponse;
      /** Token that represents the trained model. This is considered immutable and is persisted in AutoML. xPS can put their own proto in the byte string, to e.g. point to the model checkpoints. The token is passed to other xPS APIs to refer to the model. */
      modelToken?: string;
      speechTrainResp?: XPSSpeechModelSpec;
      tablesTrainResp?: XPSTablesTrainResponse;
      textToSpeechTrainResp?: any;
      /** Will only be needed for uCAIP from Beta. */
      textTrainResp?: XPSTextTrainResponse;
      translationTrainResp?: XPSTranslationTrainResponse;
      videoActionRecognitionTrainResp?: XPSVideoActionRecognitionTrainResponse;
      videoClassificationTrainResp?: XPSVideoClassificationTrainResponse;
      videoObjectTrackingTrainResp?: XPSVideoObjectTrackingTrainResponse;
    }
    interface XPSTranslationEvaluationMetrics {
      /** BLEU score for base model. */
      baseBleuScore?: number;
      /** BLEU score. */
      bleuScore?: number;
    }
    interface XPSTranslationPreprocessResponse {
      /** Total example count parsed. */
      parsedExampleCount?: string;
      /** Total valid example count. */
      validExampleCount?: string;
    }
    interface XPSTranslationTrainResponse {
      /** Type of the model. */
      modelType?: string;
    }
    interface XPSTuningTrial {
      /** Model parameters for the trial. */
      modelStructure?: XPSTablesModelStructure;
      /** The optimization objective evaluation of the eval split data. */
      trainingObjectivePoint?: XPSTrainingObjectivePoint;
    }
    interface XPSVideoActionMetricsEntry {
      /** Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. */
      confidenceMetricsEntries?: XPSVideoActionMetricsEntryConfidenceMetricsEntry[];
      /** The mean average precision. */
      meanAveragePrecision?: number;
      /** This VideoActionMetricsEntry is calculated based on this prediction window length. If the predicted action's timestamp is inside the time window whose center is the ground truth action's timestamp with this specific length, the prediction result is treated as a true positive. */
      precisionWindowLength?: string;
    }
    interface XPSVideoActionMetricsEntryConfidenceMetricsEntry {
      /** Output only. The confidence threshold value used to compute the metrics. */
      confidenceThreshold?: number;
      /** Output only. The harmonic mean of recall and precision. */
      f1Score?: number;
      /** Output only. Precision for the given confidence threshold. */
      precision?: number;
      /** Output only. Recall for the given confidence threshold. */
      recall?: number;
    }
    interface XPSVideoActionRecognitionEvaluationMetrics {
      /** Output only. The number of ground truth actions used to create this evaluation. */
      evaluatedActionCount?: number;
      /** Output only. The metric entries for precision window lengths: 1s,2s,3s,4s, 5s. */
      videoActionMetricsEntries?: XPSVideoActionMetricsEntry[];
    }
    interface XPSVideoActionRecognitionTrainResponse {
      /** ## The fields below are only populated under uCAIP request scope. */
      modelArtifactSpec?: XPSVideoModelArtifactSpec;
      /** The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour. */
      trainCostNodeSeconds?: string;
    }
    interface XPSVideoBatchPredictOperationMetadata {
      /** All the partial batch prediction results that are completed at the moment. Output examples are sorted by completion time. The order will not be changed. Each output example should be the path of a single RecordIO file of AnnotatedExamples. */
      outputExamples?: string[];
    }
    interface XPSVideoClassificationTrainResponse {
      /** ## The fields below are only populated under uCAIP request scope. */
      modelArtifactSpec?: XPSVideoModelArtifactSpec;
      /** The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour. */
      trainCostNodeSeconds?: string;
    }
    interface XPSVideoExportModelSpec {
      /** Contains the model format and internal location of the model files to be exported/downloaded. Use the Google Cloud Storage bucket name which is provided via TrainRequest.gcs_bucket_name to store the model files. */
      exportModelOutputConfig?: XPSExportModelOutputConfig[];
    }
    interface XPSVideoModelArtifactSpec {
      /** The model binary files in different formats for model export. */
      exportArtifact?: XPSModelArtifactItem[];
      /** The default model binary file used for serving (e.g. batch predict) via public Cloud AI Platform API. */
      servingArtifact?: XPSModelArtifactItem;
    }
    interface XPSVideoObjectTrackingEvaluationMetrics {
      /** Output only. The single metric for bounding boxes evaluation: the mean_average_precision averaged over all bounding_box_metrics_entries. */
      boundingBoxMeanAveragePrecision?: number;
      /** Output only. The bounding boxes match metrics for each Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. */
      boundingBoxMetricsEntries?: XPSBoundingBoxMetricsEntry[];
      /** The number of bounding boxes used for model evaluation. */
      evaluatedBoundingboxCount?: number;
      /** The number of video frames used for model evaluation. */
      evaluatedFrameCount?: number;
      /** The number of tracks used for model evaluation. */
      evaluatedTrackCount?: number;
      /** Output only. The single metric for tracks accuracy evaluation: the mean_average_precision averaged over all track_metrics_entries. */
      trackMeanAveragePrecision?: number;
      /** Output only. The single metric for tracks bounding box iou evaluation: the mean_bounding_box_iou averaged over all track_metrics_entries. */
      trackMeanBoundingBoxIou?: number;
      /** Output only. The single metric for tracking consistency evaluation: the mean_mismatch_rate averaged over all track_metrics_entries. */
      trackMeanMismatchRate?: number;
      /** Output only. The tracks match metrics for each Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. */
      trackMetricsEntries?: XPSTrackMetricsEntry[];
    }
    interface XPSVideoObjectTrackingTrainResponse {
      /** Populated for AutoML request only. */
      exportModelSpec?: XPSVideoExportModelSpec;
      /** ## The fields below are only populated under uCAIP request scope. */
      modelArtifactSpec?: XPSVideoModelArtifactSpec;
      /** The actual train cost of creating this model, expressed in node seconds, i.e. 3,600 value in this field means 1 node hour. */
      trainCostNodeSeconds?: string;
    }
    interface XPSVideoTrainingOperationMetadata {
      /** This is an estimation of the node hours necessary for training a model, expressed in milli node hours (i.e. 1,000 value in this field means 1 node hour). A node hour represents the time a virtual machine spends running your training job. The cost of one node running for one hour is a node hour. */
      trainCostMilliNodeHour?: string;
    }
    interface XPSVisionErrorAnalysisConfig {
      /** The number of query examples in error analysis. */
      exampleCount?: number;
      /** The query type used in retrieval. The enum values are frozen in the foreseeable future. */
      queryType?: string;
    }
    interface XPSVisionTrainingOperationMetadata {
      /** Aggregated infra usage within certain time period, for billing report purpose if XAI is enable in training request. */
      explanationUsage?: InfraUsage;
    }
    interface XPSVisualization {
      /** Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62. */
      clipPercentLowerbound?: number;
      /** Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9. */
      clipPercentUpperbound?: number;
      /** The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue. */
      colorMap?: string;
      /** How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE. */
      overlayType?: string;
      /** Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE. */
      polarity?: string;
      /** Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES. */
      type?: string;
    }
    interface XPSXpsOperationMetadata {
      /** Optional. XPS server can opt to provide example count of the long running operation (e.g. training, data importing, batch prediction). */
      exampleCount?: string;
      /** Metrics for the operation. By the time the operation is terminated (whether succeeded or failed) as returned from XPS, AutoML BE assumes the metrics are finalized. AutoML BE transparently posts the metrics to Chemist if it's not empty, regardless of the response content or error type. If user is supposed to be charged in case of cancellation/error, this field should be set. In the case where the type of LRO doesn't require any billing, this field should be left unset. */
      reportingMetrics?: XPSReportingMetrics;
      tablesTrainingOperationMetadata?: XPSTablesTrainingOperationMetadata;
      videoBatchPredictOperationMetadata?: XPSVideoBatchPredictOperationMetadata;
      videoTrainingOperationMetadata?: XPSVideoTrainingOperationMetadata;
      visionTrainingOperationMetadata?: XPSVisionTrainingOperationMetadata;
    }
    interface XPSXraiAttribution {
      /** The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is met within the desired error range. Valid range of its value is [1, 100], inclusively. */
      stepCount?: number;
    }
    interface DocumentsResource {
      /** Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties. */
      analyzeEntities(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AnalyzeEntitiesRequest;
      }): Request<AnalyzeEntitiesResponse>;
      analyzeEntities(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AnalyzeEntitiesRequest,
      ): Request<AnalyzeEntitiesResponse>;
      /** Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions. */
      analyzeEntitySentiment(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AnalyzeEntitySentimentRequest;
      }): Request<AnalyzeEntitySentimentResponse>;
      analyzeEntitySentiment(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AnalyzeEntitySentimentRequest,
      ): Request<AnalyzeEntitySentimentResponse>;
      /** Analyzes the sentiment of the provided text. */
      analyzeSentiment(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AnalyzeSentimentRequest;
      }): Request<AnalyzeSentimentResponse>;
      analyzeSentiment(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AnalyzeSentimentRequest,
      ): Request<AnalyzeSentimentResponse>;
      /** Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties. */
      analyzeSyntax(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AnalyzeSyntaxRequest;
      }): Request<AnalyzeSyntaxResponse>;
      analyzeSyntax(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AnalyzeSyntaxRequest,
      ): Request<AnalyzeSyntaxResponse>;
      /** A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call. */
      annotateText(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AnnotateTextRequest;
      }): Request<AnnotateTextResponse>;
      annotateText(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AnnotateTextRequest,
      ): Request<AnnotateTextResponse>;
      /** Classifies a document into categories. */
      classifyText(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ClassifyTextRequest;
      }): Request<ClassifyTextResponse>;
      classifyText(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ClassifyTextRequest,
      ): Request<ClassifyTextResponse>;
      /** Moderates a document for harmful and sensitive categories. */
      moderateText(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ModerateTextRequest;
      }): Request<ModerateTextResponse>;
      moderateText(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ModerateTextRequest,
      ): Request<ModerateTextResponse>;
    }

    const documents: DocumentsResource;
  }
}
