/* Type definitions for non-npm package AdSense Management API v2 2.0 */
// Project: http://code.google.com/apis/adsense/management/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://adsense.googleapis.com/$discovery/rest?version=v2
// Revision: 20210816

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load AdSense Management API v2 */
    function load(name: "adsense", version: "v2"): PromiseLike<void>;
    function load(name: "adsense", version: "v2", callback: () => any): void;

    namespace adsense {
        interface Account {
            /** Output only. Creation time of the account. */
            createTime?: string;
            /** Output only. Display name of this account. */
            displayName?: string;
            /** Resource name of the account. Format: accounts/pub-[0-9]+ */
            name?: string;
            /** Output only. Outstanding tasks that need to be completed as part of the sign-up process for a new account. e.g. "billing-profile-creation", "phone-pin-verification". */
            pendingTasks?: string[];
            /** Output only. Whether this account is premium. */
            premium?: boolean;
            /** The account time zone, as used by reporting. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725). */
            timeZone?: TimeZone;
        }
        interface AdClient {
            /** Resource name of the ad client. Format: accounts/{account}/adclient/{adclient} */
            name?: string;
            /** Output only. Product code of the ad client. For example, "AFC" for AdSense for Content. */
            productCode?: string;
            /** Output only. Unique ID of the ad client as used in the `AD_CLIENT_ID` reporting dimension. Present only if the ad client supports reporting. */
            reportingDimensionId?: string;
        }
        interface AdClientAdCode {
            /** Output only. The AdSense code snippet to add to the head of an HTML page. */
            adCode?: string;
            /** Output only. The AdSense code snippet to add to the body of an AMP page. */
            ampBody?: string;
            /** Output only. The AdSense code snippet to add to the head of an AMP page. */
            ampHead?: string;
        }
        interface AdUnit {
            /** Settings specific to content ads (AFC). */
            contentAdsSettings?: ContentAdsSettings;
            /** Display name of the ad unit, as provided when the ad unit was created. */
            displayName?: string;
            /** Resource name of the ad unit. Format: accounts/{account}/adclient/{adclient}/adunits/{adunit} */
            name?: string;
            /** Output only. Unique ID of the ad unit as used in the `AD_UNIT_ID` reporting dimension. */
            reportingDimensionId?: string;
            /** State of the ad unit. */
            state?: string;
        }
        interface AdUnitAdCode {
            /** Output only. The AdSense code snippet to add to the body of an HTML page. */
            adCode?: string;
        }
        interface Alert {
            /** Output only. The localized alert message. This may contain HTML markup, such as phrase elements or links. */
            message?: string;
            /** Resource name of the alert. Format: accounts/{account}/alerts/{alert} */
            name?: string;
            /** Output only. Severity of this alert. */
            severity?: string;
            /** Output only. Type of alert. This identifies the broad type of this alert, and provides a stable machine-readable identifier that will not be translated. For example, "payment-hold". */
            type?: string;
        }
        interface Cell {
            /** Value in the cell. The dimension cells contain strings, and the metric cells contain numbers. */
            value?: string;
        }
        interface ContentAdsSettings {
            /** Size of the ad unit. e.g. "728x90", "1x3" (for responsive ad units). */
            size?: string;
            /** Type of the ad unit. */
            type?: string;
        }
        interface CustomChannel {
            /** Display name of the custom channel. */
            displayName?: string;
            /** Resource name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel} */
            name?: string;
            /** Output only. Unique ID of the custom channel as used in the `CUSTOM_CHANNEL_ID` reporting dimension. */
            reportingDimensionId?: string;
        }
        interface Date {
            /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
            day?: number;
            /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
            month?: number;
            /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
            year?: number;
        }
        interface Header {
            /** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) of this column. Only present if the header type is METRIC_CURRENCY. */
            currencyCode?: string;
            /** Required. Name of the header. */
            name?: string;
            /** Required. Type of the header. */
            type?: string;
        }
        interface HttpBody {
            /** The HTTP Content-Type header value specifying the content type of the body. */
            contentType?: string;
            /** The HTTP request/response body as raw binary. */
            data?: string;
            /** Application specific response metadata. Must be set in the first response for streaming APIs. */
            extensions?: Array<{ [P in string]: any }>;
        }
        interface ListAccountsResponse {
            /** The accounts returned in this list response. */
            accounts?: Account[];
            /** Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListAdClientsResponse {
            /** The ad clients returned in this list response. */
            adClients?: AdClient[];
            /** Continuation token used to page through ad clients. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListAdUnitsResponse {
            /** The ad units returned in the list response. */
            adUnits?: AdUnit[];
            /** Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListAlertsResponse {
            /** The alerts returned in this list response. */
            alerts?: Alert[];
        }
        interface ListChildAccountsResponse {
            /** The accounts returned in this list response. */
            accounts?: Account[];
            /** Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListCustomChannelsResponse {
            /** The custom channels returned in this list response. */
            customChannels?: CustomChannel[];
            /** Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListLinkedAdUnitsResponse {
            /** The ad units returned in the list response. */
            adUnits?: AdUnit[];
            /** Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListLinkedCustomChannelsResponse {
            /** The custom channels returned in this list response. */
            customChannels?: CustomChannel[];
            /** Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
        }
        interface ListPaymentsResponse {
            /** The payments returned in this list response. */
            payments?: Payment[];
        }
        interface ListSavedReportsResponse {
            /** Continuation token used to page through reports. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
            /** The reports returned in this list response. */
            savedReports?: SavedReport[];
        }
        interface ListSitesResponse {
            /** Continuation token used to page through sites. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
            /** The sites returned in this list response. */
            sites?: Site[];
        }
        interface ListUrlChannelsResponse {
            /** Continuation token used to page through url channels. To retrieve the next page of the results, set the next request's "page_token" value to this. */
            nextPageToken?: string;
            /** The url channels returned in this list response. */
            urlChannels?: UrlChannel[];
        }
        interface Payment {
            /** Output only. The amount of unpaid or paid earnings, as a formatted string, including the currency. E.g. "¥1,235 JPY", "$1,234.57", "£87.65". */
            amount?: string;
            /**
             * Output only. For paid earnings, the date that the payment was credited. For unpaid earnings, this field is empty. Payment dates are always returned in the billing timezone
             * (America/Los_Angeles).
             */
            date?: Date;
            /** Resource name of the payment. Format: accounts/{account}/payments/unpaid for unpaid (current) earnings. accounts/{account}/payments/yyyy-MM-dd for paid earnings. */
            name?: string;
        }
        interface ReportResult {
            /** The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty. */
            averages?: Row;
            /** Required. End date of the range (inclusive). */
            endDate?: Date;
            /** The header information; one for each dimension in the request, followed by one for each metric in the request. */
            headers?: Header[];
            /** The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. */
            rows?: Row[];
            /** Required. Start date of the range (inclusive). */
            startDate?: Date;
            /** The total number of rows matched by the report request. */
            totalMatchedRows?: string;
            /** The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty. */
            totals?: Row;
            /** Any warnings associated with generation of the report. These warnings are always returned in English. */
            warnings?: string[];
        }
        interface Row {
            /** Cells in the row. */
            cells?: Cell[];
        }
        interface SavedReport {
            /** Resource name of the report. Format: accounts/{account}/reports/{report} */
            name?: string;
            /** Report title as specified by publisher. */
            title?: string;
        }
        interface Site {
            /** Whether auto ads is turned on for the site. */
            autoAdsEnabled?: boolean;
            /** Domain (or subdomain) of the site, e.g. "example.com" or "www.example.com". This is used in the `OWNED_SITE_DOMAIN_NAME` reporting dimension. */
            domain?: string;
            /** Resource name of a site. Format: accounts/{account}/sites/{site} */
            name?: string;
            /** Output only. Unique ID of the site as used in the `OWNED_SITE_ID` reporting dimension. */
            reportingDimensionId?: string;
            /** Output only. State of a site. */
            state?: string;
        }
        interface TimeZone {
            /** IANA Time Zone Database time zone, e.g. "America/New_York". */
            id?: string;
            /** Optional. IANA Time Zone Database version number, e.g. "2019a". */
            version?: string;
        }
        interface UrlChannel {
            /** Resource name of the URL channel. Format: accounts/{account}/adclient/{adclient}/urlchannels/{urlchannel} */
            name?: string;
            /** Output only. Unique ID of the custom channel as used in the `URL_CHANNEL_ID` reporting dimension. */
            reportingDimensionId?: string;
            /** URI pattern of the channel. Does not include "http://" or "https://". Example: www.example.com/home */
            uriPattern?: string;
        }
        interface AdunitsResource {
            /** Gets an ad unit from a specified account and ad client. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. AdUnit to get information about. Format: accounts/{account_id}/adclient/{adclient_id}/adunit/{adunit_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AdUnit>;
            /** Gets the AdSense code for a given ad unit. */
            getAdcode(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the adunit for which to get the adcode. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AdUnitAdCode>;
            /** Lists all ad units under a specified account and ad client. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of ad units to include in the response, used for paging. If unspecified, at most 10000 ad units will be returned. The maximum value is 10000; values above
                 * 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListAdUnits` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAdUnits` must
                 * match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The ad client which owns the collection of ad units. Format: accounts/{account}/adclients/{adclient} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAdUnitsResponse>;
            /** Lists all the custom channels available for an ad unit. */
            listLinkedCustomChannels(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of custom channels to include in the response, used for paging. If unspecified, at most 10000 custom channels will be returned. The maximum value is 10000;
                 * values above 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListLinkedCustomChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListLinkedCustomChannels` must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The ad unit which owns the collection of custom channels. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLinkedCustomChannelsResponse>;
        }
        interface CustomchannelsResource {
            /** Gets information about the selected custom channel. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<CustomChannel>;
            /** Lists all the custom channels available in an ad client. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of custom channels to include in the response, used for paging. If unspecified, at most 10000 custom channels will be returned. The maximum value is 10000;
                 * values above 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListCustomChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListCustomChannels` must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The ad client which owns the collection of custom channels. Format: accounts/{account}/adclients/{adclient} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListCustomChannelsResponse>;
            /** Lists all the ad units available for a custom channel. */
            listLinkedAdUnits(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of ad units to include in the response, used for paging. If unspecified, at most 10000 ad units will be returned. The maximum value is 10000; values above
                 * 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListLinkedAdUnits` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListLinkedAdUnits` must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The custom channel which owns the collection of ad units. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLinkedAdUnitsResponse>;
        }
        interface UrlchannelsResource {
            /** Lists active url channels. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of url channels to include in the response, used for paging. If unspecified, at most 10000 url channels will be returned. The maximum value is 10000; values
                 * above 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListUrlChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListUrlChannels`
                 * must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The ad client which owns the collection of url channels. Format: accounts/{account}/adclients/{adclient} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListUrlChannelsResponse>;
        }
        interface AdclientsResource {
            /**
             * Gets the AdSense code for a given ad client. This returns what was previously known as the 'auto ad code'. This is only supported for ad clients with a product_code of AFC. For more
             * information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634).
             */
            getAdcode(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the ad client for which to get the adcode. Format: accounts/{account}/adclients/{adclient} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AdClientAdCode>;
            /** Lists all the ad clients available in an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of ad clients to include in the response, used for paging. If unspecified, at most 10000 ad clients will be returned. The maximum value is 10000; values above
                 * 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListAdClients` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAdClients` must
                 * match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The account which owns the collection of ad clients. Format: accounts/{account} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAdClientsResponse>;
            adunits: AdunitsResource;
            customchannels: CustomchannelsResource;
            urlchannels: UrlchannelsResource;
        }
        interface AlertsResource {
            /** Lists all the alerts available in an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The language to use for translating alert messages. If unspecified, this defaults to the user's display language. If the given language is not supported, alerts will be returned
                 * in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
                 */
                languageCode?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The account which owns the collection of alerts. Format: accounts/{account} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAlertsResponse>;
        }
        interface PaymentsResource {
            /** Lists all the payments available for an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The account which owns the collection of payments. Format: accounts/{account} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPaymentsResponse>;
        }
        interface SavedResource {
            /** Generates a saved report. */
            generate(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set. */
                currencyCode?: string;
                /** Date range of the report, if unset the range will be considered CUSTOM. */
                dateRange?: string;
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "endDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "endDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "endDate.year"?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in
                 * English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
                 */
                languageCode?: string;
                /** Required. Name of the saved report. Format: accounts/{account}/reports/{report} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your
                 * reports](https://support.google.com/adsense/answer/9830725).
                 */
                reportingTimeZone?: string;
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "startDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "startDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "startDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ReportResult>;
            /** Generates a csv formatted saved report. */
            generateCsv(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set. */
                currencyCode?: string;
                /** Date range of the report, if unset the range will be considered CUSTOM. */
                dateRange?: string;
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "endDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "endDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "endDate.year"?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in
                 * English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
                 */
                languageCode?: string;
                /** Required. Name of the saved report. Format: accounts/{account}/reports/{report} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your
                 * reports](https://support.google.com/adsense/answer/9830725).
                 */
                reportingTimeZone?: string;
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "startDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "startDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "startDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            /** Lists saved reports. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of reports to include in the response, used for paging. If unspecified, at most 10000 reports will be returned. The maximum value is 10000; values above 10000
                 * will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListPayments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListPayments` must
                 * match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The account which owns the collection of reports. Format: accounts/{account} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSavedReportsResponse>;
        }
        interface ReportsResource {
            /** Generates an ad hoc report. */
            generate(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The account which owns the collection of reports. Format: accounts/{account} */
                account: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set. */
                currencyCode?: string;
                /** Date range of the report, if unset the range will be considered CUSTOM. */
                dateRange?: string;
                /** Dimensions to base the report on. */
                dimensions?: string | string[];
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "endDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "endDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "endDate.year"?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filters to be run on the report. */
                filters?: string | string[];
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in
                 * English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
                 */
                languageCode?: string;
                /**
                 * The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for
                 * `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for
                 * `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.
                 */
                limit?: number;
                /** Required. Reporting metrics. */
                metrics?: string | string[];
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is
                 * sorted ascending.
                 */
                orderBy?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your
                 * reports](https://support.google.com/adsense/answer/9830725).
                 */
                reportingTimeZone?: string;
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "startDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "startDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "startDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ReportResult>;
            /** Generates a csv formatted ad hoc report. */
            generateCsv(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The account which owns the collection of reports. Format: accounts/{account} */
                account: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set. */
                currencyCode?: string;
                /** Date range of the report, if unset the range will be considered CUSTOM. */
                dateRange?: string;
                /** Dimensions to base the report on. */
                dimensions?: string | string[];
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "endDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "endDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "endDate.year"?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filters to be run on the report. */
                filters?: string | string[];
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in
                 * English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
                 */
                languageCode?: string;
                /**
                 * The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for
                 * `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for
                 * `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.
                 */
                limit?: number;
                /** Required. Reporting metrics. */
                metrics?: string | string[];
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is
                 * sorted ascending.
                 */
                orderBy?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your
                 * reports](https://support.google.com/adsense/answer/9830725).
                 */
                reportingTimeZone?: string;
                /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
                "startDate.day"?: number;
                /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
                "startDate.month"?: number;
                /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
                "startDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<HttpBody>;
            saved: SavedResource;
        }
        interface SitesResource {
            /** Gets information about the selected site. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the site. Format: accounts/{account}/sites/{site} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Site>;
            /** Lists all the sites available in an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of sites to include in the response, used for paging. If unspecified, at most 10000 sites will be returned. The maximum value is 10000; values above 10000
                 * will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListSites` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSites` must match
                 * the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The account which owns the collection of sites. Format: accounts/{account} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSitesResponse>;
        }
        interface AccountsResource {
            /** Gets information about the selected AdSense account. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Account to get information about. Format: accounts/{account_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Account>;
            /** Lists all accounts available to this user. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of accounts to include in the response, used for paging. If unspecified, at most 10000 accounts will be returned. The maximum value is 10000; values above
                 * 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAccounts` must
                 * match the call that provided the page token.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAccountsResponse>;
            /** Lists all accounts directly managed by the given AdSense account. */
            listChildAccounts(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of accounts to include in the response, used for paging. If unspecified, at most 10000 accounts will be returned. The maximum value is 10000; values above
                 * 10000 will be coerced to 10000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAccounts` must
                 * match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The parent account, which owns the child accounts. Format: accounts/{account} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListChildAccountsResponse>;
            adclients: AdclientsResource;
            alerts: AlertsResource;
            payments: PaymentsResource;
            reports: ReportsResource;
            sites: SitesResource;
        }

        const accounts: AccountsResource;
    }
}
