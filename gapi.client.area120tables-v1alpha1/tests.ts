/* This is stub file for gapi.client.area120tables-v1alpha1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240319

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://area120tables.googleapis.com/$discovery/rest?version=v1alpha1'
  );
  /** now we can use gapi.client.area120tables */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, create, and delete all of your Google Drive files */
    'https://www.googleapis.com/auth/drive',
    /** See, edit, create, and delete only the specific Google Drive files you use with this app */
    'https://www.googleapis.com/auth/drive.file',
    /** See and download all your Google Drive files */
    'https://www.googleapis.com/auth/drive.readonly',
    /** See, edit, create, and delete all your Google Sheets spreadsheets */
    'https://www.googleapis.com/auth/spreadsheets',
    /** See all your Google Sheets spreadsheets */
    'https://www.googleapis.com/auth/spreadsheets.readonly',
    /** See, edit, create, and delete your tables in Tables by Area 120 */
    'https://www.googleapis.com/auth/tables',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets a table. Returns NOT_FOUND if the table does not exist. */
    await gapi.client.area120tables.tables.get({
      name: 'Test string',
    });
    /** Lists tables for the user. */
    await gapi.client.area120tables.tables.list({
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates multiple rows. */
    await gapi.client.area120tables.tables.rows.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            row: {
              createTime: 'Test string',
              name: 'Test string',
              updateTime: 'Test string',
              values: {
                A: 42,
              },
            },
            view: 'Test string',
          },
        ],
      }
    );
    /** Deletes multiple rows. */
    await gapi.client.area120tables.tables.rows.batchDelete(
      {
        parent: 'Test string',
      },
      {
        names: ['Test string'],
      }
    );
    /** Updates multiple rows. */
    await gapi.client.area120tables.tables.rows.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            row: {
              createTime: 'Test string',
              name: 'Test string',
              updateTime: 'Test string',
              values: {
                A: 42,
              },
            },
            updateMask: 'Test string',
            view: 'Test string',
          },
        ],
      }
    );
    /** Creates a row. */
    await gapi.client.area120tables.tables.rows.create(
      {
        parent: 'Test string',
        view: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
        values: {
          A: 42,
        },
      }
    );
    /** Deletes a row. */
    await gapi.client.area120tables.tables.rows.delete({
      name: 'Test string',
    });
    /** Gets a row. Returns NOT_FOUND if the row does not exist in the table. */
    await gapi.client.area120tables.tables.rows.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Lists rows in a table. Returns NOT_FOUND if the table does not exist. */
    await gapi.client.area120tables.tables.rows.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates a row. */
    await gapi.client.area120tables.tables.rows.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        view: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
        values: {
          A: 42,
        },
      }
    );
    /** Gets a workspace. Returns NOT_FOUND if the workspace does not exist. */
    await gapi.client.area120tables.workspaces.get({
      name: 'Test string',
    });
    /** Lists workspaces for the user. */
    await gapi.client.area120tables.workspaces.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
