/* This is stub file for gapi.client.pubsublite-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240614

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://pubsublite.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.pubsublite */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.pubsublite.admin.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.pubsublite.admin.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.pubsublite.admin.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.pubsublite.admin.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new reservation. */
    await gapi.client.pubsublite.admin.projects.locations.reservations.create(
      {
        parent: 'Test string',
        reservationId: 'Test string',
      },
      {
        name: 'Test string',
        throughputCapacity: 'Test string',
      }
    );
    /** Deletes the specified reservation. */
    await gapi.client.pubsublite.admin.projects.locations.reservations.delete({
      name: 'Test string',
    });
    /** Returns the reservation configuration. */
    await gapi.client.pubsublite.admin.projects.locations.reservations.get({
      name: 'Test string',
    });
    /** Returns the list of reservations for the given project. */
    await gapi.client.pubsublite.admin.projects.locations.reservations.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates properties of the specified reservation. */
    await gapi.client.pubsublite.admin.projects.locations.reservations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        name: 'Test string',
        throughputCapacity: 'Test string',
      }
    );
    /** Lists the topics attached to the specified reservation. */
    await gapi.client.pubsublite.admin.projects.locations.reservations.topics.list(
      {
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates a new subscription. */
    await gapi.client.pubsublite.admin.projects.locations.subscriptions.create(
      {
        parent: 'Test string',
        skipBacklog: true,
        subscriptionId: 'Test string',
      },
      {
        deliveryConfig: {
          deliveryRequirement: 'Test string',
        },
        exportConfig: {
          currentState: 'Test string',
          deadLetterTopic: 'Test string',
          desiredState: 'Test string',
          pubsubConfig: {
            topic: 'Test string',
          },
        },
        name: 'Test string',
        topic: 'Test string',
      }
    );
    /** Deletes the specified subscription. */
    await gapi.client.pubsublite.admin.projects.locations.subscriptions.delete({
      name: 'Test string',
    });
    /** Returns the subscription configuration. */
    await gapi.client.pubsublite.admin.projects.locations.subscriptions.get({
      name: 'Test string',
    });
    /** Returns the list of subscriptions for the given project. */
    await gapi.client.pubsublite.admin.projects.locations.subscriptions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates properties of the specified subscription. */
    await gapi.client.pubsublite.admin.projects.locations.subscriptions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        deliveryConfig: {
          deliveryRequirement: 'Test string',
        },
        exportConfig: {
          currentState: 'Test string',
          deadLetterTopic: 'Test string',
          desiredState: 'Test string',
          pubsubConfig: {
            topic: 'Test string',
          },
        },
        name: 'Test string',
        topic: 'Test string',
      }
    );
    /** Performs an out-of-band seek for a subscription to a specified target, which may be timestamps or named positions within the message backlog. Seek translates these targets to cursors for each partition and orchestrates subscribers to start consuming messages from these seek cursors. If an operation is returned, the seek has been registered and subscribers will eventually receive messages from the seek cursors (i.e. eventual consistency), as long as they are using a minimum supported client library version and not a system that tracks cursors independently of Pub/Sub Lite (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail for unsupported clients. If clients would like to know when subscribers react to the seek (or not), they can poll the operation. The seek operation will succeed and complete once subscribers are ready to receive messages from the seek cursors for all partitions of the topic. This means that the seek operation will not complete until all subscribers come online. If the previous seek operation has not yet completed, it will be aborted and the new invocation of seek will supersede it. */
    await gapi.client.pubsublite.admin.projects.locations.subscriptions.seek(
      {
        name: 'Test string',
      },
      {
        namedTarget: 'Test string',
        timeTarget: {
          eventTime: 'Test string',
          publishTime: 'Test string',
        },
      }
    );
    /** Creates a new topic. */
    await gapi.client.pubsublite.admin.projects.locations.topics.create(
      {
        parent: 'Test string',
        topicId: 'Test string',
      },
      {
        name: 'Test string',
        partitionConfig: {
          capacity: {
            publishMibPerSec: 42,
            subscribeMibPerSec: 42,
          },
          count: 'Test string',
          scale: 42,
        },
        reservationConfig: {
          throughputReservation: 'Test string',
        },
        retentionConfig: {
          period: 'Test string',
          perPartitionBytes: 'Test string',
        },
      }
    );
    /** Deletes the specified topic. */
    await gapi.client.pubsublite.admin.projects.locations.topics.delete({
      name: 'Test string',
    });
    /** Returns the topic configuration. */
    await gapi.client.pubsublite.admin.projects.locations.topics.get({
      name: 'Test string',
    });
    /** Returns the partition information for the requested topic. */
    await gapi.client.pubsublite.admin.projects.locations.topics.getPartitions({
      name: 'Test string',
    });
    /** Returns the list of topics for the given project. */
    await gapi.client.pubsublite.admin.projects.locations.topics.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates properties of the specified topic. */
    await gapi.client.pubsublite.admin.projects.locations.topics.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        name: 'Test string',
        partitionConfig: {
          capacity: {
            publishMibPerSec: 42,
            subscribeMibPerSec: 42,
          },
          count: 'Test string',
          scale: 42,
        },
        reservationConfig: {
          throughputReservation: 'Test string',
        },
        retentionConfig: {
          period: 'Test string',
          perPartitionBytes: 'Test string',
        },
      }
    );
    /** Lists the subscriptions attached to the specified topic. */
    await gapi.client.pubsublite.admin.projects.locations.topics.subscriptions.list(
      {
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Updates the committed cursor. */
    await gapi.client.pubsublite.cursor.projects.locations.subscriptions.commitCursor(
      {
        subscription: 'Test string',
      },
      {
        cursor: {
          offset: 'Test string',
        },
        partition: 'Test string',
      }
    );
    /** Returns all committed cursor information for a subscription. */
    await gapi.client.pubsublite.cursor.projects.locations.subscriptions.cursors.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Compute the head cursor for the partition. The head cursor's offset is guaranteed to be less than or equal to all messages which have not yet been acknowledged as published, and greater than the offset of any message whose publish has already been acknowledged. It is zero if there have never been messages in the partition. */
    await gapi.client.pubsublite.topicStats.projects.locations.topics.computeHeadCursor(
      {
        topic: 'Test string',
      },
      {
        partition: 'Test string',
      }
    );
    /** Compute statistics about a range of messages in a given topic and partition. */
    await gapi.client.pubsublite.topicStats.projects.locations.topics.computeMessageStats(
      {
        topic: 'Test string',
      },
      {
        endCursor: {
          offset: 'Test string',
        },
        partition: 'Test string',
        startCursor: {
          offset: 'Test string',
        },
      }
    );
    /** Compute the corresponding cursor for a publish or event time in a topic partition. */
    await gapi.client.pubsublite.topicStats.projects.locations.topics.computeTimeCursor(
      {
        topic: 'Test string',
      },
      {
        partition: 'Test string',
        target: {
          eventTime: 'Test string',
          publishTime: 'Test string',
        },
      }
    );
  }
});
