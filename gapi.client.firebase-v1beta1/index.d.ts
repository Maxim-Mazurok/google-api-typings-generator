/* Type definitions for non-npm package Firebase Management API v1beta1 0.0 */
// Project: https://firebase.google.com
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firebase.googleapis.com/$discovery/rest?version=v1beta1
// Revision: 20230914

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Firebase Management API v1beta1 */
    function load(urlOrObject: "https://firebase.googleapis.com/$discovery/rest?version=v1beta1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "firebase", version: "v1beta1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "firebase", version: "v1beta1", callback: () => any): void;

    namespace firebase {
        interface AddFirebaseRequest {
            /**
             * Deprecated. Instead, to set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the
             * GCP `Project`. The ID of the Project's default GCP resource location. The location must be one of the available [GCP resource
             * locations](https://firebase.google.com/docs/projects/locations).
             */
            locationId?:
                string;
        }
        interface AddGoogleAnalyticsRequest {
            /**
             * The ID for the existing [Google Analytics account](http://www.google.com/analytics/) that you want to link with the `FirebaseProject`. Specifying this field will provision a new
             * Google Analytics property in your Google Analytics account and associate the new property with the `FirebaseProject`.
             */
            analyticsAccountId?:
                string;
            /** The ID for the existing Google Analytics property that you want to associate with the `FirebaseProject`. */
            analyticsPropertyId?:
                string;
        }
        interface AdminSdkConfig {
            databaseURL?:
                string;
            /**
             * **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the
             * available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To
             * set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
             */
            locationId?:
                string;
            /**
             * Immutable. A user-assigned unique identifier for the `FirebaseProject`. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but it
             * should generally be treated as a convenience alias to reference the Project.
             */
            projectId?:
                string;
            /**
             * **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list
             * endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for
             * the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.
             */
            storageBucket?:
                string;
        }
        interface AnalyticsDetails {
            /** The Analytics Property object associated with the specified `FirebaseProject`. This object contains the details of the Google Analytics property associated with the Project. */
            analyticsProperty?:
                AnalyticsProperty;
            /**
             * - For `AndroidApps` and `IosApps`: a map of `app` to `streamId` for each Firebase App in the specified `FirebaseProject`. Each `app` and `streamId` appears only once. - For
             * `WebApps`: a map of `app` to `streamId` and `measurementId` for each `WebApp` in the specified `FirebaseProject`. Each `app`, `streamId`, and `measurementId` appears only once.
             */
            streamMappings?:
                StreamMapping[];
        }
        interface AnalyticsProperty {
            /** Output only. The ID of the [Google Analytics account](https://www.google.com/analytics/) for the Google Analytics property associated with the specified FirebaseProject. */
            analyticsAccountId?:
                string;
            /** The display name of the Google Analytics property associated with the specified `FirebaseProject`. */
            displayName?:
                string;
            /**
             * The globally unique, Google-assigned identifier of the Google Analytics property associated with the specified `FirebaseProject`. If you called
             * [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) to link the `FirebaseProject` with a Google Analytics account, the value in this `id` field is the same as the ID
             * of the property either specified or provisioned with that call to `AddGoogleAnalytics`.
             */
            id?:
                string;
        }
        interface AndroidApp {
            /**
             * The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the
             * [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found
             * in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to
             * [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be
             * an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no
             * restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud
             * Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
             */
            apiKeyId?:
                string;
            /**
             * Output only. Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not
             * specified.
             */
            appId?:
                string;
            /** The user-assigned display name for the `AndroidApp`. */
            displayName?:
                string;
            /**
             * This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding.
             * Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
             */
            etag?:
                string;
            /** Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state. */
            expireTime?:
                string;
            /**
             * The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
             * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using
             * project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. *
             * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
             */
            name?:
                string;
            /** Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console. */
            packageName?:
                string;
            /** Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `AndroidApp`. */
            projectId?:
                string;
            /** The SHA1 certificate hashes for the AndroidApp. */
            sha1Hashes?:
                string[];
            /** The SHA256 certificate hashes for the AndroidApp. */
            sha256Hashes?:
                string[];
            /** Output only. The lifecycle state of the App. */
            state?:
                string;
        }
        interface AndroidAppConfig {
            /** The contents of the JSON configuration file. */
            configFileContents?:
                string;
            /** The filename that the configuration artifact for the `AndroidApp` is typically saved as. For example: `google-services.json` */
            configFilename?:
                string;
        }
        interface DefaultResources {
            /**
             * Output only. **DEPRECATED.** _Instead, find the default Firebase Hosting site name using the
             * [ListSites](https://firebase.google.com/docs/reference/hosting/rest/v1beta1/projects.sites/list) within the Firebase Hosting REST API. Note that the default site for the Project
             * might not yet be provisioned, so the return might not contain a default site._ The default Firebase Hosting site name, in the format: PROJECT_ID Though rare, your `projectId` might
             * already be used as the name for an existing Hosting site in another project (learn more about creating non-default, [additional
             * sites](https://firebase.google.com/docs/hosting/multisites)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default
             * Hosting site name. For example, if your `projectId` is `myproject123`, your default Hosting site name might be: `myproject123-a5c16`
             */
            hostingSite?:
                string;
            /**
             * Output only. **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one
             * of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized
             * yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
             */
            locationId?:
                string;
            /**
             * Output only. **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list
             * endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API.
             * Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database instance
             * name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Realtime Database instance in another project (learn more about
             * [database sharding](https://firebase.google.com/docs/database/usage/sharding)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to
             * create your default Realtime Database instance name. For example, if your `projectId` is `myproject123`, your default database instance name might be: `myproject123-a5c16`
             */
            realtimeDatabaseInstance?:
                string;
            /**
             * Output only. **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list
             * endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for
             * the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket, in the format:
             * PROJECT_ID.appspot.com
             */
            storageBucket?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FinalizeDefaultLocationRequest {
            /** The ID of the Project's default GCP resource location. The location must be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). */
            locationId?:
                string;
        }
        interface FirebaseAppInfo {
            /**
             * The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the App. Be aware that this value is the UID of the API key, _not_ the
             * [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found
             * in the App's configuration artifact ([`AndroidApp`](../../rest/v1beta1/projects.androidApps/getConfig) | [`IosApp`](../../rest/v1beta1/projects.iosApps/getConfig) |
             * [`WebApp`](../../rest/v1beta1/projects.webApps/getConfig)). If `api_key_id` is not set in requests to create the App ([`AndroidApp`](../../rest/v1beta1/projects.androidApps/create)
             * | [`IosApp`](../../rest/v1beta1/projects.iosApps/create) | [`WebApp`](../../rest/v1beta1/projects.webApps/create)), then Firebase automatically associates an `api_key_id` with the
             * App. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.
             */
            apiKeyId?:
                string;
            /**
             * Output only. Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. This identifier should be treated as an opaque token, as the data format is not
             * specified.
             */
            appId?:
                string;
            /** The user-assigned display name of the Firebase App. */
            displayName?:
                string;
            /** Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state. */
            expireTime?:
                string;
            /** The resource name of the Firebase App, in the format: projects/PROJECT_ID /iosApps/APP_ID or projects/PROJECT_ID/androidApps/APP_ID or projects/ PROJECT_ID/webApps/APP_ID */
            name?:
                string;
            /**
             * Output only. Immutable. The platform-specific identifier of the App. *Note:* For most use cases, use `appId`, which is the canonical, globally unique identifier for referencing an
             * App. This string is derived from a native identifier for each platform: `packageName` for an `AndroidApp`, `bundleId` for an `IosApp`, and `webId` for a `WebApp`. Its contents
             * should be treated as opaque, as the native identifier format may change as platforms evolve. This string is only unique within a `FirebaseProject` and its associated Apps.
             */
            namespace?:
                string;
            /** The platform of the Firebase App. */
            platform?:
                string;
            /** Output only. The lifecycle state of the App. */
            state?:
                string;
        }
        interface FirebaseProject {
            /**
             * A set of user-defined annotations for the FirebaseProject. Learn more about annotations in Google's [AIP-128 standard](https://google.aip.dev/128#annotations). These annotations are
             * intended solely for developers and client-side tools. Firebase services will not mutate this annotations set.
             */
            annotations?:
                { [P in string]: string };
            /** The user-assigned display name of the Project. */
            displayName?:
                string;
            /**
             * This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding.
             * Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
             */
            etag?:
                string;
            /**
             * The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
             * ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510
             * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`.
             */
            name?:
                string;
            /**
             * Output only. Immutable. A user-assigned unique identifier for the Project. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but
             * it should generally be treated as a convenience alias to reference the Project.
             */
            projectId?:
                string;
            /**
             * Output only. Immutable. The globally unique, Google-assigned canonical identifier for the Project. Use this identifier when configuring integrations and/or making API calls to
             * Firebase or third-party services.
             */
            projectNumber?:
                string;
            /**
             * Output only. **DEPRECATED.** _Auto-provisioning of these resources is changing, so this object no longer reliably provides information about the Project. Instead, retrieve
             * information about each resource directly from its resource-specific API._ The default Firebase resources associated with the Project.
             */
            resources?:
                DefaultResources;
            /** Output only. The lifecycle state of the Project. */
            state?:
                string;
        }
        interface IosApp {
            /**
             * The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `IosApp`. Be aware that this value is the UID of the API key, _not_ the
             * [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found
             * in the App's [configuration artifact](../../rest/v1beta1/projects.iosApps/getConfig). If `api_key_id` is not set in requests to
             * [`iosApps.Create`](../../rest/v1beta1/projects.iosApps/create), then Firebase automatically associates an `api_key_id` with the `IosApp`. This auto-associated key may be an existing
             * valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or
             * only have restrictions that are valid for the associated `IosApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API
             * keys.
             */
            apiKeyId?:
                string;
            /**
             * Output only. Immutable. The globally unique, Firebase-assigned identifier for the `IosApp`. This identifier should be treated as an opaque token, as the data format is not
             * specified.
             */
            appId?:
                string;
            /** The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store. */
            appStoreId?:
                string;
            /** Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore. */
            bundleId?:
                string;
            /** The user-assigned display name for the `IosApp`. */
            displayName?:
                string;
            /**
             * This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding.
             * Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
             */
            etag?:
                string;
            /** Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state. */
            expireTime?:
                string;
            /**
             * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
             * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using
             * project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. *
             * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
             */
            name?:
                string;
            /** Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `IosApp`. */
            projectId?:
                string;
            /** Output only. The lifecycle state of the App. */
            state?:
                string;
            /** The Apple Developer Team ID associated with the App in the App Store. */
            teamId?:
                string;
        }
        interface IosAppConfig {
            /** The content of the XML configuration file. */
            configFileContents?:
                string;
            /** The filename that the configuration artifact for the `IosApp` is typically saved as. For example: `GoogleService-Info.plist` */
            configFilename?:
                string;
        }
        interface ListAndroidAppsResponse {
            /** List of each `AndroidApp` associated with the specified `FirebaseProject`. */
            apps?:
                AndroidApp[];
            /**
             * If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results. This token can be used
             * in a subsequent call to `ListAndroidApps` to find the next group of Apps. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
        }
        interface ListAvailableLocationsResponse {
            /** One page of results from a call to `ListAvailableLocations`. */
            locations?:
                Location[];
            /**
             * If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results and all available
             * locations have been listed. This token can be used in a subsequent call to `ListAvailableLocations` to find more locations. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
        }
        interface ListAvailableProjectsResponse {
            /**
             * If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results. This token can be used
             * in a subsequent calls to `ListAvailableProjects` to find the next group of Projects. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
            /** The list of GCP `Projects` which can have Firebase resources added to them. */
            projectInfo?:
                ProjectInfo[];
        }
        interface ListFirebaseProjectsResponse {
            /**
             * If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results. This token can be used
             * in a subsequent calls to `ListFirebaseProjects` to find the next group of Projects. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
            /** One page of the list of Projects that are accessible to the caller. */
            results?:
                FirebaseProject[];
        }
        interface ListIosAppsResponse {
            /** List of each `IosApp` associated with the specified `FirebaseProject`. */
            apps?:
                IosApp[];
            /**
             * If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results. This token can be used
             * in a subsequent call to `ListIosApps` to find the next group of Apps. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
        }
        interface ListShaCertificatesResponse {
            /** The list of each `ShaCertificate` associated with the `AndroidApp`. */
            certificates?:
                ShaCertificate[];
        }
        interface ListWebAppsResponse {
            /** List of each `WebApp` associated with the specified `FirebaseProject`. */
            apps?:
                WebApp[];
            /**
             * If the result list is too large to fit in a single response, then a token is returned. If the string is empty, then this response is the last page of results. This token can be used
             * in a subsequent call to `ListWebApps` to find the next group of Apps. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
        }
        interface Location {
            /** Products and services that are available in the GCP resource location. */
            features?:
                string[];
            /** The ID of the GCP resource location. It will be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations#types). */
            locationId?:
                string;
            /** Indicates whether the GCP resource location is a [regional or multi-regional location](https://firebase.google.com/docs/projects/locations#types) for data replication. */
            type?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface MessageSet {
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?:
                string;
            /**
             * The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original
             * method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original
             * method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?:
                { [P in string]: any };
        }
        // tslint:disable-next-line:no-empty-interface
        interface OperationMetadata {
        }
        interface ProductMetadata {
            /** List of warnings related to the associated operation. */
            warningMessages?:
                string[];
        }
        interface ProjectInfo {
            /** The user-assigned display name of the GCP `Project`, for example: `My App` */
            displayName?:
                string;
            /**
             * The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). Not all
             * Projects will have this field populated. If it is not populated, it means that the Project does not yet have a default GCP resource location. To set a Project's default GCP resource
             * location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
             */
            locationId?:
                string;
            /**
             * The resource name of the GCP `Project` to which Firebase resources can be added, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
             * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
             */
            project?:
                string;
        }
        interface RemoveAnalyticsRequest {
            /**
             * Optional. The ID of the Google Analytics property associated with the specified `FirebaseProject`. - If not set, then the Google Analytics property that is currently associated with
             * the specified `FirebaseProject` is removed. - If set, and the specified `FirebaseProject` is currently associated with a *different* Google Analytics property, then the response is
             * a `412 Precondition Failed` error.
             */
            analyticsPropertyId?:
                string;
        }
        interface RemoveAndroidAppRequest {
            /** If set to true, and the App is not found, the request will succeed but no action will be taken on the server. */
            allowMissing?:
                boolean;
            /** Checksum provided in the AndroidApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding. */
            etag?:
                string;
            /**
             * Determines whether to _immediately_ delete the AndroidApp. If set to true, the App is immediately deleted from the Project and cannot be restored to the Project. If not set,
             * defaults to false, which means the App will be set to expire in 30 days. Within the 30 days, the App may be restored to the Project using UndeleteAndroidApp.
             */
            immediate?:
                boolean;
            /** If set to true, the request is only validated. The App will _not_ be removed. */
            validateOnly?:
                boolean;
        }
        interface RemoveIosAppRequest {
            /** If set to true, and the App is not found, the request will succeed but no action will be taken on the server. */
            allowMissing?:
                boolean;
            /** Checksum provided in the IosApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding. */
            etag?:
                string;
            /**
             * Determines whether to _immediately_ delete the IosApp. If set to true, the App is immediately deleted from the Project and cannot be restored to the Project. If not set, defaults to
             * false, which means the App will be set to expire in 30 days. Within the 30 days, the App may be restored to the Project using UndeleteIosApp
             */
            immediate?:
                boolean;
            /** If set to true, the request is only validated. The App will _not_ be removed. */
            validateOnly?:
                boolean;
        }
        interface RemoveWebAppRequest {
            /** If set to true, and the App is not found, the request will succeed but no action will be taken on the server. */
            allowMissing?:
                boolean;
            /** Checksum provided in the WebApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding. */
            etag?:
                string;
            /**
             * Determines whether to _immediately_ delete the WebApp. If set to true, the App is immediately deleted from the Project and cannot be restored to the Project. If not set, defaults to
             * false, which means the App will be set to expire in 30 days. Within the 30 days, the App may be restored to the Project using UndeleteWebApp
             */
            immediate?:
                boolean;
            /** If set to true, the request is only validated. The App will _not_ be removed. */
            validateOnly?:
                boolean;
        }
        interface SearchFirebaseAppsResponse {
            /** One page of results from a call to `SearchFirebaseApps`. */
            apps?:
                FirebaseAppInfo[];
            /**
             * If the result list is too large to fit in a single response, then a token is returned. This token can be used in a subsequent calls to `SearchFirebaseApps` to find the next group of
             * Apps. Page tokens are short-lived and should not be persisted.
             */
            nextPageToken?:
                string;
        }
        interface ShaCertificate {
            /** The type of SHA certificate encoded in the hash. */
            certType?:
                string;
            /**
             * The resource name of the ShaCertificate for the AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/sha/SHA_HASH * PROJECT_IDENTIFIER: the parent Project's
             * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using
             * project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. *
             * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)). * SHA_HASH: the certificate hash for the App
             * (see [`shaHash`](../projects.androidApps.sha#ShaCertificate.FIELDS.sha_hash)).
             */
            name?:
                string;
            /** The certificate hash for the `AndroidApp`. */
            shaHash?:
                string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface StatusProto {
            /** The canonical error code (see codes.proto) that most closely corresponds to this status. This may be missing, and in the common case of the generic space, it definitely will be. */
            canonicalCode?:
                number;
            /** Numeric code drawn from the space specified below. Often, this is the canonical error space, and code is drawn from google3/util/task/codes.proto */
            code?:
                number;
            /** Detail message */
            message?:
                string;
            /** message_set associates an arbitrary proto message with the status. */
            messageSet?:
                any;
            /** The following are usually only present when code != 0 Space to which this status belongs */
            space?:
                string;
        }
        interface StreamMapping {
            /**
             * The resource name of the Firebase App associated with the Google Analytics data stream, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID or
             * projects/PROJECT_IDENTIFIER/iosApps/APP_ID or projects/PROJECT_IDENTIFIER /webApps/APP_ID Refer to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
             * details about PROJECT_IDENTIFIER values.
             */
            app?:
                string;
            /**
             * Applicable for Firebase Web Apps only. The unique Google-assigned identifier of the Google Analytics web stream associated with the Firebase Web App. Firebase SDKs use this ID to
             * interact with Google Analytics APIs. Learn more about this ID and Google Analytics web streams in the [Analytics documentation](https://support.google.com/analytics/answer/9304153).
             */
            measurementId?:
                string;
            /**
             * The unique Google-assigned identifier of the Google Analytics data stream associated with the Firebase App. Learn more about Google Analytics data streams in the [Analytics
             * documentation](https://support.google.com/analytics/answer/9303323).
             */
            streamId?:
                string;
        }
        interface UndeleteAndroidAppRequest {
            /** Checksum provided in the AndroidApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding. */
            etag?:
                string;
            /** If set to true, the request is only validated. The App will _not_ be undeleted. */
            validateOnly?:
                boolean;
        }
        interface UndeleteIosAppRequest {
            /** Checksum provided in the IosApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding. */
            etag?:
                string;
            /** If set to true, the request is only validated. The App will _not_ be undeleted. */
            validateOnly?:
                boolean;
        }
        interface UndeleteWebAppRequest {
            /** Checksum provided in the WebApp resource. If provided, this checksum ensures that the client has an up-to-date value before proceeding. */
            etag?:
                string;
            /** If set to true, the request is only validated. The App will _not_ be undeleted. */
            validateOnly?:
                boolean;
        }
        interface WebApp {
            /**
             * The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `WebApp`. Be aware that this value is the UID of the API key, _not_ the
             * [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found
             * in the App's [configuration artifact](../../rest/v1beta1/projects.webApps/getConfig). If `api_key_id` is not set in requests to
             * [`webApps.Create`](../../rest/v1beta1/projects.webApps/create), then Firebase automatically associates an `api_key_id` with the `WebApp`. This auto-associated key may be an existing
             * valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or
             * only have restrictions that are valid for the associated `WebApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API
             * keys.
             */
            apiKeyId?:
                string;
            /**
             * Output only. Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. This identifier should be treated as an opaque token, as the data format is not
             * specified.
             */
            appId?:
                string;
            /** The URLs where the `WebApp` is hosted. */
            appUrls?:
                string[];
            /** The user-assigned display name for the `WebApp`. */
            displayName?:
                string;
            /**
             * This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding.
             * Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
             */
            etag?:
                string;
            /** Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state. */
            expireTime?:
                string;
            /**
             * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
             * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using
             * project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. *
             * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
             */
            name?:
                string;
            /** Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `WebApp`. */
            projectId?:
                string;
            /** Output only. The lifecycle state of the App. */
            state?:
                string;
            /**
             * Output only. Immutable. A unique, Firebase-assigned identifier for the `WebApp`. This identifier is only used to populate the `namespace` value for the `WebApp`. For most use cases,
             * use `appId` to identify or reference the App. The `webId` value is only unique within a `FirebaseProject` and its associated Apps.
             */
            webId?:
                string;
        }
        interface WebAppConfig {
            /**
             * The [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key associated with the `WebApp`. Note that this
             * value is _not_ the [`apiKeyId`](../projects.webApps#WebApp.FIELDS.api_key_id) (the UID) of the API key associated with the `WebApp`.
             */
            apiKey?:
                string;
            /** Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. */
            appId?:
                string;
            /** The domain Firebase Auth configures for OAuth redirects, in the format: PROJECT_ID.firebaseapp.com */
            authDomain?:
                string;
            /**
             * **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list
             * endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API.
             * Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.
             */
            databaseURL?:
                string;
            /**
             * **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the
             * available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To
             * set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
             */
            locationId?:
                string;
            /**
             * The unique Google-assigned identifier of the Google Analytics web stream associated with the `WebApp`. Firebase SDKs use this ID to interact with Google Analytics APIs. This field
             * is only present if the `WebApp` is linked to a web stream in a Google Analytics App + Web property. Learn more about this ID and Google Analytics web streams in the [Analytics
             * documentation](https://support.google.com/analytics/answer/9304153). To generate a `measurementId` and link the `WebApp` with a Google Analytics web stream, call
             * [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics). For apps using the Firebase JavaScript SDK v7.20.0 and later, Firebase dynamically fetches the `measurementId`
             * when your app initializes Analytics. Having this ID in your config object is optional, but it does serve as a fallback in the rare case that the dynamic fetch fails.
             */
            measurementId?:
                string;
            /** The sender ID for use with Firebase Cloud Messaging. */
            messagingSenderId?:
                string;
            /** Immutable. A user-assigned unique identifier for the `FirebaseProject`. */
            projectId?:
                string;
            /**
             * **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list
             * endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for
             * the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.
             */
            storageBucket?:
                string;
        }
        interface AvailableProjectsResource {
            /**
             * Lists each [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-manager/reference/rest/v1/projects) that can have Firebase resources added to it. A Project
             * will only be listed if: - The caller has sufficient [Google IAM](https://cloud.google.com/iam) permissions to call AddFirebase. - The Project is not already a FirebaseProject. - The
             * Project is not in an Organization which has policies that prevent Firebase resources from being added.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of Projects to return in the response. The server may return fewer than this value at its discretion. If no value is specified (or too large a value is
                 * specified), the server will impose its own limit. This value cannot be negative.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `ListAvailableProjects` indicating where in the set of Projects to resume listing. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAvailableProjectsResponse>;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
        }
        interface ShaResource {
            /** Adds a ShaCertificate to the specified AndroidApp. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent AndroidApp to which to add a ShaCertificate, in the format: projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique
                 * identifier, the Unique Resource from Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
                 * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ShaCertificate;
            }): Request<ShaCertificate>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent AndroidApp to which to add a ShaCertificate, in the format: projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique
                 * identifier, the Unique Resource from Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
                 * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ShaCertificate): Request<ShaCertificate>;
            /** Removes a ShaCertificate from the specified AndroidApp. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the ShaCertificate to remove from the parent AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the
                 * `ShaCertificate` [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field for details about PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can obtain the
                 * full resource name of the `ShaCertificate` from the response of [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
                 * [`CreateShaCertificate`](../projects.androidApps.sha/create).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Lists the SHA-1 and SHA-256 certificates for the specified AndroidApp. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent AndroidApp for which to list each associated ShaCertificate, in the format: projects/PROJECT_IDENTIFIER /androidApps/APP_ID Since an APP_ID is a
                 * unique identifier, the Unique Resource from Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
                 * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListShaCertificatesResponse>;
        }
        interface AndroidAppsResource {
            /**
             * Requests the creation of a new AndroidApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The
             * `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject in which to create an AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AndroidApp;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject in which to create an AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AndroidApp): Request<Operation>;
            /** Gets the specified AndroidApp. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name)
                 * field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AndroidApp>;
            /** Gets the configuration artifact associated with the specified AndroidApp. */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the AndroidApp configuration to download, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an APP_ID is a unique identifier, the
                 * Unique Resource from Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
                 * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AndroidAppConfig>;
            /**
             * Lists each AndroidApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional
             * requests are made with a `pageToken`.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of Apps to return in the response. The server may return fewer than this at its discretion. If no value is specified (or too large a value is specified), then
                 * the server will impose its own limit.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `ListAndroidApps` indicating where in the set of Apps to resume listing. */
                pageToken?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject for which to list each associated AndroidApp, in the format: projects/PROJECT_IDENTIFIER /androidApps Refer to the
                 * `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Controls whether Apps in the DELETED state should be returned in the response. If not specified, only `ACTIVE` Apps will be returned. */
                showDeleted?:
                    boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAndroidAppsResponse>;
            /** Updates the attributes of the specified AndroidApp. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the AndroidApp to update. Note that the following fields are immutable: `name`, `app_id`, `project_id`, and `package_name`. To update `state`, use any
                 * of the following endpoints: RemoveAndroidApp or UndeleteAndroidApp.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AndroidApp;
            }): Request<AndroidApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the AndroidApp to update. Note that the following fields are immutable: `name`, `app_id`, `project_id`, and `package_name`. To update `state`, use any
                 * of the following endpoints: RemoveAndroidApp or UndeleteAndroidApp.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AndroidApp): Request<AndroidApp>;
            /** Removes the specified AndroidApp from the FirebaseProject. */
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name) field
                 * for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RemoveAndroidAppRequest;
            }): Request<Operation>;
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name) field
                 * for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RemoveAndroidAppRequest): Request<Operation>;
            /** Restores the specified AndroidApp to the FirebaseProject. */
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name) field
                 * for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    UndeleteAndroidAppRequest;
            }): Request<Operation>;
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the AndroidApp [name](../projects.androidApps#AndroidApp.FIELDS.name) field
                 * for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: UndeleteAndroidAppRequest): Request<Operation>;
            sha:
                ShaResource;
        }
        interface AvailableLocationsResource {
            /**
             * **DEPRECATED.** _Instead, use the applicable resource-specific REST API (or associated documentation, as needed) to determine valid locations for each resource used in your
             * Project._ Lists the valid Google Cloud Platform (GCP) resource locations for the specified Project (including a FirebaseProject). One of these locations can be selected as the
             * Project's [_default_ GCP resource location](https://firebase.google.com/docs/projects/locations), which is the geographical location where the Project's resources, such as Cloud
             * Firestore, will be provisioned by default. However, if the default GCP resource location has already been set for the Project, then this setting cannot be changed. This call checks
             * for any possible [location restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations) for the specified Project and, thus, might return a
             * subset of all possible GCP resource locations. To list all GCP resource locations (regardless of any restrictions), call the endpoint without specifying a unique project identifier
             * (that is, `/v1beta1/{parent=projects/-}/listAvailableLocations`). To call `ListAvailableLocations` with a specified project, a member must be at minimum a Viewer of the Project.
             * Calls without a specified project do not require any specific project permissions.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of locations to return in the response. The server may return fewer than this value at its discretion. If no value is specified (or too large a value is
                 * specified), then the server will impose its own limit. This value cannot be negative.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `ListAvailableLocations` indicating where in the list of locations to resume listing. */
                pageToken?:
                    string;
                /**
                 * The FirebaseProject for which to list GCP resource locations, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values. If no unique project identifier is specified (that is, `projects/-`), the
                 * returned list does not take into account org-specific or project-specific location restrictions.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAvailableLocationsResponse>;
        }
        interface DefaultLocationResource {
            /**
             * **DEPRECATED.** _Instead, use the applicable resource-specific REST API to set the location for each resource used in your Project._ Sets the default Google Cloud Platform (GCP)
             * resource location for the specified FirebaseProject. This method creates an App Engine application with a [default Cloud Storage
             * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket), located in the specified
             * [`locationId`](#body.request_body.FIELDS.location_id). This location must be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations).
             * After the default GCP resource location is finalized, or if it was already set, it cannot be changed. The default GCP resource location for the specified `FirebaseProject` might
             * already be set because either the underlying GCP `Project` already has an App Engine application or `FinalizeDefaultLocation` was previously called with a specified `locationId`.
             * Any new calls to `FinalizeDefaultLocation` with a *different* specified `locationId` will return a 409 error. The result of this call is an [`Operation`](../../v1beta1/operations),
             * which can be used to track the provisioning process. The [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the `Operation` is google.protobuf.Empty. The
             * `Operation` can be polled by its `name` using GetOperation until `done` is true. When `done` is true, the `Operation` has either succeeded or failed. If the `Operation` has
             * succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be set to a google.protobuf.Empty; if the `Operation` has failed, its `error` will be set to a
             * google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no need to call DeleteOperation. All fields listed in the [request body](#request-body) are
             * required. To call `FinalizeDefaultLocation`, a member must be an Owner of the Project.
             */
            finalize(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the FirebaseProject for which the default GCP resource location will be set, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    FinalizeDefaultLocationRequest;
            }): Request<Operation>;
            finalize(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the FirebaseProject for which the default GCP resource location will be set, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: FinalizeDefaultLocationRequest): Request<Operation>;
        }
        interface IosAppsResource {
            /**
             * Requests the creation of a new IosApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The
             * `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject in which to create an IosApp, in the format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    IosApp;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject in which to create an IosApp, in the format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: IosApp): Request<Operation>;
            /** Gets the specified IosApp. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from Sub-Collection
                 * access pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer to the `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
                 * PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<IosApp>;
            /** Gets the configuration artifact associated with the specified IosApp. */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the App configuration to download, in the format: projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a unique identifier, the Unique
                 * Resource from Sub-Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer to the `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name)
                 * field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<IosAppConfig>;
            /**
             * Lists each IosApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests
             * are made with a `pageToken`.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of Apps to return in the response. The server may return fewer than this at its discretion. If no value is specified (or too large a value is specified), the
                 * server will impose its own limit.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `ListIosApps` indicating where in the set of Apps to resume listing. */
                pageToken?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject for which to list each associated IosApp, in the format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Controls whether Apps in the DELETED state should be returned in the response. If not specified, only `ACTIVE` Apps will be returned. */
                showDeleted?:
                    boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListIosAppsResponse>;
            /** Updates the attributes of the specified IosApp. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the IosApp to update. Note that the following fields are immutable: `name`, `app_id`, `project_id`, and `bundle_id`. To update `state`, use any of the
                 * following endpoints: RemoveIosApp or UndeleteIosApp.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    IosApp;
            }): Request<IosApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the IosApp to update. Note that the following fields are immutable: `name`, `app_id`, `project_id`, and `bundle_id`. To update `state`, use any of the
                 * following endpoints: RemoveIosApp or UndeleteIosApp.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: IosApp): Request<IosApp>;
            /** Removes the specified IosApp from the FirebaseProject. */
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the IosApp, in the format: projects/ PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer to the IosApp [name](../projects.iosApps#IosApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RemoveIosAppRequest;
            }): Request<Operation>;
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the IosApp, in the format: projects/ PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer to the IosApp [name](../projects.iosApps#IosApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RemoveIosAppRequest): Request<Operation>;
            /** Restores the specified IosApp to the FirebaseProject. */
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the IosApp, in the format: projects/ PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer to the IosApp [name](../projects.iosApps#IosApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    UndeleteIosAppRequest;
            }): Request<Operation>;
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the IosApp, in the format: projects/ PROJECT_IDENTIFIER/iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID Refer to the IosApp [name](../projects.iosApps#IosApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: UndeleteIosAppRequest): Request<Operation>;
        }
        interface WebAppsResource {
            /**
             * Requests the creation of a new WebApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The
             * `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject in which to create a WebApp, in the format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    WebApp;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject in which to create a WebApp, in the format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: WebApp): Request<Operation>;
            /** Gets the specified WebApp. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from Sub-Collection
                 * access pattern may be used here, in the format: projects/-/webApps/APP_ID Refer to the `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
                 * PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<WebApp>;
            /** Gets the configuration artifact associated with the specified WebApp. */
            getConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the WebApp configuration to download, in the format: projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a unique identifier, the Unique
                 * Resource from Sub-Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID Refer to the `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name)
                 * field for details about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<WebAppConfig>;
            /**
             * Lists each WebApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests
             * are made with a `pageToken`.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of Apps to return in the response. The server may return fewer than this value at its discretion. If no value is specified (or too large a value is
                 * specified), then the server will impose its own limit.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `ListWebApps` indicating where in the set of Apps to resume listing. */
                pageToken?:
                    string;
                /**
                 * The resource name of the parent FirebaseProject for which to list each associated WebApp, in the format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Controls whether Apps in the DELETED state should be returned in the response. If not specified, only `ACTIVE` Apps will be returned. */
                showDeleted?:
                    boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListWebAppsResponse>;
            /** Updates the attributes of the specified WebApp. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the WebApp to update. Note that the following fields are immutable: `name`, `app_id`, and `project_id`. To update `state`, use any of the following
                 * endpoints: RemoveWebApp or UndeleteWebApp.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    WebApp;
            }): Request<WebApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the WebApp to update. Note that the following fields are immutable: `name`, `app_id`, and `project_id`. To update `state`, use any of the following
                 * endpoints: RemoveWebApp or UndeleteWebApp.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: WebApp): Request<WebApp>;
            /** Removes the specified WebApp from the FirebaseProject. */
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the WebApp, in the format: projects/ PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID Refer to the WebApp [name](../projects.webApps#WebApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RemoveWebAppRequest;
            }): Request<Operation>;
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the WebApp, in the format: projects/ PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID Refer to the WebApp [name](../projects.webApps#WebApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RemoveWebAppRequest): Request<Operation>;
            /** Restores the specified WebApp to the FirebaseProject. */
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the WebApp, in the format: projects/ PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID Refer to the WebApp [name](../projects.webApps#WebApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    UndeleteWebAppRequest;
            }): Request<Operation>;
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the WebApp, in the format: projects/ PROJECT_IDENTIFIER/webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from
                 * Sub-Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID Refer to the WebApp [name](../projects.webApps#WebApp.FIELDS.name) field for details
                 * about PROJECT_IDENTIFIER and APP_ID values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: UndeleteWebAppRequest): Request<Operation>;
        }
        interface ProjectsResource {
            /**
             * Adds Firebase resources to the specified existing [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-manager/reference/rest/v1/projects). Since a
             * FirebaseProject is actually also a GCP `Project`, a `FirebaseProject` has the same underlying GCP identifiers (`projectNumber` and `projectId`). This allows for easy interop with
             * Google APIs. The result of this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning process by calling GetOperation until
             * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the `Operation` succeeded, its
             * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a FirebaseProject; if the `Operation` failed, its
             * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no need to call
             * DeleteOperation. This method does not modify any billing account information on the underlying GCP `Project`. To call `AddFirebase`, a project member or service account must have
             * the following permissions (the IAM roles of Editor and Owner contain these permissions): `firebase.projects.update`, `resourcemanager.projects.get`, `serviceusage.services.enable`,
             * and `serviceusage.services.get`.
             */
            addFirebase(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /**
                 * The resource name of the GCP `Project` to which Firebase resources will be added, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values. After calling `AddFirebase`, the unique Project identifiers (
                 * [`projectNumber`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
                 * [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP `Project` are also the identifiers of the
                 * FirebaseProject.
                 */
                project:
                    string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AddFirebaseRequest;
            }): Request<Operation>;
            addFirebase(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /**
                 * The resource name of the GCP `Project` to which Firebase resources will be added, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values. After calling `AddFirebase`, the unique Project identifiers (
                 * [`projectNumber`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
                 * [`projectId`](https://cloud.google.com/resource-manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP `Project` are also the identifiers of the
                 * FirebaseProject.
                 */
                project:
                    string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AddFirebaseRequest): Request<Operation>;
            /**
             * Links the specified FirebaseProject with an existing [Google Analytics account](http://www.google.com/analytics/). Using this call, you can either: - Specify an `analyticsAccountId`
             * to provision a new Google Analytics property within the specified account and associate the new property with the `FirebaseProject`. - Specify an existing `analyticsPropertyId` to
             * associate the property with the `FirebaseProject`. Note that when you call `AddGoogleAnalytics`: 1. The first check determines if any existing data streams in the Google Analytics
             * property correspond to any existing Firebase Apps in the `FirebaseProject` (based on the `packageName` or `bundleId` associated with the data stream). Then, as applicable, the data
             * streams and apps are linked. Note that this auto-linking only applies to `AndroidApps` and `IosApps`. 2. If no corresponding data streams are found for the Firebase Apps, new data
             * streams are provisioned in the Google Analytics property for each of the Firebase Apps. Note that a new data stream is always provisioned for a Web App even if it was previously
             * associated with a data stream in the Analytics property. Learn more about the hierarchy and structure of Google Analytics accounts in the [Analytics
             * documentation](https://support.google.com/analytics/answer/9303323). The result of this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the
             * provisioning process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the `Operation` has either succeeded or
             * failed. If the `Operation` succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to an AnalyticsDetails; if the `Operation` failed, its
             * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. To call `AddGoogleAnalytics`, a project member must be an Owner for the existing
             * `FirebaseProject` and have the [`Edit` permission](https://support.google.com/analytics/answer/2884495) for the Google Analytics account. If the `FirebaseProject` already has Google
             * Analytics enabled, and you call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different from the currently associated property, then the call will fail. Analytics may
             * have already been enabled in the Firebase console or by specifying `timeZone` and `regionCode` in the call to [`AddFirebase`](../../v1beta1/projects/addFirebase).
             */
            addGoogleAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the FirebaseProject to link to an existing Google Analytics account, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AddGoogleAnalyticsRequest;
            }): Request<Operation>;
            addGoogleAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the FirebaseProject to link to an existing Google Analytics account, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AddGoogleAnalyticsRequest): Request<Operation>;
            /** Gets the specified FirebaseProject. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER Refer to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
                 * details about PROJECT_IDENTIFIER values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<FirebaseProject>;
            /**
             * Gets the configuration artifact associated with the specified FirebaseProject, which can be used by servers to simplify initialization. Typically, this configuration is used with
             * the Firebase Admin SDK [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk) command.
             */
            getAdminSdkConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER/adminSdkConfig Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AdminSdkConfig>;
            /**
             * Gets the Google Analytics details currently associated with the specified FirebaseProject. If the `FirebaseProject` is not yet linked to Google Analytics, then the response to
             * `GetAnalyticsDetails` is `NOT_FOUND`.
             */
            getAnalyticsDetails(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AnalyticsDetails>;
            /**
             * Lists each FirebaseProject accessible to the caller. The elements are returned in no particular order, but they will be a consistent view of the Projects when additional requests
             * are made with a `pageToken`. This method is eventually consistent with Project mutations, which means newly provisioned Projects and recent modifications to existing Projects might
             * not be reflected in the set of Projects. The list will include only ACTIVE Projects. Use GetFirebaseProject for consistent reads as well as for additional Project details.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of Projects to return in the response. The server may return fewer than this at its discretion. If no value is specified (or too large a value is specified),
                 * the server will impose its own limit. This value cannot be negative.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `ListFirebaseProjects` indicating where in the set of Projects to resume listing. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Optional. Controls whether Projects in the DELETED state should be returned in the response. If not specified, only `ACTIVE` Projects will be returned. */
                showDeleted?:
                    boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListFirebaseProjectsResponse>;
            /** Updates the attributes of the specified FirebaseProject. All [query parameters](#query-parameters) are required. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the FirebaseProject to update. Note that the following fields are immutable: `name`, `project_id`, and `project_number`. To update `state`, use any of
                 * the following Google Cloud endpoints: [`projects.delete`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/delete) or
                 * [`projects.undelete`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/undelete)
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    FirebaseProject;
            }): Request<FirebaseProject>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the Project's
                 * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
                 * using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the
                 * `ProjectId`.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Specifies which fields of the FirebaseProject to update. Note that the following fields are immutable: `name`, `project_id`, and `project_number`. To update `state`, use any of
                 * the following Google Cloud endpoints: [`projects.delete`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/delete) or
                 * [`projects.undelete`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/undelete)
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: FirebaseProject): Request<FirebaseProject>;
            /**
             * Unlinks the specified FirebaseProject from its Google Analytics account. This call removes the association of the specified `FirebaseProject` with its current Google Analytics
             * property. However, this call does not delete the Google Analytics resources, such as the Google Analytics property or any data streams. These resources may be re-associated later to
             * the `FirebaseProject` by calling [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps, this
             * call re-links data streams with their corresponding apps. However, for Web Apps, this call provisions a *new* data stream for each Web App. To call `RemoveAnalytics`, a project
             * member must be an Owner for the `FirebaseProject`.
             */
            removeAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the FirebaseProject to unlink from its Google Analytics account, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RemoveAnalyticsRequest;
            }): Request<{}>;
            removeAnalytics(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The resource name of the FirebaseProject to unlink from its Google Analytics account, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
                 * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RemoveAnalyticsRequest): Request<{}>;
            /**
             * Lists all available Apps for the specified FirebaseProject. This is a convenience method. Typically, interaction with an App should be done using the platform-specific service, but
             * some tool use-cases require a summary of all known Apps (such as for App selector interfaces).
             */
            searchApps(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * A query string compatible with Google's [AIP-160 standard](https://google.aip.dev/160). Use any of the following fields in a query: *
                 * [`app_id`](../projects/searchApps#FirebaseAppInfo.FIELDS.app_id) * [`namespace`](../projects/searchApps#FirebaseAppInfo.FIELDS.namespace) *
                 * [`platform`](../projects/searchApps#FirebaseAppInfo.FIELDS.platform) This query also supports the following "virtual" fields. These are fields which are not actually part of the
                 * returned resource object, but they can be queried as if they are pre-populated with specific values. * `sha1_hash` or `sha1_hashes`: This field is considered to be a _repeated_
                 * `string` field, populated with the list of all SHA-1 certificate fingerprints registered with the AndroidApp. This list is empty if the App is not an `AndroidApp`. *
                 * `sha256_hash` or `sha256_hashes`: This field is considered to be a _repeated_ `string` field, populated with the list of all SHA-256 certificate fingerprints registered with the
                 * AndroidApp. This list is empty if the App is not an `AndroidApp`. * `app_store_id`: This field is considered to be a _singular_ `string` field, populated with the Apple App
                 * Store ID registered with the IosApp. This field is empty if the App is not an `IosApp`. * `team_id`: This field is considered to be a _singular_ `string` field, populated with
                 * the Apple team ID registered with the IosApp. This field is empty if the App is not an `IosApp`.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of Apps to return in the response. The server may return fewer than this value at its discretion. If no value is specified (or too large a value is
                 * specified), then the server will impose its own limit. This value cannot be negative.
                 */
                pageSize?:
                    number;
                /** Token returned from a previous call to `SearchFirebaseApps` indicating where in the set of Apps to resume listing. */
                pageToken?:
                    string;
                /**
                 * The parent FirebaseProject for which to list Apps, in the format: projects/ PROJECT_IDENTIFIER Refer to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name)
                 * field for details about PROJECT_IDENTIFIER values.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Controls whether Apps in the DELETED state should be returned. If not specified, only `ACTIVE` Apps will be returned. */
                showDeleted?:
                    boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<SearchFirebaseAppsResponse>;
            androidApps:
                AndroidAppsResource;
            availableLocations:
                AvailableLocationsResource;
            defaultLocation:
                DefaultLocationResource;
            iosApps:
                IosAppsResource;
            webApps:
                WebAppsResource;
        }

        const availableProjects: AvailableProjectsResource;

        const operations: OperationsResource;

        const projects: ProjectsResource;
    }
}
