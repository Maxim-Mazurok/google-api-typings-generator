/* Type definitions for non-npm package Travel Impact Model API v1 0.0 */
// Project: https://developers.google.com/travel/impact-model
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://travelimpactmodel.googleapis.com/$discovery/rest?version=v1
// Revision: 20250107

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Travel Impact Model API v1 */
  function load(
    urlOrObject: 'https://travelimpactmodel.googleapis.com/$discovery/rest?version=v1'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'travelimpactmodel', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'travelimpactmodel',
    version: 'v1',
    callback: () => any
  ): void;

  namespace travelimpactmodel {
    interface ComputeFlightEmissionsRequest {
      /** Required. Direct flights to return emission estimates for. */
      flights?: Flight[];
    }
    interface ComputeFlightEmissionsResponse {
      /** List of flight legs with emission estimates. */
      flightEmissions?: FlightWithEmissions[];
      /** The model version under which emission estimates for all flights in this response were computed. */
      modelVersion?: ModelVersion;
    }
    interface Date {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface EmissionsGramsPerPax {
      /** Emissions for one passenger in business class in grams. This field is always computed and populated, regardless of whether the aircraft has business class seats or not. */
      business?: number;
      /** Emissions for one passenger in economy class in grams. This field is always computed and populated, regardless of whether the aircraft has economy class seats or not. */
      economy?: number;
      /** Emissions for one passenger in first class in grams. This field is always computed and populated, regardless of whether the aircraft has first class seats or not. */
      first?: number;
      /** Emissions for one passenger in premium economy class in grams. This field is always computed and populated, regardless of whether the aircraft has premium economy class seats or not. */
      premiumEconomy?: number;
    }
    interface Flight {
      /** Required. Date of the flight in the time zone of the origin airport. Must be a date in the present or future. */
      departureDate?: Date;
      /** Required. IATA airport code for flight destination, e.g. "JFK". */
      destination?: string;
      /** Required. Flight number, e.g. 324. */
      flightNumber?: number;
      /** Required. IATA carrier code, e.g. "AA". */
      operatingCarrierCode?: string;
      /** Required. IATA airport code for flight origin, e.g. "LHR". */
      origin?: string;
    }
    interface FlightWithEmissions {
      /** Optional. Per-passenger emission estimate numbers. Will not be present if emissions could not be computed. For the list of reasons why emissions could not be computed, see ComputeFlightEmissions. This field uses wtw emissions aka ttw_emissions_grams_per_pax + wtt_emissions_grams_per_pax. */
      emissionsGramsPerPax?: EmissionsGramsPerPax;
      /** Required. Matches the flight identifiers in the request. Note: all IATA codes are capitalized. */
      flight?: Flight;
    }
    interface ModelVersion {
      /** Dated versions: Model datasets are recreated with refreshed input data but no change to the algorithms regularly. */
      dated?: string;
      /** Major versions: Major changes to methodology (e.g. adding new data sources to the model that lead to major output changes). Such changes will be infrequent and announced well in advance. Might involve API version changes, which will respect guidelines in https://cloud.google.com/endpoints/docs/openapi/versioning-an-api#backwards-incompatible */
      major?: number;
      /** Minor versions: Changes to the model that, while being consistent across schema versions, change the model parameters or implementation. */
      minor?: number;
      /** Patch versions: Implementation changes meant to address bugs or inaccuracies in the model implementation. */
      patch?: number;
    }
    interface FlightsResource {
      /** Stateless method to retrieve emission estimates. Details on how emission estimates are computed: https://github.com/google/travel-impact-model The response will contain all entries that match the input flight legs, in the same order. If there are no estimates available for a certain flight leg, the response will return the flight leg object with empty emission fields. The request will still be considered successful. Reasons for missing emission estimates include: - The flight is unknown to the server. - The input flight leg is missing one or more identifiers. - The flight date is in the past. - The aircraft type is not supported by the model. - Missing seat configuration. The request can contain up to 1000 flight legs. If the request has more than 1000 direct flights, if will fail with an INVALID_ARGUMENT error. */
      computeFlightEmissions(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ComputeFlightEmissionsRequest;
      }): Request<ComputeFlightEmissionsResponse>;
      computeFlightEmissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ComputeFlightEmissionsRequest
      ): Request<ComputeFlightEmissionsResponse>;
    }

    const flights: FlightsResource;
  }
}
