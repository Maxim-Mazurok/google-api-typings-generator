/* This is stub file for gapi.client.gkehub-v2beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250706

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://gkehub.googleapis.com/$discovery/rest?version=v2beta',
  );
  /** now we can use gapi.client.gkehub */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.gkehub.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.gkehub.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates membershipFeature under a given parent. */
    await gapi.client.gkehub.projects.locations.memberships.features.create(
      {
        featureId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        lifecycleState: {
          state: 'Test string',
        },
        name: 'Test string',
        spec: {
          cloudbuild: {
            securityPolicy: 'Test string',
            version: 'Test string',
          },
          configmanagement: {
            binauthz: {
              enabled: true,
            },
            cluster: 'Test string',
            configSync: {
              deploymentOverrides: [
                {
                  containers: [
                    {
                      containerName: 'Test string',
                      cpuLimit: 'Test string',
                      cpuRequest: 'Test string',
                      memoryLimit: 'Test string',
                      memoryRequest: 'Test string',
                    },
                  ],
                  deploymentName: 'Test string',
                  deploymentNamespace: 'Test string',
                },
              ],
              enabled: true,
              git: {
                gcpServiceAccountEmail: 'Test string',
                httpsProxy: 'Test string',
                policyDir: 'Test string',
                secretType: 'Test string',
                syncBranch: 'Test string',
                syncRepo: 'Test string',
                syncRev: 'Test string',
                syncWaitSecs: 'Test string',
              },
              metricsGcpServiceAccountEmail: 'Test string',
              oci: {
                gcpServiceAccountEmail: 'Test string',
                policyDir: 'Test string',
                secretType: 'Test string',
                syncRepo: 'Test string',
                syncWaitSecs: 'Test string',
              },
              preventDrift: true,
              sourceFormat: 'Test string',
              stopSyncing: true,
            },
            hierarchyController: {
              enabled: true,
              enableHierarchicalResourceQuota: true,
              enablePodTreeLabels: true,
            },
            management: 'Test string',
            policyController: {
              auditIntervalSeconds: 'Test string',
              enabled: true,
              exemptableNamespaces: ['Test string'],
              logDeniesEnabled: true,
              monitoring: {
                backends: ['Test string'],
              },
              mutationEnabled: true,
              referentialRulesEnabled: true,
              templateLibraryInstalled: true,
              updateTime: 'Test string',
            },
            version: 'Test string',
          },
          identityservice: {
            authMethods: [
              {
                azureadConfig: {
                  clientId: 'Test string',
                  clientSecret: 'Test string',
                  encryptedClientSecret: 'Test string',
                  groupFormat: 'Test string',
                  kubectlRedirectUri: 'Test string',
                  tenant: 'Test string',
                  userClaim: 'Test string',
                },
                googleConfig: {
                  disable: true,
                },
                ldapConfig: {
                  group: {
                    baseDn: 'Test string',
                    filter: 'Test string',
                    idAttribute: 'Test string',
                  },
                  server: {
                    certificateAuthorityData: 'Test string',
                    connectionType: 'Test string',
                    host: 'Test string',
                  },
                  serviceAccount: {
                    simpleBindCredentials: {
                      dn: 'Test string',
                      encryptedPassword: 'Test string',
                      password: 'Test string',
                    },
                  },
                  user: {
                    baseDn: 'Test string',
                    filter: 'Test string',
                    idAttribute: 'Test string',
                    loginAttribute: 'Test string',
                  },
                },
                name: 'Test string',
                oidcConfig: {
                  certificateAuthorityData: 'Test string',
                  clientId: 'Test string',
                  clientSecret: 'Test string',
                  deployCloudConsoleProxy: true,
                  enableAccessToken: true,
                  encryptedClientSecret: 'Test string',
                  extraParams: 'Test string',
                  groupPrefix: 'Test string',
                  groupsClaim: 'Test string',
                  issuerUri: 'Test string',
                  kubectlRedirectUri: 'Test string',
                  scopes: 'Test string',
                  userClaim: 'Test string',
                  userPrefix: 'Test string',
                },
                proxy: 'Test string',
                samlConfig: {
                  attributeMapping: {
                    A: 'Test string',
                  },
                  groupPrefix: 'Test string',
                  groupsAttribute: 'Test string',
                  identityProviderCertificates: ['Test string'],
                  identityProviderId: 'Test string',
                  identityProviderSsoUri: 'Test string',
                  userAttribute: 'Test string',
                  userPrefix: 'Test string',
                },
              },
            ],
            identityServiceOptions: {
              diagnosticInterface: {
                enabled: true,
                expirationTime: 'Test string',
              },
              sessionDuration: 'Test string',
            },
          },
          origin: {
            type: 'Test string',
          },
          policycontroller: {
            policyControllerHubConfig: {
              auditIntervalSeconds: 'Test string',
              constraintViolationLimit: 'Test string',
              deploymentConfigs: {
                A: {
                  containerResources: {
                    limits: {
                      cpu: 'Test string',
                      memory: 'Test string',
                    },
                    requests: {
                      cpu: 'Test string',
                      memory: 'Test string',
                    },
                  },
                  podAffinity: 'Test string',
                  podAntiAffinity: true,
                  podTolerations: [
                    {
                      effect: 'Test string',
                      key: 'Test string',
                      operator: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  replicaCount: 'Test string',
                },
              },
              exemptableNamespaces: ['Test string'],
              installSpec: 'Test string',
              logDeniesEnabled: true,
              monitoring: {
                backends: ['Test string'],
              },
              mutationEnabled: true,
              policyContent: {
                bundles: {
                  A: {
                    exemptedNamespaces: ['Test string'],
                  },
                },
                templateLibrary: {
                  installation: 'Test string',
                },
              },
              referentialRulesEnabled: true,
            },
            version: 'Test string',
          },
          rbacrolebindingactuation: {},
          servicemesh: {
            configApi: 'Test string',
            controlPlane: 'Test string',
            defaultChannel: 'Test string',
            management: 'Test string',
          },
          workloadcertificate: {
            certificateManagement: 'Test string',
          },
        },
        state: {
          appdevexperience: {
            networkingInstallSucceeded: {
              code: 'Test string',
              description: 'Test string',
            },
          },
          clusterupgrade: {
            ignored: {
              ignoredTime: 'Test string',
              reason: 'Test string',
            },
            upgrades: [
              {
                status: {
                  code: 'Test string',
                  reason: 'Test string',
                  updateTime: 'Test string',
                },
                upgrade: {
                  name: 'Test string',
                  version: 'Test string',
                },
              },
            ],
          },
          configmanagement: {
            binauthzState: {
              version: {
                webhookVersion: 'Test string',
              },
              webhook: 'Test string',
            },
            clusterName: 'Test string',
            configSyncState: {
              clusterLevelStopSyncingState: 'Test string',
              crCount: 42,
              deploymentState: {
                admissionWebhook: 'Test string',
                gitSync: 'Test string',
                importer: 'Test string',
                monitor: 'Test string',
                otelCollector: 'Test string',
                reconcilerManager: 'Test string',
                resourceGroupControllerManager: 'Test string',
                rootReconciler: 'Test string',
                syncer: 'Test string',
              },
              errors: [
                {
                  errorMessage: 'Test string',
                },
              ],
              reposyncCrd: 'Test string',
              rootsyncCrd: 'Test string',
              state: 'Test string',
              syncState: {
                code: 'Test string',
                errors: [
                  {
                    code: 'Test string',
                    errorMessage: 'Test string',
                    errorResources: [
                      {
                        resourceGvk: {
                          group: 'Test string',
                          kind: 'Test string',
                          version: 'Test string',
                        },
                        resourceName: 'Test string',
                        resourceNamespace: 'Test string',
                        sourcePath: 'Test string',
                      },
                    ],
                  },
                ],
                importToken: 'Test string',
                lastSync: 'Test string',
                lastSyncTime: 'Test string',
                sourceToken: 'Test string',
                syncToken: 'Test string',
              },
              version: {
                admissionWebhook: 'Test string',
                gitSync: 'Test string',
                importer: 'Test string',
                monitor: 'Test string',
                otelCollector: 'Test string',
                reconcilerManager: 'Test string',
                resourceGroupControllerManager: 'Test string',
                rootReconciler: 'Test string',
                syncer: 'Test string',
              },
            },
            hierarchyControllerState: {
              state: {
                extension: 'Test string',
                hnc: 'Test string',
              },
              version: {
                extension: 'Test string',
                hnc: 'Test string',
              },
            },
            membershipSpec: {
              binauthz: {
                enabled: true,
              },
              cluster: 'Test string',
              configSync: {
                deploymentOverrides: [
                  {
                    containers: [
                      {
                        containerName: 'Test string',
                        cpuLimit: 'Test string',
                        cpuRequest: 'Test string',
                        memoryLimit: 'Test string',
                        memoryRequest: 'Test string',
                      },
                    ],
                    deploymentName: 'Test string',
                    deploymentNamespace: 'Test string',
                  },
                ],
                enabled: true,
                git: {
                  gcpServiceAccountEmail: 'Test string',
                  httpsProxy: 'Test string',
                  policyDir: 'Test string',
                  secretType: 'Test string',
                  syncBranch: 'Test string',
                  syncRepo: 'Test string',
                  syncRev: 'Test string',
                  syncWaitSecs: 'Test string',
                },
                metricsGcpServiceAccountEmail: 'Test string',
                oci: {
                  gcpServiceAccountEmail: 'Test string',
                  policyDir: 'Test string',
                  secretType: 'Test string',
                  syncRepo: 'Test string',
                  syncWaitSecs: 'Test string',
                },
                preventDrift: true,
                sourceFormat: 'Test string',
                stopSyncing: true,
              },
              hierarchyController: {
                enabled: true,
                enableHierarchicalResourceQuota: true,
                enablePodTreeLabels: true,
              },
              management: 'Test string',
              policyController: {
                auditIntervalSeconds: 'Test string',
                enabled: true,
                exemptableNamespaces: ['Test string'],
                logDeniesEnabled: true,
                monitoring: {
                  backends: ['Test string'],
                },
                mutationEnabled: true,
                referentialRulesEnabled: true,
                templateLibraryInstalled: true,
                updateTime: 'Test string',
              },
              version: 'Test string',
            },
            operatorState: {
              deploymentState: 'Test string',
              errors: [
                {
                  errorMessage: 'Test string',
                },
              ],
              version: 'Test string',
            },
            policyControllerState: {
              deploymentState: {
                gatekeeperAudit: 'Test string',
                gatekeeperControllerManagerState: 'Test string',
                gatekeeperMutation: 'Test string',
              },
              migration: {
                copyTime: 'Test string',
                stage: 'Test string',
              },
              version: {
                version: 'Test string',
              },
            },
          },
          identityservice: {
            failureReason: 'Test string',
            installedVersion: 'Test string',
            memberConfig: {
              authMethods: [
                {
                  azureadConfig: {
                    clientId: 'Test string',
                    clientSecret: 'Test string',
                    encryptedClientSecret: 'Test string',
                    groupFormat: 'Test string',
                    kubectlRedirectUri: 'Test string',
                    tenant: 'Test string',
                    userClaim: 'Test string',
                  },
                  googleConfig: {
                    disable: true,
                  },
                  ldapConfig: {
                    group: {
                      baseDn: 'Test string',
                      filter: 'Test string',
                      idAttribute: 'Test string',
                    },
                    server: {
                      certificateAuthorityData: 'Test string',
                      connectionType: 'Test string',
                      host: 'Test string',
                    },
                    serviceAccount: {
                      simpleBindCredentials: {
                        dn: 'Test string',
                        encryptedPassword: 'Test string',
                        password: 'Test string',
                      },
                    },
                    user: {
                      baseDn: 'Test string',
                      filter: 'Test string',
                      idAttribute: 'Test string',
                      loginAttribute: 'Test string',
                    },
                  },
                  name: 'Test string',
                  oidcConfig: {
                    certificateAuthorityData: 'Test string',
                    clientId: 'Test string',
                    clientSecret: 'Test string',
                    deployCloudConsoleProxy: true,
                    enableAccessToken: true,
                    encryptedClientSecret: 'Test string',
                    extraParams: 'Test string',
                    groupPrefix: 'Test string',
                    groupsClaim: 'Test string',
                    issuerUri: 'Test string',
                    kubectlRedirectUri: 'Test string',
                    scopes: 'Test string',
                    userClaim: 'Test string',
                    userPrefix: 'Test string',
                  },
                  proxy: 'Test string',
                  samlConfig: {
                    attributeMapping: {
                      A: 'Test string',
                    },
                    groupPrefix: 'Test string',
                    groupsAttribute: 'Test string',
                    identityProviderCertificates: ['Test string'],
                    identityProviderId: 'Test string',
                    identityProviderSsoUri: 'Test string',
                    userAttribute: 'Test string',
                    userPrefix: 'Test string',
                  },
                },
              ],
              identityServiceOptions: {
                diagnosticInterface: {
                  enabled: true,
                  expirationTime: 'Test string',
                },
                sessionDuration: 'Test string',
              },
            },
            state: 'Test string',
          },
          metering: {
            lastMeasurementTime: 'Test string',
            preciseLastMeasuredClusterVcpuCapacity: 42,
          },
          policycontroller: {
            componentStates: {
              A: {
                details: 'Test string',
                state: 'Test string',
              },
            },
            policyContentState: {
              bundleStates: {
                A: {
                  details: 'Test string',
                  state: 'Test string',
                },
              },
              referentialSyncConfigState: {
                details: 'Test string',
                state: 'Test string',
              },
              templateLibraryState: {
                details: 'Test string',
                state: 'Test string',
              },
            },
            state: 'Test string',
          },
          rbacrolebindingactuation: {
            rbacrolebindingStates: {
              A: {
                description: 'Test string',
                state: 'Test string',
                updateTime: 'Test string',
              },
            },
          },
          servicemesh: {
            analysisMessages: [
              {
                args: {
                  A: 42,
                },
                description: 'Test string',
                messageBase: {
                  documentationUrl: 'Test string',
                  level: 'Test string',
                  type: {
                    code: 'Test string',
                    displayName: 'Test string',
                  },
                },
                resourcePaths: ['Test string'],
              },
            ],
            conditions: [
              {
                code: 'Test string',
                details: 'Test string',
                documentationLink: 'Test string',
                severity: 'Test string',
              },
            ],
            configApiVersion: 'Test string',
            controlPlaneManagement: {
              details: [
                {
                  code: 'Test string',
                  details: 'Test string',
                },
              ],
              implementation: 'Test string',
              state: 'Test string',
            },
            dataPlaneManagement: {
              details: [
                {
                  code: 'Test string',
                  details: 'Test string',
                },
              ],
              state: 'Test string',
            },
          },
          state: {
            code: 'Test string',
            description: 'Test string',
            updateTime: 'Test string',
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Removes a membershipFeature. */
    await gapi.client.gkehub.projects.locations.memberships.features.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** ========= MembershipFeature Services ========= Gets details of a membershipFeature. */
    await gapi.client.gkehub.projects.locations.memberships.features.get({
      name: 'Test string',
    });
    /** Lists MembershipFeatures in a given project and location. */
    await gapi.client.gkehub.projects.locations.memberships.features.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing MembershipFeature. */
    await gapi.client.gkehub.projects.locations.memberships.features.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        lifecycleState: {
          state: 'Test string',
        },
        name: 'Test string',
        spec: {
          cloudbuild: {
            securityPolicy: 'Test string',
            version: 'Test string',
          },
          configmanagement: {
            binauthz: {
              enabled: true,
            },
            cluster: 'Test string',
            configSync: {
              deploymentOverrides: [
                {
                  containers: [
                    {
                      containerName: 'Test string',
                      cpuLimit: 'Test string',
                      cpuRequest: 'Test string',
                      memoryLimit: 'Test string',
                      memoryRequest: 'Test string',
                    },
                  ],
                  deploymentName: 'Test string',
                  deploymentNamespace: 'Test string',
                },
              ],
              enabled: true,
              git: {
                gcpServiceAccountEmail: 'Test string',
                httpsProxy: 'Test string',
                policyDir: 'Test string',
                secretType: 'Test string',
                syncBranch: 'Test string',
                syncRepo: 'Test string',
                syncRev: 'Test string',
                syncWaitSecs: 'Test string',
              },
              metricsGcpServiceAccountEmail: 'Test string',
              oci: {
                gcpServiceAccountEmail: 'Test string',
                policyDir: 'Test string',
                secretType: 'Test string',
                syncRepo: 'Test string',
                syncWaitSecs: 'Test string',
              },
              preventDrift: true,
              sourceFormat: 'Test string',
              stopSyncing: true,
            },
            hierarchyController: {
              enabled: true,
              enableHierarchicalResourceQuota: true,
              enablePodTreeLabels: true,
            },
            management: 'Test string',
            policyController: {
              auditIntervalSeconds: 'Test string',
              enabled: true,
              exemptableNamespaces: ['Test string'],
              logDeniesEnabled: true,
              monitoring: {
                backends: ['Test string'],
              },
              mutationEnabled: true,
              referentialRulesEnabled: true,
              templateLibraryInstalled: true,
              updateTime: 'Test string',
            },
            version: 'Test string',
          },
          identityservice: {
            authMethods: [
              {
                azureadConfig: {
                  clientId: 'Test string',
                  clientSecret: 'Test string',
                  encryptedClientSecret: 'Test string',
                  groupFormat: 'Test string',
                  kubectlRedirectUri: 'Test string',
                  tenant: 'Test string',
                  userClaim: 'Test string',
                },
                googleConfig: {
                  disable: true,
                },
                ldapConfig: {
                  group: {
                    baseDn: 'Test string',
                    filter: 'Test string',
                    idAttribute: 'Test string',
                  },
                  server: {
                    certificateAuthorityData: 'Test string',
                    connectionType: 'Test string',
                    host: 'Test string',
                  },
                  serviceAccount: {
                    simpleBindCredentials: {
                      dn: 'Test string',
                      encryptedPassword: 'Test string',
                      password: 'Test string',
                    },
                  },
                  user: {
                    baseDn: 'Test string',
                    filter: 'Test string',
                    idAttribute: 'Test string',
                    loginAttribute: 'Test string',
                  },
                },
                name: 'Test string',
                oidcConfig: {
                  certificateAuthorityData: 'Test string',
                  clientId: 'Test string',
                  clientSecret: 'Test string',
                  deployCloudConsoleProxy: true,
                  enableAccessToken: true,
                  encryptedClientSecret: 'Test string',
                  extraParams: 'Test string',
                  groupPrefix: 'Test string',
                  groupsClaim: 'Test string',
                  issuerUri: 'Test string',
                  kubectlRedirectUri: 'Test string',
                  scopes: 'Test string',
                  userClaim: 'Test string',
                  userPrefix: 'Test string',
                },
                proxy: 'Test string',
                samlConfig: {
                  attributeMapping: {
                    A: 'Test string',
                  },
                  groupPrefix: 'Test string',
                  groupsAttribute: 'Test string',
                  identityProviderCertificates: ['Test string'],
                  identityProviderId: 'Test string',
                  identityProviderSsoUri: 'Test string',
                  userAttribute: 'Test string',
                  userPrefix: 'Test string',
                },
              },
            ],
            identityServiceOptions: {
              diagnosticInterface: {
                enabled: true,
                expirationTime: 'Test string',
              },
              sessionDuration: 'Test string',
            },
          },
          origin: {
            type: 'Test string',
          },
          policycontroller: {
            policyControllerHubConfig: {
              auditIntervalSeconds: 'Test string',
              constraintViolationLimit: 'Test string',
              deploymentConfigs: {
                A: {
                  containerResources: {
                    limits: {
                      cpu: 'Test string',
                      memory: 'Test string',
                    },
                    requests: {
                      cpu: 'Test string',
                      memory: 'Test string',
                    },
                  },
                  podAffinity: 'Test string',
                  podAntiAffinity: true,
                  podTolerations: [
                    {
                      effect: 'Test string',
                      key: 'Test string',
                      operator: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  replicaCount: 'Test string',
                },
              },
              exemptableNamespaces: ['Test string'],
              installSpec: 'Test string',
              logDeniesEnabled: true,
              monitoring: {
                backends: ['Test string'],
              },
              mutationEnabled: true,
              policyContent: {
                bundles: {
                  A: {
                    exemptedNamespaces: ['Test string'],
                  },
                },
                templateLibrary: {
                  installation: 'Test string',
                },
              },
              referentialRulesEnabled: true,
            },
            version: 'Test string',
          },
          rbacrolebindingactuation: {},
          servicemesh: {
            configApi: 'Test string',
            controlPlane: 'Test string',
            defaultChannel: 'Test string',
            management: 'Test string',
          },
          workloadcertificate: {
            certificateManagement: 'Test string',
          },
        },
        state: {
          appdevexperience: {
            networkingInstallSucceeded: {
              code: 'Test string',
              description: 'Test string',
            },
          },
          clusterupgrade: {
            ignored: {
              ignoredTime: 'Test string',
              reason: 'Test string',
            },
            upgrades: [
              {
                status: {
                  code: 'Test string',
                  reason: 'Test string',
                  updateTime: 'Test string',
                },
                upgrade: {
                  name: 'Test string',
                  version: 'Test string',
                },
              },
            ],
          },
          configmanagement: {
            binauthzState: {
              version: {
                webhookVersion: 'Test string',
              },
              webhook: 'Test string',
            },
            clusterName: 'Test string',
            configSyncState: {
              clusterLevelStopSyncingState: 'Test string',
              crCount: 42,
              deploymentState: {
                admissionWebhook: 'Test string',
                gitSync: 'Test string',
                importer: 'Test string',
                monitor: 'Test string',
                otelCollector: 'Test string',
                reconcilerManager: 'Test string',
                resourceGroupControllerManager: 'Test string',
                rootReconciler: 'Test string',
                syncer: 'Test string',
              },
              errors: [
                {
                  errorMessage: 'Test string',
                },
              ],
              reposyncCrd: 'Test string',
              rootsyncCrd: 'Test string',
              state: 'Test string',
              syncState: {
                code: 'Test string',
                errors: [
                  {
                    code: 'Test string',
                    errorMessage: 'Test string',
                    errorResources: [
                      {
                        resourceGvk: {
                          group: 'Test string',
                          kind: 'Test string',
                          version: 'Test string',
                        },
                        resourceName: 'Test string',
                        resourceNamespace: 'Test string',
                        sourcePath: 'Test string',
                      },
                    ],
                  },
                ],
                importToken: 'Test string',
                lastSync: 'Test string',
                lastSyncTime: 'Test string',
                sourceToken: 'Test string',
                syncToken: 'Test string',
              },
              version: {
                admissionWebhook: 'Test string',
                gitSync: 'Test string',
                importer: 'Test string',
                monitor: 'Test string',
                otelCollector: 'Test string',
                reconcilerManager: 'Test string',
                resourceGroupControllerManager: 'Test string',
                rootReconciler: 'Test string',
                syncer: 'Test string',
              },
            },
            hierarchyControllerState: {
              state: {
                extension: 'Test string',
                hnc: 'Test string',
              },
              version: {
                extension: 'Test string',
                hnc: 'Test string',
              },
            },
            membershipSpec: {
              binauthz: {
                enabled: true,
              },
              cluster: 'Test string',
              configSync: {
                deploymentOverrides: [
                  {
                    containers: [
                      {
                        containerName: 'Test string',
                        cpuLimit: 'Test string',
                        cpuRequest: 'Test string',
                        memoryLimit: 'Test string',
                        memoryRequest: 'Test string',
                      },
                    ],
                    deploymentName: 'Test string',
                    deploymentNamespace: 'Test string',
                  },
                ],
                enabled: true,
                git: {
                  gcpServiceAccountEmail: 'Test string',
                  httpsProxy: 'Test string',
                  policyDir: 'Test string',
                  secretType: 'Test string',
                  syncBranch: 'Test string',
                  syncRepo: 'Test string',
                  syncRev: 'Test string',
                  syncWaitSecs: 'Test string',
                },
                metricsGcpServiceAccountEmail: 'Test string',
                oci: {
                  gcpServiceAccountEmail: 'Test string',
                  policyDir: 'Test string',
                  secretType: 'Test string',
                  syncRepo: 'Test string',
                  syncWaitSecs: 'Test string',
                },
                preventDrift: true,
                sourceFormat: 'Test string',
                stopSyncing: true,
              },
              hierarchyController: {
                enabled: true,
                enableHierarchicalResourceQuota: true,
                enablePodTreeLabels: true,
              },
              management: 'Test string',
              policyController: {
                auditIntervalSeconds: 'Test string',
                enabled: true,
                exemptableNamespaces: ['Test string'],
                logDeniesEnabled: true,
                monitoring: {
                  backends: ['Test string'],
                },
                mutationEnabled: true,
                referentialRulesEnabled: true,
                templateLibraryInstalled: true,
                updateTime: 'Test string',
              },
              version: 'Test string',
            },
            operatorState: {
              deploymentState: 'Test string',
              errors: [
                {
                  errorMessage: 'Test string',
                },
              ],
              version: 'Test string',
            },
            policyControllerState: {
              deploymentState: {
                gatekeeperAudit: 'Test string',
                gatekeeperControllerManagerState: 'Test string',
                gatekeeperMutation: 'Test string',
              },
              migration: {
                copyTime: 'Test string',
                stage: 'Test string',
              },
              version: {
                version: 'Test string',
              },
            },
          },
          identityservice: {
            failureReason: 'Test string',
            installedVersion: 'Test string',
            memberConfig: {
              authMethods: [
                {
                  azureadConfig: {
                    clientId: 'Test string',
                    clientSecret: 'Test string',
                    encryptedClientSecret: 'Test string',
                    groupFormat: 'Test string',
                    kubectlRedirectUri: 'Test string',
                    tenant: 'Test string',
                    userClaim: 'Test string',
                  },
                  googleConfig: {
                    disable: true,
                  },
                  ldapConfig: {
                    group: {
                      baseDn: 'Test string',
                      filter: 'Test string',
                      idAttribute: 'Test string',
                    },
                    server: {
                      certificateAuthorityData: 'Test string',
                      connectionType: 'Test string',
                      host: 'Test string',
                    },
                    serviceAccount: {
                      simpleBindCredentials: {
                        dn: 'Test string',
                        encryptedPassword: 'Test string',
                        password: 'Test string',
                      },
                    },
                    user: {
                      baseDn: 'Test string',
                      filter: 'Test string',
                      idAttribute: 'Test string',
                      loginAttribute: 'Test string',
                    },
                  },
                  name: 'Test string',
                  oidcConfig: {
                    certificateAuthorityData: 'Test string',
                    clientId: 'Test string',
                    clientSecret: 'Test string',
                    deployCloudConsoleProxy: true,
                    enableAccessToken: true,
                    encryptedClientSecret: 'Test string',
                    extraParams: 'Test string',
                    groupPrefix: 'Test string',
                    groupsClaim: 'Test string',
                    issuerUri: 'Test string',
                    kubectlRedirectUri: 'Test string',
                    scopes: 'Test string',
                    userClaim: 'Test string',
                    userPrefix: 'Test string',
                  },
                  proxy: 'Test string',
                  samlConfig: {
                    attributeMapping: {
                      A: 'Test string',
                    },
                    groupPrefix: 'Test string',
                    groupsAttribute: 'Test string',
                    identityProviderCertificates: ['Test string'],
                    identityProviderId: 'Test string',
                    identityProviderSsoUri: 'Test string',
                    userAttribute: 'Test string',
                    userPrefix: 'Test string',
                  },
                },
              ],
              identityServiceOptions: {
                diagnosticInterface: {
                  enabled: true,
                  expirationTime: 'Test string',
                },
                sessionDuration: 'Test string',
              },
            },
            state: 'Test string',
          },
          metering: {
            lastMeasurementTime: 'Test string',
            preciseLastMeasuredClusterVcpuCapacity: 42,
          },
          policycontroller: {
            componentStates: {
              A: {
                details: 'Test string',
                state: 'Test string',
              },
            },
            policyContentState: {
              bundleStates: {
                A: {
                  details: 'Test string',
                  state: 'Test string',
                },
              },
              referentialSyncConfigState: {
                details: 'Test string',
                state: 'Test string',
              },
              templateLibraryState: {
                details: 'Test string',
                state: 'Test string',
              },
            },
            state: 'Test string',
          },
          rbacrolebindingactuation: {
            rbacrolebindingStates: {
              A: {
                description: 'Test string',
                state: 'Test string',
                updateTime: 'Test string',
              },
            },
          },
          servicemesh: {
            analysisMessages: [
              {
                args: {
                  A: 42,
                },
                description: 'Test string',
                messageBase: {
                  documentationUrl: 'Test string',
                  level: 'Test string',
                  type: {
                    code: 'Test string',
                    displayName: 'Test string',
                  },
                },
                resourcePaths: ['Test string'],
              },
            ],
            conditions: [
              {
                code: 'Test string',
                details: 'Test string',
                documentationLink: 'Test string',
                severity: 'Test string',
              },
            ],
            configApiVersion: 'Test string',
            controlPlaneManagement: {
              details: [
                {
                  code: 'Test string',
                  details: 'Test string',
                },
              ],
              implementation: 'Test string',
              state: 'Test string',
            },
            dataPlaneManagement: {
              details: [
                {
                  code: 'Test string',
                  details: 'Test string',
                },
              ],
              state: 'Test string',
            },
          },
          state: {
            code: 'Test string',
            description: 'Test string',
            updateTime: 'Test string',
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.gkehub.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkehub.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkehub.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
