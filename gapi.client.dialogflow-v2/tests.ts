/* This is stub file for gapi.client.dialogflow-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240816

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://dialogflow.googleapis.com/$discovery/rest?version=v2'
  );
  /** now we can use gapi.client.dialogflow */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View, manage and query your Dialogflow agents */
    'https://www.googleapis.com/auth/dialogflow',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Deletes the specified agent. */
    await gapi.client.dialogflow.projects.deleteAgent({
      parent: 'Test string',
    });
    /** Retrieves the specified agent. */
    await gapi.client.dialogflow.projects.getAgent({
      parent: 'Test string',
    });
    /** Creates/updates the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.setAgent(
      {
        parent: 'Test string',
        updateMask: 'Test string',
      },
      {
        apiVersion: 'Test string',
        avatarUri: 'Test string',
        classificationThreshold: 42,
        defaultLanguageCode: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        enableLogging: true,
        matchMode: 'Test string',
        parent: 'Test string',
        supportedLanguageCodes: ['Test string'],
        tier: 'Test string',
        timeZone: 'Test string',
      }
    );
    /** Exports the specified agent to a ZIP file. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse */
    await gapi.client.dialogflow.projects.agent.export(
      {
        parent: 'Test string',
      },
      {
        agentUri: 'Test string',
      }
    );
    /** Retrieves the fulfillment. */
    await gapi.client.dialogflow.projects.agent.getFulfillment({
      name: 'Test string',
    });
    /** Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed. */
    await gapi.client.dialogflow.projects.agent.getValidationResult({
      languageCode: 'Test string',
      parent: 'Test string',
    });
    /** Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when importing is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.import(
      {
        parent: 'Test string',
      },
      {
        agentContent: 'Test string',
        agentUri: 'Test string',
      }
    );
    /** Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore, the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when restoring is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.restore(
      {
        parent: 'Test string',
      },
      {
        agentContent: 'Test string',
        agentUri: 'Test string',
      }
    );
    /** Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections). */
    await gapi.client.dialogflow.projects.agent.search({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Trains the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.train(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Updates the fulfillment. */
    await gapi.client.dialogflow.projects.agent.updateFulfillment(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        enabled: true,
        features: [
          {
            type: 'Test string',
          },
        ],
        genericWebService: {
          isCloudFunction: true,
          password: 'Test string',
          requestHeaders: {
            A: 'Test string',
          },
          uri: 'Test string',
          username: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Deletes entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete(
      {
        parent: 'Test string',
      },
      {
        entityTypeNames: ['Test string'],
      }
    );
    /** Updates/Creates multiple entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateEntityTypesResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        entityTypeBatchInline: {
          entityTypes: [
            {
              autoExpansionMode: 'Test string',
              displayName: 'Test string',
              enableFuzzyExtraction: true,
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              kind: 'Test string',
              name: 'Test string',
            },
          ],
        },
        entityTypeBatchUri: 'Test string',
        languageCode: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates an entity type in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        autoExpansionMode: 'Test string',
        displayName: 'Test string',
        enableFuzzyExtraction: true,
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.delete({
      name: 'Test string',
    });
    /** Retrieves the specified entity type. */
    await gapi.client.dialogflow.projects.agent.entityTypes.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all entity types in the specified agent. */
    await gapi.client.dialogflow.projects.agent.entityTypes.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        autoExpansionMode: 'Test string',
        displayName: 'Test string',
        enableFuzzyExtraction: true,
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates multiple new entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        languageCode: 'Test string',
      }
    );
    /** Deletes entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete(
      {
        parent: 'Test string',
      },
      {
        entityValues: ['Test string'],
        languageCode: 'Test string',
      }
    );
    /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        languageCode: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates an agent environment. */
    await gapi.client.dialogflow.projects.agent.environments.create(
      {
        environmentId: 'Test string',
        parent: 'Test string',
      },
      {
        agentVersion: 'Test string',
        description: 'Test string',
        fulfillment: {
          displayName: 'Test string',
          enabled: true,
          features: [
            {
              type: 'Test string',
            },
          ],
          genericWebService: {
            isCloudFunction: true,
            password: 'Test string',
            requestHeaders: {
              A: 'Test string',
            },
            uri: 'Test string',
            username: 'Test string',
          },
          name: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        textToSpeechSettings: {
          enableTextToSpeech: true,
          outputAudioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfigs: {
            A: {
              effectsProfileId: ['Test string'],
              pitch: 42,
              speakingRate: 42,
              voice: {
                name: 'Test string',
                ssmlGender: 'Test string',
              },
              volumeGainDb: 42,
            },
          },
        },
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified agent environment. */
    await gapi.client.dialogflow.projects.agent.environments.delete({
      name: 'Test string',
    });
    /** Retrieves the specified agent environment. */
    await gapi.client.dialogflow.projects.agent.environments.get({
      name: 'Test string',
    });
    /** Gets the history of the specified environment. */
    await gapi.client.dialogflow.projects.agent.environments.getHistory({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Returns the list of all non-default environments of the specified agent. */
    await gapi.client.dialogflow.projects.agent.environments.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified agent environment. This method allows you to deploy new agent versions into the environment. When an environment is pointed to a new agent version by setting `environment.agent_version`, the environment is temporarily set to the `LOADING` state. During that time, the environment continues serving the previous version of the agent. After the new agent version is done loading, the environment is set back to the `RUNNING` state. You can use "-" as Environment ID in environment name to update an agent version in the default environment. WARNING: this will negate all recent changes to the draft agent and can't be undone. You may want to save the draft agent to a version before calling this method. */
    await gapi.client.dialogflow.projects.agent.environments.patch(
      {
        allowLoadToDraftAndDiscardChanges: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        agentVersion: 'Test string',
        description: 'Test string',
        fulfillment: {
          displayName: 'Test string',
          enabled: true,
          features: [
            {
              type: 'Test string',
            },
          ],
          genericWebService: {
            isCloudFunction: true,
            password: 'Test string',
            requestHeaders: {
              A: 'Test string',
            },
            uri: 'Test string',
            username: 'Test string',
          },
          name: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        textToSpeechSettings: {
          enableTextToSpeech: true,
          outputAudioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfigs: {
            A: {
              effectsProfileId: ['Test string'],
              pitch: 42,
              speakingRate: 42,
              voice: {
                name: 'Test string',
                ssmlGender: 'Test string',
              },
              volumeGainDb: 42,
            },
          },
        },
        updateTime: 'Test string',
      }
    );
    /** Returns the list of all intents in the specified agent. */
    await gapi.client.dialogflow.projects.agent.environments.intents.list({
      intentView: 'Test string',
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes all active contexts in the specified session. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.deleteContexts(
      {
        parent: 'Test string',
      }
    );
    /** Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions). */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.detectIntent(
      {
        session: 'Test string',
      },
      {
        inputAudio: 'Test string',
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        outputAudioConfigMask: 'Test string',
        queryInput: {
          audioConfig: {
            audioEncoding: 'Test string',
            disableNoSpeechRecognizedEvent: true,
            enableAutomaticPunctuation: true,
            enableWordInfo: true,
            languageCode: 'Test string',
            model: 'Test string',
            modelVariant: 'Test string',
            optOutConformerModelMigration: true,
            phraseHints: ['Test string'],
            sampleRateHertz: 42,
            singleUtterance: true,
            speechContexts: [
              {
                boost: 42,
                phrases: ['Test string'],
              },
            ],
          },
          event: {
            languageCode: 'Test string',
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
          text: {
            languageCode: 'Test string',
            text: 'Test string',
          },
        },
        queryParams: {
          contexts: [
            {
              lifespanCount: 42,
              name: 'Test string',
              parameters: {
                A: 42,
              },
            },
          ],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          payload: {
            A: 42,
          },
          platform: 'Test string',
          resetContexts: true,
          sentimentAnalysisRequestConfig: {
            analyzeQueryTextSentiment: true,
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
      }
    );
    /** Creates a context. If the specified context already exists, overrides the context. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.contexts.create(
      {
        parent: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Deletes the specified context. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.contexts.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified context. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.contexts.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all contexts in the specified session. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.contexts.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified context. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.contexts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.entityTypes.create(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.entityTypes.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.entityTypes.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.entityTypes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.environments.users.sessions.entityTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.intents.batchDelete(
      {
        parent: 'Test string',
      },
      {
        intents: [
          {
            action: 'Test string',
            defaultResponsePlatforms: ['Test string'],
            displayName: 'Test string',
            endInteraction: true,
            events: ['Test string'],
            followupIntentInfo: [
              {
                followupIntentName: 'Test string',
                parentFollowupIntentName: 'Test string',
              },
            ],
            inputContextNames: ['Test string'],
            isFallback: true,
            liveAgentHandoff: true,
            messages: [
              {
                basicCard: {
                  buttons: [
                    {
                      openUriAction: {
                        uri: 'Test string',
                      },
                      title: 'Test string',
                    },
                  ],
                  formattedText: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                browseCarouselCard: {
                  imageDisplayOptions: 'Test string',
                  items: [
                    {
                      description: 'Test string',
                      footer: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      openUriAction: {
                        url: 'Test string',
                        urlTypeHint: 'Test string',
                      },
                      title: 'Test string',
                    },
                  ],
                },
                card: {
                  buttons: [
                    {
                      postback: 'Test string',
                      text: 'Test string',
                    },
                  ],
                  imageUri: 'Test string',
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                carouselSelect: {
                  items: [
                    {
                      description: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      info: {
                        key: 'Test string',
                        synonyms: ['Test string'],
                      },
                      title: 'Test string',
                    },
                  ],
                },
                image: {
                  accessibilityText: 'Test string',
                  imageUri: 'Test string',
                },
                linkOutSuggestion: {
                  destinationName: 'Test string',
                  uri: 'Test string',
                },
                listSelect: {
                  items: [
                    {
                      description: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      info: {
                        key: 'Test string',
                        synonyms: ['Test string'],
                      },
                      title: 'Test string',
                    },
                  ],
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                mediaContent: {
                  mediaObjects: [
                    {
                      contentUrl: 'Test string',
                      description: 'Test string',
                      icon: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      largeImage: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      name: 'Test string',
                    },
                  ],
                  mediaType: 'Test string',
                },
                payload: {
                  A: 42,
                },
                platform: 'Test string',
                quickReplies: {
                  quickReplies: ['Test string'],
                  title: 'Test string',
                },
                simpleResponses: {
                  simpleResponses: [
                    {
                      displayText: 'Test string',
                      ssml: 'Test string',
                      textToSpeech: 'Test string',
                    },
                  ],
                },
                suggestions: {
                  suggestions: [
                    {
                      title: 'Test string',
                    },
                  ],
                },
                tableCard: {
                  buttons: [
                    {
                      openUriAction: {
                        uri: 'Test string',
                      },
                      title: 'Test string',
                    },
                  ],
                  columnProperties: [
                    {
                      header: 'Test string',
                      horizontalAlignment: 'Test string',
                    },
                  ],
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  rows: [
                    {
                      cells: [
                        {
                          text: 'Test string',
                        },
                      ],
                      dividerAfter: true,
                    },
                  ],
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                text: {
                  text: ['Test string'],
                },
              },
            ],
            mlDisabled: true,
            name: 'Test string',
            outputContexts: [
              {
                lifespanCount: 42,
                name: 'Test string',
                parameters: {
                  A: 42,
                },
              },
            ],
            parameters: [
              {
                defaultValue: 'Test string',
                displayName: 'Test string',
                entityTypeDisplayName: 'Test string',
                isList: true,
                mandatory: true,
                name: 'Test string',
                prompts: ['Test string'],
                value: 'Test string',
              },
            ],
            parentFollowupIntentName: 'Test string',
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: 'Test string',
            trainingPhrases: [
              {
                name: 'Test string',
                parts: [
                  {
                    alias: 'Test string',
                    entityType: 'Test string',
                    text: 'Test string',
                    userDefined: true,
                  },
                ],
                timesAddedCount: 42,
                type: 'Test string',
              },
            ],
            webhookState: 'Test string',
          },
        ],
      }
    );
    /** Updates/Creates multiple intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateIntentsResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.intents.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        intentBatchInline: {
          intents: [
            {
              action: 'Test string',
              defaultResponsePlatforms: ['Test string'],
              displayName: 'Test string',
              endInteraction: true,
              events: ['Test string'],
              followupIntentInfo: [
                {
                  followupIntentName: 'Test string',
                  parentFollowupIntentName: 'Test string',
                },
              ],
              inputContextNames: ['Test string'],
              isFallback: true,
              liveAgentHandoff: true,
              messages: [
                {
                  basicCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    formattedText: 'Test string',
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  browseCarouselCard: {
                    imageDisplayOptions: 'Test string',
                    items: [
                      {
                        description: 'Test string',
                        footer: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        openUriAction: {
                          url: 'Test string',
                          urlTypeHint: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  card: {
                    buttons: [
                      {
                        postback: 'Test string',
                        text: 'Test string',
                      },
                    ],
                    imageUri: 'Test string',
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  carouselSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  linkOutSuggestion: {
                    destinationName: 'Test string',
                    uri: 'Test string',
                  },
                  listSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  mediaContent: {
                    mediaObjects: [
                      {
                        contentUrl: 'Test string',
                        description: 'Test string',
                        icon: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        largeImage: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        name: 'Test string',
                      },
                    ],
                    mediaType: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  platform: 'Test string',
                  quickReplies: {
                    quickReplies: ['Test string'],
                    title: 'Test string',
                  },
                  simpleResponses: {
                    simpleResponses: [
                      {
                        displayText: 'Test string',
                        ssml: 'Test string',
                        textToSpeech: 'Test string',
                      },
                    ],
                  },
                  suggestions: {
                    suggestions: [
                      {
                        title: 'Test string',
                      },
                    ],
                  },
                  tableCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    columnProperties: [
                      {
                        header: 'Test string',
                        horizontalAlignment: 'Test string',
                      },
                    ],
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    rows: [
                      {
                        cells: [
                          {
                            text: 'Test string',
                          },
                        ],
                        dividerAfter: true,
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  text: {
                    text: ['Test string'],
                  },
                },
              ],
              mlDisabled: true,
              name: 'Test string',
              outputContexts: [
                {
                  lifespanCount: 42,
                  name: 'Test string',
                  parameters: {
                    A: 42,
                  },
                },
              ],
              parameters: [
                {
                  defaultValue: 'Test string',
                  displayName: 'Test string',
                  entityTypeDisplayName: 'Test string',
                  isList: true,
                  mandatory: true,
                  name: 'Test string',
                  prompts: ['Test string'],
                  value: 'Test string',
                },
              ],
              parentFollowupIntentName: 'Test string',
              priority: 42,
              resetContexts: true,
              rootFollowupIntentName: 'Test string',
              trainingPhrases: [
                {
                  name: 'Test string',
                  parts: [
                    {
                      alias: 'Test string',
                      entityType: 'Test string',
                      text: 'Test string',
                      userDefined: true,
                    },
                  ],
                  timesAddedCount: 42,
                  type: 'Test string',
                },
              ],
              webhookState: 'Test string',
            },
          ],
        },
        intentBatchUri: 'Test string',
        intentView: 'Test string',
        languageCode: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates an intent in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.intents.create(
      {
        intentView: 'Test string',
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        action: 'Test string',
        defaultResponsePlatforms: ['Test string'],
        displayName: 'Test string',
        endInteraction: true,
        events: ['Test string'],
        followupIntentInfo: [
          {
            followupIntentName: 'Test string',
            parentFollowupIntentName: 'Test string',
          },
        ],
        inputContextNames: ['Test string'],
        isFallback: true,
        liveAgentHandoff: true,
        messages: [
          {
            basicCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              formattedText: 'Test string',
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              subtitle: 'Test string',
              title: 'Test string',
            },
            browseCarouselCard: {
              imageDisplayOptions: 'Test string',
              items: [
                {
                  description: 'Test string',
                  footer: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  openUriAction: {
                    url: 'Test string',
                    urlTypeHint: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
            },
            card: {
              buttons: [
                {
                  postback: 'Test string',
                  text: 'Test string',
                },
              ],
              imageUri: 'Test string',
              subtitle: 'Test string',
              title: 'Test string',
            },
            carouselSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
            },
            image: {
              accessibilityText: 'Test string',
              imageUri: 'Test string',
            },
            linkOutSuggestion: {
              destinationName: 'Test string',
              uri: 'Test string',
            },
            listSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            mediaContent: {
              mediaObjects: [
                {
                  contentUrl: 'Test string',
                  description: 'Test string',
                  icon: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  largeImage: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  name: 'Test string',
                },
              ],
              mediaType: 'Test string',
            },
            payload: {
              A: 42,
            },
            platform: 'Test string',
            quickReplies: {
              quickReplies: ['Test string'],
              title: 'Test string',
            },
            simpleResponses: {
              simpleResponses: [
                {
                  displayText: 'Test string',
                  ssml: 'Test string',
                  textToSpeech: 'Test string',
                },
              ],
            },
            suggestions: {
              suggestions: [
                {
                  title: 'Test string',
                },
              ],
            },
            tableCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              columnProperties: [
                {
                  header: 'Test string',
                  horizontalAlignment: 'Test string',
                },
              ],
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              rows: [
                {
                  cells: [
                    {
                      text: 'Test string',
                    },
                  ],
                  dividerAfter: true,
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            text: {
              text: ['Test string'],
            },
          },
        ],
        mlDisabled: true,
        name: 'Test string',
        outputContexts: [
          {
            lifespanCount: 42,
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
        ],
        parameters: [
          {
            defaultValue: 'Test string',
            displayName: 'Test string',
            entityTypeDisplayName: 'Test string',
            isList: true,
            mandatory: true,
            name: 'Test string',
            prompts: ['Test string'],
            value: 'Test string',
          },
        ],
        parentFollowupIntentName: 'Test string',
        priority: 42,
        resetContexts: true,
        rootFollowupIntentName: 'Test string',
        trainingPhrases: [
          {
            name: 'Test string',
            parts: [
              {
                alias: 'Test string',
                entityType: 'Test string',
                text: 'Test string',
                userDefined: true,
              },
            ],
            timesAddedCount: 42,
            type: 'Test string',
          },
        ],
        webhookState: 'Test string',
      }
    );
    /** Deletes the specified intent and its direct or indirect followup intents. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.intents.delete({
      name: 'Test string',
    });
    /** Retrieves the specified intent. */
    await gapi.client.dialogflow.projects.agent.intents.get({
      intentView: 'Test string',
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all intents in the specified agent. */
    await gapi.client.dialogflow.projects.agent.intents.list({
      intentView: 'Test string',
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified intent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.agent.intents.patch(
      {
        intentView: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        action: 'Test string',
        defaultResponsePlatforms: ['Test string'],
        displayName: 'Test string',
        endInteraction: true,
        events: ['Test string'],
        followupIntentInfo: [
          {
            followupIntentName: 'Test string',
            parentFollowupIntentName: 'Test string',
          },
        ],
        inputContextNames: ['Test string'],
        isFallback: true,
        liveAgentHandoff: true,
        messages: [
          {
            basicCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              formattedText: 'Test string',
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              subtitle: 'Test string',
              title: 'Test string',
            },
            browseCarouselCard: {
              imageDisplayOptions: 'Test string',
              items: [
                {
                  description: 'Test string',
                  footer: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  openUriAction: {
                    url: 'Test string',
                    urlTypeHint: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
            },
            card: {
              buttons: [
                {
                  postback: 'Test string',
                  text: 'Test string',
                },
              ],
              imageUri: 'Test string',
              subtitle: 'Test string',
              title: 'Test string',
            },
            carouselSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
            },
            image: {
              accessibilityText: 'Test string',
              imageUri: 'Test string',
            },
            linkOutSuggestion: {
              destinationName: 'Test string',
              uri: 'Test string',
            },
            listSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            mediaContent: {
              mediaObjects: [
                {
                  contentUrl: 'Test string',
                  description: 'Test string',
                  icon: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  largeImage: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  name: 'Test string',
                },
              ],
              mediaType: 'Test string',
            },
            payload: {
              A: 42,
            },
            platform: 'Test string',
            quickReplies: {
              quickReplies: ['Test string'],
              title: 'Test string',
            },
            simpleResponses: {
              simpleResponses: [
                {
                  displayText: 'Test string',
                  ssml: 'Test string',
                  textToSpeech: 'Test string',
                },
              ],
            },
            suggestions: {
              suggestions: [
                {
                  title: 'Test string',
                },
              ],
            },
            tableCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              columnProperties: [
                {
                  header: 'Test string',
                  horizontalAlignment: 'Test string',
                },
              ],
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              rows: [
                {
                  cells: [
                    {
                      text: 'Test string',
                    },
                  ],
                  dividerAfter: true,
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            text: {
              text: ['Test string'],
            },
          },
        ],
        mlDisabled: true,
        name: 'Test string',
        outputContexts: [
          {
            lifespanCount: 42,
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
        ],
        parameters: [
          {
            defaultValue: 'Test string',
            displayName: 'Test string',
            entityTypeDisplayName: 'Test string',
            isList: true,
            mandatory: true,
            name: 'Test string',
            prompts: ['Test string'],
            value: 'Test string',
          },
        ],
        parentFollowupIntentName: 'Test string',
        priority: 42,
        resetContexts: true,
        rootFollowupIntentName: 'Test string',
        trainingPhrases: [
          {
            name: 'Test string',
            parts: [
              {
                alias: 'Test string',
                entityType: 'Test string',
                text: 'Test string',
                userDefined: true,
              },
            ],
            timesAddedCount: 42,
            type: 'Test string',
          },
        ],
        webhookState: 'Test string',
      }
    );
    /** Creates a knowledge base. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified knowledge base. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves the specified knowledge base. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.get({
      name: 'Test string',
    });
    /** Returns the list of all knowledge bases of the specified agent. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified knowledge base. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.documents.create(
      {
        parent: 'Test string',
      },
      {
        contentUri: 'Test string',
        displayName: 'Test string',
        enableAutoReload: true,
        knowledgeTypes: ['Test string'],
        latestReloadStatus: {
          status: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          time: 'Test string',
        },
        metadata: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        name: 'Test string',
        rawContent: 'Test string',
        state: 'Test string',
      }
    );
    /** Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.documents.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified document. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.documents.get({
      name: 'Test string',
    });
    /** Returns the list of all documents of the knowledge base. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.documents.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.documents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        contentUri: 'Test string',
        displayName: 'Test string',
        enableAutoReload: true,
        knowledgeTypes: ['Test string'],
        latestReloadStatus: {
          status: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          time: 'Test string',
        },
        metadata: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        name: 'Test string',
        rawContent: 'Test string',
        state: 'Test string',
      }
    );
    /** Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`. */
    await gapi.client.dialogflow.projects.agent.knowledgeBases.documents.reload(
      {
        name: 'Test string',
      },
      {
        contentUri: 'Test string',
        importGcsCustomMetadata: true,
        smartMessagingPartialUpdate: true,
      }
    );
    /** Deletes all active contexts in the specified session. */
    await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
      parent: 'Test string',
    });
    /** Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions). */
    await gapi.client.dialogflow.projects.agent.sessions.detectIntent(
      {
        session: 'Test string',
      },
      {
        inputAudio: 'Test string',
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        outputAudioConfigMask: 'Test string',
        queryInput: {
          audioConfig: {
            audioEncoding: 'Test string',
            disableNoSpeechRecognizedEvent: true,
            enableAutomaticPunctuation: true,
            enableWordInfo: true,
            languageCode: 'Test string',
            model: 'Test string',
            modelVariant: 'Test string',
            optOutConformerModelMigration: true,
            phraseHints: ['Test string'],
            sampleRateHertz: 42,
            singleUtterance: true,
            speechContexts: [
              {
                boost: 42,
                phrases: ['Test string'],
              },
            ],
          },
          event: {
            languageCode: 'Test string',
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
          text: {
            languageCode: 'Test string',
            text: 'Test string',
          },
        },
        queryParams: {
          contexts: [
            {
              lifespanCount: 42,
              name: 'Test string',
              parameters: {
                A: 42,
              },
            },
          ],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          payload: {
            A: 42,
          },
          platform: 'Test string',
          resetContexts: true,
          sentimentAnalysisRequestConfig: {
            analyzeQueryTextSentiment: true,
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
      }
    );
    /** Creates a context. If the specified context already exists, overrides the context. */
    await gapi.client.dialogflow.projects.agent.sessions.contexts.create(
      {
        parent: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Deletes the specified context. */
    await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
      name: 'Test string',
    });
    /** Retrieves the specified context. */
    await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
      name: 'Test string',
    });
    /** Returns the list of all contexts in the specified session. */
    await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified context. */
    await gapi.client.dialogflow.projects.agent.sessions.contexts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
      name: 'Test string',
    });
    /** Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
      name: 'Test string',
    });
    /** Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates an agent version. The new version points to the agent instance in the "default" environment. */
    await gapi.client.dialogflow.projects.agent.versions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        status: 'Test string',
        versionNumber: 42,
      }
    );
    /** Delete the specified agent version. */
    await gapi.client.dialogflow.projects.agent.versions.delete({
      name: 'Test string',
    });
    /** Retrieves the specified agent version. */
    await gapi.client.dialogflow.projects.agent.versions.get({
      name: 'Test string',
    });
    /** Returns the list of all versions of the specified agent. */
    await gapi.client.dialogflow.projects.agent.versions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified agent version. Note that this method does not allow you to update the state of the agent the given version points to. It allows you to update only mutable properties of the version resource. */
    await gapi.client.dialogflow.projects.agent.versions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        status: 'Test string',
        versionNumber: 42,
      }
    );
    /** Returns the list of all answer records in the specified project in reverse chronological order. */
    await gapi.client.dialogflow.projects.answerRecords.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified answer record. */
    await gapi.client.dialogflow.projects.answerRecords.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        agentAssistantRecord: {
          articleSuggestionAnswer: {
            answerRecord: 'Test string',
            confidence: 42,
            metadata: {
              A: 'Test string',
            },
            snippets: ['Test string'],
            title: 'Test string',
            uri: 'Test string',
          },
          dialogflowAssistAnswer: {
            answerRecord: 'Test string',
            intentSuggestion: {
              description: 'Test string',
              displayName: 'Test string',
              intentV2: 'Test string',
            },
            queryResult: {
              action: 'Test string',
              allRequiredParamsPresent: true,
              cancelsSlotFilling: true,
              diagnosticInfo: {
                A: 42,
              },
              fulfillmentMessages: [
                {
                  basicCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    formattedText: 'Test string',
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  browseCarouselCard: {
                    imageDisplayOptions: 'Test string',
                    items: [
                      {
                        description: 'Test string',
                        footer: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        openUriAction: {
                          url: 'Test string',
                          urlTypeHint: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  card: {
                    buttons: [
                      {
                        postback: 'Test string',
                        text: 'Test string',
                      },
                    ],
                    imageUri: 'Test string',
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  carouselSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  linkOutSuggestion: {
                    destinationName: 'Test string',
                    uri: 'Test string',
                  },
                  listSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  mediaContent: {
                    mediaObjects: [
                      {
                        contentUrl: 'Test string',
                        description: 'Test string',
                        icon: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        largeImage: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        name: 'Test string',
                      },
                    ],
                    mediaType: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  platform: 'Test string',
                  quickReplies: {
                    quickReplies: ['Test string'],
                    title: 'Test string',
                  },
                  simpleResponses: {
                    simpleResponses: [
                      {
                        displayText: 'Test string',
                        ssml: 'Test string',
                        textToSpeech: 'Test string',
                      },
                    ],
                  },
                  suggestions: {
                    suggestions: [
                      {
                        title: 'Test string',
                      },
                    ],
                  },
                  tableCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    columnProperties: [
                      {
                        header: 'Test string',
                        horizontalAlignment: 'Test string',
                      },
                    ],
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    rows: [
                      {
                        cells: [
                          {
                            text: 'Test string',
                          },
                        ],
                        dividerAfter: true,
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  text: {
                    text: ['Test string'],
                  },
                },
              ],
              fulfillmentText: 'Test string',
              intent: {
                action: 'Test string',
                defaultResponsePlatforms: ['Test string'],
                displayName: 'Test string',
                endInteraction: true,
                events: ['Test string'],
                followupIntentInfo: [
                  {
                    followupIntentName: 'Test string',
                    parentFollowupIntentName: 'Test string',
                  },
                ],
                inputContextNames: ['Test string'],
                isFallback: true,
                liveAgentHandoff: true,
                messages: [
                  {
                    basicCard: {
                      buttons: [
                        {
                          openUriAction: {
                            uri: 'Test string',
                          },
                          title: 'Test string',
                        },
                      ],
                      formattedText: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    browseCarouselCard: {
                      imageDisplayOptions: 'Test string',
                      items: [
                        {
                          description: 'Test string',
                          footer: 'Test string',
                          image: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          openUriAction: {
                            url: 'Test string',
                            urlTypeHint: 'Test string',
                          },
                          title: 'Test string',
                        },
                      ],
                    },
                    card: {
                      buttons: [
                        {
                          postback: 'Test string',
                          text: 'Test string',
                        },
                      ],
                      imageUri: 'Test string',
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    carouselSelect: {
                      items: [
                        {
                          description: 'Test string',
                          image: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          info: {
                            key: 'Test string',
                            synonyms: ['Test string'],
                          },
                          title: 'Test string',
                        },
                      ],
                    },
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    linkOutSuggestion: {
                      destinationName: 'Test string',
                      uri: 'Test string',
                    },
                    listSelect: {
                      items: [
                        {
                          description: 'Test string',
                          image: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          info: {
                            key: 'Test string',
                            synonyms: ['Test string'],
                          },
                          title: 'Test string',
                        },
                      ],
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    mediaContent: {
                      mediaObjects: [
                        {
                          contentUrl: 'Test string',
                          description: 'Test string',
                          icon: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          largeImage: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          name: 'Test string',
                        },
                      ],
                      mediaType: 'Test string',
                    },
                    payload: {
                      A: 42,
                    },
                    platform: 'Test string',
                    quickReplies: {
                      quickReplies: ['Test string'],
                      title: 'Test string',
                    },
                    simpleResponses: {
                      simpleResponses: [
                        {
                          displayText: 'Test string',
                          ssml: 'Test string',
                          textToSpeech: 'Test string',
                        },
                      ],
                    },
                    suggestions: {
                      suggestions: [
                        {
                          title: 'Test string',
                        },
                      ],
                    },
                    tableCard: {
                      buttons: [
                        {
                          openUriAction: {
                            uri: 'Test string',
                          },
                          title: 'Test string',
                        },
                      ],
                      columnProperties: [
                        {
                          header: 'Test string',
                          horizontalAlignment: 'Test string',
                        },
                      ],
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      rows: [
                        {
                          cells: [
                            {
                              text: 'Test string',
                            },
                          ],
                          dividerAfter: true,
                        },
                      ],
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    text: {
                      text: ['Test string'],
                    },
                  },
                ],
                mlDisabled: true,
                name: 'Test string',
                outputContexts: [
                  {
                    lifespanCount: 42,
                    name: 'Test string',
                    parameters: {
                      A: 42,
                    },
                  },
                ],
                parameters: [
                  {
                    defaultValue: 'Test string',
                    displayName: 'Test string',
                    entityTypeDisplayName: 'Test string',
                    isList: true,
                    mandatory: true,
                    name: 'Test string',
                    prompts: ['Test string'],
                    value: 'Test string',
                  },
                ],
                parentFollowupIntentName: 'Test string',
                priority: 42,
                resetContexts: true,
                rootFollowupIntentName: 'Test string',
                trainingPhrases: [
                  {
                    name: 'Test string',
                    parts: [
                      {
                        alias: 'Test string',
                        entityType: 'Test string',
                        text: 'Test string',
                        userDefined: true,
                      },
                    ],
                    timesAddedCount: 42,
                    type: 'Test string',
                  },
                ],
                webhookState: 'Test string',
              },
              intentDetectionConfidence: 42,
              languageCode: 'Test string',
              outputContexts: [
                {
                  lifespanCount: 42,
                  name: 'Test string',
                  parameters: {
                    A: 42,
                  },
                },
              ],
              parameters: {
                A: 42,
              },
              queryText: 'Test string',
              sentimentAnalysisResult: {
                queryTextSentiment: {
                  magnitude: 42,
                  score: 42,
                },
              },
              speechRecognitionConfidence: 42,
              webhookPayload: {
                A: 42,
              },
              webhookSource: 'Test string',
            },
          },
          faqAnswer: {
            answer: 'Test string',
            answerRecord: 'Test string',
            confidence: 42,
            metadata: {
              A: 'Test string',
            },
            question: 'Test string',
            source: 'Test string',
          },
        },
        answerFeedback: {
          agentAssistantDetailFeedback: {
            answerRelevance: 'Test string',
            documentCorrectness: 'Test string',
            documentEfficiency: 'Test string',
            knowledgeAssistFeedback: {
              answerCopied: true,
              clickedUris: ['Test string'],
            },
            knowledgeSearchFeedback: {
              answerCopied: true,
              clickedUris: ['Test string'],
            },
            summarizationFeedback: {
              startTime: 'Test string',
              submitTime: 'Test string',
              summaryText: 'Test string',
              textSections: {
                A: 'Test string',
              },
            },
          },
          clicked: true,
          clickTime: 'Test string',
          correctnessLevel: 'Test string',
          displayed: true,
          displayTime: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Retrieves the specified conversation dataset. */
    await gapi.client.dialogflow.projects.conversationDatasets.get({
      name: 'Test string',
    });
    /** Import data into the specified conversation dataset. Note that it is not allowed to import data to a conversation dataset that already has data in it. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportConversationDataOperationMetadata - `response`: ImportConversationDataOperationResponse */
    await gapi.client.dialogflow.projects.conversationDatasets.importConversationData(
      {
        name: 'Test string',
      },
      {
        inputConfig: {
          gcsSource: {
            uris: ['Test string'],
          },
        },
      }
    );
    /** Returns the list of all conversation datasets in the specified project and location. */
    await gapi.client.dialogflow.projects.conversationDatasets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a model. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationModelOperationMetadata - `response`: ConversationModel */
    await gapi.client.dialogflow.projects.conversationModels.create(
      {
        parent: 'Test string',
      },
      {
        articleSuggestionModelMetadata: {
          trainingModelType: 'Test string',
        },
        createTime: 'Test string',
        datasets: [
          {
            dataset: 'Test string',
          },
        ],
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        smartReplyModelMetadata: {
          trainingModelType: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Deletes a model. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeleteConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.conversationModels.delete({
      name: 'Test string',
    });
    /** Deploys a model. If a model is already deployed, deploying it has no effect. A model can only serve prediction requests after it gets deployed. For article suggestion, custom model will not be used unless it is deployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.conversationModels.deploy(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets conversation model. */
    await gapi.client.dialogflow.projects.conversationModels.get({
      name: 'Test string',
    });
    /** Lists conversation models. */
    await gapi.client.dialogflow.projects.conversationModels.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Undeploys a model. If the model is not deployed this method has no effect. If the model is currently being used: - For article suggestion, article suggestion will fallback to the default model if model is undeployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: UndeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.conversationModels.undeploy(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets an evaluation of conversation model. */
    await gapi.client.dialogflow.projects.conversationModels.evaluations.get({
      name: 'Test string',
    });
    /** Lists evaluations of a conversation model. */
    await gapi.client.dialogflow.projects.conversationModels.evaluations.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Clears a suggestion feature from a conversation profile for the given participant role. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ClearSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile */
    await gapi.client.dialogflow.projects.conversationProfiles.clearSuggestionFeatureConfig(
      {
        conversationProfile: 'Test string',
      },
      {
        participantRole: 'Test string',
        suggestionFeatureType: 'Test string',
      }
    );
    /** Creates a conversation profile in the specified project. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API. */
    await gapi.client.dialogflow.projects.conversationProfiles.create(
      {
        parent: 'Test string',
      },
      {
        automatedAgentConfig: {
          agent: 'Test string',
          sessionTtl: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        humanAgentAssistantConfig: {
          endUserSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          humanAgentSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          messageAnalysisConfig: {
            enableEntityExtraction: true,
            enableSentimentAnalysis: true,
          },
          notificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
        },
        humanAgentHandoffConfig: {
          livePersonConfig: {
            accountNumber: 'Test string',
          },
          salesforceLiveAgentConfig: {
            buttonId: 'Test string',
            deploymentId: 'Test string',
            endpointDomain: 'Test string',
            organizationId: 'Test string',
          },
        },
        languageCode: 'Test string',
        loggingConfig: {
          enableStackdriverLogging: true,
        },
        name: 'Test string',
        newMessageEventNotificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        notificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        securitySettings: 'Test string',
        sttConfig: {
          audioEncoding: 'Test string',
          enableWordInfo: true,
          languageCode: 'Test string',
          model: 'Test string',
          sampleRateHertz: 42,
          speechModelVariant: 'Test string',
          useTimeoutBasedEndpointing: true,
        },
        timeZone: 'Test string',
        ttsConfig: {
          effectsProfileId: ['Test string'],
          pitch: 42,
          speakingRate: 42,
          voice: {
            name: 'Test string',
            ssmlGender: 'Test string',
          },
          volumeGainDb: 42,
        },
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified conversation profile. */
    await gapi.client.dialogflow.projects.conversationProfiles.delete({
      name: 'Test string',
    });
    /** Retrieves the specified conversation profile. */
    await gapi.client.dialogflow.projects.conversationProfiles.get({
      name: 'Test string',
    });
    /** Returns the list of all conversation profiles in the specified project. */
    await gapi.client.dialogflow.projects.conversationProfiles.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified conversation profile. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API. */
    await gapi.client.dialogflow.projects.conversationProfiles.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        automatedAgentConfig: {
          agent: 'Test string',
          sessionTtl: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        humanAgentAssistantConfig: {
          endUserSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          humanAgentSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          messageAnalysisConfig: {
            enableEntityExtraction: true,
            enableSentimentAnalysis: true,
          },
          notificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
        },
        humanAgentHandoffConfig: {
          livePersonConfig: {
            accountNumber: 'Test string',
          },
          salesforceLiveAgentConfig: {
            buttonId: 'Test string',
            deploymentId: 'Test string',
            endpointDomain: 'Test string',
            organizationId: 'Test string',
          },
        },
        languageCode: 'Test string',
        loggingConfig: {
          enableStackdriverLogging: true,
        },
        name: 'Test string',
        newMessageEventNotificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        notificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        securitySettings: 'Test string',
        sttConfig: {
          audioEncoding: 'Test string',
          enableWordInfo: true,
          languageCode: 'Test string',
          model: 'Test string',
          sampleRateHertz: 42,
          speechModelVariant: 'Test string',
          useTimeoutBasedEndpointing: true,
        },
        timeZone: 'Test string',
        ttsConfig: {
          effectsProfileId: ['Test string'],
          pitch: 42,
          speakingRate: 42,
          voice: {
            name: 'Test string',
            ssmlGender: 'Test string',
          },
          volumeGainDb: 42,
        },
        updateTime: 'Test string',
      }
    );
    /** Adds or updates a suggestion feature in a conversation profile. If the conversation profile contains the type of suggestion feature for the participant role, it will update it. Otherwise it will insert the suggestion feature. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: SetSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile If a long running operation to add or update suggestion feature config for the same conversation profile, participant role and suggestion feature type exists, please cancel the existing long running operation before sending such request, otherwise the request will be rejected. */
    await gapi.client.dialogflow.projects.conversationProfiles.setSuggestionFeatureConfig(
      {
        conversationProfile: 'Test string',
      },
      {
        participantRole: 'Test string',
        suggestionFeatureConfig: {
          conversationModelConfig: {
            baselineModelVersion: 'Test string',
            model: 'Test string',
          },
          conversationProcessConfig: {
            recentSentencesCount: 42,
          },
          disableAgentQueryLogging: true,
          enableConversationAugmentedQuery: true,
          enableEventBasedSuggestion: true,
          enableQuerySuggestionOnly: true,
          enableQuerySuggestionWhenNoAnswer: true,
          queryConfig: {
            confidenceThreshold: 42,
            contextFilterSettings: {
              dropHandoffMessages: true,
              dropIvrMessages: true,
              dropVirtualAgentMessages: true,
            },
            dialogflowQuerySource: {
              agent: 'Test string',
              humanAgentSideConfig: {
                agent: 'Test string',
              },
            },
            documentQuerySource: {
              documents: ['Test string'],
            },
            knowledgeBaseQuerySource: {
              knowledgeBases: ['Test string'],
            },
            maxResults: 42,
            sections: {
              sectionTypes: ['Test string'],
            },
          },
          suggestionFeature: {
            type: 'Test string',
          },
          suggestionTriggerSettings: {
            noSmalltalk: true,
            onlyEndUser: true,
          },
        },
      }
    );
    /** Completes the specified conversation. Finished conversations are purged from the database after 30 days. */
    await gapi.client.dialogflow.projects.conversations.complete(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates a new conversation. Conversations are auto-completed after 24 hours. Conversation Lifecycle: There are two stages during a conversation: Automated Agent Stage and Assist Stage. For Automated Agent Stage, there will be a dialogflow agent responding to user queries. For Assist Stage, there's no dialogflow agent responding to user queries. But we will provide suggestions which are generated from conversation. If Conversation.conversation_profile is configured for a dialogflow agent, conversation will start from `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And during `Automated Agent Stage`, once an Intent with Intent.live_agent_handoff is triggered, conversation will transfer to Assist Stage. */
    await gapi.client.dialogflow.projects.conversations.create(
      {
        conversationId: 'Test string',
        parent: 'Test string',
      },
      {
        conversationProfile: 'Test string',
        conversationStage: 'Test string',
        endTime: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
        phoneNumber: {
          phoneNumber: 'Test string',
        },
        startTime: 'Test string',
      }
    );
    /** Retrieves the specific conversation. */
    await gapi.client.dialogflow.projects.conversations.get({
      name: 'Test string',
    });
    /** Returns the list of all conversations in the specified project. */
    await gapi.client.dialogflow.projects.conversations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists messages that belong to a given conversation. `messages` are ordered by `create_time` in descending order. To fetch updates without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token. */
    await gapi.client.dialogflow.projects.conversations.messages.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Adds a text (chat, for example), or audio (phone recording, for example) message from a participant into the conversation. Note: Always use agent versions for production traffic sent to virtual agents. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions). */
    await gapi.client.dialogflow.projects.conversations.participants.analyzeContent(
      {
        participant: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        cxParameters: {
          A: 42,
        },
        eventInput: {
          languageCode: 'Test string',
          name: 'Test string',
          parameters: {
            A: 42,
          },
        },
        queryParams: {
          contexts: [
            {
              lifespanCount: 42,
              name: 'Test string',
              parameters: {
                A: 42,
              },
            },
          ],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          payload: {
            A: 42,
          },
          platform: 'Test string',
          resetContexts: true,
          sentimentAnalysisRequestConfig: {
            analyzeQueryTextSentiment: true,
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
        replyAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        requestId: 'Test string',
        suggestionInput: {
          answerRecord: 'Test string',
        },
        textInput: {
          languageCode: 'Test string',
          text: 'Test string',
        },
      }
    );
    /** Creates a new participant in a conversation. */
    await gapi.client.dialogflow.projects.conversations.participants.create(
      {
        parent: 'Test string',
      },
      {
        documentsMetadataFilters: {
          A: 'Test string',
        },
        name: 'Test string',
        obfuscatedExternalUserId: 'Test string',
        role: 'Test string',
        sipRecordingMediaLabel: 'Test string',
      }
    );
    /** Retrieves a conversation participant. */
    await gapi.client.dialogflow.projects.conversations.participants.get({
      name: 'Test string',
    });
    /** Returns the list of all participants in the specified conversation. */
    await gapi.client.dialogflow.projects.conversations.participants.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified participant. */
    await gapi.client.dialogflow.projects.conversations.participants.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        documentsMetadataFilters: {
          A: 'Test string',
        },
        name: 'Test string',
        obfuscatedExternalUserId: 'Test string',
        role: 'Test string',
        sipRecordingMediaLabel: 'Test string',
      }
    );
    /** Gets suggested articles for a participant based on specific historical messages. */
    await gapi.client.dialogflow.projects.conversations.participants.suggestions.suggestArticles(
      {
        parent: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        contextSize: 42,
        latestMessage: 'Test string',
      }
    );
    /** Gets suggested faq answers for a participant based on specific historical messages. */
    await gapi.client.dialogflow.projects.conversations.participants.suggestions.suggestFaqAnswers(
      {
        parent: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        contextSize: 42,
        latestMessage: 'Test string',
      }
    );
    /** Gets knowledge assist suggestions based on historical messages. */
    await gapi.client.dialogflow.projects.conversations.participants.suggestions.suggestKnowledgeAssist(
      {
        parent: 'Test string',
      },
      {
        contextSize: 42,
        latestMessage: 'Test string',
        previousSuggestedQuery: 'Test string',
      }
    );
    /** Gets smart replies for a participant based on specific historical messages. */
    await gapi.client.dialogflow.projects.conversations.participants.suggestions.suggestSmartReplies(
      {
        parent: 'Test string',
      },
      {
        contextSize: 42,
        currentTextInput: {
          languageCode: 'Test string',
          text: 'Test string',
        },
        latestMessage: 'Test string',
      }
    );
    /** Get answers for the given query based on knowledge documents. */
    await gapi.client.dialogflow.projects.conversations.suggestions.searchKnowledge(
      {
        conversation: 'Test string',
      },
      {
        conversation: 'Test string',
        conversationProfile: 'Test string',
        latestMessage: 'Test string',
        parent: 'Test string',
        query: {
          languageCode: 'Test string',
          text: 'Test string',
        },
        sessionId: 'Test string',
      }
    );
    /** Suggests summary for a conversation based on specific historical messages. The range of the messages to be used for summary can be specified in the request. */
    await gapi.client.dialogflow.projects.conversations.suggestions.suggestConversationSummary(
      {
        conversation: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        contextSize: 42,
        latestMessage: 'Test string',
      }
    );
    /** Creates a generator. */
    await gapi.client.dialogflow.projects.generators.create(
      {
        generatorId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        inferenceParameter: {
          maxOutputTokens: 42,
          temperature: 42,
          topK: 42,
          topP: 42,
        },
        name: 'Test string',
        summarizationContext: {
          fewShotExamples: [
            {
              conversationContext: {
                messageEntries: [
                  {
                    createTime: 'Test string',
                    languageCode: 'Test string',
                    role: 'Test string',
                    text: 'Test string',
                  },
                ],
              },
              extraInfo: {
                A: 'Test string',
              },
              output: {
                summarySuggestion: {
                  summarySections: [
                    {
                      section: 'Test string',
                      summary: 'Test string',
                    },
                  ],
                },
              },
              summarizationSectionList: {
                summarizationSections: [
                  {
                    definition: 'Test string',
                    key: 'Test string',
                    type: 'Test string',
                  },
                ],
              },
            },
          ],
          outputLanguageCode: 'Test string',
          summarizationSections: [
            {
              definition: 'Test string',
              key: 'Test string',
              type: 'Test string',
            },
          ],
          version: 'Test string',
        },
        triggerEvent: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Lists generators. */
    await gapi.client.dialogflow.projects.generators.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a knowledge base. */
    await gapi.client.dialogflow.projects.knowledgeBases.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified knowledge base. */
    await gapi.client.dialogflow.projects.knowledgeBases.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves the specified knowledge base. */
    await gapi.client.dialogflow.projects.knowledgeBases.get({
      name: 'Test string',
    });
    /** Returns the list of all knowledge bases of the specified agent. */
    await gapi.client.dialogflow.projects.knowledgeBases.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified knowledge base. */
    await gapi.client.dialogflow.projects.knowledgeBases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.create(
      {
        parent: 'Test string',
      },
      {
        contentUri: 'Test string',
        displayName: 'Test string',
        enableAutoReload: true,
        knowledgeTypes: ['Test string'],
        latestReloadStatus: {
          status: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          time: 'Test string',
        },
        metadata: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        name: 'Test string',
        rawContent: 'Test string',
        state: 'Test string',
      }
    );
    /** Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.delete({
      name: 'Test string',
    });
    /** Exports a smart messaging candidate document into the specified destination. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.export(
      {
        name: 'Test string',
      },
      {
        exportFullContent: true,
        gcsDestination: {
          uri: 'Test string',
        },
        smartMessagingPartialUpdate: true,
      }
    );
    /** Retrieves the specified document. */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.get({
      name: 'Test string',
    });
    /** Creates documents by importing data from external sources. Dialogflow supports up to 350 documents in each request. If you try to import more, Dialogflow will return an error. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: ImportDocumentsResponse */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.import(
      {
        parent: 'Test string',
      },
      {
        documentTemplate: {
          knowledgeTypes: ['Test string'],
          metadata: {
            A: 'Test string',
          },
          mimeType: 'Test string',
        },
        gcsSource: {
          uris: ['Test string'],
        },
        importGcsCustomMetadata: true,
      }
    );
    /** Returns the list of all documents of the knowledge base. */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        contentUri: 'Test string',
        displayName: 'Test string',
        enableAutoReload: true,
        knowledgeTypes: ['Test string'],
        latestReloadStatus: {
          status: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          time: 'Test string',
        },
        metadata: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        name: 'Test string',
        rawContent: 'Test string',
        state: 'Test string',
      }
    );
    /** Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`. */
    await gapi.client.dialogflow.projects.knowledgeBases.documents.reload(
      {
        name: 'Test string',
      },
      {
        contentUri: 'Test string',
        importGcsCustomMetadata: true,
        smartMessagingPartialUpdate: true,
      }
    );
    /** Deletes the specified agent. */
    await gapi.client.dialogflow.projects.locations.deleteAgent({
      parent: 'Test string',
    });
    /** Gets information about a location. */
    await gapi.client.dialogflow.projects.locations.get({
      name: 'Test string',
    });
    /** Retrieves the specified agent. */
    await gapi.client.dialogflow.projects.locations.getAgent({
      parent: 'Test string',
    });
    /** Gets location-level encryption key specification. */
    await gapi.client.dialogflow.projects.locations.getEncryptionSpec({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.dialogflow.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates/updates the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.setAgent(
      {
        parent: 'Test string',
        updateMask: 'Test string',
      },
      {
        apiVersion: 'Test string',
        avatarUri: 'Test string',
        classificationThreshold: 42,
        defaultLanguageCode: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        enableLogging: true,
        matchMode: 'Test string',
        parent: 'Test string',
        supportedLanguageCodes: ['Test string'],
        tier: 'Test string',
        timeZone: 'Test string',
      }
    );
    /** Exports the specified agent to a ZIP file. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse */
    await gapi.client.dialogflow.projects.locations.agent.export(
      {
        parent: 'Test string',
      },
      {
        agentUri: 'Test string',
      }
    );
    /** Retrieves the fulfillment. */
    await gapi.client.dialogflow.projects.locations.agent.getFulfillment({
      name: 'Test string',
    });
    /** Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed. */
    await gapi.client.dialogflow.projects.locations.agent.getValidationResult({
      languageCode: 'Test string',
      parent: 'Test string',
    });
    /** Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when importing is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.import(
      {
        parent: 'Test string',
      },
      {
        agentContent: 'Test string',
        agentUri: 'Test string',
      }
    );
    /** Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore, the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when restoring is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.restore(
      {
        parent: 'Test string',
      },
      {
        agentContent: 'Test string',
        agentUri: 'Test string',
      }
    );
    /** Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections). */
    await gapi.client.dialogflow.projects.locations.agent.search({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Trains the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.train(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Updates the fulfillment. */
    await gapi.client.dialogflow.projects.locations.agent.updateFulfillment(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        enabled: true,
        features: [
          {
            type: 'Test string',
          },
        ],
        genericWebService: {
          isCloudFunction: true,
          password: 'Test string',
          requestHeaders: {
            A: 'Test string',
          },
          uri: 'Test string',
          username: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Deletes entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.batchDelete(
      {
        parent: 'Test string',
      },
      {
        entityTypeNames: ['Test string'],
      }
    );
    /** Updates/Creates multiple entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateEntityTypesResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        entityTypeBatchInline: {
          entityTypes: [
            {
              autoExpansionMode: 'Test string',
              displayName: 'Test string',
              enableFuzzyExtraction: true,
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              kind: 'Test string',
              name: 'Test string',
            },
          ],
        },
        entityTypeBatchUri: 'Test string',
        languageCode: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates an entity type in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        autoExpansionMode: 'Test string',
        displayName: 'Test string',
        enableFuzzyExtraction: true,
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.delete({
      name: 'Test string',
    });
    /** Retrieves the specified entity type. */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all entity types in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        autoExpansionMode: 'Test string',
        displayName: 'Test string',
        enableFuzzyExtraction: true,
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates multiple new entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.entities.batchCreate(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        languageCode: 'Test string',
      }
    );
    /** Deletes entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.entities.batchDelete(
      {
        parent: 'Test string',
      },
      {
        entityValues: ['Test string'],
        languageCode: 'Test string',
      }
    );
    /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.entityTypes.entities.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        languageCode: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates an agent environment. */
    await gapi.client.dialogflow.projects.locations.agent.environments.create(
      {
        environmentId: 'Test string',
        parent: 'Test string',
      },
      {
        agentVersion: 'Test string',
        description: 'Test string',
        fulfillment: {
          displayName: 'Test string',
          enabled: true,
          features: [
            {
              type: 'Test string',
            },
          ],
          genericWebService: {
            isCloudFunction: true,
            password: 'Test string',
            requestHeaders: {
              A: 'Test string',
            },
            uri: 'Test string',
            username: 'Test string',
          },
          name: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        textToSpeechSettings: {
          enableTextToSpeech: true,
          outputAudioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfigs: {
            A: {
              effectsProfileId: ['Test string'],
              pitch: 42,
              speakingRate: 42,
              voice: {
                name: 'Test string',
                ssmlGender: 'Test string',
              },
              volumeGainDb: 42,
            },
          },
        },
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified agent environment. */
    await gapi.client.dialogflow.projects.locations.agent.environments.delete({
      name: 'Test string',
    });
    /** Retrieves the specified agent environment. */
    await gapi.client.dialogflow.projects.locations.agent.environments.get({
      name: 'Test string',
    });
    /** Gets the history of the specified environment. */
    await gapi.client.dialogflow.projects.locations.agent.environments.getHistory(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Returns the list of all non-default environments of the specified agent. */
    await gapi.client.dialogflow.projects.locations.agent.environments.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified agent environment. This method allows you to deploy new agent versions into the environment. When an environment is pointed to a new agent version by setting `environment.agent_version`, the environment is temporarily set to the `LOADING` state. During that time, the environment continues serving the previous version of the agent. After the new agent version is done loading, the environment is set back to the `RUNNING` state. You can use "-" as Environment ID in environment name to update an agent version in the default environment. WARNING: this will negate all recent changes to the draft agent and can't be undone. You may want to save the draft agent to a version before calling this method. */
    await gapi.client.dialogflow.projects.locations.agent.environments.patch(
      {
        allowLoadToDraftAndDiscardChanges: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        agentVersion: 'Test string',
        description: 'Test string',
        fulfillment: {
          displayName: 'Test string',
          enabled: true,
          features: [
            {
              type: 'Test string',
            },
          ],
          genericWebService: {
            isCloudFunction: true,
            password: 'Test string',
            requestHeaders: {
              A: 'Test string',
            },
            uri: 'Test string',
            username: 'Test string',
          },
          name: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        textToSpeechSettings: {
          enableTextToSpeech: true,
          outputAudioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfigs: {
            A: {
              effectsProfileId: ['Test string'],
              pitch: 42,
              speakingRate: 42,
              voice: {
                name: 'Test string',
                ssmlGender: 'Test string',
              },
              volumeGainDb: 42,
            },
          },
        },
        updateTime: 'Test string',
      }
    );
    /** Returns the list of all intents in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agent.environments.intents.list(
      {
        intentView: 'Test string',
        languageCode: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Deletes all active contexts in the specified session. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.deleteContexts(
      {
        parent: 'Test string',
      }
    );
    /** Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions). */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.detectIntent(
      {
        session: 'Test string',
      },
      {
        inputAudio: 'Test string',
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        outputAudioConfigMask: 'Test string',
        queryInput: {
          audioConfig: {
            audioEncoding: 'Test string',
            disableNoSpeechRecognizedEvent: true,
            enableAutomaticPunctuation: true,
            enableWordInfo: true,
            languageCode: 'Test string',
            model: 'Test string',
            modelVariant: 'Test string',
            optOutConformerModelMigration: true,
            phraseHints: ['Test string'],
            sampleRateHertz: 42,
            singleUtterance: true,
            speechContexts: [
              {
                boost: 42,
                phrases: ['Test string'],
              },
            ],
          },
          event: {
            languageCode: 'Test string',
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
          text: {
            languageCode: 'Test string',
            text: 'Test string',
          },
        },
        queryParams: {
          contexts: [
            {
              lifespanCount: 42,
              name: 'Test string',
              parameters: {
                A: 42,
              },
            },
          ],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          payload: {
            A: 42,
          },
          platform: 'Test string',
          resetContexts: true,
          sentimentAnalysisRequestConfig: {
            analyzeQueryTextSentiment: true,
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
      }
    );
    /** Creates a context. If the specified context already exists, overrides the context. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.contexts.create(
      {
        parent: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Deletes the specified context. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.contexts.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified context. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.contexts.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all contexts in the specified session. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.contexts.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified context. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.contexts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.create(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.intents.batchDelete(
      {
        parent: 'Test string',
      },
      {
        intents: [
          {
            action: 'Test string',
            defaultResponsePlatforms: ['Test string'],
            displayName: 'Test string',
            endInteraction: true,
            events: ['Test string'],
            followupIntentInfo: [
              {
                followupIntentName: 'Test string',
                parentFollowupIntentName: 'Test string',
              },
            ],
            inputContextNames: ['Test string'],
            isFallback: true,
            liveAgentHandoff: true,
            messages: [
              {
                basicCard: {
                  buttons: [
                    {
                      openUriAction: {
                        uri: 'Test string',
                      },
                      title: 'Test string',
                    },
                  ],
                  formattedText: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                browseCarouselCard: {
                  imageDisplayOptions: 'Test string',
                  items: [
                    {
                      description: 'Test string',
                      footer: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      openUriAction: {
                        url: 'Test string',
                        urlTypeHint: 'Test string',
                      },
                      title: 'Test string',
                    },
                  ],
                },
                card: {
                  buttons: [
                    {
                      postback: 'Test string',
                      text: 'Test string',
                    },
                  ],
                  imageUri: 'Test string',
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                carouselSelect: {
                  items: [
                    {
                      description: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      info: {
                        key: 'Test string',
                        synonyms: ['Test string'],
                      },
                      title: 'Test string',
                    },
                  ],
                },
                image: {
                  accessibilityText: 'Test string',
                  imageUri: 'Test string',
                },
                linkOutSuggestion: {
                  destinationName: 'Test string',
                  uri: 'Test string',
                },
                listSelect: {
                  items: [
                    {
                      description: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      info: {
                        key: 'Test string',
                        synonyms: ['Test string'],
                      },
                      title: 'Test string',
                    },
                  ],
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                mediaContent: {
                  mediaObjects: [
                    {
                      contentUrl: 'Test string',
                      description: 'Test string',
                      icon: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      largeImage: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      name: 'Test string',
                    },
                  ],
                  mediaType: 'Test string',
                },
                payload: {
                  A: 42,
                },
                platform: 'Test string',
                quickReplies: {
                  quickReplies: ['Test string'],
                  title: 'Test string',
                },
                simpleResponses: {
                  simpleResponses: [
                    {
                      displayText: 'Test string',
                      ssml: 'Test string',
                      textToSpeech: 'Test string',
                    },
                  ],
                },
                suggestions: {
                  suggestions: [
                    {
                      title: 'Test string',
                    },
                  ],
                },
                tableCard: {
                  buttons: [
                    {
                      openUriAction: {
                        uri: 'Test string',
                      },
                      title: 'Test string',
                    },
                  ],
                  columnProperties: [
                    {
                      header: 'Test string',
                      horizontalAlignment: 'Test string',
                    },
                  ],
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  rows: [
                    {
                      cells: [
                        {
                          text: 'Test string',
                        },
                      ],
                      dividerAfter: true,
                    },
                  ],
                  subtitle: 'Test string',
                  title: 'Test string',
                },
                text: {
                  text: ['Test string'],
                },
              },
            ],
            mlDisabled: true,
            name: 'Test string',
            outputContexts: [
              {
                lifespanCount: 42,
                name: 'Test string',
                parameters: {
                  A: 42,
                },
              },
            ],
            parameters: [
              {
                defaultValue: 'Test string',
                displayName: 'Test string',
                entityTypeDisplayName: 'Test string',
                isList: true,
                mandatory: true,
                name: 'Test string',
                prompts: ['Test string'],
                value: 'Test string',
              },
            ],
            parentFollowupIntentName: 'Test string',
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: 'Test string',
            trainingPhrases: [
              {
                name: 'Test string',
                parts: [
                  {
                    alias: 'Test string',
                    entityType: 'Test string',
                    text: 'Test string',
                    userDefined: true,
                  },
                ],
                timesAddedCount: 42,
                type: 'Test string',
              },
            ],
            webhookState: 'Test string',
          },
        ],
      }
    );
    /** Updates/Creates multiple intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateIntentsResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.intents.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        intentBatchInline: {
          intents: [
            {
              action: 'Test string',
              defaultResponsePlatforms: ['Test string'],
              displayName: 'Test string',
              endInteraction: true,
              events: ['Test string'],
              followupIntentInfo: [
                {
                  followupIntentName: 'Test string',
                  parentFollowupIntentName: 'Test string',
                },
              ],
              inputContextNames: ['Test string'],
              isFallback: true,
              liveAgentHandoff: true,
              messages: [
                {
                  basicCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    formattedText: 'Test string',
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  browseCarouselCard: {
                    imageDisplayOptions: 'Test string',
                    items: [
                      {
                        description: 'Test string',
                        footer: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        openUriAction: {
                          url: 'Test string',
                          urlTypeHint: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  card: {
                    buttons: [
                      {
                        postback: 'Test string',
                        text: 'Test string',
                      },
                    ],
                    imageUri: 'Test string',
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  carouselSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  linkOutSuggestion: {
                    destinationName: 'Test string',
                    uri: 'Test string',
                  },
                  listSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  mediaContent: {
                    mediaObjects: [
                      {
                        contentUrl: 'Test string',
                        description: 'Test string',
                        icon: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        largeImage: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        name: 'Test string',
                      },
                    ],
                    mediaType: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  platform: 'Test string',
                  quickReplies: {
                    quickReplies: ['Test string'],
                    title: 'Test string',
                  },
                  simpleResponses: {
                    simpleResponses: [
                      {
                        displayText: 'Test string',
                        ssml: 'Test string',
                        textToSpeech: 'Test string',
                      },
                    ],
                  },
                  suggestions: {
                    suggestions: [
                      {
                        title: 'Test string',
                      },
                    ],
                  },
                  tableCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    columnProperties: [
                      {
                        header: 'Test string',
                        horizontalAlignment: 'Test string',
                      },
                    ],
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    rows: [
                      {
                        cells: [
                          {
                            text: 'Test string',
                          },
                        ],
                        dividerAfter: true,
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  text: {
                    text: ['Test string'],
                  },
                },
              ],
              mlDisabled: true,
              name: 'Test string',
              outputContexts: [
                {
                  lifespanCount: 42,
                  name: 'Test string',
                  parameters: {
                    A: 42,
                  },
                },
              ],
              parameters: [
                {
                  defaultValue: 'Test string',
                  displayName: 'Test string',
                  entityTypeDisplayName: 'Test string',
                  isList: true,
                  mandatory: true,
                  name: 'Test string',
                  prompts: ['Test string'],
                  value: 'Test string',
                },
              ],
              parentFollowupIntentName: 'Test string',
              priority: 42,
              resetContexts: true,
              rootFollowupIntentName: 'Test string',
              trainingPhrases: [
                {
                  name: 'Test string',
                  parts: [
                    {
                      alias: 'Test string',
                      entityType: 'Test string',
                      text: 'Test string',
                      userDefined: true,
                    },
                  ],
                  timesAddedCount: 42,
                  type: 'Test string',
                },
              ],
              webhookState: 'Test string',
            },
          ],
        },
        intentBatchUri: 'Test string',
        intentView: 'Test string',
        languageCode: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates an intent in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.intents.create(
      {
        intentView: 'Test string',
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        action: 'Test string',
        defaultResponsePlatforms: ['Test string'],
        displayName: 'Test string',
        endInteraction: true,
        events: ['Test string'],
        followupIntentInfo: [
          {
            followupIntentName: 'Test string',
            parentFollowupIntentName: 'Test string',
          },
        ],
        inputContextNames: ['Test string'],
        isFallback: true,
        liveAgentHandoff: true,
        messages: [
          {
            basicCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              formattedText: 'Test string',
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              subtitle: 'Test string',
              title: 'Test string',
            },
            browseCarouselCard: {
              imageDisplayOptions: 'Test string',
              items: [
                {
                  description: 'Test string',
                  footer: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  openUriAction: {
                    url: 'Test string',
                    urlTypeHint: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
            },
            card: {
              buttons: [
                {
                  postback: 'Test string',
                  text: 'Test string',
                },
              ],
              imageUri: 'Test string',
              subtitle: 'Test string',
              title: 'Test string',
            },
            carouselSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
            },
            image: {
              accessibilityText: 'Test string',
              imageUri: 'Test string',
            },
            linkOutSuggestion: {
              destinationName: 'Test string',
              uri: 'Test string',
            },
            listSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            mediaContent: {
              mediaObjects: [
                {
                  contentUrl: 'Test string',
                  description: 'Test string',
                  icon: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  largeImage: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  name: 'Test string',
                },
              ],
              mediaType: 'Test string',
            },
            payload: {
              A: 42,
            },
            platform: 'Test string',
            quickReplies: {
              quickReplies: ['Test string'],
              title: 'Test string',
            },
            simpleResponses: {
              simpleResponses: [
                {
                  displayText: 'Test string',
                  ssml: 'Test string',
                  textToSpeech: 'Test string',
                },
              ],
            },
            suggestions: {
              suggestions: [
                {
                  title: 'Test string',
                },
              ],
            },
            tableCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              columnProperties: [
                {
                  header: 'Test string',
                  horizontalAlignment: 'Test string',
                },
              ],
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              rows: [
                {
                  cells: [
                    {
                      text: 'Test string',
                    },
                  ],
                  dividerAfter: true,
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            text: {
              text: ['Test string'],
            },
          },
        ],
        mlDisabled: true,
        name: 'Test string',
        outputContexts: [
          {
            lifespanCount: 42,
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
        ],
        parameters: [
          {
            defaultValue: 'Test string',
            displayName: 'Test string',
            entityTypeDisplayName: 'Test string',
            isList: true,
            mandatory: true,
            name: 'Test string',
            prompts: ['Test string'],
            value: 'Test string',
          },
        ],
        parentFollowupIntentName: 'Test string',
        priority: 42,
        resetContexts: true,
        rootFollowupIntentName: 'Test string',
        trainingPhrases: [
          {
            name: 'Test string',
            parts: [
              {
                alias: 'Test string',
                entityType: 'Test string',
                text: 'Test string',
                userDefined: true,
              },
            ],
            timesAddedCount: 42,
            type: 'Test string',
          },
        ],
        webhookState: 'Test string',
      }
    );
    /** Deletes the specified intent and its direct or indirect followup intents. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.intents.delete({
      name: 'Test string',
    });
    /** Retrieves the specified intent. */
    await gapi.client.dialogflow.projects.locations.agent.intents.get({
      intentView: 'Test string',
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all intents in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agent.intents.list({
      intentView: 'Test string',
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified intent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). */
    await gapi.client.dialogflow.projects.locations.agent.intents.patch(
      {
        intentView: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        action: 'Test string',
        defaultResponsePlatforms: ['Test string'],
        displayName: 'Test string',
        endInteraction: true,
        events: ['Test string'],
        followupIntentInfo: [
          {
            followupIntentName: 'Test string',
            parentFollowupIntentName: 'Test string',
          },
        ],
        inputContextNames: ['Test string'],
        isFallback: true,
        liveAgentHandoff: true,
        messages: [
          {
            basicCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              formattedText: 'Test string',
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              subtitle: 'Test string',
              title: 'Test string',
            },
            browseCarouselCard: {
              imageDisplayOptions: 'Test string',
              items: [
                {
                  description: 'Test string',
                  footer: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  openUriAction: {
                    url: 'Test string',
                    urlTypeHint: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
            },
            card: {
              buttons: [
                {
                  postback: 'Test string',
                  text: 'Test string',
                },
              ],
              imageUri: 'Test string',
              subtitle: 'Test string',
              title: 'Test string',
            },
            carouselSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
            },
            image: {
              accessibilityText: 'Test string',
              imageUri: 'Test string',
            },
            linkOutSuggestion: {
              destinationName: 'Test string',
              uri: 'Test string',
            },
            listSelect: {
              items: [
                {
                  description: 'Test string',
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  info: {
                    key: 'Test string',
                    synonyms: ['Test string'],
                  },
                  title: 'Test string',
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            mediaContent: {
              mediaObjects: [
                {
                  contentUrl: 'Test string',
                  description: 'Test string',
                  icon: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  largeImage: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  name: 'Test string',
                },
              ],
              mediaType: 'Test string',
            },
            payload: {
              A: 42,
            },
            platform: 'Test string',
            quickReplies: {
              quickReplies: ['Test string'],
              title: 'Test string',
            },
            simpleResponses: {
              simpleResponses: [
                {
                  displayText: 'Test string',
                  ssml: 'Test string',
                  textToSpeech: 'Test string',
                },
              ],
            },
            suggestions: {
              suggestions: [
                {
                  title: 'Test string',
                },
              ],
            },
            tableCard: {
              buttons: [
                {
                  openUriAction: {
                    uri: 'Test string',
                  },
                  title: 'Test string',
                },
              ],
              columnProperties: [
                {
                  header: 'Test string',
                  horizontalAlignment: 'Test string',
                },
              ],
              image: {
                accessibilityText: 'Test string',
                imageUri: 'Test string',
              },
              rows: [
                {
                  cells: [
                    {
                      text: 'Test string',
                    },
                  ],
                  dividerAfter: true,
                },
              ],
              subtitle: 'Test string',
              title: 'Test string',
            },
            text: {
              text: ['Test string'],
            },
          },
        ],
        mlDisabled: true,
        name: 'Test string',
        outputContexts: [
          {
            lifespanCount: 42,
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
        ],
        parameters: [
          {
            defaultValue: 'Test string',
            displayName: 'Test string',
            entityTypeDisplayName: 'Test string',
            isList: true,
            mandatory: true,
            name: 'Test string',
            prompts: ['Test string'],
            value: 'Test string',
          },
        ],
        parentFollowupIntentName: 'Test string',
        priority: 42,
        resetContexts: true,
        rootFollowupIntentName: 'Test string',
        trainingPhrases: [
          {
            name: 'Test string',
            parts: [
              {
                alias: 'Test string',
                entityType: 'Test string',
                text: 'Test string',
                userDefined: true,
              },
            ],
            timesAddedCount: 42,
            type: 'Test string',
          },
        ],
        webhookState: 'Test string',
      }
    );
    /** Deletes all active contexts in the specified session. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.deleteContexts(
      {
        parent: 'Test string',
      }
    );
    /** Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions). */
    await gapi.client.dialogflow.projects.locations.agent.sessions.detectIntent(
      {
        session: 'Test string',
      },
      {
        inputAudio: 'Test string',
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        outputAudioConfigMask: 'Test string',
        queryInput: {
          audioConfig: {
            audioEncoding: 'Test string',
            disableNoSpeechRecognizedEvent: true,
            enableAutomaticPunctuation: true,
            enableWordInfo: true,
            languageCode: 'Test string',
            model: 'Test string',
            modelVariant: 'Test string',
            optOutConformerModelMigration: true,
            phraseHints: ['Test string'],
            sampleRateHertz: 42,
            singleUtterance: true,
            speechContexts: [
              {
                boost: 42,
                phrases: ['Test string'],
              },
            ],
          },
          event: {
            languageCode: 'Test string',
            name: 'Test string',
            parameters: {
              A: 42,
            },
          },
          text: {
            languageCode: 'Test string',
            text: 'Test string',
          },
        },
        queryParams: {
          contexts: [
            {
              lifespanCount: 42,
              name: 'Test string',
              parameters: {
                A: 42,
              },
            },
          ],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          payload: {
            A: 42,
          },
          platform: 'Test string',
          resetContexts: true,
          sentimentAnalysisRequestConfig: {
            analyzeQueryTextSentiment: true,
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
      }
    );
    /** Creates a context. If the specified context already exists, overrides the context. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.contexts.create(
      {
        parent: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Deletes the specified context. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.contexts.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified context. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.contexts.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all contexts in the specified session. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.contexts.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified context. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.contexts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        lifespanCount: 42,
        name: 'Test string',
        parameters: {
          A: 42,
        },
      }
    );
    /** Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.entityTypes.create(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.entityTypes.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.entityTypes.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.entityTypes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration. */
    await gapi.client.dialogflow.projects.locations.agent.sessions.entityTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates an agent version. The new version points to the agent instance in the "default" environment. */
    await gapi.client.dialogflow.projects.locations.agent.versions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        status: 'Test string',
        versionNumber: 42,
      }
    );
    /** Delete the specified agent version. */
    await gapi.client.dialogflow.projects.locations.agent.versions.delete({
      name: 'Test string',
    });
    /** Retrieves the specified agent version. */
    await gapi.client.dialogflow.projects.locations.agent.versions.get({
      name: 'Test string',
    });
    /** Returns the list of all versions of the specified agent. */
    await gapi.client.dialogflow.projects.locations.agent.versions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified agent version. Note that this method does not allow you to update the state of the agent the given version points to. It allows you to update only mutable properties of the version resource. */
    await gapi.client.dialogflow.projects.locations.agent.versions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        status: 'Test string',
        versionNumber: 42,
      }
    );
    /** Returns the list of all answer records in the specified project in reverse chronological order. */
    await gapi.client.dialogflow.projects.locations.answerRecords.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified answer record. */
    await gapi.client.dialogflow.projects.locations.answerRecords.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        agentAssistantRecord: {
          articleSuggestionAnswer: {
            answerRecord: 'Test string',
            confidence: 42,
            metadata: {
              A: 'Test string',
            },
            snippets: ['Test string'],
            title: 'Test string',
            uri: 'Test string',
          },
          dialogflowAssistAnswer: {
            answerRecord: 'Test string',
            intentSuggestion: {
              description: 'Test string',
              displayName: 'Test string',
              intentV2: 'Test string',
            },
            queryResult: {
              action: 'Test string',
              allRequiredParamsPresent: true,
              cancelsSlotFilling: true,
              diagnosticInfo: {
                A: 42,
              },
              fulfillmentMessages: [
                {
                  basicCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    formattedText: 'Test string',
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  browseCarouselCard: {
                    imageDisplayOptions: 'Test string',
                    items: [
                      {
                        description: 'Test string',
                        footer: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        openUriAction: {
                          url: 'Test string',
                          urlTypeHint: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  card: {
                    buttons: [
                      {
                        postback: 'Test string',
                        text: 'Test string',
                      },
                    ],
                    imageUri: 'Test string',
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  carouselSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                  },
                  image: {
                    accessibilityText: 'Test string',
                    imageUri: 'Test string',
                  },
                  linkOutSuggestion: {
                    destinationName: 'Test string',
                    uri: 'Test string',
                  },
                  listSelect: {
                    items: [
                      {
                        description: 'Test string',
                        image: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        info: {
                          key: 'Test string',
                          synonyms: ['Test string'],
                        },
                        title: 'Test string',
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  mediaContent: {
                    mediaObjects: [
                      {
                        contentUrl: 'Test string',
                        description: 'Test string',
                        icon: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        largeImage: {
                          accessibilityText: 'Test string',
                          imageUri: 'Test string',
                        },
                        name: 'Test string',
                      },
                    ],
                    mediaType: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  platform: 'Test string',
                  quickReplies: {
                    quickReplies: ['Test string'],
                    title: 'Test string',
                  },
                  simpleResponses: {
                    simpleResponses: [
                      {
                        displayText: 'Test string',
                        ssml: 'Test string',
                        textToSpeech: 'Test string',
                      },
                    ],
                  },
                  suggestions: {
                    suggestions: [
                      {
                        title: 'Test string',
                      },
                    ],
                  },
                  tableCard: {
                    buttons: [
                      {
                        openUriAction: {
                          uri: 'Test string',
                        },
                        title: 'Test string',
                      },
                    ],
                    columnProperties: [
                      {
                        header: 'Test string',
                        horizontalAlignment: 'Test string',
                      },
                    ],
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    rows: [
                      {
                        cells: [
                          {
                            text: 'Test string',
                          },
                        ],
                        dividerAfter: true,
                      },
                    ],
                    subtitle: 'Test string',
                    title: 'Test string',
                  },
                  text: {
                    text: ['Test string'],
                  },
                },
              ],
              fulfillmentText: 'Test string',
              intent: {
                action: 'Test string',
                defaultResponsePlatforms: ['Test string'],
                displayName: 'Test string',
                endInteraction: true,
                events: ['Test string'],
                followupIntentInfo: [
                  {
                    followupIntentName: 'Test string',
                    parentFollowupIntentName: 'Test string',
                  },
                ],
                inputContextNames: ['Test string'],
                isFallback: true,
                liveAgentHandoff: true,
                messages: [
                  {
                    basicCard: {
                      buttons: [
                        {
                          openUriAction: {
                            uri: 'Test string',
                          },
                          title: 'Test string',
                        },
                      ],
                      formattedText: 'Test string',
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    browseCarouselCard: {
                      imageDisplayOptions: 'Test string',
                      items: [
                        {
                          description: 'Test string',
                          footer: 'Test string',
                          image: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          openUriAction: {
                            url: 'Test string',
                            urlTypeHint: 'Test string',
                          },
                          title: 'Test string',
                        },
                      ],
                    },
                    card: {
                      buttons: [
                        {
                          postback: 'Test string',
                          text: 'Test string',
                        },
                      ],
                      imageUri: 'Test string',
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    carouselSelect: {
                      items: [
                        {
                          description: 'Test string',
                          image: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          info: {
                            key: 'Test string',
                            synonyms: ['Test string'],
                          },
                          title: 'Test string',
                        },
                      ],
                    },
                    image: {
                      accessibilityText: 'Test string',
                      imageUri: 'Test string',
                    },
                    linkOutSuggestion: {
                      destinationName: 'Test string',
                      uri: 'Test string',
                    },
                    listSelect: {
                      items: [
                        {
                          description: 'Test string',
                          image: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          info: {
                            key: 'Test string',
                            synonyms: ['Test string'],
                          },
                          title: 'Test string',
                        },
                      ],
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    mediaContent: {
                      mediaObjects: [
                        {
                          contentUrl: 'Test string',
                          description: 'Test string',
                          icon: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          largeImage: {
                            accessibilityText: 'Test string',
                            imageUri: 'Test string',
                          },
                          name: 'Test string',
                        },
                      ],
                      mediaType: 'Test string',
                    },
                    payload: {
                      A: 42,
                    },
                    platform: 'Test string',
                    quickReplies: {
                      quickReplies: ['Test string'],
                      title: 'Test string',
                    },
                    simpleResponses: {
                      simpleResponses: [
                        {
                          displayText: 'Test string',
                          ssml: 'Test string',
                          textToSpeech: 'Test string',
                        },
                      ],
                    },
                    suggestions: {
                      suggestions: [
                        {
                          title: 'Test string',
                        },
                      ],
                    },
                    tableCard: {
                      buttons: [
                        {
                          openUriAction: {
                            uri: 'Test string',
                          },
                          title: 'Test string',
                        },
                      ],
                      columnProperties: [
                        {
                          header: 'Test string',
                          horizontalAlignment: 'Test string',
                        },
                      ],
                      image: {
                        accessibilityText: 'Test string',
                        imageUri: 'Test string',
                      },
                      rows: [
                        {
                          cells: [
                            {
                              text: 'Test string',
                            },
                          ],
                          dividerAfter: true,
                        },
                      ],
                      subtitle: 'Test string',
                      title: 'Test string',
                    },
                    text: {
                      text: ['Test string'],
                    },
                  },
                ],
                mlDisabled: true,
                name: 'Test string',
                outputContexts: [
                  {
                    lifespanCount: 42,
                    name: 'Test string',
                    parameters: {
                      A: 42,
                    },
                  },
                ],
                parameters: [
                  {
                    defaultValue: 'Test string',
                    displayName: 'Test string',
                    entityTypeDisplayName: 'Test string',
                    isList: true,
                    mandatory: true,
                    name: 'Test string',
                    prompts: ['Test string'],
                    value: 'Test string',
                  },
                ],
                parentFollowupIntentName: 'Test string',
                priority: 42,
                resetContexts: true,
                rootFollowupIntentName: 'Test string',
                trainingPhrases: [
                  {
                    name: 'Test string',
                    parts: [
                      {
                        alias: 'Test string',
                        entityType: 'Test string',
                        text: 'Test string',
                        userDefined: true,
                      },
                    ],
                    timesAddedCount: 42,
                    type: 'Test string',
                  },
                ],
                webhookState: 'Test string',
              },
              intentDetectionConfidence: 42,
              languageCode: 'Test string',
              outputContexts: [
                {
                  lifespanCount: 42,
                  name: 'Test string',
                  parameters: {
                    A: 42,
                  },
                },
              ],
              parameters: {
                A: 42,
              },
              queryText: 'Test string',
              sentimentAnalysisResult: {
                queryTextSentiment: {
                  magnitude: 42,
                  score: 42,
                },
              },
              speechRecognitionConfidence: 42,
              webhookPayload: {
                A: 42,
              },
              webhookSource: 'Test string',
            },
          },
          faqAnswer: {
            answer: 'Test string',
            answerRecord: 'Test string',
            confidence: 42,
            metadata: {
              A: 'Test string',
            },
            question: 'Test string',
            source: 'Test string',
          },
        },
        answerFeedback: {
          agentAssistantDetailFeedback: {
            answerRelevance: 'Test string',
            documentCorrectness: 'Test string',
            documentEfficiency: 'Test string',
            knowledgeAssistFeedback: {
              answerCopied: true,
              clickedUris: ['Test string'],
            },
            knowledgeSearchFeedback: {
              answerCopied: true,
              clickedUris: ['Test string'],
            },
            summarizationFeedback: {
              startTime: 'Test string',
              submitTime: 'Test string',
              summaryText: 'Test string',
              textSections: {
                A: 'Test string',
              },
            },
          },
          clicked: true,
          clickTime: 'Test string',
          correctnessLevel: 'Test string',
          displayed: true,
          displayTime: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Creates a new conversation dataset. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationDatasetOperationMetadata - `response`: ConversationDataset */
    await gapi.client.dialogflow.projects.locations.conversationDatasets.create(
      {
        parent: 'Test string',
      },
      {
        conversationCount: 'Test string',
        conversationInfo: {
          languageCode: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        inputConfig: {
          gcsSource: {
            uris: ['Test string'],
          },
        },
        name: 'Test string',
      }
    );
    /** Deletes the specified conversation dataset. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeleteConversationDatasetOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.locations.conversationDatasets.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified conversation dataset. */
    await gapi.client.dialogflow.projects.locations.conversationDatasets.get({
      name: 'Test string',
    });
    /** Import data into the specified conversation dataset. Note that it is not allowed to import data to a conversation dataset that already has data in it. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportConversationDataOperationMetadata - `response`: ImportConversationDataOperationResponse */
    await gapi.client.dialogflow.projects.locations.conversationDatasets.importConversationData(
      {
        name: 'Test string',
      },
      {
        inputConfig: {
          gcsSource: {
            uris: ['Test string'],
          },
        },
      }
    );
    /** Returns the list of all conversation datasets in the specified project and location. */
    await gapi.client.dialogflow.projects.locations.conversationDatasets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a model. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationModelOperationMetadata - `response`: ConversationModel */
    await gapi.client.dialogflow.projects.locations.conversationModels.create(
      {
        parent: 'Test string',
      },
      {
        articleSuggestionModelMetadata: {
          trainingModelType: 'Test string',
        },
        createTime: 'Test string',
        datasets: [
          {
            dataset: 'Test string',
          },
        ],
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        smartReplyModelMetadata: {
          trainingModelType: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Deletes a model. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeleteConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.locations.conversationModels.delete({
      name: 'Test string',
    });
    /** Deploys a model. If a model is already deployed, deploying it has no effect. A model can only serve prediction requests after it gets deployed. For article suggestion, custom model will not be used unless it is deployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.locations.conversationModels.deploy(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets conversation model. */
    await gapi.client.dialogflow.projects.locations.conversationModels.get({
      name: 'Test string',
    });
    /** Lists conversation models. */
    await gapi.client.dialogflow.projects.locations.conversationModels.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Undeploys a model. If the model is not deployed this method has no effect. If the model is currently being used: - For article suggestion, article suggestion will fallback to the default model if model is undeployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: UndeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.locations.conversationModels.undeploy(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates evaluation of a conversation model. */
    await gapi.client.dialogflow.projects.locations.conversationModels.evaluations.create(
      {
        parent: 'Test string',
      },
      {
        conversationModelEvaluation: {
          createTime: 'Test string',
          displayName: 'Test string',
          evaluationConfig: {
            datasets: [
              {
                dataset: 'Test string',
              },
            ],
            smartComposeConfig: {
              allowlistDocument: 'Test string',
              maxResultCount: 42,
            },
            smartReplyConfig: {
              allowlistDocument: 'Test string',
              maxResultCount: 42,
            },
          },
          name: 'Test string',
          rawHumanEvalTemplateCsv: 'Test string',
          smartReplyMetrics: {
            allowlistCoverage: 42,
            conversationCount: 'Test string',
            topNMetrics: [
              {
                n: 42,
                recall: 42,
              },
            ],
          },
        },
      }
    );
    /** Gets an evaluation of conversation model. */
    await gapi.client.dialogflow.projects.locations.conversationModels.evaluations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists evaluations of a conversation model. */
    await gapi.client.dialogflow.projects.locations.conversationModels.evaluations.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Clears a suggestion feature from a conversation profile for the given participant role. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ClearSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.clearSuggestionFeatureConfig(
      {
        conversationProfile: 'Test string',
      },
      {
        participantRole: 'Test string',
        suggestionFeatureType: 'Test string',
      }
    );
    /** Creates a conversation profile in the specified project. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API. */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.create(
      {
        parent: 'Test string',
      },
      {
        automatedAgentConfig: {
          agent: 'Test string',
          sessionTtl: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        humanAgentAssistantConfig: {
          endUserSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          humanAgentSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          messageAnalysisConfig: {
            enableEntityExtraction: true,
            enableSentimentAnalysis: true,
          },
          notificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
        },
        humanAgentHandoffConfig: {
          livePersonConfig: {
            accountNumber: 'Test string',
          },
          salesforceLiveAgentConfig: {
            buttonId: 'Test string',
            deploymentId: 'Test string',
            endpointDomain: 'Test string',
            organizationId: 'Test string',
          },
        },
        languageCode: 'Test string',
        loggingConfig: {
          enableStackdriverLogging: true,
        },
        name: 'Test string',
        newMessageEventNotificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        notificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        securitySettings: 'Test string',
        sttConfig: {
          audioEncoding: 'Test string',
          enableWordInfo: true,
          languageCode: 'Test string',
          model: 'Test string',
          sampleRateHertz: 42,
          speechModelVariant: 'Test string',
          useTimeoutBasedEndpointing: true,
        },
        timeZone: 'Test string',
        ttsConfig: {
          effectsProfileId: ['Test string'],
          pitch: 42,
          speakingRate: 42,
          voice: {
            name: 'Test string',
            ssmlGender: 'Test string',
          },
          volumeGainDb: 42,
        },
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified conversation profile. */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified conversation profile. */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.get({
      name: 'Test string',
    });
    /** Returns the list of all conversation profiles in the specified project. */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified conversation profile. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API. */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        automatedAgentConfig: {
          agent: 'Test string',
          sessionTtl: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        humanAgentAssistantConfig: {
          endUserSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          humanAgentSuggestionConfig: {
            disableHighLatencyFeaturesSyncDelivery: true,
            featureConfigs: [
              {
                conversationModelConfig: {
                  baselineModelVersion: 'Test string',
                  model: 'Test string',
                },
                conversationProcessConfig: {
                  recentSentencesCount: 42,
                },
                disableAgentQueryLogging: true,
                enableConversationAugmentedQuery: true,
                enableEventBasedSuggestion: true,
                enableQuerySuggestionOnly: true,
                enableQuerySuggestionWhenNoAnswer: true,
                queryConfig: {
                  confidenceThreshold: 42,
                  contextFilterSettings: {
                    dropHandoffMessages: true,
                    dropIvrMessages: true,
                    dropVirtualAgentMessages: true,
                  },
                  dialogflowQuerySource: {
                    agent: 'Test string',
                    humanAgentSideConfig: {
                      agent: 'Test string',
                    },
                  },
                  documentQuerySource: {
                    documents: ['Test string'],
                  },
                  knowledgeBaseQuerySource: {
                    knowledgeBases: ['Test string'],
                  },
                  maxResults: 42,
                  sections: {
                    sectionTypes: ['Test string'],
                  },
                },
                suggestionFeature: {
                  type: 'Test string',
                },
                suggestionTriggerSettings: {
                  noSmalltalk: true,
                  onlyEndUser: true,
                },
              },
            ],
            generators: ['Test string'],
            groupSuggestionResponses: true,
          },
          messageAnalysisConfig: {
            enableEntityExtraction: true,
            enableSentimentAnalysis: true,
          },
          notificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
        },
        humanAgentHandoffConfig: {
          livePersonConfig: {
            accountNumber: 'Test string',
          },
          salesforceLiveAgentConfig: {
            buttonId: 'Test string',
            deploymentId: 'Test string',
            endpointDomain: 'Test string',
            organizationId: 'Test string',
          },
        },
        languageCode: 'Test string',
        loggingConfig: {
          enableStackdriverLogging: true,
        },
        name: 'Test string',
        newMessageEventNotificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        notificationConfig: {
          messageFormat: 'Test string',
          topic: 'Test string',
        },
        securitySettings: 'Test string',
        sttConfig: {
          audioEncoding: 'Test string',
          enableWordInfo: true,
          languageCode: 'Test string',
          model: 'Test string',
          sampleRateHertz: 42,
          speechModelVariant: 'Test string',
          useTimeoutBasedEndpointing: true,
        },
        timeZone: 'Test string',
        ttsConfig: {
          effectsProfileId: ['Test string'],
          pitch: 42,
          speakingRate: 42,
          voice: {
            name: 'Test string',
            ssmlGender: 'Test string',
          },
          volumeGainDb: 42,
        },
        updateTime: 'Test string',
      }
    );
    /** Adds or updates a suggestion feature in a conversation profile. If the conversation profile contains the type of suggestion feature for the participant role, it will update it. Otherwise it will insert the suggestion feature. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: SetSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile If a long running operation to add or update suggestion feature config for the same conversation profile, participant role and suggestion feature type exists, please cancel the existing long running operation before sending such request, otherwise the request will be rejected. */
    await gapi.client.dialogflow.projects.locations.conversationProfiles.setSuggestionFeatureConfig(
      {
        conversationProfile: 'Test string',
      },
      {
        participantRole: 'Test string',
        suggestionFeatureConfig: {
          conversationModelConfig: {
            baselineModelVersion: 'Test string',
            model: 'Test string',
          },
          conversationProcessConfig: {
            recentSentencesCount: 42,
          },
          disableAgentQueryLogging: true,
          enableConversationAugmentedQuery: true,
          enableEventBasedSuggestion: true,
          enableQuerySuggestionOnly: true,
          enableQuerySuggestionWhenNoAnswer: true,
          queryConfig: {
            confidenceThreshold: 42,
            contextFilterSettings: {
              dropHandoffMessages: true,
              dropIvrMessages: true,
              dropVirtualAgentMessages: true,
            },
            dialogflowQuerySource: {
              agent: 'Test string',
              humanAgentSideConfig: {
                agent: 'Test string',
              },
            },
            documentQuerySource: {
              documents: ['Test string'],
            },
            knowledgeBaseQuerySource: {
              knowledgeBases: ['Test string'],
            },
            maxResults: 42,
            sections: {
              sectionTypes: ['Test string'],
            },
          },
          suggestionFeature: {
            type: 'Test string',
          },
          suggestionTriggerSettings: {
            noSmalltalk: true,
            onlyEndUser: true,
          },
        },
      }
    );
    /** Completes the specified conversation. Finished conversations are purged from the database after 30 days. */
    await gapi.client.dialogflow.projects.locations.conversations.complete(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates a new conversation. Conversations are auto-completed after 24 hours. Conversation Lifecycle: There are two stages during a conversation: Automated Agent Stage and Assist Stage. For Automated Agent Stage, there will be a dialogflow agent responding to user queries. For Assist Stage, there's no dialogflow agent responding to user queries. But we will provide suggestions which are generated from conversation. If Conversation.conversation_profile is configured for a dialogflow agent, conversation will start from `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And during `Automated Agent Stage`, once an Intent with Intent.live_agent_handoff is triggered, conversation will transfer to Assist Stage. */
    await gapi.client.dialogflow.projects.locations.conversations.create(
      {
        conversationId: 'Test string',
        parent: 'Test string',
      },
      {
        conversationProfile: 'Test string',
        conversationStage: 'Test string',
        endTime: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
        phoneNumber: {
          phoneNumber: 'Test string',
        },
        startTime: 'Test string',
      }
    );
    /** Retrieves the specific conversation. */
    await gapi.client.dialogflow.projects.locations.conversations.get({
      name: 'Test string',
    });
    /** Returns the list of all conversations in the specified project. */
    await gapi.client.dialogflow.projects.locations.conversations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists messages that belong to a given conversation. `messages` are ordered by `create_time` in descending order. To fetch updates without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token. */
    await gapi.client.dialogflow.projects.locations.conversations.messages.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Adds a text (chat, for example), or audio (phone recording, for example) message from a participant into the conversation. Note: Always use agent versions for production traffic sent to virtual agents. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions). */
    await gapi.client.dialogflow.projects.locations.conversations.participants.analyzeContent(
      {
        participant: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        cxParameters: {
          A: 42,
        },
        eventInput: {
          languageCode: 'Test string',
          name: 'Test string',
          parameters: {
            A: 42,
          },
        },
        queryParams: {
          contexts: [
            {
              lifespanCount: 42,
              name: 'Test string',
              parameters: {
                A: 42,
              },
            },
          ],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          payload: {
            A: 42,
          },
          platform: 'Test string',
          resetContexts: true,
          sentimentAnalysisRequestConfig: {
            analyzeQueryTextSentiment: true,
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
        replyAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        requestId: 'Test string',
        suggestionInput: {
          answerRecord: 'Test string',
        },
        textInput: {
          languageCode: 'Test string',
          text: 'Test string',
        },
      }
    );
    /** Creates a new participant in a conversation. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.create(
      {
        parent: 'Test string',
      },
      {
        documentsMetadataFilters: {
          A: 'Test string',
        },
        name: 'Test string',
        obfuscatedExternalUserId: 'Test string',
        role: 'Test string',
        sipRecordingMediaLabel: 'Test string',
      }
    );
    /** Retrieves a conversation participant. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all participants in the specified conversation. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified participant. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        documentsMetadataFilters: {
          A: 'Test string',
        },
        name: 'Test string',
        obfuscatedExternalUserId: 'Test string',
        role: 'Test string',
        sipRecordingMediaLabel: 'Test string',
      }
    );
    /** Gets suggested articles for a participant based on specific historical messages. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.suggestions.suggestArticles(
      {
        parent: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        contextSize: 42,
        latestMessage: 'Test string',
      }
    );
    /** Gets suggested faq answers for a participant based on specific historical messages. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.suggestions.suggestFaqAnswers(
      {
        parent: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        contextSize: 42,
        latestMessage: 'Test string',
      }
    );
    /** Gets knowledge assist suggestions based on historical messages. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.suggestions.suggestKnowledgeAssist(
      {
        parent: 'Test string',
      },
      {
        contextSize: 42,
        latestMessage: 'Test string',
        previousSuggestedQuery: 'Test string',
      }
    );
    /** Gets smart replies for a participant based on specific historical messages. */
    await gapi.client.dialogflow.projects.locations.conversations.participants.suggestions.suggestSmartReplies(
      {
        parent: 'Test string',
      },
      {
        contextSize: 42,
        currentTextInput: {
          languageCode: 'Test string',
          text: 'Test string',
        },
        latestMessage: 'Test string',
      }
    );
    /** Get answers for the given query based on knowledge documents. */
    await gapi.client.dialogflow.projects.locations.conversations.suggestions.searchKnowledge(
      {
        conversation: 'Test string',
      },
      {
        conversation: 'Test string',
        conversationProfile: 'Test string',
        latestMessage: 'Test string',
        parent: 'Test string',
        query: {
          languageCode: 'Test string',
          text: 'Test string',
        },
        sessionId: 'Test string',
      }
    );
    /** Suggests summary for a conversation based on specific historical messages. The range of the messages to be used for summary can be specified in the request. */
    await gapi.client.dialogflow.projects.locations.conversations.suggestions.suggestConversationSummary(
      {
        conversation: 'Test string',
      },
      {
        assistQueryParams: {
          documentsMetadataFilters: {
            A: 'Test string',
          },
        },
        contextSize: 42,
        latestMessage: 'Test string',
      }
    );
    /** Initializes a location-level encryption key specification. An error will be thrown if the location has resources already created before the initialization. Once the encryption specification is initialized at a location, it is immutable and all newly created resources under the location will be encrypted with the existing specification. */
    await gapi.client.dialogflow.projects.locations.encryptionSpec.initialize(
      {
        name: 'Test string',
      },
      {
        encryptionSpec: {
          kmsKey: 'Test string',
          name: 'Test string',
        },
      }
    );
    /** Creates a generator. */
    await gapi.client.dialogflow.projects.locations.generators.create(
      {
        generatorId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        inferenceParameter: {
          maxOutputTokens: 42,
          temperature: 42,
          topK: 42,
          topP: 42,
        },
        name: 'Test string',
        summarizationContext: {
          fewShotExamples: [
            {
              conversationContext: {
                messageEntries: [
                  {
                    createTime: 'Test string',
                    languageCode: 'Test string',
                    role: 'Test string',
                    text: 'Test string',
                  },
                ],
              },
              extraInfo: {
                A: 'Test string',
              },
              output: {
                summarySuggestion: {
                  summarySections: [
                    {
                      section: 'Test string',
                      summary: 'Test string',
                    },
                  ],
                },
              },
              summarizationSectionList: {
                summarizationSections: [
                  {
                    definition: 'Test string',
                    key: 'Test string',
                    type: 'Test string',
                  },
                ],
              },
            },
          ],
          outputLanguageCode: 'Test string',
          summarizationSections: [
            {
              definition: 'Test string',
              key: 'Test string',
              type: 'Test string',
            },
          ],
          version: 'Test string',
        },
        triggerEvent: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a generator. */
    await gapi.client.dialogflow.projects.locations.generators.delete({
      name: 'Test string',
    });
    /** Retrieves a generator. */
    await gapi.client.dialogflow.projects.locations.generators.get({
      name: 'Test string',
    });
    /** Lists generators. */
    await gapi.client.dialogflow.projects.locations.generators.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a generator. */
    await gapi.client.dialogflow.projects.locations.generators.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        inferenceParameter: {
          maxOutputTokens: 42,
          temperature: 42,
          topK: 42,
          topP: 42,
        },
        name: 'Test string',
        summarizationContext: {
          fewShotExamples: [
            {
              conversationContext: {
                messageEntries: [
                  {
                    createTime: 'Test string',
                    languageCode: 'Test string',
                    role: 'Test string',
                    text: 'Test string',
                  },
                ],
              },
              extraInfo: {
                A: 'Test string',
              },
              output: {
                summarySuggestion: {
                  summarySections: [
                    {
                      section: 'Test string',
                      summary: 'Test string',
                    },
                  ],
                },
              },
              summarizationSectionList: {
                summarizationSections: [
                  {
                    definition: 'Test string',
                    key: 'Test string',
                    type: 'Test string',
                  },
                ],
              },
            },
          ],
          outputLanguageCode: 'Test string',
          summarizationSections: [
            {
              definition: 'Test string',
              key: 'Test string',
              type: 'Test string',
            },
          ],
          version: 'Test string',
        },
        triggerEvent: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a knowledge base. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified knowledge base. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves the specified knowledge base. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.get({
      name: 'Test string',
    });
    /** Returns the list of all knowledge bases of the specified agent. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified knowledge base. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.create(
      {
        parent: 'Test string',
      },
      {
        contentUri: 'Test string',
        displayName: 'Test string',
        enableAutoReload: true,
        knowledgeTypes: ['Test string'],
        latestReloadStatus: {
          status: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          time: 'Test string',
        },
        metadata: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        name: 'Test string',
        rawContent: 'Test string',
        state: 'Test string',
      }
    );
    /** Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.delete(
      {
        name: 'Test string',
      }
    );
    /** Exports a smart messaging candidate document into the specified destination. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.export(
      {
        name: 'Test string',
      },
      {
        exportFullContent: true,
        gcsDestination: {
          uri: 'Test string',
        },
        smartMessagingPartialUpdate: true,
      }
    );
    /** Retrieves the specified document. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.get(
      {
        name: 'Test string',
      }
    );
    /** Creates documents by importing data from external sources. Dialogflow supports up to 350 documents in each request. If you try to import more, Dialogflow will return an error. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: ImportDocumentsResponse */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.import(
      {
        parent: 'Test string',
      },
      {
        documentTemplate: {
          knowledgeTypes: ['Test string'],
          metadata: {
            A: 'Test string',
          },
          mimeType: 'Test string',
        },
        gcsSource: {
          uris: ['Test string'],
        },
        importGcsCustomMetadata: true,
      }
    );
    /** Returns the list of all documents of the knowledge base. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        contentUri: 'Test string',
        displayName: 'Test string',
        enableAutoReload: true,
        knowledgeTypes: ['Test string'],
        latestReloadStatus: {
          status: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          time: 'Test string',
        },
        metadata: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        name: 'Test string',
        rawContent: 'Test string',
        state: 'Test string',
      }
    );
    /** Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`. */
    await gapi.client.dialogflow.projects.locations.knowledgeBases.documents.reload(
      {
        name: 'Test string',
      },
      {
        contentUri: 'Test string',
        importGcsCustomMetadata: true,
        smartMessagingPartialUpdate: true,
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.dialogflow.projects.locations.operations.cancel({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.dialogflow.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.dialogflow.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Generates and returns a suggestion for a conversation that does not have a resource created for it. */
    await gapi.client.dialogflow.projects.locations.statelessSuggestion.generate(
      {
        parent: 'Test string',
      },
      {
        conversationContext: {
          messageEntries: [
            {
              createTime: 'Test string',
              languageCode: 'Test string',
              role: 'Test string',
              text: 'Test string',
            },
          ],
        },
        generator: {
          createTime: 'Test string',
          description: 'Test string',
          inferenceParameter: {
            maxOutputTokens: 42,
            temperature: 42,
            topK: 42,
            topP: 42,
          },
          name: 'Test string',
          summarizationContext: {
            fewShotExamples: [
              {
                conversationContext: {
                  messageEntries: [
                    {
                      createTime: 'Test string',
                      languageCode: 'Test string',
                      role: 'Test string',
                      text: 'Test string',
                    },
                  ],
                },
                extraInfo: {
                  A: 'Test string',
                },
                output: {
                  summarySuggestion: {
                    summarySections: [
                      {
                        section: 'Test string',
                        summary: 'Test string',
                      },
                    ],
                  },
                },
                summarizationSectionList: {
                  summarizationSections: [
                    {
                      definition: 'Test string',
                      key: 'Test string',
                      type: 'Test string',
                    },
                  ],
                },
              },
            ],
            outputLanguageCode: 'Test string',
            summarizationSections: [
              {
                definition: 'Test string',
                key: 'Test string',
                type: 'Test string',
              },
            ],
            version: 'Test string',
          },
          triggerEvent: 'Test string',
          updateTime: 'Test string',
        },
        generatorName: 'Test string',
        triggerEvents: ['Test string'],
      }
    );
    /** Generates and returns a summary for a conversation that does not have a resource created for it. */
    await gapi.client.dialogflow.projects.locations.suggestions.generateStatelessSummary(
      {
        parent: 'Test string',
      },
      {
        conversationProfile: {
          automatedAgentConfig: {
            agent: 'Test string',
            sessionTtl: 'Test string',
          },
          createTime: 'Test string',
          displayName: 'Test string',
          humanAgentAssistantConfig: {
            endUserSuggestionConfig: {
              disableHighLatencyFeaturesSyncDelivery: true,
              featureConfigs: [
                {
                  conversationModelConfig: {
                    baselineModelVersion: 'Test string',
                    model: 'Test string',
                  },
                  conversationProcessConfig: {
                    recentSentencesCount: 42,
                  },
                  disableAgentQueryLogging: true,
                  enableConversationAugmentedQuery: true,
                  enableEventBasedSuggestion: true,
                  enableQuerySuggestionOnly: true,
                  enableQuerySuggestionWhenNoAnswer: true,
                  queryConfig: {
                    confidenceThreshold: 42,
                    contextFilterSettings: {
                      dropHandoffMessages: true,
                      dropIvrMessages: true,
                      dropVirtualAgentMessages: true,
                    },
                    dialogflowQuerySource: {
                      agent: 'Test string',
                      humanAgentSideConfig: {
                        agent: 'Test string',
                      },
                    },
                    documentQuerySource: {
                      documents: ['Test string'],
                    },
                    knowledgeBaseQuerySource: {
                      knowledgeBases: ['Test string'],
                    },
                    maxResults: 42,
                    sections: {
                      sectionTypes: ['Test string'],
                    },
                  },
                  suggestionFeature: {
                    type: 'Test string',
                  },
                  suggestionTriggerSettings: {
                    noSmalltalk: true,
                    onlyEndUser: true,
                  },
                },
              ],
              generators: ['Test string'],
              groupSuggestionResponses: true,
            },
            humanAgentSuggestionConfig: {
              disableHighLatencyFeaturesSyncDelivery: true,
              featureConfigs: [
                {
                  conversationModelConfig: {
                    baselineModelVersion: 'Test string',
                    model: 'Test string',
                  },
                  conversationProcessConfig: {
                    recentSentencesCount: 42,
                  },
                  disableAgentQueryLogging: true,
                  enableConversationAugmentedQuery: true,
                  enableEventBasedSuggestion: true,
                  enableQuerySuggestionOnly: true,
                  enableQuerySuggestionWhenNoAnswer: true,
                  queryConfig: {
                    confidenceThreshold: 42,
                    contextFilterSettings: {
                      dropHandoffMessages: true,
                      dropIvrMessages: true,
                      dropVirtualAgentMessages: true,
                    },
                    dialogflowQuerySource: {
                      agent: 'Test string',
                      humanAgentSideConfig: {
                        agent: 'Test string',
                      },
                    },
                    documentQuerySource: {
                      documents: ['Test string'],
                    },
                    knowledgeBaseQuerySource: {
                      knowledgeBases: ['Test string'],
                    },
                    maxResults: 42,
                    sections: {
                      sectionTypes: ['Test string'],
                    },
                  },
                  suggestionFeature: {
                    type: 'Test string',
                  },
                  suggestionTriggerSettings: {
                    noSmalltalk: true,
                    onlyEndUser: true,
                  },
                },
              ],
              generators: ['Test string'],
              groupSuggestionResponses: true,
            },
            messageAnalysisConfig: {
              enableEntityExtraction: true,
              enableSentimentAnalysis: true,
            },
            notificationConfig: {
              messageFormat: 'Test string',
              topic: 'Test string',
            },
          },
          humanAgentHandoffConfig: {
            livePersonConfig: {
              accountNumber: 'Test string',
            },
            salesforceLiveAgentConfig: {
              buttonId: 'Test string',
              deploymentId: 'Test string',
              endpointDomain: 'Test string',
              organizationId: 'Test string',
            },
          },
          languageCode: 'Test string',
          loggingConfig: {
            enableStackdriverLogging: true,
          },
          name: 'Test string',
          newMessageEventNotificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
          notificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
          securitySettings: 'Test string',
          sttConfig: {
            audioEncoding: 'Test string',
            enableWordInfo: true,
            languageCode: 'Test string',
            model: 'Test string',
            sampleRateHertz: 42,
            speechModelVariant: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
          timeZone: 'Test string',
          ttsConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
          updateTime: 'Test string',
        },
        latestMessage: 'Test string',
        maxContextSize: 42,
        statelessConversation: {
          messages: [
            {
              content: 'Test string',
              createTime: 'Test string',
              languageCode: 'Test string',
              messageAnnotation: {
                containEntities: true,
                parts: [
                  {
                    entityType: 'Test string',
                    formattedValue: 42,
                    text: 'Test string',
                  },
                ],
              },
              name: 'Test string',
              participant: 'Test string',
              participantRole: 'Test string',
              sendTime: 'Test string',
              sentimentAnalysis: {
                queryTextSentiment: {
                  magnitude: 42,
                  score: 42,
                },
              },
            },
          ],
        },
      }
    );
    /** Get answers for the given query based on knowledge documents. */
    await gapi.client.dialogflow.projects.locations.suggestions.searchKnowledge(
      {
        parent: 'Test string',
      },
      {
        conversation: 'Test string',
        conversationProfile: 'Test string',
        latestMessage: 'Test string',
        parent: 'Test string',
        query: {
          languageCode: 'Test string',
          text: 'Test string',
        },
        sessionId: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.dialogflow.projects.operations.cancel({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.dialogflow.projects.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.dialogflow.projects.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Generates and returns a summary for a conversation that does not have a resource created for it. */
    await gapi.client.dialogflow.projects.suggestions.generateStatelessSummary(
      {
        parent: 'Test string',
      },
      {
        conversationProfile: {
          automatedAgentConfig: {
            agent: 'Test string',
            sessionTtl: 'Test string',
          },
          createTime: 'Test string',
          displayName: 'Test string',
          humanAgentAssistantConfig: {
            endUserSuggestionConfig: {
              disableHighLatencyFeaturesSyncDelivery: true,
              featureConfigs: [
                {
                  conversationModelConfig: {
                    baselineModelVersion: 'Test string',
                    model: 'Test string',
                  },
                  conversationProcessConfig: {
                    recentSentencesCount: 42,
                  },
                  disableAgentQueryLogging: true,
                  enableConversationAugmentedQuery: true,
                  enableEventBasedSuggestion: true,
                  enableQuerySuggestionOnly: true,
                  enableQuerySuggestionWhenNoAnswer: true,
                  queryConfig: {
                    confidenceThreshold: 42,
                    contextFilterSettings: {
                      dropHandoffMessages: true,
                      dropIvrMessages: true,
                      dropVirtualAgentMessages: true,
                    },
                    dialogflowQuerySource: {
                      agent: 'Test string',
                      humanAgentSideConfig: {
                        agent: 'Test string',
                      },
                    },
                    documentQuerySource: {
                      documents: ['Test string'],
                    },
                    knowledgeBaseQuerySource: {
                      knowledgeBases: ['Test string'],
                    },
                    maxResults: 42,
                    sections: {
                      sectionTypes: ['Test string'],
                    },
                  },
                  suggestionFeature: {
                    type: 'Test string',
                  },
                  suggestionTriggerSettings: {
                    noSmalltalk: true,
                    onlyEndUser: true,
                  },
                },
              ],
              generators: ['Test string'],
              groupSuggestionResponses: true,
            },
            humanAgentSuggestionConfig: {
              disableHighLatencyFeaturesSyncDelivery: true,
              featureConfigs: [
                {
                  conversationModelConfig: {
                    baselineModelVersion: 'Test string',
                    model: 'Test string',
                  },
                  conversationProcessConfig: {
                    recentSentencesCount: 42,
                  },
                  disableAgentQueryLogging: true,
                  enableConversationAugmentedQuery: true,
                  enableEventBasedSuggestion: true,
                  enableQuerySuggestionOnly: true,
                  enableQuerySuggestionWhenNoAnswer: true,
                  queryConfig: {
                    confidenceThreshold: 42,
                    contextFilterSettings: {
                      dropHandoffMessages: true,
                      dropIvrMessages: true,
                      dropVirtualAgentMessages: true,
                    },
                    dialogflowQuerySource: {
                      agent: 'Test string',
                      humanAgentSideConfig: {
                        agent: 'Test string',
                      },
                    },
                    documentQuerySource: {
                      documents: ['Test string'],
                    },
                    knowledgeBaseQuerySource: {
                      knowledgeBases: ['Test string'],
                    },
                    maxResults: 42,
                    sections: {
                      sectionTypes: ['Test string'],
                    },
                  },
                  suggestionFeature: {
                    type: 'Test string',
                  },
                  suggestionTriggerSettings: {
                    noSmalltalk: true,
                    onlyEndUser: true,
                  },
                },
              ],
              generators: ['Test string'],
              groupSuggestionResponses: true,
            },
            messageAnalysisConfig: {
              enableEntityExtraction: true,
              enableSentimentAnalysis: true,
            },
            notificationConfig: {
              messageFormat: 'Test string',
              topic: 'Test string',
            },
          },
          humanAgentHandoffConfig: {
            livePersonConfig: {
              accountNumber: 'Test string',
            },
            salesforceLiveAgentConfig: {
              buttonId: 'Test string',
              deploymentId: 'Test string',
              endpointDomain: 'Test string',
              organizationId: 'Test string',
            },
          },
          languageCode: 'Test string',
          loggingConfig: {
            enableStackdriverLogging: true,
          },
          name: 'Test string',
          newMessageEventNotificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
          notificationConfig: {
            messageFormat: 'Test string',
            topic: 'Test string',
          },
          securitySettings: 'Test string',
          sttConfig: {
            audioEncoding: 'Test string',
            enableWordInfo: true,
            languageCode: 'Test string',
            model: 'Test string',
            sampleRateHertz: 42,
            speechModelVariant: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
          timeZone: 'Test string',
          ttsConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
          updateTime: 'Test string',
        },
        latestMessage: 'Test string',
        maxContextSize: 42,
        statelessConversation: {
          messages: [
            {
              content: 'Test string',
              createTime: 'Test string',
              languageCode: 'Test string',
              messageAnnotation: {
                containEntities: true,
                parts: [
                  {
                    entityType: 'Test string',
                    formattedValue: 42,
                    text: 'Test string',
                  },
                ],
              },
              name: 'Test string',
              participant: 'Test string',
              participantRole: 'Test string',
              sendTime: 'Test string',
              sentimentAnalysis: {
                queryTextSentiment: {
                  magnitude: 42,
                  score: 42,
                },
              },
            },
          ],
        },
      }
    );
    /** Get answers for the given query based on knowledge documents. */
    await gapi.client.dialogflow.projects.suggestions.searchKnowledge(
      {
        parent: 'Test string',
      },
      {
        conversation: 'Test string',
        conversationProfile: 'Test string',
        latestMessage: 'Test string',
        parent: 'Test string',
        query: {
          languageCode: 'Test string',
          text: 'Test string',
        },
        sessionId: 'Test string',
      }
    );
  }
});
