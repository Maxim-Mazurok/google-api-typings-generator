/* This is stub file for gapi.client.serviceusage-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230612

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://serviceusage.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.serviceusage */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        /** Manage your Google API service configuration */
        'https://www.googleapis.com/auth/service.management',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.serviceusage.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.serviceusage.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Enables multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. Operation response type:
         * `google.protobuf.Empty`
         */
        await gapi.client.serviceusage.services.batchEnable({
            parent: "Test string",
        }, {
            serviceIds: [
                "Test string"
            ],
        });
        /**
         * Disables a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call
         * the disable method on a service that is not currently enabled. Callers will receive a `FAILED_PRECONDITION` status if the target service is not currently enabled. Operation response
         * type: `google.protobuf.Empty`
         */
        await gapi.client.serviceusage.services.disable({
            name: "Test string",
        }, {
        });
        /** Enables a service so that it can be used with a project. Operation response type: `google.protobuf.Empty` */
        await gapi.client.serviceusage.services.enable({
            name: "Test string",
        }, {
        });
        /** Generates service identity for service. */
        await gapi.client.serviceusage.services.generateServiceIdentity({
            parent: "Test string",
        });
        /** Returns the service configuration and enabled state for a given service. */
        await gapi.client.serviceusage.services.get({
            name: "Test string",
        });
        /**
         * Lists all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which
         * the calling user has the `servicemanagement.services.bind` permission, and all services that have already been enabled on the project. The list can be filtered to only include services
         * in a specific state, for example to only include services enabled on the project.
         */
        await gapi.client.serviceusage.services.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Retrieves a summary of quota information for a specific quota metric */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.get({
            name: "Test string",
            view: "Test string",
        });
        /**
         * Creates or updates multiple admin overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be
         * set.
         */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.importAdminOverrides({
            parent: "Test string",
        }, {
            force: true,
            forceOnly: [
                "Test string"
            ],
            inlineSource: {
                overrides: [
                    {
                        adminOverrideAncestor: "Test string",
                        dimensions: {
                            A: "Test string"
                        },
                        metric: "Test string",
                        name: "Test string",
                        overrideValue: "Test string",
                        unit: "Test string",
                    }
                ],
            },
        });
        /**
         * Creates or updates multiple consumer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be
         * set.
         */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.importConsumerOverrides({
            parent: "Test string",
        }, {
            force: true,
            forceOnly: [
                "Test string"
            ],
            inlineSource: {
                overrides: [
                    {
                        adminOverrideAncestor: "Test string",
                        dimensions: {
                            A: "Test string"
                        },
                        metric: "Test string",
                        name: "Test string",
                        overrideValue: "Test string",
                        unit: "Test string",
                    }
                ],
            },
        });
        /**
         * Retrieves a summary of all quota information visible to the service consumer, organized by service metric. Each metric includes information about all of its defined limits. Each limit
         * includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.
         */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Retrieves a summary of quota information for a specific quota limit. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.get({
            name: "Test string",
            view: "Test string",
        });
        /**
         * Creates an admin override. An admin override is applied by an administrator of a parent folder or parent organization of the consumer receiving the override. An admin override is
         * intended to limit the amount of quota the consumer can use out of the total quota pool allocated to all children of the folder or organization.
         */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.create({
            force: true,
            forceOnly: "Test string",
            parent: "Test string",
        }, {
            adminOverrideAncestor: "Test string",
            dimensions: {
                A: "Test string"
            },
            metric: "Test string",
            name: "Test string",
            overrideValue: "Test string",
            unit: "Test string",
        });
        /** Deletes an admin override. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.delete({
            force: true,
            forceOnly: "Test string",
            name: "Test string",
        });
        /** Lists all admin overrides on this limit. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an admin override. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.patch({
            force: true,
            forceOnly: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            adminOverrideAncestor: "Test string",
            dimensions: {
                A: "Test string"
            },
            metric: "Test string",
            name: "Test string",
            overrideValue: "Test string",
            unit: "Test string",
        });
        /**
         * Creates a consumer override. A consumer override is applied to the consumer on its own authority to limit its own quota usage. Consumer overrides cannot be used to grant more quota than
         * would be allowed by admin overrides, producer overrides, or the default limit of the service.
         */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.create({
            force: true,
            forceOnly: "Test string",
            parent: "Test string",
        }, {
            adminOverrideAncestor: "Test string",
            dimensions: {
                A: "Test string"
            },
            metric: "Test string",
            name: "Test string",
            overrideValue: "Test string",
            unit: "Test string",
        });
        /** Deletes a consumer override. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.delete({
            force: true,
            forceOnly: "Test string",
            name: "Test string",
        });
        /** Lists all consumer overrides on this limit. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a consumer override. */
        await gapi.client.serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.patch({
            force: true,
            forceOnly: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            adminOverrideAncestor: "Test string",
            dimensions: {
                A: "Test string"
            },
            metric: "Test string",
            name: "Test string",
            overrideValue: "Test string",
            unit: "Test string",
        });
    }
});
