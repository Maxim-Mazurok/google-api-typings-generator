/* This is stub file for gapi.client.firebaseml-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230125

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://firebaseml.googleapis.com/$discovery/rest?version=v1beta2');
    /** now we can use gapi.client.firebaseml */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Creates a model in Firebase ML. The longrunning operation will eventually return a Model */
        await gapi.client.firebaseml.projects.models.create({
            parent: "Test string",
        }, {
            activeOperations: [
                {
                    done: true,
                    error: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    metadata: {
                        A: 42
                    },
                    name: "Test string",
                    response: {
                        A: 42
                    },
                }
            ],
            createTime: "Test string",
            displayName: "Test string",
            etag: "Test string",
            modelHash: "Test string",
            name: "Test string",
            state: {
                published: true,
                validationError: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
            },
            tags: [
                "Test string"
            ],
            tfliteModel: {
                automlModel: "Test string",
                gcsTfliteUri: "Test string",
                sizeBytes: "Test string",
            },
            updateTime: "Test string",
        });
        /** Deletes a model */
        await gapi.client.firebaseml.projects.models.delete({
            name: "Test string",
        });
        /** Gets Download information for a model. This is meant for downloading model resources onto devices. It gives very limited information about the model. */
        await gapi.client.firebaseml.projects.models.download({
            name: "Test string",
        });
        /** Gets a model resource. */
        await gapi.client.firebaseml.projects.models.get({
            name: "Test string",
        });
        /** Lists the models */
        await gapi.client.firebaseml.projects.models.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a model. The longrunning operation will eventually return a Model. */
        await gapi.client.firebaseml.projects.models.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            activeOperations: [
                {
                    done: true,
                    error: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    metadata: {
                        A: 42
                    },
                    name: "Test string",
                    response: {
                        A: 42
                    },
                }
            ],
            createTime: "Test string",
            displayName: "Test string",
            etag: "Test string",
            modelHash: "Test string",
            name: "Test string",
            state: {
                published: true,
                validationError: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
            },
            tags: [
                "Test string"
            ],
            tfliteModel: {
                automlModel: "Test string",
                gcsTfliteUri: "Test string",
                sizeBytes: "Test string",
            },
            updateTime: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.firebaseml.projects.operations.get({
            name: "Test string",
        });
    }
});
