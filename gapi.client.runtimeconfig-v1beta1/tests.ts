/* This is stub file for gapi.client.runtimeconfig-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230213

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://runtimeconfig.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.runtimeconfig */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** Manage your Google Cloud Platform services' runtime configuration */
        'https://www.googleapis.com/auth/cloudruntimeconfig',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Creates a new RuntimeConfig resource. The configuration name must be unique within project. */
        await gapi.client.runtimeconfig.projects.configs.create({
            parent: "Test string",
            requestId: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
        });
        /** Deletes a RuntimeConfig resource. */
        await gapi.client.runtimeconfig.projects.configs.delete({
            name: "Test string",
        });
        /** Gets information about a RuntimeConfig resource. */
        await gapi.client.runtimeconfig.projects.configs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.runtimeconfig.projects.configs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists all the RuntimeConfig resources within project. */
        await gapi.client.runtimeconfig.projects.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.runtimeconfig.projects.configs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.runtimeconfig.projects.configs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Updates a RuntimeConfig resource. The configuration must exist beforehand. */
        await gapi.client.runtimeconfig.projects.configs.update({
            name: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.runtimeconfig.projects.configs.operations.get({
            name: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.runtimeconfig.projects.configs.operations.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Creates a variable within the given configuration. You cannot create a variable with a name that is a prefix of an existing variable name, or a name that has an existing variable name
         * as a prefix. To learn more about creating a variable, read the [Setting and Getting Data](/deployment-manager/runtime-configurator/set-and-get-variables) documentation.
         */
        await gapi.client.runtimeconfig.projects.configs.variables.create({
            parent: "Test string",
            requestId: "Test string",
        }, {
            name: "Test string",
            state: "Test string",
            text: "Test string",
            updateTime: "Test string",
            value: "Test string",
        });
        /**
         * Deletes a variable or multiple variables. If you specify a variable name, then that variable is deleted. If you specify a prefix and `recursive` is true, then all variables with that
         * prefix are deleted. You must set a `recursive` to true if you delete variables by prefix.
         */
        await gapi.client.runtimeconfig.projects.configs.variables.delete({
            name: "Test string",
            recursive: true,
        });
        /** Gets information about a single variable. */
        await gapi.client.runtimeconfig.projects.configs.variables.get({
            name: "Test string",
        });
        /**
         * Lists variables within given a configuration, matching any provided filters. This only lists variable names, not the values, unless `return_values` is true, in which case only variables
         * that user has IAM permission to GetVariable will be returned.
         */
        await gapi.client.runtimeconfig.projects.configs.variables.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            returnValues: true,
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.runtimeconfig.projects.configs.variables.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Updates an existing variable with a new value. */
        await gapi.client.runtimeconfig.projects.configs.variables.update({
            name: "Test string",
        }, {
            name: "Test string",
            state: "Test string",
            text: "Test string",
            updateTime: "Test string",
            value: "Test string",
        });
        /**
         * Watches a specific variable and waits for a change in the variable's value. When there is a change, this method returns the new value or times out. If a variable is deleted while being
         * watched, the `variableState` state is set to `DELETED` and the method returns the last known variable `value`. If you set the deadline for watching to a larger value than internal
         * timeout (60 seconds), the current variable value is returned and the `variableState` will be `VARIABLE_STATE_UNSPECIFIED`. To learn more about creating a watcher, read the [Watching a
         * Variable for Changes](/deployment-manager/runtime-configurator/watching-a-variable) documentation.
         */
        await gapi.client.runtimeconfig.projects.configs.variables.watch({
            name: "Test string",
        }, {
            newerThan: "Test string",
        });
        /**
         * Creates a Waiter resource. This operation returns a long-running Operation resource which can be polled for completion. However, a waiter with the given name will exist (and can be
         * retrieved) prior to the operation completing. If the operation fails, the failed Waiter resource will still exist and must be deleted prior to subsequent creation attempts.
         */
        await gapi.client.runtimeconfig.projects.configs.waiters.create({
            parent: "Test string",
            requestId: "Test string",
        }, {
            createTime: "Test string",
            done: true,
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            failure: {
                cardinality: {
                    number: 42,
                    path: "Test string",
                },
            },
            name: "Test string",
            success: {
                cardinality: {
                    number: 42,
                    path: "Test string",
                },
            },
            timeout: "Test string",
        });
        /** Deletes the waiter with the specified name. */
        await gapi.client.runtimeconfig.projects.configs.waiters.delete({
            name: "Test string",
        });
        /** Gets information about a single waiter. */
        await gapi.client.runtimeconfig.projects.configs.waiters.get({
            name: "Test string",
        });
        /** List waiters within the given configuration. */
        await gapi.client.runtimeconfig.projects.configs.waiters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.runtimeconfig.projects.configs.waiters.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
