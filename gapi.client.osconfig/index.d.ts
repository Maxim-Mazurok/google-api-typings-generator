/* Type definitions for non-npm package OS Config API v1 1.0 */
// Project: https://cloud.google.com/compute/docs/manage-os
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://osconfig.googleapis.com/$discovery/rest?version=v1
// Revision: 20201023

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load OS Config API v1 */
    function load(name: "osconfig", version: "v1"): PromiseLike<void>;
    function load(name: "osconfig", version: "v1", callback: () => any): void;

    namespace osconfig {
        interface AptSettings {
            /** List of packages to exclude from update. These packages will be excluded */
            excludes?: string[];
            /**
             * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be
             * specified with any other patch configuration fields.
             */
            exclusivePackages?: string[];
            /** By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead. */
            type?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelPatchJobRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface ExecStep {
            /** The ExecStepConfig for all Linux VMs targeted by the PatchJob. */
            linuxExecStepConfig?: ExecStepConfig;
            /** The ExecStepConfig for all Windows VMs targeted by the PatchJob. */
            windowsExecStepConfig?: ExecStepConfig;
        }
        interface ExecStepConfig {
            /** Defaults to [0]. A list of possible return values that the execution can return to indicate a success. */
            allowedSuccessCodes?: number[];
            /** A Cloud Storage object containing the executable. */
            gcsObject?: GcsObject;
            /**
             * The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines]
             * (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
             */
            interpreter?: string;
            /** An absolute path to the executable on the VM. */
            localPath?: string;
        }
        interface ExecutePatchJobRequest {
            /** Description of the patch job. Length of the description is limited to 1024 characters. */
            description?: string;
            /** Display name for this patch job. This does not have to be unique. */
            displayName?: string;
            /** If this patch is a dry-run only, instances are contacted but will do nothing. */
            dryRun?: boolean;
            /** Duration of the patch job. After the duration ends, the patch job times out. */
            duration?: string;
            /** Required. Instances to patch, either explicitly or filtered by some criteria such as zone or labels. */
            instanceFilter?: PatchInstanceFilter;
            /** Patch configuration being applied. If omitted, instances are patched using the default configurations. */
            patchConfig?: PatchConfig;
            /** Rollout strategy of the patch job. */
            rollout?: PatchRollout;
        }
        interface FixedOrPercent {
            /** Specifies a fixed value. */
            fixed?: number;
            /** Specifies the relative value defined as a percentage, which will be multiplied by a reference value. */
            percent?: number;
        }
        interface GcsObject {
            /** Required. Bucket of the Cloud Storage object. */
            bucket?: string;
            /** Required. Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change. */
            generationNumber?: string;
            /** Required. Name of the Cloud Storage object. */
            object?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GooSettings {
        }
        interface ListPatchDeploymentsResponse {
            /** A pagination token that can be used to get the next page of patch deployments. */
            nextPageToken?: string;
            /** The list of patch deployments. */
            patchDeployments?: PatchDeployment[];
        }
        interface ListPatchJobInstanceDetailsResponse {
            /** A pagination token that can be used to get the next page of results. */
            nextPageToken?: string;
            /** A list of instance status. */
            patchJobInstanceDetails?: PatchJobInstanceDetails[];
        }
        interface ListPatchJobsResponse {
            /** A pagination token that can be used to get the next page of results. */
            nextPageToken?: string;
            /** The list of patch jobs. */
            patchJobs?: PatchJob[];
        }
        interface MonthlySchedule {
            /**
             * Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a
             * schedule to run "every month on the 31st" will not run in February, April, June, etc.
             */
            monthDay?: number;
            /** Required. Week day in a month. */
            weekDayOfMonth?: WeekDayOfMonth;
        }
        interface OneTimeSchedule {
            /** Required. The desired patch job execution time. */
            executeTime?: string;
        }
        interface PatchConfig {
            /** Apt update settings. Use this setting to override the default `apt` patch rules. */
            apt?: AptSettings;
            /** Goo update settings. Use this setting to override the default `goo` patch rules. */
            goo?: any;
            /** The `ExecStep` to run after the patch update. */
            postStep?: ExecStep;
            /** The `ExecStep` to run before the patch update. */
            preStep?: ExecStep;
            /** Post-patch reboot settings. */
            rebootConfig?: string;
            /** Windows update settings. Use this override the default windows patch rules. */
            windowsUpdate?: WindowsUpdateSettings;
            /** Yum update settings. Use this setting to override the default `yum` patch rules. */
            yum?: YumSettings;
            /** Zypper update settings. Use this setting to override the default `zypper` patch rules. */
            zypper?: ZypperSettings;
        }
        interface PatchDeployment {
            /** Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format. */
            createTime?: string;
            /** Optional. Description of the patch deployment. Length of the description is limited to 1024 characters. */
            description?: string;
            /** Optional. Duration of the patch. After the duration ends, the patch times out. */
            duration?: string;
            /** Required. VM instances to patch. */
            instanceFilter?: PatchInstanceFilter;
            /** Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format. */
            lastExecuteTime?: string;
            /**
             * Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is
             * ignored when you create a new patch deployment.
             */
            name?: string;
            /** Required. Schedule a one-time execution. */
            oneTimeSchedule?: OneTimeSchedule;
            /** Optional. Patch configuration that is applied. */
            patchConfig?: PatchConfig;
            /** Required. Schedule recurring executions. */
            recurringSchedule?: RecurringSchedule;
            /** Optional. Rollout strategy of the patch job. */
            rollout?: PatchRollout;
            /** Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format. */
            updateTime?: string;
        }
        interface PatchInstanceFilter {
            /** Target all VM instances in the project. If true, no other criteria is permitted. */
            all?: boolean;
            /** Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances. */
            groupLabels?: PatchInstanceFilterGroupLabel[];
            /** Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-". */
            instanceNamePrefixes?: string[];
            /**
             * Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`,
             * `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
             */
            instances?: string[];
            /** Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone. */
            zones?: string[];
        }
        interface PatchInstanceFilterGroupLabel {
            /** Compute Engine instance labels that must be present for a VM instance to be targeted by this filter. */
            labels?: { [P in string]: string };
        }
        interface PatchJob {
            /** Time this patch job was created. */
            createTime?: string;
            /** Description of the patch job. Length of the description is limited to 1024 characters. */
            description?: string;
            /** Display name for this patch job. This is not a unique identifier. */
            displayName?: string;
            /** If this patch job is a dry run, the agent reports that it has finished without running any updates on the VM instance. */
            dryRun?: boolean;
            /** Duration of the patch job. After the duration ends, the patch job times out. */
            duration?: string;
            /** If this patch job failed, this message provides information about the failure. */
            errorMessage?: string;
            /** Summary of instance details. */
            instanceDetailsSummary?: PatchJobInstanceDetailsSummary;
            /** Instances to patch. */
            instanceFilter?: PatchInstanceFilter;
            /** Unique identifier for this patch job in the form `projects/∗/patchJobs/*` */
            name?: string;
            /** Patch configuration being applied. */
            patchConfig?: PatchConfig;
            /** Output only. Name of the patch deployment that created this patch job. */
            patchDeployment?: string;
            /** Reflects the overall progress of the patch job in the range of 0.0 being no progress to 100.0 being complete. */
            percentComplete?: number;
            /** Rollout strategy being applied. */
            rollout?: PatchRollout;
            /** The current state of the PatchJob. */
            state?: string;
            /** Last time this patch job was updated. */
            updateTime?: string;
        }
        interface PatchJobInstanceDetails {
            /** The number of times the agent that the agent attempts to apply the patch. */
            attemptCount?: string;
            /** If the patch fails, this field provides the reason. */
            failureReason?: string;
            /** The unique identifier for the instance. This identifier is defined by the server. */
            instanceSystemId?: string;
            /** The instance name in the form `projects/∗/zones/∗/instances/*` */
            name?: string;
            /** Current state of instance patch. */
            state?: string;
        }
        interface PatchJobInstanceDetailsSummary {
            /** Number of instances that have acked and will start shortly. */
            ackedInstanceCount?: string;
            /** Number of instances that are applying patches. */
            applyingPatchesInstanceCount?: string;
            /** Number of instances that are downloading patches. */
            downloadingPatchesInstanceCount?: string;
            /** Number of instances that failed. */
            failedInstanceCount?: string;
            /** Number of instances that are inactive. */
            inactiveInstanceCount?: string;
            /** Number of instances that do not appear to be running the agent. Check to ensure that the agent is installed, running, and able to communicate with the service. */
            noAgentDetectedInstanceCount?: string;
            /** Number of instances notified about patch job. */
            notifiedInstanceCount?: string;
            /** Number of instances pending patch job. */
            pendingInstanceCount?: string;
            /** Number of instances that are running the post-patch step. */
            postPatchStepInstanceCount?: string;
            /** Number of instances that are running the pre-patch step. */
            prePatchStepInstanceCount?: string;
            /** Number of instances rebooting. */
            rebootingInstanceCount?: string;
            /** Number of instances that have started. */
            startedInstanceCount?: string;
            /** Number of instances that have completed successfully. */
            succeededInstanceCount?: string;
            /** Number of instances that require reboot. */
            succeededRebootRequiredInstanceCount?: string;
            /** Number of instances that exceeded the time out while applying the patch. */
            timedOutInstanceCount?: string;
        }
        interface PatchRollout {
            /**
             * The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone
             * is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to
             * complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch
             * steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget.
             * For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the
             * previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until
             * the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job
             * stops.
             */
            disruptionBudget?: FixedOrPercent;
            /** Mode of the patch rollout. */
            mode?: string;
        }
        interface RecurringSchedule {
            /** Optional. The end time at which a recurring patch deployment schedule is no longer active. */
            endTime?: string;
            /** Required. The frequency unit of this recurring schedule. */
            frequency?: string;
            /** Output only. The time the last patch job ran successfully. */
            lastExecuteTime?: string;
            /** Required. Schedule with monthly executions. */
            monthly?: MonthlySchedule;
            /** Output only. The time the next patch job is scheduled to run. */
            nextExecuteTime?: string;
            /** Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment. */
            startTime?: string;
            /** Required. Time of the day to run a recurring deployment. */
            timeOfDay?: TimeOfDay;
            /** Required. Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone. */
            timeZone?: TimeZone;
            /** Required. Schedule with weekly executions. */
            weekly?: WeeklySchedule;
        }
        interface TimeOfDay {
            /** Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time. */
            hours?: number;
            /** Minutes of hour of day. Must be from 0 to 59. */
            minutes?: number;
            /** Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999. */
            nanos?: number;
            /** Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds. */
            seconds?: number;
        }
        interface TimeZone {
            /** IANA Time Zone Database time zone, e.g. "America/New_York". */
            id?: string;
            /** Optional. IANA Time Zone Database version number, e.g. "2019a". */
            version?: string;
        }
        interface WeekDayOfMonth {
            /** Required. A day of the week. */
            dayOfWeek?: string;
            /** Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month. */
            weekOrdinal?: number;
        }
        interface WeeklySchedule {
            /** Required. Day of the week. */
            dayOfWeek?: string;
        }
        interface WindowsUpdateSettings {
            /** Only apply updates of these windows update classifications. If empty, all updates are applied. */
            classifications?: string[];
            /** List of KBs to exclude from update. */
            excludes?: string[];
            /** An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations. */
            exclusivePatches?: string[];
        }
        interface YumSettings {
            /** List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag. */
            excludes?: string[];
            /**
             * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be
             * specified with any other patch configuration fields.
             */
            exclusivePackages?: string[];
            /** Will cause patch to run `yum update-minimal` instead. */
            minimal?: boolean;
            /** Adds the `--security` flag to `yum update`. Not supported on all platforms. */
            security?: boolean;
        }
        interface ZypperSettings {
            /** Install only patches with these categories. Common categories include security, recommended, and feature. */
            categories?: string[];
            /** List of patches to exclude from update. */
            excludes?: string[];
            /**
             * An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch
             * configuration fields.
             */
            exclusivePatches?: string[];
            /** Install only patches with these severities. Common severities include critical, important, moderate, and low. */
            severities?: string[];
            /** Adds the `--with-optional` flag to `zypper patch`. */
            withOptional?: boolean;
            /** Adds the `--with-update` flag, to `zypper patch`. */
            withUpdate?: boolean;
        }
        interface PatchDeploymentsResource {
            /** Create an OS Config patch deployment. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project to apply this patch deployment to in the form `projects/*`. */
                parent: string;
                /**
                 * Required. A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must
                 * start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
                 */
                patchDeploymentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PatchDeployment;
            }): Request<PatchDeployment>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project to apply this patch deployment to in the form `projects/*`. */
                parent: string;
                /**
                 * Required. A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must
                 * start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
                 */
                patchDeploymentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PatchDeployment): Request<PatchDeployment>;
            /** Delete an OS Config patch deployment. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name of the patch deployment in the form `projects/∗/patchDeployments/*`. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Get an OS Config patch deployment. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name of the patch deployment in the form `projects/∗/patchDeployments/*`. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<PatchDeployment>;
            /** Get a page of OS Config patch deployments. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. The maximum number of patch deployments to return. Default is 100. */
                pageSize?: number;
                /** Optional. A pagination token returned from a previous call to ListPatchDeployments that indicates where this listing should continue from. */
                pageToken?: string;
                /** Required. The resource name of the parent in the form `projects/*`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPatchDeploymentsResponse>;
        }
        interface InstanceDetailsResource {
            /** Get a list of instance details for a given patch job. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** A filter expression that filters results listed in the response. This field supports filtering results by instance zone, name, state, or `failure_reason`. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of instance details records to return. Default is 100. */
                pageSize?: number;
                /** A pagination token returned from a previous call that indicates where this listing should continue from. */
                pageToken?: string;
                /** Required. The parent for the instances are in the form of `projects/∗/patchJobs/*`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPatchJobInstanceDetailsResponse>;
        }
        interface PatchJobsResource {
            /** Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted. */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the patch in the form `projects/∗/patchJobs/*` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelPatchJobRequest;
            }): Request<PatchJob>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the patch in the form `projects/∗/patchJobs/*` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelPatchJobRequest): Request<PatchJob>;
            /** Patch VM instances by creating and running a patch job. */
            execute(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which to run this patch in the form `projects/*` */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExecutePatchJobRequest;
            }): Request<PatchJob>;
            execute(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The project in which to run this patch in the form `projects/*` */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExecutePatchJobRequest): Request<PatchJob>;
            /** Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the patch in the form `projects/∗/patchJobs/*` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<PatchJob>;
            /** Get a list of patch jobs. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * If provided, this field specifies the criteria that must be met by patch jobs to be included in the response. Currently, filtering is only available on the patch_deployment
                 * field.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of instance status to return. */
                pageSize?: number;
                /** A pagination token returned from a previous call that indicates where this listing should continue from. */
                pageToken?: string;
                /** Required. In the form of `projects/*` */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPatchJobsResponse>;
            instanceDetails: InstanceDetailsResource;
        }
        interface ProjectsResource {
            patchDeployments: PatchDeploymentsResource;
            patchJobs: PatchJobsResource;
        }

        const projects: ProjectsResource;
    }
}
