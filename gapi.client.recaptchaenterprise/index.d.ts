/* Type definitions for non-npm package reCAPTCHA Enterprise API v1 1.0 */
// Project: https://cloud.google.com/recaptcha-enterprise/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://recaptchaenterprise.googleapis.com/$discovery/rest?version=v1
// Revision: 20210813

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load reCAPTCHA Enterprise API v1 */
    function load(name: "recaptchaenterprise", version: "v1"): PromiseLike<void>;
    function load(name: "recaptchaenterprise", version: "v1", callback: () => any): void;

    namespace recaptchaenterprise {
        interface GoogleCloudRecaptchaenterpriseV1AndroidKeySettings {
            /** Android package names of apps allowed to use the key. Example: 'com.companyname.appname' */
            allowedPackageNames?: string[];
        }
        interface GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest {
            /**
             * Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is
             * legitimate or fraudulent.
             */
            annotation?: string;
            /** Optional. Optional reasons for the annotation that will be assigned to the Event. */
            reasons?: string[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse {
        }
        interface GoogleCloudRecaptchaenterpriseV1Assessment {
            /** The event being assessed. */
            event?: GoogleCloudRecaptchaenterpriseV1Event;
            /** Output only. The resource name for the Assessment in the format "projects/{project}/assessments/{assessment}". */
            name?: string;
            /** Output only. The risk analysis result for the event being assessed. */
            riskAnalysis?: GoogleCloudRecaptchaenterpriseV1RiskAnalysis;
            /** Output only. Properties of the provided event token. */
            tokenProperties?: GoogleCloudRecaptchaenterpriseV1TokenProperties;
        }
        interface GoogleCloudRecaptchaenterpriseV1ChallengeMetrics {
            /** Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such that a subsequent challenge was triggered. */
            failedCount?: string;
            /** Count of nocaptchas (successful verification without a challenge) issued. */
            nocaptchaCount?: string;
            /** Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of pageloads for pages that include reCAPTCHA. */
            pageloadCount?: string;
            /** Count of nocaptchas (successful verification without a challenge) plus submitted challenge solutions that were correct and resulted in verification. */
            passedCount?: string;
        }
        interface GoogleCloudRecaptchaenterpriseV1Event {
            /**
             * Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha
             * enterprise.
             */
            expectedAction?: string;
            /** Optional. The site key that was used to invoke reCAPTCHA on your site and generate the token. */
            siteKey?: string;
            /** Optional. The user response token provided by the reCAPTCHA client-side integration on your site. */
            token?: string;
            /** Optional. The user agent present in the request from the user's device related to this event. */
            userAgent?: string;
            /** Optional. The IP address in the request from the user's device related to this event. */
            userIpAddress?: string;
        }
        interface GoogleCloudRecaptchaenterpriseV1IOSKeySettings {
            /** iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname' */
            allowedBundleIds?: string[];
        }
        interface GoogleCloudRecaptchaenterpriseV1Key {
            /** Settings for keys that can be used by Android apps. */
            androidSettings?: GoogleCloudRecaptchaenterpriseV1AndroidKeySettings;
            /** The timestamp corresponding to the creation of this Key. */
            createTime?: string;
            /** Human-readable display name of this key. Modifiable by user. */
            displayName?: string;
            /** Settings for keys that can be used by iOS apps. */
            iosSettings?: GoogleCloudRecaptchaenterpriseV1IOSKeySettings;
            /** See Creating and managing labels. */
            labels?: { [P in string]: string };
            /** The resource name for the Key in the format "projects/{project}/keys/{key}". */
            name?: string;
            /** Options for user acceptance testing. */
            testingOptions?: GoogleCloudRecaptchaenterpriseV1TestingOptions;
            /** Settings for keys that can be used by websites. */
            webSettings?: GoogleCloudRecaptchaenterpriseV1WebKeySettings;
        }
        interface GoogleCloudRecaptchaenterpriseV1ListKeysResponse {
            /** Key details. */
            keys?: GoogleCloudRecaptchaenterpriseV1Key[];
            /** Token to retrieve the next page of results. It is set to empty if no keys remain in results. */
            nextPageToken?: string;
        }
        interface GoogleCloudRecaptchaenterpriseV1Metrics {
            /** Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data. */
            challengeMetrics?: GoogleCloudRecaptchaenterpriseV1ChallengeMetrics[];
            /** Output only. The name of the metrics, in the format "projects/{project}/keys/{key}/metrics". */
            name?: string;
            /** Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data. */
            scoreMetrics?: GoogleCloudRecaptchaenterpriseV1ScoreMetrics[];
            /** Inclusive start time aligned to a day (UTC). */
            startTime?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest {
        }
        interface GoogleCloudRecaptchaenterpriseV1RiskAnalysis {
            /** Reasons contributing to the risk analysis verdict. */
            reasons?: string[];
            /** Legitimate event score from 0.0 to 1.0. (1.0 means very likely legitimate traffic while 0.0 means very likely non-legitimate traffic). */
            score?: number;
        }
        interface GoogleCloudRecaptchaenterpriseV1ScoreDistribution {
            /** Map key is score value multiplied by 100. The scores are discrete values between [0, 1]. The maximum number of buckets is on order of a few dozen, but typically much lower (ie. 10). */
            scoreBuckets?: { [P in string]: string };
        }
        interface GoogleCloudRecaptchaenterpriseV1ScoreMetrics {
            /** Action-based metrics. The map key is the action name which specified by the site owners at time of the "execute" client-side call. Populated only for SCORE keys. */
            actionMetrics?: { [P in string]: GoogleCloudRecaptchaenterpriseV1ScoreDistribution };
            /** Aggregated score metrics for all traffic. */
            overallMetrics?: GoogleCloudRecaptchaenterpriseV1ScoreDistribution;
        }
        interface GoogleCloudRecaptchaenterpriseV1TestingOptions {
            /** For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE. */
            testingChallenge?: string;
            /** All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive. */
            testingScore?: number;
        }
        interface GoogleCloudRecaptchaenterpriseV1TokenProperties {
            /** Action name provided at token generation. */
            action?: string;
            /** The timestamp corresponding to the generation of the token. */
            createTime?: string;
            /** The hostname of the page on which the token was generated. */
            hostname?: string;
            /** Reason associated with the response when valid = false. */
            invalidReason?: string;
            /**
             * Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge
             * or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).
             */
            valid?: boolean;
        }
        interface GoogleCloudRecaptchaenterpriseV1WebKeySettings {
            /** If set to true, it means allowed_domains will not be enforced. */
            allowAllDomains?: boolean;
            /** Required. Whether this key can be used on AMP (Accelerated Mobile Pages) websites. This can only be set for the SCORE integration type. */
            allowAmpTraffic?: boolean;
            /**
             * Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any
             * path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
             */
            allowedDomains?: string[];
            /** Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE. */
            challengeSecurityPreference?: string;
            /** Required. Describes how this key is integrated with the website. */
            integrationType?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleProtobufEmpty {
        }
        interface AssessmentsResource {
            /** Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent. */
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name of the Assessment, in the format "projects/{project}/assessments/{assessment}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest;
            }): Request<{}>;
            annotate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The resource name of the Assessment, in the format "projects/{project}/assessments/{assessment}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest): Request<{}>;
            /** Creates an Assessment of the likelihood an event is legitimate. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the project in which the assessment will be created, in the format "projects/{project}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudRecaptchaenterpriseV1Assessment;
            }): Request<GoogleCloudRecaptchaenterpriseV1Assessment>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the project in which the assessment will be created, in the format "projects/{project}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudRecaptchaenterpriseV1Assessment): Request<GoogleCloudRecaptchaenterpriseV1Assessment>;
        }
        interface KeysResource {
            /** Creates a new reCAPTCHA Enterprise key. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the project in which the key will be created, in the format "projects/{project}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudRecaptchaenterpriseV1Key;
            }): Request<GoogleCloudRecaptchaenterpriseV1Key>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the project in which the key will be created, in the format "projects/{project}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudRecaptchaenterpriseV1Key): Request<GoogleCloudRecaptchaenterpriseV1Key>;
            /** Deletes the specified key. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the key to be deleted, in the format "projects/{project}/keys/{key}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the specified key. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the requested key, in the format "projects/{project}/keys/{key}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleCloudRecaptchaenterpriseV1Key>;
            /** Get some aggregated metrics for a Key. This data can be used to build dashboards. */
            getMetrics(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the requested metrics, in the format "projects/{project}/keys/{key}/metrics". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleCloudRecaptchaenterpriseV1Metrics>;
            /** Returns the list of all keys that belong to a project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. The maximum number of keys to return. Default is 10. Max limit is 1000. */
                pageSize?: number;
                /** Optional. The next_page_token value returned from a previous. ListKeysRequest, if any. */
                pageToken?: string;
                /** Required. The name of the project that contains the keys that will be listed, in the format "projects/{project}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleCloudRecaptchaenterpriseV1ListKeysResponse>;
            /**
             * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment
             * calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
             */
            migrate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the key to be migrated, in the format "projects/{project}/keys/{key}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest;
            }): Request<GoogleCloudRecaptchaenterpriseV1Key>;
            migrate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the key to be migrated, in the format "projects/{project}/keys/{key}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest): Request<GoogleCloudRecaptchaenterpriseV1Key>;
            /** Updates the specified key. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name for the Key in the format "projects/{project}/keys/{key}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields will be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudRecaptchaenterpriseV1Key;
            }): Request<GoogleCloudRecaptchaenterpriseV1Key>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name for the Key in the format "projects/{project}/keys/{key}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields will be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudRecaptchaenterpriseV1Key): Request<GoogleCloudRecaptchaenterpriseV1Key>;
        }
        interface ProjectsResource {
            assessments: AssessmentsResource;
            keys: KeysResource;
        }

        const projects: ProjectsResource;
    }
}
