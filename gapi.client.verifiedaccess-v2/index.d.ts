/* Type definitions for non-npm package Chrome Verified Access API v2 0.0 */
// Project: https://developers.google.com/chrome/verified-access
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://verifiedaccess.googleapis.com/$discovery/rest?version=v2
// Revision: 20221214

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Chrome Verified Access API v2 */
    function load(urlOrObject: "https://verifiedaccess.googleapis.com/$discovery/rest?version=v2"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "verifiedaccess", version: "v2"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "verifiedaccess", version: "v2", callback: () => any): void;

    namespace verifiedaccess {
        interface Challenge {
            /** Challenge generated with the old signing key, the bytes representation of SignedData (this will only be present during key rotation). */
            alternativeChallenge?: string;
            /** Generated challenge, the bytes representation of SignedData. */
            challenge?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface VerifyChallengeResponseRequest {
            /** Required. The generated response to the challenge, the bytes representation of SignedData. */
            challengeResponse?: string;
            /**
             * Optional. Service can optionally provide identity information about the device or user associated with the key. For an EMK, this value is the enrolled domain. For an EUK, this value
             * is the user's email address. If present, this value will be checked against contents of the response, and verification will fail if there is no match.
             */
            expectedIdentity?: string;
        }
        interface VerifyChallengeResponseResult {
            /** Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers */
            customerId?: string;
            /** Device permanent id is returned in this field (for the machine response only). */
            devicePermanentId?: string;
            /** Device signal in json string representation. */
            deviceSignal?: string;
            /** Device attested key trust level. */
            keyTrustLevel?: string;
            /**
             * Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the
             * option to include CSR is now available for both user and machine responses)
             */
            signedPublicKeyAndChallenge?: string;
            /** Virtual device id of the device. The definition of virtual device id is platform-specific. */
            virtualDeviceId?: string;
        }
        interface ChallengeResource {
            /** Generates a new challenge. */
            generate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Empty;
            }): Request<Challenge>;
            generate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Empty): Request<Challenge>;
            /** Verifies the challenge response. */
            verify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: VerifyChallengeResponseRequest;
            }): Request<VerifyChallengeResponseResult>;
            verify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: VerifyChallengeResponseRequest): Request<VerifyChallengeResponseResult>;
        }

        const challenge: ChallengeResource;
    }
}
