/* This is stub file for gapi.client.gkeonprem-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241204

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://gkeonprem.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.gkeonprem */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.gkeonprem.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.gkeonprem.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new bare metal admin cluster in a given project and location. The API needs to be combined with creating a bootstrap cluster to work. See: https://cloud.google.com/anthos/clusters/docs/bare-metal/latest/installing/creating-clusters/create-admin-cluster-api#prepare_bootstrap_environment */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.create(
      {
        allowPreflightFailure: true,
        bareMetalAdminClusterId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        bareMetalVersion: 'Test string',
        binaryAuthorization: {
          evaluationMode: 'Test string',
        },
        clusterOperations: {
          enableApplicationLogs: true,
        },
        controlPlane: {
          apiServerArgs: [
            {
              argument: 'Test string',
              value: 'Test string',
            },
          ],
          controlPlaneNodePoolConfig: {
            nodePoolConfig: {
              kubeletConfig: {
                registryBurst: 42,
                registryPullQps: 42,
                serializeImagePullsDisabled: true,
              },
              labels: {
                A: 'Test string',
              },
              nodeConfigs: [
                {
                  labels: {
                    A: 'Test string',
                  },
                  nodeIp: 'Test string',
                },
              ],
              operatingSystem: 'Test string',
              taints: [
                {
                  effect: 'Test string',
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
            },
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        loadBalancer: {
          manualLbConfig: {
            enabled: true,
          },
          portConfig: {
            controlPlaneLoadBalancerPort: 42,
          },
          vipConfig: {
            controlPlaneVip: 'Test string',
          },
        },
        localName: 'Test string',
        maintenanceConfig: {
          maintenanceAddressCidrBlocks: ['Test string'],
        },
        maintenanceStatus: {
          machineDrainStatus: {
            drainedMachines: [
              {
                nodeIp: 'Test string',
              },
            ],
            drainingMachines: [
              {
                nodeIp: 'Test string',
                podCount: 42,
              },
            ],
          },
        },
        name: 'Test string',
        networkConfig: {
          islandModeCidr: {
            podAddressCidrBlocks: ['Test string'],
            serviceAddressCidrBlocks: ['Test string'],
          },
        },
        nodeAccessConfig: {
          loginUser: 'Test string',
        },
        nodeConfig: {
          maxPodsPerNode: 'Test string',
        },
        osEnvironmentConfig: {
          packageRepoExcluded: true,
        },
        proxy: {
          noProxy: ['Test string'],
          uri: 'Test string',
        },
        reconciling: true,
        securityConfig: {
          authorization: {
            adminUsers: [
              {
                username: 'Test string',
              },
            ],
          },
        },
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        storage: {
          lvpNodeMountsConfig: {
            path: 'Test string',
            storageClass: 'Test string',
          },
          lvpShareConfig: {
            lvpConfig: {
              path: 'Test string',
              storageClass: 'Test string',
            },
            sharedPathPvCount: 42,
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
      }
    );
    /** Enrolls an existing bare metal admin cluster to the Anthos On-Prem API within a given project and location. Through enrollment, an existing admin cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster will be expected to be performed through the API. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.enroll(
      {
        parent: 'Test string',
      },
      {
        bareMetalAdminClusterId: 'Test string',
        membership: 'Test string',
      }
    );
    /** Gets details of a single bare metal admin cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.get({
      allowMissing: true,
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists bare metal admin clusters in a given project and location. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.list({
      allowMissing: true,
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the parameters of a single bare metal admin cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        bareMetalVersion: 'Test string',
        binaryAuthorization: {
          evaluationMode: 'Test string',
        },
        clusterOperations: {
          enableApplicationLogs: true,
        },
        controlPlane: {
          apiServerArgs: [
            {
              argument: 'Test string',
              value: 'Test string',
            },
          ],
          controlPlaneNodePoolConfig: {
            nodePoolConfig: {
              kubeletConfig: {
                registryBurst: 42,
                registryPullQps: 42,
                serializeImagePullsDisabled: true,
              },
              labels: {
                A: 'Test string',
              },
              nodeConfigs: [
                {
                  labels: {
                    A: 'Test string',
                  },
                  nodeIp: 'Test string',
                },
              ],
              operatingSystem: 'Test string',
              taints: [
                {
                  effect: 'Test string',
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
            },
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        loadBalancer: {
          manualLbConfig: {
            enabled: true,
          },
          portConfig: {
            controlPlaneLoadBalancerPort: 42,
          },
          vipConfig: {
            controlPlaneVip: 'Test string',
          },
        },
        localName: 'Test string',
        maintenanceConfig: {
          maintenanceAddressCidrBlocks: ['Test string'],
        },
        maintenanceStatus: {
          machineDrainStatus: {
            drainedMachines: [
              {
                nodeIp: 'Test string',
              },
            ],
            drainingMachines: [
              {
                nodeIp: 'Test string',
                podCount: 42,
              },
            ],
          },
        },
        name: 'Test string',
        networkConfig: {
          islandModeCidr: {
            podAddressCidrBlocks: ['Test string'],
            serviceAddressCidrBlocks: ['Test string'],
          },
        },
        nodeAccessConfig: {
          loginUser: 'Test string',
        },
        nodeConfig: {
          maxPodsPerNode: 'Test string',
        },
        osEnvironmentConfig: {
          packageRepoExcluded: true,
        },
        proxy: {
          noProxy: ['Test string'],
          uri: 'Test string',
        },
        reconciling: true,
        securityConfig: {
          authorization: {
            adminUsers: [
              {
                username: 'Test string',
              },
            ],
          },
        },
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        storage: {
          lvpNodeMountsConfig: {
            path: 'Test string',
            storageClass: 'Test string',
          },
          lvpShareConfig: {
            lvpConfig: {
              path: 'Test string',
              storageClass: 'Test string',
            },
            sharedPathPvCount: 42,
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
      }
    );
    /** Queries the bare metal admin cluster version config. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.queryVersionConfig(
      {
        parent: 'Test string',
        'upgradeConfig.clusterName': 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unenrolls an existing bare metal admin cluster from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or its clients. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.unenroll(
      {
        allowMissing: true,
        etag: 'Test string',
        ignoreErrors: true,
        name: 'Test string',
        validateOnly: true,
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.bareMetalAdminClusters.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates a new bare metal cluster in a given project and location. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.create(
      {
        allowPreflightFailure: true,
        bareMetalClusterId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        adminClusterMembership: 'Test string',
        adminClusterName: 'Test string',
        annotations: {
          A: 'Test string',
        },
        bareMetalVersion: 'Test string',
        binaryAuthorization: {
          evaluationMode: 'Test string',
        },
        clusterOperations: {
          enableApplicationLogs: true,
        },
        controlPlane: {
          apiServerArgs: [
            {
              argument: 'Test string',
              value: 'Test string',
            },
          ],
          controlPlaneNodePoolConfig: {
            nodePoolConfig: {
              kubeletConfig: {
                registryBurst: 42,
                registryPullQps: 42,
                serializeImagePullsDisabled: true,
              },
              labels: {
                A: 'Test string',
              },
              nodeConfigs: [
                {
                  labels: {
                    A: 'Test string',
                  },
                  nodeIp: 'Test string',
                },
              ],
              operatingSystem: 'Test string',
              taints: [
                {
                  effect: 'Test string',
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
            },
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        loadBalancer: {
          bgpLbConfig: {
            addressPools: [
              {
                addresses: ['Test string'],
                avoidBuggyIps: true,
                manualAssign: true,
                pool: 'Test string',
              },
            ],
            asn: 'Test string',
            bgpPeerConfigs: [
              {
                asn: 'Test string',
                controlPlaneNodes: ['Test string'],
                ipAddress: 'Test string',
              },
            ],
            loadBalancerNodePoolConfig: {
              nodePoolConfig: {
                kubeletConfig: {
                  registryBurst: 42,
                  registryPullQps: 42,
                  serializeImagePullsDisabled: true,
                },
                labels: {
                  A: 'Test string',
                },
                nodeConfigs: [
                  {
                    labels: {
                      A: 'Test string',
                    },
                    nodeIp: 'Test string',
                  },
                ],
                operatingSystem: 'Test string',
                taints: [
                  {
                    effect: 'Test string',
                    key: 'Test string',
                    value: 'Test string',
                  },
                ],
              },
            },
          },
          manualLbConfig: {
            enabled: true,
          },
          metalLbConfig: {
            addressPools: [
              {
                addresses: ['Test string'],
                avoidBuggyIps: true,
                manualAssign: true,
                pool: 'Test string',
              },
            ],
            loadBalancerNodePoolConfig: {
              nodePoolConfig: {
                kubeletConfig: {
                  registryBurst: 42,
                  registryPullQps: 42,
                  serializeImagePullsDisabled: true,
                },
                labels: {
                  A: 'Test string',
                },
                nodeConfigs: [
                  {
                    labels: {
                      A: 'Test string',
                    },
                    nodeIp: 'Test string',
                  },
                ],
                operatingSystem: 'Test string',
                taints: [
                  {
                    effect: 'Test string',
                    key: 'Test string',
                    value: 'Test string',
                  },
                ],
              },
            },
          },
          portConfig: {
            controlPlaneLoadBalancerPort: 42,
          },
          vipConfig: {
            controlPlaneVip: 'Test string',
            ingressVip: 'Test string',
          },
        },
        localName: 'Test string',
        maintenanceConfig: {
          maintenanceAddressCidrBlocks: ['Test string'],
        },
        maintenanceStatus: {
          machineDrainStatus: {
            drainedMachines: [
              {
                nodeIp: 'Test string',
              },
            ],
            drainingMachines: [
              {
                nodeIp: 'Test string',
                podCount: 42,
              },
            ],
          },
        },
        name: 'Test string',
        networkConfig: {
          advancedNetworking: true,
          islandModeCidr: {
            podAddressCidrBlocks: ['Test string'],
            serviceAddressCidrBlocks: ['Test string'],
          },
          multipleNetworkInterfacesConfig: {
            enabled: true,
          },
          srIovConfig: {
            enabled: true,
          },
        },
        nodeAccessConfig: {
          loginUser: 'Test string',
        },
        nodeConfig: {
          containerRuntime: 'Test string',
          maxPodsPerNode: 'Test string',
        },
        osEnvironmentConfig: {
          packageRepoExcluded: true,
        },
        proxy: {
          noProxy: ['Test string'],
          uri: 'Test string',
        },
        reconciling: true,
        securityConfig: {
          authorization: {
            adminUsers: [
              {
                username: 'Test string',
              },
            ],
          },
        },
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        storage: {
          lvpNodeMountsConfig: {
            path: 'Test string',
            storageClass: 'Test string',
          },
          lvpShareConfig: {
            lvpConfig: {
              path: 'Test string',
              storageClass: 'Test string',
            },
            sharedPathPvCount: 42,
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        upgradePolicy: {
          pause: true,
          policy: 'Test string',
        },
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
      }
    );
    /** Deletes a single bare metal Cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.delete({
      allowMissing: true,
      etag: 'Test string',
      force: true,
      ignoreErrors: true,
      name: 'Test string',
      validateOnly: true,
    });
    /** Enrolls an existing bare metal user cluster and its node pools to the Anthos On-Prem API within a given project and location. Through enrollment, an existing cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster and/or its node pools will be expected to be performed through the API. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.enroll(
      {
        parent: 'Test string',
      },
      {
        adminClusterMembership: 'Test string',
        bareMetalClusterId: 'Test string',
        localName: 'Test string',
      }
    );
    /** Gets details of a single bare metal Cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.get({
      allowMissing: true,
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists bare metal clusters in a given project and location. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.list({
      allowMissing: true,
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the parameters of a single bare metal Cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        adminClusterMembership: 'Test string',
        adminClusterName: 'Test string',
        annotations: {
          A: 'Test string',
        },
        bareMetalVersion: 'Test string',
        binaryAuthorization: {
          evaluationMode: 'Test string',
        },
        clusterOperations: {
          enableApplicationLogs: true,
        },
        controlPlane: {
          apiServerArgs: [
            {
              argument: 'Test string',
              value: 'Test string',
            },
          ],
          controlPlaneNodePoolConfig: {
            nodePoolConfig: {
              kubeletConfig: {
                registryBurst: 42,
                registryPullQps: 42,
                serializeImagePullsDisabled: true,
              },
              labels: {
                A: 'Test string',
              },
              nodeConfigs: [
                {
                  labels: {
                    A: 'Test string',
                  },
                  nodeIp: 'Test string',
                },
              ],
              operatingSystem: 'Test string',
              taints: [
                {
                  effect: 'Test string',
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
            },
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        loadBalancer: {
          bgpLbConfig: {
            addressPools: [
              {
                addresses: ['Test string'],
                avoidBuggyIps: true,
                manualAssign: true,
                pool: 'Test string',
              },
            ],
            asn: 'Test string',
            bgpPeerConfigs: [
              {
                asn: 'Test string',
                controlPlaneNodes: ['Test string'],
                ipAddress: 'Test string',
              },
            ],
            loadBalancerNodePoolConfig: {
              nodePoolConfig: {
                kubeletConfig: {
                  registryBurst: 42,
                  registryPullQps: 42,
                  serializeImagePullsDisabled: true,
                },
                labels: {
                  A: 'Test string',
                },
                nodeConfigs: [
                  {
                    labels: {
                      A: 'Test string',
                    },
                    nodeIp: 'Test string',
                  },
                ],
                operatingSystem: 'Test string',
                taints: [
                  {
                    effect: 'Test string',
                    key: 'Test string',
                    value: 'Test string',
                  },
                ],
              },
            },
          },
          manualLbConfig: {
            enabled: true,
          },
          metalLbConfig: {
            addressPools: [
              {
                addresses: ['Test string'],
                avoidBuggyIps: true,
                manualAssign: true,
                pool: 'Test string',
              },
            ],
            loadBalancerNodePoolConfig: {
              nodePoolConfig: {
                kubeletConfig: {
                  registryBurst: 42,
                  registryPullQps: 42,
                  serializeImagePullsDisabled: true,
                },
                labels: {
                  A: 'Test string',
                },
                nodeConfigs: [
                  {
                    labels: {
                      A: 'Test string',
                    },
                    nodeIp: 'Test string',
                  },
                ],
                operatingSystem: 'Test string',
                taints: [
                  {
                    effect: 'Test string',
                    key: 'Test string',
                    value: 'Test string',
                  },
                ],
              },
            },
          },
          portConfig: {
            controlPlaneLoadBalancerPort: 42,
          },
          vipConfig: {
            controlPlaneVip: 'Test string',
            ingressVip: 'Test string',
          },
        },
        localName: 'Test string',
        maintenanceConfig: {
          maintenanceAddressCidrBlocks: ['Test string'],
        },
        maintenanceStatus: {
          machineDrainStatus: {
            drainedMachines: [
              {
                nodeIp: 'Test string',
              },
            ],
            drainingMachines: [
              {
                nodeIp: 'Test string',
                podCount: 42,
              },
            ],
          },
        },
        name: 'Test string',
        networkConfig: {
          advancedNetworking: true,
          islandModeCidr: {
            podAddressCidrBlocks: ['Test string'],
            serviceAddressCidrBlocks: ['Test string'],
          },
          multipleNetworkInterfacesConfig: {
            enabled: true,
          },
          srIovConfig: {
            enabled: true,
          },
        },
        nodeAccessConfig: {
          loginUser: 'Test string',
        },
        nodeConfig: {
          containerRuntime: 'Test string',
          maxPodsPerNode: 'Test string',
        },
        osEnvironmentConfig: {
          packageRepoExcluded: true,
        },
        proxy: {
          noProxy: ['Test string'],
          uri: 'Test string',
        },
        reconciling: true,
        securityConfig: {
          authorization: {
            adminUsers: [
              {
                username: 'Test string',
              },
            ],
          },
        },
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        storage: {
          lvpNodeMountsConfig: {
            path: 'Test string',
            storageClass: 'Test string',
          },
          lvpShareConfig: {
            lvpConfig: {
              path: 'Test string',
              storageClass: 'Test string',
            },
            sharedPathPvCount: 42,
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        upgradePolicy: {
          pause: true,
          policy: 'Test string',
        },
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
      }
    );
    /** Queries the bare metal user cluster version config. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.queryVersionConfig(
      {
        'createConfig.adminClusterMembership': 'Test string',
        'createConfig.adminClusterName': 'Test string',
        parent: 'Test string',
        'upgradeConfig.clusterName': 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unenrolls an existing bare metal user cluster and its node pools from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters and node pools will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or its clients. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.unenroll({
      allowMissing: true,
      etag: 'Test string',
      force: true,
      name: 'Test string',
      validateOnly: true,
    });
    /** Creates a new bare metal node pool in a given project, location and Bare Metal cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.create(
      {
        bareMetalNodePoolId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        nodePoolConfig: {
          kubeletConfig: {
            registryBurst: 42,
            registryPullQps: 42,
            serializeImagePullsDisabled: true,
          },
          labels: {
            A: 'Test string',
          },
          nodeConfigs: [
            {
              labels: {
                A: 'Test string',
              },
              nodeIp: 'Test string',
            },
          ],
          operatingSystem: 'Test string',
          taints: [
            {
              effect: 'Test string',
              key: 'Test string',
              value: 'Test string',
            },
          ],
        },
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        upgradePolicy: {
          parallelUpgradeConfig: {
            concurrentNodes: 42,
            minimumAvailableNodes: 42,
          },
        },
      }
    );
    /** Deletes a single bare metal node pool. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.delete(
      {
        allowMissing: true,
        etag: 'Test string',
        ignoreErrors: true,
        name: 'Test string',
        validateOnly: true,
      }
    );
    /** Enrolls an existing bare metal node pool to the Anthos On-Prem API within a given project and location. Through enrollment, an existing node pool will become Anthos On-Prem API managed. The corresponding GCP resources will be created. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.enroll(
      {
        parent: 'Test string',
      },
      {
        bareMetalNodePoolId: 'Test string',
        validateOnly: true,
      }
    );
    /** Gets details of a single bare metal node pool. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.get(
      {
        name: 'Test string',
        view: 'Test string',
      }
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists bare metal node pools in a given project, location and bare metal cluster. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      }
    );
    /** Updates the parameters of a single bare metal node pool. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        nodePoolConfig: {
          kubeletConfig: {
            registryBurst: 42,
            registryPullQps: 42,
            serializeImagePullsDisabled: true,
          },
          labels: {
            A: 'Test string',
          },
          nodeConfigs: [
            {
              labels: {
                A: 'Test string',
              },
              nodeIp: 'Test string',
            },
          ],
          operatingSystem: 'Test string',
          taints: [
            {
              effect: 'Test string',
              key: 'Test string',
              value: 'Test string',
            },
          ],
        },
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        upgradePolicy: {
          parallelUpgradeConfig: {
            concurrentNodes: 42,
            minimumAvailableNodes: 42,
          },
        },
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unenrolls a bare metal node pool from Anthos On-Prem API. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.unenroll(
      {
        allowMissing: true,
        etag: 'Test string',
        name: 'Test string',
        validateOnly: true,
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.bareMetalNodePools.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.bareMetalClusters.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.gkeonprem.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new VMware admin cluster in a given project and location. The API needs to be combined with creating a bootstrap cluster to work. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.create(
      {
        allowPreflightFailure: true,
        parent: 'Test string',
        validateOnly: true,
        vmwareAdminClusterId: 'Test string',
      },
      {
        addonNode: {
          autoResizeConfig: {
            enabled: true,
          },
        },
        annotations: {
          A: 'Test string',
        },
        antiAffinityGroups: {
          aagConfigDisabled: true,
        },
        authorization: {
          viewerUsers: [
            {
              username: 'Test string',
            },
          ],
        },
        autoRepairConfig: {
          enabled: true,
        },
        bootstrapClusterMembership: 'Test string',
        controlPlaneNode: {
          cpus: 'Test string',
          memory: 'Test string',
          replicas: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        imageType: 'Test string',
        loadBalancer: {
          f5Config: {
            address: 'Test string',
            partition: 'Test string',
            snatPool: 'Test string',
          },
          manualLbConfig: {
            addonsNodePort: 42,
            controlPlaneNodePort: 42,
            ingressHttpNodePort: 42,
            ingressHttpsNodePort: 42,
            konnectivityServerNodePort: 42,
          },
          metalLbConfig: {
            enabled: true,
          },
          seesawConfig: {
            enableHa: true,
            group: 'Test string',
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
            masterIp: 'Test string',
            stackdriverName: 'Test string',
            vms: ['Test string'],
          },
          vipConfig: {
            addonsVip: 'Test string',
            controlPlaneVip: 'Test string',
          },
        },
        localName: 'Test string',
        name: 'Test string',
        networkConfig: {
          dhcpIpConfig: {
            enabled: true,
          },
          haControlPlaneConfig: {
            controlPlaneIpBlock: {
              gateway: 'Test string',
              ips: [
                {
                  hostname: 'Test string',
                  ip: 'Test string',
                },
              ],
              netmask: 'Test string',
            },
          },
          hostConfig: {
            dnsSearchDomains: ['Test string'],
            dnsServers: ['Test string'],
            ntpServers: ['Test string'],
          },
          podAddressCidrBlocks: ['Test string'],
          serviceAddressCidrBlocks: ['Test string'],
          staticIpConfig: {
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
          },
          vcenterNetwork: 'Test string',
        },
        onPremVersion: 'Test string',
        platformConfig: {
          bundles: [
            {
              status: {
                conditions: [
                  {
                    lastTransitionTime: 'Test string',
                    message: 'Test string',
                    reason: 'Test string',
                    state: 'Test string',
                    type: 'Test string',
                  },
                ],
                errorMessage: 'Test string',
                version: 'Test string',
                versions: {
                  versions: [
                    {
                      count: 'Test string',
                      version: 'Test string',
                    },
                  ],
                },
              },
              version: 'Test string',
            },
          ],
          platformVersion: 'Test string',
          requiredPlatformVersion: 'Test string',
          status: {
            conditions: [
              {
                lastTransitionTime: 'Test string',
                message: 'Test string',
                reason: 'Test string',
                state: 'Test string',
                type: 'Test string',
              },
            ],
            errorMessage: 'Test string',
            version: 'Test string',
            versions: {
              versions: [
                {
                  count: 'Test string',
                  version: 'Test string',
                },
              ],
            },
          },
        },
        preparedSecrets: {
          enabled: true,
        },
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
        vcenter: {
          address: 'Test string',
          caCertData: 'Test string',
          cluster: 'Test string',
          datacenter: 'Test string',
          dataDisk: 'Test string',
          datastore: 'Test string',
          folder: 'Test string',
          resourcePool: 'Test string',
          storagePolicyName: 'Test string',
        },
      }
    );
    /** Enrolls an existing VMware admin cluster to the Anthos On-Prem API within a given project and location. Through enrollment, an existing admin cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster will be expected to be performed through the API. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.enroll(
      {
        parent: 'Test string',
      },
      {
        membership: 'Test string',
        vmwareAdminClusterId: 'Test string',
      }
    );
    /** Gets details of a single VMware admin cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.get({
      allowMissing: true,
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists VMware admin clusters in a given project and location. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.list({
      allowMissing: true,
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the parameters of a single VMware admin cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        addonNode: {
          autoResizeConfig: {
            enabled: true,
          },
        },
        annotations: {
          A: 'Test string',
        },
        antiAffinityGroups: {
          aagConfigDisabled: true,
        },
        authorization: {
          viewerUsers: [
            {
              username: 'Test string',
            },
          ],
        },
        autoRepairConfig: {
          enabled: true,
        },
        bootstrapClusterMembership: 'Test string',
        controlPlaneNode: {
          cpus: 'Test string',
          memory: 'Test string',
          replicas: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        imageType: 'Test string',
        loadBalancer: {
          f5Config: {
            address: 'Test string',
            partition: 'Test string',
            snatPool: 'Test string',
          },
          manualLbConfig: {
            addonsNodePort: 42,
            controlPlaneNodePort: 42,
            ingressHttpNodePort: 42,
            ingressHttpsNodePort: 42,
            konnectivityServerNodePort: 42,
          },
          metalLbConfig: {
            enabled: true,
          },
          seesawConfig: {
            enableHa: true,
            group: 'Test string',
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
            masterIp: 'Test string',
            stackdriverName: 'Test string',
            vms: ['Test string'],
          },
          vipConfig: {
            addonsVip: 'Test string',
            controlPlaneVip: 'Test string',
          },
        },
        localName: 'Test string',
        name: 'Test string',
        networkConfig: {
          dhcpIpConfig: {
            enabled: true,
          },
          haControlPlaneConfig: {
            controlPlaneIpBlock: {
              gateway: 'Test string',
              ips: [
                {
                  hostname: 'Test string',
                  ip: 'Test string',
                },
              ],
              netmask: 'Test string',
            },
          },
          hostConfig: {
            dnsSearchDomains: ['Test string'],
            dnsServers: ['Test string'],
            ntpServers: ['Test string'],
          },
          podAddressCidrBlocks: ['Test string'],
          serviceAddressCidrBlocks: ['Test string'],
          staticIpConfig: {
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
          },
          vcenterNetwork: 'Test string',
        },
        onPremVersion: 'Test string',
        platformConfig: {
          bundles: [
            {
              status: {
                conditions: [
                  {
                    lastTransitionTime: 'Test string',
                    message: 'Test string',
                    reason: 'Test string',
                    state: 'Test string',
                    type: 'Test string',
                  },
                ],
                errorMessage: 'Test string',
                version: 'Test string',
                versions: {
                  versions: [
                    {
                      count: 'Test string',
                      version: 'Test string',
                    },
                  ],
                },
              },
              version: 'Test string',
            },
          ],
          platformVersion: 'Test string',
          requiredPlatformVersion: 'Test string',
          status: {
            conditions: [
              {
                lastTransitionTime: 'Test string',
                message: 'Test string',
                reason: 'Test string',
                state: 'Test string',
                type: 'Test string',
              },
            ],
            errorMessage: 'Test string',
            version: 'Test string',
            versions: {
              versions: [
                {
                  count: 'Test string',
                  version: 'Test string',
                },
              ],
            },
          },
        },
        preparedSecrets: {
          enabled: true,
        },
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
        vcenter: {
          address: 'Test string',
          caCertData: 'Test string',
          cluster: 'Test string',
          datacenter: 'Test string',
          dataDisk: 'Test string',
          datastore: 'Test string',
          folder: 'Test string',
          resourcePool: 'Test string',
          storagePolicyName: 'Test string',
        },
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unenrolls an existing VMware admin cluster from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or its clients. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.unenroll(
      {
        allowMissing: true,
        etag: 'Test string',
        name: 'Test string',
        validateOnly: true,
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.vmwareAdminClusters.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates a new VMware user cluster in a given project and location. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.create(
      {
        allowPreflightFailure: true,
        parent: 'Test string',
        validateOnly: true,
        vmwareClusterId: 'Test string',
      },
      {
        adminClusterMembership: 'Test string',
        adminClusterName: 'Test string',
        annotations: {
          A: 'Test string',
        },
        antiAffinityGroups: {
          aagConfigDisabled: true,
        },
        authorization: {
          adminUsers: [
            {
              username: 'Test string',
            },
          ],
        },
        autoRepairConfig: {
          enabled: true,
        },
        binaryAuthorization: {
          evaluationMode: 'Test string',
        },
        controlPlaneNode: {
          autoResizeConfig: {
            enabled: true,
          },
          cpus: 'Test string',
          memory: 'Test string',
          replicas: 'Test string',
          vsphereConfig: {
            datastore: 'Test string',
            storagePolicyName: 'Test string',
          },
        },
        createTime: 'Test string',
        dataplaneV2: {
          advancedNetworking: true,
          dataplaneV2Enabled: true,
          forwardMode: 'Test string',
          windowsDataplaneV2Enabled: true,
        },
        deleteTime: 'Test string',
        description: 'Test string',
        disableBundledIngress: true,
        enableControlPlaneV2: true,
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        loadBalancer: {
          f5Config: {
            address: 'Test string',
            partition: 'Test string',
            snatPool: 'Test string',
          },
          manualLbConfig: {
            controlPlaneNodePort: 42,
            ingressHttpNodePort: 42,
            ingressHttpsNodePort: 42,
            konnectivityServerNodePort: 42,
          },
          metalLbConfig: {
            addressPools: [
              {
                addresses: ['Test string'],
                avoidBuggyIps: true,
                manualAssign: true,
                pool: 'Test string',
              },
            ],
          },
          seesawConfig: {
            enableHa: true,
            group: 'Test string',
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
            masterIp: 'Test string',
            stackdriverName: 'Test string',
            vms: ['Test string'],
          },
          vipConfig: {
            controlPlaneVip: 'Test string',
            ingressVip: 'Test string',
          },
        },
        localName: 'Test string',
        name: 'Test string',
        networkConfig: {
          controlPlaneV2Config: {
            controlPlaneIpBlock: {
              gateway: 'Test string',
              ips: [
                {
                  hostname: 'Test string',
                  ip: 'Test string',
                },
              ],
              netmask: 'Test string',
            },
          },
          dhcpIpConfig: {
            enabled: true,
          },
          hostConfig: {
            dnsSearchDomains: ['Test string'],
            dnsServers: ['Test string'],
            ntpServers: ['Test string'],
          },
          podAddressCidrBlocks: ['Test string'],
          serviceAddressCidrBlocks: ['Test string'],
          staticIpConfig: {
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
          },
          vcenterNetwork: 'Test string',
        },
        onPremVersion: 'Test string',
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        storage: {
          vsphereCsiDisabled: true,
        },
        uid: 'Test string',
        updateTime: 'Test string',
        upgradePolicy: {
          controlPlaneOnly: true,
        },
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
        vcenter: {
          address: 'Test string',
          caCertData: 'Test string',
          cluster: 'Test string',
          datacenter: 'Test string',
          datastore: 'Test string',
          folder: 'Test string',
          resourcePool: 'Test string',
          storagePolicyName: 'Test string',
        },
        vmTrackingEnabled: true,
      }
    );
    /** Deletes a single VMware Cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.delete({
      allowMissing: true,
      etag: 'Test string',
      force: true,
      ignoreErrors: true,
      name: 'Test string',
      validateOnly: true,
    });
    /** Enrolls an existing VMware user cluster and its node pools to the Anthos On-Prem API within a given project and location. Through enrollment, an existing cluster will become Anthos On-Prem API managed. The corresponding GCP resources will be created and all future modifications to the cluster and/or its node pools will be expected to be performed through the API. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.enroll(
      {
        parent: 'Test string',
      },
      {
        adminClusterMembership: 'Test string',
        localName: 'Test string',
        validateOnly: true,
        vmwareClusterId: 'Test string',
      }
    );
    /** Gets details of a single VMware Cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.get({
      allowMissing: true,
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists VMware Clusters in a given project and location. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.list({
      allowMissing: true,
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the parameters of a single VMware cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        adminClusterMembership: 'Test string',
        adminClusterName: 'Test string',
        annotations: {
          A: 'Test string',
        },
        antiAffinityGroups: {
          aagConfigDisabled: true,
        },
        authorization: {
          adminUsers: [
            {
              username: 'Test string',
            },
          ],
        },
        autoRepairConfig: {
          enabled: true,
        },
        binaryAuthorization: {
          evaluationMode: 'Test string',
        },
        controlPlaneNode: {
          autoResizeConfig: {
            enabled: true,
          },
          cpus: 'Test string',
          memory: 'Test string',
          replicas: 'Test string',
          vsphereConfig: {
            datastore: 'Test string',
            storagePolicyName: 'Test string',
          },
        },
        createTime: 'Test string',
        dataplaneV2: {
          advancedNetworking: true,
          dataplaneV2Enabled: true,
          forwardMode: 'Test string',
          windowsDataplaneV2Enabled: true,
        },
        deleteTime: 'Test string',
        description: 'Test string',
        disableBundledIngress: true,
        enableControlPlaneV2: true,
        endpoint: 'Test string',
        etag: 'Test string',
        fleet: {
          membership: 'Test string',
        },
        loadBalancer: {
          f5Config: {
            address: 'Test string',
            partition: 'Test string',
            snatPool: 'Test string',
          },
          manualLbConfig: {
            controlPlaneNodePort: 42,
            ingressHttpNodePort: 42,
            ingressHttpsNodePort: 42,
            konnectivityServerNodePort: 42,
          },
          metalLbConfig: {
            addressPools: [
              {
                addresses: ['Test string'],
                avoidBuggyIps: true,
                manualAssign: true,
                pool: 'Test string',
              },
            ],
          },
          seesawConfig: {
            enableHa: true,
            group: 'Test string',
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
            masterIp: 'Test string',
            stackdriverName: 'Test string',
            vms: ['Test string'],
          },
          vipConfig: {
            controlPlaneVip: 'Test string',
            ingressVip: 'Test string',
          },
        },
        localName: 'Test string',
        name: 'Test string',
        networkConfig: {
          controlPlaneV2Config: {
            controlPlaneIpBlock: {
              gateway: 'Test string',
              ips: [
                {
                  hostname: 'Test string',
                  ip: 'Test string',
                },
              ],
              netmask: 'Test string',
            },
          },
          dhcpIpConfig: {
            enabled: true,
          },
          hostConfig: {
            dnsSearchDomains: ['Test string'],
            dnsServers: ['Test string'],
            ntpServers: ['Test string'],
          },
          podAddressCidrBlocks: ['Test string'],
          serviceAddressCidrBlocks: ['Test string'],
          staticIpConfig: {
            ipBlocks: [
              {
                gateway: 'Test string',
                ips: [
                  {
                    hostname: 'Test string',
                    ip: 'Test string',
                  },
                ],
                netmask: 'Test string',
              },
            ],
          },
          vcenterNetwork: 'Test string',
        },
        onPremVersion: 'Test string',
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        storage: {
          vsphereCsiDisabled: true,
        },
        uid: 'Test string',
        updateTime: 'Test string',
        upgradePolicy: {
          controlPlaneOnly: true,
        },
        validationCheck: {
          option: 'Test string',
          scenario: 'Test string',
          status: {
            result: [
              {
                category: 'Test string',
                description: 'Test string',
                details: 'Test string',
                reason: 'Test string',
                state: 'Test string',
              },
            ],
          },
        },
        vcenter: {
          address: 'Test string',
          caCertData: 'Test string',
          cluster: 'Test string',
          datacenter: 'Test string',
          datastore: 'Test string',
          folder: 'Test string',
          resourcePool: 'Test string',
          storagePolicyName: 'Test string',
        },
        vmTrackingEnabled: true,
      }
    );
    /** Queries the VMware user cluster version config. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.queryVersionConfig(
      {
        'createConfig.adminClusterMembership': 'Test string',
        'createConfig.adminClusterName': 'Test string',
        parent: 'Test string',
        'upgradeConfig.clusterName': 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unenrolls an existing VMware user cluster and its node pools from the Anthos On-Prem API within a given project and location. Unenrollment removes the Cloud reference to the cluster without modifying the underlying OnPrem Resources. Clusters and node pools will continue to run; however, they will no longer be accessible through the Anthos On-Prem API or UI. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.unenroll({
      allowMissing: true,
      etag: 'Test string',
      force: true,
      name: 'Test string',
      validateOnly: true,
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates a new VMware node pool in a given project, location and VMWare cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.create(
      {
        parent: 'Test string',
        validateOnly: true,
        vmwareNodePoolId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        config: {
          bootDiskSizeGb: 'Test string',
          cpus: 'Test string',
          enableLoadBalancer: true,
          image: 'Test string',
          imageType: 'Test string',
          labels: {
            A: 'Test string',
          },
          memoryMb: 'Test string',
          replicas: 'Test string',
          taints: [
            {
              effect: 'Test string',
              key: 'Test string',
              value: 'Test string',
            },
          ],
          vsphereConfig: {
            datastore: 'Test string',
            hostGroups: ['Test string'],
            tags: [
              {
                category: 'Test string',
                tag: 'Test string',
              },
            ],
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        nodePoolAutoscaling: {
          maxReplicas: 42,
          minReplicas: 42,
        },
        onPremVersion: 'Test string',
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a single VMware node pool. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.delete(
      {
        allowMissing: true,
        etag: 'Test string',
        ignoreErrors: true,
        name: 'Test string',
        validateOnly: true,
      }
    );
    /** Enrolls a VMware node pool to Anthos On-Prem API */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.enroll(
      {
        parent: 'Test string',
      },
      {
        vmwareNodePoolId: 'Test string',
      }
    );
    /** Gets details of a single VMware node pool. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.get(
      {
        name: 'Test string',
        view: 'Test string',
      }
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists VMware node pools in a given project, location and VMWare cluster. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      }
    );
    /** Updates the parameters of a single VMware node pool. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        config: {
          bootDiskSizeGb: 'Test string',
          cpus: 'Test string',
          enableLoadBalancer: true,
          image: 'Test string',
          imageType: 'Test string',
          labels: {
            A: 'Test string',
          },
          memoryMb: 'Test string',
          replicas: 'Test string',
          taints: [
            {
              effect: 'Test string',
              key: 'Test string',
              value: 'Test string',
            },
          ],
          vsphereConfig: {
            datastore: 'Test string',
            hostGroups: ['Test string'],
            tags: [
              {
                category: 'Test string',
                tag: 'Test string',
              },
            ],
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        nodePoolAutoscaling: {
          maxReplicas: 42,
          minReplicas: 42,
        },
        onPremVersion: 'Test string',
        reconciling: true,
        state: 'Test string',
        status: {
          conditions: [
            {
              lastTransitionTime: 'Test string',
              message: 'Test string',
              reason: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
          errorMessage: 'Test string',
          version: 'Test string',
          versions: {
            versions: [
              {
                count: 'Test string',
                version: 'Test string',
              },
            ],
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unenrolls a VMware node pool to Anthos On-Prem API */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.unenroll(
      {
        allowMissing: true,
        etag: 'Test string',
        name: 'Test string',
        validateOnly: true,
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.gkeonprem.projects.locations.vmwareClusters.vmwareNodePools.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
  }
});
