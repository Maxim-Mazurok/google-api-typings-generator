/* This is stub file for gapi.client.developerconnect-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20251003

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://developerconnect.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.developerconnect */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.developerconnect.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.developerconnect.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new AccountConnector in a given project and location. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.create(
      {
        accountConnectorId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        oauthStartUri: 'Test string',
        providerOauthConfig: {
          scopes: ['Test string'],
          systemProviderId: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Deletes a single AccountConnector. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.delete(
      {
        etag: 'Test string',
        force: true,
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Gets details of a single AccountConnector. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.get(
      {
        name: 'Test string',
      },
    );
    /** Lists AccountConnectors in a given project and location. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the parameters of a single AccountConnector. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        oauthStartUri: 'Test string',
        providerOauthConfig: {
          scopes: ['Test string'],
          systemProviderId: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Deletes a single User. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.users.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Delete the User based on the user credentials. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.users.deleteSelf(
      {
        name: 'Test string',
      },
    );
    /** Fetches OAuth access token based on end user credentials. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.users.fetchAccessToken(
      {
        accountConnector: 'Test string',
      },
      {},
    );
    /** Fetch the User based on the user credentials. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.users.fetchSelf(
      {
        name: 'Test string',
      },
    );
    /** Lists Users in a given project, location, and account_connector. */
    await gapi.client.developerconnect.projects.locations.accountConnectors.users.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new Connection in a given project and location. */
    await gapi.client.developerconnect.projects.locations.connections.create(
      {
        connectionId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        bitbucketCloudConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          webhookSecretSecretVersion: 'Test string',
          workspace: 'Test string',
        },
        bitbucketDataCenterConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          hostUri: 'Test string',
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          serverVersion: 'Test string',
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          sslCaCertificate: 'Test string',
          webhookSecretSecretVersion: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyConfig: {
          keyReference: 'Test string',
        },
        deleteTime: 'Test string',
        disabled: true,
        etag: 'Test string',
        githubConfig: {
          appInstallationId: 'Test string',
          authorizerCredential: {
            oauthTokenSecretVersion: 'Test string',
            username: 'Test string',
          },
          githubApp: 'Test string',
          installationUri: 'Test string',
        },
        githubEnterpriseConfig: {
          appId: 'Test string',
          appInstallationId: 'Test string',
          appSlug: 'Test string',
          hostUri: 'Test string',
          installationUri: 'Test string',
          privateKeySecretVersion: 'Test string',
          serverVersion: 'Test string',
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          sslCaCertificate: 'Test string',
          webhookSecretSecretVersion: 'Test string',
        },
        gitlabConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          webhookSecretSecretVersion: 'Test string',
        },
        gitlabEnterpriseConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          hostUri: 'Test string',
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          serverVersion: 'Test string',
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          sslCaCertificate: 'Test string',
          webhookSecretSecretVersion: 'Test string',
        },
        gitProxyConfig: {
          enabled: true,
        },
        installationState: {
          actionUri: 'Test string',
          message: 'Test string',
          stage: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single Connection. */
    await gapi.client.developerconnect.projects.locations.connections.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** FetchGitHubInstallations returns the list of GitHub Installations that are available to be added to a Connection. For github.com, only installations accessible to the authorizer token are returned. For GitHub Enterprise, all installations are returned. */
    await gapi.client.developerconnect.projects.locations.connections.fetchGitHubInstallations(
      {
        connection: 'Test string',
      },
    );
    /** FetchLinkableGitRepositories returns a list of git repositories from an SCM that are available to be added to a Connection. */
    await gapi.client.developerconnect.projects.locations.connections.fetchLinkableGitRepositories(
      {
        connection: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets details of a single Connection. */
    await gapi.client.developerconnect.projects.locations.connections.get({
      name: 'Test string',
    });
    /** Lists Connections in a given project and location. */
    await gapi.client.developerconnect.projects.locations.connections.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the parameters of a single Connection. */
    await gapi.client.developerconnect.projects.locations.connections.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        bitbucketCloudConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          webhookSecretSecretVersion: 'Test string',
          workspace: 'Test string',
        },
        bitbucketDataCenterConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          hostUri: 'Test string',
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          serverVersion: 'Test string',
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          sslCaCertificate: 'Test string',
          webhookSecretSecretVersion: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyConfig: {
          keyReference: 'Test string',
        },
        deleteTime: 'Test string',
        disabled: true,
        etag: 'Test string',
        githubConfig: {
          appInstallationId: 'Test string',
          authorizerCredential: {
            oauthTokenSecretVersion: 'Test string',
            username: 'Test string',
          },
          githubApp: 'Test string',
          installationUri: 'Test string',
        },
        githubEnterpriseConfig: {
          appId: 'Test string',
          appInstallationId: 'Test string',
          appSlug: 'Test string',
          hostUri: 'Test string',
          installationUri: 'Test string',
          privateKeySecretVersion: 'Test string',
          serverVersion: 'Test string',
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          sslCaCertificate: 'Test string',
          webhookSecretSecretVersion: 'Test string',
        },
        gitlabConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          webhookSecretSecretVersion: 'Test string',
        },
        gitlabEnterpriseConfig: {
          authorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          hostUri: 'Test string',
          readAuthorizerCredential: {
            username: 'Test string',
            userTokenSecretVersion: 'Test string',
          },
          serverVersion: 'Test string',
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          sslCaCertificate: 'Test string',
          webhookSecretSecretVersion: 'Test string',
        },
        gitProxyConfig: {
          enabled: true,
        },
        installationState: {
          actionUri: 'Test string',
          message: 'Test string',
          stage: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** ProcessGitHubEnterpriseWebhook is called by the external GitHub Enterprise instances for notifying events. */
    await gapi.client.developerconnect.projects.locations.connections.processGitHubEnterpriseWebhook(
      {
        parent: 'Test string',
      },
      {
        body: {
          contentType: 'Test string',
          data: 'Test string',
          extensions: [
            {
              A: 42,
            },
          ],
        },
      },
    );
    /** Creates a GitRepositoryLink. Upon linking a Git Repository, Developer Connect will configure the Git Repository to send webhook events to Developer Connect. Connections that use Firebase GitHub Application will have events forwarded to the Firebase service. Connections that use Gemini Code Assist will have events forwarded to Gemini Code Assist service. All other Connections will have events forwarded to Cloud Build. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.create(
      {
        gitRepositoryLinkId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        cloneUri: 'Test string',
        createTime: 'Test string',
        deleteTime: 'Test string',
        etag: 'Test string',
        gitProxyUri: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        uid: 'Test string',
        updateTime: 'Test string',
        webhookId: 'Test string',
      },
    );
    /** Deletes a single GitRepositoryLink. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Fetch the list of branches or tags for a given repository. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.fetchGitRefs(
      {
        gitRepositoryLink: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        refType: 'Test string',
      },
    );
    /** Fetches read token of a given gitRepositoryLink. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.fetchReadToken(
      {
        gitRepositoryLink: 'Test string',
      },
      {},
    );
    /** Fetches read/write token of a given gitRepositoryLink. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.fetchReadWriteToken(
      {
        gitRepositoryLink: 'Test string',
      },
      {},
    );
    /** Gets details of a single GitRepositoryLink. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.get(
      {
        name: 'Test string',
      },
    );
    /** Lists GitRepositoryLinks in a given project, location, and connection. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** ProcessBitbucketCloudWebhook is called by the external Bitbucket Cloud instances for notifying events. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.processBitbucketCloudWebhook(
      {
        name: 'Test string',
      },
      {
        body: {
          contentType: 'Test string',
          data: 'Test string',
          extensions: [
            {
              A: 42,
            },
          ],
        },
      },
    );
    /** ProcessBitbucketDataCenterWebhook is called by the external Bitbucket Data Center instances for notifying events. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.processBitbucketDataCenterWebhook(
      {
        name: 'Test string',
      },
      {
        body: {
          contentType: 'Test string',
          data: 'Test string',
          extensions: [
            {
              A: 42,
            },
          ],
        },
      },
    );
    /** ProcessGitLabEnterpriseWebhook is called by the external GitLab Enterprise instances for notifying events. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.processGitLabEnterpriseWebhook(
      {
        name: 'Test string',
      },
      {
        body: {
          contentType: 'Test string',
          data: 'Test string',
          extensions: [
            {
              A: 42,
            },
          ],
        },
      },
    );
    /** ProcessGitLabWebhook is called by the GitLab.com for notifying events. */
    await gapi.client.developerconnect.projects.locations.connections.gitRepositoryLinks.processGitLabWebhook(
      {
        name: 'Test string',
      },
      {
        body: {
          contentType: 'Test string',
          data: 'Test string',
          extensions: [
            {
              A: 42,
            },
          ],
        },
      },
    );
    /** Creates a new InsightsConfig in a given project and location. */
    await gapi.client.developerconnect.projects.locations.insightsConfigs.create(
      {
        insightsConfigId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        appHubApplication: 'Test string',
        artifactConfigs: [
          {
            googleArtifactAnalysis: {
              projectId: 'Test string',
            },
            googleArtifactRegistry: {
              artifactRegistryPackage: 'Test string',
              projectId: 'Test string',
            },
            uri: 'Test string',
          },
        ],
        createTime: 'Test string',
        errors: [
          {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        runtimeConfigs: [
          {
            appHubWorkload: {
              criticality: 'Test string',
              environment: 'Test string',
              workload: 'Test string',
            },
            gkeWorkload: {
              cluster: 'Test string',
              deployment: 'Test string',
            },
            state: 'Test string',
            uri: 'Test string',
          },
        ],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single Insight. */
    await gapi.client.developerconnect.projects.locations.insightsConfigs.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Gets details of a single Insight. */
    await gapi.client.developerconnect.projects.locations.insightsConfigs.get({
      name: 'Test string',
    });
    /** Lists InsightsConfigs in a given project and location. */
    await gapi.client.developerconnect.projects.locations.insightsConfigs.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the parameters of a single InsightsConfig. */
    await gapi.client.developerconnect.projects.locations.insightsConfigs.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        appHubApplication: 'Test string',
        artifactConfigs: [
          {
            googleArtifactAnalysis: {
              projectId: 'Test string',
            },
            googleArtifactRegistry: {
              artifactRegistryPackage: 'Test string',
              projectId: 'Test string',
            },
            uri: 'Test string',
          },
        ],
        createTime: 'Test string',
        errors: [
          {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        runtimeConfigs: [
          {
            appHubWorkload: {
              criticality: 'Test string',
              environment: 'Test string',
              workload: 'Test string',
            },
            gkeWorkload: {
              cluster: 'Test string',
              deployment: 'Test string',
            },
            state: 'Test string',
            uri: 'Test string',
          },
        ],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.developerconnect.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.developerconnect.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.developerconnect.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.developerconnect.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      returnPartialSuccess: true,
    });
  }
});
