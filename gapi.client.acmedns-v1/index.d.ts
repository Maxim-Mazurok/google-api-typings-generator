/* Type definitions for non-npm package ACME DNS API v1 0.0 */
// Project: https://developers.google.com/domains/acme-dns/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://acmedns.googleapis.com/$discovery/rest?version=v1
// Revision: 20230403

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load ACME DNS API v1 */
    function load(urlOrObject: "https://acmedns.googleapis.com/$discovery/rest?version=v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "acmedns", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "acmedns", version: "v1", callback: () => any): void;

    namespace acmedns {
        interface AcmeChallengeSet {
            /** The ACME challenges on the requested domain represented as individual TXT records. */
            record?: AcmeTxtRecord[];
        }
        interface AcmeTxtRecord {
            /** Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT record data entry. */
            digest?: string;
            /**
             * The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a response, this will be in Unicode. The fqdn MUST contain the root_domain field on the
             * request.
             */
            fqdn?: string;
            /** Output only. The time when this record was last updated. This will be in UTC time. */
            updateTime?: string;
        }
        interface RotateChallengesRequest {
            /** Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain. */
            accessToken?: string;
            /** Keep records older than 30 days that were used for previous requests. */
            keepExpiredRecords?: boolean;
            /** ACME TXT record challenges to add. Supports multiple challenges on the same FQDN. */
            recordsToAdd?: AcmeTxtRecord[];
            /** ACME TXT record challenges to remove. */
            recordsToRemove?: AcmeTxtRecord[];
        }
        interface AcmeChallengeSetsResource {
            /** Gets the ACME challenge set for a given domain name. Domain names must be provided in Punycode. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Required. SLD + TLD domain name to list challenges. For example, this would be "google.com" for any FQDN under "google.com". That includes challenges for "subdomain.google.com".
                 * This MAY be Unicode or Punycode.
                 */
                rootDomain: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AcmeChallengeSet>;
            /** Rotate the ACME challenges for a given domain name. By default, removes any challenges that are older than 30 days. Domain names must be provided in Punycode. */
            rotateChallenges(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Required. SLD + TLD domain name to update records for. For example, this would be "google.com" for any FQDN under "google.com". That includes challenges for
                 * "subdomain.google.com". This MAY be Unicode or Punycode.
                 */
                rootDomain: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RotateChallengesRequest;
            }): Request<AcmeChallengeSet>;
            rotateChallenges(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Required. SLD + TLD domain name to update records for. For example, this would be "google.com" for any FQDN under "google.com". That includes challenges for
                 * "subdomain.google.com". This MAY be Unicode or Punycode.
                 */
                rootDomain: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RotateChallengesRequest): Request<AcmeChallengeSet>;
        }

        const acmeChallengeSets: AcmeChallengeSetsResource;
    }
}
