/* This is stub file for gapi.client.cloudiot-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221129

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://cloudiot.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.cloudiot */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** Register and manage devices in the Google Cloud IoT service */
        'https://www.googleapis.com/auth/cloudiot',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Associates the device with the gateway. */
        await gapi.client.cloudiot.projects.locations.registries.bindDeviceToGateway({
            parent: "Test string",
        }, {
            deviceId: "Test string",
            gatewayId: "Test string",
        });
        /** Creates a device registry that contains devices. */
        await gapi.client.cloudiot.projects.locations.registries.create({
            parent: "Test string",
        }, {
            credentials: [
                {
                    publicKeyCertificate: {
                        certificate: "Test string",
                        format: "Test string",
                        x509Details: {
                            expiryTime: "Test string",
                            issuer: "Test string",
                            publicKeyType: "Test string",
                            signatureAlgorithm: "Test string",
                            startTime: "Test string",
                            subject: "Test string",
                        },
                    },
                }
            ],
            eventNotificationConfigs: [
                {
                    pubsubTopicName: "Test string",
                    subfolderMatches: "Test string",
                }
            ],
            httpConfig: {
                httpEnabledState: "Test string",
            },
            id: "Test string",
            logLevel: "Test string",
            mqttConfig: {
                mqttEnabledState: "Test string",
            },
            name: "Test string",
            stateNotificationConfig: {
                pubsubTopicName: "Test string",
            },
        });
        /** Deletes a device registry configuration. */
        await gapi.client.cloudiot.projects.locations.registries.delete({
            name: "Test string",
        });
        /** Gets a device registry configuration. */
        await gapi.client.cloudiot.projects.locations.registries.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.cloudiot.projects.locations.registries.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists device registries. */
        await gapi.client.cloudiot.projects.locations.registries.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a device registry configuration. */
        await gapi.client.cloudiot.projects.locations.registries.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            credentials: [
                {
                    publicKeyCertificate: {
                        certificate: "Test string",
                        format: "Test string",
                        x509Details: {
                            expiryTime: "Test string",
                            issuer: "Test string",
                            publicKeyType: "Test string",
                            signatureAlgorithm: "Test string",
                            startTime: "Test string",
                            subject: "Test string",
                        },
                    },
                }
            ],
            eventNotificationConfigs: [
                {
                    pubsubTopicName: "Test string",
                    subfolderMatches: "Test string",
                }
            ],
            httpConfig: {
                httpEnabledState: "Test string",
            },
            id: "Test string",
            logLevel: "Test string",
            mqttConfig: {
                mqttEnabledState: "Test string",
            },
            name: "Test string",
            stateNotificationConfig: {
                pubsubTopicName: "Test string",
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. */
        await gapi.client.cloudiot.projects.locations.registries.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error. */
        await gapi.client.cloudiot.projects.locations.registries.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Deletes the association between the device and the gateway. */
        await gapi.client.cloudiot.projects.locations.registries.unbindDeviceFromGateway({
            parent: "Test string",
        }, {
            deviceId: "Test string",
            gatewayId: "Test string",
        });
        /** Creates a device in a device registry. */
        await gapi.client.cloudiot.projects.locations.registries.devices.create({
            parent: "Test string",
        }, {
            blocked: true,
            config: {
                binaryData: "Test string",
                cloudUpdateTime: "Test string",
                deviceAckTime: "Test string",
                version: "Test string",
            },
            credentials: [
                {
                    expirationTime: "Test string",
                    publicKey: {
                        format: "Test string",
                        key: "Test string",
                    },
                }
            ],
            gatewayConfig: {
                gatewayAuthMethod: "Test string",
                gatewayType: "Test string",
                lastAccessedGatewayId: "Test string",
                lastAccessedGatewayTime: "Test string",
            },
            id: "Test string",
            lastConfigAckTime: "Test string",
            lastConfigSendTime: "Test string",
            lastErrorStatus: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            lastErrorTime: "Test string",
            lastEventTime: "Test string",
            lastHeartbeatTime: "Test string",
            lastStateTime: "Test string",
            logLevel: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            numId: "Test string",
            state: {
                binaryData: "Test string",
                updateTime: "Test string",
            },
        });
        /** Deletes a device. */
        await gapi.client.cloudiot.projects.locations.registries.devices.delete({
            name: "Test string",
        });
        /** Gets details about a device. */
        await gapi.client.cloudiot.projects.locations.registries.devices.get({
            fieldMask: "Test string",
            name: "Test string",
        });
        /** List devices in a device registry. */
        await gapi.client.cloudiot.projects.locations.registries.devices.list({
            deviceIds: "Test string",
            deviceNumIds: "Test string",
            fieldMask: "Test string",
            "gatewayListOptions.associationsDeviceId": "Test string",
            "gatewayListOptions.associationsGatewayId": "Test string",
            "gatewayListOptions.gatewayType": "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Modifies the configuration for the device, which is eventually sent from the Cloud IoT Core servers. Returns the modified configuration version and its metadata. */
        await gapi.client.cloudiot.projects.locations.registries.devices.modifyCloudToDeviceConfig({
            name: "Test string",
        }, {
            binaryData: "Test string",
            versionToUpdate: "Test string",
        });
        /** Updates a device. */
        await gapi.client.cloudiot.projects.locations.registries.devices.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            blocked: true,
            config: {
                binaryData: "Test string",
                cloudUpdateTime: "Test string",
                deviceAckTime: "Test string",
                version: "Test string",
            },
            credentials: [
                {
                    expirationTime: "Test string",
                    publicKey: {
                        format: "Test string",
                        key: "Test string",
                    },
                }
            ],
            gatewayConfig: {
                gatewayAuthMethod: "Test string",
                gatewayType: "Test string",
                lastAccessedGatewayId: "Test string",
                lastAccessedGatewayTime: "Test string",
            },
            id: "Test string",
            lastConfigAckTime: "Test string",
            lastConfigSendTime: "Test string",
            lastErrorStatus: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            lastErrorTime: "Test string",
            lastEventTime: "Test string",
            lastHeartbeatTime: "Test string",
            lastStateTime: "Test string",
            logLevel: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            numId: "Test string",
            state: {
                binaryData: "Test string",
                updateTime: "Test string",
            },
        });
        /**
         * Sends a command to the specified device. In order for a device to be able to receive commands, it must: 1) be connected to Cloud IoT Core using the MQTT protocol, and 2) be subscribed
         * to the group of MQTT topics specified by /devices/{device-id}/commands/#. This subscription will receive commands at the top-level topic /devices/{device-id}/commands as well as
         * commands for subfolders, like /devices/{device-id}/commands/subfolder. Note that subscribing to specific subfolders is not supported. If the command could not be delivered to the
         * device, this method will return an error; in particular, if the device is not subscribed, this method will return FAILED_PRECONDITION. Otherwise, this method will return OK. If the
         * subscription is QoS 1, at least once delivery will be guaranteed; for QoS 0, no acknowledgment will be expected from the device.
         */
        await gapi.client.cloudiot.projects.locations.registries.devices.sendCommandToDevice({
            name: "Test string",
        }, {
            binaryData: "Test string",
            subfolder: "Test string",
        });
        /** Lists the last few versions of the device configuration in descending order (i.e.: newest first). */
        await gapi.client.cloudiot.projects.locations.registries.devices.configVersions.list({
            name: "Test string",
            numVersions: 42,
        });
        /** Lists the last few versions of the device state in descending order (i.e.: newest first). */
        await gapi.client.cloudiot.projects.locations.registries.devices.states.list({
            name: "Test string",
            numStates: 42,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.cloudiot.projects.locations.registries.groups.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. */
        await gapi.client.cloudiot.projects.locations.registries.groups.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error. */
        await gapi.client.cloudiot.projects.locations.registries.groups.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** List devices in a device registry. */
        await gapi.client.cloudiot.projects.locations.registries.groups.devices.list({
            deviceIds: "Test string",
            deviceNumIds: "Test string",
            fieldMask: "Test string",
            "gatewayListOptions.associationsDeviceId": "Test string",
            "gatewayListOptions.associationsGatewayId": "Test string",
            "gatewayListOptions.gatewayType": "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
    }
});
