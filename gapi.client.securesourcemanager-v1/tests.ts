/* This is stub file for gapi.client.securesourcemanager-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 0

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://securesourcemanager.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.securesourcemanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.securesourcemanager.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.securesourcemanager.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new instance in a given project and location. */
    await gapi.client.securesourcemanager.projects.locations.instances.create(
      {
        instanceId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        hostConfig: {
          api: 'Test string',
          gitHttp: 'Test string',
          gitSsh: 'Test string',
          html: 'Test string',
        },
        kmsKey: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        privateConfig: {
          caPool: 'Test string',
          httpServiceAttachment: 'Test string',
          isPrivate: true,
          pscAllowedProjects: ['Test string'],
          sshServiceAttachment: 'Test string',
        },
        state: 'Test string',
        stateNote: 'Test string',
        updateTime: 'Test string',
        workforceIdentityFederationConfig: {
          enabled: true,
        },
      },
    );
    /** Deletes a single instance. */
    await gapi.client.securesourcemanager.projects.locations.instances.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single instance. */
    await gapi.client.securesourcemanager.projects.locations.instances.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.securesourcemanager.projects.locations.instances.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists Instances in a given project and location. */
    await gapi.client.securesourcemanager.projects.locations.instances.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.securesourcemanager.projects.locations.instances.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.securesourcemanager.projects.locations.instances.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.securesourcemanager.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.securesourcemanager.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.securesourcemanager.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.securesourcemanager.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      returnPartialSuccess: true,
    });
    /** Creates a new repository in a given project and location. The Repository.Instance field is required in the request body for requests using the securesourcemanager.googleapis.com endpoint. */
    await gapi.client.securesourcemanager.projects.locations.repositories.create(
      {
        parent: 'Test string',
        repositoryId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        initialConfig: {
          defaultBranch: 'Test string',
          gitignores: ['Test string'],
          license: 'Test string',
          readme: 'Test string',
        },
        instance: 'Test string',
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        uris: {
          api: 'Test string',
          gitHttps: 'Test string',
          html: 'Test string',
        },
      },
    );
    /** Deletes a Repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.delete(
      {
        allowMissing: true,
        name: 'Test string',
      },
    );
    /** Fetches a blob from a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.fetchBlob(
      {
        repository: 'Test string',
        sha: 'Test string',
      },
    );
    /** Fetches a tree from a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.fetchTree(
      {
        pageSize: 42,
        pageToken: 'Test string',
        recursive: true,
        ref: 'Test string',
        repository: 'Test string',
      },
    );
    /** Gets metadata of a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.get({
      name: 'Test string',
    });
    /** Get IAM policy for a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists Repositories in a given project and location. The instance field is required in the query parameter for requests using the securesourcemanager.googleapis.com endpoint. */
    await gapi.client.securesourcemanager.projects.locations.repositories.list({
      filter: 'Test string',
      instance: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the metadata of a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        initialConfig: {
          defaultBranch: 'Test string',
          gitignores: ['Test string'],
          license: 'Test string',
          readme: 'Test string',
        },
        instance: 'Test string',
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        uris: {
          api: 'Test string',
          gitHttps: 'Test string',
          html: 'Test string',
        },
      },
    );
    /** Set IAM policy on a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Test IAM permissions on a repository. IAM permission checks are not required on this method. */
    await gapi.client.securesourcemanager.projects.locations.repositories.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** CreateBranchRule creates a branch rule in a given repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.branchRules.create(
      {
        branchRuleId: 'Test string',
        parent: 'Test string',
      },
      {
        allowStaleReviews: true,
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        disabled: true,
        etag: 'Test string',
        includePattern: 'Test string',
        minimumApprovalsCount: 42,
        minimumReviewsCount: 42,
        name: 'Test string',
        requireCommentsResolved: true,
        requiredStatusChecks: [
          {
            context: 'Test string',
          },
        ],
        requireLinearHistory: true,
        requirePullRequest: true,
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** DeleteBranchRule deletes a branch rule. */
    await gapi.client.securesourcemanager.projects.locations.repositories.branchRules.delete(
      {
        allowMissing: true,
        name: 'Test string',
      },
    );
    /** GetBranchRule gets a branch rule. */
    await gapi.client.securesourcemanager.projects.locations.repositories.branchRules.get(
      {
        name: 'Test string',
      },
    );
    /** ListBranchRules lists branch rules in a given repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.branchRules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** UpdateBranchRule updates a branch rule. */
    await gapi.client.securesourcemanager.projects.locations.repositories.branchRules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        allowStaleReviews: true,
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        disabled: true,
        etag: 'Test string',
        includePattern: 'Test string',
        minimumApprovalsCount: 42,
        minimumReviewsCount: 42,
        name: 'Test string',
        requireCommentsResolved: true,
        requiredStatusChecks: [
          {
            context: 'Test string',
          },
        ],
        requireLinearHistory: true,
        requirePullRequest: true,
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a new hook in a given repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.hooks.create(
      {
        hookId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        disabled: true,
        events: ['Test string'],
        name: 'Test string',
        pushOption: {
          branchFilter: 'Test string',
        },
        sensitiveQueryString: 'Test string',
        targetUri: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a Hook. */
    await gapi.client.securesourcemanager.projects.locations.repositories.hooks.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets metadata of a hook. */
    await gapi.client.securesourcemanager.projects.locations.repositories.hooks.get(
      {
        name: 'Test string',
      },
    );
    /** Lists hooks in a given repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.hooks.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the metadata of a hook. */
    await gapi.client.securesourcemanager.projects.locations.repositories.hooks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        disabled: true,
        events: ['Test string'],
        name: 'Test string',
        pushOption: {
          branchFilter: 'Test string',
        },
        sensitiveQueryString: 'Test string',
        targetUri: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Closes an issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.close(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      },
    );
    /** Creates an issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.create(
      {
        parent: 'Test string',
      },
      {
        body: 'Test string',
        closeTime: 'Test string',
        createTime: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        state: 'Test string',
        title: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.delete(
      {
        etag: 'Test string',
        name: 'Test string',
      },
    );
    /** Gets an issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.get(
      {
        name: 'Test string',
      },
    );
    /** Lists issues in a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Opens an issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.open(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      },
    );
    /** Updates a issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        body: 'Test string',
        closeTime: 'Test string',
        createTime: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        state: 'Test string',
        title: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates an issue comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.issueComments.create(
      {
        parent: 'Test string',
      },
      {
        body: 'Test string',
        createTime: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an issue comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.issueComments.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets an issue comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.issueComments.get(
      {
        name: 'Test string',
      },
    );
    /** Lists comments in an issue. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.issueComments.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates an issue comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.issues.issueComments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        body: 'Test string',
        createTime: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Closes a pull request without merging. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.close(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a pull request. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.create(
      {
        parent: 'Test string',
      },
      {
        base: {
          ref: 'Test string',
          sha: 'Test string',
        },
        body: 'Test string',
        closeTime: 'Test string',
        createTime: 'Test string',
        head: {
          ref: 'Test string',
          sha: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        title: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets a pull request. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.get(
      {
        name: 'Test string',
      },
    );
    /** Lists pull requests in a repository. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Lists a pull request's file diffs. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.listFileDiffs(
      {
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Merges a pull request. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.merge(
      {
        name: 'Test string',
      },
      {},
    );
    /** Opens a pull request. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.open(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a pull request. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        base: {
          ref: 'Test string',
          sha: 'Test string',
        },
        body: 'Test string',
        closeTime: 'Test string',
        createTime: 'Test string',
        head: {
          ref: 'Test string',
          sha: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        title: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Batch creates pull request comments. This function is used to create multiple PullRequestComments for code review. There needs to be exactly one PullRequestComment of type Review, and at most 100 PullRequestComments of type Code per request. The Position of the code comments must be unique within the request. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            pullRequestComment: {
              code: {
                body: 'Test string',
                effectiveCommitSha: 'Test string',
                effectiveRootComment: 'Test string',
                position: {
                  line: 'Test string',
                  path: 'Test string',
                },
                reply: 'Test string',
                resolved: true,
              },
              comment: {
                body: 'Test string',
              },
              createTime: 'Test string',
              name: 'Test string',
              review: {
                actionType: 'Test string',
                body: 'Test string',
                effectiveCommitSha: 'Test string',
              },
              updateTime: 'Test string',
            },
          },
        ],
      },
    );
    /** Creates a pull request comment. This function is used to create a single PullRequestComment of type Comment, or a single PullRequestComment of type Code that's replying to another PullRequestComment of type Code. Use BatchCreatePullRequestComments to create multiple PullRequestComments for code reviews. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.create(
      {
        parent: 'Test string',
      },
      {
        code: {
          body: 'Test string',
          effectiveCommitSha: 'Test string',
          effectiveRootComment: 'Test string',
          position: {
            line: 'Test string',
            path: 'Test string',
          },
          reply: 'Test string',
          resolved: true,
        },
        comment: {
          body: 'Test string',
        },
        createTime: 'Test string',
        name: 'Test string',
        review: {
          actionType: 'Test string',
          body: 'Test string',
          effectiveCommitSha: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Deletes a pull request comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a pull request comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.get(
      {
        name: 'Test string',
      },
    );
    /** Lists pull request comments. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a pull request comment. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        code: {
          body: 'Test string',
          effectiveCommitSha: 'Test string',
          effectiveRootComment: 'Test string',
          position: {
            line: 'Test string',
            path: 'Test string',
          },
          reply: 'Test string',
          resolved: true,
        },
        comment: {
          body: 'Test string',
        },
        createTime: 'Test string',
        name: 'Test string',
        review: {
          actionType: 'Test string',
          body: 'Test string',
          effectiveCommitSha: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Resolves pull request comments. A list of PullRequestComment names must be provided. The PullRequestComment names must be in the same conversation thread. If auto_fill is set, all comments in the conversation thread will be resolved. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.resolve(
      {
        parent: 'Test string',
      },
      {
        autoFill: true,
        names: ['Test string'],
      },
    );
    /** Unresolves pull request comments. A list of PullRequestComment names must be provided. The PullRequestComment names must be in the same conversation thread. If auto_fill is set, all comments in the conversation thread will be unresolved. */
    await gapi.client.securesourcemanager.projects.locations.repositories.pullRequests.pullRequestComments.unresolve(
      {
        parent: 'Test string',
      },
      {
        autoFill: true,
        names: ['Test string'],
      },
    );
  }
});
