/* This is stub file for gapi.client.merchantapi-reviews_v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241020

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://merchantapi.googleapis.com/$discovery/rest?version=reviews_v1beta'
  );
  /** now we can use gapi.client.merchantapi */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Deletes merchant review. */
    await gapi.client.merchantapi.accounts.merchantReviews.delete({
      name: 'Test string',
    });
    /** Gets a merchant review. */
    await gapi.client.merchantapi.accounts.merchantReviews.get({
      name: 'Test string',
    });
    /** Inserts a review for your Merchant Center account. If the review already exists, then the review is replaced with the new instance. */
    await gapi.client.merchantapi.accounts.merchantReviews.insert(
      {
        dataSource: 'Test string',
        parent: 'Test string',
      },
      {
        attributes: {
          collectionMethod: 'Test string',
          content: 'Test string',
          isAnonymous: true,
          maxRating: 'Test string',
          merchantDisplayName: 'Test string',
          merchantId: 'Test string',
          merchantLink: 'Test string',
          merchantRatingLink: 'Test string',
          minRating: 'Test string',
          rating: 42,
          reviewCountry: 'Test string',
          reviewerId: 'Test string',
          reviewerUsername: 'Test string',
          reviewLanguage: 'Test string',
          reviewTime: 'Test string',
          title: 'Test string',
        },
        customAttributes: [
          {
            groupValues: undefined,
            name: 'Test string',
            value: 'Test string',
          },
        ],
        dataSource: 'Test string',
        merchantReviewId: 'Test string',
        merchantReviewStatus: {
          createTime: 'Test string',
          destinationStatuses: [
            {
              reportingContext: 'Test string',
            },
          ],
          itemLevelIssues: [
            {
              attribute: 'Test string',
              code: 'Test string',
              description: 'Test string',
              detail: 'Test string',
              documentation: 'Test string',
              reportingContext: 'Test string',
              resolution: 'Test string',
              severity: 'Test string',
            },
          ],
          lastUpdateTime: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Lists merchant reviews. */
    await gapi.client.merchantapi.accounts.merchantReviews.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes a product review. */
    await gapi.client.merchantapi.accounts.productReviews.delete({
      name: 'Test string',
    });
    /** Gets a product review. */
    await gapi.client.merchantapi.accounts.productReviews.get({
      name: 'Test string',
    });
    /** Inserts a product review. */
    await gapi.client.merchantapi.accounts.productReviews.insert(
      {
        dataSource: 'Test string',
        parent: 'Test string',
      },
      {
        attributes: {
          aggregatorName: 'Test string',
          asins: ['Test string'],
          brands: ['Test string'],
          collectionMethod: 'Test string',
          cons: ['Test string'],
          content: 'Test string',
          gtins: ['Test string'],
          isSpam: true,
          maxRating: 'Test string',
          minRating: 'Test string',
          mpns: ['Test string'],
          productLinks: ['Test string'],
          productNames: ['Test string'],
          pros: ['Test string'],
          publisherFavicon: 'Test string',
          publisherName: 'Test string',
          rating: 42,
          reviewCountry: 'Test string',
          reviewerId: 'Test string',
          reviewerImageLinks: ['Test string'],
          reviewerIsAnonymous: true,
          reviewerUsername: 'Test string',
          reviewLanguage: 'Test string',
          reviewLink: {
            link: 'Test string',
            type: 'Test string',
          },
          reviewTime: 'Test string',
          skus: ['Test string'],
          subclientName: 'Test string',
          title: 'Test string',
          transactionId: 'Test string',
        },
        customAttributes: [
          {
            groupValues: undefined,
            name: 'Test string',
            value: 'Test string',
          },
        ],
        dataSource: 'Test string',
        name: 'Test string',
        productReviewId: 'Test string',
        productReviewStatus: {
          createTime: 'Test string',
          destinationStatuses: [
            {
              reportingContext: 'Test string',
            },
          ],
          itemLevelIssues: [
            {
              attribute: 'Test string',
              code: 'Test string',
              description: 'Test string',
              detail: 'Test string',
              documentation: 'Test string',
              reportingContext: 'Test string',
              resolution: 'Test string',
              severity: 'Test string',
            },
          ],
          lastUpdateTime: 'Test string',
        },
      }
    );
    /** Lists product reviews. */
    await gapi.client.merchantapi.accounts.productReviews.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
