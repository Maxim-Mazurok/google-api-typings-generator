/* This is stub file for gapi.client.appengine definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('appengine', 'v1', () => {
        /** now we can use gapi.client.appengine */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your applications deployed on Google App Engine */
            'https://www.googleapis.com/auth/appengine.admin',
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region
         * (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects,
         * Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/).
         */
        await gapi.client.appengine.apps.create({
        }, {
            authDomain: "Test string",
            codeBucket: "Test string",
            databaseType: "Test string",
            defaultBucket: "Test string",
            defaultCookieExpiration: "Test string",
            defaultHostname: "Test string",
            dispatchRules: [
                {
                    domain: "Test string",
                    path: "Test string",
                    service: "Test string",
                }            ],
            featureSettings: {
                splitHealthChecks: true,
                useContainerOptimizedOs: true,
            },
            gcrDomain: "Test string",
            iap: {
                enabled: true,
                oauth2ClientId: "Test string",
                oauth2ClientSecret: "Test string",
                oauth2ClientSecretSha256: "Test string",
            },
            id: "Test string",
            locationId: "Test string",
            name: "Test string",
            servingStatus: "Test string",
        });
        /** Uploads the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.create({
            appsId: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Deletes the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.delete({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
        });
        /** Gets the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.get({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            view: "Test string",
        });
        /** Lists all SSL certificates the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedCertificates.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /**
         * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be
         * applicable to the same domains as the original certificate. The certificate display_name may also be updated.
         */
        await gapi.client.appengine.apps.authorizedCertificates.patch({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            updateMask: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Lists all domains the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedDomains.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see
         * AuthorizedDomains.ListAuthorizedDomains.
         */
        await gapi.client.appengine.apps.domainMappings.create({
            appsId: "Test string",
            overrideStrategy: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource. */
        await gapi.client.appengine.apps.domainMappings.delete({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Gets the specified domain mapping. */
        await gapi.client.appengine.apps.domainMappings.get({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Lists the domain mappings on an application. */
        await gapi.client.appengine.apps.domainMappings.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to
         * administer the associated domain in order to update a DomainMapping resource.
         */
        await gapi.client.appengine.apps.domainMappings.patch({
            appsId: "Test string",
            domainMappingsId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Gets information about a location. */
        await gapi.client.appengine.apps.locations.get({
            appsId: "Test string",
            locationsId: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.appengine.apps.locations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.appengine.apps.operations.get({
            appsId: "Test string",
            operationsId: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to
         * override the binding to use different resource name schemes, such as users/âˆ—/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations"
         * to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent
         * resource, without the operations collection id.
         */
        await gapi.client.appengine.apps.operations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deletes the specified service and all enclosed versions. */
        await gapi.client.appengine.apps.services.delete({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the current configuration of the specified service. */
        await gapi.client.appengine.apps.services.get({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists all the services in the application. */
        await gapi.client.appengine.apps.services.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Updates the configuration of the specified service. */
        await gapi.client.appengine.apps.services.patch({
            appsId: "Test string",
            migrateTraffic: true,
            servicesId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            split: {
                allocations: {
                    A: 42                },
                shardBy: "Test string",
            },
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets information about an application. */
        await gapi.client.appengine.apps.get({
            appsId: "Test string",
        });
        /** Uploads the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.create({
            appsId: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Deletes the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.delete({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
        });
        /** Gets the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.get({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            view: "Test string",
        });
        /** Lists all SSL certificates the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedCertificates.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /**
         * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be
         * applicable to the same domains as the original certificate. The certificate display_name may also be updated.
         */
        await gapi.client.appengine.apps.authorizedCertificates.patch({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            updateMask: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Lists all domains the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedDomains.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see
         * AuthorizedDomains.ListAuthorizedDomains.
         */
        await gapi.client.appengine.apps.domainMappings.create({
            appsId: "Test string",
            overrideStrategy: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource. */
        await gapi.client.appengine.apps.domainMappings.delete({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Gets the specified domain mapping. */
        await gapi.client.appengine.apps.domainMappings.get({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Lists the domain mappings on an application. */
        await gapi.client.appengine.apps.domainMappings.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to
         * administer the associated domain in order to update a DomainMapping resource.
         */
        await gapi.client.appengine.apps.domainMappings.patch({
            appsId: "Test string",
            domainMappingsId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Gets information about a location. */
        await gapi.client.appengine.apps.locations.get({
            appsId: "Test string",
            locationsId: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.appengine.apps.locations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.appengine.apps.operations.get({
            appsId: "Test string",
            operationsId: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to
         * override the binding to use different resource name schemes, such as users/âˆ—/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations"
         * to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent
         * resource, without the operations collection id.
         */
        await gapi.client.appengine.apps.operations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deletes the specified service and all enclosed versions. */
        await gapi.client.appengine.apps.services.delete({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the current configuration of the specified service. */
        await gapi.client.appengine.apps.services.get({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists all the services in the application. */
        await gapi.client.appengine.apps.services.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Updates the configuration of the specified service. */
        await gapi.client.appengine.apps.services.patch({
            appsId: "Test string",
            migrateTraffic: true,
            servicesId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            split: {
                allocations: {
                    A: 42                },
                shardBy: "Test string",
            },
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application.
         * default_cookie_expiration - Cookie expiration policy for the application.
         */
        await gapi.client.appengine.apps.patch({
            appsId: "Test string",
            updateMask: "Test string",
        }, {
            authDomain: "Test string",
            codeBucket: "Test string",
            databaseType: "Test string",
            defaultBucket: "Test string",
            defaultCookieExpiration: "Test string",
            defaultHostname: "Test string",
            dispatchRules: [
                {
                    domain: "Test string",
                    path: "Test string",
                    service: "Test string",
                }            ],
            featureSettings: {
                splitHealthChecks: true,
                useContainerOptimizedOs: true,
            },
            gcrDomain: "Test string",
            iap: {
                enabled: true,
                oauth2ClientId: "Test string",
                oauth2ClientSecret: "Test string",
                oauth2ClientSecretSha256: "Test string",
            },
            id: "Test string",
            locationId: "Test string",
            name: "Test string",
            servingStatus: "Test string",
        });
        /** Uploads the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.create({
            appsId: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Deletes the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.delete({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
        });
        /** Gets the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.get({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            view: "Test string",
        });
        /** Lists all SSL certificates the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedCertificates.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /**
         * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be
         * applicable to the same domains as the original certificate. The certificate display_name may also be updated.
         */
        await gapi.client.appengine.apps.authorizedCertificates.patch({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            updateMask: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Lists all domains the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedDomains.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see
         * AuthorizedDomains.ListAuthorizedDomains.
         */
        await gapi.client.appengine.apps.domainMappings.create({
            appsId: "Test string",
            overrideStrategy: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource. */
        await gapi.client.appengine.apps.domainMappings.delete({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Gets the specified domain mapping. */
        await gapi.client.appengine.apps.domainMappings.get({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Lists the domain mappings on an application. */
        await gapi.client.appengine.apps.domainMappings.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to
         * administer the associated domain in order to update a DomainMapping resource.
         */
        await gapi.client.appengine.apps.domainMappings.patch({
            appsId: "Test string",
            domainMappingsId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Gets information about a location. */
        await gapi.client.appengine.apps.locations.get({
            appsId: "Test string",
            locationsId: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.appengine.apps.locations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.appengine.apps.operations.get({
            appsId: "Test string",
            operationsId: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to
         * override the binding to use different resource name schemes, such as users/âˆ—/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations"
         * to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent
         * resource, without the operations collection id.
         */
        await gapi.client.appengine.apps.operations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deletes the specified service and all enclosed versions. */
        await gapi.client.appengine.apps.services.delete({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the current configuration of the specified service. */
        await gapi.client.appengine.apps.services.get({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists all the services in the application. */
        await gapi.client.appengine.apps.services.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Updates the configuration of the specified service. */
        await gapi.client.appengine.apps.services.patch({
            appsId: "Test string",
            migrateTraffic: true,
            servicesId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            split: {
                allocations: {
                    A: 42                },
                shardBy: "Test string",
            },
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an
         * error message about a missing feature, for example, Error retrieving the App Engine service account. If you have deleted your App Engine service account, this will not be able to
         * recreate it. Instead, you should attempt to use the IAM undelete API if possible at
         * https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B"name"%3A"projects%2F-%2FserviceAccounts%2Funique_id"%2C"resource"%3A%7B%7D%7D . If the
         * deletion was recent, the numeric ID can be found in the Cloud Console Activity Log.
         */
        await gapi.client.appengine.apps.repair({
            appsId: "Test string",
        }, {
        });
        /** Uploads the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.create({
            appsId: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Deletes the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.delete({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
        });
        /** Gets the specified SSL certificate. */
        await gapi.client.appengine.apps.authorizedCertificates.get({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            view: "Test string",
        });
        /** Lists all SSL certificates the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedCertificates.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /**
         * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be
         * applicable to the same domains as the original certificate. The certificate display_name may also be updated.
         */
        await gapi.client.appengine.apps.authorizedCertificates.patch({
            appsId: "Test string",
            authorizedCertificatesId: "Test string",
            updateMask: "Test string",
        }, {
            certificateRawData: {
                privateKey: "Test string",
                publicCertificate: "Test string",
            },
            displayName: "Test string",
            domainMappingsCount: 42,
            domainNames: [
                "Test string"            ],
            expireTime: "Test string",
            id: "Test string",
            managedCertificate: {
                lastRenewalTime: "Test string",
                status: "Test string",
            },
            name: "Test string",
            visibleDomainMappings: [
                "Test string"            ],
        });
        /** Lists all domains the user is authorized to administer. */
        await gapi.client.appengine.apps.authorizedDomains.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see
         * AuthorizedDomains.ListAuthorizedDomains.
         */
        await gapi.client.appengine.apps.domainMappings.create({
            appsId: "Test string",
            overrideStrategy: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource. */
        await gapi.client.appengine.apps.domainMappings.delete({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Gets the specified domain mapping. */
        await gapi.client.appengine.apps.domainMappings.get({
            appsId: "Test string",
            domainMappingsId: "Test string",
        });
        /** Lists the domain mappings on an application. */
        await gapi.client.appengine.apps.domainMappings.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to
         * administer the associated domain in order to update a DomainMapping resource.
         */
        await gapi.client.appengine.apps.domainMappings.patch({
            appsId: "Test string",
            domainMappingsId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            resourceRecords: [
                {
                    name: "Test string",
                    rrdata: "Test string",
                    type: "Test string",
                }            ],
            sslSettings: {
                certificateId: "Test string",
                pendingManagedCertificateId: "Test string",
                sslManagementType: "Test string",
            },
        });
        /** Gets information about a location. */
        await gapi.client.appengine.apps.locations.get({
            appsId: "Test string",
            locationsId: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.appengine.apps.locations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.appengine.apps.operations.get({
            appsId: "Test string",
            operationsId: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to
         * override the binding to use different resource name schemes, such as users/âˆ—/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations"
         * to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent
         * resource, without the operations collection id.
         */
        await gapi.client.appengine.apps.operations.list({
            appsId: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deletes the specified service and all enclosed versions. */
        await gapi.client.appengine.apps.services.delete({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the current configuration of the specified service. */
        await gapi.client.appengine.apps.services.get({
            appsId: "Test string",
            servicesId: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists all the services in the application. */
        await gapi.client.appengine.apps.services.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Updates the configuration of the specified service. */
        await gapi.client.appengine.apps.services.patch({
            appsId: "Test string",
            migrateTraffic: true,
            servicesId: "Test string",
            updateMask: "Test string",
        }, {
            id: "Test string",
            name: "Test string",
            split: {
                allocations: {
                    A: 42                },
                shardBy: "Test string",
            },
        });
        /** Deploys code and resource files to a new version. */
        await gapi.client.appengine.apps.services.versions.create({
            appsId: "Test string",
            servicesId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Deletes an existing Version resource. */
        await gapi.client.appengine.apps.services.versions.delete({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource. */
        await gapi.client.appengine.apps.services.versions.get({
            appsId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Lists the versions of a service. */
        await gapi.client.appengine.apps.services.versions.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            view: "Test string",
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard
         * environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard
         * environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_cpu_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)
         * automaticScaling.standard_scheduler_settings.target_throughput_utilization
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment:
         * serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)Flexible environment serving_status
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment:
         * automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)
         * automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling)manual
         * scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#manualscaling)
         */
        await gapi.client.appengine.apps.services.versions.patch({
            appsId: "Test string",
            servicesId: "Test string",
            updateMask: "Test string",
            versionsId: "Test string",
        }, {
            apiConfig: {
                authFailAction: "Test string",
                login: "Test string",
                script: "Test string",
                securityLevel: "Test string",
                url: "Test string",
            },
            automaticScaling: {
                coolDownPeriod: "Test string",
                cpuUtilization: {
                    aggregationWindowLength: "Test string",
                    targetUtilization: 42,
                },
                diskUtilization: {
                    targetReadBytesPerSecond: 42,
                    targetReadOpsPerSecond: 42,
                    targetWriteBytesPerSecond: 42,
                    targetWriteOpsPerSecond: 42,
                },
                maxConcurrentRequests: 42,
                maxIdleInstances: 42,
                maxPendingLatency: "Test string",
                maxTotalInstances: 42,
                minIdleInstances: 42,
                minPendingLatency: "Test string",
                minTotalInstances: 42,
                networkUtilization: {
                    targetReceivedBytesPerSecond: 42,
                    targetReceivedPacketsPerSecond: 42,
                    targetSentBytesPerSecond: 42,
                    targetSentPacketsPerSecond: 42,
                },
                requestUtilization: {
                    targetConcurrentRequests: 42,
                    targetRequestCountPerSecond: 42,
                },
                standardSchedulerSettings: {
                    maxInstances: 42,
                    minInstances: 42,
                    targetCpuUtilization: 42,
                    targetThroughputUtilization: 42,
                },
            },
            basicScaling: {
                idleTimeout: "Test string",
                maxInstances: 42,
            },
            betaSettings: {
                A: "Test string"            },
            buildEnvVariables: {
                A: "Test string"            },
            createdBy: "Test string",
            createTime: "Test string",
            defaultExpiration: "Test string",
            deployment: {
                cloudBuildOptions: {
                    appYamlPath: "Test string",
                    cloudBuildTimeout: "Test string",
                },
                container: {
                    image: "Test string",
                },
                files: {
                    A: {
                        mimeType: "Test string",
                        sha1Sum: "Test string",
                        sourceUrl: "Test string",
                    }                },
                zip: {
                    filesCount: 42,
                    sourceUrl: "Test string",
                },
            },
            diskUsageBytes: "Test string",
            endpointsApiService: {
                configId: "Test string",
                disableTraceSampling: true,
                name: "Test string",
                rolloutStrategy: "Test string",
            },
            entrypoint: {
                shell: "Test string",
            },
            env: "Test string",
            envVariables: {
                A: "Test string"            },
            errorHandlers: [
                {
                    errorCode: "Test string",
                    mimeType: "Test string",
                    staticFile: "Test string",
                }            ],
            handlers: [
                {
                    apiEndpoint: {
                        scriptPath: "Test string",
                    },
                    authFailAction: "Test string",
                    login: "Test string",
                    redirectHttpResponseCode: "Test string",
                    script: {
                        scriptPath: "Test string",
                    },
                    securityLevel: "Test string",
                    staticFiles: {
                        applicationReadable: true,
                        expiration: "Test string",
                        httpHeaders: {
                            A: "Test string"                        },
                        mimeType: "Test string",
                        path: "Test string",
                        requireMatchingFile: true,
                        uploadPathRegex: "Test string",
                    },
                    urlRegex: "Test string",
                }            ],
            healthCheck: {
                checkInterval: "Test string",
                disableHealthCheck: true,
                healthyThreshold: 42,
                host: "Test string",
                restartThreshold: 42,
                timeout: "Test string",
                unhealthyThreshold: 42,
            },
            id: "Test string",
            inboundServices: [
                "Test string"            ],
            instanceClass: "Test string",
            libraries: [
                {
                    name: "Test string",
                    version: "Test string",
                }            ],
            livenessCheck: {
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                initialDelay: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            manualScaling: {
                instances: 42,
            },
            name: "Test string",
            network: {
                forwardedPorts: [
                    "Test string"                ],
                instanceTag: "Test string",
                name: "Test string",
                sessionAffinity: true,
                subnetworkName: "Test string",
            },
            nobuildFilesRegex: "Test string",
            readinessCheck: {
                appStartTimeout: "Test string",
                checkInterval: "Test string",
                failureThreshold: 42,
                host: "Test string",
                path: "Test string",
                successThreshold: 42,
                timeout: "Test string",
            },
            resources: {
                cpu: 42,
                diskGb: 42,
                kmsKeyReference: "Test string",
                memoryGb: 42,
                volumes: [
                    {
                        name: "Test string",
                        sizeGb: 42,
                        volumeType: "Test string",
                    }                ],
            },
            runtime: "Test string",
            runtimeApiVersion: "Test string",
            runtimeChannel: "Test string",
            runtimeMainExecutablePath: "Test string",
            servingStatus: "Test string",
            threadsafe: true,
            versionUrl: "Test string",
            vm: true,
            vpcAccessConnector: {
                name: "Test string",
            },
            zones: [
                "Test string"            ],
        });
        /**
         * Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to
         * serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable
         * for instances in App Engine flexible environment.
         */
        await gapi.client.appengine.apps.services.versions.instances.debug({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        }, {
            sshKey: "Test string",
        });
        /**
         * Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard
         * environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment
         * (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances
         * within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch
         * (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
         */
        await gapi.client.appengine.apps.services.versions.instances.delete({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /** Gets instance information. */
        await gapi.client.appengine.apps.services.versions.instances.get({
            appsId: "Test string",
            instancesId: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
        /**
         * Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API
         * (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
         */
        await gapi.client.appengine.apps.services.versions.instances.list({
            appsId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            servicesId: "Test string",
            versionsId: "Test string",
        });
    }
});
