/* This is stub file for gapi.client.merchantapi-datasources_v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250925

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://merchantapi.googleapis.com/$discovery/rest?version=datasources_v1beta',
  );
  /** now we can use gapi.client.merchantapi */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates the new data source configuration for the given account. This method always creates a new data source. */
    await gapi.client.merchantapi.accounts.dataSources.create(
      {
        parent: 'Test string',
      },
      {
        dataSourceId: 'Test string',
        displayName: 'Test string',
        fileInput: {
          fetchSettings: {
            dayOfMonth: 42,
            dayOfWeek: 'Test string',
            enabled: true,
            fetchUri: 'Test string',
            frequency: 'Test string',
            password: 'Test string',
            timeOfDay: {
              hours: 42,
              minutes: 42,
              nanos: 42,
              seconds: 42,
            },
            timeZone: 'Test string',
            username: 'Test string',
          },
          fileInputType: 'Test string',
          fileName: 'Test string',
        },
        input: 'Test string',
        localInventoryDataSource: {
          contentLanguage: 'Test string',
          feedLabel: 'Test string',
        },
        merchantReviewDataSource: {},
        name: 'Test string',
        primaryProductDataSource: {
          channel: 'Test string',
          contentLanguage: 'Test string',
          countries: ['Test string'],
          defaultRule: {
            takeFromDataSources: [
              {
                primaryDataSourceName: 'Test string',
                self: true,
                supplementalDataSourceName: 'Test string',
              },
            ],
          },
          destinations: [
            {
              destination: 'Test string',
              state: 'Test string',
            },
          ],
          feedLabel: 'Test string',
        },
        productReviewDataSource: {},
        promotionDataSource: {
          contentLanguage: 'Test string',
          targetCountry: 'Test string',
        },
        regionalInventoryDataSource: {
          contentLanguage: 'Test string',
          feedLabel: 'Test string',
        },
        supplementalProductDataSource: {
          contentLanguage: 'Test string',
          feedLabel: 'Test string',
          referencingPrimaryDataSources: [
            {
              primaryDataSourceName: 'Test string',
              self: true,
              supplementalDataSourceName: 'Test string',
            },
          ],
        },
      },
    );
    /** Deletes a data source from your Merchant Center account. */
    await gapi.client.merchantapi.accounts.dataSources.delete({
      name: 'Test string',
    });
    /** Performs the data fetch immediately (even outside fetch schedule) on a data source from your Merchant Center Account. If you need to call this method more than once per day, you should use the Products service to update your product data instead. This method only works on data sources with a file input set. */
    await gapi.client.merchantapi.accounts.dataSources.fetch(
      {
        name: 'Test string',
      },
      {},
    );
    /** Retrieves the data source configuration for the given account. */
    await gapi.client.merchantapi.accounts.dataSources.get({
      name: 'Test string',
    });
    /** Lists the configurations for data sources for the given account. */
    await gapi.client.merchantapi.accounts.dataSources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the existing data source configuration. The fields that are set in the update mask but not provided in the resource will be deleted. */
    await gapi.client.merchantapi.accounts.dataSources.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        dataSourceId: 'Test string',
        displayName: 'Test string',
        fileInput: {
          fetchSettings: {
            dayOfMonth: 42,
            dayOfWeek: 'Test string',
            enabled: true,
            fetchUri: 'Test string',
            frequency: 'Test string',
            password: 'Test string',
            timeOfDay: {
              hours: 42,
              minutes: 42,
              nanos: 42,
              seconds: 42,
            },
            timeZone: 'Test string',
            username: 'Test string',
          },
          fileInputType: 'Test string',
          fileName: 'Test string',
        },
        input: 'Test string',
        localInventoryDataSource: {
          contentLanguage: 'Test string',
          feedLabel: 'Test string',
        },
        merchantReviewDataSource: {},
        name: 'Test string',
        primaryProductDataSource: {
          channel: 'Test string',
          contentLanguage: 'Test string',
          countries: ['Test string'],
          defaultRule: {
            takeFromDataSources: [
              {
                primaryDataSourceName: 'Test string',
                self: true,
                supplementalDataSourceName: 'Test string',
              },
            ],
          },
          destinations: [
            {
              destination: 'Test string',
              state: 'Test string',
            },
          ],
          feedLabel: 'Test string',
        },
        productReviewDataSource: {},
        promotionDataSource: {
          contentLanguage: 'Test string',
          targetCountry: 'Test string',
        },
        regionalInventoryDataSource: {
          contentLanguage: 'Test string',
          feedLabel: 'Test string',
        },
        supplementalProductDataSource: {
          contentLanguage: 'Test string',
          feedLabel: 'Test string',
          referencingPrimaryDataSources: [
            {
              primaryDataSourceName: 'Test string',
              self: true,
              supplementalDataSourceName: 'Test string',
            },
          ],
        },
      },
    );
    /** Gets the latest data source file upload. Only the `latest` alias is accepted for a file upload. */
    await gapi.client.merchantapi.accounts.dataSources.fileUploads.get({
      name: 'Test string',
    });
  }
});
