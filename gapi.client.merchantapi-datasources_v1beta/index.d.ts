/* Type definitions for non-npm package Merchant API datasources_v1beta 0.0 */
// Project: https://developers.devsite.corp.google.com/merchant/api
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://merchantapi.googleapis.com/$discovery/rest?version=datasources_v1beta
// Revision: 20250409

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Merchant API datasources_v1beta */
  function load(
    urlOrObject: 'https://merchantapi.googleapis.com/$discovery/rest?version=datasources_v1beta',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'merchantapi',
    version: 'datasources_v1beta',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'merchantapi',
    version: 'datasources_v1beta',
    callback: () => any,
  ): void;

  namespace merchantapi {
    interface DataSource {
      /** Output only. The data source id. */
      dataSourceId?: string;
      /** Required. The displayed data source name in the Merchant Center UI. */
      displayName?: string;
      /** Optional. The field is used only when data is managed through a file. */
      fileInput?: FileInput;
      /** Output only. Determines the type of input to the data source. Based on the input some settings might not work. Only generic data sources can be created through the API. */
      input?: string;
      /** The [local inventory](https://support.google.com/merchants/answer/7023001) data source. */
      localInventoryDataSource?: LocalInventoryDataSource;
      /** The [merchant review](https://support.google.com/merchants/answer/7045996) data source. */
      merchantReviewDataSource?: any;
      /** Identifier. The name of the data source. Format: `{datasource.name=accounts/{account}/dataSources/{datasource}}` */
      name?: string;
      /** The [primary data source](https://support.google.com/merchants/answer/7439058) for local and online products. */
      primaryProductDataSource?: PrimaryProductDataSource;
      /** The [product review](https://support.google.com/merchants/answer/7045996) data source. */
      productReviewDataSource?: any;
      /** The [promotion](https://support.google.com/merchants/answer/2906014) data source. */
      promotionDataSource?: PromotionDataSource;
      /** The [regional inventory](https://support.google.com/merchants/answer/7439058) data source. */
      regionalInventoryDataSource?: RegionalInventoryDataSource;
      /** The [supplemental data source](https://support.google.com/merchants/answer/7439058) for local and online products. */
      supplementalProductDataSource?: SupplementalProductDataSource;
    }
    interface DataSourceReference {
      /** Optional. The name of the primary data source. Format: `accounts/{account}/dataSources/{datasource}` */
      primaryDataSourceName?: string;
      /** Self should be used to reference the primary data source itself. */
      self?: boolean;
      /** Optional. The name of the supplemental data source. Format: `accounts/{account}/dataSources/{datasource}` */
      supplementalDataSourceName?: string;
    }
    interface DefaultRule {
      /** Required. The list of data sources linked in the [default rule](https://support.google.com/merchants/answer/7450276). This list is ordered by the default rule priority of joining the data. It might include none or multiple references to `self` and supplemental data sources. The list must not be empty. To link the data source to the default rule, you need to add a new reference to this list (in sequential order). To unlink the data source from the default rule, you need to remove the given reference from this list. Changing the order of this list will result in changing the priority of data sources in the default rule. For example, providing the following list: [`1001`, `self`] will take attribute values from supplemental data source `1001`, and fallback to `self` if the attribute is not set in `1001`. */
      takeFromDataSources?: DataSourceReference[];
    }
    interface Destination {
      /** [Marketing methods](https://support.google.com/merchants/answer/15130232) (also known as destination) selections. */
      destination?: string;
      /** The state of the destination. */
      state?: string;
    }
    interface Empty {}
    interface FetchDataSourceRequest {}
    interface FetchSettings {
      /** Optional. The day of the month when the data source file should be fetched (1-31). This field can only be set for monthly frequency. */
      dayOfMonth?: number;
      /** Optional. The day of the week when the data source file should be fetched. This field can only be set for weekly frequency. */
      dayOfWeek?: string;
      /** Optional. Enables or pauses the fetch schedule. */
      enabled?: boolean;
      /** Optional. The URL where the data source file can be fetched. Google Merchant Center supports automatic scheduled uploads using the HTTP, HTTPS or SFTP protocols, so the value will need to be a valid link using one of those three protocols. Immutable for Google Sheets files. */
      fetchUri?: string;
      /** Required. The frequency describing fetch schedule. */
      frequency?: string;
      /** Optional. An optional password for fetch_uri. Used for [submitting data sources through SFTP](https://support.google.com/merchants/answer/13813117). */
      password?: string;
      /** Optional. The hour of the day when the data source file should be fetched. Minutes and seconds are not supported and will be ignored. */
      timeOfDay?: TimeOfDay;
      /** Optional. [Time zone](https://cldr.unicode.org) used for schedule. UTC by default. For example, "America/Los_Angeles". */
      timeZone?: string;
      /** Optional. An optional user name for fetch_uri. Used for [submitting data sources through SFTP](https://support.google.com/merchants/answer/13813117). */
      username?: string;
    }
    interface FileInput {
      /** Optional. Fetch details to deliver the data source. It contains settings for `FETCH` and `GOOGLE_SHEETS` file input types. The required fields vary based on the frequency of fetching. */
      fetchSettings?: FetchSettings;
      /** Output only. The type of file input. */
      fileInputType?: string;
      /** Optional. The file name of the data source. Required for `UPLOAD` file input type. */
      fileName?: string;
    }
    interface FileUpload {
      /** Output only. The data source id. */
      dataSourceId?: string;
      /** Output only. The list of issues occurring in the data source. */
      issues?: Issue[];
      /** Output only. The number of items in the data source that were created. */
      itemsCreated?: string;
      /** Output only. The number of items in the data source that were processed. */
      itemsTotal?: string;
      /** Output only. The number of items in the data source that were updated. */
      itemsUpdated?: string;
      /** Identifier. The name of the data source file upload. Format: `{datasource.name=accounts/{account}/dataSources/{datasource}/fileUploads/{fileupload}}` */
      name?: string;
      /** Output only. The processing state of the data source. */
      processingState?: string;
      /** Output only. The date at which the file of the data source was uploaded. */
      uploadTime?: string;
    }
    interface Issue {
      /** Output only. The code of the error, for example, "validation/invalid_value". Returns "?" if the code is unknown. */
      code?: string;
      /** Output only. The number of occurrences of the error in the file upload. */
      count?: string;
      /** Output only. The error description, for example, "Your data source contains items which have too many attributes, or are too big. These items will be dropped". */
      description?: string;
      /** Output only. Link to the documentation explaining the issue in more details, if available. */
      documentationUri?: string;
      /** Output only. The severity of the issue. */
      severity?: string;
      /** Output only. The title of the issue, for example, "Item too big". */
      title?: string;
    }
    interface ListDataSourcesResponse {
      /** The data sources from the specified account. */
      dataSources?: DataSource[];
      /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
    }
    interface LocalInventoryDataSource {
      /** Required. Immutable. The two-letter ISO 639-1 language of the items to which the local inventory is provided. */
      contentLanguage?: string;
      /** Required. Immutable. The feed label of the offers to which the local inventory is provided. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-). See also [migration to feed labels](https://developers.google.com/shopping-content/guides/products/feed-labels). */
      feedLabel?: string;
    }
    interface MerchantReviewDataSource {}
    interface PrimaryProductDataSource {
      /** Optional. Immutable. Specifies the type of data source channel. */
      channel?: string;
      /** Optional. Immutable. The two-letter ISO 639-1 language of the items in the data source. `feedLabel` and `contentLanguage` must be either both set or unset. The fields can only be unset for data sources without file input. If set, the data source will only accept products matching this combination. If unset, the data source will accept products without that restriction. */
      contentLanguage?: string;
      /** Optional. The countries where the items may be displayed. Represented as a [CLDR territory code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml). */
      countries?: string[];
      /** Optional. Default rule management of the data source. If set, the linked data sources will be replaced. */
      defaultRule?: DefaultRule;
      /** Optional. A list of destinations describing where products of the data source can be shown. When retrieving the data source, the list contains all the destinations that can be used for the data source, including the ones that are disabled for the data source but enabled for the account. Only destinations that are enabled on the account, for example through program participation, can be enabled on the data source. If unset, during creation, the destinations will be inherited based on the account level program participation. If set, during creation or update, the data source will be set only for the specified destinations. Updating this field requires at least one destination. */
      destinations?: Destination[];
      /** Optional. Immutable. The feed label that is specified on the data source level. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-). See also [migration to feed labels](https://developers.google.com/shopping-content/guides/products/feed-labels). `feedLabel` and `contentLanguage` must be either both set or unset for data sources with product content type. They must be set for data sources with a file input. If set, the data source will only accept products matching this combination. If unset, the data source will accept products without that restriction. */
      feedLabel?: string;
    }
    interface ProductChange {
      /** The new value of the changed resource or attribute. If empty, it means that the product was deleted. Will have one of these values : (`approved`, `pending`, `disapproved`, ``) */
      newValue?: string;
      /** The old value of the changed resource or attribute. If empty, it means that the product was created. Will have one of these values : (`approved`, `pending`, `disapproved`, ``) */
      oldValue?: string;
      /** Countries that have the change (if applicable). Represented in the ISO 3166 format. */
      regionCode?: string;
      /** Reporting contexts that have the change (if applicable). Currently this field supports only (`SHOPPING_ADS`, `LOCAL_INVENTORY_ADS`, `YOUTUBE_SHOPPING`, `YOUTUBE_CHECKOUT`, `YOUTUBE_AFFILIATE`) from the enum value [ReportingContextEnum](/merchant/api/reference/rest/Shared.Types/ReportingContextEnum) */
      reportingContext?: string;
    }
    interface ProductReviewDataSource {}
    interface ProductStatusChangeMessage {
      /** The target account that owns the entity that changed. Format : `accounts/{merchant_id}` */
      account?: string;
      /** The attribute in the resource that changed, in this case it will be always `Status`. */
      attribute?: string;
      /** A message to describe the change that happened to the product */
      changes?: ProductChange[];
      /** The time at which the event was generated. If you want to order the notification messages you receive you should rely on this field not on the order of receiving the notifications. */
      eventTime?: string;
      /** Optional. The product expiration time. This field will not bet set if the notification is sent for a product deletion event. */
      expirationTime?: string;
      /** The account that manages the merchant's account. can be the same as merchant id if it is standalone account. Format : `accounts/{service_provider_id}` */
      managingAccount?: string;
      /** The product name. Format: `accounts/{account}/products/{product}` */
      resource?: string;
      /** The product id. */
      resourceId?: string;
      /** The resource that changed, in this case it will always be `Product`. */
      resourceType?: string;
    }
    interface PromotionDataSource {
      /** Required. Immutable. The two-letter ISO 639-1 language of the items in the data source. */
      contentLanguage?: string;
      /** Required. Immutable. The target country used as part of the unique identifier. Represented as a [CLDR territory code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml). Promotions are only available in selected [countries](https://support.google.com/merchants/answer/4588460). */
      targetCountry?: string;
    }
    interface RegionalInventoryDataSource {
      /** Required. Immutable. The two-letter ISO 639-1 language of the items to which the regional inventory is provided. */
      contentLanguage?: string;
      /** Required. Immutable. The feed label of the offers to which the regional inventory is provided. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-). See also [migration to feed labels](https://developers.google.com/shopping-content/guides/products/feed-labels). */
      feedLabel?: string;
    }
    interface SupplementalProductDataSource {
      /** Optional. Immutable. The two-letter ISO 639-1 language of the items in the data source. `feedLabel` and `contentLanguage` must be either both set or unset. The fields can only be unset for data sources without file input. If set, the data source will only accept products matching this combination. If unset, the data source will accept produts without that restriction. */
      contentLanguage?: string;
      /** Optional. Immutable. The feed label that is specified on the data source level. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-). See also [migration to feed labels](https://developers.google.com/shopping-content/guides/products/feed-labels). `feedLabel` and `contentLanguage` must be either both set or unset for data sources with product content type. They must be set for data sources with a file input. The fields must be unset for data sources without file input. If set, the data source will only accept products matching this combination. If unset, the data source will accept produts without that restriction. */
      feedLabel?: string;
      /** Output only. The (unordered and deduplicated) list of all primary data sources linked to this data source in either default or custom rules. Supplemental data source cannot be deleted before all links are removed. */
      referencingPrimaryDataSources?: DataSourceReference[];
    }
    interface TimeOfDay {
      /** Hours of a day in 24 hour format. Must be greater than or equal to 0 and typically must be less than or equal to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time. */
      hours?: number;
      /** Minutes of an hour. Must be greater than or equal to 0 and less than or equal to 59. */
      minutes?: number;
      /** Fractions of seconds, in nanoseconds. Must be greater than or equal to 0 and less than or equal to 999,999,999. */
      nanos?: number;
      /** Seconds of a minute. Must be greater than or equal to 0 and typically must be less than or equal to 59. An API may allow the value 60 if it allows leap-seconds. */
      seconds?: number;
    }
    interface FileUploadsResource {
      /** Gets the latest data source file upload. Only the `latest` alias is accepted for a file upload. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the data source file upload to retrieve. Format: `accounts/{account}/dataSources/{datasource}/fileUploads/latest` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<FileUpload>;
    }
    interface DataSourcesResource {
      /** Creates the new data source configuration for the given account. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The account where this data source will be created. Format: `accounts/{account}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: DataSource;
      }): Request<DataSource>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The account where this data source will be created. Format: `accounts/{account}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: DataSource,
      ): Request<DataSource>;
      /** Deletes a data source from your Merchant Center account. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the data source to delete. Format: `accounts/{account}/dataSources/{datasource}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Performs the data fetch immediately (even outside fetch schedule) on a data source from your Merchant Center Account. If you need to call this method more than once per day, you should use the Products service to update your product data instead. This method only works on data sources with a file input set. */
      fetch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the data source resource to fetch. Format: `accounts/{account}/dataSources/{datasource}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: FetchDataSourceRequest;
      }): Request<{}>;
      fetch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the data source resource to fetch. Format: `accounts/{account}/dataSources/{datasource}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: FetchDataSourceRequest,
      ): Request<{}>;
      /** Retrieves the data source configuration for the given account. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the data source to retrieve. Format: `accounts/{account}/dataSources/{datasource}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<DataSource>;
      /** Lists the configurations for data sources for the given account. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum number of data sources to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000. If unspecified, the maximum number of data sources will be returned. */
        pageSize?: number;
        /** Optional. A page token, received from a previous `ListDataSources` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListDataSources` must match the call that provided the page token. */
        pageToken?: string;
        /** Required. The account to list data sources for. Format: `accounts/{account}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListDataSourcesResponse>;
      /** Updates the existing data source configuration. The fields that are set in the update mask but not provided in the resource will be deleted. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Identifier. The name of the data source. Format: `{datasource.name=accounts/{account}/dataSources/{datasource}}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The list of data source fields to be updated. Fields specified in the update mask without a value specified in the body will be deleted from the data source. Providing special "*" value for full data source replacement is not supported. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: DataSource;
      }): Request<DataSource>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Identifier. The name of the data source. Format: `{datasource.name=accounts/{account}/dataSources/{datasource}}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The list of data source fields to be updated. Fields specified in the update mask without a value specified in the body will be deleted from the data source. Providing special "*" value for full data source replacement is not supported. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: DataSource,
      ): Request<DataSource>;
      fileUploads: FileUploadsResource;
    }
    interface AccountsResource {
      dataSources: DataSourcesResource;
    }

    const accounts: AccountsResource;
  }
}
