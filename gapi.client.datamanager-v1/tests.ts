/* This is stub file for gapi.client.datamanager-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20251006

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://datamanager.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.datamanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, create, import, or delete your customer data in Google Ads, Google Marketing Platform (Campaign Manager 360, Search Ads 360, Display & Video 360), and Google Analytics */
    'https://www.googleapis.com/auth/datamanager',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Uploads a list of AudienceMember resources to the provided Destination. */
    await gapi.client.datamanager.audienceMembers.ingest(
      {},
      {
        audienceMembers: [
          {
            consent: {
              adPersonalization: 'Test string',
              adUserData: 'Test string',
            },
            destinationReferences: ['Test string'],
            mobileData: {
              mobileIds: ['Test string'],
            },
            pairData: {
              pairIds: ['Test string'],
            },
            userData: {
              userIdentifiers: [
                {
                  address: {
                    familyName: 'Test string',
                    givenName: 'Test string',
                    postalCode: 'Test string',
                    regionCode: 'Test string',
                  },
                  emailAddress: 'Test string',
                  phoneNumber: 'Test string',
                },
              ],
            },
          },
        ],
        consent: {
          adPersonalization: 'Test string',
          adUserData: 'Test string',
        },
        destinations: [
          {
            linkedAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            loginAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            operatingAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            productDestinationId: 'Test string',
            reference: 'Test string',
          },
        ],
        encoding: 'Test string',
        encryptionInfo: {
          gcpWrappedKeyInfo: {
            encryptedDek: 'Test string',
            kekUri: 'Test string',
            keyType: 'Test string',
            wipProvider: 'Test string',
          },
        },
        termsOfService: {
          customerMatchTermsOfServiceStatus: 'Test string',
        },
        validateOnly: true,
      },
    );
    /** Removes a list of AudienceMember resources from the provided Destination. */
    await gapi.client.datamanager.audienceMembers.remove(
      {},
      {
        audienceMembers: [
          {
            consent: {
              adPersonalization: 'Test string',
              adUserData: 'Test string',
            },
            destinationReferences: ['Test string'],
            mobileData: {
              mobileIds: ['Test string'],
            },
            pairData: {
              pairIds: ['Test string'],
            },
            userData: {
              userIdentifiers: [
                {
                  address: {
                    familyName: 'Test string',
                    givenName: 'Test string',
                    postalCode: 'Test string',
                    regionCode: 'Test string',
                  },
                  emailAddress: 'Test string',
                  phoneNumber: 'Test string',
                },
              ],
            },
          },
        ],
        destinations: [
          {
            linkedAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            loginAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            operatingAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            productDestinationId: 'Test string',
            reference: 'Test string',
          },
        ],
        encoding: 'Test string',
        encryptionInfo: {
          gcpWrappedKeyInfo: {
            encryptedDek: 'Test string',
            kekUri: 'Test string',
            keyType: 'Test string',
            wipProvider: 'Test string',
          },
        },
        validateOnly: true,
      },
    );
    /** Uploads a list of Event resources from the provided Destination. */
    await gapi.client.datamanager.events.ingest(
      {},
      {
        consent: {
          adPersonalization: 'Test string',
          adUserData: 'Test string',
        },
        destinations: [
          {
            linkedAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            loginAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            operatingAccount: {
              accountId: 'Test string',
              accountType: 'Test string',
              product: 'Test string',
            },
            productDestinationId: 'Test string',
            reference: 'Test string',
          },
        ],
        encoding: 'Test string',
        encryptionInfo: {
          gcpWrappedKeyInfo: {
            encryptedDek: 'Test string',
            kekUri: 'Test string',
            keyType: 'Test string',
            wipProvider: 'Test string',
          },
        },
        events: [
          {
            adIdentifiers: {
              gbraid: 'Test string',
              gclid: 'Test string',
              landingPageDeviceInfo: {
                ipAddress: 'Test string',
                userAgent: 'Test string',
              },
              sessionAttributes: 'Test string',
              wbraid: 'Test string',
            },
            cartData: {
              items: [
                {
                  merchantProductId: 'Test string',
                  quantity: 'Test string',
                  unitPrice: 42,
                },
              ],
              merchantFeedLabel: 'Test string',
              merchantFeedLanguageCode: 'Test string',
              merchantId: 'Test string',
              transactionDiscount: 42,
            },
            consent: {
              adPersonalization: 'Test string',
              adUserData: 'Test string',
            },
            conversionValue: 42,
            currency: 'Test string',
            customVariables: [
              {
                destinationReferences: ['Test string'],
                value: 'Test string',
                variable: 'Test string',
              },
            ],
            destinationReferences: ['Test string'],
            eventDeviceInfo: {
              ipAddress: 'Test string',
              userAgent: 'Test string',
            },
            eventSource: 'Test string',
            eventTimestamp: 'Test string',
            experimentalFields: [
              {
                field: 'Test string',
                value: 'Test string',
              },
            ],
            lastUpdatedTimestamp: 'Test string',
            transactionId: 'Test string',
            userData: {
              userIdentifiers: [
                {
                  address: {
                    familyName: 'Test string',
                    givenName: 'Test string',
                    postalCode: 'Test string',
                    regionCode: 'Test string',
                  },
                  emailAddress: 'Test string',
                  phoneNumber: 'Test string',
                },
              ],
            },
            userProperties: {
              customerType: 'Test string',
              customerValueBucket: 'Test string',
            },
          },
        ],
        validateOnly: true,
      },
    );
    /** Gets the status of a request given request id. */
    await gapi.client.datamanager.requestStatus.retrieve({
      requestId: 'Test string',
    });
  }
});
