/* This is stub file for gapi.client.workflows-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220728

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://workflows.googleapis.com/$discovery/rest?version=v1beta');
    /** now we can use gapi.client.workflows */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.workflows.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.workflows.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.workflows.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.workflows.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‚Äç/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.workflows.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new workflow. If a workflow with the specified name already exists in the specified project and location, the long running operation will return ALREADY_EXISTS error. */
        await gapi.client.workflows.projects.locations.workflows.create({
            parent: "Test string",
            workflowId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            serviceAccount: "Test string",
            sourceContents: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a workflow with the specified name. This method also cancels and deletes all running executions of the workflow. */
        await gapi.client.workflows.projects.locations.workflows.delete({
            name: "Test string",
        });
        /** Gets details of a single Workflow. */
        await gapi.client.workflows.projects.locations.workflows.get({
            name: "Test string",
        });
        /** Lists Workflows in a given project and location. The default order is not specified. */
        await gapi.client.workflows.projects.locations.workflows.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates an existing workflow. Running this method has no impact on already running executions of the workflow. A new revision of the workflow may be created as a result of a successful
         * update operation. In that case, such revision will be used in new workflow executions.
         */
        await gapi.client.workflows.projects.locations.workflows.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            serviceAccount: "Test string",
            sourceContents: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
    }
});
