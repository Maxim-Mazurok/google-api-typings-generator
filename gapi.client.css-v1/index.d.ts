/* Type definitions for non-npm package CSS API v1 0.0 */
// Project: https://developers.google.com/comparison-shopping-services/api/overview
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://css.googleapis.com/$discovery/rest?version=v1
// Revision: 20241028

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load CSS API v1 */
  function load(
    urlOrObject: 'https://css.googleapis.com/$discovery/rest?version=v1'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'css', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'css', version: 'v1', callback: () => any): void;

  namespace css {
    interface Account {
      /** Output only. The type of this account. */
      accountType?: string;
      /** Automatically created label IDs assigned to the MC account by CSS Center. */
      automaticLabelIds?: string[];
      /** The CSS/MC account's short display name. */
      displayName?: string;
      /** Output only. Immutable. The CSS/MC account's full name. */
      fullName?: string;
      /** Output only. Immutable. The CSS/MC account's homepage. */
      homepageUri?: string;
      /** Manually created label IDs assigned to the CSS/MC account by a CSS parent account. */
      labelIds?: string[];
      /** The label resource name. Format: accounts/{account} */
      name?: string;
      /** The CSS/MC account's parent resource. CSS group for CSS domains; CSS domain for MC accounts. Returned only if the user has access to the parent account. */
      parent?: string;
    }
    interface AccountLabel {
      /** Output only. The ID of account this label belongs to. */
      accountId?: string;
      /** The description of this label. */
      description?: string;
      /** The display name of this label. */
      displayName?: string;
      /** Output only. The ID of the label. */
      labelId?: string;
      /** Output only. The type of this label. */
      labelType?: string;
      /** The resource name of the label. Format: accounts/{account}/labels/{label} */
      name?: string;
    }
    interface Attributes {
      /** Additional URL of images of the item. */
      additionalImageLinks?: string[];
      /** Set to true if the item is targeted towards adults. */
      adult?: boolean;
      /** Target age group of the item. */
      ageGroup?: string;
      /** Product Related Attributes.[14-36] Brand of the item. */
      brand?: string;
      /** A list of certificates claimed by the CSS for the given product. */
      certifications?: Certification[];
      /** Color of the item. */
      color?: string;
      /** Allows advertisers to override the item URL when the product is shown within the context of Product Ads. */
      cppAdsRedirect?: string;
      /** URL directly linking to your the Product Detail Page of the CSS. */
      cppLink?: string;
      /** URL for the mobile-optimized version of the Product Detail Page of the CSS. */
      cppMobileLink?: string;
      /** Custom label 0 for custom grouping of items in a Shopping campaign. */
      customLabel0?: string;
      /** Custom label 1 for custom grouping of items in a Shopping campaign. */
      customLabel1?: string;
      /** Custom label 2 for custom grouping of items in a Shopping campaign. */
      customLabel2?: string;
      /** Custom label 3 for custom grouping of items in a Shopping campaign. */
      customLabel3?: string;
      /** Custom label 4 for custom grouping of items in a Shopping campaign. */
      customLabel4?: string;
      /** Description of the item. */
      description?: string;
      /** The list of destinations to exclude for this target (corresponds to unchecked check boxes in Merchant Center). */
      excludedDestinations?: string[];
      /** Date on which the item should expire, as specified upon insertion, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. The actual expiration date is exposed in `productstatuses` as [googleExpirationDate](https://support.google.com/merchants/answer/6324499) and might be earlier if `expirationDate` is too far in the future. Note: It may take 2+ days from the expiration date for the item to actually get deleted. */
      expirationDate?: string;
      /** Target gender of the item. */
      gender?: string;
      /** Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API. */
      googleProductCategory?: string;
      /** Global Trade Item Number ([GTIN](https://support.google.com/merchants/answer/188494#gtin)) of the item. */
      gtin?: string;
      /** Condition of the headline offer. */
      headlineOfferCondition?: string;
      /** Number and amount of installments to pay for an item. */
      headlineOfferInstallment?: HeadlineOfferInstallment;
      /** Link to the headline offer. */
      headlineOfferLink?: string;
      /** Mobile Link to the headline offer. */
      headlineOfferMobileLink?: string;
      /** Headline Price of the aggregate offer. */
      headlineOfferPrice?: Price;
      /** Headline Price of the aggregate offer. */
      headlineOfferShippingPrice?: Price;
      /** Number of periods (months or years) and amount of payment per period for an item with an associated subscription contract. */
      headlineOfferSubscriptionCost?: HeadlineOfferSubscriptionCost;
      /** High Price of the aggregate offer. */
      highPrice?: Price;
      /** URL of an image of the item. */
      imageLink?: string;
      /** The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`. */
      includedDestinations?: string[];
      /** Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price. */
      isBundle?: boolean;
      /** Shared identifier for all variants of the same product. */
      itemGroupId?: string;
      /** Low Price of the aggregate offer. */
      lowPrice?: Price;
      /** The material of which the item is made. */
      material?: string;
      /** Manufacturer Part Number ([MPN](https://support.google.com/merchants/answer/188494#mpn)) of the item. */
      mpn?: string;
      /** The number of identical products in a merchant-defined multipack. */
      multipack?: string;
      /** The number of aggregate offers. */
      numberOfOffers?: string;
      /** The item's pattern (e.g. polka dots). */
      pattern?: string;
      /** Publication of this item will be temporarily paused. */
      pause?: string;
      /** Technical specification or additional product details. */
      productDetails?: ProductDetail[];
      /** The height of the product in the units provided. The value must be between 0 (exclusive) and 3000 (inclusive). */
      productHeight?: ProductDimension;
      /** Bullet points describing the most relevant highlights of a product. */
      productHighlights?: string[];
      /** The length of the product in the units provided. The value must be between 0 (exclusive) and 3000 (inclusive). */
      productLength?: ProductDimension;
      /** Categories of the item (formatted as in [products data specification](https://support.google.com/merchants/answer/6324406)). */
      productTypes?: string[];
      /** The weight of the product in the units provided. The value must be between 0 (exclusive) and 2000 (inclusive). */
      productWeight?: ProductWeight;
      /** The width of the product in the units provided. The value must be between 0 (exclusive) and 3000 (inclusive). */
      productWidth?: ProductDimension;
      /** Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see [https://support.google.com/merchants/answer/6324492](size definition)). */
      size?: string;
      /** System in which the size is specified. Recommended for apparel items. */
      sizeSystem?: string;
      /** The cut of the item. It can be used to represent combined size types for apparel items. Maximum two of size types can be provided (see [https://support.google.com/merchants/answer/6324497](size type)). */
      sizeTypes?: string[];
      /** Title of the item. */
      title?: string;
    }
    interface Certification {
      /** The authority or certification body responsible for issuing the certification. At this time, the most common value is "EC" or “European_Commission” for energy labels in the EU. */
      authority?: string;
      /** The code of the certification. For example, for the EPREL certificate with the link https://eprel.ec.europa.eu/screen/product/dishwashers2019/123456 the code is 123456. The code is required for European Energy Labels. */
      code?: string;
      /** The name of the certification. At this time, the most common value is "EPREL", which represents energy efficiency certifications in the EU European Registry for Energy Labeling (EPREL) database. */
      name?: string;
    }
    interface CssProduct {
      /** Output only. A list of product attributes. */
      attributes?: Attributes;
      /** Output only. The two-letter [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the product. */
      contentLanguage?: string;
      /** Output only. The status of a product, data validation issues, that is, information about a product computed asynchronously. */
      cssProductStatus?: CssProductStatus;
      /** Output only. A list of custom (CSS-provided) attributes. It can also be used to submit any attribute of the feed specification in its generic form (for example, `{ "name": "size type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google. */
      customAttributes?: CustomAttribute[];
      /** Output only. The feed label for the product. */
      feedLabel?: string;
      /** The name of the CSS Product. Format: `"accounts/{account}/cssProducts/{css_product}"` */
      name?: string;
      /** Output only. Your unique raw identifier for the product. */
      rawProvidedId?: string;
    }
    interface CssProductInput {
      /** A list of CSS Product attributes. */
      attributes?: Attributes;
      /** Required. The two-letter [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the CSS Product. */
      contentLanguage?: string;
      /** A list of custom (CSS-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (for example: `{ "name": "size type", "value": "regular" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google. */
      customAttributes?: CustomAttribute[];
      /** Required. The [feed label](https://developers.google.com/shopping-content/guides/products/feed-labels) for the CSS Product. Feed Label is synonymous to "target country" and hence should always be a valid region code. For example: 'DE' for Germany, 'FR' for France. */
      feedLabel?: string;
      /** Output only. The name of the processed CSS Product. Format: `accounts/{account}/cssProducts/{css_product}` " */
      finalName?: string;
      /** Represents the existing version (freshness) of the CSS Product, which can be used to preserve the right order when multiple updates are done at the same time. This field must not be set to the future time. If set, the update is prevented if a newer version of the item already exists in our system (that is the last update time of the existing CSS products is later than the freshness time set in the update). If the update happens, the last update time is then set to this freshness time. If not set, the update will not be prevented and the last update time will default to when this request was received by the CSS API. If the operation is prevented, the aborted exception will be thrown. */
      freshnessTime?: string;
      /** The name of the CSS Product input. Format: `accounts/{account}/cssProductInputs/{css_product_input}` */
      name?: string;
      /** Required. Your unique identifier for the CSS Product. This is the same for the CSS Product input and processed CSS Product. We only allow ids with alphanumerics, underscores and dashes. See the [products feed specification](https://support.google.com/merchants/answer/188494#id) for details. */
      rawProvidedId?: string;
    }
    interface CssProductStatus {
      /** Date on which the item has been created, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. */
      creationDate?: string;
      /** The intended destinations for the product. */
      destinationStatuses?: DestinationStatus[];
      /** Date on which the item expires, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. */
      googleExpirationDate?: string;
      /** A list of all issues associated with the product. */
      itemLevelIssues?: ItemLevelIssue[];
      /** Date on which the item has been last updated, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. */
      lastUpdateDate?: string;
    }
    interface CustomAttribute {
      /** Subattributes within this attribute group. If `group_values` is not empty, `value` must be empty. */
      groupValues?: CustomAttribute[];
      /** The name of the attribute. */
      name?: string;
      /** The value of the attribute. If `value` is not empty, `group_values` must be empty. */
      value?: string;
    }
    interface DestinationStatus {
      /** List of country codes (ISO 3166-1 alpha-2) where the aggregate offer is approved. */
      approvedCountries?: string[];
      /** The name of the destination */
      destination?: string;
      /** List of country codes (ISO 3166-1 alpha-2) where the aggregate offer is disapproved. */
      disapprovedCountries?: string[];
      /** List of country codes (ISO 3166-1 alpha-2) where the aggregate offer is pending approval. */
      pendingCountries?: string[];
    }
    interface Empty {}
    interface HeadlineOfferInstallment {
      /** The amount the buyer has to pay per month. */
      amount?: Price;
      /** The up-front down payment amount the buyer has to pay. */
      downpayment?: Price;
      /** The number of installments the buyer has to pay. */
      months?: string;
    }
    interface HeadlineOfferSubscriptionCost {
      /** The amount the buyer has to pay per subscription period. */
      amount?: Price;
      /** The type of subscription period. Supported values are: * "`month`" * "`year`" */
      period?: string;
      /** The number of subscription periods the buyer has to pay. */
      periodLength?: string;
    }
    interface ItemLevelIssue {
      /** List of country codes (ISO 3166-1 alpha-2) where issue applies to the aggregate offer. */
      applicableCountries?: string[];
      /** The attribute's name, if the issue is caused by a single attribute. */
      attribute?: string;
      /** The error code of the issue. */
      code?: string;
      /** A short issue description in English. */
      description?: string;
      /** The destination the issue applies to. */
      destination?: string;
      /** A detailed issue description in English. */
      detail?: string;
      /** The URL of a web page to help with resolving this issue. */
      documentation?: string;
      /** Whether the issue can be resolved by the merchant. */
      resolution?: string;
      /** How this issue affects serving of the aggregate offer. */
      servability?: string;
    }
    interface ListAccountLabelsResponse {
      /** The labels from the specified account. */
      accountLabels?: AccountLabel[];
      /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
    }
    interface ListChildAccountsResponse {
      /** The CSS/MC accounts returned for the specified CSS parent account. */
      accounts?: Account[];
      /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
    }
    interface ListCssProductsResponse {
      /** The processed CSS products from the specified account. These are your processed CSS products after applying rules and supplemental feeds. */
      cssProducts?: CssProduct[];
      /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
    }
    interface Price {
      /** The price represented as a number in micros (1 million micros is an equivalent to one's currency standard unit, for example, 1 USD = 1000000 micros). */
      amountMicros?: string;
      /** The currency of the price using three-letter acronyms according to [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217). */
      currencyCode?: string;
    }
    interface ProductDetail {
      /** The name of the product detail. */
      attributeName?: string;
      /** The value of the product detail. */
      attributeValue?: string;
      /** The section header used to group a set of product details. */
      sectionName?: string;
    }
    interface ProductDimension {
      /** Required. The dimension units. Acceptable values are: * "`in`" * "`cm`" */
      unit?: string;
      /** Required. The dimension value represented as a number. The value can have a maximum precision of four decimal places. */
      value?: number;
    }
    interface ProductWeight {
      /** Required. The weight unit. Acceptable values are: * "`g`" * "`kg`" * "`oz`" * "`lb`" */
      unit?: string;
      /** Required. The weight represented as a number. The weight can have a maximum precision of four decimal places. */
      value?: number;
    }
    interface UpdateAccountLabelsRequest {
      /** The list of label IDs to overwrite the existing account label IDs. If the list is empty, all currently assigned label IDs will be deleted. */
      labelIds?: string[];
      /** Optional. Only required when updating MC account labels. The CSS domain that is the parent resource of the MC account. Format: accounts/{account} */
      parent?: string;
    }
    interface CssProductInputsResource {
      /** Deletes a CSS Product input from your CSS Center account. After a delete it may take several minutes until the input is no longer available. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the CSS product input resource to delete. Format: accounts/{account}/cssProductInputs/{css_product_input} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The Content API Supplemental Feed ID. The field must not be set if the action applies to a primary feed. If the field is set, then product action applies to a supplemental feed instead of primary Content API feed. */
        supplementalFeedId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Uploads a CssProductInput to your CSS Center account. If an input with the same contentLanguage, identity, feedLabel and feedId already exists, this method replaces that entry. After inserting, updating, or deleting a CSS Product input, it may take several minutes before the processed CSS Product can be retrieved. */
      insert(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The primary or supplemental feed id. If CSS Product already exists and feed id provided is different, then the CSS Product will be moved to a new feed. Note: For now, CSSs do not need to provide feed ids as we create feeds on the fly. We do not have supplemental feed support for CSS Products yet. */
        feedId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The account where this CSS Product will be inserted. Format: accounts/{account} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CssProductInput;
      }): Request<CssProductInput>;
      insert(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. The primary or supplemental feed id. If CSS Product already exists and feed id provided is different, then the CSS Product will be moved to a new feed. Note: For now, CSSs do not need to provide feed ids as we create feeds on the fly. We do not have supplemental feed support for CSS Products yet. */
          feedId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The account where this CSS Product will be inserted. Format: accounts/{account} */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CssProductInput
      ): Request<CssProductInput>;
    }
    interface CssProductsResource {
      /** Retrieves the processed CSS Product from your CSS Center account. After inserting, updating, or deleting a product input, it may take several minutes before the updated final product can be retrieved. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the CSS product to retrieve. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<CssProduct>;
      /** Lists the processed CSS Products in your CSS Center account. The response might contain fewer items than specified by pageSize. Rely on pageToken to determine if there are more items to be requested. After inserting, updating, or deleting a CSS product input, it may take several minutes before the updated processed CSS product can be retrieved. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of CSS Products to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000. If unspecified, the maximum number of CSS products will be returned. */
        pageSize?: number;
        /** A page token, received from a previous `ListCssProducts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCssProducts` must match the call that provided the page token. */
        pageToken?: string;
        /** Required. The account/domain to list processed CSS Products for. Format: accounts/{account} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListCssProductsResponse>;
    }
    interface LabelsResource {
      /** Creates a new label, not assigned to any account. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The parent account. Format: accounts/{account} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AccountLabel;
      }): Request<AccountLabel>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The parent account. Format: accounts/{account} */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AccountLabel
      ): Request<AccountLabel>;
      /** Deletes a label and removes it from all accounts to which it was assigned. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the label to delete. Format: accounts/{account}/labels/{label} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Lists the labels assigned to an account. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of labels to return. The service may return fewer than this value. If unspecified, at most 50 labels will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. */
        pageSize?: number;
        /** A page token, received from a previous `ListAccountLabels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAccountLabels` must match the call that provided the page token. */
        pageToken?: string;
        /** Required. The parent account. Format: accounts/{account} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListAccountLabelsResponse>;
      /** Updates a label. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The resource name of the label. Format: accounts/{account}/labels/{label} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AccountLabel;
      }): Request<AccountLabel>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The resource name of the label. Format: accounts/{account}/labels/{label} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AccountLabel
      ): Request<AccountLabel>;
    }
    interface AccountsResource {
      /** Retrieves a single CSS/MC account by ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the managed CSS/MC account. Format: accounts/{account} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. Only required when retrieving MC account information. The CSS domain that is the parent resource of the MC account. Format: accounts/{account} */
        parent?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Account>;
      /** Lists all the accounts under the specified CSS account ID, and optionally filters by label ID and account name. */
      listChildAccounts(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** If set, only the MC accounts with the given name (case sensitive) will be returned. */
        fullName?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** If set, only the MC accounts with the given label ID will be returned. */
        labelId?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum number of accounts to return. The service may return fewer than this value. If unspecified, at most 50 accounts will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. */
        pageSize?: number;
        /** Optional. A page token, received from a previous `ListChildAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListChildAccounts` must match the call that provided the page token. */
        pageToken?: string;
        /** Required. The parent account. Must be a CSS group or domain. Format: accounts/{account} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListChildAccountsResponse>;
      /** Updates labels assigned to CSS/MC accounts by a CSS domain. */
      updateLabels(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The label resource name. Format: accounts/{account} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: UpdateAccountLabelsRequest;
      }): Request<Account>;
      updateLabels(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The label resource name. Format: accounts/{account} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: UpdateAccountLabelsRequest
      ): Request<Account>;
      cssProductInputs: CssProductInputsResource;
      cssProducts: CssProductsResource;
      labels: LabelsResource;
    }

    const accounts: AccountsResource;
  }
}
