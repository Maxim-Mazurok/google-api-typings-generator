/* This is stub file for gapi.client.merchantapi-accounts_v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250907

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://merchantapi.googleapis.com/$discovery/rest?version=accounts_v1',
  );
  /** now we can use gapi.client.merchantapi */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a Merchant Center account with additional configuration. Adds the user that makes the request as an admin for the new account. */
    await gapi.client.merchantapi.accounts.createAndConfigure(
      {},
      {
        account: {
          accountId: 'Test string',
          accountName: 'Test string',
          adultContent: true,
          languageCode: 'Test string',
          name: 'Test string',
          testAccount: true,
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
        },
        service: [
          {
            accountAggregation: {},
            provider: 'Test string',
          },
        ],
        user: [
          {
            user: {
              accessRights: ['Test string'],
              name: 'Test string',
              state: 'Test string',
            },
            userId: 'Test string',
          },
        ],
      },
    );
    /** Deletes the specified account regardless of its type: standalone, advanced account or sub-account. Deleting an advanced account leads to the deletion of all of its sub-accounts. Executing this method requires admin access. The deletion succeeds only if the account does not provide services to any other account and has no processed offers. You can use the `force` parameter to override this. */
    await gapi.client.merchantapi.accounts.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves an account from your Merchant Center account. After inserting, updating, or deleting an account, it may take several minutes before changes take effect. */
    await gapi.client.merchantapi.accounts.get({
      name: 'Test string',
    });
    /** Note: For the `accounts.list` method, quota and limits usage are charged for each user, and not for the Merchant Center ID or the advanced account ID. To list several sub-accounts, you should use the `accounts.listSubaccounts` method, which is more suitable for advanced accounts use case. */
    await gapi.client.merchantapi.accounts.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** List all sub-accounts for a given advanced account. This is a convenience wrapper for the more powerful `accounts.list` method. This method will produce the same results as calling `ListsAccounts` with the following filter: `relationship(providerId={parent} AND service(type="ACCOUNT_AGGREGATION"))` */
    await gapi.client.merchantapi.accounts.listSubaccounts({
      pageSize: 42,
      pageToken: 'Test string',
      provider: 'Test string',
    });
    /** Updates an account regardless of its type: standalone, advanced account or sub-account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accountId: 'Test string',
        accountName: 'Test string',
        adultContent: true,
        languageCode: 'Test string',
        name: 'Test string',
        testAccount: true,
        timeZone: {
          id: 'Test string',
          version: 'Test string',
        },
      },
    );
    /** Retrieves the autofeed settings of an account. */
    await gapi.client.merchantapi.accounts.autofeedSettings.getAutofeedSettings(
      {
        name: 'Test string',
      },
    );
    /** Updates the autofeed settings of an account. */
    await gapi.client.merchantapi.accounts.autofeedSettings.updateAutofeedSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        eligible: true,
        enableProducts: true,
        name: 'Test string',
      },
    );
    /** Retrieves the automatic improvements of an account. */
    await gapi.client.merchantapi.accounts.automaticImprovements.getAutomaticImprovements(
      {
        name: 'Test string',
      },
    );
    /** Updates the automatic improvements of an account. */
    await gapi.client.merchantapi.accounts.automaticImprovements.updateAutomaticImprovements(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        imageImprovements: {
          accountImageImprovementsSettings: {
            allowAutomaticImageImprovements: true,
          },
          effectiveAllowAutomaticImageImprovements: true,
        },
        itemUpdates: {
          accountItemUpdatesSettings: {
            allowAvailabilityUpdates: true,
            allowConditionUpdates: true,
            allowPriceUpdates: true,
            allowStrictAvailabilityUpdates: true,
          },
          effectiveAllowAvailabilityUpdates: true,
          effectiveAllowConditionUpdates: true,
          effectiveAllowPriceUpdates: true,
          effectiveAllowStrictAvailabilityUpdates: true,
        },
        name: 'Test string',
        shippingImprovements: {
          allowShippingImprovements: true,
        },
      },
    );
    /** Retrieves the business identity of an account. */
    await gapi.client.merchantapi.accounts.businessIdentity.getBusinessIdentity(
      {
        name: 'Test string',
      },
    );
    /** Updates the business identity of an account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.businessIdentity.updateBusinessIdentity(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        blackOwned: {
          identityDeclaration: 'Test string',
        },
        latinoOwned: {
          identityDeclaration: 'Test string',
        },
        name: 'Test string',
        promotionsConsent: 'Test string',
        smallBusiness: {
          identityDeclaration: 'Test string',
        },
        veteranOwned: {
          identityDeclaration: 'Test string',
        },
        womenOwned: {
          identityDeclaration: 'Test string',
        },
      },
    );
    /** Retrieves the business info of an account. */
    await gapi.client.merchantapi.accounts.businessInfo.getBusinessInfo({
      name: 'Test string',
    });
    /** Updates the business info of an account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.businessInfo.updateBusinessInfo(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        address: {
          addressLines: ['Test string'],
          administrativeArea: 'Test string',
          languageCode: 'Test string',
          locality: 'Test string',
          organization: 'Test string',
          postalCode: 'Test string',
          recipients: ['Test string'],
          regionCode: 'Test string',
          revision: 42,
          sortingCode: 'Test string',
          sublocality: 'Test string',
        },
        customerService: {
          email: 'Test string',
          phone: {
            e164Number: 'Test string',
            extension: 'Test string',
            shortCode: {
              number: 'Test string',
              regionCode: 'Test string',
            },
          },
          uri: 'Test string',
        },
        koreanBusinessRegistrationNumber: 'Test string',
        name: 'Test string',
        phone: {
          e164Number: 'Test string',
          extension: 'Test string',
          shortCode: {
            number: 'Test string',
            regionCode: 'Test string',
          },
        },
        phoneVerificationState: 'Test string',
      },
    );
    /** Retrieves a developer registration for a merchant. */
    await gapi.client.merchantapi.accounts.developerRegistration.getDeveloperRegistration(
      {
        name: 'Test string',
      },
    );
    /** Registers the GCP used for the API call to the shopping account passed in the request. Will create a user with an "API developer" and add the "developer_email" as a contact with "API notifications" email preference on. */
    await gapi.client.merchantapi.accounts.developerRegistration.registerGcp(
      {
        name: 'Test string',
      },
      {
        developerEmail: 'Test string',
      },
    );
    /** Unregister the calling GCP from the calling shopping account. Note that the GCP will still be able to access the API for at most 1 day from the unregister succussful call. */
    await gapi.client.merchantapi.accounts.developerRegistration.unregisterGcp(
      {
        name: 'Test string',
      },
      {},
    );
    /** Returns the email preferences for a Merchant Center account user. This service only permits retrieving and updating email preferences for the authenticated user. Use the name=accounts/*‚Äç/users/me/emailPreferences alias to get preferences for the authenticated user. */
    await gapi.client.merchantapi.accounts.emailPreferences.getEmailPreferences(
      {
        name: 'Test string',
      },
    );
    /** Updates the email preferences for a Merchant Center account user. Advanced account users should specify the advanced account rather than a sub-account of the advanced account. Preferences which are not explicitly selected in the update mask will not be updated. It is invalid for updates to specify an UNCONFIRMED opt-in status value. Use the name=accounts/*‚Äç/users/me/emailPreferences alias to update preferences for the authenticated user. */
    await gapi.client.merchantapi.accounts.emailPreferences.updateEmailPreferences(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        name: 'Test string',
        newsAndTips: 'Test string',
      },
    );
    /** Link the specified merchant to a GBP account for all countries. To run this method, you must have admin access to the Merchant Center account. If you don't have admin access, the request fails with the error message `User is not an administrator of account {ACCOUNT_ID}`. */
    await gapi.client.merchantapi.accounts.gbpAccounts.linkGbpAccount(
      {
        parent: 'Test string',
      },
      {
        gbpEmail: 'Test string',
      },
    );
    /** List the GBP accounts for a given merchant. */
    await gapi.client.merchantapi.accounts.gbpAccounts.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Claims a store's homepage. Executing this method requires admin access. If the homepage is already claimed, this will recheck the verification (unless the business is exempted from claiming, which also exempts from verification) and return a successful response. If ownership can no longer be verified, it will return an error, but it won't clear the claim. In case of failure, a canonical error message is returned: * PERMISSION_DENIED: User doesn't have the necessary permissions on this Merchant Center account. * FAILED_PRECONDITION: - The account is not a Merchant Center account. - Merchant Center account doesn't have a homepage. - Claiming failed (in this case the error message contains more details). */
    await gapi.client.merchantapi.accounts.homepage.claim(
      {
        name: 'Test string',
      },
      {
        overwrite: true,
      },
    );
    /** Retrieves a store's homepage. */
    await gapi.client.merchantapi.accounts.homepage.getHomepage({
      name: 'Test string',
    });
    /** Unclaims a store's homepage. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.homepage.unclaim(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a store's homepage. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.homepage.updateHomepage(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        claimed: true,
        name: 'Test string',
        uri: 'Test string',
      },
    );
    /** Lists all account issues of a Merchant Center account. When called on a multi-client account, this method only returns issues belonging to that account, not its sub-accounts. To retrieve issues for sub-accounts, you must first call the accounts.listSubaccounts method to obtain a list of sub-accounts, and then call `accounts.issues.list` for each sub-account individually. */
    await gapi.client.merchantapi.accounts.issues.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      timeZone: 'Test string',
    });
    /** Create the omnichannel settings for a given merchant. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.create(
      {
        parent: 'Test string',
      },
      {
        about: {
          state: 'Test string',
          uri: 'Test string',
        },
        inStock: {
          state: 'Test string',
          uri: 'Test string',
        },
        inventoryVerification: {
          contact: 'Test string',
          contactEmail: 'Test string',
          contactState: 'Test string',
          state: 'Test string',
        },
        lfpLink: {
          externalAccountId: 'Test string',
          lfpProvider: 'Test string',
          state: 'Test string',
        },
        lsfType: 'Test string',
        name: 'Test string',
        odo: {
          state: 'Test string',
          uri: 'Test string',
        },
        pickup: {
          state: 'Test string',
          uri: 'Test string',
        },
        regionCode: 'Test string',
      },
    );
    /** Get the omnichannel settings for a given merchant. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.get({
      name: 'Test string',
    });
    /** List all the omnichannel settings for a given merchant. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the omnichannel setting for a given merchant in a given country. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        about: {
          state: 'Test string',
          uri: 'Test string',
        },
        inStock: {
          state: 'Test string',
          uri: 'Test string',
        },
        inventoryVerification: {
          contact: 'Test string',
          contactEmail: 'Test string',
          contactState: 'Test string',
          state: 'Test string',
        },
        lfpLink: {
          externalAccountId: 'Test string',
          lfpProvider: 'Test string',
          state: 'Test string',
        },
        lsfType: 'Test string',
        name: 'Test string',
        odo: {
          state: 'Test string',
          uri: 'Test string',
        },
        pickup: {
          state: 'Test string',
          uri: 'Test string',
        },
        regionCode: 'Test string',
      },
    );
    /** Requests inventory verification for a given merchant in a given country. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.requestInventoryVerification(
      {
        name: 'Test string',
      },
      {},
    );
    /** Find the LFP provider candidates in a given country. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.lfpProviders.find(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Link the specified merchant to a LFP provider for the specified country. */
    await gapi.client.merchantapi.accounts.omnichannelSettings.lfpProviders.linkLfpProvider(
      {
        name: 'Test string',
      },
      {
        externalAccountId: 'Test string',
      },
    );
    /** Creates a new return policy for a given business. */
    await gapi.client.merchantapi.accounts.onlineReturnPolicies.create(
      {
        parent: 'Test string',
      },
      {
        acceptDefectiveOnly: true,
        acceptExchange: true,
        countries: ['Test string'],
        itemConditions: ['Test string'],
        label: 'Test string',
        name: 'Test string',
        policy: {
          days: 'Test string',
          type: 'Test string',
        },
        processRefundDays: 42,
        restockingFee: {
          fixedFee: {
            amountMicros: 'Test string',
            currencyCode: 'Test string',
          },
          microPercent: 42,
        },
        returnLabelSource: 'Test string',
        returnMethods: ['Test string'],
        returnPolicyId: 'Test string',
        returnPolicyUri: 'Test string',
        returnShippingFee: {
          fixedFee: {
            amountMicros: 'Test string',
            currencyCode: 'Test string',
          },
          type: 'Test string',
        },
        seasonalOverrides: [
          {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            label: 'Test string',
            returnDays: 42,
            returnUntilDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
        ],
      },
    );
    /** Deletes an existing return policy. */
    await gapi.client.merchantapi.accounts.onlineReturnPolicies.delete({
      name: 'Test string',
    });
    /** Gets an existing return policy for a given business. */
    await gapi.client.merchantapi.accounts.onlineReturnPolicies.get({
      name: 'Test string',
    });
    /** Lists all existing return policies for a given business. */
    await gapi.client.merchantapi.accounts.onlineReturnPolicies.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Disable participation in the specified program for the account. */
    await gapi.client.merchantapi.accounts.programs.disable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Enable participation in the specified program for the account. */
    await gapi.client.merchantapi.accounts.programs.enable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Retrieves the specified program for the account. */
    await gapi.client.merchantapi.accounts.programs.get({
      name: 'Test string',
    });
    /** Retrieves all programs for the account. */
    await gapi.client.merchantapi.accounts.programs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates `CheckoutSettings` for the given merchant. */
    await gapi.client.merchantapi.accounts.programs.checkoutSettings.create(
      {
        parent: 'Test string',
      },
      {
        effectiveEnrollmentState: 'Test string',
        effectiveReviewState: 'Test string',
        effectiveUriSettings: {
          cartUriTemplate: 'Test string',
          checkoutUriTemplate: 'Test string',
        },
        eligibleDestinations: ['Test string'],
        enrollmentState: 'Test string',
        name: 'Test string',
        reviewState: 'Test string',
        uriSettings: {
          cartUriTemplate: 'Test string',
          checkoutUriTemplate: 'Test string',
        },
      },
    );
    /** Deletes `CheckoutSettings` and unenrolls merchant from `Checkout` program. */
    await gapi.client.merchantapi.accounts.programs.checkoutSettings.deleteCheckoutSettings(
      {
        name: 'Test string',
      },
    );
    /** Gets `CheckoutSettings` for the given merchant. This includes information about review state, enrollment state and URL settings. */
    await gapi.client.merchantapi.accounts.programs.checkoutSettings.getCheckoutSettings(
      {
        name: 'Test string',
      },
    );
    /** Updates `CheckoutSettings` for the given merchant. */
    await gapi.client.merchantapi.accounts.programs.checkoutSettings.updateCheckoutSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        effectiveEnrollmentState: 'Test string',
        effectiveReviewState: 'Test string',
        effectiveUriSettings: {
          cartUriTemplate: 'Test string',
          checkoutUriTemplate: 'Test string',
        },
        eligibleDestinations: ['Test string'],
        enrollmentState: 'Test string',
        name: 'Test string',
        reviewState: 'Test string',
        uriSettings: {
          cartUriTemplate: 'Test string',
          checkoutUriTemplate: 'Test string',
        },
      },
    );
    /** Creates one or more regions in your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            region: {
              displayName: 'Test string',
              geotargetArea: {
                geotargetCriteriaIds: ['Test string'],
              },
              name: 'Test string',
              postalCodeArea: {
                postalCodes: [
                  {
                    begin: 'Test string',
                    end: 'Test string',
                  },
                ],
                regionCode: 'Test string',
              },
              regionalInventoryEligible: true,
              shippingEligible: true,
            },
            regionId: 'Test string',
          },
        ],
      },
    );
    /** Deletes multiple regions by name from your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.batchDelete(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            name: 'Test string',
          },
        ],
      },
    );
    /** Updates one or more regions in your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            region: {
              displayName: 'Test string',
              geotargetArea: {
                geotargetCriteriaIds: ['Test string'],
              },
              name: 'Test string',
              postalCodeArea: {
                postalCodes: [
                  {
                    begin: 'Test string',
                    end: 'Test string',
                  },
                ],
                regionCode: 'Test string',
              },
              regionalInventoryEligible: true,
              shippingEligible: true,
            },
            updateMask: 'Test string',
          },
        ],
      },
    );
    /** Creates a region definition in your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.create(
      {
        parent: 'Test string',
        regionId: 'Test string',
      },
      {
        displayName: 'Test string',
        geotargetArea: {
          geotargetCriteriaIds: ['Test string'],
        },
        name: 'Test string',
        postalCodeArea: {
          postalCodes: [
            {
              begin: 'Test string',
              end: 'Test string',
            },
          ],
          regionCode: 'Test string',
        },
        regionalInventoryEligible: true,
        shippingEligible: true,
      },
    );
    /** Deletes a region definition from your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.delete({
      name: 'Test string',
    });
    /** Retrieves a region defined in your Merchant Center account. */
    await gapi.client.merchantapi.accounts.regions.get({
      name: 'Test string',
    });
    /** Lists the regions in your Merchant Center account. */
    await gapi.client.merchantapi.accounts.regions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a region definition in your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        geotargetArea: {
          geotargetCriteriaIds: ['Test string'],
        },
        name: 'Test string',
        postalCodeArea: {
          postalCodes: [
            {
              begin: 'Test string',
              end: 'Test string',
            },
          ],
          regionCode: 'Test string',
        },
        regionalInventoryEligible: true,
        shippingEligible: true,
      },
    );
    /** Retrieve an account relationship. */
    await gapi.client.merchantapi.accounts.relationships.get({
      name: 'Test string',
    });
    /** List account relationships for the specified account. */
    await gapi.client.merchantapi.accounts.relationships.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the account relationship. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.relationships.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accountIdAlias: 'Test string',
        name: 'Test string',
        provider: 'Test string',
        providerDisplayName: 'Test string',
      },
    );
    /** Approve an account service proposal. */
    await gapi.client.merchantapi.accounts.services.approve(
      {
        name: 'Test string',
      },
      {},
    );
    /** Retrieve an account service. */
    await gapi.client.merchantapi.accounts.services.get({
      name: 'Test string',
    });
    /** List account services for the specified accounts. Supports filtering. */
    await gapi.client.merchantapi.accounts.services.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Propose an account service. */
    await gapi.client.merchantapi.accounts.services.propose(
      {
        parent: 'Test string',
      },
      {
        accountService: {
          accountAggregation: {},
          accountManagement: {},
          campaignsManagement: {},
          externalAccountId: 'Test string',
          handshake: {
            actor: 'Test string',
            approvalState: 'Test string',
          },
          localListingManagement: {},
          mutability: 'Test string',
          name: 'Test string',
          productsManagement: {},
          provider: 'Test string',
          providerDisplayName: 'Test string',
        },
        provider: 'Test string',
      },
    );
    /** Reject an account service (both proposed and approve services can be rejected). */
    await gapi.client.merchantapi.accounts.services.reject(
      {
        name: 'Test string',
      },
      {},
    );
    /** Retrieve shipping setting information. */
    await gapi.client.merchantapi.accounts.shippingSettings.getShippingSettings(
      {
        name: 'Test string',
      },
    );
    /** Replace the shipping setting of a business with the request shipping setting. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.shippingSettings.insert(
      {
        parent: 'Test string',
      },
      {
        etag: 'Test string',
        name: 'Test string',
        services: [
          {
            active: true,
            currencyCode: 'Test string',
            deliveryCountries: ['Test string'],
            deliveryTime: {
              cutoffTime: {
                hour: 42,
                minute: 42,
                timeZone: 'Test string',
              },
              handlingBusinessDayConfig: {
                businessDays: ['Test string'],
              },
              maxHandlingDays: 42,
              maxTransitDays: 42,
              minHandlingDays: 42,
              minTransitDays: 42,
              transitBusinessDayConfig: {
                businessDays: ['Test string'],
              },
              transitTimeTable: {
                postalCodeGroupNames: ['Test string'],
                rows: [
                  {
                    values: [
                      {
                        maxTransitDays: 42,
                        minTransitDays: 42,
                      },
                    ],
                  },
                ],
                transitTimeLabels: ['Test string'],
              },
              warehouseBasedDeliveryTimes: [
                {
                  carrier: 'Test string',
                  carrierService: 'Test string',
                  warehouse: 'Test string',
                },
              ],
            },
            loyaltyPrograms: [
              {
                loyaltyProgramTiers: [
                  {
                    tierLabel: 'Test string',
                  },
                ],
                programLabel: 'Test string',
              },
            ],
            minimumOrderValue: {
              amountMicros: 'Test string',
              currencyCode: 'Test string',
            },
            minimumOrderValueTable: {
              storeCodeSetWithMovs: [
                {
                  storeCodes: ['Test string'],
                  value: {
                    amountMicros: 'Test string',
                    currencyCode: 'Test string',
                  },
                },
              ],
            },
            rateGroups: [
              {
                applicableShippingLabels: ['Test string'],
                carrierRates: [
                  {
                    carrier: 'Test string',
                    carrierService: 'Test string',
                    flatAdjustment: {
                      amountMicros: 'Test string',
                      currencyCode: 'Test string',
                    },
                    name: 'Test string',
                    originPostalCode: 'Test string',
                    percentageAdjustment: 'Test string',
                  },
                ],
                mainTable: {
                  columnHeaders: {
                    locations: [
                      {
                        locationIds: ['Test string'],
                      },
                    ],
                    numberOfItems: ['Test string'],
                    postalCodeGroupNames: ['Test string'],
                    prices: [
                      {
                        amountMicros: 'Test string',
                        currencyCode: 'Test string',
                      },
                    ],
                    weights: [
                      {
                        amountMicros: 'Test string',
                        unit: 'Test string',
                      },
                    ],
                  },
                  name: 'Test string',
                  rowHeaders: {
                    locations: [
                      {
                        locationIds: ['Test string'],
                      },
                    ],
                    numberOfItems: ['Test string'],
                    postalCodeGroupNames: ['Test string'],
                    prices: [
                      {
                        amountMicros: 'Test string',
                        currencyCode: 'Test string',
                      },
                    ],
                    weights: [
                      {
                        amountMicros: 'Test string',
                        unit: 'Test string',
                      },
                    ],
                  },
                  rows: [
                    {
                      cells: [
                        {
                          carrierRate: 'Test string',
                          flatRate: {
                            amountMicros: 'Test string',
                            currencyCode: 'Test string',
                          },
                          noShipping: true,
                          pricePercentage: 'Test string',
                          subtable: 'Test string',
                        },
                      ],
                    },
                  ],
                },
                name: 'Test string',
                singleValue: {
                  carrierRate: 'Test string',
                  flatRate: {
                    amountMicros: 'Test string',
                    currencyCode: 'Test string',
                  },
                  noShipping: true,
                  pricePercentage: 'Test string',
                  subtable: 'Test string',
                },
                subtables: [
                  {
                    columnHeaders: {
                      locations: [
                        {
                          locationIds: ['Test string'],
                        },
                      ],
                      numberOfItems: ['Test string'],
                      postalCodeGroupNames: ['Test string'],
                      prices: [
                        {
                          amountMicros: 'Test string',
                          currencyCode: 'Test string',
                        },
                      ],
                      weights: [
                        {
                          amountMicros: 'Test string',
                          unit: 'Test string',
                        },
                      ],
                    },
                    name: 'Test string',
                    rowHeaders: {
                      locations: [
                        {
                          locationIds: ['Test string'],
                        },
                      ],
                      numberOfItems: ['Test string'],
                      postalCodeGroupNames: ['Test string'],
                      prices: [
                        {
                          amountMicros: 'Test string',
                          currencyCode: 'Test string',
                        },
                      ],
                      weights: [
                        {
                          amountMicros: 'Test string',
                          unit: 'Test string',
                        },
                      ],
                    },
                    rows: [
                      {
                        cells: [
                          {
                            carrierRate: 'Test string',
                            flatRate: {
                              amountMicros: 'Test string',
                              currencyCode: 'Test string',
                            },
                            noShipping: true,
                            pricePercentage: 'Test string',
                            subtable: 'Test string',
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
            serviceName: 'Test string',
            shipmentType: 'Test string',
            storeConfig: {
              cutoffConfig: {
                localCutoffTime: {
                  hour: 'Test string',
                  minute: 'Test string',
                },
                noDeliveryPostCutoff: true,
                storeCloseOffsetHours: 'Test string',
              },
              serviceRadius: {
                unit: 'Test string',
                value: 'Test string',
              },
              storeCodes: ['Test string'],
              storeServiceType: 'Test string',
            },
          },
        ],
        warehouses: [
          {
            businessDayConfig: {
              businessDays: ['Test string'],
            },
            cutoffTime: {
              hour: 42,
              minute: 42,
            },
            handlingDays: 'Test string',
            name: 'Test string',
            shippingAddress: {
              administrativeArea: 'Test string',
              city: 'Test string',
              postalCode: 'Test string',
              regionCode: 'Test string',
              streetAddress: 'Test string',
            },
          },
        ],
      },
    );
    /** Returns the state of a terms of service agreement. */
    await gapi.client.merchantapi.accounts.termsOfServiceAgreementStates.get({
      name: 'Test string',
    });
    /** Retrieves the state of the agreement for the application terms of service. Application terms of service covers permissions related to the usage of data provided through Merchant Center, CSS Center, Manufacturer Center, and more. */
    await gapi.client.merchantapi.accounts.termsOfServiceAgreementStates.retrieveForApplication(
      {
        parent: 'Test string',
      },
    );
    /** Creates a Merchant Center account user. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.users.create(
      {
        parent: 'Test string',
        userId: 'Test string',
      },
      {
        accessRights: ['Test string'],
        name: 'Test string',
        state: 'Test string',
      },
    );
    /** Deletes a Merchant Center account user. Executing this method requires admin access. The user to be deleted can't be the last admin user of that account. Also a user is protected from deletion if it is managed by Business Manager" */
    await gapi.client.merchantapi.accounts.users.delete({
      name: 'Test string',
    });
    /** Retrieves a Merchant Center account user. */
    await gapi.client.merchantapi.accounts.users.get({
      name: 'Test string',
    });
    /** Lists all users of a Merchant Center account. */
    await gapi.client.merchantapi.accounts.users.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Merchant Center account user. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.users.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accessRights: ['Test string'],
        name: 'Test string',
        state: 'Test string',
      },
    );
    /** Accepts a `TermsOfService`. Executing this method requires admin access. */
    await gapi.client.merchantapi.termsOfService.accept({
      account: 'Test string',
      name: 'Test string',
      regionCode: 'Test string',
    });
    /** Retrieves the `TermsOfService` associated with the provided version. */
    await gapi.client.merchantapi.termsOfService.get({
      name: 'Test string',
    });
    /** Retrieves the latest version of the `TermsOfService` for a given `kind` and `region_code`. */
    await gapi.client.merchantapi.termsOfService.retrieveLatest({
      kind: 'Test string',
      regionCode: 'Test string',
    });
  }
});
