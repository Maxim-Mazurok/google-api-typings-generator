/* This is stub file for gapi.client.sqladmin definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220224

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('sqladmin', 'v1', () => {
        /** now we can use gapi.client.sqladmin */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
            'https://www.googleapis.com/auth/cloud-platform',
            /** Manage your Google SQL Service instances */
            'https://www.googleapis.com/auth/sqlservice.admin',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Deletes the backup taken by a backup run. */
        await gapi.client.sqladmin.backupRuns.delete({
            id: "Test string",
            instance: "Test string",
            project: "Test string",
        });
        /** Retrieves a resource containing information about a backup run. */
        await gapi.client.sqladmin.backupRuns.get({
            id: "Test string",
            instance: "Test string",
            project: "Test string",
        });
        /** Creates a new backup run on demand. */
        await gapi.client.sqladmin.backupRuns.insert({
            instance: "Test string",
            project: "Test string",
        }, {
            backupKind: "Test string",
            description: "Test string",
            diskEncryptionConfiguration: {
                kind: "Test string",
                kmsKeyName: "Test string",
            },
            diskEncryptionStatus: {
                kind: "Test string",
                kmsKeyVersionName: "Test string",
            },
            endTime: "Test string",
            enqueuedTime: "Test string",
            error: {
                code: "Test string",
                kind: "Test string",
                message: "Test string",
            },
            id: "Test string",
            instance: "Test string",
            kind: "Test string",
            location: "Test string",
            selfLink: "Test string",
            startTime: "Test string",
            status: "Test string",
            type: "Test string",
            windowStartTime: "Test string",
        });
        /** Lists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time. */
        await gapi.client.sqladmin.backupRuns.list({
            instance: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as
         * themselves when connecting to the database.
         */
        await gapi.client.sqladmin.connect.generateEphemeralCert({
            instance: "Test string",
            project: "Test string",
        }, {
            access_token: "Test string",
            public_key: "Test string",
            readTime: "Test string",
            validDuration: "Test string",
        });
        /** Retrieves connect settings about a Cloud SQL instance. */
        await gapi.client.sqladmin.connect.get({
            instance: "Test string",
            project: "Test string",
            readTime: "Test string",
        });
        /** Deletes a database from a Cloud SQL instance. */
        await gapi.client.sqladmin.databases.delete({
            database: "Test string",
            instance: "Test string",
            project: "Test string",
        });
        /** Retrieves a resource containing information about a database inside a Cloud SQL instance. */
        await gapi.client.sqladmin.databases.get({
            database: "Test string",
            instance: "Test string",
            project: "Test string",
        });
        /** Inserts a resource containing information about a database inside a Cloud SQL instance. */
        await gapi.client.sqladmin.databases.insert({
            instance: "Test string",
            project: "Test string",
        }, {
            charset: "Test string",
            collation: "Test string",
            etag: "Test string",
            instance: "Test string",
            kind: "Test string",
            name: "Test string",
            project: "Test string",
            selfLink: "Test string",
            sqlserverDatabaseDetails: {
                compatibilityLevel: 42,
                recoveryModel: "Test string",
            },
        });
        /** Lists databases in the specified Cloud SQL instance. */
        await gapi.client.sqladmin.databases.list({
            instance: "Test string",
            project: "Test string",
        });
        /** Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics. */
        await gapi.client.sqladmin.databases.patch({
            database: "Test string",
            instance: "Test string",
            project: "Test string",
        }, {
            charset: "Test string",
            collation: "Test string",
            etag: "Test string",
            instance: "Test string",
            kind: "Test string",
            name: "Test string",
            project: "Test string",
            selfLink: "Test string",
            sqlserverDatabaseDetails: {
                compatibilityLevel: 42,
                recoveryModel: "Test string",
            },
        });
        /** Updates a resource containing information about a database inside a Cloud SQL instance. */
        await gapi.client.sqladmin.databases.update({
            database: "Test string",
            instance: "Test string",
            project: "Test string",
        }, {
            charset: "Test string",
            collation: "Test string",
            etag: "Test string",
            instance: "Test string",
            kind: "Test string",
            name: "Test string",
            project: "Test string",
            selfLink: "Test string",
            sqlserverDatabaseDetails: {
                compatibilityLevel: 42,
                recoveryModel: "Test string",
            },
        });
        /** Lists all available database flags for Cloud SQL instances. */
        await gapi.client.sqladmin.flags.list({
            databaseVersion: "Test string",
        });
        /**
         * Adds a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in
         * a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.
         */
        await gapi.client.sqladmin.instances.addServerCa({
            instance: "Test string",
            project: "Test string",
        });
        /** Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart. */
        await gapi.client.sqladmin.instances.clone({
            instance: "Test string",
            project: "Test string",
        }, {
            cloneContext: {
                allocatedIpRange: "Test string",
                binLogCoordinates: {
                    binLogFileName: "Test string",
                    binLogPosition: "Test string",
                    kind: "Test string",
                },
                destinationInstanceName: "Test string",
                kind: "Test string",
                pitrTimestampMs: "Test string",
                pointInTime: "Test string",
            },
        });
        /** Deletes a Cloud SQL instance. */
        await gapi.client.sqladmin.instances.delete({
            instance: "Test string",
            project: "Test string",
        });
        /** Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server. */
        await gapi.client.sqladmin.instances.demoteMaster({
            instance: "Test string",
            project: "Test string",
        }, {
            demoteMasterContext: {
                kind: "Test string",
                masterInstanceName: "Test string",
                replicaConfiguration: {
                    kind: "Test string",
                    mysqlReplicaConfiguration: {
                        caCertificate: "Test string",
                        clientCertificate: "Test string",
                        clientKey: "Test string",
                        kind: "Test string",
                        password: "Test string",
                        username: "Test string",
                    },
                },
                skipReplicationSetup: true,
                verifyGtidConsistency: true,
            },
        });
        /** Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file. */
        await gapi.client.sqladmin.instances.export({
            instance: "Test string",
            project: "Test string",
        }, {
            exportContext: {
                csvExportOptions: {
                    escapeCharacter: "Test string",
                    fieldsTerminatedBy: "Test string",
                    linesTerminatedBy: "Test string",
                    quoteCharacter: "Test string",
                    selectQuery: "Test string",
                },
                databases: [
                    "Test string"                ],
                fileType: "Test string",
                kind: "Test string",
                offload: true,
                sqlExportOptions: {
                    mysqlExportOptions: {
                        masterData: 42,
                    },
                    schemaOnly: true,
                    tables: [
                        "Test string"                    ],
                },
                uri: "Test string",
            },
        });
        /**
         * Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more
         * information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only),
         * this causes the instance to failover to its failover replica instance.
         */
        await gapi.client.sqladmin.instances.failover({
            instance: "Test string",
            project: "Test string",
        }, {
            failoverContext: {
                kind: "Test string",
                settingsVersion: "Test string",
            },
        });
        /** Retrieves a resource containing information about a Cloud SQL instance. */
        await gapi.client.sqladmin.instances.get({
            instance: "Test string",
            project: "Test string",
        });
        /** Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage. */
        await gapi.client.sqladmin.instances.import({
            instance: "Test string",
            project: "Test string",
        }, {
            importContext: {
                bakImportOptions: {
                    encryptionOptions: {
                        certPath: "Test string",
                        pvkPassword: "Test string",
                        pvkPath: "Test string",
                    },
                },
                csvImportOptions: {
                    columns: [
                        "Test string"                    ],
                    escapeCharacter: "Test string",
                    fieldsTerminatedBy: "Test string",
                    linesTerminatedBy: "Test string",
                    quoteCharacter: "Test string",
                    table: "Test string",
                },
                database: "Test string",
                fileType: "Test string",
                importUser: "Test string",
                kind: "Test string",
                uri: "Test string",
            },
        });
        /** Creates a new Cloud SQL instance. */
        await gapi.client.sqladmin.instances.insert({
            project: "Test string",
        }, {
            availableMaintenanceVersions: [
                "Test string"            ],
            backendType: "Test string",
            connectionName: "Test string",
            createTime: "Test string",
            currentDiskSize: "Test string",
            databaseInstalledVersion: "Test string",
            databaseVersion: "Test string",
            diskEncryptionConfiguration: {
                kind: "Test string",
                kmsKeyName: "Test string",
            },
            diskEncryptionStatus: {
                kind: "Test string",
                kmsKeyVersionName: "Test string",
            },
            etag: "Test string",
            failoverReplica: {
                available: true,
                name: "Test string",
            },
            gceZone: "Test string",
            instanceType: "Test string",
            ipAddresses: [
                {
                    ipAddress: "Test string",
                    timeToRetire: "Test string",
                    type: "Test string",
                }            ],
            ipv6Address: "Test string",
            kind: "Test string",
            maintenanceVersion: "Test string",
            masterInstanceName: "Test string",
            maxDiskSize: "Test string",
            name: "Test string",
            onPremisesConfiguration: {
                caCertificate: "Test string",
                clientCertificate: "Test string",
                clientKey: "Test string",
                dumpFilePath: "Test string",
                hostPort: "Test string",
                kind: "Test string",
                password: "Test string",
                sourceInstance: {
                    name: "Test string",
                    project: "Test string",
                    region: "Test string",
                },
                username: "Test string",
            },
            outOfDiskReport: {
                sqlMinRecommendedIncreaseSizeGb: 42,
                sqlOutOfDiskState: "Test string",
            },
            project: "Test string",
            region: "Test string",
            replicaConfiguration: {
                failoverTarget: true,
                kind: "Test string",
                mysqlReplicaConfiguration: {
                    caCertificate: "Test string",
                    clientCertificate: "Test string",
                    clientKey: "Test string",
                    connectRetryInterval: 42,
                    dumpFilePath: "Test string",
                    kind: "Test string",
                    masterHeartbeatPeriod: "Test string",
                    password: "Test string",
                    sslCipher: "Test string",
                    username: "Test string",
                    verifyServerCertificate: true,
                },
            },
            replicaNames: [
                "Test string"            ],
            rootPassword: "Test string",
            satisfiesPzs: true,
            scheduledMaintenance: {
                canDefer: true,
                canReschedule: true,
                scheduleDeadlineTime: "Test string",
                startTime: "Test string",
            },
            secondaryGceZone: "Test string",
            selfLink: "Test string",
            serverCaCert: {
                cert: "Test string",
                certSerialNumber: "Test string",
                commonName: "Test string",
                createTime: "Test string",
                expirationTime: "Test string",
                instance: "Test string",
                kind: "Test string",
                selfLink: "Test string",
                sha1Fingerprint: "Test string",
            },
            serviceAccountEmailAddress: "Test string",
            settings: {
                activationPolicy: "Test string",
                activeDirectoryConfig: {
                    domain: "Test string",
                    kind: "Test string",
                },
                authorizedGaeApplications: [
                    "Test string"                ],
                availabilityType: "Test string",
                backupConfiguration: {
                    backupRetentionSettings: {
                        retainedBackups: 42,
                        retentionUnit: "Test string",
                    },
                    binaryLogEnabled: true,
                    enabled: true,
                    kind: "Test string",
                    location: "Test string",
                    pointInTimeRecoveryEnabled: true,
                    replicationLogArchivingEnabled: true,
                    startTime: "Test string",
                    transactionLogRetentionDays: 42,
                },
                collation: "Test string",
                crashSafeReplicationEnabled: true,
                databaseFlags: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                databaseReplicationEnabled: true,
                dataDiskSizeGb: "Test string",
                dataDiskType: "Test string",
                denyMaintenancePeriods: [
                    {
                        endDate: "Test string",
                        startDate: "Test string",
                        time: "Test string",
                    }                ],
                insightsConfig: {
                    queryInsightsEnabled: true,
                    queryPlansPerMinute: 42,
                    queryStringLength: 42,
                    recordApplicationTags: true,
                    recordClientAddress: true,
                },
                ipConfiguration: {
                    allocatedIpRange: "Test string",
                    authorizedNetworks: [
                        {
                            expirationTime: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    ipv4Enabled: true,
                    privateNetwork: "Test string",
                    requireSsl: true,
                },
                kind: "Test string",
                locationPreference: {
                    followGaeApplication: "Test string",
                    kind: "Test string",
                    secondaryZone: "Test string",
                    zone: "Test string",
                },
                maintenanceWindow: {
                    day: 42,
                    hour: 42,
                    kind: "Test string",
                    updateTrack: "Test string",
                },
                passwordValidationPolicy: {
                    complexity: "Test string",
                    disallowUsernameSubstring: true,
                    minLength: 42,
                    passwordChangeInterval: "Test string",
                    reuseInterval: 42,
                },
                pricingPlan: "Test string",
                replicationType: "Test string",
                settingsVersion: "Test string",
                sqlServerAuditConfig: {
                    bucket: "Test string",
                    kind: "Test string",
                },
                storageAutoResize: true,
                storageAutoResizeLimit: "Test string",
                tier: "Test string",
                userLabels: {
                    A: "Test string"                },
            },
            state: "Test string",
            suspensionReason: [
                "Test string"            ],
        });
        /** Lists instances under a given project. */
        await gapi.client.sqladmin.instances.list({
            filter: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in
         * use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.
         */
        await gapi.client.sqladmin.instances.listServerCas({
            instance: "Test string",
            project: "Test string",
        });
        /** Updates settings of a Cloud SQL instance. This method supports patch semantics. */
        await gapi.client.sqladmin.instances.patch({
            instance: "Test string",
            project: "Test string",
        }, {
            availableMaintenanceVersions: [
                "Test string"            ],
            backendType: "Test string",
            connectionName: "Test string",
            createTime: "Test string",
            currentDiskSize: "Test string",
            databaseInstalledVersion: "Test string",
            databaseVersion: "Test string",
            diskEncryptionConfiguration: {
                kind: "Test string",
                kmsKeyName: "Test string",
            },
            diskEncryptionStatus: {
                kind: "Test string",
                kmsKeyVersionName: "Test string",
            },
            etag: "Test string",
            failoverReplica: {
                available: true,
                name: "Test string",
            },
            gceZone: "Test string",
            instanceType: "Test string",
            ipAddresses: [
                {
                    ipAddress: "Test string",
                    timeToRetire: "Test string",
                    type: "Test string",
                }            ],
            ipv6Address: "Test string",
            kind: "Test string",
            maintenanceVersion: "Test string",
            masterInstanceName: "Test string",
            maxDiskSize: "Test string",
            name: "Test string",
            onPremisesConfiguration: {
                caCertificate: "Test string",
                clientCertificate: "Test string",
                clientKey: "Test string",
                dumpFilePath: "Test string",
                hostPort: "Test string",
                kind: "Test string",
                password: "Test string",
                sourceInstance: {
                    name: "Test string",
                    project: "Test string",
                    region: "Test string",
                },
                username: "Test string",
            },
            outOfDiskReport: {
                sqlMinRecommendedIncreaseSizeGb: 42,
                sqlOutOfDiskState: "Test string",
            },
            project: "Test string",
            region: "Test string",
            replicaConfiguration: {
                failoverTarget: true,
                kind: "Test string",
                mysqlReplicaConfiguration: {
                    caCertificate: "Test string",
                    clientCertificate: "Test string",
                    clientKey: "Test string",
                    connectRetryInterval: 42,
                    dumpFilePath: "Test string",
                    kind: "Test string",
                    masterHeartbeatPeriod: "Test string",
                    password: "Test string",
                    sslCipher: "Test string",
                    username: "Test string",
                    verifyServerCertificate: true,
                },
            },
            replicaNames: [
                "Test string"            ],
            rootPassword: "Test string",
            satisfiesPzs: true,
            scheduledMaintenance: {
                canDefer: true,
                canReschedule: true,
                scheduleDeadlineTime: "Test string",
                startTime: "Test string",
            },
            secondaryGceZone: "Test string",
            selfLink: "Test string",
            serverCaCert: {
                cert: "Test string",
                certSerialNumber: "Test string",
                commonName: "Test string",
                createTime: "Test string",
                expirationTime: "Test string",
                instance: "Test string",
                kind: "Test string",
                selfLink: "Test string",
                sha1Fingerprint: "Test string",
            },
            serviceAccountEmailAddress: "Test string",
            settings: {
                activationPolicy: "Test string",
                activeDirectoryConfig: {
                    domain: "Test string",
                    kind: "Test string",
                },
                authorizedGaeApplications: [
                    "Test string"                ],
                availabilityType: "Test string",
                backupConfiguration: {
                    backupRetentionSettings: {
                        retainedBackups: 42,
                        retentionUnit: "Test string",
                    },
                    binaryLogEnabled: true,
                    enabled: true,
                    kind: "Test string",
                    location: "Test string",
                    pointInTimeRecoveryEnabled: true,
                    replicationLogArchivingEnabled: true,
                    startTime: "Test string",
                    transactionLogRetentionDays: 42,
                },
                collation: "Test string",
                crashSafeReplicationEnabled: true,
                databaseFlags: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                databaseReplicationEnabled: true,
                dataDiskSizeGb: "Test string",
                dataDiskType: "Test string",
                denyMaintenancePeriods: [
                    {
                        endDate: "Test string",
                        startDate: "Test string",
                        time: "Test string",
                    }                ],
                insightsConfig: {
                    queryInsightsEnabled: true,
                    queryPlansPerMinute: 42,
                    queryStringLength: 42,
                    recordApplicationTags: true,
                    recordClientAddress: true,
                },
                ipConfiguration: {
                    allocatedIpRange: "Test string",
                    authorizedNetworks: [
                        {
                            expirationTime: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    ipv4Enabled: true,
                    privateNetwork: "Test string",
                    requireSsl: true,
                },
                kind: "Test string",
                locationPreference: {
                    followGaeApplication: "Test string",
                    kind: "Test string",
                    secondaryZone: "Test string",
                    zone: "Test string",
                },
                maintenanceWindow: {
                    day: 42,
                    hour: 42,
                    kind: "Test string",
                    updateTrack: "Test string",
                },
                passwordValidationPolicy: {
                    complexity: "Test string",
                    disallowUsernameSubstring: true,
                    minLength: 42,
                    passwordChangeInterval: "Test string",
                    reuseInterval: 42,
                },
                pricingPlan: "Test string",
                replicationType: "Test string",
                settingsVersion: "Test string",
                sqlServerAuditConfig: {
                    bucket: "Test string",
                    kind: "Test string",
                },
                storageAutoResize: true,
                storageAutoResizeLimit: "Test string",
                tier: "Test string",
                userLabels: {
                    A: "Test string"                },
            },
            state: "Test string",
            suspensionReason: [
                "Test string"            ],
        });
        /** Promotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart. */
        await gapi.client.sqladmin.instances.promoteReplica({
            instance: "Test string",
            project: "Test string",
        });
        /** Deletes all client certificates and generates a new server SSL certificate for the instance. */
        await gapi.client.sqladmin.instances.resetSslConfig({
            instance: "Test string",
            project: "Test string",
        });
        /** Restarts a Cloud SQL instance. */
        await gapi.client.sqladmin.instances.restart({
            instance: "Test string",
            project: "Test string",
        });
        /** Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart. */
        await gapi.client.sqladmin.instances.restoreBackup({
            instance: "Test string",
            project: "Test string",
        }, {
            restoreBackupContext: {
                backupRunId: "Test string",
                instanceId: "Test string",
                kind: "Test string",
                project: "Test string",
            },
        });
        /** Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method. */
        await gapi.client.sqladmin.instances.rotateServerCa({
            instance: "Test string",
            project: "Test string",
        }, {
            rotateServerCaContext: {
                kind: "Test string",
                nextVersion: "Test string",
            },
        });
        /** Starts the replication in the read replica instance. */
        await gapi.client.sqladmin.instances.startReplica({
            instance: "Test string",
            project: "Test string",
        });
        /** Stops the replication in the read replica instance. */
        await gapi.client.sqladmin.instances.stopReplica({
            instance: "Test string",
            project: "Test string",
        });
        /** Truncate MySQL general and slow query log tables MySQL only. */
        await gapi.client.sqladmin.instances.truncateLog({
            instance: "Test string",
            project: "Test string",
        }, {
            truncateLogContext: {
                kind: "Test string",
                logType: "Test string",
            },
        });
        /** Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart. */
        await gapi.client.sqladmin.instances.update({
            instance: "Test string",
            project: "Test string",
        }, {
            availableMaintenanceVersions: [
                "Test string"            ],
            backendType: "Test string",
            connectionName: "Test string",
            createTime: "Test string",
            currentDiskSize: "Test string",
            databaseInstalledVersion: "Test string",
            databaseVersion: "Test string",
            diskEncryptionConfiguration: {
                kind: "Test string",
                kmsKeyName: "Test string",
            },
            diskEncryptionStatus: {
                kind: "Test string",
                kmsKeyVersionName: "Test string",
            },
            etag: "Test string",
            failoverReplica: {
                available: true,
                name: "Test string",
            },
            gceZone: "Test string",
            instanceType: "Test string",
            ipAddresses: [
                {
                    ipAddress: "Test string",
                    timeToRetire: "Test string",
                    type: "Test string",
                }            ],
            ipv6Address: "Test string",
            kind: "Test string",
            maintenanceVersion: "Test string",
            masterInstanceName: "Test string",
            maxDiskSize: "Test string",
            name: "Test string",
            onPremisesConfiguration: {
                caCertificate: "Test string",
                clientCertificate: "Test string",
                clientKey: "Test string",
                dumpFilePath: "Test string",
                hostPort: "Test string",
                kind: "Test string",
                password: "Test string",
                sourceInstance: {
                    name: "Test string",
                    project: "Test string",
                    region: "Test string",
                },
                username: "Test string",
            },
            outOfDiskReport: {
                sqlMinRecommendedIncreaseSizeGb: 42,
                sqlOutOfDiskState: "Test string",
            },
            project: "Test string",
            region: "Test string",
            replicaConfiguration: {
                failoverTarget: true,
                kind: "Test string",
                mysqlReplicaConfiguration: {
                    caCertificate: "Test string",
                    clientCertificate: "Test string",
                    clientKey: "Test string",
                    connectRetryInterval: 42,
                    dumpFilePath: "Test string",
                    kind: "Test string",
                    masterHeartbeatPeriod: "Test string",
                    password: "Test string",
                    sslCipher: "Test string",
                    username: "Test string",
                    verifyServerCertificate: true,
                },
            },
            replicaNames: [
                "Test string"            ],
            rootPassword: "Test string",
            satisfiesPzs: true,
            scheduledMaintenance: {
                canDefer: true,
                canReschedule: true,
                scheduleDeadlineTime: "Test string",
                startTime: "Test string",
            },
            secondaryGceZone: "Test string",
            selfLink: "Test string",
            serverCaCert: {
                cert: "Test string",
                certSerialNumber: "Test string",
                commonName: "Test string",
                createTime: "Test string",
                expirationTime: "Test string",
                instance: "Test string",
                kind: "Test string",
                selfLink: "Test string",
                sha1Fingerprint: "Test string",
            },
            serviceAccountEmailAddress: "Test string",
            settings: {
                activationPolicy: "Test string",
                activeDirectoryConfig: {
                    domain: "Test string",
                    kind: "Test string",
                },
                authorizedGaeApplications: [
                    "Test string"                ],
                availabilityType: "Test string",
                backupConfiguration: {
                    backupRetentionSettings: {
                        retainedBackups: 42,
                        retentionUnit: "Test string",
                    },
                    binaryLogEnabled: true,
                    enabled: true,
                    kind: "Test string",
                    location: "Test string",
                    pointInTimeRecoveryEnabled: true,
                    replicationLogArchivingEnabled: true,
                    startTime: "Test string",
                    transactionLogRetentionDays: 42,
                },
                collation: "Test string",
                crashSafeReplicationEnabled: true,
                databaseFlags: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                databaseReplicationEnabled: true,
                dataDiskSizeGb: "Test string",
                dataDiskType: "Test string",
                denyMaintenancePeriods: [
                    {
                        endDate: "Test string",
                        startDate: "Test string",
                        time: "Test string",
                    }                ],
                insightsConfig: {
                    queryInsightsEnabled: true,
                    queryPlansPerMinute: 42,
                    queryStringLength: 42,
                    recordApplicationTags: true,
                    recordClientAddress: true,
                },
                ipConfiguration: {
                    allocatedIpRange: "Test string",
                    authorizedNetworks: [
                        {
                            expirationTime: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    ipv4Enabled: true,
                    privateNetwork: "Test string",
                    requireSsl: true,
                },
                kind: "Test string",
                locationPreference: {
                    followGaeApplication: "Test string",
                    kind: "Test string",
                    secondaryZone: "Test string",
                    zone: "Test string",
                },
                maintenanceWindow: {
                    day: 42,
                    hour: 42,
                    kind: "Test string",
                    updateTrack: "Test string",
                },
                passwordValidationPolicy: {
                    complexity: "Test string",
                    disallowUsernameSubstring: true,
                    minLength: 42,
                    passwordChangeInterval: "Test string",
                    reuseInterval: 42,
                },
                pricingPlan: "Test string",
                replicationType: "Test string",
                settingsVersion: "Test string",
                sqlServerAuditConfig: {
                    bucket: "Test string",
                    kind: "Test string",
                },
                storageAutoResize: true,
                storageAutoResizeLimit: "Test string",
                tier: "Test string",
                userLabels: {
                    A: "Test string"                },
            },
            state: "Test string",
            suspensionReason: [
                "Test string"            ],
        });
        /** Retrieves an instance operation that has been performed on an instance. */
        await gapi.client.sqladmin.operations.get({
            operation: "Test string",
            project: "Test string",
        });
        /** Lists all instance operations that have been performed on the given Cloud SQL instance in the reverse chronological order of the start time. */
        await gapi.client.sqladmin.operations.list({
            instance: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as
         * themselves when connecting to the database.
         */
        await gapi.client.sqladmin.sslCerts.createEphemeral({
            instance: "Test string",
            project: "Test string",
        }, {
            access_token: "Test string",
            public_key: "Test string",
        });
        /** Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted. */
        await gapi.client.sqladmin.sslCerts.delete({
            instance: "Test string",
            project: "Test string",
            sha1Fingerprint: "Test string",
        });
        /** Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation. */
        await gapi.client.sqladmin.sslCerts.get({
            instance: "Test string",
            project: "Test string",
            sha1Fingerprint: "Test string",
        });
        /** Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted. */
        await gapi.client.sqladmin.sslCerts.insert({
            instance: "Test string",
            project: "Test string",
        }, {
            commonName: "Test string",
        });
        /** Lists all of the current SSL certificates for the instance. */
        await gapi.client.sqladmin.sslCerts.list({
            instance: "Test string",
            project: "Test string",
        });
        /** Lists all available machine types (tiers) for Cloud SQL, for example, `db-custom-1-3840`. For more information, see https://cloud.google.com/sql/pricing. */
        await gapi.client.sqladmin.tiers.list({
            project: "Test string",
        });
        /** Deletes a user from a Cloud SQL instance. */
        await gapi.client.sqladmin.users.delete({
            host: "Test string",
            instance: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Creates a new user in a Cloud SQL instance. */
        await gapi.client.sqladmin.users.insert({
            instance: "Test string",
            project: "Test string",
        }, {
            etag: "Test string",
            host: "Test string",
            instance: "Test string",
            kind: "Test string",
            name: "Test string",
            password: "Test string",
            passwordPolicy: {
                allowedFailedAttempts: 42,
                enableFailedAttemptsCheck: true,
                passwordExpirationDuration: "Test string",
                status: {
                    locked: true,
                    passwordExpirationTime: "Test string",
                },
            },
            project: "Test string",
            sqlserverUserDetails: {
                disabled: true,
                serverRoles: [
                    "Test string"                ],
            },
            type: "Test string",
        });
        /** Lists users in the specified Cloud SQL instance. */
        await gapi.client.sqladmin.users.list({
            instance: "Test string",
            project: "Test string",
        });
        /** Updates an existing user in a Cloud SQL instance. */
        await gapi.client.sqladmin.users.update({
            host: "Test string",
            instance: "Test string",
            name: "Test string",
            project: "Test string",
        }, {
            etag: "Test string",
            host: "Test string",
            instance: "Test string",
            kind: "Test string",
            name: "Test string",
            password: "Test string",
            passwordPolicy: {
                allowedFailedAttempts: 42,
                enableFailedAttemptsCheck: true,
                passwordExpirationDuration: "Test string",
                status: {
                    locked: true,
                    passwordExpirationTime: "Test string",
                },
            },
            project: "Test string",
            sqlserverUserDetails: {
                disabled: true,
                serverRoles: [
                    "Test string"                ],
            },
            type: "Test string",
        });
    }
});
