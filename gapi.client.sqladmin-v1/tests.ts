/* This is stub file for gapi.client.sqladmin-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250521

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://sqladmin.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.sql */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** Manage your Google SQL Service instances */
    'https://www.googleapis.com/auth/sqlservice.admin',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Deletes the backup taken by a backup run. */
    await gapi.client.sql.backupRuns.delete({
      id: 'Test string',
      instance: 'Test string',
      project: 'Test string',
    });
    /** Retrieves a resource containing information about a backup run. */
    await gapi.client.sql.backupRuns.get({
      id: 'Test string',
      instance: 'Test string',
      project: 'Test string',
    });
    /** Creates a new backup run on demand. */
    await gapi.client.sql.backupRuns.insert(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        backupKind: 'Test string',
        databaseVersion: 'Test string',
        description: 'Test string',
        diskEncryptionConfiguration: {
          kind: 'Test string',
          kmsKeyName: 'Test string',
        },
        diskEncryptionStatus: {
          kind: 'Test string',
          kmsKeyVersionName: 'Test string',
        },
        endTime: 'Test string',
        enqueuedTime: 'Test string',
        error: {
          code: 'Test string',
          kind: 'Test string',
          message: 'Test string',
        },
        id: 'Test string',
        instance: 'Test string',
        kind: 'Test string',
        location: 'Test string',
        maxChargeableBytes: 'Test string',
        selfLink: 'Test string',
        startTime: 'Test string',
        status: 'Test string',
        timeZone: 'Test string',
        type: 'Test string',
        windowStartTime: 'Test string',
      },
    );
    /** Lists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time. */
    await gapi.client.sql.backupRuns.list({
      instance: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Creates a backup for a Cloud SQL instance. This API can be used only to create on-demand backups. */
    await gapi.client.sql.Backups.CreateBackup(
      {
        parent: 'Test string',
      },
      {
        backupInterval: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
        backupKind: 'Test string',
        backupRun: 'Test string',
        databaseVersion: 'Test string',
        description: 'Test string',
        error: {
          code: 'Test string',
          kind: 'Test string',
          message: 'Test string',
        },
        expiryTime: 'Test string',
        instance: 'Test string',
        instanceDeletionTime: 'Test string',
        instanceSettings: {
          availableMaintenanceVersions: ['Test string'],
          backendType: 'Test string',
          clearNetwork: true,
          connectionName: 'Test string',
          createTime: 'Test string',
          currentDiskSize: 'Test string',
          databaseInstalledVersion: 'Test string',
          databaseVersion: 'Test string',
          diskEncryptionConfiguration: {
            kind: 'Test string',
            kmsKeyName: 'Test string',
          },
          diskEncryptionStatus: {
            kind: 'Test string',
            kmsKeyVersionName: 'Test string',
          },
          dnsName: 'Test string',
          dnsNames: [
            {
              connectionType: 'Test string',
              dnsScope: 'Test string',
              name: 'Test string',
            },
          ],
          etag: 'Test string',
          failoverReplica: {
            available: true,
            name: 'Test string',
          },
          gceZone: 'Test string',
          geminiConfig: {
            activeQueryEnabled: true,
            entitled: true,
            flagRecommenderEnabled: true,
            googleVacuumMgmtEnabled: true,
            indexAdvisorEnabled: true,
            oomSessionCancelEnabled: true,
          },
          includeReplicasForMajorVersionUpgrade: true,
          instanceType: 'Test string',
          ipAddresses: [
            {
              ipAddress: 'Test string',
              timeToRetire: 'Test string',
              type: 'Test string',
            },
          ],
          ipv6Address: 'Test string',
          kind: 'Test string',
          maintenanceVersion: 'Test string',
          masterInstanceName: 'Test string',
          maxDiskSize: 'Test string',
          name: 'Test string',
          nodeCount: 42,
          nodes: [
            {
              dnsName: 'Test string',
              dnsNames: [
                {
                  connectionType: 'Test string',
                  dnsScope: 'Test string',
                  name: 'Test string',
                },
              ],
              gceZone: 'Test string',
              ipAddresses: [
                {
                  ipAddress: 'Test string',
                  timeToRetire: 'Test string',
                  type: 'Test string',
                },
              ],
              name: 'Test string',
              state: 'Test string',
            },
          ],
          onPremisesConfiguration: {
            caCertificate: 'Test string',
            clientCertificate: 'Test string',
            clientKey: 'Test string',
            dumpFilePath: 'Test string',
            hostPort: 'Test string',
            kind: 'Test string',
            password: 'Test string',
            selectedObjects: [
              {
                database: 'Test string',
              },
            ],
            sourceInstance: {
              name: 'Test string',
              project: 'Test string',
              region: 'Test string',
            },
            sslOption: 'Test string',
            username: 'Test string',
          },
          outOfDiskReport: {
            sqlMinRecommendedIncreaseSizeGb: 42,
            sqlOutOfDiskState: 'Test string',
          },
          primaryDnsName: 'Test string',
          project: 'Test string',
          pscServiceAttachmentLink: 'Test string',
          region: 'Test string',
          replicaConfiguration: {
            cascadableReplica: true,
            failoverTarget: true,
            kind: 'Test string',
            mysqlReplicaConfiguration: {
              caCertificate: 'Test string',
              clientCertificate: 'Test string',
              clientKey: 'Test string',
              connectRetryInterval: 42,
              dumpFilePath: 'Test string',
              kind: 'Test string',
              masterHeartbeatPeriod: 'Test string',
              password: 'Test string',
              sslCipher: 'Test string',
              username: 'Test string',
              verifyServerCertificate: true,
            },
          },
          replicaNames: ['Test string'],
          replicationCluster: {
            drReplica: true,
            failoverDrReplicaName: 'Test string',
            psaWriteEndpoint: 'Test string',
          },
          rootPassword: 'Test string',
          satisfiesPzi: true,
          satisfiesPzs: true,
          scheduledMaintenance: {
            canDefer: true,
            canReschedule: true,
            scheduleDeadlineTime: 'Test string',
            startTime: 'Test string',
          },
          secondaryGceZone: 'Test string',
          selfLink: 'Test string',
          serverCaCert: {
            cert: 'Test string',
            certSerialNumber: 'Test string',
            commonName: 'Test string',
            createTime: 'Test string',
            expirationTime: 'Test string',
            instance: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            sha1Fingerprint: 'Test string',
          },
          serviceAccountEmailAddress: 'Test string',
          settings: {
            activationPolicy: 'Test string',
            activeDirectoryConfig: {
              domain: 'Test string',
              kind: 'Test string',
            },
            advancedMachineFeatures: {
              threadsPerCore: 42,
            },
            authorizedGaeApplications: ['Test string'],
            availabilityType: 'Test string',
            backupConfiguration: {
              backupRetentionSettings: {
                retainedBackups: 42,
                retentionUnit: 'Test string',
              },
              backupTier: 'Test string',
              binaryLogEnabled: true,
              enabled: true,
              kind: 'Test string',
              location: 'Test string',
              pointInTimeRecoveryEnabled: true,
              replicationLogArchivingEnabled: true,
              startTime: 'Test string',
              transactionalLogStorageState: 'Test string',
              transactionLogRetentionDays: 42,
            },
            collation: 'Test string',
            connectionPoolConfig: {
              connectionPoolingEnabled: true,
              flags: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
            },
            connectorEnforcement: 'Test string',
            crashSafeReplicationEnabled: true,
            databaseFlags: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            databaseReplicationEnabled: true,
            dataCacheConfig: {
              dataCacheEnabled: true,
            },
            dataDiskProvisionedIops: 'Test string',
            dataDiskProvisionedThroughput: 'Test string',
            dataDiskSizeGb: 'Test string',
            dataDiskType: 'Test string',
            deletionProtectionEnabled: true,
            denyMaintenancePeriods: [
              {
                endDate: 'Test string',
                startDate: 'Test string',
                time: 'Test string',
              },
            ],
            edition: 'Test string',
            enableDataplexIntegration: true,
            enableGoogleMlIntegration: true,
            insightsConfig: {
              queryInsightsEnabled: true,
              queryPlansPerMinute: 42,
              queryStringLength: 42,
              recordApplicationTags: true,
              recordClientAddress: true,
            },
            ipConfiguration: {
              allocatedIpRange: 'Test string',
              authorizedNetworks: [
                {
                  expirationTime: 'Test string',
                  kind: 'Test string',
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              customSubjectAlternativeNames: ['Test string'],
              enablePrivatePathForGoogleCloudServices: true,
              ipv4Enabled: true,
              privateNetwork: 'Test string',
              pscConfig: {
                allowedConsumerProjects: ['Test string'],
                networkAttachmentUri: 'Test string',
                pscAutoConnections: [
                  {
                    consumerNetwork: 'Test string',
                    consumerNetworkStatus: 'Test string',
                    consumerProject: 'Test string',
                    ipAddress: 'Test string',
                    status: 'Test string',
                  },
                ],
                pscEnabled: true,
              },
              requireSsl: true,
              serverCaMode: 'Test string',
              serverCaPool: 'Test string',
              sslMode: 'Test string',
            },
            kind: 'Test string',
            locationPreference: {
              followGaeApplication: 'Test string',
              kind: 'Test string',
              secondaryZone: 'Test string',
              zone: 'Test string',
            },
            maintenanceWindow: {
              day: 42,
              hour: 42,
              kind: 'Test string',
              updateTrack: 'Test string',
            },
            passwordValidationPolicy: {
              complexity: 'Test string',
              disallowCompromisedCredentials: true,
              disallowUsernameSubstring: true,
              enablePasswordPolicy: true,
              minLength: 42,
              passwordChangeInterval: 'Test string',
              reuseInterval: 42,
            },
            pricingPlan: 'Test string',
            replicationLagMaxSeconds: 42,
            replicationType: 'Test string',
            retainBackupsOnDelete: true,
            settingsVersion: 'Test string',
            sqlServerAuditConfig: {
              bucket: 'Test string',
              kind: 'Test string',
              retentionInterval: 'Test string',
              uploadInterval: 'Test string',
            },
            storageAutoResize: true,
            storageAutoResizeLimit: 'Test string',
            tier: 'Test string',
            timeZone: 'Test string',
            userLabels: {
              A: 'Test string',
            },
          },
          sqlNetworkArchitecture: 'Test string',
          state: 'Test string',
          suspensionReason: ['Test string'],
          switchTransactionLogsToCloudStorageEnabled: true,
          tags: {
            A: 'Test string',
          },
          upgradableDatabaseVersions: [
            {
              displayName: 'Test string',
              majorVersion: 'Test string',
              name: 'Test string',
            },
          ],
          writeEndpoint: 'Test string',
        },
        kind: 'Test string',
        kmsKey: 'Test string',
        kmsKeyVersion: 'Test string',
        location: 'Test string',
        maxChargeableBytes: 'Test string',
        name: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        selfLink: 'Test string',
        state: 'Test string',
        timeZone: 'Test string',
        ttlDays: 'Test string',
        type: 'Test string',
      },
    );
    /** Deletes the backup. */
    await gapi.client.sql.Backups.DeleteBackup({
      name: 'Test string',
    });
    /** Retrieves a resource containing information about a backup. */
    await gapi.client.sql.Backups.GetBackup({
      name: 'Test string',
    });
    /** Lists all backups associated with the project. */
    await gapi.client.sql.Backups.ListBackups({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the retention period and description of the backup. You can use this API to update final backups only. */
    await gapi.client.sql.Backups.UpdateBackup(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        backupInterval: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
        backupKind: 'Test string',
        backupRun: 'Test string',
        databaseVersion: 'Test string',
        description: 'Test string',
        error: {
          code: 'Test string',
          kind: 'Test string',
          message: 'Test string',
        },
        expiryTime: 'Test string',
        instance: 'Test string',
        instanceDeletionTime: 'Test string',
        instanceSettings: {
          availableMaintenanceVersions: ['Test string'],
          backendType: 'Test string',
          clearNetwork: true,
          connectionName: 'Test string',
          createTime: 'Test string',
          currentDiskSize: 'Test string',
          databaseInstalledVersion: 'Test string',
          databaseVersion: 'Test string',
          diskEncryptionConfiguration: {
            kind: 'Test string',
            kmsKeyName: 'Test string',
          },
          diskEncryptionStatus: {
            kind: 'Test string',
            kmsKeyVersionName: 'Test string',
          },
          dnsName: 'Test string',
          dnsNames: [
            {
              connectionType: 'Test string',
              dnsScope: 'Test string',
              name: 'Test string',
            },
          ],
          etag: 'Test string',
          failoverReplica: {
            available: true,
            name: 'Test string',
          },
          gceZone: 'Test string',
          geminiConfig: {
            activeQueryEnabled: true,
            entitled: true,
            flagRecommenderEnabled: true,
            googleVacuumMgmtEnabled: true,
            indexAdvisorEnabled: true,
            oomSessionCancelEnabled: true,
          },
          includeReplicasForMajorVersionUpgrade: true,
          instanceType: 'Test string',
          ipAddresses: [
            {
              ipAddress: 'Test string',
              timeToRetire: 'Test string',
              type: 'Test string',
            },
          ],
          ipv6Address: 'Test string',
          kind: 'Test string',
          maintenanceVersion: 'Test string',
          masterInstanceName: 'Test string',
          maxDiskSize: 'Test string',
          name: 'Test string',
          nodeCount: 42,
          nodes: [
            {
              dnsName: 'Test string',
              dnsNames: [
                {
                  connectionType: 'Test string',
                  dnsScope: 'Test string',
                  name: 'Test string',
                },
              ],
              gceZone: 'Test string',
              ipAddresses: [
                {
                  ipAddress: 'Test string',
                  timeToRetire: 'Test string',
                  type: 'Test string',
                },
              ],
              name: 'Test string',
              state: 'Test string',
            },
          ],
          onPremisesConfiguration: {
            caCertificate: 'Test string',
            clientCertificate: 'Test string',
            clientKey: 'Test string',
            dumpFilePath: 'Test string',
            hostPort: 'Test string',
            kind: 'Test string',
            password: 'Test string',
            selectedObjects: [
              {
                database: 'Test string',
              },
            ],
            sourceInstance: {
              name: 'Test string',
              project: 'Test string',
              region: 'Test string',
            },
            sslOption: 'Test string',
            username: 'Test string',
          },
          outOfDiskReport: {
            sqlMinRecommendedIncreaseSizeGb: 42,
            sqlOutOfDiskState: 'Test string',
          },
          primaryDnsName: 'Test string',
          project: 'Test string',
          pscServiceAttachmentLink: 'Test string',
          region: 'Test string',
          replicaConfiguration: {
            cascadableReplica: true,
            failoverTarget: true,
            kind: 'Test string',
            mysqlReplicaConfiguration: {
              caCertificate: 'Test string',
              clientCertificate: 'Test string',
              clientKey: 'Test string',
              connectRetryInterval: 42,
              dumpFilePath: 'Test string',
              kind: 'Test string',
              masterHeartbeatPeriod: 'Test string',
              password: 'Test string',
              sslCipher: 'Test string',
              username: 'Test string',
              verifyServerCertificate: true,
            },
          },
          replicaNames: ['Test string'],
          replicationCluster: {
            drReplica: true,
            failoverDrReplicaName: 'Test string',
            psaWriteEndpoint: 'Test string',
          },
          rootPassword: 'Test string',
          satisfiesPzi: true,
          satisfiesPzs: true,
          scheduledMaintenance: {
            canDefer: true,
            canReschedule: true,
            scheduleDeadlineTime: 'Test string',
            startTime: 'Test string',
          },
          secondaryGceZone: 'Test string',
          selfLink: 'Test string',
          serverCaCert: {
            cert: 'Test string',
            certSerialNumber: 'Test string',
            commonName: 'Test string',
            createTime: 'Test string',
            expirationTime: 'Test string',
            instance: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            sha1Fingerprint: 'Test string',
          },
          serviceAccountEmailAddress: 'Test string',
          settings: {
            activationPolicy: 'Test string',
            activeDirectoryConfig: {
              domain: 'Test string',
              kind: 'Test string',
            },
            advancedMachineFeatures: {
              threadsPerCore: 42,
            },
            authorizedGaeApplications: ['Test string'],
            availabilityType: 'Test string',
            backupConfiguration: {
              backupRetentionSettings: {
                retainedBackups: 42,
                retentionUnit: 'Test string',
              },
              backupTier: 'Test string',
              binaryLogEnabled: true,
              enabled: true,
              kind: 'Test string',
              location: 'Test string',
              pointInTimeRecoveryEnabled: true,
              replicationLogArchivingEnabled: true,
              startTime: 'Test string',
              transactionalLogStorageState: 'Test string',
              transactionLogRetentionDays: 42,
            },
            collation: 'Test string',
            connectionPoolConfig: {
              connectionPoolingEnabled: true,
              flags: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
            },
            connectorEnforcement: 'Test string',
            crashSafeReplicationEnabled: true,
            databaseFlags: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            databaseReplicationEnabled: true,
            dataCacheConfig: {
              dataCacheEnabled: true,
            },
            dataDiskProvisionedIops: 'Test string',
            dataDiskProvisionedThroughput: 'Test string',
            dataDiskSizeGb: 'Test string',
            dataDiskType: 'Test string',
            deletionProtectionEnabled: true,
            denyMaintenancePeriods: [
              {
                endDate: 'Test string',
                startDate: 'Test string',
                time: 'Test string',
              },
            ],
            edition: 'Test string',
            enableDataplexIntegration: true,
            enableGoogleMlIntegration: true,
            insightsConfig: {
              queryInsightsEnabled: true,
              queryPlansPerMinute: 42,
              queryStringLength: 42,
              recordApplicationTags: true,
              recordClientAddress: true,
            },
            ipConfiguration: {
              allocatedIpRange: 'Test string',
              authorizedNetworks: [
                {
                  expirationTime: 'Test string',
                  kind: 'Test string',
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              customSubjectAlternativeNames: ['Test string'],
              enablePrivatePathForGoogleCloudServices: true,
              ipv4Enabled: true,
              privateNetwork: 'Test string',
              pscConfig: {
                allowedConsumerProjects: ['Test string'],
                networkAttachmentUri: 'Test string',
                pscAutoConnections: [
                  {
                    consumerNetwork: 'Test string',
                    consumerNetworkStatus: 'Test string',
                    consumerProject: 'Test string',
                    ipAddress: 'Test string',
                    status: 'Test string',
                  },
                ],
                pscEnabled: true,
              },
              requireSsl: true,
              serverCaMode: 'Test string',
              serverCaPool: 'Test string',
              sslMode: 'Test string',
            },
            kind: 'Test string',
            locationPreference: {
              followGaeApplication: 'Test string',
              kind: 'Test string',
              secondaryZone: 'Test string',
              zone: 'Test string',
            },
            maintenanceWindow: {
              day: 42,
              hour: 42,
              kind: 'Test string',
              updateTrack: 'Test string',
            },
            passwordValidationPolicy: {
              complexity: 'Test string',
              disallowCompromisedCredentials: true,
              disallowUsernameSubstring: true,
              enablePasswordPolicy: true,
              minLength: 42,
              passwordChangeInterval: 'Test string',
              reuseInterval: 42,
            },
            pricingPlan: 'Test string',
            replicationLagMaxSeconds: 42,
            replicationType: 'Test string',
            retainBackupsOnDelete: true,
            settingsVersion: 'Test string',
            sqlServerAuditConfig: {
              bucket: 'Test string',
              kind: 'Test string',
              retentionInterval: 'Test string',
              uploadInterval: 'Test string',
            },
            storageAutoResize: true,
            storageAutoResizeLimit: 'Test string',
            tier: 'Test string',
            timeZone: 'Test string',
            userLabels: {
              A: 'Test string',
            },
          },
          sqlNetworkArchitecture: 'Test string',
          state: 'Test string',
          suspensionReason: ['Test string'],
          switchTransactionLogsToCloudStorageEnabled: true,
          tags: {
            A: 'Test string',
          },
          upgradableDatabaseVersions: [
            {
              displayName: 'Test string',
              majorVersion: 'Test string',
              name: 'Test string',
            },
          ],
          writeEndpoint: 'Test string',
        },
        kind: 'Test string',
        kmsKey: 'Test string',
        kmsKeyVersion: 'Test string',
        location: 'Test string',
        maxChargeableBytes: 'Test string',
        name: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        selfLink: 'Test string',
        state: 'Test string',
        timeZone: 'Test string',
        ttlDays: 'Test string',
        type: 'Test string',
      },
    );
    /** Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database. */
    await gapi.client.sql.connect.generateEphemeralCert(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        access_token: 'Test string',
        public_key: 'Test string',
        readTime: 'Test string',
        validDuration: 'Test string',
      },
    );
    /** Retrieves connect settings about a Cloud SQL instance. */
    await gapi.client.sql.connect.get({
      instance: 'Test string',
      project: 'Test string',
      readTime: 'Test string',
    });
    /** Deletes a database from a Cloud SQL instance. */
    await gapi.client.sql.databases.delete({
      database: 'Test string',
      instance: 'Test string',
      project: 'Test string',
    });
    /** Retrieves a resource containing information about a database inside a Cloud SQL instance. */
    await gapi.client.sql.databases.get({
      database: 'Test string',
      instance: 'Test string',
      project: 'Test string',
    });
    /** Inserts a resource containing information about a database inside a Cloud SQL instance. **Note:** You can't modify the default character set and collation. */
    await gapi.client.sql.databases.insert(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        charset: 'Test string',
        collation: 'Test string',
        etag: 'Test string',
        instance: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        project: 'Test string',
        selfLink: 'Test string',
        sqlserverDatabaseDetails: {
          compatibilityLevel: 42,
          recoveryModel: 'Test string',
        },
      },
    );
    /** Lists databases in the specified Cloud SQL instance. */
    await gapi.client.sql.databases.list({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics. */
    await gapi.client.sql.databases.patch(
      {
        database: 'Test string',
        instance: 'Test string',
        project: 'Test string',
      },
      {
        charset: 'Test string',
        collation: 'Test string',
        etag: 'Test string',
        instance: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        project: 'Test string',
        selfLink: 'Test string',
        sqlserverDatabaseDetails: {
          compatibilityLevel: 42,
          recoveryModel: 'Test string',
        },
      },
    );
    /** Updates a resource containing information about a database inside a Cloud SQL instance. */
    await gapi.client.sql.databases.update(
      {
        database: 'Test string',
        instance: 'Test string',
        project: 'Test string',
      },
      {
        charset: 'Test string',
        collation: 'Test string',
        etag: 'Test string',
        instance: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        project: 'Test string',
        selfLink: 'Test string',
        sqlserverDatabaseDetails: {
          compatibilityLevel: 42,
          recoveryModel: 'Test string',
        },
      },
    );
    /** Lists all available database flags for Cloud SQL instances. */
    await gapi.client.sql.flags.list({
      databaseVersion: 'Test string',
      flagScope: 'Test string',
    });
    /** Acquire a lease for the setup of SQL Server Reporting Services (SSRS). */
    await gapi.client.sql.instances.acquireSsrsLease(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        acquireSsrsLeaseContext: {
          duration: 'Test string',
          reportDatabase: 'Test string',
          serviceLogin: 'Test string',
          setupLogin: 'Test string',
        },
      },
    );
    /** Adds a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in. For instances that have enabled Certificate Authority Service (CAS) based server CA, use AddServerCertificate to add a new server certificate. */
    await gapi.client.sql.instances.addServerCa({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Add a new trusted server certificate version for the specified instance using Certificate Authority Service (CAS) server CA. Required to prepare for a certificate rotation. If a server certificate version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one certificate version waiting to be rotated in. For instances not using CAS server CA, use AddServerCa instead. */
    await gapi.client.sql.instances.addServerCertificate({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart. */
    await gapi.client.sql.instances.clone(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        cloneContext: {
          allocatedIpRange: 'Test string',
          binLogCoordinates: {
            binLogFileName: 'Test string',
            binLogPosition: 'Test string',
            kind: 'Test string',
          },
          databaseNames: ['Test string'],
          destinationInstanceName: 'Test string',
          kind: 'Test string',
          pitrTimestampMs: 'Test string',
          pointInTime: 'Test string',
          preferredSecondaryZone: 'Test string',
          preferredZone: 'Test string',
        },
      },
    );
    /** Deletes a Cloud SQL instance. */
    await gapi.client.sql.instances.delete({
      enableFinalBackup: true,
      finalBackupDescription: 'Test string',
      finalBackupExpiryTime: 'Test string',
      finalBackupTtlDays: 'Test string',
      instance: 'Test string',
      project: 'Test string',
    });
    /** Demotes an existing standalone instance to be a Cloud SQL read replica for an external database server. */
    await gapi.client.sql.instances.demote(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        demoteContext: {
          kind: 'Test string',
          sourceRepresentativeInstanceName: 'Test string',
        },
      },
    );
    /** Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server. */
    await gapi.client.sql.instances.demoteMaster(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        demoteMasterContext: {
          kind: 'Test string',
          masterInstanceName: 'Test string',
          replicaConfiguration: {
            kind: 'Test string',
            mysqlReplicaConfiguration: {
              caCertificate: 'Test string',
              clientCertificate: 'Test string',
              clientKey: 'Test string',
              kind: 'Test string',
              password: 'Test string',
              username: 'Test string',
            },
          },
          skipReplicationSetup: true,
          verifyGtidConsistency: true,
        },
      },
    );
    /** Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file. */
    await gapi.client.sql.instances.export(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        exportContext: {
          bakExportOptions: {
            bakType: 'Test string',
            copyOnly: true,
            differentialBase: true,
            exportLogEndTime: 'Test string',
            exportLogStartTime: 'Test string',
            stripeCount: 42,
            striped: true,
          },
          csvExportOptions: {
            escapeCharacter: 'Test string',
            fieldsTerminatedBy: 'Test string',
            linesTerminatedBy: 'Test string',
            quoteCharacter: 'Test string',
            selectQuery: 'Test string',
          },
          databases: ['Test string'],
          fileType: 'Test string',
          kind: 'Test string',
          offload: true,
          sqlExportOptions: {
            mysqlExportOptions: {
              masterData: 42,
            },
            parallel: true,
            postgresExportOptions: {
              clean: true,
              ifExists: true,
            },
            schemaOnly: true,
            tables: ['Test string'],
            threads: 42,
          },
          tdeExportOptions: {
            certificatePath: 'Test string',
            name: 'Test string',
            privateKeyPassword: 'Test string',
            privateKeyPath: 'Test string',
          },
          uri: 'Test string',
        },
      },
    );
    /** Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance. */
    await gapi.client.sql.instances.failover(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        failoverContext: {
          kind: 'Test string',
          settingsVersion: 'Test string',
        },
      },
    );
    /** Retrieves a resource containing information about a Cloud SQL instance. */
    await gapi.client.sql.instances.get({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage. */
    await gapi.client.sql.instances.import(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        importContext: {
          bakImportOptions: {
            bakType: 'Test string',
            encryptionOptions: {
              certPath: 'Test string',
              keepEncrypted: true,
              pvkPassword: 'Test string',
              pvkPath: 'Test string',
            },
            noRecovery: true,
            recoveryOnly: true,
            stopAt: 'Test string',
            stopAtMark: 'Test string',
            striped: true,
          },
          csvImportOptions: {
            columns: ['Test string'],
            escapeCharacter: 'Test string',
            fieldsTerminatedBy: 'Test string',
            linesTerminatedBy: 'Test string',
            quoteCharacter: 'Test string',
            table: 'Test string',
          },
          database: 'Test string',
          fileType: 'Test string',
          importUser: 'Test string',
          kind: 'Test string',
          sqlImportOptions: {
            parallel: true,
            postgresImportOptions: {
              clean: true,
              ifExists: true,
            },
            threads: 42,
          },
          tdeImportOptions: {
            certificatePath: 'Test string',
            name: 'Test string',
            privateKeyPassword: 'Test string',
            privateKeyPath: 'Test string',
          },
          uri: 'Test string',
        },
      },
    );
    /** Creates a new Cloud SQL instance. */
    await gapi.client.sql.instances.insert(
      {
        project: 'Test string',
      },
      {
        availableMaintenanceVersions: ['Test string'],
        backendType: 'Test string',
        clearNetwork: true,
        connectionName: 'Test string',
        createTime: 'Test string',
        currentDiskSize: 'Test string',
        databaseInstalledVersion: 'Test string',
        databaseVersion: 'Test string',
        diskEncryptionConfiguration: {
          kind: 'Test string',
          kmsKeyName: 'Test string',
        },
        diskEncryptionStatus: {
          kind: 'Test string',
          kmsKeyVersionName: 'Test string',
        },
        dnsName: 'Test string',
        dnsNames: [
          {
            connectionType: 'Test string',
            dnsScope: 'Test string',
            name: 'Test string',
          },
        ],
        etag: 'Test string',
        failoverReplica: {
          available: true,
          name: 'Test string',
        },
        gceZone: 'Test string',
        geminiConfig: {
          activeQueryEnabled: true,
          entitled: true,
          flagRecommenderEnabled: true,
          googleVacuumMgmtEnabled: true,
          indexAdvisorEnabled: true,
          oomSessionCancelEnabled: true,
        },
        includeReplicasForMajorVersionUpgrade: true,
        instanceType: 'Test string',
        ipAddresses: [
          {
            ipAddress: 'Test string',
            timeToRetire: 'Test string',
            type: 'Test string',
          },
        ],
        ipv6Address: 'Test string',
        kind: 'Test string',
        maintenanceVersion: 'Test string',
        masterInstanceName: 'Test string',
        maxDiskSize: 'Test string',
        name: 'Test string',
        nodeCount: 42,
        nodes: [
          {
            dnsName: 'Test string',
            dnsNames: [
              {
                connectionType: 'Test string',
                dnsScope: 'Test string',
                name: 'Test string',
              },
            ],
            gceZone: 'Test string',
            ipAddresses: [
              {
                ipAddress: 'Test string',
                timeToRetire: 'Test string',
                type: 'Test string',
              },
            ],
            name: 'Test string',
            state: 'Test string',
          },
        ],
        onPremisesConfiguration: {
          caCertificate: 'Test string',
          clientCertificate: 'Test string',
          clientKey: 'Test string',
          dumpFilePath: 'Test string',
          hostPort: 'Test string',
          kind: 'Test string',
          password: 'Test string',
          selectedObjects: [
            {
              database: 'Test string',
            },
          ],
          sourceInstance: {
            name: 'Test string',
            project: 'Test string',
            region: 'Test string',
          },
          sslOption: 'Test string',
          username: 'Test string',
        },
        outOfDiskReport: {
          sqlMinRecommendedIncreaseSizeGb: 42,
          sqlOutOfDiskState: 'Test string',
        },
        primaryDnsName: 'Test string',
        project: 'Test string',
        pscServiceAttachmentLink: 'Test string',
        region: 'Test string',
        replicaConfiguration: {
          cascadableReplica: true,
          failoverTarget: true,
          kind: 'Test string',
          mysqlReplicaConfiguration: {
            caCertificate: 'Test string',
            clientCertificate: 'Test string',
            clientKey: 'Test string',
            connectRetryInterval: 42,
            dumpFilePath: 'Test string',
            kind: 'Test string',
            masterHeartbeatPeriod: 'Test string',
            password: 'Test string',
            sslCipher: 'Test string',
            username: 'Test string',
            verifyServerCertificate: true,
          },
        },
        replicaNames: ['Test string'],
        replicationCluster: {
          drReplica: true,
          failoverDrReplicaName: 'Test string',
          psaWriteEndpoint: 'Test string',
        },
        rootPassword: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        scheduledMaintenance: {
          canDefer: true,
          canReschedule: true,
          scheduleDeadlineTime: 'Test string',
          startTime: 'Test string',
        },
        secondaryGceZone: 'Test string',
        selfLink: 'Test string',
        serverCaCert: {
          cert: 'Test string',
          certSerialNumber: 'Test string',
          commonName: 'Test string',
          createTime: 'Test string',
          expirationTime: 'Test string',
          instance: 'Test string',
          kind: 'Test string',
          selfLink: 'Test string',
          sha1Fingerprint: 'Test string',
        },
        serviceAccountEmailAddress: 'Test string',
        settings: {
          activationPolicy: 'Test string',
          activeDirectoryConfig: {
            domain: 'Test string',
            kind: 'Test string',
          },
          advancedMachineFeatures: {
            threadsPerCore: 42,
          },
          authorizedGaeApplications: ['Test string'],
          availabilityType: 'Test string',
          backupConfiguration: {
            backupRetentionSettings: {
              retainedBackups: 42,
              retentionUnit: 'Test string',
            },
            backupTier: 'Test string',
            binaryLogEnabled: true,
            enabled: true,
            kind: 'Test string',
            location: 'Test string',
            pointInTimeRecoveryEnabled: true,
            replicationLogArchivingEnabled: true,
            startTime: 'Test string',
            transactionalLogStorageState: 'Test string',
            transactionLogRetentionDays: 42,
          },
          collation: 'Test string',
          connectionPoolConfig: {
            connectionPoolingEnabled: true,
            flags: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
          },
          connectorEnforcement: 'Test string',
          crashSafeReplicationEnabled: true,
          databaseFlags: [
            {
              name: 'Test string',
              value: 'Test string',
            },
          ],
          databaseReplicationEnabled: true,
          dataCacheConfig: {
            dataCacheEnabled: true,
          },
          dataDiskProvisionedIops: 'Test string',
          dataDiskProvisionedThroughput: 'Test string',
          dataDiskSizeGb: 'Test string',
          dataDiskType: 'Test string',
          deletionProtectionEnabled: true,
          denyMaintenancePeriods: [
            {
              endDate: 'Test string',
              startDate: 'Test string',
              time: 'Test string',
            },
          ],
          edition: 'Test string',
          enableDataplexIntegration: true,
          enableGoogleMlIntegration: true,
          insightsConfig: {
            queryInsightsEnabled: true,
            queryPlansPerMinute: 42,
            queryStringLength: 42,
            recordApplicationTags: true,
            recordClientAddress: true,
          },
          ipConfiguration: {
            allocatedIpRange: 'Test string',
            authorizedNetworks: [
              {
                expirationTime: 'Test string',
                kind: 'Test string',
                name: 'Test string',
                value: 'Test string',
              },
            ],
            customSubjectAlternativeNames: ['Test string'],
            enablePrivatePathForGoogleCloudServices: true,
            ipv4Enabled: true,
            privateNetwork: 'Test string',
            pscConfig: {
              allowedConsumerProjects: ['Test string'],
              networkAttachmentUri: 'Test string',
              pscAutoConnections: [
                {
                  consumerNetwork: 'Test string',
                  consumerNetworkStatus: 'Test string',
                  consumerProject: 'Test string',
                  ipAddress: 'Test string',
                  status: 'Test string',
                },
              ],
              pscEnabled: true,
            },
            requireSsl: true,
            serverCaMode: 'Test string',
            serverCaPool: 'Test string',
            sslMode: 'Test string',
          },
          kind: 'Test string',
          locationPreference: {
            followGaeApplication: 'Test string',
            kind: 'Test string',
            secondaryZone: 'Test string',
            zone: 'Test string',
          },
          maintenanceWindow: {
            day: 42,
            hour: 42,
            kind: 'Test string',
            updateTrack: 'Test string',
          },
          passwordValidationPolicy: {
            complexity: 'Test string',
            disallowCompromisedCredentials: true,
            disallowUsernameSubstring: true,
            enablePasswordPolicy: true,
            minLength: 42,
            passwordChangeInterval: 'Test string',
            reuseInterval: 42,
          },
          pricingPlan: 'Test string',
          replicationLagMaxSeconds: 42,
          replicationType: 'Test string',
          retainBackupsOnDelete: true,
          settingsVersion: 'Test string',
          sqlServerAuditConfig: {
            bucket: 'Test string',
            kind: 'Test string',
            retentionInterval: 'Test string',
            uploadInterval: 'Test string',
          },
          storageAutoResize: true,
          storageAutoResizeLimit: 'Test string',
          tier: 'Test string',
          timeZone: 'Test string',
          userLabels: {
            A: 'Test string',
          },
        },
        sqlNetworkArchitecture: 'Test string',
        state: 'Test string',
        suspensionReason: ['Test string'],
        switchTransactionLogsToCloudStorageEnabled: true,
        tags: {
          A: 'Test string',
        },
        upgradableDatabaseVersions: [
          {
            displayName: 'Test string',
            majorVersion: 'Test string',
            name: 'Test string',
          },
        ],
        writeEndpoint: 'Test string',
      },
    );
    /** Lists instances under a given project. */
    await gapi.client.sql.instances.list({
      filter: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out. */
    await gapi.client.sql.instances.listServerCas({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Lists all versions of server certificates and certificate authorities (CAs) for the specified instance. There can be up to three sets of certs listed: the certificate that is currently in use, a future that has been added but not yet used to sign a certificate, and a certificate that has been rotated out. For instances not using Certificate Authority Service (CAS) server CA, use ListServerCas instead. */
    await gapi.client.sql.instances.ListServerCertificates({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Partially updates settings of a Cloud SQL instance by merging the request with the current configuration. This method supports patch semantics. */
    await gapi.client.sql.instances.patch(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        availableMaintenanceVersions: ['Test string'],
        backendType: 'Test string',
        clearNetwork: true,
        connectionName: 'Test string',
        createTime: 'Test string',
        currentDiskSize: 'Test string',
        databaseInstalledVersion: 'Test string',
        databaseVersion: 'Test string',
        diskEncryptionConfiguration: {
          kind: 'Test string',
          kmsKeyName: 'Test string',
        },
        diskEncryptionStatus: {
          kind: 'Test string',
          kmsKeyVersionName: 'Test string',
        },
        dnsName: 'Test string',
        dnsNames: [
          {
            connectionType: 'Test string',
            dnsScope: 'Test string',
            name: 'Test string',
          },
        ],
        etag: 'Test string',
        failoverReplica: {
          available: true,
          name: 'Test string',
        },
        gceZone: 'Test string',
        geminiConfig: {
          activeQueryEnabled: true,
          entitled: true,
          flagRecommenderEnabled: true,
          googleVacuumMgmtEnabled: true,
          indexAdvisorEnabled: true,
          oomSessionCancelEnabled: true,
        },
        includeReplicasForMajorVersionUpgrade: true,
        instanceType: 'Test string',
        ipAddresses: [
          {
            ipAddress: 'Test string',
            timeToRetire: 'Test string',
            type: 'Test string',
          },
        ],
        ipv6Address: 'Test string',
        kind: 'Test string',
        maintenanceVersion: 'Test string',
        masterInstanceName: 'Test string',
        maxDiskSize: 'Test string',
        name: 'Test string',
        nodeCount: 42,
        nodes: [
          {
            dnsName: 'Test string',
            dnsNames: [
              {
                connectionType: 'Test string',
                dnsScope: 'Test string',
                name: 'Test string',
              },
            ],
            gceZone: 'Test string',
            ipAddresses: [
              {
                ipAddress: 'Test string',
                timeToRetire: 'Test string',
                type: 'Test string',
              },
            ],
            name: 'Test string',
            state: 'Test string',
          },
        ],
        onPremisesConfiguration: {
          caCertificate: 'Test string',
          clientCertificate: 'Test string',
          clientKey: 'Test string',
          dumpFilePath: 'Test string',
          hostPort: 'Test string',
          kind: 'Test string',
          password: 'Test string',
          selectedObjects: [
            {
              database: 'Test string',
            },
          ],
          sourceInstance: {
            name: 'Test string',
            project: 'Test string',
            region: 'Test string',
          },
          sslOption: 'Test string',
          username: 'Test string',
        },
        outOfDiskReport: {
          sqlMinRecommendedIncreaseSizeGb: 42,
          sqlOutOfDiskState: 'Test string',
        },
        primaryDnsName: 'Test string',
        project: 'Test string',
        pscServiceAttachmentLink: 'Test string',
        region: 'Test string',
        replicaConfiguration: {
          cascadableReplica: true,
          failoverTarget: true,
          kind: 'Test string',
          mysqlReplicaConfiguration: {
            caCertificate: 'Test string',
            clientCertificate: 'Test string',
            clientKey: 'Test string',
            connectRetryInterval: 42,
            dumpFilePath: 'Test string',
            kind: 'Test string',
            masterHeartbeatPeriod: 'Test string',
            password: 'Test string',
            sslCipher: 'Test string',
            username: 'Test string',
            verifyServerCertificate: true,
          },
        },
        replicaNames: ['Test string'],
        replicationCluster: {
          drReplica: true,
          failoverDrReplicaName: 'Test string',
          psaWriteEndpoint: 'Test string',
        },
        rootPassword: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        scheduledMaintenance: {
          canDefer: true,
          canReschedule: true,
          scheduleDeadlineTime: 'Test string',
          startTime: 'Test string',
        },
        secondaryGceZone: 'Test string',
        selfLink: 'Test string',
        serverCaCert: {
          cert: 'Test string',
          certSerialNumber: 'Test string',
          commonName: 'Test string',
          createTime: 'Test string',
          expirationTime: 'Test string',
          instance: 'Test string',
          kind: 'Test string',
          selfLink: 'Test string',
          sha1Fingerprint: 'Test string',
        },
        serviceAccountEmailAddress: 'Test string',
        settings: {
          activationPolicy: 'Test string',
          activeDirectoryConfig: {
            domain: 'Test string',
            kind: 'Test string',
          },
          advancedMachineFeatures: {
            threadsPerCore: 42,
          },
          authorizedGaeApplications: ['Test string'],
          availabilityType: 'Test string',
          backupConfiguration: {
            backupRetentionSettings: {
              retainedBackups: 42,
              retentionUnit: 'Test string',
            },
            backupTier: 'Test string',
            binaryLogEnabled: true,
            enabled: true,
            kind: 'Test string',
            location: 'Test string',
            pointInTimeRecoveryEnabled: true,
            replicationLogArchivingEnabled: true,
            startTime: 'Test string',
            transactionalLogStorageState: 'Test string',
            transactionLogRetentionDays: 42,
          },
          collation: 'Test string',
          connectionPoolConfig: {
            connectionPoolingEnabled: true,
            flags: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
          },
          connectorEnforcement: 'Test string',
          crashSafeReplicationEnabled: true,
          databaseFlags: [
            {
              name: 'Test string',
              value: 'Test string',
            },
          ],
          databaseReplicationEnabled: true,
          dataCacheConfig: {
            dataCacheEnabled: true,
          },
          dataDiskProvisionedIops: 'Test string',
          dataDiskProvisionedThroughput: 'Test string',
          dataDiskSizeGb: 'Test string',
          dataDiskType: 'Test string',
          deletionProtectionEnabled: true,
          denyMaintenancePeriods: [
            {
              endDate: 'Test string',
              startDate: 'Test string',
              time: 'Test string',
            },
          ],
          edition: 'Test string',
          enableDataplexIntegration: true,
          enableGoogleMlIntegration: true,
          insightsConfig: {
            queryInsightsEnabled: true,
            queryPlansPerMinute: 42,
            queryStringLength: 42,
            recordApplicationTags: true,
            recordClientAddress: true,
          },
          ipConfiguration: {
            allocatedIpRange: 'Test string',
            authorizedNetworks: [
              {
                expirationTime: 'Test string',
                kind: 'Test string',
                name: 'Test string',
                value: 'Test string',
              },
            ],
            customSubjectAlternativeNames: ['Test string'],
            enablePrivatePathForGoogleCloudServices: true,
            ipv4Enabled: true,
            privateNetwork: 'Test string',
            pscConfig: {
              allowedConsumerProjects: ['Test string'],
              networkAttachmentUri: 'Test string',
              pscAutoConnections: [
                {
                  consumerNetwork: 'Test string',
                  consumerNetworkStatus: 'Test string',
                  consumerProject: 'Test string',
                  ipAddress: 'Test string',
                  status: 'Test string',
                },
              ],
              pscEnabled: true,
            },
            requireSsl: true,
            serverCaMode: 'Test string',
            serverCaPool: 'Test string',
            sslMode: 'Test string',
          },
          kind: 'Test string',
          locationPreference: {
            followGaeApplication: 'Test string',
            kind: 'Test string',
            secondaryZone: 'Test string',
            zone: 'Test string',
          },
          maintenanceWindow: {
            day: 42,
            hour: 42,
            kind: 'Test string',
            updateTrack: 'Test string',
          },
          passwordValidationPolicy: {
            complexity: 'Test string',
            disallowCompromisedCredentials: true,
            disallowUsernameSubstring: true,
            enablePasswordPolicy: true,
            minLength: 42,
            passwordChangeInterval: 'Test string',
            reuseInterval: 42,
          },
          pricingPlan: 'Test string',
          replicationLagMaxSeconds: 42,
          replicationType: 'Test string',
          retainBackupsOnDelete: true,
          settingsVersion: 'Test string',
          sqlServerAuditConfig: {
            bucket: 'Test string',
            kind: 'Test string',
            retentionInterval: 'Test string',
            uploadInterval: 'Test string',
          },
          storageAutoResize: true,
          storageAutoResizeLimit: 'Test string',
          tier: 'Test string',
          timeZone: 'Test string',
          userLabels: {
            A: 'Test string',
          },
        },
        sqlNetworkArchitecture: 'Test string',
        state: 'Test string',
        suspensionReason: ['Test string'],
        switchTransactionLogsToCloudStorageEnabled: true,
        tags: {
          A: 'Test string',
        },
        upgradableDatabaseVersions: [
          {
            displayName: 'Test string',
            majorVersion: 'Test string',
            name: 'Test string',
          },
        ],
        writeEndpoint: 'Test string',
      },
    );
    /** Point in time restore for an instance managed by Google Cloud Backup and Disaster Recovery. */
    await gapi.client.sql.instances.pointInTimeRestore(
      {
        parent: 'Test string',
      },
      {
        allocatedIpRange: 'Test string',
        datasource: 'Test string',
        pointInTime: 'Test string',
        preferredSecondaryZone: 'Test string',
        preferredZone: 'Test string',
        privateNetwork: 'Test string',
        targetInstance: 'Test string',
      },
    );
    /** Promotes the read replica instance to be an independent Cloud SQL primary instance. Using this operation might cause your instance to restart. */
    await gapi.client.sql.instances.promoteReplica({
      failover: true,
      instance: 'Test string',
      project: 'Test string',
    });
    /** Reencrypt CMEK instance with latest key version. */
    await gapi.client.sql.instances.reencrypt(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        backupReencryptionConfig: {
          backupLimit: 42,
          backupType: 'Test string',
        },
      },
    );
    /** Release a lease for the setup of SQL Server Reporting Services (SSRS). */
    await gapi.client.sql.instances.releaseSsrsLease({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Deletes all client certificates and generates a new server SSL certificate for the instance. */
    await gapi.client.sql.instances.resetSslConfig({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Restarts a Cloud SQL instance. */
    await gapi.client.sql.instances.restart({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart. */
    await gapi.client.sql.instances.restoreBackup(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        backup: 'Test string',
        backupdrBackup: 'Test string',
        restoreBackupContext: {
          backupRunId: 'Test string',
          instanceId: 'Test string',
          kind: 'Test string',
          project: 'Test string',
        },
        restoreInstanceSettings: {
          availableMaintenanceVersions: ['Test string'],
          backendType: 'Test string',
          clearNetwork: true,
          connectionName: 'Test string',
          createTime: 'Test string',
          currentDiskSize: 'Test string',
          databaseInstalledVersion: 'Test string',
          databaseVersion: 'Test string',
          diskEncryptionConfiguration: {
            kind: 'Test string',
            kmsKeyName: 'Test string',
          },
          diskEncryptionStatus: {
            kind: 'Test string',
            kmsKeyVersionName: 'Test string',
          },
          dnsName: 'Test string',
          dnsNames: [
            {
              connectionType: 'Test string',
              dnsScope: 'Test string',
              name: 'Test string',
            },
          ],
          etag: 'Test string',
          failoverReplica: {
            available: true,
            name: 'Test string',
          },
          gceZone: 'Test string',
          geminiConfig: {
            activeQueryEnabled: true,
            entitled: true,
            flagRecommenderEnabled: true,
            googleVacuumMgmtEnabled: true,
            indexAdvisorEnabled: true,
            oomSessionCancelEnabled: true,
          },
          includeReplicasForMajorVersionUpgrade: true,
          instanceType: 'Test string',
          ipAddresses: [
            {
              ipAddress: 'Test string',
              timeToRetire: 'Test string',
              type: 'Test string',
            },
          ],
          ipv6Address: 'Test string',
          kind: 'Test string',
          maintenanceVersion: 'Test string',
          masterInstanceName: 'Test string',
          maxDiskSize: 'Test string',
          name: 'Test string',
          nodeCount: 42,
          nodes: [
            {
              dnsName: 'Test string',
              dnsNames: [
                {
                  connectionType: 'Test string',
                  dnsScope: 'Test string',
                  name: 'Test string',
                },
              ],
              gceZone: 'Test string',
              ipAddresses: [
                {
                  ipAddress: 'Test string',
                  timeToRetire: 'Test string',
                  type: 'Test string',
                },
              ],
              name: 'Test string',
              state: 'Test string',
            },
          ],
          onPremisesConfiguration: {
            caCertificate: 'Test string',
            clientCertificate: 'Test string',
            clientKey: 'Test string',
            dumpFilePath: 'Test string',
            hostPort: 'Test string',
            kind: 'Test string',
            password: 'Test string',
            selectedObjects: [
              {
                database: 'Test string',
              },
            ],
            sourceInstance: {
              name: 'Test string',
              project: 'Test string',
              region: 'Test string',
            },
            sslOption: 'Test string',
            username: 'Test string',
          },
          outOfDiskReport: {
            sqlMinRecommendedIncreaseSizeGb: 42,
            sqlOutOfDiskState: 'Test string',
          },
          primaryDnsName: 'Test string',
          project: 'Test string',
          pscServiceAttachmentLink: 'Test string',
          region: 'Test string',
          replicaConfiguration: {
            cascadableReplica: true,
            failoverTarget: true,
            kind: 'Test string',
            mysqlReplicaConfiguration: {
              caCertificate: 'Test string',
              clientCertificate: 'Test string',
              clientKey: 'Test string',
              connectRetryInterval: 42,
              dumpFilePath: 'Test string',
              kind: 'Test string',
              masterHeartbeatPeriod: 'Test string',
              password: 'Test string',
              sslCipher: 'Test string',
              username: 'Test string',
              verifyServerCertificate: true,
            },
          },
          replicaNames: ['Test string'],
          replicationCluster: {
            drReplica: true,
            failoverDrReplicaName: 'Test string',
            psaWriteEndpoint: 'Test string',
          },
          rootPassword: 'Test string',
          satisfiesPzi: true,
          satisfiesPzs: true,
          scheduledMaintenance: {
            canDefer: true,
            canReschedule: true,
            scheduleDeadlineTime: 'Test string',
            startTime: 'Test string',
          },
          secondaryGceZone: 'Test string',
          selfLink: 'Test string',
          serverCaCert: {
            cert: 'Test string',
            certSerialNumber: 'Test string',
            commonName: 'Test string',
            createTime: 'Test string',
            expirationTime: 'Test string',
            instance: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            sha1Fingerprint: 'Test string',
          },
          serviceAccountEmailAddress: 'Test string',
          settings: {
            activationPolicy: 'Test string',
            activeDirectoryConfig: {
              domain: 'Test string',
              kind: 'Test string',
            },
            advancedMachineFeatures: {
              threadsPerCore: 42,
            },
            authorizedGaeApplications: ['Test string'],
            availabilityType: 'Test string',
            backupConfiguration: {
              backupRetentionSettings: {
                retainedBackups: 42,
                retentionUnit: 'Test string',
              },
              backupTier: 'Test string',
              binaryLogEnabled: true,
              enabled: true,
              kind: 'Test string',
              location: 'Test string',
              pointInTimeRecoveryEnabled: true,
              replicationLogArchivingEnabled: true,
              startTime: 'Test string',
              transactionalLogStorageState: 'Test string',
              transactionLogRetentionDays: 42,
            },
            collation: 'Test string',
            connectionPoolConfig: {
              connectionPoolingEnabled: true,
              flags: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
            },
            connectorEnforcement: 'Test string',
            crashSafeReplicationEnabled: true,
            databaseFlags: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            databaseReplicationEnabled: true,
            dataCacheConfig: {
              dataCacheEnabled: true,
            },
            dataDiskProvisionedIops: 'Test string',
            dataDiskProvisionedThroughput: 'Test string',
            dataDiskSizeGb: 'Test string',
            dataDiskType: 'Test string',
            deletionProtectionEnabled: true,
            denyMaintenancePeriods: [
              {
                endDate: 'Test string',
                startDate: 'Test string',
                time: 'Test string',
              },
            ],
            edition: 'Test string',
            enableDataplexIntegration: true,
            enableGoogleMlIntegration: true,
            insightsConfig: {
              queryInsightsEnabled: true,
              queryPlansPerMinute: 42,
              queryStringLength: 42,
              recordApplicationTags: true,
              recordClientAddress: true,
            },
            ipConfiguration: {
              allocatedIpRange: 'Test string',
              authorizedNetworks: [
                {
                  expirationTime: 'Test string',
                  kind: 'Test string',
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              customSubjectAlternativeNames: ['Test string'],
              enablePrivatePathForGoogleCloudServices: true,
              ipv4Enabled: true,
              privateNetwork: 'Test string',
              pscConfig: {
                allowedConsumerProjects: ['Test string'],
                networkAttachmentUri: 'Test string',
                pscAutoConnections: [
                  {
                    consumerNetwork: 'Test string',
                    consumerNetworkStatus: 'Test string',
                    consumerProject: 'Test string',
                    ipAddress: 'Test string',
                    status: 'Test string',
                  },
                ],
                pscEnabled: true,
              },
              requireSsl: true,
              serverCaMode: 'Test string',
              serverCaPool: 'Test string',
              sslMode: 'Test string',
            },
            kind: 'Test string',
            locationPreference: {
              followGaeApplication: 'Test string',
              kind: 'Test string',
              secondaryZone: 'Test string',
              zone: 'Test string',
            },
            maintenanceWindow: {
              day: 42,
              hour: 42,
              kind: 'Test string',
              updateTrack: 'Test string',
            },
            passwordValidationPolicy: {
              complexity: 'Test string',
              disallowCompromisedCredentials: true,
              disallowUsernameSubstring: true,
              enablePasswordPolicy: true,
              minLength: 42,
              passwordChangeInterval: 'Test string',
              reuseInterval: 42,
            },
            pricingPlan: 'Test string',
            replicationLagMaxSeconds: 42,
            replicationType: 'Test string',
            retainBackupsOnDelete: true,
            settingsVersion: 'Test string',
            sqlServerAuditConfig: {
              bucket: 'Test string',
              kind: 'Test string',
              retentionInterval: 'Test string',
              uploadInterval: 'Test string',
            },
            storageAutoResize: true,
            storageAutoResizeLimit: 'Test string',
            tier: 'Test string',
            timeZone: 'Test string',
            userLabels: {
              A: 'Test string',
            },
          },
          sqlNetworkArchitecture: 'Test string',
          state: 'Test string',
          suspensionReason: ['Test string'],
          switchTransactionLogsToCloudStorageEnabled: true,
          tags: {
            A: 'Test string',
          },
          upgradableDatabaseVersions: [
            {
              displayName: 'Test string',
              majorVersion: 'Test string',
              name: 'Test string',
            },
          ],
          writeEndpoint: 'Test string',
        },
      },
    );
    /** Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method. For instances that have enabled Certificate Authority Service (CAS) based server CA, use RotateServerCertificate to rotate the server certificate. */
    await gapi.client.sql.instances.rotateServerCa(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        rotateServerCaContext: {
          kind: 'Test string',
          nextVersion: 'Test string',
        },
      },
    );
    /** Rotates the server certificate version to one previously added with the addServerCertificate method. For instances not using Certificate Authority Service (CAS) server CA, use RotateServerCa instead. */
    await gapi.client.sql.instances.RotateServerCertificate(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        rotateServerCertificateContext: {
          kind: 'Test string',
          nextVersion: 'Test string',
        },
      },
    );
    /** Starts the replication in the read replica instance. */
    await gapi.client.sql.instances.startReplica({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Stops the replication in the read replica instance. */
    await gapi.client.sql.instances.stopReplica({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Switches over from the primary instance to the DR replica instance. */
    await gapi.client.sql.instances.switchover({
      dbTimeout: 'Test string',
      instance: 'Test string',
      project: 'Test string',
    });
    /** Truncate MySQL general and slow query log tables MySQL only. */
    await gapi.client.sql.instances.truncateLog(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        truncateLogContext: {
          kind: 'Test string',
          logType: 'Test string',
        },
      },
    );
    /** Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart. */
    await gapi.client.sql.instances.update(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        availableMaintenanceVersions: ['Test string'],
        backendType: 'Test string',
        clearNetwork: true,
        connectionName: 'Test string',
        createTime: 'Test string',
        currentDiskSize: 'Test string',
        databaseInstalledVersion: 'Test string',
        databaseVersion: 'Test string',
        diskEncryptionConfiguration: {
          kind: 'Test string',
          kmsKeyName: 'Test string',
        },
        diskEncryptionStatus: {
          kind: 'Test string',
          kmsKeyVersionName: 'Test string',
        },
        dnsName: 'Test string',
        dnsNames: [
          {
            connectionType: 'Test string',
            dnsScope: 'Test string',
            name: 'Test string',
          },
        ],
        etag: 'Test string',
        failoverReplica: {
          available: true,
          name: 'Test string',
        },
        gceZone: 'Test string',
        geminiConfig: {
          activeQueryEnabled: true,
          entitled: true,
          flagRecommenderEnabled: true,
          googleVacuumMgmtEnabled: true,
          indexAdvisorEnabled: true,
          oomSessionCancelEnabled: true,
        },
        includeReplicasForMajorVersionUpgrade: true,
        instanceType: 'Test string',
        ipAddresses: [
          {
            ipAddress: 'Test string',
            timeToRetire: 'Test string',
            type: 'Test string',
          },
        ],
        ipv6Address: 'Test string',
        kind: 'Test string',
        maintenanceVersion: 'Test string',
        masterInstanceName: 'Test string',
        maxDiskSize: 'Test string',
        name: 'Test string',
        nodeCount: 42,
        nodes: [
          {
            dnsName: 'Test string',
            dnsNames: [
              {
                connectionType: 'Test string',
                dnsScope: 'Test string',
                name: 'Test string',
              },
            ],
            gceZone: 'Test string',
            ipAddresses: [
              {
                ipAddress: 'Test string',
                timeToRetire: 'Test string',
                type: 'Test string',
              },
            ],
            name: 'Test string',
            state: 'Test string',
          },
        ],
        onPremisesConfiguration: {
          caCertificate: 'Test string',
          clientCertificate: 'Test string',
          clientKey: 'Test string',
          dumpFilePath: 'Test string',
          hostPort: 'Test string',
          kind: 'Test string',
          password: 'Test string',
          selectedObjects: [
            {
              database: 'Test string',
            },
          ],
          sourceInstance: {
            name: 'Test string',
            project: 'Test string',
            region: 'Test string',
          },
          sslOption: 'Test string',
          username: 'Test string',
        },
        outOfDiskReport: {
          sqlMinRecommendedIncreaseSizeGb: 42,
          sqlOutOfDiskState: 'Test string',
        },
        primaryDnsName: 'Test string',
        project: 'Test string',
        pscServiceAttachmentLink: 'Test string',
        region: 'Test string',
        replicaConfiguration: {
          cascadableReplica: true,
          failoverTarget: true,
          kind: 'Test string',
          mysqlReplicaConfiguration: {
            caCertificate: 'Test string',
            clientCertificate: 'Test string',
            clientKey: 'Test string',
            connectRetryInterval: 42,
            dumpFilePath: 'Test string',
            kind: 'Test string',
            masterHeartbeatPeriod: 'Test string',
            password: 'Test string',
            sslCipher: 'Test string',
            username: 'Test string',
            verifyServerCertificate: true,
          },
        },
        replicaNames: ['Test string'],
        replicationCluster: {
          drReplica: true,
          failoverDrReplicaName: 'Test string',
          psaWriteEndpoint: 'Test string',
        },
        rootPassword: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        scheduledMaintenance: {
          canDefer: true,
          canReschedule: true,
          scheduleDeadlineTime: 'Test string',
          startTime: 'Test string',
        },
        secondaryGceZone: 'Test string',
        selfLink: 'Test string',
        serverCaCert: {
          cert: 'Test string',
          certSerialNumber: 'Test string',
          commonName: 'Test string',
          createTime: 'Test string',
          expirationTime: 'Test string',
          instance: 'Test string',
          kind: 'Test string',
          selfLink: 'Test string',
          sha1Fingerprint: 'Test string',
        },
        serviceAccountEmailAddress: 'Test string',
        settings: {
          activationPolicy: 'Test string',
          activeDirectoryConfig: {
            domain: 'Test string',
            kind: 'Test string',
          },
          advancedMachineFeatures: {
            threadsPerCore: 42,
          },
          authorizedGaeApplications: ['Test string'],
          availabilityType: 'Test string',
          backupConfiguration: {
            backupRetentionSettings: {
              retainedBackups: 42,
              retentionUnit: 'Test string',
            },
            backupTier: 'Test string',
            binaryLogEnabled: true,
            enabled: true,
            kind: 'Test string',
            location: 'Test string',
            pointInTimeRecoveryEnabled: true,
            replicationLogArchivingEnabled: true,
            startTime: 'Test string',
            transactionalLogStorageState: 'Test string',
            transactionLogRetentionDays: 42,
          },
          collation: 'Test string',
          connectionPoolConfig: {
            connectionPoolingEnabled: true,
            flags: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
          },
          connectorEnforcement: 'Test string',
          crashSafeReplicationEnabled: true,
          databaseFlags: [
            {
              name: 'Test string',
              value: 'Test string',
            },
          ],
          databaseReplicationEnabled: true,
          dataCacheConfig: {
            dataCacheEnabled: true,
          },
          dataDiskProvisionedIops: 'Test string',
          dataDiskProvisionedThroughput: 'Test string',
          dataDiskSizeGb: 'Test string',
          dataDiskType: 'Test string',
          deletionProtectionEnabled: true,
          denyMaintenancePeriods: [
            {
              endDate: 'Test string',
              startDate: 'Test string',
              time: 'Test string',
            },
          ],
          edition: 'Test string',
          enableDataplexIntegration: true,
          enableGoogleMlIntegration: true,
          insightsConfig: {
            queryInsightsEnabled: true,
            queryPlansPerMinute: 42,
            queryStringLength: 42,
            recordApplicationTags: true,
            recordClientAddress: true,
          },
          ipConfiguration: {
            allocatedIpRange: 'Test string',
            authorizedNetworks: [
              {
                expirationTime: 'Test string',
                kind: 'Test string',
                name: 'Test string',
                value: 'Test string',
              },
            ],
            customSubjectAlternativeNames: ['Test string'],
            enablePrivatePathForGoogleCloudServices: true,
            ipv4Enabled: true,
            privateNetwork: 'Test string',
            pscConfig: {
              allowedConsumerProjects: ['Test string'],
              networkAttachmentUri: 'Test string',
              pscAutoConnections: [
                {
                  consumerNetwork: 'Test string',
                  consumerNetworkStatus: 'Test string',
                  consumerProject: 'Test string',
                  ipAddress: 'Test string',
                  status: 'Test string',
                },
              ],
              pscEnabled: true,
            },
            requireSsl: true,
            serverCaMode: 'Test string',
            serverCaPool: 'Test string',
            sslMode: 'Test string',
          },
          kind: 'Test string',
          locationPreference: {
            followGaeApplication: 'Test string',
            kind: 'Test string',
            secondaryZone: 'Test string',
            zone: 'Test string',
          },
          maintenanceWindow: {
            day: 42,
            hour: 42,
            kind: 'Test string',
            updateTrack: 'Test string',
          },
          passwordValidationPolicy: {
            complexity: 'Test string',
            disallowCompromisedCredentials: true,
            disallowUsernameSubstring: true,
            enablePasswordPolicy: true,
            minLength: 42,
            passwordChangeInterval: 'Test string',
            reuseInterval: 42,
          },
          pricingPlan: 'Test string',
          replicationLagMaxSeconds: 42,
          replicationType: 'Test string',
          retainBackupsOnDelete: true,
          settingsVersion: 'Test string',
          sqlServerAuditConfig: {
            bucket: 'Test string',
            kind: 'Test string',
            retentionInterval: 'Test string',
            uploadInterval: 'Test string',
          },
          storageAutoResize: true,
          storageAutoResizeLimit: 'Test string',
          tier: 'Test string',
          timeZone: 'Test string',
          userLabels: {
            A: 'Test string',
          },
        },
        sqlNetworkArchitecture: 'Test string',
        state: 'Test string',
        suspensionReason: ['Test string'],
        switchTransactionLogsToCloudStorageEnabled: true,
        tags: {
          A: 'Test string',
        },
        upgradableDatabaseVersions: [
          {
            displayName: 'Test string',
            majorVersion: 'Test string',
            name: 'Test string',
          },
        ],
        writeEndpoint: 'Test string',
      },
    );
    /** Cancels an instance operation that has been performed on an instance. */
    await gapi.client.sql.operations.cancel({
      operation: 'Test string',
      project: 'Test string',
    });
    /** Retrieves an instance operation that has been performed on an instance. */
    await gapi.client.sql.operations.get({
      operation: 'Test string',
      project: 'Test string',
    });
    /** Lists all instance operations that have been performed on the given Cloud SQL instance in the reverse chronological order of the start time. */
    await gapi.client.sql.operations.list({
      instance: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Get Disk Shrink Config for a given instance. */
    await gapi.client.sql.projects.instances.getDiskShrinkConfig({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Get Latest Recovery Time for a given instance. */
    await gapi.client.sql.projects.instances.getLatestRecoveryTime({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Perform Disk Shrink on primary instance. */
    await gapi.client.sql.projects.instances.performDiskShrink(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        targetSizeGb: 'Test string',
      },
    );
    /** Reschedules the maintenance on the given instance. */
    await gapi.client.sql.projects.instances.rescheduleMaintenance(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        reschedule: {
          rescheduleType: 'Test string',
          scheduleTime: 'Test string',
        },
      },
    );
    /** Reset Replica Size to primary instance disk size. */
    await gapi.client.sql.projects.instances.resetReplicaSize(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {},
    );
    /** Start External primary instance migration. */
    await gapi.client.sql.projects.instances.startExternalSync(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        migrationType: 'Test string',
        mysqlSyncConfig: {
          initialSyncFlags: [
            {
              name: 'Test string',
              value: 'Test string',
            },
          ],
        },
        skipVerification: true,
        syncMode: 'Test string',
        syncParallelLevel: 'Test string',
      },
    );
    /** Verify External primary instance external sync settings. */
    await gapi.client.sql.projects.instances.verifyExternalSyncSettings(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        migrationType: 'Test string',
        mysqlSyncConfig: {
          initialSyncFlags: [
            {
              name: 'Test string',
              value: 'Test string',
            },
          ],
        },
        selectedObjects: [
          {
            database: 'Test string',
          },
        ],
        syncMode: 'Test string',
        syncParallelLevel: 'Test string',
        verifyConnectionOnly: true,
        verifyReplicationOnly: true,
      },
    );
    /** Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database. */
    await gapi.client.sql.sslCerts.createEphemeral(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        access_token: 'Test string',
        public_key: 'Test string',
      },
    );
    /** Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted. */
    await gapi.client.sql.sslCerts.delete({
      instance: 'Test string',
      project: 'Test string',
      sha1Fingerprint: 'Test string',
    });
    /** Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation. */
    await gapi.client.sql.sslCerts.get({
      instance: 'Test string',
      project: 'Test string',
      sha1Fingerprint: 'Test string',
    });
    /** Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted. */
    await gapi.client.sql.sslCerts.insert(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        commonName: 'Test string',
      },
    );
    /** Lists all of the current SSL certificates for the instance. */
    await gapi.client.sql.sslCerts.list({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Lists all available machine types (tiers) for Cloud SQL, for example, `db-custom-1-3840`. For more information, see https://cloud.google.com/sql/pricing. */
    await gapi.client.sql.tiers.list({
      project: 'Test string',
    });
    /** Deletes a user from a Cloud SQL instance. */
    await gapi.client.sql.users.delete({
      host: 'Test string',
      instance: 'Test string',
      name: 'Test string',
      project: 'Test string',
    });
    /** Retrieves a resource containing information about a user. */
    await gapi.client.sql.users.get({
      host: 'Test string',
      instance: 'Test string',
      name: 'Test string',
      project: 'Test string',
    });
    /** Creates a new user in a Cloud SQL instance. */
    await gapi.client.sql.users.insert(
      {
        instance: 'Test string',
        project: 'Test string',
      },
      {
        dualPasswordType: 'Test string',
        etag: 'Test string',
        host: 'Test string',
        instance: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        password: 'Test string',
        passwordPolicy: {
          allowedFailedAttempts: 42,
          enableFailedAttemptsCheck: true,
          enablePasswordVerification: true,
          passwordExpirationDuration: 'Test string',
          status: {
            locked: true,
            passwordExpirationTime: 'Test string',
          },
        },
        project: 'Test string',
        sqlserverUserDetails: {
          disabled: true,
          serverRoles: ['Test string'],
        },
        type: 'Test string',
      },
    );
    /** Lists users in the specified Cloud SQL instance. */
    await gapi.client.sql.users.list({
      instance: 'Test string',
      project: 'Test string',
    });
    /** Updates an existing user in a Cloud SQL instance. */
    await gapi.client.sql.users.update(
      {
        host: 'Test string',
        instance: 'Test string',
        name: 'Test string',
        project: 'Test string',
      },
      {
        dualPasswordType: 'Test string',
        etag: 'Test string',
        host: 'Test string',
        instance: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        password: 'Test string',
        passwordPolicy: {
          allowedFailedAttempts: 42,
          enableFailedAttemptsCheck: true,
          enablePasswordVerification: true,
          passwordExpirationDuration: 'Test string',
          status: {
            locked: true,
            passwordExpirationTime: 'Test string',
          },
        },
        project: 'Test string',
        sqlserverUserDetails: {
          disabled: true,
          serverRoles: ['Test string'],
        },
        type: 'Test string',
      },
    );
  }
});
