// Type definitions for non-npm package Cloud Scheduler API v1 1.0
// Project: https://cloud.google.com/scheduler/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://cloudscheduler.googleapis.com/$discovery/rest?version=v1
// Revision: 20200716

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Scheduler API v1 */
    function load(name: "cloudscheduler", version: "v1"): PromiseLike<void>;
    function load(name: "cloudscheduler", version: "v1", callback: () => any): void;

    namespace cloudscheduler {
        interface AppEngineHttpTarget {
            /** App Engine Routing setting for the job. */
            appEngineRouting?: AppEngineRouting;
            /**
             * Body.
             *
             * HTTP request body. A request body is allowed only if the HTTP method is
             * POST or PUT. It will result in invalid argument error to set a body on a
             * job with an incompatible HttpMethod.
             */
            body?: string;
            /**
             * HTTP request headers.
             *
             * This map contains the header field names and values. Headers can be set
             * when the job is created.
             *
             * Cloud Scheduler sets some headers to default values:
             *
             * &#42; `User-Agent`: By default, this header is
             * `"AppEngine-Google; (+http://code.google.com/appengine)"`.
             * This header can be modified, but Cloud Scheduler will append
             * `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
             * modified `User-Agent`.
             * &#42; `X-CloudScheduler`: This header will be set to true.
             *
             * If the job has an body, Cloud Scheduler sets
             * the following headers:
             *
             * &#42; `Content-Type`: By default, the `Content-Type` header is set to
             * `"application/octet-stream"`. The default can be overridden by explictly
             * setting `Content-Type` to a particular media type when the job is
             * created.
             * For example, `Content-Type` can be set to `"application/json"`.
             * &#42; `Content-Length`: This is computed by Cloud Scheduler. This value is
             * output only. It cannot be changed.
             *
             * The headers below are output only. They cannot be set or overridden:
             *
             * &#42; `X-Google-&#42;`: For Google internal use only.
             * &#42; `X-AppEngine-&#42;`: For Google internal use only.
             *
             * In addition, some App Engine headers, which contain
             * job-specific information, are also be sent to the job handler.
             */
            headers?: { [P in string]: string };
            /**
             * The HTTP method to use for the request. PATCH and OPTIONS are not
             * permitted.
             */
            httpMethod?: string;
            /**
             * The relative URI.
             *
             * The relative URL must begin with "/" and must be a valid HTTP relative URL.
             * It can contain a path, query string arguments, and `#` fragments.
             * If the relative URL is empty, then the root path "/" will be used.
             * No spaces are allowed, and the maximum length allowed is 2083 characters.
             */
            relativeUri?: string;
        }
        interface AppEngineRouting {
            /**
             * Output only. The host that the job is sent to.
             *
             * For more information about how App Engine requests are routed, see
             * [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
             *
             * The host is constructed as:
             *
             *
             * &#42; `host = [application_domain_name]`</br>
             * `| [service] + '.' + [application_domain_name]`</br>
             * `| [version] + '.' + [application_domain_name]`</br>
             * `| [version_dot_service]+ '.' + [application_domain_name]`</br>
             * `| [instance] + '.' + [application_domain_name]`</br>
             * `| [instance_dot_service] + '.' + [application_domain_name]`</br>
             * `| [instance_dot_version] + '.' + [application_domain_name]`</br>
             * `| [instance_dot_version_dot_service] + '.' + [application_domain_name]`
             *
             * &#42; `application_domain_name` = The domain name of the app, for
             * example <app-id>.appspot.com, which is associated with the
             * job's project ID.
             *
             * &#42; `service =` service
             *
             * &#42; `version =` version
             *
             * &#42; `version_dot_service =`
             * version `+ '.' +`
             * service
             *
             * &#42; `instance =` instance
             *
             * &#42; `instance_dot_service =`
             * instance `+ '.' +`
             * service
             *
             * &#42; `instance_dot_version =`
             * instance `+ '.' +`
             * version
             *
             * &#42; `instance_dot_version_dot_service =`
             * instance `+ '.' +`
             * version `+ '.' +`
             * service
             *
             *
             * If service is empty, then the job will be sent
             * to the service which is the default service when the job is attempted.
             *
             * If version is empty, then the job will be sent
             * to the version which is the default version when the job is attempted.
             *
             * If instance is empty, then the job will be
             * sent to an instance which is available when the job is attempted.
             *
             * If service,
             * version, or
             * instance is invalid, then the job will be sent
             * to the default version of the default service when the job is attempted.
             */
            host?: string;
            /**
             * App instance.
             *
             * By default, the job is sent to an instance which is available when
             * the job is attempted.
             *
             * Requests can only be sent to a specific instance if
             * [manual scaling is used in App Engine
             * Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
             * App Engine Flex does not support instances. For more information, see
             * [App Engine Standard request
             * routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
             * and [App Engine Flex request
             * routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
             */
            instance?: string;
            /**
             * App service.
             *
             * By default, the job is sent to the service which is the default
             * service when the job is attempted.
             */
            service?: string;
            /**
             * App version.
             *
             * By default, the job is sent to the version which is the default
             * version when the job is attempted.
             */
            version?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface HttpTarget {
            /**
             * HTTP request body. A request body is allowed only if the HTTP
             * method is POST, PUT, or PATCH. It is an error to set body on a job with an
             * incompatible HttpMethod.
             */
            body?: string;
            /**
             * The user can specify HTTP request headers to send with the job's
             * HTTP request. This map contains the header field names and
             * values. Repeated headers are not supported, but a header value can
             * contain commas. These headers represent a subset of the headers
             * that will accompany the job's HTTP request. Some HTTP request
             * headers will be ignored or replaced. A partial list of headers that
             * will be ignored or replaced is below:
             * - Host: This will be computed by Cloud Scheduler and derived from
             * uri.
             * &#42; `Content-Length`: This will be computed by Cloud Scheduler.
             * &#42; `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`.
             * &#42; `X-Google-&#42;`: Google internal use only.
             * &#42; `X-AppEngine-&#42;`: Google internal use only.
             *
             * The total size of headers must be less than 80KB.
             */
            headers?: { [P in string]: string };
            /** Which HTTP method to use for the request. */
            httpMethod?: string;
            /**
             * If specified, an
             * [OAuth token](https://developers.google.com/identity/protocols/OAuth2)
             * will be generated and attached as an `Authorization` header in the HTTP
             * request.
             *
             * This type of authorization should generally only be used when calling
             * Google APIs hosted on &#42;.googleapis.com.
             */
            oauthToken?: OAuthToken;
            /**
             * If specified, an
             * [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect)
             * token will be generated and attached as an `Authorization` header in the
             * HTTP request.
             *
             * This type of authorization can be used for many scenarios, including
             * calling Cloud Run, or endpoints where you intend to validate the token
             * yourself.
             */
            oidcToken?: OidcToken;
            /**
             * Required. The full URI path that the request will be sent to. This string
             * must begin with either "http://" or "https://". Some examples of
             * valid values for uri are:
             * `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will
             * encode some characters for safety and compatibility. The maximum allowed
             * URL length is 2083 characters after encoding.
             */
            uri?: string;
        }
        interface Job {
            /** App Engine HTTP target. */
            appEngineHttpTarget?: AppEngineHttpTarget;
            /**
             * The deadline for job attempts. If the request handler does not respond by
             * this deadline then the request is cancelled and the attempt is marked as a
             * `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in
             * execution logs. Cloud Scheduler will retry the job according
             * to the RetryConfig.
             *
             * The allowed duration for this deadline is:
             * &#42; For HTTP targets, between 15 seconds and 30 minutes.
             * &#42; For App Engine HTTP targets, between 15
             * seconds and 24 hours.
             */
            attemptDeadline?: string;
            /**
             * Optionally caller-specified in CreateJob or
             * UpdateJob.
             *
             * A human-readable description for the job. This string must not contain
             * more than 500 characters.
             */
            description?: string;
            /** HTTP target. */
            httpTarget?: HttpTarget;
            /** Output only. The time the last job attempt started. */
            lastAttemptTime?: string;
            /**
             * Optionally caller-specified in CreateJob, after
             * which it becomes output only.
             *
             * The job name. For example:
             * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
             *
             * &#42; `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
             * hyphens (-), colons (:), or periods (.).
             * For more information, see
             * [Identifying
             * projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
             * &#42; `LOCATION_ID` is the canonical ID for the job's location.
             * The list of available locations can be obtained by calling
             * ListLocations.
             * For more information, see https://cloud.google.com/about/locations/.
             * &#42; `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
             * hyphens (-), or underscores (_). The maximum length is 500 characters.
             */
            name?: string;
            /** Pub/Sub target. */
            pubsubTarget?: PubsubTarget;
            /** Settings that determine the retry behavior. */
            retryConfig?: RetryConfig;
            /**
             * Required, except when used with UpdateJob.
             *
             * Describes the schedule on which the job will be executed.
             *
             * The schedule can be either of the following types:
             *
             * &#42; [Crontab](http://en.wikipedia.org/wiki/Cron#Overview)
             * &#42; English-like
             * [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules)
             *
             * As a general rule, execution `n + 1` of a job will not begin
             * until execution `n` has finished. Cloud Scheduler will never
             * allow two simultaneously outstanding executions. For example,
             * this implies that if the `n+1`th execution is scheduled to run at
             * 16:00 but the `n`th execution takes until 16:15, the `n+1`th
             * execution will not start until `16:15`.
             * A scheduled start time will be delayed if the previous
             * execution has not ended when its scheduled time occurs.
             *
             * If retry_count > 0 and a job attempt fails,
             * the job will be tried a total of retry_count
             * times, with exponential backoff, until the next scheduled start
             * time.
             */
            schedule?: string;
            /**
             * Output only. The next time the job is scheduled. Note that this may be a
             * retry of a previously failed attempt or the next execution time
             * according to the schedule.
             */
            scheduleTime?: string;
            /** Output only. State of the job. */
            state?: string;
            /** Output only. The response from the target for the last attempted execution. */
            status?: Status;
            /**
             * Specifies the time zone to be used in interpreting
             * schedule. The value of this field must be a time
             * zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database).
             *
             * Note that some time zones include a provision for
             * daylight savings time. The rules for daylight saving time are
             * determined by the chosen tz. For UTC use the string "utc". If a
             * time zone is not specified, the default will be in UTC (also known
             * as GMT).
             */
            timeZone?: string;
            /** Output only. The creation time of the job. */
            userUpdateTime?: string;
        }
        interface ListJobsResponse {
            /** The list of jobs. */
            jobs?: Job[];
            /**
             * A token to retrieve next page of results. Pass this value in the
             * page_token field in the subsequent call to
             * ListJobs to retrieve the next page of results.
             * If this is empty it indicates that there are no more results
             * through which to paginate.
             *
             * The page token is valid for only 2 hours.
             */
            nextPageToken?: string;
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?: Location[];
            /** The standard List next-page token. */
            nextPageToken?: string;
        }
        interface Location {
            /**
             * The friendly name for this location, typically a nearby city name.
             * For example, "Tokyo".
             */
            displayName?: string;
            /**
             * Cross-service attributes for the location. For example
             *
             * {"cloud.googleapis.com/region": "us-east1"}
             */
            labels?: { [P in string]: string };
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?: string;
            /**
             * Service-specific metadata. For example the available capacity at the given
             * location.
             */
            metadata?: { [P in string]: any };
            /**
             * Resource name for the location, which may vary between implementations.
             * For example: `"projects/example-project/locations/us-east1"`
             */
            name?: string;
        }
        interface OAuthToken {
            /**
             * OAuth scope to be used for generating OAuth access token.
             * If not specified, "https://www.googleapis.com/auth/cloud-platform"
             * will be used.
             */
            scope?: string;
            /**
             * [Service account email](https://cloud.google.com/iam/docs/service-accounts)
             * to be used for generating OAuth token.
             * The service account must be within the same project as the job. The caller
             * must have iam.serviceAccounts.actAs permission for the service account.
             */
            serviceAccountEmail?: string;
        }
        interface OidcToken {
            /**
             * Audience to be used when generating OIDC token. If not specified, the URI
             * specified in target will be used.
             */
            audience?: string;
            /**
             * [Service account email](https://cloud.google.com/iam/docs/service-accounts)
             * to be used for generating OIDC token.
             * The service account must be within the same project as the job. The caller
             * must have iam.serviceAccounts.actAs permission for the service account.
             */
            serviceAccountEmail?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface PauseJobRequest {
        }
        interface PubsubMessage {
            /**
             * Attributes for this message. If this field is empty, the message must
             * contain non-empty data. This can be used to filter messages on the
             * subscription.
             */
            attributes?: { [P in string]: string };
            /**
             * The message data field. If this field is empty, the message must contain
             * at least one attribute.
             */
            data?: string;
            /**
             * ID of this message, assigned by the server when the message is published.
             * Guaranteed to be unique within the topic. This value may be read by a
             * subscriber that receives a `PubsubMessage` via a `Pull` call or a push
             * delivery. It must not be populated by the publisher in a `Publish` call.
             */
            messageId?: string;
            /**
             * If non-empty, identifies related messages for which publish order should be
             * respected. If a `Subscription` has `enable_message_ordering` set to `true`,
             * messages published with the same non-empty `ordering_key` value will be
             * delivered to subscribers in the order in which they are received by the
             * Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest`
             * must specify the same `ordering_key` value.
             */
            orderingKey?: string;
            /**
             * The time at which the message was published, populated by the server when
             * it receives the `Publish` call. It must not be populated by the
             * publisher in a `Publish` call.
             */
            publishTime?: string;
        }
        interface PubsubTarget {
            /**
             * Attributes for PubsubMessage.
             *
             * Pubsub message must contain either non-empty data, or at least one
             * attribute.
             */
            attributes?: { [P in string]: string };
            /**
             * The message payload for PubsubMessage.
             *
             * Pubsub message must contain either non-empty data, or at least one
             * attribute.
             */
            data?: string;
            /**
             * Required. The name of the Cloud Pub/Sub topic to which messages will
             * be published when a job is delivered. The topic name must be in the
             * same format as required by PubSub's
             * [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest),
             * for example `projects/PROJECT_ID/topics/TOPIC_ID`.
             *
             * The topic must be in the same project as the Cloud Scheduler job.
             */
            topicName?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ResumeJobRequest {
        }
        interface RetryConfig {
            /**
             * The maximum amount of time to wait before retrying a job after
             * it fails.
             *
             * The default value of this field is 1 hour.
             */
            maxBackoffDuration?: string;
            /**
             * The time between retries will double `max_doublings` times.
             *
             * A job's retry interval starts at
             * min_backoff_duration, then doubles
             * `max_doublings` times, then increases linearly, and finally
             * retries at intervals of
             * max_backoff_duration up to
             * retry_count times.
             *
             * For example, if min_backoff_duration is
             * 10s, max_backoff_duration is 300s, and
             * `max_doublings` is 3, then the a job will first be retried in 10s. The
             * retry interval will double three times, and then increase linearly by
             * 2^3 &#42; 10s.  Finally, the job will retry at intervals of
             * max_backoff_duration until the job has
             * been attempted retry_count times. Thus, the
             * requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, ....
             *
             * The default value of this field is 5.
             */
            maxDoublings?: number;
            /**
             * The time limit for retrying a failed job, measured from time when an
             * execution was first attempted. If specified with
             * retry_count, the job will be retried until both
             * limits are reached.
             *
             * The default value for max_retry_duration is zero, which means retry
             * duration is unlimited.
             */
            maxRetryDuration?: string;
            /**
             * The minimum amount of time to wait before retrying a job after
             * it fails.
             *
             * The default value of this field is 5 seconds.
             */
            minBackoffDuration?: string;
            /**
             * The number of attempts that the system will make to run a job using the
             * exponential backoff procedure described by
             * max_doublings.
             *
             * The default value of retry_count is zero.
             *
             * If retry_count is zero, a job attempt will &#42;not&#42; be retried if
             * it fails. Instead the Cloud Scheduler system will wait for the
             * next scheduled execution time.
             *
             * If retry_count is set to a non-zero number then Cloud Scheduler
             * will retry failed attempts, using exponential backoff,
             * retry_count times, or until the next scheduled execution time,
             * whichever comes first.
             *
             * Values greater than 5 and negative values are not allowed.
             */
            retryCount?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface RunJobRequest {
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface JobsResource {
            /** Creates a job. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The location name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Job;
            }): Request<Job>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The location name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Job): Request<Job>;
            /** Deletes a job. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets a job. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Job>;
            /** Lists jobs. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Requested page size.
                 *
                 * The maximum page size is 500. If unspecified, the page size will
                 * be the maximum. Fewer jobs than requested might be returned,
                 * even if more jobs exist; use next_page_token to determine if more
                 * jobs exist.
                 */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server will return. To
                 * request the first page results, page_token must be empty. To
                 * request the next page of results, page_token must be the value of
                 * next_page_token returned from
                 * the previous call to ListJobs. It is an error to
                 * switch the value of filter or
                 * order_by while iterating through pages.
                 */
                pageToken?: string;
                /**
                 * Required. The location name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListJobsResponse>;
            /**
             * Updates a job.
             *
             * If successful, the updated Job is returned. If the job does
             * not exist, `NOT_FOUND` is returned.
             *
             * If UpdateJob does not successfully return, it is possible for the
             * job to be in an Job.State.UPDATE_FAILED state. A job in this state may
             * not be executed. If this happens, retry the UpdateJob request
             * until a successful response is received.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Optionally caller-specified in CreateJob, after
                 * which it becomes output only.
                 *
                 * The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 *
                 * &#42; `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
                 * hyphens (-), colons (:), or periods (.).
                 * For more information, see
                 * [Identifying
                 * projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
                 * &#42; `LOCATION_ID` is the canonical ID for the job's location.
                 * The list of available locations can be obtained by calling
                 * ListLocations.
                 * For more information, see https://cloud.google.com/about/locations/.
                 * &#42; `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
                 * hyphens (-), or underscores (_). The maximum length is 500 characters.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** A  mask used to specify which fields of the job are being updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Job;
            }): Request<Job>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Optionally caller-specified in CreateJob, after
                 * which it becomes output only.
                 *
                 * The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 *
                 * &#42; `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
                 * hyphens (-), colons (:), or periods (.).
                 * For more information, see
                 * [Identifying
                 * projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
                 * &#42; `LOCATION_ID` is the canonical ID for the job's location.
                 * The list of available locations can be obtained by calling
                 * ListLocations.
                 * For more information, see https://cloud.google.com/about/locations/.
                 * &#42; `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
                 * hyphens (-), or underscores (_). The maximum length is 500 characters.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** A  mask used to specify which fields of the job are being updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Job): Request<Job>;
            /**
             * Pauses a job.
             *
             * If a job is paused then the system will stop executing the job
             * until it is re-enabled via ResumeJob. The
             * state of the job is stored in state; if paused it
             * will be set to Job.State.PAUSED. A job must be in Job.State.ENABLED
             * to be paused.
             */
            pause(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PauseJobRequest;
            }): Request<Job>;
            pause(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PauseJobRequest): Request<Job>;
            /**
             * Resume a job.
             *
             * This method reenables a job after it has been Job.State.PAUSED. The
             * state of a job is stored in Job.state; after calling this method it
             * will be set to Job.State.ENABLED. A job must be in
             * Job.State.PAUSED to be resumed.
             */
            resume(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ResumeJobRequest;
            }): Request<Job>;
            resume(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ResumeJobRequest): Request<Job>;
            /**
             * Forces a job to run now.
             *
             * When this method is called, Cloud Scheduler will dispatch the job, even
             * if the job is already running.
             */
            run(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RunJobRequest;
            }): Request<Job>;
            run(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The job name. For example:
                 * `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RunJobRequest): Request<Job>;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name for the location. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Location>;
            /** Lists information about the supported locations for this service. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource that owns the locations collection, if applicable. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLocationsResponse>;
            jobs: JobsResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
