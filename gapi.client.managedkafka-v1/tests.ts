/* This is stub file for gapi.client.managedkafka-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250414

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://managedkafka.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.managedkafka */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.managedkafka.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.managedkafka.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new cluster in a given project and location. */
    await gapi.client.managedkafka.projects.locations.clusters.create(
      {
        clusterId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        capacityConfig: {
          memoryBytes: 'Test string',
          vcpuCount: 'Test string',
        },
        createTime: 'Test string',
        gcpConfig: {
          accessConfig: {
            networkConfigs: [
              {
                subnet: 'Test string',
              },
            ],
          },
          kmsKey: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        rebalanceConfig: {
          mode: 'Test string',
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Returns the properties of a single cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.get({
      name: 'Test string',
    });
    /** Lists the clusters in a given project and location. */
    await gapi.client.managedkafka.projects.locations.clusters.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the properties of a single cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        capacityConfig: {
          memoryBytes: 'Test string',
          vcpuCount: 'Test string',
        },
        createTime: 'Test string',
        gcpConfig: {
          accessConfig: {
            networkConfigs: [
              {
                subnet: 'Test string',
              },
            ],
          },
          kmsKey: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        rebalanceConfig: {
          mode: 'Test string',
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Incremental update: Adds an acl entry to an acl. Creates the acl if it does not exist yet. */
    await gapi.client.managedkafka.projects.locations.clusters.acls.addAclEntry(
      {
        acl: 'Test string',
      },
      {
        host: 'Test string',
        operation: 'Test string',
        permissionType: 'Test string',
        principal: 'Test string',
      },
    );
    /** Creates a new acl in the given project, location, and cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.acls.create(
      {
        aclId: 'Test string',
        parent: 'Test string',
      },
      {
        aclEntries: [
          {
            host: 'Test string',
            operation: 'Test string',
            permissionType: 'Test string',
            principal: 'Test string',
          },
        ],
        etag: 'Test string',
        name: 'Test string',
        patternType: 'Test string',
        resourceName: 'Test string',
        resourceType: 'Test string',
      },
    );
    /** Deletes an acl. */
    await gapi.client.managedkafka.projects.locations.clusters.acls.delete({
      name: 'Test string',
    });
    /** Returns the properties of a single acl. */
    await gapi.client.managedkafka.projects.locations.clusters.acls.get({
      name: 'Test string',
    });
    /** Lists the acls in a given cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.acls.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the properties of a single acl. */
    await gapi.client.managedkafka.projects.locations.clusters.acls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        aclEntries: [
          {
            host: 'Test string',
            operation: 'Test string',
            permissionType: 'Test string',
            principal: 'Test string',
          },
        ],
        etag: 'Test string',
        name: 'Test string',
        patternType: 'Test string',
        resourceName: 'Test string',
        resourceType: 'Test string',
      },
    );
    /** Incremental update: Removes an acl entry from an acl. Deletes the acl if its acl entries become empty (i.e. if the removed entry was the last one in the acl). */
    await gapi.client.managedkafka.projects.locations.clusters.acls.removeAclEntry(
      {
        acl: 'Test string',
      },
      {
        host: 'Test string',
        operation: 'Test string',
        permissionType: 'Test string',
        principal: 'Test string',
      },
    );
    /** Deletes a single consumer group. */
    await gapi.client.managedkafka.projects.locations.clusters.consumerGroups.delete(
      {
        name: 'Test string',
      },
    );
    /** Returns the properties of a single consumer group. */
    await gapi.client.managedkafka.projects.locations.clusters.consumerGroups.get(
      {
        name: 'Test string',
      },
    );
    /** Lists the consumer groups in a given cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.consumerGroups.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the properties of a single consumer group. */
    await gapi.client.managedkafka.projects.locations.clusters.consumerGroups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        name: 'Test string',
        topics: {
          A: {
            partitions: {
              A: {
                metadata: 'Test string',
                offset: 'Test string',
              },
            },
          },
        },
      },
    );
    /** Creates a new topic in a given project and location. */
    await gapi.client.managedkafka.projects.locations.clusters.topics.create(
      {
        parent: 'Test string',
        topicId: 'Test string',
      },
      {
        configs: {
          A: 'Test string',
        },
        name: 'Test string',
        partitionCount: 42,
        replicationFactor: 42,
      },
    );
    /** Deletes a single topic. */
    await gapi.client.managedkafka.projects.locations.clusters.topics.delete({
      name: 'Test string',
    });
    /** Returns the properties of a single topic. */
    await gapi.client.managedkafka.projects.locations.clusters.topics.get({
      name: 'Test string',
    });
    /** Lists the topics in a given cluster. */
    await gapi.client.managedkafka.projects.locations.clusters.topics.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the properties of a single topic. */
    await gapi.client.managedkafka.projects.locations.clusters.topics.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        configs: {
          A: 'Test string',
        },
        name: 'Test string',
        partitionCount: 42,
        replicationFactor: 42,
      },
    );
    /** Creates a new Kafka Connect cluster in a given project and location. */
    await gapi.client.managedkafka.projects.locations.connectClusters.create(
      {
        connectClusterId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        capacityConfig: {
          memoryBytes: 'Test string',
          vcpuCount: 'Test string',
        },
        config: {
          A: 'Test string',
        },
        createTime: 'Test string',
        gcpConfig: {
          accessConfig: {
            networkConfigs: [
              {
                additionalSubnets: ['Test string'],
                dnsDomainNames: ['Test string'],
                primarySubnet: 'Test string',
              },
            ],
          },
          secretPaths: ['Test string'],
        },
        kafkaCluster: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single Connect cluster. */
    await gapi.client.managedkafka.projects.locations.connectClusters.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Returns the properties of a single Kafka Connect cluster. */
    await gapi.client.managedkafka.projects.locations.connectClusters.get({
      name: 'Test string',
    });
    /** Lists the Kafka Connect clusters in a given project and location. */
    await gapi.client.managedkafka.projects.locations.connectClusters.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the properties of a single Kafka Connect cluster. */
    await gapi.client.managedkafka.projects.locations.connectClusters.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        capacityConfig: {
          memoryBytes: 'Test string',
          vcpuCount: 'Test string',
        },
        config: {
          A: 'Test string',
        },
        createTime: 'Test string',
        gcpConfig: {
          accessConfig: {
            networkConfigs: [
              {
                additionalSubnets: ['Test string'],
                dnsDomainNames: ['Test string'],
                primarySubnet: 'Test string',
              },
            ],
          },
          secretPaths: ['Test string'],
        },
        kafkaCluster: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a new connector in a given Connect cluster. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.create(
      {
        connectorId: 'Test string',
        parent: 'Test string',
      },
      {
        configs: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        taskRestartPolicy: {
          maximumBackoff: 'Test string',
          minimumBackoff: 'Test string',
        },
      },
    );
    /** Deletes a connector. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.delete(
      {
        name: 'Test string',
      },
    );
    /** Returns the properties of a single connector. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.get(
      {
        name: 'Test string',
      },
    );
    /** Lists the connectors in a given Connect cluster. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the properties of a connector. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        configs: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        taskRestartPolicy: {
          maximumBackoff: 'Test string',
          minimumBackoff: 'Test string',
        },
      },
    );
    /** Pauses the connector and its tasks. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.pause(
      {
        name: 'Test string',
      },
      {},
    );
    /** Restarts the connector. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.restart(
      {
        name: 'Test string',
      },
      {},
    );
    /** Resumes the connector and its tasks. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.resume(
      {
        name: 'Test string',
      },
      {},
    );
    /** Stops the connector. */
    await gapi.client.managedkafka.projects.locations.connectClusters.connectors.stop(
      {
        name: 'Test string',
      },
      {},
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.managedkafka.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.managedkafka.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.managedkafka.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.managedkafka.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
