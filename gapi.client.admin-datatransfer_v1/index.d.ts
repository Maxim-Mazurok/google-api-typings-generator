/* Type definitions for non-npm package Admin SDK API datatransfer_v1 0.0 */
// Project: https://developers.google.com/admin-sdk/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://admin.googleapis.com/$discovery/rest?version=datatransfer_v1
// Revision: 20230110

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Admin SDK API datatransfer_v1 */
    function load(urlOrObject: "https://admin.googleapis.com/$discovery/rest?version=datatransfer_v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "admin", version: "datatransfer_v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "admin", version: "datatransfer_v1", callback: () => any): void;

    namespace datatransfer {
        interface Application {
            /** Etag of the resource. */
            etag?: string;
            /** The application's ID. Retrievable by using the [`applications.list()`](/admin-sdk/data-transfer/reference/rest/v1/applications/list) method. */
            id?: string;
            /** Identifies the resource as a DataTransfer Application Resource. */
            kind?: string;
            /** The application's name. */
            name?: string;
            /** The list of all possible transfer parameters for this application. These parameters select which categories of the user's data to transfer. */
            transferParams?: ApplicationTransferParam[];
        }
        interface ApplicationDataTransfer {
            /** The application's ID. */
            applicationId?: string;
            /**
             * The transfer parameters for the application. These parameters are used to select the data which will get transferred in context of this application. For more information about the
             * specific values available for each application, see the [Transfer parameters](/admin-sdk/data-transfer/v1/parameters) reference.
             */
            applicationTransferParams?: ApplicationTransferParam[];
            /** Read-only. Current status of transfer for this application. */
            applicationTransferStatus?: string;
        }
        interface ApplicationsListResponse {
            /** The list of applications that support data transfer and are also installed for the customer. */
            applications?: Application[];
            /** ETag of the resource. */
            etag?: string;
            /** Identifies the resource as a collection of Applications. */
            kind?: string;
            /** Token to specify the next page in the list. */
            nextPageToken?: string;
        }
        interface ApplicationTransferParam {
            /** The type of the transfer parameter, such as `PRIVACY_LEVEL`. */
            key?: string;
            /** The value of the transfer parameter, such as `PRIVATE` or `SHARED`. */
            value?: string[];
        }
        interface DataTransfer {
            /**
             * The list of per-application data transfer resources. It contains details of the applications associated with this transfer resource, and also specifies the applications for which
             * data transfer has to be done at the time of the transfer resource creation.
             */
            applicationDataTransfers?: ApplicationDataTransfer[];
            /** ETag of the resource. */
            etag?: string;
            /** Read-only. The transfer's ID. */
            id?: string;
            /** Identifies the resource as a DataTransfer request. */
            kind?: string;
            /** ID of the user to whom the data is being transferred. */
            newOwnerUserId?: string;
            /** ID of the user whose data is being transferred. */
            oldOwnerUserId?: string;
            /** Read-only. Overall transfer status. */
            overallTransferStatusCode?: string;
            /** Read-only. The time at which the data transfer was requested. */
            requestTime?: string;
        }
        interface DataTransfersListResponse {
            /** List of data transfer requests. */
            dataTransfers?: DataTransfer[];
            /** ETag of the resource. */
            etag?: string;
            /** Identifies the resource as a collection of data transfer requests. */
            kind?: string;
            /** Token to specify the next page in the list. */
            nextPageToken?: string;
        }
        interface ApplicationsResource {
            /** Retrieves information about an application for the given application ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** ID of the application resource to be retrieved. */
                applicationId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Application>;
            /** Lists the applications available for data transfer for a customer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. Default is 100. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Token to specify next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ApplicationsListResponse>;
        }
        interface TransfersResource {
            /** Retrieves a data transfer request by its resource ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the resource to be retrieved. This is returned in the response from the insert method. */
                dataTransferId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DataTransfer>;
            /** Inserts a data transfer request. See the [Transfer parameters](/admin-sdk/data-transfer/v1/parameters) reference for specific application requirements. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DataTransfer;
            }): Request<DataTransfer>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DataTransfer): Request<DataTransfer>;
            /** Lists the transfers for a customer by source user, destination user, or status. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. Default is 100. */
                maxResults?: number;
                /** Destination user's profile ID. */
                newOwnerUserId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Source user's profile ID. */
                oldOwnerUserId?: string;
                /** Token to specify the next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Status of the transfer. */
                status?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DataTransfersListResponse>;
        }

        const applications: ApplicationsResource;

        const transfers: TransfersResource;
    }
}
