/* This is stub file for gapi.client.vault definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/

// Revision: 20210109

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('vault', 'v1', () => {
        /** now we can use gapi.client.vault */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage your eDiscovery data */
            'https://www.googleapis.com/auth/ediscovery',
            /** View your eDiscovery data */
            'https://www.googleapis.com/auth/ediscovery.readonly',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Adds an account as a matter collaborator. */
        await gapi.client.vault.matters.addPermissions({
            matterId: "Test string",
        }, {
            ccMe: true,
            matterPermission: {
                accountId: "Test string",
                role: "Test string",
            },
            sendEmails: true,
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Closes the specified matter. Returns matter with updated state. */
        await gapi.client.vault.matters.close({
            matterId: "Test string",
        }, {
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Counts the artifacts within the context of a matter and returns a detailed breakdown of metrics. */
        await gapi.client.vault.matters.count({
            matterId: "Test string",
        }, {
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            view: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new matter with the given name and description. The initial state is open, and the owner is the method caller. Returns the created matter with default view. */
        await gapi.client.vault.matters.create({
        }, {
            description: "Test string",
            matterId: "Test string",
            matterPermissions: [
                {
                    accountId: "Test string",
                    role: "Test string",
                }            ],
            name: "Test string",
            state: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Deletes the specified matter. Returns matter with updated state. */
        await gapi.client.vault.matters.delete({
            matterId: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the specified matter. */
        await gapi.client.vault.matters.get({
            matterId: "Test string",
            view: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Lists matters the user has access to. */
        await gapi.client.vault.matters.list({
            pageSize: 42,
            pageToken: "Test string",
            state: "Test string",
            view: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Removes an account as a matter collaborator. */
        await gapi.client.vault.matters.removePermissions({
            matterId: "Test string",
        }, {
            accountId: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Reopens the specified matter. Returns matter with updated state. */
        await gapi.client.vault.matters.reopen({
            matterId: "Test string",
        }, {
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Undeletes the specified matter. Returns matter with updated state. */
        await gapi.client.vault.matters.undelete({
            matterId: "Test string",
        }, {
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates the specified matter. This updates only the name and description of the matter, identified by matter ID. Changes to any other fields are ignored. Returns the default view of the
         * matter.
         */
        await gapi.client.vault.matters.update({
            matterId: "Test string",
        }, {
            description: "Test string",
            matterId: "Test string",
            matterPermissions: [
                {
                    accountId: "Test string",
                    role: "Test string",
                }            ],
            name: "Test string",
            state: "Test string",
        });
        /** Creates an Export. */
        await gapi.client.vault.matters.exports.create({
            matterId: "Test string",
        }, {
            cloudStorageSink: {
                files: [
                    {
                        bucketName: "Test string",
                        md5Hash: "Test string",
                        objectName: "Test string",
                        size: "Test string",
                    }                ],
            },
            createTime: "Test string",
            exportOptions: {
                driveOptions: {
                    includeAccessInfo: true,
                },
                groupsOptions: {
                    exportFormat: "Test string",
                },
                hangoutsChatOptions: {
                    exportFormat: "Test string",
                },
                mailOptions: {
                    exportFormat: "Test string",
                    showConfidentialModeContent: true,
                },
                region: "Test string",
                voiceOptions: {
                    exportFormat: "Test string",
                },
            },
            id: "Test string",
            matterId: "Test string",
            name: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            requester: {
                displayName: "Test string",
                email: "Test string",
            },
            stats: {
                exportedArtifactCount: "Test string",
                sizeInBytes: "Test string",
                totalArtifactCount: "Test string",
            },
            status: "Test string",
        });
        /** Deletes an Export. */
        await gapi.client.vault.matters.exports.delete({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Gets an Export. */
        await gapi.client.vault.matters.exports.get({
            exportId: "Test string",
            matterId: "Test string",
        });
        /** Lists Exports. */
        await gapi.client.vault.matters.exports.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds HeldAccounts to a hold. Returns a list of accounts that have been successfully added. Accounts can only be added to an existing account-based hold. */
        await gapi.client.vault.matters.holds.addHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
            emails: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a hold in the given matter. */
        await gapi.client.vault.matters.holds.create({
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
        await gapi.client.vault.matters.holds.delete({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Gets a hold by ID. */
        await gapi.client.vault.matters.holds.get({
            holdId: "Test string",
            matterId: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists holds within a matter. An empty page token in ListHoldsResponse denotes no more holds to list. */
        await gapi.client.vault.matters.holds.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Removes HeldAccounts from a hold. Returns a list of statuses in the same order as the request. If this request leaves the hold with no held accounts, the hold will not apply to any
         * accounts.
         */
        await gapi.client.vault.matters.holds.removeHeldAccounts({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountIds: [
                "Test string"            ],
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /**
         * Updates the OU and/or query parameters of a hold. You cannot add accounts to a hold that covers an OU, nor can you add OUs to a hold that covers individual accounts. Accounts listed in
         * the hold will be ignored.
         */
        await gapi.client.vault.matters.holds.update({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accounts: [
                {
                    accountId: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    holdTime: "Test string",
                    lastName: "Test string",
                }            ],
            corpus: "Test string",
            holdId: "Test string",
            name: "Test string",
            orgUnit: {
                holdTime: "Test string",
                orgUnitId: "Test string",
            },
            query: {
                driveQuery: {
                    includeSharedDriveFiles: true,
                    includeTeamDriveFiles: true,
                },
                groupsQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                hangoutsChatQuery: {
                    includeRooms: true,
                },
                mailQuery: {
                    endTime: "Test string",
                    startTime: "Test string",
                    terms: "Test string",
                },
                voiceQuery: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            updateTime: "Test string",
        });
        /** Adds a HeldAccount to a hold. Accounts can only be added to a hold that has no held_org_unit set. Attempting to add an account to an OU-based hold will result in an error. */
        await gapi.client.vault.matters.holds.accounts.create({
            holdId: "Test string",
            matterId: "Test string",
        }, {
            accountId: "Test string",
            email: "Test string",
            firstName: "Test string",
            holdTime: "Test string",
            lastName: "Test string",
        });
        /** Removes a HeldAccount from a hold. If this request leaves the hold with no held accounts, the hold will not apply to any accounts. */
        await gapi.client.vault.matters.holds.accounts.delete({
            accountId: "Test string",
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Lists HeldAccounts for a hold. This will only list individually specified held accounts. If the hold is on an OU, then use Admin SDK to enumerate its members. */
        await gapi.client.vault.matters.holds.accounts.list({
            holdId: "Test string",
            matterId: "Test string",
        });
        /** Creates a saved query. */
        await gapi.client.vault.matters.savedQueries.create({
            matterId: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            matterId: "Test string",
            query: {
                accountInfo: {
                    emails: [
                        "Test string"                    ],
                },
                corpus: "Test string",
                dataScope: "Test string",
                driveOptions: {
                    includeSharedDrives: true,
                    includeTeamDrives: true,
                    versionDate: "Test string",
                },
                endTime: "Test string",
                hangoutsChatInfo: {
                    roomId: [
                        "Test string"                    ],
                },
                hangoutsChatOptions: {
                    includeRooms: true,
                },
                mailOptions: {
                    excludeDrafts: true,
                },
                method: "Test string",
                orgUnitInfo: {
                    orgUnitId: "Test string",
                },
                searchMethod: "Test string",
                sharedDriveInfo: {
                    sharedDriveIds: [
                        "Test string"                    ],
                },
                startTime: "Test string",
                teamDriveInfo: {
                    teamDriveIds: [
                        "Test string"                    ],
                },
                terms: "Test string",
                timeZone: "Test string",
                voiceOptions: {
                    coveredData: [
                        "Test string"                    ],
                },
            },
            savedQueryId: "Test string",
        });
        /** Deletes a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.delete({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Retrieves a saved query by Id. */
        await gapi.client.vault.matters.savedQueries.get({
            matterId: "Test string",
            savedQueryId: "Test string",
        });
        /** Lists saved queries within a matter. An empty page token in ListSavedQueriesResponse denotes no more saved queries to list. */
        await gapi.client.vault.matters.savedQueries.list({
            matterId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.vault.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.vault.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.vault.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.vault.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
