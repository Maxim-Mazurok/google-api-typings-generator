// Type definitions for non-npm package G Suite Vault API v1 1.0
// Project: https://developers.google.com/vault
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://vault.googleapis.com/$discovery/rest?version=v1
// Revision: 20200817

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load G Suite Vault API v1 */
    function load(name: "vault", version: "v1"): PromiseLike<void>;
    function load(name: "vault", version: "v1", callback: () => any): void;

    namespace vault {
        interface AccountInfo {
            /** A set of accounts to search. */
            emails?: string[];
        }
        interface AddHeldAccountResult {
            /** If present, this account was successfully created. */
            account?: HeldAccount;
            /** This represents the success status. If failed, check message. */
            status?: Status;
        }
        interface AddHeldAccountsRequest {
            /**
             * Account IDs to identify which accounts to add. Only account_ids or only
             * emails should be specified, but not both.
             */
            accountIds?: string[];
            /**
             * Emails to identify which accounts to add. Only emails or only account_ids
             * should be specified, but not both.
             */
            emails?: string[];
        }
        interface AddHeldAccountsResponse {
            /** The list of responses, in the same order as the batch request. */
            responses?: AddHeldAccountResult[];
        }
        interface AddMatterPermissionsRequest {
            /**
             * Only relevant if send_emails is true.
             * True to CC requestor in the email message.
             * False to not CC requestor.
             */
            ccMe?: boolean;
            /** The MatterPermission to add. */
            matterPermission?: MatterPermission;
            /**
             * True to send notification email to the added account.
             * False to not send notification email.
             */
            sendEmails?: boolean;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CloseMatterRequest {
        }
        interface CloseMatterResponse {
            /** The updated matter, with state CLOSED. */
            matter?: Matter;
        }
        interface CloudStorageFile {
            /**
             * The cloud storage bucket name of this export file.
             * Can be used in cloud storage JSON/XML API, but not to list the bucket
             * contents. Instead, you can <a
             * href="https://cloud.google.com/storage/docs/json_api/v1/objects/get">
             * get individual export files</a> by object name.
             */
            bucketName?: string;
            /** The md5 hash of the file. */
            md5Hash?: string;
            /**
             * The cloud storage object name of this export file.
             * Can be used in cloud storage JSON/XML API.
             */
            objectName?: string;
            /** The size of the export file. */
            size?: string;
        }
        interface CloudStorageSink {
            /** Output only. The exported files on cloud storage. */
            files?: CloudStorageFile[];
        }
        interface CorpusQuery {
            /** Details pertaining to Drive holds. If set, corpus must be Drive. */
            driveQuery?: HeldDriveQuery;
            /** Details pertaining to Groups holds. If set, corpus must be Groups. */
            groupsQuery?: HeldGroupsQuery;
            /**
             * Details pertaining to Hangouts Chat holds. If set, corpus must be
             * Hangouts Chat.
             */
            hangoutsChatQuery?: HeldHangoutsChatQuery;
            /** Details pertaining to mail holds. If set, corpus must be mail. */
            mailQuery?: HeldMailQuery;
        }
        interface DriveExportOptions {
            /**
             * Set to true to include access level information for users
             * with <a
             * href="https://support.google.com/vault/answer/6099459#metadata">indirect
             * access</a> to files.
             */
            includeAccessInfo?: boolean;
        }
        interface DriveOptions {
            /** Set to true to include shared drive. */
            includeSharedDrives?: boolean;
            /** Set to true to include Team Drive. */
            includeTeamDrives?: boolean;
            /**
             * Search the versions of the Drive file
             * as of the reference date. These timestamps are in GMT and
             * rounded down to the given date.
             */
            versionDate?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Export {
            /** Output only. Export sink for cloud storage files. */
            cloudStorageSink?: CloudStorageSink;
            /** Output only. The time when the export was created. */
            createTime?: string;
            /** Advanced options of the export. */
            exportOptions?: ExportOptions;
            /** Output only. The generated export ID. */
            id?: string;
            /** Output only. The matter ID. */
            matterId?: string;
            /** The export name. */
            name?: string;
            /** The search query being exported. */
            query?: Query;
            /** Output only. The requester of the export. */
            requester?: UserInfo;
            /** Output only. Export statistics. */
            stats?: ExportStats;
            /** Output only. The export status. */
            status?: string;
        }
        interface ExportOptions {
            /** Option available for Drive export. */
            driveOptions?: DriveExportOptions;
            /** Option available for groups export. */
            groupsOptions?: GroupsExportOptions;
            /** Option available for hangouts chat export. */
            hangoutsChatOptions?: HangoutsChatExportOptions;
            /** Option available for mail export. */
            mailOptions?: MailExportOptions;
            /** The requested export location. */
            region?: string;
        }
        interface ExportStats {
            /** The number of documents already processed by the export. */
            exportedArtifactCount?: string;
            /** The size of export in bytes. */
            sizeInBytes?: string;
            /** The number of documents to be exported. */
            totalArtifactCount?: string;
        }
        interface GroupsExportOptions {
            /** The export format for groups export. */
            exportFormat?: string;
        }
        interface HangoutsChatExportOptions {
            /** The export format for hangouts chat export. */
            exportFormat?: string;
        }
        interface HangoutsChatInfo {
            /** A set of rooms to search. */
            roomId?: string[];
        }
        interface HangoutsChatOptions {
            /** Set to true to include rooms. */
            includeRooms?: boolean;
        }
        interface HeldAccount {
            /**
             * The account's ID as provided by the
             * <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
             */
            accountId?: string;
            /**
             * The primary email address of the account. If used as an input, this takes
             * precedence over account ID.
             */
            email?: string;
            /** Output only. The first name of the account holder. */
            firstName?: string;
            /** Output only. When the account was put on hold. */
            holdTime?: string;
            /** Output only. The last name of the account holder. */
            lastName?: string;
        }
        interface HeldDriveQuery {
            /** If true, include files in shared drives in the hold. */
            includeSharedDriveFiles?: boolean;
            /** If true, include files in Team Drives in the hold. */
            includeTeamDriveFiles?: boolean;
        }
        interface HeldGroupsQuery {
            /**
             * The end time range for the search query. These timestamps are in GMT and
             * rounded down to the start of the given date.
             */
            endTime?: string;
            /**
             * The start time range for the search query. These timestamps are in GMT and
             * rounded down to the start of the given date.
             */
            startTime?: string;
            /** The search terms for the hold. */
            terms?: string;
        }
        interface HeldHangoutsChatQuery {
            /** If true, include rooms the user has participated in. */
            includeRooms?: boolean;
        }
        interface HeldMailQuery {
            /**
             * The end time range for the search query. These timestamps are in GMT and
             * rounded down to the start of the given date.
             */
            endTime?: string;
            /**
             * The start time range for the search query. These timestamps are in GMT and
             * rounded down to the start of the given date.
             */
            startTime?: string;
            /** The search terms for the hold. */
            terms?: string;
        }
        interface HeldOrgUnit {
            /** When the org unit was put on hold. This property is immutable. */
            holdTime?: string;
            /** The org unit's immutable ID as provided by the Admin SDK. */
            orgUnitId?: string;
        }
        interface Hold {
            /**
             * If set, the hold applies to the enumerated accounts and org_unit must be
             * empty.
             */
            accounts?: HeldAccount[];
            /** The corpus to be searched. */
            corpus?: string;
            /** The unique immutable ID of the hold. Assigned during creation. */
            holdId?: string;
            /** The name of the hold. */
            name?: string;
            /**
             * If set, the hold applies to all members of the organizational unit and
             * accounts must be empty. This property is mutable. For groups holds,
             * set the accounts field.
             */
            orgUnit?: HeldOrgUnit;
            /**
             * The corpus-specific query. If set, the corpusQuery must match corpus
             * type.
             */
            query?: CorpusQuery;
            /** The last time this hold was modified. */
            updateTime?: string;
        }
        interface ListExportsResponse {
            /** The list of exports. */
            exports?: Export[];
            /** Page token to retrieve the next page of results in the list. */
            nextPageToken?: string;
        }
        interface ListHeldAccountsResponse {
            /** The held accounts on a hold. */
            accounts?: HeldAccount[];
        }
        interface ListHoldsResponse {
            /** The list of holds. */
            holds?: Hold[];
            /**
             * Page token to retrieve the next page of results in the list.
             * If this is empty, then there are no more holds to list.
             */
            nextPageToken?: string;
        }
        interface ListMattersResponse {
            /** List of matters. */
            matters?: Matter[];
            /** Page token to retrieve the next page of results in the list. */
            nextPageToken?: string;
        }
        interface ListSavedQueriesResponse {
            /**
             * Page token to retrieve the next page of results in the list.
             * If this is empty, then there are no more saved queries to list.
             */
            nextPageToken?: string;
            /** List of output saved queries. */
            savedQueries?: SavedQuery[];
        }
        interface MailExportOptions {
            /** The export file format. */
            exportFormat?: string;
            /** Set to true to export confidential mode content. */
            showConfidentialModeContent?: boolean;
        }
        interface MailOptions {
            /** Set to true to exclude drafts. */
            excludeDrafts?: boolean;
        }
        interface Matter {
            /** The description of the matter. */
            description?: string;
            /**
             * The matter ID which is generated by the server.
             * Should be blank when creating a new matter.
             */
            matterId?: string;
            /**
             * List of users and access to the matter. Currently there is no programmer
             * defined limit on the number of permissions a matter can have.
             */
            matterPermissions?: MatterPermission[];
            /** The name of the matter. */
            name?: string;
            /** The state of the matter. */
            state?: string;
        }
        interface MatterPermission {
            /**
             * The account ID, as provided by <a
             * href="https://developers.google.com/admin-sdk/">Admin SDK</a>.
             */
            accountId?: string;
            /** The user's role in this matter. */
            role?: string;
        }
        interface OrgUnitInfo {
            /**
             * Org unit to search, as provided by the
             * <a href="https://developers.google.com/admin-sdk/directory/">Admin SDK
             * Directory API</a>.
             */
            orgUnitId?: string;
        }
        interface Query {
            /**
             * When 'ACCOUNT' is chosen as search method,
             * account_info needs to be specified.
             */
            accountInfo?: AccountInfo;
            /** The corpus to search. */
            corpus?: string;
            /** The data source to search from. */
            dataScope?: string;
            /** For Drive search, specify more options in this field. */
            driveOptions?: DriveOptions;
            /**
             * The end time range for the search query. These timestamps are in GMT and
             * rounded down to the start of the given date.
             */
            endTime?: string;
            /**
             * When 'ROOM' is chosen as search method, hangout_chats_info needs to be
             * specified. (read-only)
             */
            hangoutsChatInfo?: HangoutsChatInfo;
            /** For hangouts chat search, specify more options in this field. (read-only) */
            hangoutsChatOptions?: HangoutsChatOptions;
            /** For mail search, specify more options in this field. */
            mailOptions?: MailOptions;
            /**
             * The search method to use. This field is similar to the search_method field
             * but is introduced to support shared drives. It supports all
             * search method types. In case the search_method is TEAM_DRIVE the response
             * of this field will be SHARED_DRIVE only.
             */
            method?: string;
            /**
             * When 'ORG_UNIT' is chosen as as search method, org_unit_info needs
             * to be specified.
             */
            orgUnitInfo?: OrgUnitInfo;
            /** The search method to use. */
            searchMethod?: string;
            /**
             * When 'SHARED_DRIVE' is chosen as search method, shared_drive_info needs
             * to be specified.
             */
            sharedDriveInfo?: SharedDriveInfo;
            /**
             * The start time range for the search query. These timestamps are in GMT and
             * rounded down to the start of the given date.
             */
            startTime?: string;
            /**
             * When 'TEAM_DRIVE' is chosen as search method, team_drive_info needs to be
             * specified.
             */
            teamDriveInfo?: TeamDriveInfo;
            /**
             * The corpus-specific
             * <a href="https://support.google.com/vault/answer/2474474">search
             * operators</a> used to generate search results.
             */
            terms?: string;
            /**
             * The time zone name.
             * It should be an IANA TZ name, such as "America/Los_Angeles".
             * For more information, see
             * <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Time
             * Zone</a>.
             */
            timeZone?: string;
        }
        interface RemoveHeldAccountsRequest {
            /** Account IDs to identify HeldAccounts to remove. */
            accountIds?: string[];
        }
        interface RemoveHeldAccountsResponse {
            /**
             * A list of statuses for deleted accounts. Results have the
             * same order as the request.
             */
            statuses?: Status[];
        }
        interface RemoveMatterPermissionsRequest {
            /** The account ID. */
            accountId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ReopenMatterRequest {
        }
        interface ReopenMatterResponse {
            /** The updated matter, with state OPEN. */
            matter?: Matter;
        }
        interface SavedQuery {
            /**
             * Output only. The server generated timestamp at which saved query was
             * created.
             */
            createTime?: string;
            /** Name of the saved query. */
            displayName?: string;
            /**
             * Output only. The matter ID of the associated matter.
             * The server does not look at this field during create and always uses matter
             * id in the URL.
             */
            matterId?: string;
            /**
             * The underlying Query object which contains all the information of the saved
             * query.
             */
            query?: Query;
            /** A unique identifier for the saved query. */
            savedQueryId?: string;
        }
        interface SharedDriveInfo {
            /**
             * List of Shared drive IDs, as provided by <a
             * href="https://developers.google.com/drive">Drive API</a>.
             */
            sharedDriveIds?: string[];
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface TeamDriveInfo {
            /**
             * List of Team Drive IDs, as provided by <a
             * href="https://developers.google.com/drive">Drive API</a>.
             */
            teamDriveIds?: string[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface UndeleteMatterRequest {
        }
        interface UserInfo {
            /** The displayed name of the user. */
            displayName?: string;
            /** The email address of the user. */
            email?: string;
        }
        interface ExportsResource {
            /** Creates an Export. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Export;
            }): Request<Export>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Export): Request<Export>;
            /** Deletes an Export. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The export ID. */
                exportId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets an Export. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The export ID. */
                exportId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Export>;
            /** Lists Exports. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The number of exports to return in the response. */
                pageSize?: number;
                /** The pagination token as returned in the response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListExportsResponse>;
        }
        interface AccountsResource {
            /**
             * Adds a HeldAccount to a hold. Accounts can only be added to a hold that
             * has no held_org_unit set. Attempting to add an account to an OU-based
             * hold will result in an error.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: HeldAccount;
            }): Request<HeldAccount>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: HeldAccount): Request<HeldAccount>;
            /**
             * Removes a HeldAccount from a hold. If this request leaves the hold with
             * no held accounts, the hold will not apply to any accounts.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The ID of the account to remove from the hold. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Lists HeldAccounts for a hold. This will only list individually specified
             * held accounts. If the hold is on an OU, then use
             * <a href="https://developers.google.com/admin-sdk/">Admin SDK</a>
             * to enumerate its members.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListHeldAccountsResponse>;
        }
        interface HoldsResource {
            /**
             * Adds HeldAccounts to a hold. Returns a list of accounts that have been
             * successfully added. Accounts can only be added to an existing account-based
             * hold.
             */
            addHeldAccounts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddHeldAccountsRequest;
            }): Request<AddHeldAccountsResponse>;
            addHeldAccounts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddHeldAccountsRequest): Request<AddHeldAccountsResponse>;
            /** Creates a hold in the given matter. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Hold;
            }): Request<Hold>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Hold): Request<Hold>;
            /** Removes a hold by ID. This will release any HeldAccounts on this Hold. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets a hold by ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Specifies which parts of the Hold to return. */
                view?: string;
            }): Request<Hold>;
            /**
             * Lists holds within a matter. An empty page token in ListHoldsResponse
             * denotes no more holds to list.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The number of holds to return in the response, between 0 and 100 inclusive.
                 * Leaving this empty, or as 0, is the same as page_size = 100.
                 */
                pageSize?: number;
                /**
                 * The pagination token as returned in the response.
                 * An empty token means start from the beginning.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Specifies which parts of the Hold to return. */
                view?: string;
            }): Request<ListHoldsResponse>;
            /**
             * Removes HeldAccounts from a hold. Returns a list of statuses in the same
             * order as the request. If this request leaves the hold with no held
             * accounts, the hold will not apply to any accounts.
             */
            removeHeldAccounts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RemoveHeldAccountsRequest;
            }): Request<RemoveHeldAccountsResponse>;
            removeHeldAccounts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hold ID. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RemoveHeldAccountsRequest): Request<RemoveHeldAccountsResponse>;
            /**
             * Updates the OU and/or query parameters of a hold. You cannot add accounts
             * to a hold that covers an OU, nor can you add OUs to a hold that covers
             * individual accounts. Accounts listed in the hold will be ignored.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The ID of the hold. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Hold;
            }): Request<Hold>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The ID of the hold. */
                holdId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Hold): Request<Hold>;
            accounts: AccountsResource;
        }
        interface SavedQueriesResource {
            /** Creates a saved query. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The matter ID of the parent matter for which the saved query is to be
                 * created.
                 */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SavedQuery;
            }): Request<SavedQuery>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The matter ID of the parent matter for which the saved query is to be
                 * created.
                 */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SavedQuery): Request<SavedQuery>;
            /** Deletes a saved query by Id. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The matter ID of the parent matter for which the saved query is to be
                 * deleted.
                 */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** ID of the saved query to be deleted. */
                savedQueryId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Retrieves a saved query by Id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The matter ID of the parent matter for which the saved query is to be
                 * retrieved.
                 */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** ID of the saved query to be retrieved. */
                savedQueryId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SavedQuery>;
            /**
             * Lists saved queries within a matter. An empty page token in
             * ListSavedQueriesResponse denotes no more saved queries to list.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The matter ID of the parent matter for which the saved queries are to be
                 * retrieved.
                 */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of saved queries to return. */
                pageSize?: number;
                /**
                 * The pagination token as returned in the previous response.
                 * An empty token means start from the beginning.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSavedQueriesResponse>;
        }
        interface MattersResource {
            /** Adds an account as a matter collaborator. */
            addPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddMatterPermissionsRequest;
            }): Request<MatterPermission>;
            addPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddMatterPermissionsRequest): Request<MatterPermission>;
            /** Closes the specified matter. Returns matter with updated state. */
            close(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CloseMatterRequest;
            }): Request<CloseMatterResponse>;
            close(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CloseMatterRequest): Request<CloseMatterResponse>;
            /**
             * Creates a new matter with the given name and description. The initial state
             * is open, and the owner is the method caller. Returns the created matter
             * with default view.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Matter;
            }): Request<Matter>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Matter): Request<Matter>;
            /** Deletes the specified matter. Returns matter with updated state. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Matter>;
            /** Gets the specified matter. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Specifies which parts of the Matter to return in the response. */
                view?: string;
            }): Request<Matter>;
            /** Lists matters the user has access to. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The number of matters to return in the response.
                 * Default and maximum are 100.
                 */
                pageSize?: number;
                /** The pagination token as returned in the response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * If set, list only matters with that specific state. The default is listing
                 * matters of all states.
                 */
                state?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Specifies which parts of the matter to return in response. */
                view?: string;
            }): Request<ListMattersResponse>;
            /** Removes an account as a matter collaborator. */
            removePermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RemoveMatterPermissionsRequest;
            }): Request<{}>;
            removePermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RemoveMatterPermissionsRequest): Request<{}>;
            /** Reopens the specified matter. Returns matter with updated state. */
            reopen(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ReopenMatterRequest;
            }): Request<ReopenMatterResponse>;
            reopen(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ReopenMatterRequest): Request<ReopenMatterResponse>;
            /** Undeletes the specified matter. Returns matter with updated state. */
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UndeleteMatterRequest;
            }): Request<Matter>;
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UndeleteMatterRequest): Request<Matter>;
            /**
             * Updates the specified matter.
             * This updates only the name and description of the matter, identified by
             * matter ID. Changes to any other fields are ignored.
             * Returns the default view of the matter.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Matter;
            }): Request<Matter>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The matter ID. */
                matterId: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Matter): Request<Matter>;
            exports: ExportsResource;
            holds: HoldsResource;
            savedQueries: SavedQueriesResource;
        }
        interface OperationsResource {
            /**
             * Deletes a long-running operation. This method indicates that the client is
             * no longer interested in the operation result. It does not cancel the
             * operation. If the server doesn't support this method, it returns
             * `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
        }

        const matters: MattersResource;

        const operations: OperationsResource;
    }
}
