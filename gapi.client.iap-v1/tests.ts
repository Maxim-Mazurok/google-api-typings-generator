/* This is stub file for gapi.client.iap-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240823

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://iap.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.iap */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Constructs a new OAuth brand for the project if one does not exist. The created brand is "internal only", meaning that OAuth clients created under it only accept requests from users who belong to the same Google Workspace organization as the project. The brand is created in an un-reviewed status. NOTE: The "internal only" status can be manually changed in the Google Cloud Console. Requires that a brand does not already exist for the project, and that the specified support email is owned by the caller. */
    await gapi.client.iap.projects.brands.create(
      {
        parent: 'Test string',
      },
      {
        applicationTitle: 'Test string',
        name: 'Test string',
        orgInternalOnly: true,
        supportEmail: 'Test string',
      }
    );
    /** Retrieves the OAuth brand of the project. */
    await gapi.client.iap.projects.brands.get({
      name: 'Test string',
    });
    /** Lists the existing brands for the project. */
    await gapi.client.iap.projects.brands.list({
      parent: 'Test string',
    });
    /** Creates an Identity Aware Proxy (IAP) OAuth client. The client is owned by IAP. Requires that the brand for the project exists and that it is set for internal-only use. */
    await gapi.client.iap.projects.brands.identityAwareProxyClients.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        secret: 'Test string',
      }
    );
    /** Deletes an Identity Aware Proxy (IAP) OAuth client. Useful for removing obsolete clients, managing the number of clients in a given project, and cleaning up after tests. Requires that the client is owned by IAP. */
    await gapi.client.iap.projects.brands.identityAwareProxyClients.delete({
      name: 'Test string',
    });
    /** Retrieves an Identity Aware Proxy (IAP) OAuth client. Requires that the client is owned by IAP. */
    await gapi.client.iap.projects.brands.identityAwareProxyClients.get({
      name: 'Test string',
    });
    /** Lists the existing clients for the brand. */
    await gapi.client.iap.projects.brands.identityAwareProxyClients.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Resets an Identity Aware Proxy (IAP) OAuth client secret. Useful if the secret was compromised. Requires that the client is owned by IAP. */
    await gapi.client.iap.projects.brands.identityAwareProxyClients.resetSecret(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates a new TunnelDestGroup. */
    await gapi.client.iap.projects.iap_tunnel.locations.destGroups.create(
      {
        parent: 'Test string',
        tunnelDestGroupId: 'Test string',
      },
      {
        cidrs: ['Test string'],
        fqdns: ['Test string'],
        name: 'Test string',
      }
    );
    /** Deletes a TunnelDestGroup. */
    await gapi.client.iap.projects.iap_tunnel.locations.destGroups.delete({
      name: 'Test string',
    });
    /** Retrieves an existing TunnelDestGroup. */
    await gapi.client.iap.projects.iap_tunnel.locations.destGroups.get({
      name: 'Test string',
    });
    /** Lists the existing TunnelDestGroups. To group across all locations, use a `-` as the location ID. For example: `/v1/projects/123/iap_tunnel/locations/-/destGroups` */
    await gapi.client.iap.projects.iap_tunnel.locations.destGroups.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a TunnelDestGroup. */
    await gapi.client.iap.projects.iap_tunnel.locations.destGroups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        cidrs: ['Test string'],
        fqdns: ['Test string'],
        name: 'Test string',
      }
    );
    /** Gets the access control policy for an Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api */
    await gapi.client.iap.v1.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Gets the IAP settings on a particular IAP protected resource. */
    await gapi.client.iap.v1.getIapSettings({
      name: 'Test string',
    });
    /** Sets the access control policy for an Identity-Aware Proxy protected resource. Replaces any existing policy. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api */
    await gapi.client.iap.v1.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns permissions that a caller has on the Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api */
    await gapi.client.iap.v1.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Updates the IAP settings on a particular IAP protected resource. It replaces all fields unless the `update_mask` is set. */
    await gapi.client.iap.v1.updateIapSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accessSettings: {
          allowedDomainsSettings: {
            domains: ['Test string'],
            enable: true,
          },
          corsSettings: {
            allowHttpOptions: true,
          },
          gcipSettings: {
            loginPageUri: 'Test string',
            tenantIds: ['Test string'],
          },
          identitySources: ['Test string'],
          oauthSettings: {
            loginHint: 'Test string',
            programmaticClients: ['Test string'],
          },
          policyDelegationSettings: {
            iamPermission: 'Test string',
            iamServiceName: 'Test string',
            policyName: {
              id: 'Test string',
              region: 'Test string',
              type: 'Test string',
            },
            resource: {
              expectedNextState: {
                A: 42,
              },
              labels: {
                A: 'Test string',
              },
              name: 'Test string',
              nextStateOfTags: {
                tagsFullState: {
                  tags: {
                    A: 'Test string',
                  },
                },
                tagsFullStateForChildResource: {
                  tags: {
                    A: 'Test string',
                  },
                },
                tagsPartialState: {
                  tagKeysToRemove: ['Test string'],
                  tagsToUpsert: {
                    A: 'Test string',
                  },
                },
              },
              service: 'Test string',
              type: 'Test string',
            },
          },
          reauthSettings: {
            maxAge: 'Test string',
            method: 'Test string',
            policyType: 'Test string',
          },
          workforceIdentitySettings: {
            oauth2: {
              clientId: 'Test string',
              clientSecret: 'Test string',
              clientSecretSha256: 'Test string',
            },
            workforcePools: ['Test string'],
          },
        },
        applicationSettings: {
          accessDeniedPageSettings: {
            accessDeniedPageUri: 'Test string',
            generateTroubleshootingUri: true,
            remediationTokenGenerationEnabled: true,
          },
          attributePropagationSettings: {
            enable: true,
            expression: 'Test string',
            outputCredentials: ['Test string'],
          },
          cookieDomain: 'Test string',
          csmSettings: {
            rctokenAud: 'Test string',
          },
        },
        name: 'Test string',
      }
    );
    /** Validates that a given CEL expression conforms to IAP restrictions. */
    await gapi.client.iap.v1.validateAttributeExpression({
      expression: 'Test string',
      name: 'Test string',
    });
  }
});
