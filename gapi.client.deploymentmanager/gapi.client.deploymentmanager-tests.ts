/* This is stub file for gapi.client.deploymentmanager definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('deploymentmanager', 'v2', () => {
        /** now we can use gapi.client.deploymentmanager */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
            /** View and manage your Google Cloud Platform management resources and deployment status information */
            'https://www.googleapis.com/auth/ndev.cloudman',
            /** View your Google Cloud Platform management resources and deployment status information */
            'https://www.googleapis.com/auth/ndev.cloudman.readonly',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Cancels and removes the preview currently associated with the deployment. */
        await gapi.client.deploymentmanager.deployments.cancelPreview({
            deployment: "Test string",
            project: "Test string",
        }, {
            fingerprint: "Test string",
        });
        /** Deletes a deployment and all of the resources in the deployment. */
        await gapi.client.deploymentmanager.deployments.delete({
            deletePolicy: "Test string",
            deployment: "Test string",
            project: "Test string",
        });
        /** Gets information about a specific deployment. */
        await gapi.client.deploymentmanager.deployments.get({
            deployment: "Test string",
            project: "Test string",
        });
        /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
        await gapi.client.deploymentmanager.deployments.getIamPolicy({
            project: "Test string",
            resource: "Test string",
        });
        /** Creates a deployment and all of the resources described by the deployment manifest. */
        await gapi.client.deploymentmanager.deployments.insert({
            createPolicy: "Test string",
            preview: true,
            project: "Test string",
        }, {
            description: "Test string",
            fingerprint: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
            manifest: "Test string",
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }                        ],
                        message: "Test string",
                    }                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            target: {
                config: {
                    content: "Test string",
                },
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }                ],
            },
            update: {
                description: "Test string",
                labels: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }                ],
                manifest: "Test string",
            },
            updateTime: "Test string",
        });
        /** Lists all deployments for a given project. */
        await gapi.client.deploymentmanager.deployments.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Patches a deployment and all of the resources described by the deployment manifest. */
        await gapi.client.deploymentmanager.deployments.patch({
            createPolicy: "Test string",
            deletePolicy: "Test string",
            deployment: "Test string",
            preview: true,
            project: "Test string",
        }, {
            description: "Test string",
            fingerprint: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
            manifest: "Test string",
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }                        ],
                        message: "Test string",
                    }                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            target: {
                config: {
                    content: "Test string",
                },
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }                ],
            },
            update: {
                description: "Test string",
                labels: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }                ],
                manifest: "Test string",
            },
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. */
        await gapi.client.deploymentmanager.deployments.setIamPolicy({
            project: "Test string",
            resource: "Test string",
        }, {
            bindings: [
                {
                    condition: {
                        description: "Test string",
                        expression: "Test string",
                        location: "Test string",
                        title: "Test string",
                    },
                    members: [
                        "Test string"                    ],
                    role: "Test string",
                }            ],
            etag: "Test string",
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                ignoreChildExemptions: true,
                                logType: "Test string",
                            }                        ],
                        exemptedMembers: [
                            "Test string"                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                iamOwned: true,
                rules: [
                    {
                        action: "Test string",
                        conditions: [
                            {
                                iam: "Test string",
                                op: "Test string",
                                svc: "Test string",
                                sys: "Test string",
                                values: [
                                    "Test string"                                ],
                            }                        ],
                        description: "Test string",
                        ins: [
                            "Test string"                        ],
                        logConfigs: [
                            {
                                cloudAudit: {
                                    authorizationLoggingOptions: {
                                        permissionType: "Test string",
                                    },
                                    logName: "Test string",
                                },
                                counter: {
                                    customFields: [
                                        {
                                            name: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                    field: "Test string",
                                    metric: "Test string",
                                },
                                dataAccess: {
                                    logMode: "Test string",
                                },
                            }                        ],
                        notIns: [
                            "Test string"                        ],
                        permissions: [
                            "Test string"                        ],
                    }                ],
                version: 42,
            },
        });
        /** Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started. */
        await gapi.client.deploymentmanager.deployments.stop({
            deployment: "Test string",
            project: "Test string",
        }, {
            fingerprint: "Test string",
        });
        /** Returns permissions that a caller has on the specified resource. */
        await gapi.client.deploymentmanager.deployments.testIamPermissions({
            project: "Test string",
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Updates a deployment and all of the resources described by the deployment manifest. */
        await gapi.client.deploymentmanager.deployments.update({
            createPolicy: "Test string",
            deletePolicy: "Test string",
            deployment: "Test string",
            preview: true,
            project: "Test string",
        }, {
            description: "Test string",
            fingerprint: "Test string",
            id: "Test string",
            insertTime: "Test string",
            labels: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
            manifest: "Test string",
            name: "Test string",
            operation: {
                clientOperationId: "Test string",
                creationTimestamp: "Test string",
                description: "Test string",
                endTime: "Test string",
                error: {
                    errors: [
                        {
                            code: "Test string",
                            location: "Test string",
                            message: "Test string",
                        }                    ],
                },
                httpErrorMessage: "Test string",
                httpErrorStatusCode: 42,
                id: "Test string",
                insertTime: "Test string",
                kind: "Test string",
                name: "Test string",
                operationType: "Test string",
                progress: 42,
                region: "Test string",
                selfLink: "Test string",
                startTime: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                targetId: "Test string",
                targetLink: "Test string",
                user: "Test string",
                warnings: [
                    {
                        code: "Test string",
                        data: [
                            {
                                key: "Test string",
                                value: "Test string",
                            }                        ],
                        message: "Test string",
                    }                ],
                zone: "Test string",
            },
            selfLink: "Test string",
            target: {
                config: {
                    content: "Test string",
                },
                imports: [
                    {
                        content: "Test string",
                        name: "Test string",
                    }                ],
            },
            update: {
                description: "Test string",
                labels: [
                    {
                        key: "Test string",
                        value: "Test string",
                    }                ],
                manifest: "Test string",
            },
            updateTime: "Test string",
        });
        /** Gets information about a specific manifest. */
        await gapi.client.deploymentmanager.manifests.get({
            deployment: "Test string",
            manifest: "Test string",
            project: "Test string",
        });
        /** Lists all manifests for a given deployment. */
        await gapi.client.deploymentmanager.manifests.list({
            deployment: "Test string",
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Gets information about a specific operation. */
        await gapi.client.deploymentmanager.operations.get({
            operation: "Test string",
            project: "Test string",
        });
        /** Lists all operations for a project. */
        await gapi.client.deploymentmanager.operations.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Gets information about a single resource. */
        await gapi.client.deploymentmanager.resources.get({
            deployment: "Test string",
            project: "Test string",
            resource: "Test string",
        });
        /** Lists all resources in a given deployment. */
        await gapi.client.deploymentmanager.resources.list({
            deployment: "Test string",
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
        /** Lists all resource types for Deployment Manager. */
        await gapi.client.deploymentmanager.types.list({
            filter: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            project: "Test string",
        });
    }
});
