/* This is stub file for gapi.client.playintegrity-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250729

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://playintegrity.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.playintegrity */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Private Service: https://www.googleapis.com/auth/playintegrity */
    'https://www.googleapis.com/auth/playintegrity',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Writes recall bits for the device where Play Integrity API token is obtained. The endpoint is available to select Play partners in an early access program (EAP). */
    await gapi.client.playintegrity.deviceRecall.write(
      {
        packageName: 'Test string',
      },
      {
        integrityToken: 'Test string',
        newValues: {
          bitFirst: true,
          bitSecond: true,
          bitThird: true,
        },
      },
    );
    /** Decodes the integrity token and returns the token payload. */
    await gapi.client.playintegrity.v1.decodeIntegrityToken(
      {
        packageName: 'Test string',
      },
      {
        integrityToken: 'Test string',
      },
    );
    /** Decodes the PC integrity token and returns the PC token payload. */
    await gapi.client.playintegrity.v1.decodePcIntegrityToken(
      {
        packageName: 'Test string',
      },
      {
        integrityToken: 'Test string',
      },
    );
  }
});
