/* Type definitions for non-npm package Google Play Integrity API v1 0.0 */
// Project: https://developer.android.com/google/play/integrity
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://playintegrity.googleapis.com/$discovery/rest?version=v1
// Revision: 20250603

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Google Play Integrity API v1 */
  function load(
    urlOrObject: 'https://playintegrity.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'playintegrity', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'playintegrity',
    version: 'v1',
    callback: () => any,
  ): void;

  namespace playintegrity {
    interface AccountActivity {
      /** Required. Indicates the activity level of the account. */
      activityLevel?: string;
    }
    interface AccountDetails {
      /** (Restricted Access) Details about the account activity for the user in the scope. */
      accountActivity?: AccountActivity;
      /** Required. Details about the licensing status of the user for the app in the scope. */
      appLicensingVerdict?: string;
    }
    interface AppAccessRiskVerdict {
      /** List of detected app types signalled for App Access Risk. */
      appsDetected?: string[];
    }
    interface AppIntegrity {
      /** Required. Details about the app recognition verdict */
      appRecognitionVerdict?: string;
      /** The SHA256 hash of the requesting app's signing certificates (base64 web-safe encoded). Set iff app_recognition_verdict != UNEVALUATED. */
      certificateSha256Digest?: string[];
      /** Package name of the application under attestation. Set iff app_recognition_verdict != UNEVALUATED. */
      packageName?: string;
      /** Version code of the application. Set iff app_recognition_verdict != UNEVALUATED. */
      versionCode?: string;
    }
    interface DecodeIntegrityTokenRequest {
      /** Encoded integrity token. */
      integrityToken?: string;
    }
    interface DecodeIntegrityTokenResponse {
      /** Plain token payload generated from the decoded integrity token. */
      tokenPayloadExternal?: TokenPayloadExternal;
    }
    interface DecodePcIntegrityTokenRequest {
      /** Encoded integrity token. */
      integrityToken?: string;
    }
    interface DecodePcIntegrityTokenResponse {
      /** Plain token payload generated from the decoded integrity token. */
      tokenPayloadExternal?: PcTokenPayloadExternal;
    }
    interface DeviceAttributes {
      /** Android SDK version of the device, as defined in the public Android documentation: https://developer.android.com/reference/android/os/Build.VERSION_CODES. It won't be set if a necessary requirement was missed. For example DeviceIntegrity did not meet the minimum bar. */
      sdkVersion?: number;
    }
    interface DeviceIntegrity {
      /** Attributes of the device where the integrity token was generated. */
      deviceAttributes?: DeviceAttributes;
      /** Details about the device recall bits set by the developer. */
      deviceRecall?: DeviceRecall;
      /** Details about the integrity of the device the app is running on. */
      deviceRecognitionVerdict?: string[];
      /** Contains legacy details about the integrity of the device the app is running on. Only for devices with Android version T or higher and only for apps opted in to the new verdicts. Only available during the transition period to the new verdicts system and will be removed afterwards. */
      legacyDeviceRecognitionVerdict?: string[];
      /** Details about the device activity of the device the app is running on. */
      recentDeviceActivity?: RecentDeviceActivity;
    }
    interface DeviceRecall {
      /** Required. Contains the recall bits values. */
      values?: Values;
      /** Required. Contains the recall bits write dates. */
      writeDates?: WriteDates;
    }
    interface EnvironmentDetails {
      /** The evaluation of the App Access Risk verdicts. */
      appAccessRiskVerdict?: AppAccessRiskVerdict;
      /** The evaluation of Play Protect verdict. */
      playProtectVerdict?: string;
    }
    interface PcDeviceIntegrity {
      /** Details about the integrity of the device the app is running on. */
      deviceRecognitionVerdict?: string[];
    }
    interface PcRequestDetails {
      /** Request hash that was provided in the request. */
      requestHash?: string;
      /** Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. */
      requestPackageName?: string;
      /** Required. Timestamp, of the integrity application request. */
      requestTime?: string;
    }
    interface PcTokenPayloadExternal {
      /** Required. Details about the device integrity. */
      deviceIntegrity?: PcDeviceIntegrity;
      /** Required. Details about the integrity request. */
      requestDetails?: PcRequestDetails;
    }
    interface RecentDeviceActivity {
      /** Required. Indicates the activity level of the device. */
      deviceActivityLevel?: string;
    }
    interface RequestDetails {
      /** Nonce that was provided in the request (which is base64 web-safe no-wrap). */
      nonce?: string;
      /** Request hash that was provided in the request. */
      requestHash?: string;
      /** Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. For details on application integrity, check application_integrity. */
      requestPackageName?: string;
      /** Required. Timestamp, in milliseconds, of the integrity application request. */
      timestampMillis?: string;
    }
    interface TestingDetails {
      /** Required. Indicates that the information contained in this payload is a testing response that is statically overridden for a tester. */
      isTestingResponse?: boolean;
    }
    interface TokenPayloadExternal {
      /** Required. Details about the Play Store account. */
      accountDetails?: AccountDetails;
      /** Required. Details about the application integrity. */
      appIntegrity?: AppIntegrity;
      /** Required. Details about the device integrity. */
      deviceIntegrity?: DeviceIntegrity;
      /** Details of the environment Play Integrity API runs in. */
      environmentDetails?: EnvironmentDetails;
      /** Required. Details about the integrity request. */
      requestDetails?: RequestDetails;
      /** Indicates that this payload is generated for testing purposes and contains any additional data that is linked with testing status. */
      testingDetails?: TestingDetails;
    }
    interface Values {
      /** Required. First recall bit value. */
      bitFirst?: boolean;
      /** Required. Second recall bit value. */
      bitSecond?: boolean;
      /** Required. Third recall bit value. */
      bitThird?: boolean;
    }
    interface WriteDates {
      /** Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the first bit. Note that this value won't be set if the first bit is false. */
      yyyymmFirst?: number;
      /** Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the second bit. Note that this value won't be set if the second bit is false. */
      yyyymmSecond?: number;
      /** Optional. Write time in YYYYMM format (in UTC, e.g. 202402) for the third bit. Note that this value won't be set if the third bit is false. */
      yyyymmThird?: number;
    }
    interface WriteDeviceRecallRequest {
      /** Required. Integrity token obtained from calling Play Integrity API. */
      integrityToken?: string;
      /** Required. The new values for the device recall bits to be written. */
      newValues?: Values;
    }
    interface WriteDeviceRecallResponse {}
    interface DeviceRecallResource {
      /** Writes recall bits for the device where Play Integrity API token is obtained. The endpoint is available to select Play partners in an early access program (EAP). */
      write(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Package name of the app the attached integrity token belongs to. */
        packageName: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: WriteDeviceRecallRequest;
      }): Request<{}>;
      write(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Package name of the app the attached integrity token belongs to. */
          packageName: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: WriteDeviceRecallRequest,
      ): Request<{}>;
    }
    interface V1Resource {
      /** Decodes the integrity token and returns the token payload. */
      decodeIntegrityToken(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Package name of the app the attached integrity token belongs to. */
        packageName: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: DecodeIntegrityTokenRequest;
      }): Request<DecodeIntegrityTokenResponse>;
      decodeIntegrityToken(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Package name of the app the attached integrity token belongs to. */
          packageName: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: DecodeIntegrityTokenRequest,
      ): Request<DecodeIntegrityTokenResponse>;
      /** Decodes the PC integrity token and returns the PC token payload. */
      decodePcIntegrityToken(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Package name of the app the attached integrity token belongs to. */
        packageName: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: DecodePcIntegrityTokenRequest;
      }): Request<DecodePcIntegrityTokenResponse>;
      decodePcIntegrityToken(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Package name of the app the attached integrity token belongs to. */
          packageName: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: DecodePcIntegrityTokenRequest,
      ): Request<DecodePcIntegrityTokenResponse>;
    }

    const deviceRecall: DeviceRecallResource;

    const v1: V1Resource;
  }
}
