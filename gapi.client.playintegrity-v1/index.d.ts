/* Type definitions for non-npm package Google Play Integrity API v1 0.0 */
// Project: https://developer.android.com/google/play/integrity
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://playintegrity.googleapis.com/$discovery/rest?version=v1
// Revision: 20220912

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Google Play Integrity API v1 */
    function load(urlOrObject: "https://playintegrity.googleapis.com/$discovery/rest?version=v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "playintegrity", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "playintegrity", version: "v1", callback: () => any): void;

    namespace playintegrity {
        interface AccountDetails {
            /** Details about the account risk for the user in the scope. This feature is available only to selected developers. */
            accountRiskVerdict?: AccountRiskVerdict;
            /** Required. Details about the licensing status of the user for the app in the scope. */
            appLicensingVerdict?: string;
        }
        interface AccountRiskVerdict {
            /** Required. Indicates the account risk level of the current user session. */
            risk?: string;
            /** Required. Indicates the account risk level of the current user session. */
            riskLevel?: string;
        }
        interface AppIntegrity {
            /** Required. Details about the app recognition verdict */
            appRecognitionVerdict?: string;
            /** The SHA256 hash of the requesting app's signing certificates (base64 web-safe encoded). Set iff app_recognition_verdict != UNEVALUATED. */
            certificateSha256Digest?: string[];
            /** Package name of the application under attestation. Set iff app_recognition_verdict != UNEVALUATED. */
            packageName?: string;
            /** Version code of the application. Set iff app_recognition_verdict != UNEVALUATED. */
            versionCode?: string;
        }
        interface DecodeIntegrityTokenRequest {
            /** Encoded integrity token. */
            integrityToken?: string;
        }
        interface DecodeIntegrityTokenResponse {
            /** Plain token payload generated from the decoded integrity token. */
            tokenPayloadExternal?: TokenPayloadExternal;
        }
        interface DeviceIntegrity {
            /** Details about the integrity of the device the app is running on */
            deviceRecognitionVerdict?: string[];
        }
        interface RequestDetails {
            /** Required. Nonce that was provided in the request (which is base64 web-safe no-wrap). */
            nonce?: string;
            /**
             * Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. For details on application
             * integrity, check application_integrity.
             */
            requestPackageName?: string;
            /** Required. Timestamp, in milliseconds, of the integrity application request. */
            timestampMillis?: string;
        }
        interface TestingDetails {
            /** Required. Indicates that the information contained in this payload is a testing response that is statically overridden for a tester. */
            isTestingResponse?: boolean;
        }
        interface TokenPayloadExternal {
            /** Required. Details about the Play Store account. */
            accountDetails?: AccountDetails;
            /** Required. Details about the application integrity. */
            appIntegrity?: AppIntegrity;
            /** Required. Details about the device integrity. */
            deviceIntegrity?: DeviceIntegrity;
            /** Required. Details about the integrity request. */
            requestDetails?: RequestDetails;
            /** Indicates that this payload is generated for testing purposes and contains any additional data that is linked with testing status. */
            testingDetails?: TestingDetails;
        }
        interface V1Resource {
            /** Decodes the integrity token and returns the token payload. */
            decodeIntegrityToken(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app the attached integrity token belongs to. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DecodeIntegrityTokenRequest;
            }): Request<DecodeIntegrityTokenResponse>;
            decodeIntegrityToken(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app the attached integrity token belongs to. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DecodeIntegrityTokenRequest): Request<DecodeIntegrityTokenResponse>;
        }

        const v1: V1Resource;
    }
}
