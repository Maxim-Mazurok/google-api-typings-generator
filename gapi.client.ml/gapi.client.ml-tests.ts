/* This is stub file for gapi.client.ml definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('ml', 'v1', () => {
        /** now we can use gapi.client.ml */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Performs explanation on the data in the request. {% dynamic include "/ai-platform/includes/___explain-request" %} */
        await gapi.client.ml.projects.explain({
            name: "Test string",
        }, {
            httpBody: {
                contentType: "Test string",
                data: "Test string",
                extensions: [
                    {
                        A: 42                    }                ],
            },
        });
        /** Cancels a running job. */
        await gapi.client.ml.projects.jobs.cancel({
            name: "Test string",
        }, {
        });
        /** Creates a training or a batch prediction job. */
        await gapi.client.ml.projects.jobs.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            endTime: "Test string",
            errorMessage: "Test string",
            etag: "Test string",
            jobId: "Test string",
            labels: {
                A: "Test string"            },
            predictionInput: {
                batchSize: "Test string",
                dataFormat: "Test string",
                inputPaths: [
                    "Test string"                ],
                maxWorkerCount: "Test string",
                modelName: "Test string",
                outputDataFormat: "Test string",
                outputPath: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                signatureName: "Test string",
                uri: "Test string",
                versionName: "Test string",
            },
            predictionOutput: {
                errorCount: "Test string",
                nodeHours: 42,
                outputPath: "Test string",
                predictionCount: "Test string",
            },
            startTime: "Test string",
            state: "Test string",
            trainingInput: {
                args: [
                    "Test string"                ],
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                evaluatorConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                evaluatorCount: "Test string",
                evaluatorType: "Test string",
                hyperparameters: {
                    algorithm: "Test string",
                    enableTrialEarlyStopping: true,
                    goal: "Test string",
                    hyperparameterMetricTag: "Test string",
                    maxFailedTrials: 42,
                    maxParallelTrials: 42,
                    maxTrials: 42,
                    params: [
                        {
                            categoricalValues: [
                                "Test string"                            ],
                            discreteValues: [
                                42                            ],
                            maxValue: 42,
                            minValue: 42,
                            parameterName: "Test string",
                            scaleType: "Test string",
                            type: "Test string",
                        }                    ],
                    resumePreviousJobId: "Test string",
                },
                jobDir: "Test string",
                masterConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                masterType: "Test string",
                network: "Test string",
                packageUris: [
                    "Test string"                ],
                parameterServerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                parameterServerCount: "Test string",
                parameterServerType: "Test string",
                pythonModule: "Test string",
                pythonVersion: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                scaleTier: "Test string",
                scheduling: {
                    maxRunningTime: "Test string",
                    maxWaitTime: "Test string",
                },
                serviceAccount: "Test string",
                useChiefInTfConfig: true,
                workerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                workerCount: "Test string",
                workerType: "Test string",
            },
            trainingOutput: {
                builtInAlgorithmOutput: {
                    framework: "Test string",
                    modelPath: "Test string",
                    pythonVersion: "Test string",
                    runtimeVersion: "Test string",
                },
                completedTrialCount: "Test string",
                consumedMLUnits: 42,
                hyperparameterMetricTag: "Test string",
                isBuiltInAlgorithmJob: true,
                isHyperparameterTuningJob: true,
                trials: [
                    {
                        allMetrics: [
                            {
                                objectiveValue: 42,
                                trainingStep: "Test string",
                            }                        ],
                        builtInAlgorithmOutput: {
                            framework: "Test string",
                            modelPath: "Test string",
                            pythonVersion: "Test string",
                            runtimeVersion: "Test string",
                        },
                        endTime: "Test string",
                        finalMetric: {
                            objectiveValue: 42,
                            trainingStep: "Test string",
                        },
                        hyperparameters: {
                            A: "Test string"                        },
                        isTrialStoppedEarly: true,
                        startTime: "Test string",
                        state: "Test string",
                        trialId: "Test string",
                    }                ],
            },
        });
        /** Describes a job. */
        await gapi.client.ml.projects.jobs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.ml.projects.jobs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the jobs in the project. If there are no jobs that match the request parameters, the list request returns an empty response body: {}. */
        await gapi.client.ml.projects.jobs.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a specific job resource. Currently the only supported fields to update are `labels`. */
        await gapi.client.ml.projects.jobs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            endTime: "Test string",
            errorMessage: "Test string",
            etag: "Test string",
            jobId: "Test string",
            labels: {
                A: "Test string"            },
            predictionInput: {
                batchSize: "Test string",
                dataFormat: "Test string",
                inputPaths: [
                    "Test string"                ],
                maxWorkerCount: "Test string",
                modelName: "Test string",
                outputDataFormat: "Test string",
                outputPath: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                signatureName: "Test string",
                uri: "Test string",
                versionName: "Test string",
            },
            predictionOutput: {
                errorCount: "Test string",
                nodeHours: 42,
                outputPath: "Test string",
                predictionCount: "Test string",
            },
            startTime: "Test string",
            state: "Test string",
            trainingInput: {
                args: [
                    "Test string"                ],
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                evaluatorConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                evaluatorCount: "Test string",
                evaluatorType: "Test string",
                hyperparameters: {
                    algorithm: "Test string",
                    enableTrialEarlyStopping: true,
                    goal: "Test string",
                    hyperparameterMetricTag: "Test string",
                    maxFailedTrials: 42,
                    maxParallelTrials: 42,
                    maxTrials: 42,
                    params: [
                        {
                            categoricalValues: [
                                "Test string"                            ],
                            discreteValues: [
                                42                            ],
                            maxValue: 42,
                            minValue: 42,
                            parameterName: "Test string",
                            scaleType: "Test string",
                            type: "Test string",
                        }                    ],
                    resumePreviousJobId: "Test string",
                },
                jobDir: "Test string",
                masterConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                masterType: "Test string",
                network: "Test string",
                packageUris: [
                    "Test string"                ],
                parameterServerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                parameterServerCount: "Test string",
                parameterServerType: "Test string",
                pythonModule: "Test string",
                pythonVersion: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                scaleTier: "Test string",
                scheduling: {
                    maxRunningTime: "Test string",
                    maxWaitTime: "Test string",
                },
                serviceAccount: "Test string",
                useChiefInTfConfig: true,
                workerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                workerCount: "Test string",
                workerType: "Test string",
            },
            trainingOutput: {
                builtInAlgorithmOutput: {
                    framework: "Test string",
                    modelPath: "Test string",
                    pythonVersion: "Test string",
                    runtimeVersion: "Test string",
                },
                completedTrialCount: "Test string",
                consumedMLUnits: 42,
                hyperparameterMetricTag: "Test string",
                isBuiltInAlgorithmJob: true,
                isHyperparameterTuningJob: true,
                trials: [
                    {
                        allMetrics: [
                            {
                                objectiveValue: 42,
                                trainingStep: "Test string",
                            }                        ],
                        builtInAlgorithmOutput: {
                            framework: "Test string",
                            modelPath: "Test string",
                            pythonVersion: "Test string",
                            runtimeVersion: "Test string",
                        },
                        endTime: "Test string",
                        finalMetric: {
                            objectiveValue: 42,
                            trainingStep: "Test string",
                        },
                        hyperparameters: {
                            A: "Test string"                        },
                        isTrialStoppedEarly: true,
                        startTime: "Test string",
                        state: "Test string",
                        trialId: "Test string",
                    }                ],
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.ml.projects.jobs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.ml.projects.jobs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Get the complete list of CMLE capabilities in a location, along with their location-specific properties. */
        await gapi.client.ml.projects.locations.get({
            name: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.locations.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a study. */
        await gapi.client.ml.projects.locations.studies.create({
            parent: "Test string",
            studyId: "Test string",
        }, {
            createTime: "Test string",
            inactiveReason: "Test string",
            name: "Test string",
            state: "Test string",
            studyConfig: {
                algorithm: "Test string",
                automatedStoppingConfig: {
                    decayCurveStoppingConfig: {
                        useElapsedTime: true,
                    },
                    medianAutomatedStoppingConfig: {
                        useElapsedTime: true,
                    },
                },
                metrics: [
                    {
                        goal: "Test string",
                        metric: "Test string",
                    }                ],
                parameters: [
                    {
                        categoricalValueSpec: {
                            values: [
                                "Test string"                            ],
                        },
                        childParameterSpecs: undefined,
                        discreteValueSpec: {
                            values: [
                                42                            ],
                        },
                        doubleValueSpec: {
                            maxValue: 42,
                            minValue: 42,
                        },
                        integerValueSpec: {
                            maxValue: "Test string",
                            minValue: "Test string",
                        },
                        parameter: "Test string",
                        parentCategoricalValues: {
                            values: [
                                "Test string"                            ],
                        },
                        parentDiscreteValues: {
                            values: [
                                42                            ],
                        },
                        parentIntValues: {
                            values: [
                                "Test string"                            ],
                        },
                        scaleType: "Test string",
                        type: "Test string",
                    }                ],
            },
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Deletes a study. */
        await gapi.client.ml.projects.locations.studies.delete({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Gets a study. */
        await gapi.client.ml.projects.locations.studies.get({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Lists all the studies in a region for an associated project. */
        await gapi.client.ml.projects.locations.studies.list({
            parent: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** List all locations that provides at least one type of CMLE capability. */
        await gapi.client.ml.projects.locations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.locations.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a study. */
        await gapi.client.ml.projects.locations.studies.create({
            parent: "Test string",
            studyId: "Test string",
        }, {
            createTime: "Test string",
            inactiveReason: "Test string",
            name: "Test string",
            state: "Test string",
            studyConfig: {
                algorithm: "Test string",
                automatedStoppingConfig: {
                    decayCurveStoppingConfig: {
                        useElapsedTime: true,
                    },
                    medianAutomatedStoppingConfig: {
                        useElapsedTime: true,
                    },
                },
                metrics: [
                    {
                        goal: "Test string",
                        metric: "Test string",
                    }                ],
                parameters: [
                    {
                        categoricalValueSpec: {
                            values: [
                                "Test string"                            ],
                        },
                        childParameterSpecs: undefined,
                        discreteValueSpec: {
                            values: [
                                42                            ],
                        },
                        doubleValueSpec: {
                            maxValue: 42,
                            minValue: 42,
                        },
                        integerValueSpec: {
                            maxValue: "Test string",
                            minValue: "Test string",
                        },
                        parameter: "Test string",
                        parentCategoricalValues: {
                            values: [
                                "Test string"                            ],
                        },
                        parentDiscreteValues: {
                            values: [
                                42                            ],
                        },
                        parentIntValues: {
                            values: [
                                "Test string"                            ],
                        },
                        scaleType: "Test string",
                        type: "Test string",
                    }                ],
            },
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Deletes a study. */
        await gapi.client.ml.projects.locations.studies.delete({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Gets a study. */
        await gapi.client.ml.projects.locations.studies.get({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Lists all the studies in a region for an associated project. */
        await gapi.client.ml.projects.locations.studies.list({
            parent: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /**
         * Creates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling
         * projects.models.versions.create.
         */
        await gapi.client.ml.projects.models.create({
            parent: "Test string",
        }, {
            defaultVersion: {
                acceleratorConfig: {
                    count: "Test string",
                    type: "Test string",
                },
                autoScaling: {
                    minNodes: 42,
                },
                createTime: "Test string",
                deploymentUri: "Test string",
                description: "Test string",
                endpoints: {
                    explain: "Test string",
                    health: "Test string",
                    predict: "Test string",
                },
                errorMessage: "Test string",
                etag: "Test string",
                explanationConfig: {
                    integratedGradientsAttribution: {
                        numIntegralSteps: 42,
                    },
                    sampledShapleyAttribution: {
                        numPaths: 42,
                    },
                    xraiAttribution: {
                        numIntegralSteps: 42,
                    },
                },
                framework: "Test string",
                isDefault: true,
                labels: {
                    A: "Test string"                },
                lastUseTime: "Test string",
                machineType: "Test string",
                manualScaling: {
                    nodes: 42,
                },
                name: "Test string",
                packageUris: [
                    "Test string"                ],
                predictionClass: "Test string",
                pythonVersion: "Test string",
                requestLoggingConfig: {
                    bigqueryTableName: "Test string",
                    samplingPercentage: 42,
                },
                runtimeVersion: "Test string",
                serviceAccount: "Test string",
                state: "Test string",
            },
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"            },
            name: "Test string",
            onlinePredictionConsoleLogging: true,
            onlinePredictionLogging: true,
            regions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Deletes a model. You can only delete a model if there are no versions in it. You can delete versions by calling projects.models.versions.delete. */
        await gapi.client.ml.projects.models.delete({
            name: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Gets information about a model, including its name, the description (if set), and the default version (if at least one version of the model has been deployed). */
        await gapi.client.ml.projects.models.get({
            name: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.ml.projects.models.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Lists the models in a project. Each project can contain multiple models, and each model can have multiple versions. If there are no models that match the request parameters, the list
         * request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Updates a specific model resource. Currently the only supported fields to update are `description` and `default_version.name`. */
        await gapi.client.ml.projects.models.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            defaultVersion: {
                acceleratorConfig: {
                    count: "Test string",
                    type: "Test string",
                },
                autoScaling: {
                    minNodes: 42,
                },
                createTime: "Test string",
                deploymentUri: "Test string",
                description: "Test string",
                endpoints: {
                    explain: "Test string",
                    health: "Test string",
                    predict: "Test string",
                },
                errorMessage: "Test string",
                etag: "Test string",
                explanationConfig: {
                    integratedGradientsAttribution: {
                        numIntegralSteps: 42,
                    },
                    sampledShapleyAttribution: {
                        numPaths: 42,
                    },
                    xraiAttribution: {
                        numIntegralSteps: 42,
                    },
                },
                framework: "Test string",
                isDefault: true,
                labels: {
                    A: "Test string"                },
                lastUseTime: "Test string",
                machineType: "Test string",
                manualScaling: {
                    nodes: 42,
                },
                name: "Test string",
                packageUris: [
                    "Test string"                ],
                predictionClass: "Test string",
                pythonVersion: "Test string",
                requestLoggingConfig: {
                    bigqueryTableName: "Test string",
                    samplingPercentage: 42,
                },
                runtimeVersion: "Test string",
                serviceAccount: "Test string",
                state: "Test string",
            },
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"            },
            name: "Test string",
            onlinePredictionConsoleLogging: true,
            onlinePredictionLogging: true,
            regions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.ml.projects.models.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.ml.projects.models.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.ml.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Get the service account information associated with your project. You need this information in order to grant the service account permissions for the Google Cloud Storage location where
         * you put your model training code for training the model with Google Cloud Machine Learning.
         */
        await gapi.client.ml.projects.getConfig({
            name: "Test string",
        });
        /** Cancels a running job. */
        await gapi.client.ml.projects.jobs.cancel({
            name: "Test string",
        }, {
        });
        /** Creates a training or a batch prediction job. */
        await gapi.client.ml.projects.jobs.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            endTime: "Test string",
            errorMessage: "Test string",
            etag: "Test string",
            jobId: "Test string",
            labels: {
                A: "Test string"            },
            predictionInput: {
                batchSize: "Test string",
                dataFormat: "Test string",
                inputPaths: [
                    "Test string"                ],
                maxWorkerCount: "Test string",
                modelName: "Test string",
                outputDataFormat: "Test string",
                outputPath: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                signatureName: "Test string",
                uri: "Test string",
                versionName: "Test string",
            },
            predictionOutput: {
                errorCount: "Test string",
                nodeHours: 42,
                outputPath: "Test string",
                predictionCount: "Test string",
            },
            startTime: "Test string",
            state: "Test string",
            trainingInput: {
                args: [
                    "Test string"                ],
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                evaluatorConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                evaluatorCount: "Test string",
                evaluatorType: "Test string",
                hyperparameters: {
                    algorithm: "Test string",
                    enableTrialEarlyStopping: true,
                    goal: "Test string",
                    hyperparameterMetricTag: "Test string",
                    maxFailedTrials: 42,
                    maxParallelTrials: 42,
                    maxTrials: 42,
                    params: [
                        {
                            categoricalValues: [
                                "Test string"                            ],
                            discreteValues: [
                                42                            ],
                            maxValue: 42,
                            minValue: 42,
                            parameterName: "Test string",
                            scaleType: "Test string",
                            type: "Test string",
                        }                    ],
                    resumePreviousJobId: "Test string",
                },
                jobDir: "Test string",
                masterConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                masterType: "Test string",
                network: "Test string",
                packageUris: [
                    "Test string"                ],
                parameterServerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                parameterServerCount: "Test string",
                parameterServerType: "Test string",
                pythonModule: "Test string",
                pythonVersion: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                scaleTier: "Test string",
                scheduling: {
                    maxRunningTime: "Test string",
                    maxWaitTime: "Test string",
                },
                serviceAccount: "Test string",
                useChiefInTfConfig: true,
                workerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                workerCount: "Test string",
                workerType: "Test string",
            },
            trainingOutput: {
                builtInAlgorithmOutput: {
                    framework: "Test string",
                    modelPath: "Test string",
                    pythonVersion: "Test string",
                    runtimeVersion: "Test string",
                },
                completedTrialCount: "Test string",
                consumedMLUnits: 42,
                hyperparameterMetricTag: "Test string",
                isBuiltInAlgorithmJob: true,
                isHyperparameterTuningJob: true,
                trials: [
                    {
                        allMetrics: [
                            {
                                objectiveValue: 42,
                                trainingStep: "Test string",
                            }                        ],
                        builtInAlgorithmOutput: {
                            framework: "Test string",
                            modelPath: "Test string",
                            pythonVersion: "Test string",
                            runtimeVersion: "Test string",
                        },
                        endTime: "Test string",
                        finalMetric: {
                            objectiveValue: 42,
                            trainingStep: "Test string",
                        },
                        hyperparameters: {
                            A: "Test string"                        },
                        isTrialStoppedEarly: true,
                        startTime: "Test string",
                        state: "Test string",
                        trialId: "Test string",
                    }                ],
            },
        });
        /** Describes a job. */
        await gapi.client.ml.projects.jobs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.ml.projects.jobs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the jobs in the project. If there are no jobs that match the request parameters, the list request returns an empty response body: {}. */
        await gapi.client.ml.projects.jobs.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a specific job resource. Currently the only supported fields to update are `labels`. */
        await gapi.client.ml.projects.jobs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            endTime: "Test string",
            errorMessage: "Test string",
            etag: "Test string",
            jobId: "Test string",
            labels: {
                A: "Test string"            },
            predictionInput: {
                batchSize: "Test string",
                dataFormat: "Test string",
                inputPaths: [
                    "Test string"                ],
                maxWorkerCount: "Test string",
                modelName: "Test string",
                outputDataFormat: "Test string",
                outputPath: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                signatureName: "Test string",
                uri: "Test string",
                versionName: "Test string",
            },
            predictionOutput: {
                errorCount: "Test string",
                nodeHours: 42,
                outputPath: "Test string",
                predictionCount: "Test string",
            },
            startTime: "Test string",
            state: "Test string",
            trainingInput: {
                args: [
                    "Test string"                ],
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                evaluatorConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                evaluatorCount: "Test string",
                evaluatorType: "Test string",
                hyperparameters: {
                    algorithm: "Test string",
                    enableTrialEarlyStopping: true,
                    goal: "Test string",
                    hyperparameterMetricTag: "Test string",
                    maxFailedTrials: 42,
                    maxParallelTrials: 42,
                    maxTrials: 42,
                    params: [
                        {
                            categoricalValues: [
                                "Test string"                            ],
                            discreteValues: [
                                42                            ],
                            maxValue: 42,
                            minValue: 42,
                            parameterName: "Test string",
                            scaleType: "Test string",
                            type: "Test string",
                        }                    ],
                    resumePreviousJobId: "Test string",
                },
                jobDir: "Test string",
                masterConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                masterType: "Test string",
                network: "Test string",
                packageUris: [
                    "Test string"                ],
                parameterServerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                parameterServerCount: "Test string",
                parameterServerType: "Test string",
                pythonModule: "Test string",
                pythonVersion: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                scaleTier: "Test string",
                scheduling: {
                    maxRunningTime: "Test string",
                    maxWaitTime: "Test string",
                },
                serviceAccount: "Test string",
                useChiefInTfConfig: true,
                workerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                workerCount: "Test string",
                workerType: "Test string",
            },
            trainingOutput: {
                builtInAlgorithmOutput: {
                    framework: "Test string",
                    modelPath: "Test string",
                    pythonVersion: "Test string",
                    runtimeVersion: "Test string",
                },
                completedTrialCount: "Test string",
                consumedMLUnits: 42,
                hyperparameterMetricTag: "Test string",
                isBuiltInAlgorithmJob: true,
                isHyperparameterTuningJob: true,
                trials: [
                    {
                        allMetrics: [
                            {
                                objectiveValue: 42,
                                trainingStep: "Test string",
                            }                        ],
                        builtInAlgorithmOutput: {
                            framework: "Test string",
                            modelPath: "Test string",
                            pythonVersion: "Test string",
                            runtimeVersion: "Test string",
                        },
                        endTime: "Test string",
                        finalMetric: {
                            objectiveValue: 42,
                            trainingStep: "Test string",
                        },
                        hyperparameters: {
                            A: "Test string"                        },
                        isTrialStoppedEarly: true,
                        startTime: "Test string",
                        state: "Test string",
                        trialId: "Test string",
                    }                ],
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.ml.projects.jobs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.ml.projects.jobs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Get the complete list of CMLE capabilities in a location, along with their location-specific properties. */
        await gapi.client.ml.projects.locations.get({
            name: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.locations.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a study. */
        await gapi.client.ml.projects.locations.studies.create({
            parent: "Test string",
            studyId: "Test string",
        }, {
            createTime: "Test string",
            inactiveReason: "Test string",
            name: "Test string",
            state: "Test string",
            studyConfig: {
                algorithm: "Test string",
                automatedStoppingConfig: {
                    decayCurveStoppingConfig: {
                        useElapsedTime: true,
                    },
                    medianAutomatedStoppingConfig: {
                        useElapsedTime: true,
                    },
                },
                metrics: [
                    {
                        goal: "Test string",
                        metric: "Test string",
                    }                ],
                parameters: [
                    {
                        categoricalValueSpec: {
                            values: [
                                "Test string"                            ],
                        },
                        childParameterSpecs: undefined,
                        discreteValueSpec: {
                            values: [
                                42                            ],
                        },
                        doubleValueSpec: {
                            maxValue: 42,
                            minValue: 42,
                        },
                        integerValueSpec: {
                            maxValue: "Test string",
                            minValue: "Test string",
                        },
                        parameter: "Test string",
                        parentCategoricalValues: {
                            values: [
                                "Test string"                            ],
                        },
                        parentDiscreteValues: {
                            values: [
                                42                            ],
                        },
                        parentIntValues: {
                            values: [
                                "Test string"                            ],
                        },
                        scaleType: "Test string",
                        type: "Test string",
                    }                ],
            },
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Deletes a study. */
        await gapi.client.ml.projects.locations.studies.delete({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Gets a study. */
        await gapi.client.ml.projects.locations.studies.get({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Lists all the studies in a region for an associated project. */
        await gapi.client.ml.projects.locations.studies.list({
            parent: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** List all locations that provides at least one type of CMLE capability. */
        await gapi.client.ml.projects.locations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.locations.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a study. */
        await gapi.client.ml.projects.locations.studies.create({
            parent: "Test string",
            studyId: "Test string",
        }, {
            createTime: "Test string",
            inactiveReason: "Test string",
            name: "Test string",
            state: "Test string",
            studyConfig: {
                algorithm: "Test string",
                automatedStoppingConfig: {
                    decayCurveStoppingConfig: {
                        useElapsedTime: true,
                    },
                    medianAutomatedStoppingConfig: {
                        useElapsedTime: true,
                    },
                },
                metrics: [
                    {
                        goal: "Test string",
                        metric: "Test string",
                    }                ],
                parameters: [
                    {
                        categoricalValueSpec: {
                            values: [
                                "Test string"                            ],
                        },
                        childParameterSpecs: undefined,
                        discreteValueSpec: {
                            values: [
                                42                            ],
                        },
                        doubleValueSpec: {
                            maxValue: 42,
                            minValue: 42,
                        },
                        integerValueSpec: {
                            maxValue: "Test string",
                            minValue: "Test string",
                        },
                        parameter: "Test string",
                        parentCategoricalValues: {
                            values: [
                                "Test string"                            ],
                        },
                        parentDiscreteValues: {
                            values: [
                                42                            ],
                        },
                        parentIntValues: {
                            values: [
                                "Test string"                            ],
                        },
                        scaleType: "Test string",
                        type: "Test string",
                    }                ],
            },
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Deletes a study. */
        await gapi.client.ml.projects.locations.studies.delete({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Gets a study. */
        await gapi.client.ml.projects.locations.studies.get({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Lists all the studies in a region for an associated project. */
        await gapi.client.ml.projects.locations.studies.list({
            parent: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /**
         * Creates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling
         * projects.models.versions.create.
         */
        await gapi.client.ml.projects.models.create({
            parent: "Test string",
        }, {
            defaultVersion: {
                acceleratorConfig: {
                    count: "Test string",
                    type: "Test string",
                },
                autoScaling: {
                    minNodes: 42,
                },
                createTime: "Test string",
                deploymentUri: "Test string",
                description: "Test string",
                endpoints: {
                    explain: "Test string",
                    health: "Test string",
                    predict: "Test string",
                },
                errorMessage: "Test string",
                etag: "Test string",
                explanationConfig: {
                    integratedGradientsAttribution: {
                        numIntegralSteps: 42,
                    },
                    sampledShapleyAttribution: {
                        numPaths: 42,
                    },
                    xraiAttribution: {
                        numIntegralSteps: 42,
                    },
                },
                framework: "Test string",
                isDefault: true,
                labels: {
                    A: "Test string"                },
                lastUseTime: "Test string",
                machineType: "Test string",
                manualScaling: {
                    nodes: 42,
                },
                name: "Test string",
                packageUris: [
                    "Test string"                ],
                predictionClass: "Test string",
                pythonVersion: "Test string",
                requestLoggingConfig: {
                    bigqueryTableName: "Test string",
                    samplingPercentage: 42,
                },
                runtimeVersion: "Test string",
                serviceAccount: "Test string",
                state: "Test string",
            },
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"            },
            name: "Test string",
            onlinePredictionConsoleLogging: true,
            onlinePredictionLogging: true,
            regions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Deletes a model. You can only delete a model if there are no versions in it. You can delete versions by calling projects.models.versions.delete. */
        await gapi.client.ml.projects.models.delete({
            name: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Gets information about a model, including its name, the description (if set), and the default version (if at least one version of the model has been deployed). */
        await gapi.client.ml.projects.models.get({
            name: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.ml.projects.models.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Lists the models in a project. Each project can contain multiple models, and each model can have multiple versions. If there are no models that match the request parameters, the list
         * request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Updates a specific model resource. Currently the only supported fields to update are `description` and `default_version.name`. */
        await gapi.client.ml.projects.models.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            defaultVersion: {
                acceleratorConfig: {
                    count: "Test string",
                    type: "Test string",
                },
                autoScaling: {
                    minNodes: 42,
                },
                createTime: "Test string",
                deploymentUri: "Test string",
                description: "Test string",
                endpoints: {
                    explain: "Test string",
                    health: "Test string",
                    predict: "Test string",
                },
                errorMessage: "Test string",
                etag: "Test string",
                explanationConfig: {
                    integratedGradientsAttribution: {
                        numIntegralSteps: 42,
                    },
                    sampledShapleyAttribution: {
                        numPaths: 42,
                    },
                    xraiAttribution: {
                        numIntegralSteps: 42,
                    },
                },
                framework: "Test string",
                isDefault: true,
                labels: {
                    A: "Test string"                },
                lastUseTime: "Test string",
                machineType: "Test string",
                manualScaling: {
                    nodes: 42,
                },
                name: "Test string",
                packageUris: [
                    "Test string"                ],
                predictionClass: "Test string",
                pythonVersion: "Test string",
                requestLoggingConfig: {
                    bigqueryTableName: "Test string",
                    samplingPercentage: 42,
                },
                runtimeVersion: "Test string",
                serviceAccount: "Test string",
                state: "Test string",
            },
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"            },
            name: "Test string",
            onlinePredictionConsoleLogging: true,
            onlinePredictionLogging: true,
            regions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.ml.projects.models.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.ml.projects.models.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.ml.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Performs online prediction on the data in the request. {% dynamic include "/ai-platform/includes/___predict-request" %} */
        await gapi.client.ml.projects.predict({
            name: "Test string",
        }, {
            httpBody: {
                contentType: "Test string",
                data: "Test string",
                extensions: [
                    {
                        A: 42                    }                ],
            },
        });
        /** Cancels a running job. */
        await gapi.client.ml.projects.jobs.cancel({
            name: "Test string",
        }, {
        });
        /** Creates a training or a batch prediction job. */
        await gapi.client.ml.projects.jobs.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            endTime: "Test string",
            errorMessage: "Test string",
            etag: "Test string",
            jobId: "Test string",
            labels: {
                A: "Test string"            },
            predictionInput: {
                batchSize: "Test string",
                dataFormat: "Test string",
                inputPaths: [
                    "Test string"                ],
                maxWorkerCount: "Test string",
                modelName: "Test string",
                outputDataFormat: "Test string",
                outputPath: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                signatureName: "Test string",
                uri: "Test string",
                versionName: "Test string",
            },
            predictionOutput: {
                errorCount: "Test string",
                nodeHours: 42,
                outputPath: "Test string",
                predictionCount: "Test string",
            },
            startTime: "Test string",
            state: "Test string",
            trainingInput: {
                args: [
                    "Test string"                ],
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                evaluatorConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                evaluatorCount: "Test string",
                evaluatorType: "Test string",
                hyperparameters: {
                    algorithm: "Test string",
                    enableTrialEarlyStopping: true,
                    goal: "Test string",
                    hyperparameterMetricTag: "Test string",
                    maxFailedTrials: 42,
                    maxParallelTrials: 42,
                    maxTrials: 42,
                    params: [
                        {
                            categoricalValues: [
                                "Test string"                            ],
                            discreteValues: [
                                42                            ],
                            maxValue: 42,
                            minValue: 42,
                            parameterName: "Test string",
                            scaleType: "Test string",
                            type: "Test string",
                        }                    ],
                    resumePreviousJobId: "Test string",
                },
                jobDir: "Test string",
                masterConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                masterType: "Test string",
                network: "Test string",
                packageUris: [
                    "Test string"                ],
                parameterServerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                parameterServerCount: "Test string",
                parameterServerType: "Test string",
                pythonModule: "Test string",
                pythonVersion: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                scaleTier: "Test string",
                scheduling: {
                    maxRunningTime: "Test string",
                    maxWaitTime: "Test string",
                },
                serviceAccount: "Test string",
                useChiefInTfConfig: true,
                workerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                workerCount: "Test string",
                workerType: "Test string",
            },
            trainingOutput: {
                builtInAlgorithmOutput: {
                    framework: "Test string",
                    modelPath: "Test string",
                    pythonVersion: "Test string",
                    runtimeVersion: "Test string",
                },
                completedTrialCount: "Test string",
                consumedMLUnits: 42,
                hyperparameterMetricTag: "Test string",
                isBuiltInAlgorithmJob: true,
                isHyperparameterTuningJob: true,
                trials: [
                    {
                        allMetrics: [
                            {
                                objectiveValue: 42,
                                trainingStep: "Test string",
                            }                        ],
                        builtInAlgorithmOutput: {
                            framework: "Test string",
                            modelPath: "Test string",
                            pythonVersion: "Test string",
                            runtimeVersion: "Test string",
                        },
                        endTime: "Test string",
                        finalMetric: {
                            objectiveValue: 42,
                            trainingStep: "Test string",
                        },
                        hyperparameters: {
                            A: "Test string"                        },
                        isTrialStoppedEarly: true,
                        startTime: "Test string",
                        state: "Test string",
                        trialId: "Test string",
                    }                ],
            },
        });
        /** Describes a job. */
        await gapi.client.ml.projects.jobs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.ml.projects.jobs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the jobs in the project. If there are no jobs that match the request parameters, the list request returns an empty response body: {}. */
        await gapi.client.ml.projects.jobs.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a specific job resource. Currently the only supported fields to update are `labels`. */
        await gapi.client.ml.projects.jobs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            endTime: "Test string",
            errorMessage: "Test string",
            etag: "Test string",
            jobId: "Test string",
            labels: {
                A: "Test string"            },
            predictionInput: {
                batchSize: "Test string",
                dataFormat: "Test string",
                inputPaths: [
                    "Test string"                ],
                maxWorkerCount: "Test string",
                modelName: "Test string",
                outputDataFormat: "Test string",
                outputPath: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                signatureName: "Test string",
                uri: "Test string",
                versionName: "Test string",
            },
            predictionOutput: {
                errorCount: "Test string",
                nodeHours: 42,
                outputPath: "Test string",
                predictionCount: "Test string",
            },
            startTime: "Test string",
            state: "Test string",
            trainingInput: {
                args: [
                    "Test string"                ],
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                evaluatorConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                evaluatorCount: "Test string",
                evaluatorType: "Test string",
                hyperparameters: {
                    algorithm: "Test string",
                    enableTrialEarlyStopping: true,
                    goal: "Test string",
                    hyperparameterMetricTag: "Test string",
                    maxFailedTrials: 42,
                    maxParallelTrials: 42,
                    maxTrials: 42,
                    params: [
                        {
                            categoricalValues: [
                                "Test string"                            ],
                            discreteValues: [
                                42                            ],
                            maxValue: 42,
                            minValue: 42,
                            parameterName: "Test string",
                            scaleType: "Test string",
                            type: "Test string",
                        }                    ],
                    resumePreviousJobId: "Test string",
                },
                jobDir: "Test string",
                masterConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                masterType: "Test string",
                network: "Test string",
                packageUris: [
                    "Test string"                ],
                parameterServerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                parameterServerCount: "Test string",
                parameterServerType: "Test string",
                pythonModule: "Test string",
                pythonVersion: "Test string",
                region: "Test string",
                runtimeVersion: "Test string",
                scaleTier: "Test string",
                scheduling: {
                    maxRunningTime: "Test string",
                    maxWaitTime: "Test string",
                },
                serviceAccount: "Test string",
                useChiefInTfConfig: true,
                workerConfig: {
                    acceleratorConfig: {
                        count: "Test string",
                        type: "Test string",
                    },
                    containerArgs: [
                        "Test string"                    ],
                    containerCommand: [
                        "Test string"                    ],
                    imageUri: "Test string",
                    tpuTfVersion: "Test string",
                },
                workerCount: "Test string",
                workerType: "Test string",
            },
            trainingOutput: {
                builtInAlgorithmOutput: {
                    framework: "Test string",
                    modelPath: "Test string",
                    pythonVersion: "Test string",
                    runtimeVersion: "Test string",
                },
                completedTrialCount: "Test string",
                consumedMLUnits: 42,
                hyperparameterMetricTag: "Test string",
                isBuiltInAlgorithmJob: true,
                isHyperparameterTuningJob: true,
                trials: [
                    {
                        allMetrics: [
                            {
                                objectiveValue: 42,
                                trainingStep: "Test string",
                            }                        ],
                        builtInAlgorithmOutput: {
                            framework: "Test string",
                            modelPath: "Test string",
                            pythonVersion: "Test string",
                            runtimeVersion: "Test string",
                        },
                        endTime: "Test string",
                        finalMetric: {
                            objectiveValue: 42,
                            trainingStep: "Test string",
                        },
                        hyperparameters: {
                            A: "Test string"                        },
                        isTrialStoppedEarly: true,
                        startTime: "Test string",
                        state: "Test string",
                        trialId: "Test string",
                    }                ],
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.ml.projects.jobs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.ml.projects.jobs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Get the complete list of CMLE capabilities in a location, along with their location-specific properties. */
        await gapi.client.ml.projects.locations.get({
            name: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.locations.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a study. */
        await gapi.client.ml.projects.locations.studies.create({
            parent: "Test string",
            studyId: "Test string",
        }, {
            createTime: "Test string",
            inactiveReason: "Test string",
            name: "Test string",
            state: "Test string",
            studyConfig: {
                algorithm: "Test string",
                automatedStoppingConfig: {
                    decayCurveStoppingConfig: {
                        useElapsedTime: true,
                    },
                    medianAutomatedStoppingConfig: {
                        useElapsedTime: true,
                    },
                },
                metrics: [
                    {
                        goal: "Test string",
                        metric: "Test string",
                    }                ],
                parameters: [
                    {
                        categoricalValueSpec: {
                            values: [
                                "Test string"                            ],
                        },
                        childParameterSpecs: undefined,
                        discreteValueSpec: {
                            values: [
                                42                            ],
                        },
                        doubleValueSpec: {
                            maxValue: 42,
                            minValue: 42,
                        },
                        integerValueSpec: {
                            maxValue: "Test string",
                            minValue: "Test string",
                        },
                        parameter: "Test string",
                        parentCategoricalValues: {
                            values: [
                                "Test string"                            ],
                        },
                        parentDiscreteValues: {
                            values: [
                                42                            ],
                        },
                        parentIntValues: {
                            values: [
                                "Test string"                            ],
                        },
                        scaleType: "Test string",
                        type: "Test string",
                    }                ],
            },
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Deletes a study. */
        await gapi.client.ml.projects.locations.studies.delete({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Gets a study. */
        await gapi.client.ml.projects.locations.studies.get({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Lists all the studies in a region for an associated project. */
        await gapi.client.ml.projects.locations.studies.list({
            parent: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** List all locations that provides at least one type of CMLE capability. */
        await gapi.client.ml.projects.locations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.locations.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a study. */
        await gapi.client.ml.projects.locations.studies.create({
            parent: "Test string",
            studyId: "Test string",
        }, {
            createTime: "Test string",
            inactiveReason: "Test string",
            name: "Test string",
            state: "Test string",
            studyConfig: {
                algorithm: "Test string",
                automatedStoppingConfig: {
                    decayCurveStoppingConfig: {
                        useElapsedTime: true,
                    },
                    medianAutomatedStoppingConfig: {
                        useElapsedTime: true,
                    },
                },
                metrics: [
                    {
                        goal: "Test string",
                        metric: "Test string",
                    }                ],
                parameters: [
                    {
                        categoricalValueSpec: {
                            values: [
                                "Test string"                            ],
                        },
                        childParameterSpecs: undefined,
                        discreteValueSpec: {
                            values: [
                                42                            ],
                        },
                        doubleValueSpec: {
                            maxValue: 42,
                            minValue: 42,
                        },
                        integerValueSpec: {
                            maxValue: "Test string",
                            minValue: "Test string",
                        },
                        parameter: "Test string",
                        parentCategoricalValues: {
                            values: [
                                "Test string"                            ],
                        },
                        parentDiscreteValues: {
                            values: [
                                42                            ],
                        },
                        parentIntValues: {
                            values: [
                                "Test string"                            ],
                        },
                        scaleType: "Test string",
                        type: "Test string",
                    }                ],
            },
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Deletes a study. */
        await gapi.client.ml.projects.locations.studies.delete({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Gets a study. */
        await gapi.client.ml.projects.locations.studies.get({
            name: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /** Lists all the studies in a region for an associated project. */
        await gapi.client.ml.projects.locations.studies.list({
            parent: "Test string",
        });
        /** Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete. */
        await gapi.client.ml.projects.locations.studies.trials.addMeasurement({
            name: "Test string",
        }, {
            measurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
        });
        /** Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse. */
        await gapi.client.ml.projects.locations.studies.trials.checkEarlyStoppingState({
            name: "Test string",
        }, {
        });
        /** Marks a trial as complete. */
        await gapi.client.ml.projects.locations.studies.trials.complete({
            name: "Test string",
        }, {
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            trialInfeasible: true,
        });
        /** Adds a user provided trial to a study. */
        await gapi.client.ml.projects.locations.studies.trials.create({
            parent: "Test string",
        }, {
            clientId: "Test string",
            endTime: "Test string",
            finalMeasurement: {
                elapsedTime: "Test string",
                metrics: [
                    {
                        metric: "Test string",
                        value: 42,
                    }                ],
                stepCount: "Test string",
            },
            infeasibleReason: "Test string",
            measurements: [
                {
                    elapsedTime: "Test string",
                    metrics: [
                        {
                            metric: "Test string",
                            value: 42,
                        }                    ],
                    stepCount: "Test string",
                }            ],
            name: "Test string",
            parameters: [
                {
                    floatValue: 42,
                    intValue: "Test string",
                    parameter: "Test string",
                    stringValue: "Test string",
                }            ],
            startTime: "Test string",
            state: "Test string",
            trialInfeasible: true,
        });
        /** Deletes a trial. */
        await gapi.client.ml.projects.locations.studies.trials.delete({
            name: "Test string",
        });
        /** Gets a trial. */
        await gapi.client.ml.projects.locations.studies.trials.get({
            name: "Test string",
        });
        /** Lists the trials associated with a study. */
        await gapi.client.ml.projects.locations.studies.trials.list({
            parent: "Test string",
        });
        /** Stops a trial. */
        await gapi.client.ml.projects.locations.studies.trials.stop({
            name: "Test string",
        }, {
        });
        /**
         * Adds one or more trials to a study, with parameter values suggested by AI Platform Optimizer. Returns a long-running operation associated with the generation of trial suggestions. When
         * this long-running operation succeeds, it will contain a SuggestTrialsResponse.
         */
        await gapi.client.ml.projects.locations.studies.trials.suggest({
            parent: "Test string",
        }, {
            clientId: "Test string",
            suggestionCount: 42,
        });
        /**
         * Creates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling
         * projects.models.versions.create.
         */
        await gapi.client.ml.projects.models.create({
            parent: "Test string",
        }, {
            defaultVersion: {
                acceleratorConfig: {
                    count: "Test string",
                    type: "Test string",
                },
                autoScaling: {
                    minNodes: 42,
                },
                createTime: "Test string",
                deploymentUri: "Test string",
                description: "Test string",
                endpoints: {
                    explain: "Test string",
                    health: "Test string",
                    predict: "Test string",
                },
                errorMessage: "Test string",
                etag: "Test string",
                explanationConfig: {
                    integratedGradientsAttribution: {
                        numIntegralSteps: 42,
                    },
                    sampledShapleyAttribution: {
                        numPaths: 42,
                    },
                    xraiAttribution: {
                        numIntegralSteps: 42,
                    },
                },
                framework: "Test string",
                isDefault: true,
                labels: {
                    A: "Test string"                },
                lastUseTime: "Test string",
                machineType: "Test string",
                manualScaling: {
                    nodes: 42,
                },
                name: "Test string",
                packageUris: [
                    "Test string"                ],
                predictionClass: "Test string",
                pythonVersion: "Test string",
                requestLoggingConfig: {
                    bigqueryTableName: "Test string",
                    samplingPercentage: 42,
                },
                runtimeVersion: "Test string",
                serviceAccount: "Test string",
                state: "Test string",
            },
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"            },
            name: "Test string",
            onlinePredictionConsoleLogging: true,
            onlinePredictionLogging: true,
            regions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Deletes a model. You can only delete a model if there are no versions in it. You can delete versions by calling projects.models.versions.delete. */
        await gapi.client.ml.projects.models.delete({
            name: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Gets information about a model, including its name, the description (if set), and the default version (if at least one version of the model has been deployed). */
        await gapi.client.ml.projects.models.get({
            name: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.ml.projects.models.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Lists the models in a project. Each project can contain multiple models, and each model can have multiple versions. If there are no models that match the request parameters, the list
         * request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Updates a specific model resource. Currently the only supported fields to update are `description` and `default_version.name`. */
        await gapi.client.ml.projects.models.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            defaultVersion: {
                acceleratorConfig: {
                    count: "Test string",
                    type: "Test string",
                },
                autoScaling: {
                    minNodes: 42,
                },
                createTime: "Test string",
                deploymentUri: "Test string",
                description: "Test string",
                endpoints: {
                    explain: "Test string",
                    health: "Test string",
                    predict: "Test string",
                },
                errorMessage: "Test string",
                etag: "Test string",
                explanationConfig: {
                    integratedGradientsAttribution: {
                        numIntegralSteps: 42,
                    },
                    sampledShapleyAttribution: {
                        numPaths: 42,
                    },
                    xraiAttribution: {
                        numIntegralSteps: 42,
                    },
                },
                framework: "Test string",
                isDefault: true,
                labels: {
                    A: "Test string"                },
                lastUseTime: "Test string",
                machineType: "Test string",
                manualScaling: {
                    nodes: 42,
                },
                name: "Test string",
                packageUris: [
                    "Test string"                ],
                predictionClass: "Test string",
                pythonVersion: "Test string",
                requestLoggingConfig: {
                    bigqueryTableName: "Test string",
                    samplingPercentage: 42,
                },
                runtimeVersion: "Test string",
                serviceAccount: "Test string",
                state: "Test string",
            },
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"            },
            name: "Test string",
            onlinePredictionConsoleLogging: true,
            onlinePredictionLogging: true,
            regions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.ml.projects.models.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.ml.projects.models.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made
         * the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version
         * to be the default, you must call projects.models.versions.setDefault.
         */
        await gapi.client.ml.projects.models.versions.create({
            parent: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version
         * that is set as the default version of the model unless it is the only remaining version.
         */
        await gapi.client.ml.projects.models.versions.delete({
            name: "Test string",
        });
        /**
         * Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the
         * versions of a model.
         */
        await gapi.client.ml.projects.models.versions.get({
            name: "Test string",
        });
        /**
         * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can
         * request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
         */
        await gapi.client.ml.projects.models.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`. */
        await gapi.client.ml.projects.models.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            acceleratorConfig: {
                count: "Test string",
                type: "Test string",
            },
            autoScaling: {
                minNodes: 42,
            },
            createTime: "Test string",
            deploymentUri: "Test string",
            description: "Test string",
            endpoints: {
                explain: "Test string",
                health: "Test string",
                predict: "Test string",
            },
            errorMessage: "Test string",
            etag: "Test string",
            explanationConfig: {
                integratedGradientsAttribution: {
                    numIntegralSteps: 42,
                },
                sampledShapleyAttribution: {
                    numPaths: 42,
                },
                xraiAttribution: {
                    numIntegralSteps: 42,
                },
            },
            framework: "Test string",
            isDefault: true,
            labels: {
                A: "Test string"            },
            lastUseTime: "Test string",
            machineType: "Test string",
            manualScaling: {
                nodes: 42,
            },
            name: "Test string",
            packageUris: [
                "Test string"            ],
            predictionClass: "Test string",
            pythonVersion: "Test string",
            requestLoggingConfig: {
                bigqueryTableName: "Test string",
                samplingPercentage: 42,
            },
            runtimeVersion: "Test string",
            serviceAccount: "Test string",
            state: "Test string",
        });
        /**
         * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be
         * created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
         */
        await gapi.client.ml.projects.models.versions.setDefault({
            name: "Test string",
        }, {
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.ml.projects.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.ml.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.ml.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
