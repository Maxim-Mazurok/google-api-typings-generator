/* Type definitions for non-npm package VM Migration API v1 0.0 */
// Project: https://cloud.google.com/migrate/virtual-machines
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://vmmigration.googleapis.com/$discovery/rest?version=v1
// Revision: 20230810

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load VM Migration API v1 */
    function load(urlOrObject: "https://vmmigration.googleapis.com/$discovery/rest?version=v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "vmmigration", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "vmmigration", version: "v1", callback: () => any): void;

    namespace vmmigration {
        interface AccessKeyCredentials {
            /** AWS access key ID. */
            accessKeyId?:
                string;
            /** Input only. AWS secret access key. */
            secretAccessKey?:
                string;
            /** Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials. */
            sessionToken?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AdaptingOSStep {
        }
        interface AddGroupMigrationRequest {
            /** The full path name of the MigratingVm to add. */
            migratingVm?:
                string;
        }
        interface ApplianceVersion {
            /** Determine whether it's critical to upgrade the appliance to this version. */
            critical?:
                boolean;
            /** Link to a page that contains the version release notes. */
            releaseNotesUri?:
                string;
            /** A link for downloading the version. */
            uri?:
                string;
            /** The appliance version. */
            version?:
                string;
        }
        interface AppliedLicense {
            /** The OS license returned from the adaptation module's report. */
            osLicense?:
                string;
            /** The license type that was used in OS adaptation. */
            type?:
                string;
        }
        interface AvailableUpdates {
            /** The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI. */
            inPlaceUpdate?:
                ApplianceVersion;
            /** The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance. */
            newDeployableAppliance?:
                ApplianceVersion;
        }
        interface AwsDiskDetails {
            /** The ordinal number of the disk. */
            diskNumber?:
                number;
            /** Size in GB. */
            sizeGb?:
                string;
            /** AWS volume ID. */
            volumeId?:
                string;
        }
        interface AwsSecurityGroup {
            /** The AWS security group id. */
            id?:
                string;
            /** The AWS security group name. */
            name?:
                string;
        }
        interface AwsSourceDetails {
            /** AWS Credentials using access key id and secret. */
            accessKeyCreds?:
                AccessKeyCredentials;
            /** Immutable. The AWS region that the source VMs will be migrated from. */
            awsRegion?:
                string;
            /** Output only. Provides details on the state of the Source in case of an error. */
            error?:
                Status;
            /** AWS security group names to limit the scope of the source inventory. */
            inventorySecurityGroupNames?:
                string[];
            /** AWS resource tags to limit the scope of the source inventory. */
            inventoryTagList?:
                Tag[];
            /**
             * User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags
             * must not begin with the reserved prefix `m2vm`.
             */
            migrationResourcesUserTags?:
                { [P in string]: string };
            /** Output only. The source's public IP. All communication initiated by this source will originate from this IP. */
            publicIp?:
                string;
            /** Output only. State of the source as determined by the health check. */
            state?:
                string;
        }
        interface AwsSourceVmDetails {
            /** The total size of the disks being migrated in bytes. */
            committedStorageBytes?:
                string;
            /** The disks attached to the source VM. */
            disks?:
                AwsDiskDetails[];
            /** The firmware type of the source VM. */
            firmware?:
                string;
        }
        interface AwsVmDetails {
            /** The CPU architecture. */
            architecture?:
                string;
            /** The VM Boot Option. */
            bootOption?:
                string;
            /** The total size of the storage allocated to the VM in MB. */
            committedStorageMb?:
                string;
            /** The number of cpus the VM has. */
            cpuCount?:
                number;
            /** The number of disks the VM has. */
            diskCount?:
                number;
            /** The display name of the VM. Note that this value is not necessarily unique. */
            displayName?:
                string;
            /** The instance type of the VM. */
            instanceType?:
                string;
            /** The memory size of the VM in MB. */
            memoryMb?:
                number;
            /** The VM's OS. */
            osDescription?:
                string;
            /** Output only. The power state of the VM at the moment list was taken. */
            powerState?:
                string;
            /** The security groups the VM belongs to. */
            securityGroups?:
                AwsSecurityGroup[];
            /** The descriptive name of the AWS's source this VM is connected to. */
            sourceDescription?:
                string;
            /** The id of the AWS's source this VM is connected to. */
            sourceId?:
                string;
            /** The tags of the VM. */
            tags?:
                { [P in string]: string };
            /** The virtualization type. */
            virtualizationType?:
                string;
            /** The VM ID in AWS. */
            vmId?:
                string;
            /** The VPC ID the VM belongs to. */
            vpcId?:
                string;
            /** The AWS zone of the VM. */
            zone?:
                string;
        }
        interface AwsVmsDetails {
            /** The details of the AWS VMs. */
            details?:
                AwsVmDetails[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelCloneJobRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelCutoverJobRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface CloneJob {
            /** Output only. Details of the target Persistent Disks in Compute Engine. */
            computeEngineDisksTargetDetails?:
                ComputeEngineDisksTargetDetails;
            /** Output only. Details of the target VM in Compute Engine. */
            computeEngineTargetDetails?:
                ComputeEngineTargetDetails;
            /** Output only. The time the clone job was created (as an API call, not when it was actually created in the target). */
            createTime?:
                string;
            /** Output only. The time the clone job was ended. */
            endTime?:
                string;
            /** Output only. Provides details for the errors that led to the Clone Job's state. */
            error?:
                Status;
            /** Output only. The name of the clone. */
            name?:
                string;
            /** Output only. State of the clone job. */
            state?:
                string;
            /** Output only. The time the state was last updated. */
            stateTime?:
                string;
            /** Output only. The clone steps list representing its progress. */
            steps?:
                CloneStep[];
        }
        interface CloneStep {
            /** Adapting OS step. */
            adaptingOs?:
                any;
            /** The time the step has ended. */
            endTime?:
                string;
            /** Instantiating migrated VM step. */
            instantiatingMigratedVm?:
                any;
            /** Preparing VM disks step. */
            preparingVmDisks?:
                any;
            /** The time the step has started. */
            startTime?:
                string;
        }
        interface ComputeEngineDisksTargetDefaults {
            /** The details of each Persistent Disk to create. */
            disks?:
                PersistentDiskDefaults[];
            /** The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks. */
            targetProject?:
                string;
            /** The zone in which to create the Persistent Disks. */
            zone?:
                string;
        }
        interface ComputeEngineDisksTargetDetails {
            /** The details of each created Persistent Disk. */
            disks?:
                PersistentDisk[];
        }
        interface ComputeEngineTargetDefaults {
            /** Additional licenses to assign to the VM. */
            additionalLicenses?:
                string[];
            /** Output only. The OS license returned from the adaptation module report. */
            appliedLicense?:
                AppliedLicense;
            /** Output only. The VM Boot Option, as set in the source VM. */
            bootOption?:
                string;
            /** Compute instance scheduling information (if empty default is used). */
            computeScheduling?:
                ComputeScheduling;
            /** The disk type to use in the VM. */
            diskType?:
                string;
            /** The hostname to assign to the VM. */
            hostname?:
                string;
            /** A map of labels to associate with the VM. */
            labels?:
                { [P in string]: string };
            /** The license type to use in OS adaptation. */
            licenseType?:
                string;
            /** The machine type to create the VM with. */
            machineType?:
                string;
            /** The machine type series to create the VM with. */
            machineTypeSeries?:
                string;
            /** The metadata key/value pairs to assign to the VM. */
            metadata?:
                { [P in string]: string };
            /** List of NICs connected to this VM. */
            networkInterfaces?:
                NetworkInterface[];
            /** A list of network tags to associate with the VM. */
            networkTags?:
                string[];
            /** Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI. */
            secureBoot?:
                boolean;
            /** The service account to associate the VM with. */
            serviceAccount?:
                string;
            /** The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM. */
            targetProject?:
                string;
            /** The name of the VM to create. */
            vmName?:
                string;
            /** The zone in which to create the VM. */
            zone?:
                string;
        }
        interface ComputeEngineTargetDetails {
            /** Additional licenses to assign to the VM. */
            additionalLicenses?:
                string[];
            /** The OS license returned from the adaptation module report. */
            appliedLicense?:
                AppliedLicense;
            /** The VM Boot Option, as set in the source VM. */
            bootOption?:
                string;
            /** Compute instance scheduling information (if empty default is used). */
            computeScheduling?:
                ComputeScheduling;
            /** The disk type to use in the VM. */
            diskType?:
                string;
            /** The hostname to assign to the VM. */
            hostname?:
                string;
            /** A map of labels to associate with the VM. */
            labels?:
                { [P in string]: string };
            /** The license type to use in OS adaptation. */
            licenseType?:
                string;
            /** The machine type to create the VM with. */
            machineType?:
                string;
            /** The machine type series to create the VM with. */
            machineTypeSeries?:
                string;
            /** The metadata key/value pairs to assign to the VM. */
            metadata?:
                { [P in string]: string };
            /** List of NICs connected to this VM. */
            networkInterfaces?:
                NetworkInterface[];
            /** A list of network tags to associate with the VM. */
            networkTags?:
                string[];
            /** The Google Cloud target project ID or project name. */
            project?:
                string;
            /** Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI. */
            secureBoot?:
                boolean;
            /** The service account to associate the VM with. */
            serviceAccount?:
                string;
            /** The name of the VM to create. */
            vmName?:
                string;
            /** The zone in which to create the VM. */
            zone?:
                string;
        }
        interface ComputeScheduling {
            /** The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured. */
            minNodeCpus?:
                number;
            /** A set of node affinity and anti-affinity configurations for sole tenant nodes. */
            nodeAffinities?:
                SchedulingNodeAffinity[];
            /** How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance. */
            onHostMaintenance?:
                string;
            /**
             * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart`
             * field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
             */
            restartType?:
                string;
        }
        interface CutoverForecast {
            /** Output only. Estimation of the CutoverJob duration. */
            estimatedCutoverJobDuration?:
                string;
        }
        interface CutoverJob {
            /** Output only. Details of the target Persistent Disks in Compute Engine. */
            computeEngineDisksTargetDetails?:
                ComputeEngineDisksTargetDetails;
            /** Output only. Details of the target VM in Compute Engine. */
            computeEngineTargetDetails?:
                ComputeEngineTargetDetails;
            /** Output only. The time the cutover job was created (as an API call, not when it was actually created in the target). */
            createTime?:
                string;
            /** Output only. The time the cutover job had finished. */
            endTime?:
                string;
            /** Output only. Provides details for the errors that led to the Cutover Job's state. */
            error?:
                Status;
            /** Output only. The name of the cutover job. */
            name?:
                string;
            /** Output only. The current progress in percentage of the cutover job. */
            progressPercent?:
                number;
            /** Output only. State of the cutover job. */
            state?:
                string;
            /** Output only. A message providing possible extra details about the current state. */
            stateMessage?:
                string;
            /** Output only. The time the state was last updated. */
            stateTime?:
                string;
            /** Output only. The cutover steps list representing its progress. */
            steps?:
                CutoverStep[];
        }
        interface CutoverStep {
            /** The time the step has ended. */
            endTime?:
                string;
            /** Final sync step. */
            finalSync?:
                ReplicationCycle;
            /** Instantiating migrated VM step. */
            instantiatingMigratedVm?:
                any;
            /** Preparing VM disks step. */
            preparingVmDisks?:
                any;
            /** A replication cycle prior cutover step. */
            previousReplicationCycle?:
                ReplicationCycle;
            /** Shutting down VM step. */
            shuttingDownSourceVm?:
                any;
            /** The time the step has started. */
            startTime?:
                string;
        }
        interface CycleStep {
            /** The time the cycle step has ended. */
            endTime?:
                string;
            /** Initializing replication step. */
            initializingReplication?:
                any;
            /** Post processing step. */
            postProcessing?:
                any;
            /** Replicating step. */
            replicating?:
                ReplicatingStep;
            /** The time the cycle step has started. */
            startTime?:
                string;
        }
        interface DatacenterConnector {
            /**
             * Output only. Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the
             * appliance.
             */
            applianceInfrastructureVersion?:
                string;
            /** Output only. Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance. */
            applianceSoftwareVersion?:
                string;
            /** Output only. The available versions for updating this appliance. */
            availableVersions?:
                AvailableUpdates;
            /** Output only. The communication channel between the datacenter connector and Google Cloud. */
            bucket?:
                string;
            /** Output only. The time the connector was created (as an API call, not when it was actually installed). */
            createTime?:
                string;
            /** Output only. Provides details on the state of the Datacenter Connector in case of an error. */
            error?:
                Status;
            /** Output only. The connector's name. */
            name?:
                string;
            /** Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified. */
            registrationId?:
                string;
            /** The service account to use in the connector when communicating with the cloud. */
            serviceAccount?:
                string;
            /** Output only. State of the DatacenterConnector, as determined by the health checks. */
            state?:
                string;
            /** Output only. The time the state was last set. */
            stateTime?:
                string;
            /** Output only. The last time the connector was updated with an API call. */
            updateTime?:
                string;
            /** Output only. The status of the current / last upgradeAppliance operation. */
            upgradeStatus?:
                UpgradeStatus;
            /** The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified. */
            version?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FetchInventoryResponse {
            /** The description of the VMs in a Source of type AWS. */
            awsVms?:
                AwsVmsDetails;
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. The timestamp when the source was last queried (if the result is from the cache). */
            updateTime?:
                string;
            /** The description of the VMs in a Source of type Vmware. */
            vmwareVms?:
                VmwareVmsDetails;
        }
        // tslint:disable-next-line:no-empty-interface
        interface FinalizeMigrationRequest {
        }
        interface Group {
            /** Output only. The create time timestamp. */
            createTime?:
                string;
            /** User-provided description of the group. */
            description?:
                string;
            /** Display name is a user defined name for this group which can be updated. */
            displayName?:
                string;
            /** Immutable. The target type of this group. */
            migrationTargetType?:
                string;
            /** Output only. The Group name. */
            name?:
                string;
            /** Output only. The update time timestamp. */
            updateTime?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface InitializingReplicationStep {
        }
        // tslint:disable-next-line:no-empty-interface
        interface InstantiatingMigratedVMStep {
        }
        interface Link {
            /** Describes what the link offers. */
            description?:
                string;
            /** The URL of the link. */
            url?:
                string;
        }
        interface ListCloneJobsResponse {
            /** Output only. The list of clone jobs response. */
            cloneJobs?:
                CloneJob[];
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListCutoverJobsResponse {
            /** Output only. The list of cutover jobs response. */
            cutoverJobs?:
                CutoverJob[];
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListDatacenterConnectorsResponse {
            /** Output only. The list of sources response. */
            datacenterConnectors?:
                DatacenterConnector[];
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListGroupsResponse {
            /** Output only. The list of groups response. */
            groups?:
                Group[];
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?:
                Location[];
            /** The standard List next-page token. */
            nextPageToken?:
                string;
        }
        interface ListMigratingVmsResponse {
            /** Output only. The list of Migrating VMs response. */
            migratingVms?:
                MigratingVm[];
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?:
                string;
            /** A list of operations that matches the specified filter in the request. */
            operations?:
                Operation[];
        }
        interface ListReplicationCyclesResponse {
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. The list of replication cycles response. */
            replicationCycles?:
                ReplicationCycle[];
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListSourcesResponse {
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. The list of sources response. */
            sources?:
                Source[];
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListTargetProjectsResponse {
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. The list of target response. */
            targetProjects?:
                TargetProject[];
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListUtilizationReportsResponse {
            /** Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** Output only. Locations that could not be reached. */
            unreachable?:
                string[];
            /** Output only. The list of reports. */
            utilizationReports?:
                UtilizationReport[];
        }
        interface LocalizedMessage {
            /** The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX" */
            locale?:
                string;
            /** The localized error message in the above locale. */
            message?:
                string;
        }
        interface Location {
            /** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
            displayName?:
                string;
            /** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
            labels?:
                { [P in string]: string };
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?:
                string;
            /** Service-specific metadata. For example the available capacity at the given location. */
            metadata?:
                { [P in string]: any };
            /** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
            name?:
                string;
        }
        interface MigratingVm {
            /** Output only. Details of the VM from an AWS source. */
            awsSourceVmDetails?:
                AwsSourceVmDetails;
            /** Details of the target Persistent Disks in Compute Engine. */
            computeEngineDisksTargetDefaults?:
                ComputeEngineDisksTargetDefaults;
            /** Details of the target VM in Compute Engine. */
            computeEngineTargetDefaults?:
                ComputeEngineTargetDefaults;
            /** Output only. The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source). */
            createTime?:
                string;
            /** Output only. Details of the current running replication cycle. */
            currentSyncInfo?:
                ReplicationCycle;
            /** Output only. Provides details of future CutoverJobs of a MigratingVm. Set to empty when cutover forecast is unavailable. */
            cutoverForecast?:
                CutoverForecast;
            /** The description attached to the migrating VM by the user. */
            description?:
                string;
            /** The display name attached to the MigratingVm by the user. */
            displayName?:
                string;
            /** Output only. Provides details on the state of the Migrating VM in case of an error in replication. */
            error?:
                Status;
            /** Output only. The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource. */
            group?:
                string;
            /** The labels of the migrating VM. */
            labels?:
                { [P in string]: string };
            /**
             * Output only. Details of the last replication cycle. This will be updated whenever a replication cycle is finished and is not to be confused with last_sync which is only updated on
             * successful replication cycles.
             */
            lastReplicationCycle?:
                ReplicationCycle;
            /** Output only. The most updated snapshot created time in the source that finished replication. */
            lastSync?:
                ReplicationSync;
            /** Output only. The identifier of the MigratingVm. */
            name?:
                string;
            /** The replication schedule policy. */
            policy?:
                SchedulePolicy;
            /**
             * Output only. The recent clone jobs performed on the migrating VM. This field holds the vm's last completed clone job and the vm's running clone job, if one exists. Note: To have
             * this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
             */
            recentCloneJobs?:
                CloneJob[];
            /**
             * Output only. The recent cutover jobs performed on the migrating VM. This field holds the vm's last completed cutover job and the vm's running cutover job, if one exists. Note: To
             * have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
             */
            recentCutoverJobs?:
                CutoverJob[];
            /** The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-. */
            sourceVmId?:
                string;
            /** Output only. State of the MigratingVm. */
            state?:
                string;
            /** Output only. The last time the migrating VM state was updated. */
            stateTime?:
                string;
            /** Output only. The last time the migrating VM resource was updated. */
            updateTime?:
                string;
        }
        interface MigrationError {
            /** Output only. Suggested action for solving the error. */
            actionItem?:
                LocalizedMessage;
            /** Output only. The error code. */
            code?:
                string;
            /** Output only. The localized error message. */
            errorMessage?:
                LocalizedMessage;
            /** Output only. The time the error occurred. */
            errorTime?:
                string;
            /** Output only. URL(s) pointing to additional information on handling the current error. */
            helpLinks?:
                Link[];
        }
        interface MigrationWarning {
            /** Suggested action for solving the warning. */
            actionItem?:
                LocalizedMessage;
            /** The warning code. */
            code?:
                string;
            /** URL(s) pointing to additional information on handling the current warning. */
            helpLinks?:
                Link[];
            /** The localized warning message. */
            warningMessage?:
                LocalizedMessage;
            /** The time the warning occurred. */
            warningTime?:
                string;
        }
        interface NetworkInterface {
            /** The external IP to define in the NIC. */
            externalIp?:
                string;
            /** The internal IP to define in the NIC. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path. */
            internalIp?:
                string;
            /** The network to connect the NIC to. */
            network?:
                string;
            /** The subnetwork to connect the NIC to. */
            subnetwork?:
                string;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?:
                string;
            /**
             * The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original
             * method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original
             * method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?:
                { [P in string]: any };
        }
        interface OperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?:
                string;
            /** Output only. The time the operation was created. */
            createTime?:
                string;
            /** Output only. The time the operation finished running. */
            endTime?:
                string;
            /**
             * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            requestedCancellation?:
                boolean;
            /** Output only. Human-readable status of the operation, if any. */
            statusMessage?:
                string;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?:
                string;
            /** Output only. Name of the verb executed by the operation. */
            verb?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface PauseMigrationRequest {
        }
        interface PersistentDisk {
            /** The URI of the Persistent Disk. */
            diskUri?:
                string;
            /** The ordinal number of the source VM disk. */
            sourceDiskNumber?:
                number;
        }
        interface PersistentDiskDefaults {
            /** A map of labels to associate with the Persistent Disk. */
            additionalLabels?:
                { [P in string]: string };
            /** Optional. The name of the Persistent Disk to create. */
            diskName?:
                string;
            /** The disk type to use. */
            diskType?:
                string;
            /** Required. The ordinal number of the source VM disk. */
            sourceDiskNumber?:
                number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface PostProcessingStep {
        }
        // tslint:disable-next-line:no-empty-interface
        interface PreparingVMDisksStep {
        }
        interface RemoveGroupMigrationRequest {
            /** The MigratingVm to remove. */
            migratingVm?:
                string;
        }
        interface ReplicatingStep {
            /** The source disks replication rate for the last 30 minutes in bytes per second. */
            lastThirtyMinutesAverageBytesPerSecond?:
                string;
            /** The source disks replication rate for the last 2 minutes in bytes per second. */
            lastTwoMinutesAverageBytesPerSecond?:
                string;
            /** Replicated bytes in the step. */
            replicatedBytes?:
                string;
            /** Total bytes to be handled in the step. */
            totalBytes?:
                string;
        }
        interface ReplicationCycle {
            /** The cycle's ordinal number. */
            cycleNumber?:
                number;
            /** The time the replication cycle has ended. */
            endTime?:
                string;
            /** Provides details on the state of the cycle in case of an error. */
            error?:
                Status;
            /** The identifier of the ReplicationCycle. */
            name?:
                string;
            /** The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately. */
            progressPercent?:
                number;
            /** The time the replication cycle has started. */
            startTime?:
                string;
            /** State of the ReplicationCycle. */
            state?:
                string;
            /** The cycle's steps list representing its progress. */
            steps?:
                CycleStep[];
            /** The accumulated duration the replication cycle was paused. */
            totalPauseDuration?:
                string;
            /** Output only. Warnings that occurred during the cycle. */
            warnings?:
                MigrationWarning[];
        }
        interface ReplicationSync {
            /** The most updated snapshot created time in the source that finished replication. */
            lastSyncTime?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ResumeMigrationRequest {
        }
        interface SchedulePolicy {
            /** The idle duration between replication stages. */
            idleDuration?:
                string;
            /**
             * A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully
             * function on Compute Engine.
             */
            skipOsAdaptation?:
                boolean;
        }
        interface SchedulingNodeAffinity {
            /** The label key of Node resource to reference. */
            key?:
                string;
            /** The operator to use for the node resources specified in the `values` parameter. */
            operator?:
                string;
            /** Corresponds to the label values of Node resource. */
            values?:
                string[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface ShuttingDownSourceVMStep {
        }
        interface Source {
            /** AWS type source details. */
            aws?:
                AwsSourceDetails;
            /** Output only. The create time timestamp. */
            createTime?:
                string;
            /** User-provided description of the source. */
            description?:
                string;
            /** The labels of the source. */
            labels?:
                { [P in string]: string };
            /** Output only. The Source name. */
            name?:
                string;
            /** Output only. The update time timestamp. */
            updateTime?:
                string;
            /** Vmware type source details. */
            vmware?:
                VmwareSourceDetails;
        }
        // tslint:disable-next-line:no-empty-interface
        interface StartMigrationRequest {
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface Tag {
            /** Key of tag. */
            key?:
                string;
            /** Value of tag. */
            value?:
                string;
        }
        interface TargetProject {
            /** Output only. The time this target project resource was created (not related to when the Compute Engine project it points to was created). */
            createTime?:
                string;
            /** The target project's description. */
            description?:
                string;
            /** Output only. The name of the target project. */
            name?:
                string;
            /** The target project ID (number) or project name. */
            project?:
                string;
            /** Output only. The last time the target project resource was updated. */
            updateTime?:
                string;
        }
        interface UpgradeApplianceRequest {
            /**
             * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
             * The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you
             * make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This
             * prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
             * (00000000-0000-0000-0000-000000000000).
             */
            requestId?:
                string;
        }
        interface UpgradeStatus {
            /** Provides details on the state of the upgrade operation in case of an error. */
            error?:
                Status;
            /** The version from which we upgraded. */
            previousVersion?:
                string;
            /** The time the operation was started. */
            startTime?:
                string;
            /** The state of the upgradeAppliance operation. */
            state?:
                string;
            /** The version to upgrade to. */
            version?:
                string;
        }
        interface UtilizationReport {
            /** Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed). */
            createTime?:
                string;
            /** The report display name, as assigned by the user. */
            displayName?:
                string;
            /** Output only. Provides details on the state of the report in case of an error. */
            error?:
                Status;
            /**
             * Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame
             * is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
             */
            frameEndTime?:
                string;
            /** Output only. The report unique name. */
            name?:
                string;
            /** Output only. Current state of the report. */
            state?:
                string;
            /** Output only. The time the state was last set. */
            stateTime?:
                string;
            /** Time frame of the report. */
            timeFrame?:
                string;
            /** Output only. Total number of VMs included in the report. */
            vmCount?:
                number;
            /**
             * List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other
             * fields are ignored.
             */
            vms?:
                VmUtilizationInfo[];
        }
        interface VmUtilizationInfo {
            /** Utilization metrics for this VM. */
            utilization?:
                VmUtilizationMetrics;
            /** The VM's ID in the source. */
            vmId?:
                string;
            /** The description of the VM in a Source of type Vmware. */
            vmwareVmDetails?:
                VmwareVmDetails;
        }
        interface VmUtilizationMetrics {
            /** Average CPU usage, percent. */
            cpuAveragePercent?:
                number;
            /** Max CPU usage, percent. */
            cpuMaxPercent?:
                number;
            /** Average disk IO rate, in kilobytes per second. */
            diskIoRateAverageKbps?:
                string;
            /** Max disk IO rate, in kilobytes per second. */
            diskIoRateMaxKbps?:
                string;
            /** Average memory usage, percent. */
            memoryAveragePercent?:
                number;
            /** Max memory usage, percent. */
            memoryMaxPercent?:
                number;
            /** Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second. */
            networkThroughputAverageKbps?:
                string;
            /** Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second. */
            networkThroughputMaxKbps?:
                string;
        }
        interface VmwareSourceDetails {
            /** Input only. The credentials password. This is write only and can not be read in a GET operation. */
            password?:
                string;
            /** The hostname of the vcenter. */
            resolvedVcenterHost?:
                string;
            /** The thumbprint representing the certificate for the vcenter. */
            thumbprint?:
                string;
            /** The credentials username. */
            username?:
                string;
            /** The ip address of the vcenter this Source represents. */
            vcenterIp?:
                string;
        }
        interface VmwareVmDetails {
            /** Output only. The VM Boot Option. */
            bootOption?:
                string;
            /** The total size of the storage allocated to the VM in MB. */
            committedStorageMb?:
                string;
            /** The number of cpus in the VM. */
            cpuCount?:
                number;
            /** The descriptive name of the vCenter's datacenter this VM is contained in. */
            datacenterDescription?:
                string;
            /** The id of the vCenter's datacenter this VM is contained in. */
            datacenterId?:
                string;
            /** The number of disks the VM has. */
            diskCount?:
                number;
            /** The display name of the VM. Note that this is not necessarily unique. */
            displayName?:
                string;
            /**
             * The VM's OS. See for example
             * https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
             * for types of strings this might hold.
             */
            guestDescription?:
                string;
            /** The size of the memory of the VM in MB. */
            memoryMb?:
                number;
            /** The power state of the VM at the moment list was taken. */
            powerState?:
                string;
            /** The unique identifier of the VM in vCenter. */
            uuid?:
                string;
            /** The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM. */
            vmId?:
                string;
        }
        interface VmwareVmsDetails {
            /** The details of the vmware VMs. */
            details?:
                VmwareVmDetails[];
        }
        interface GroupsResource {
            /** Adds a MigratingVm to a Group. */
            addGroupMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The full path name of the Group to add to. */
                group:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AddGroupMigrationRequest;
            }): Request<Operation>;
            addGroupMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The full path name of the Group to add to. */
                group:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AddGroupMigrationRequest): Request<Operation>;
            /** Creates a new Group in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The group identifier. */
                groupId?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Group's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Group;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The group identifier. */
                groupId?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Group's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Group): Request<Operation>;
            /** Deletes a single Group. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The Group name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the
                 * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single Group. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The group name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Group>;
            /** Lists Groups in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of groups to return. The service may return fewer than this value. If unspecified, at most 500 groups will be returned. The maximum value is 1000;
                 * values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListGroups` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListGroups`
                 * must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of groups. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListGroupsResponse>;
            /** Updates the parameters of a single Group. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The Group name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the Group resource by the update. The fields specified in the update_mask are relative to the resource, not the
                 * full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Group;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The Group name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the Group resource by the update. The fields specified in the update_mask are relative to the resource, not the
                 * full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Group): Request<Operation>;
            /** Removes a MigratingVm from a Group. */
            removeGroupMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The name of the Group. */
                group:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RemoveGroupMigrationRequest;
            }): Request<Operation>;
            removeGroupMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The name of the Group. */
                group:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RemoveGroupMigrationRequest): Request<Operation>;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be deleted. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The standard list filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation's parent resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The standard list page size. */
                pageSize?:
                    number;
                /** The standard list page token. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListOperationsResponse>;
        }
        interface DatacenterConnectorsResource {
            /** Creates a new DatacenterConnector in a given Source. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The datacenterConnector identifier. */
                datacenterConnectorId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Required. The DatacenterConnector's parent. Required. The Source in where the new DatacenterConnector will be created. For example:
                 * `projects/my-project/locations/us-central1/sources/my-source`
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    DatacenterConnector;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The datacenterConnector identifier. */
                datacenterConnectorId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Required. The DatacenterConnector's parent. Required. The Source in where the new DatacenterConnector will be created. For example:
                 * `projects/my-project/locations/us-central1/sources/my-source`
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: DatacenterConnector): Request<Operation>;
            /** Deletes a single DatacenterConnector. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The DatacenterConnector name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single DatacenterConnector. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the DatacenterConnector. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<DatacenterConnector>;
            /** Lists DatacenterConnectors in a given Source. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of connectors to return. The service may return fewer than this value. If unspecified, at most 500 sources will be returned. The maximum value is
                 * 1000; values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListDatacenterConnectors` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListDatacenterConnectors` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of connectors. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListDatacenterConnectorsResponse>;
            /** Upgrades the appliance relate to this DatacenterConnector to the in-place updateable version. */
            upgradeAppliance(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The DatacenterConnector name. */
                datacenterConnector:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    UpgradeApplianceRequest;
            }): Request<Operation>;
            upgradeAppliance(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The DatacenterConnector name. */
                datacenterConnector:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: UpgradeApplianceRequest): Request<Operation>;
        }
        interface CloneJobsResource {
            /** Initiates the cancellation of a running clone job. */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The clone job id */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CancelCloneJobRequest;
            }): Request<Operation>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The clone job id */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CancelCloneJobRequest): Request<Operation>;
            /** Initiates a Clone of a specific migrating VM. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The clone job identifier. */
                cloneJobId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Clone's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CloneJob;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The clone job identifier. */
                cloneJobId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Clone's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CloneJob): Request<Operation>;
            /** Gets details of a single CloneJob. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the CloneJob. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CloneJob>;
            /** Lists CloneJobs of a given migrating VM. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of clone jobs to return. The service may return fewer than this value. If unspecified, at most 500 clone jobs will be returned. The maximum value is
                 * 1000; values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListCloneJobs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListCloneJobs` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of source VMs. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCloneJobsResponse>;
        }
        interface CutoverJobsResource {
            /** Initiates the cancellation of a running cutover job. */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The cutover job id */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CancelCutoverJobRequest;
            }): Request<Operation>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The cutover job id */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CancelCutoverJobRequest): Request<Operation>;
            /** Initiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The cutover job identifier. */
                cutoverJobId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Cutover's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CutoverJob;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The cutover job identifier. */
                cutoverJobId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Cutover's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CutoverJob): Request<Operation>;
            /** Gets details of a single CutoverJob. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the CutoverJob. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CutoverJob>;
            /** Lists CutoverJobs of a given migrating VM. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of cutover jobs to return. The service may return fewer than this value. If unspecified, at most 500 cutover jobs will be returned. The maximum
                 * value is 1000; values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListCutoverJobs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListCutoverJobs` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of migrating VMs. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCutoverJobsResponse>;
        }
        interface ReplicationCyclesResource {
            /** Gets details of a single ReplicationCycle. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the ReplicationCycle. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ReplicationCycle>;
            /** Lists ReplicationCycles in a given MigratingVM. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of replication cycles to return. The service may return fewer than this value. If unspecified, at most 100 migrating VMs will be returned. The
                 * maximum value is 100; values above 100 will be coerced to 100.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListReplicationCycles` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListReplicationCycles` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of ReplicationCycles. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListReplicationCyclesResponse>;
        }
        interface MigratingVmsResource {
            /** Creates a new MigratingVm in a given Source. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The migratingVm identifier. */
                migratingVmId?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The MigratingVm's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    MigratingVm;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The migratingVm identifier. */
                migratingVmId?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The MigratingVm's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: MigratingVm): Request<Operation>;
            /** Deletes a single MigratingVm. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Marks a migration as completed, deleting migration resources that are no longer being used. Only applicable after cutover is done. */
            finalizeMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    FinalizeMigrationRequest;
            }): Request<Operation>;
            finalizeMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: FinalizeMigrationRequest): Request<Operation>;
            /** Gets details of a single MigratingVm. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Optional. The level of details of the migrating VM. */
                view?:
                    string;
            }): Request<MigratingVm>;
            /** Lists MigratingVms in a given Source. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of migrating VMs to return. The service may return fewer than this value. If unspecified, at most 500 migrating VMs will be returned. The maximum
                 * value is 1000; values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListMigratingVms` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListMigratingVms` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of MigratingVms. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Optional. The level of details of each migrating VM. */
                view?:
                    string;
            }): Request<ListMigratingVmsResponse>;
            /** Updates the parameters of a single MigratingVm. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The identifier of the MigratingVm. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the MigratingVm resource by the update. The fields specified in the update_mask are relative to the resource, not
                 * the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    MigratingVm;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The identifier of the MigratingVm. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the MigratingVm resource by the update. The fields specified in the update_mask are relative to the resource, not
                 * the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: MigratingVm): Request<Operation>;
            /** Pauses a migration for a VM. If cycle tasks are running they will be cancelled, preserving source task data. Further replication cycles will not be triggered while the VM is paused. */
            pauseMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    PauseMigrationRequest;
            }): Request<Operation>;
            pauseMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: PauseMigrationRequest): Request<Operation>;
            /**
             * Resumes a migration for a VM. When called on a paused migration, will start the process of uploading data and creating snapshots; when called on a completed cut-over migration, will
             * update the migration to active state and start the process of uploading data and creating snapshots.
             */
            resumeMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ResumeMigrationRequest;
            }): Request<Operation>;
            resumeMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ResumeMigrationRequest): Request<Operation>;
            /** Starts migration for a VM. Starts the process of uploading data and creating snapshots, in replication cycles scheduled by the policy. */
            startMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    StartMigrationRequest;
            }): Request<Operation>;
            startMigration(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the MigratingVm. */
                migratingVm:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: StartMigrationRequest): Request<Operation>;
            cloneJobs:
                CloneJobsResource;
            cutoverJobs:
                CutoverJobsResource;
            replicationCycles:
                ReplicationCyclesResource;
        }
        interface UtilizationReportsResource {
            /** Creates a new UtilizationReport. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Utilization Report's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /**
                 * Required. The ID to use for the report, which will become the final component of the reports's resource name. This value maximum length is 63 characters, and valid characters
                 * are /a-z-/. It must start with an english letter and must not end with a hyphen.
                 */
                utilizationReportId?:
                    string;
                /** Request body */
                resource:
                    UtilizationReport;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Utilization Report's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /**
                 * Required. The ID to use for the report, which will become the final component of the reports's resource name. This value maximum length is 63 characters, and valid characters
                 * are /a-z-/. It must start with an english letter and must not end with a hyphen.
                 */
                utilizationReportId?:
                    string;
            },
            body: UtilizationReport): Request<Operation>;
            /** Deletes a single Utilization Report. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The Utilization Report name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the
                 * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets a single Utilization Report. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The Utilization Report name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Optional. The level of details of the report. Defaults to FULL */
                view?:
                    string;
            }): Request<UtilizationReport>;
            /** Lists Utilization Reports of the given Source. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 500 reports will be returned. The maximum value is 1000;
                 * values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListUtilizationReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListUtilizationReports` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The Utilization Reports parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Optional. The level of details of each report. Defaults to BASIC. */
                view?:
                    string;
            }): Request<ListUtilizationReportsResponse>;
        }
        interface SourcesResource {
            /** Creates a new Source in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Source's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Required. The source identifier. */
                sourceId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Source;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The Source's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Required. The source identifier. */
                sourceId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Source): Request<Operation>;
            /** Deletes a single Source. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The Source name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the
                 * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /**
             * List remote source's inventory of VMs. The remote source is the onprem vCenter (remote in the sense it's not in Compute Engine). The inventory describes the list of existing VMs in
             * that source. Note that this operation lists the VMs on the remote source, as opposed to listing the MigratingVms resources in the vmmigration service.
             */
            fetchInventory(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** If this flag is set to true, the source will be queried instead of using cached results. Using this flag will make the call slower. */
                forceRefresh?:
                    boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The maximum number of VMs to return. The service may return fewer than this value. For AWS source: If unspecified, at most 500 VMs will be returned. The maximum value is 1000;
                 * values above 1000 will be coerced to 1000. For VMWare source: If unspecified, all VMs will be returned. There is no limit for maximum value.
                 */
                pageSize?:
                    number;
                /**
                 * A page token, received from a previous `FetchInventory` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `FetchInventory`
                 * must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The name of the Source. */
                source:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<FetchInventoryResponse>;
            /** Gets details of a single Source. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The Source name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Source>;
            /** Lists Sources in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of sources to return. The service may return fewer than this value. If unspecified, at most 500 sources will be returned. The maximum value is 1000;
                 * values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListSources` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListSources` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of sources. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListSourcesResponse>;
            /** Updates the parameters of a single Source. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The Source name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the Source resource by the update. The fields specified in the update_mask are relative to the resource, not the
                 * full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Source;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The Source name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the Source resource by the update. The fields specified in the update_mask are relative to the resource, not the
                 * full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Source): Request<Operation>;
            datacenterConnectors:
                DatacenterConnectorsResource;
            migratingVms:
                MigratingVmsResource;
            utilizationReports:
                UtilizationReportsResource;
        }
        interface TargetProjectsResource {
            /** Creates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The TargetProject's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Required. The target_project identifier. */
                targetProjectId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    TargetProject;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The TargetProject's parent. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Required. The target_project identifier. */
                targetProjectId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: TargetProject): Request<Operation>;
            /** Deletes a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The TargetProject name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the
                 * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The TargetProject name. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<TargetProject>;
            /** Lists TargetProjects in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. The filter request. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. the order by fields for the result. */
                orderBy?:
                    string;
                /**
                 * Optional. The maximum number of targets to return. The service may return fewer than this value. If unspecified, at most 500 targets will be returned. The maximum value is 1000;
                 * values above 1000 will be coerced to 1000.
                 */
                pageSize?:
                    number;
                /**
                 * Required. A page token, received from a previous `ListTargets` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListTargets` must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. The parent, which owns this collection of targets. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListTargetProjectsResponse>;
            /** Updates the parameters of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The name of the target project. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the TargetProject resource by the update. The fields specified in the update_mask are relative to the resource, not
                 * the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    TargetProject;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The name of the target project. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been
                 * completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request
                 * times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the
                 * second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
                 * (00000000-0000-0000-0000-000000000000).
                 */
                requestId?:
                    string;
                /**
                 * Field mask is used to specify the fields to be overwritten in the TargetProject resource by the update. The fields specified in the update_mask are relative to the resource, not
                 * the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: TargetProject): Request<Operation>;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Resource name for the location. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Location>;
            /** Lists information about the supported locations for this service. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in
                 * [AIP-160](https://google.aip.dev/160).
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The resource that owns the locations collection, if applicable. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The maximum number of results to return. If not set, the service selects a default. */
                pageSize?:
                    number;
                /** A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListLocationsResponse>;
            groups:
                GroupsResource;
            operations:
                OperationsResource;
            sources:
                SourcesResource;
            targetProjects:
                TargetProjectsResource;
        }
        interface ProjectsResource {
            locations:
                LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
