/* Type definitions for non-npm package Cloud Natural Language API v2 0.0 */
// Project: https://cloud.google.com/natural-language/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://language.googleapis.com/$discovery/rest?version=v2
// Revision: 20231014

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Natural Language API v2 */
    function load(urlOrObject: "https://language.googleapis.com/$discovery/rest?version=v2"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "language", version: "v2"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "language", version: "v2", callback: () => any): void;

    namespace language {
        interface AnalyzeEntitiesRequest {
            /** Required. Input document. */
            document?:
                Document;
            /** The encoding type used by the API to calculate offsets. */
            encodingType?:
                string;
        }
        interface AnalyzeEntitiesResponse {
            /** The recognized entities in the input document. */
            entities?:
                Entity[];
            /**
             * The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for
             * more details.
             */
            languageCode?:
                string;
            /** Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis. */
            languageSupported?:
                boolean;
        }
        interface AnalyzeSentimentRequest {
            /** Required. Input document. */
            document?:
                Document;
            /** The encoding type used by the API to calculate sentence offsets. */
            encodingType?:
                string;
        }
        interface AnalyzeSentimentResponse {
            /** The overall sentiment of the input document. */
            documentSentiment?:
                Sentiment;
            /**
             * The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for
             * more details.
             */
            languageCode?:
                string;
            /** Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis. */
            languageSupported?:
                boolean;
            /** The sentiment for all the sentences in the document. */
            sentences?:
                Sentence[];
        }
        interface AnnotateTextRequest {
            /** Required. Input document. */
            document?:
                Document;
            /** The encoding type used by the API to calculate offsets. */
            encodingType?:
                string;
            /** Required. The enabled features. */
            features?:
                Features;
        }
        interface AnnotateTextResponse {
            /** Categories identified in the input document. */
            categories?:
                ClassificationCategory[];
            /** The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment. */
            documentSentiment?:
                Sentiment;
            /**
             * Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities or
             * AnnotateTextRequest.Features.extract_entity_sentiment.
             */
            entities?:
                Entity[];
            /**
             * The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for
             * more details.
             */
            languageCode?:
                string;
            /** Whether the language is officially supported by all requested features. The API may still return a response when the language is not supported, but it is on a best effort basis. */
            languageSupported?:
                boolean;
            /** Harmful and sensitive categories identified in the input document. */
            moderationCategories?:
                ClassificationCategory[];
            /** Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment. */
            sentences?:
                Sentence[];
        }
        interface ClassificationCategory {
            /** The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text. */
            confidence?:
                number;
            /** The name of the category representing the document. */
            name?:
                string;
        }
        interface ClassifyTextRequest {
            /** Required. Input document. */
            document?:
                Document;
        }
        interface ClassifyTextResponse {
            /** Categories representing the input document. */
            categories?:
                ClassificationCategory[];
            /**
             * The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for
             * more details.
             */
            languageCode?:
                string;
            /** Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis. */
            languageSupported?:
                boolean;
        }
        interface Document {
            /** The content of the input in string format. Cloud audit logging exempt since it is based on user data. */
            content?:
                string;
            /**
             * The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see
             * https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.
             */
            gcsContentUri?:
                string;
            /**
             * Optional. The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language
             * Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or
             * automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.
             */
            languageCode?:
                string;
            /** Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error. */
            type?:
                string;
        }
        interface Entity {
            /** The mentions of this entity in the input document. The API currently supports proper noun mentions. */
            mentions?:
                EntityMention[];
            /** Metadata associated with the entity. For the metadata associated with other entity types, see the Type table below. */
            metadata?:
                { [P in string]: string };
            /** The representative name for the entity. */
            name?:
                string;
            /**
             * For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this
             * entity in the provided document.
             */
            sentiment?:
                Sentiment;
            /** The entity type. */
            type?:
                string;
        }
        interface EntityMention {
            /** Probability score associated with the entity. The score shows the probability of the entity mention being the entity type. The score is in (0, 1] range. */
            probability?:
                number;
            /**
             * For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of
             * the entity in the provided document.
             */
            sentiment?:
                Sentiment;
            /** The mention text. */
            text?:
                TextSpan;
            /** The type of the entity mention. */
            type?:
                string;
        }
        interface Features {
            /** Optional. Classify the full document into categories. */
            classifyText?:
                boolean;
            /** Optional. Extract document-level sentiment. */
            extractDocumentSentiment?:
                boolean;
            /** Optional. Extract entities. */
            extractEntities?:
                boolean;
            /** Optional. Moderate the document for harmful and sensitive categories. */
            moderateText?:
                boolean;
        }
        interface ModerateTextRequest {
            /** Required. Input document. */
            document?:
                Document;
        }
        interface ModerateTextResponse {
            /**
             * The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for
             * more details.
             */
            languageCode?:
                string;
            /** Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis. */
            languageSupported?:
                boolean;
            /** Harmful and sensitive categories representing the input document. */
            moderationCategories?:
                ClassificationCategory[];
        }
        interface Sentence {
            /** For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence. */
            sentiment?:
                Sentiment;
            /** The sentence text. */
            text?:
                TextSpan;
        }
        interface Sentiment {
            /** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative). */
            magnitude?:
                number;
            /** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
            score?:
                number;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface TextSpan {
            /** The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request. */
            beginOffset?:
                number;
            /** The content of the text span, which is a substring of the document. */
            content?:
                string;
        }
        interface DocumentsResource {
            /** Finds named entities (currently proper names and common nouns) in the text along with entity types, probability, mentions for each entity, and other properties. */
            analyzeEntities(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AnalyzeEntitiesRequest;
            }): Request<AnalyzeEntitiesResponse>;
            analyzeEntities(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AnalyzeEntitiesRequest): Request<AnalyzeEntitiesResponse>;
            /** Analyzes the sentiment of the provided text. */
            analyzeSentiment(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AnalyzeSentimentRequest;
            }): Request<AnalyzeSentimentResponse>;
            analyzeSentiment(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AnalyzeSentimentRequest): Request<AnalyzeSentimentResponse>;
            /** A convenience method that provides all features in one call. */
            annotateText(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AnnotateTextRequest;
            }): Request<AnnotateTextResponse>;
            annotateText(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AnnotateTextRequest): Request<AnnotateTextResponse>;
            /** Classifies a document into categories. */
            classifyText(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ClassifyTextRequest;
            }): Request<ClassifyTextResponse>;
            classifyText(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ClassifyTextRequest): Request<ClassifyTextResponse>;
            /** Moderates a document for harmful and sensitive categories. */
            moderateText(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ModerateTextRequest;
            }): Request<ModerateTextResponse>;
            moderateText(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ModerateTextRequest): Request<ModerateTextResponse>;
        }

        const documents: DocumentsResource;
    }
}
