/* This is stub file for gapi.client.datastream-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250805

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://datastream.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.datastream */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** The FetchStaticIps API call exposes the static IP addresses used by Datastream. */
    await gapi.client.datastream.projects.locations.fetchStaticIps({
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets information about a location. */
    await gapi.client.datastream.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.datastream.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Use this method to create a connection profile in a project and location. */
    await gapi.client.datastream.projects.locations.connectionProfiles.create(
      {
        connectionProfileId: 'Test string',
        force: true,
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        bigqueryProfile: {},
        createTime: 'Test string',
        displayName: 'Test string',
        forwardSshConnectivity: {
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          privateKey: 'Test string',
          username: 'Test string',
        },
        gcsProfile: {
          bucket: 'Test string',
          rootPath: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        mongodbProfile: {
          hostAddresses: [
            {
              hostname: 'Test string',
              port: 42,
            },
          ],
          password: 'Test string',
          replicaSet: 'Test string',
          secretManagerStoredPassword: 'Test string',
          srvConnectionFormat: {},
          sslConfig: {
            caCertificate: 'Test string',
            caCertificateSet: true,
            clientCertificate: 'Test string',
            clientCertificateSet: true,
            clientKey: 'Test string',
            clientKeySet: true,
            secretManagerStoredClientKey: 'Test string',
          },
          standardConnectionFormat: {
            directConnection: true,
          },
          username: 'Test string',
        },
        mysqlProfile: {
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          sslConfig: {
            caCertificate: 'Test string',
            caCertificateSet: true,
            clientCertificate: 'Test string',
            clientCertificateSet: true,
            clientKey: 'Test string',
            clientKeySet: true,
          },
          username: 'Test string',
        },
        name: 'Test string',
        oracleProfile: {
          connectionAttributes: {
            A: 'Test string',
          },
          databaseService: 'Test string',
          hostname: 'Test string',
          oracleAsmConfig: {
            asmService: 'Test string',
            connectionAttributes: {
              A: 'Test string',
            },
            hostname: 'Test string',
            oracleSslConfig: {
              caCertificate: 'Test string',
              caCertificateSet: true,
              serverCertificateDistinguishedName: 'Test string',
            },
            password: 'Test string',
            port: 42,
            secretManagerStoredPassword: 'Test string',
            username: 'Test string',
          },
          oracleSslConfig: {
            caCertificate: 'Test string',
            caCertificateSet: true,
            serverCertificateDistinguishedName: 'Test string',
          },
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          username: 'Test string',
        },
        postgresqlProfile: {
          database: 'Test string',
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          sslConfig: {
            serverAndClientVerification: {
              caCertificate: 'Test string',
              clientCertificate: 'Test string',
              clientKey: 'Test string',
              serverCertificateHostname: 'Test string',
            },
            serverVerification: {
              caCertificate: 'Test string',
              serverCertificateHostname: 'Test string',
            },
          },
          username: 'Test string',
        },
        privateConnectivity: {
          privateConnection: 'Test string',
        },
        salesforceProfile: {
          domain: 'Test string',
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: 'Test string',
            secretManagerStoredClientSecret: 'Test string',
          },
          userCredentials: {
            password: 'Test string',
            secretManagerStoredPassword: 'Test string',
            secretManagerStoredSecurityToken: 'Test string',
            securityToken: 'Test string',
            username: 'Test string',
          },
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        sqlServerProfile: {
          database: 'Test string',
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          sslConfig: {
            basicEncryption: {},
            encryptionAndServerValidation: {
              caCertificate: 'Test string',
              serverCertificateHostname: 'Test string',
            },
            encryptionNotEnforced: {},
          },
          username: 'Test string',
        },
        staticServiceIpConnectivity: {},
        updateTime: 'Test string',
      },
    );
    /** Use this method to delete a connection profile. */
    await gapi.client.datastream.projects.locations.connectionProfiles.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that's optionally supplied in the request. */
    await gapi.client.datastream.projects.locations.connectionProfiles.discover(
      {
        parent: 'Test string',
      },
      {
        connectionProfile: {
          bigqueryProfile: {},
          createTime: 'Test string',
          displayName: 'Test string',
          forwardSshConnectivity: {
            hostname: 'Test string',
            password: 'Test string',
            port: 42,
            privateKey: 'Test string',
            username: 'Test string',
          },
          gcsProfile: {
            bucket: 'Test string',
            rootPath: 'Test string',
          },
          labels: {
            A: 'Test string',
          },
          mongodbProfile: {
            hostAddresses: [
              {
                hostname: 'Test string',
                port: 42,
              },
            ],
            password: 'Test string',
            replicaSet: 'Test string',
            secretManagerStoredPassword: 'Test string',
            srvConnectionFormat: {},
            sslConfig: {
              caCertificate: 'Test string',
              caCertificateSet: true,
              clientCertificate: 'Test string',
              clientCertificateSet: true,
              clientKey: 'Test string',
              clientKeySet: true,
              secretManagerStoredClientKey: 'Test string',
            },
            standardConnectionFormat: {
              directConnection: true,
            },
            username: 'Test string',
          },
          mysqlProfile: {
            hostname: 'Test string',
            password: 'Test string',
            port: 42,
            secretManagerStoredPassword: 'Test string',
            sslConfig: {
              caCertificate: 'Test string',
              caCertificateSet: true,
              clientCertificate: 'Test string',
              clientCertificateSet: true,
              clientKey: 'Test string',
              clientKeySet: true,
            },
            username: 'Test string',
          },
          name: 'Test string',
          oracleProfile: {
            connectionAttributes: {
              A: 'Test string',
            },
            databaseService: 'Test string',
            hostname: 'Test string',
            oracleAsmConfig: {
              asmService: 'Test string',
              connectionAttributes: {
                A: 'Test string',
              },
              hostname: 'Test string',
              oracleSslConfig: {
                caCertificate: 'Test string',
                caCertificateSet: true,
                serverCertificateDistinguishedName: 'Test string',
              },
              password: 'Test string',
              port: 42,
              secretManagerStoredPassword: 'Test string',
              username: 'Test string',
            },
            oracleSslConfig: {
              caCertificate: 'Test string',
              caCertificateSet: true,
              serverCertificateDistinguishedName: 'Test string',
            },
            password: 'Test string',
            port: 42,
            secretManagerStoredPassword: 'Test string',
            username: 'Test string',
          },
          postgresqlProfile: {
            database: 'Test string',
            hostname: 'Test string',
            password: 'Test string',
            port: 42,
            secretManagerStoredPassword: 'Test string',
            sslConfig: {
              serverAndClientVerification: {
                caCertificate: 'Test string',
                clientCertificate: 'Test string',
                clientKey: 'Test string',
                serverCertificateHostname: 'Test string',
              },
              serverVerification: {
                caCertificate: 'Test string',
                serverCertificateHostname: 'Test string',
              },
            },
            username: 'Test string',
          },
          privateConnectivity: {
            privateConnection: 'Test string',
          },
          salesforceProfile: {
            domain: 'Test string',
            oauth2ClientCredentials: {
              clientId: 'Test string',
              clientSecret: 'Test string',
              secretManagerStoredClientSecret: 'Test string',
            },
            userCredentials: {
              password: 'Test string',
              secretManagerStoredPassword: 'Test string',
              secretManagerStoredSecurityToken: 'Test string',
              securityToken: 'Test string',
              username: 'Test string',
            },
          },
          satisfiesPzi: true,
          satisfiesPzs: true,
          sqlServerProfile: {
            database: 'Test string',
            hostname: 'Test string',
            password: 'Test string',
            port: 42,
            secretManagerStoredPassword: 'Test string',
            sslConfig: {
              basicEncryption: {},
              encryptionAndServerValidation: {
                caCertificate: 'Test string',
                serverCertificateHostname: 'Test string',
              },
              encryptionNotEnforced: {},
            },
            username: 'Test string',
          },
          staticServiceIpConnectivity: {},
          updateTime: 'Test string',
        },
        connectionProfileName: 'Test string',
        fullHierarchy: true,
        hierarchyDepth: 42,
        mongodbCluster: {
          databases: [
            {
              collections: [
                {
                  collection: 'Test string',
                  fields: [
                    {
                      field: 'Test string',
                    },
                  ],
                },
              ],
              database: 'Test string',
            },
          ],
        },
        mysqlRdbms: {
          mysqlDatabases: [
            {
              database: 'Test string',
              mysqlTables: [
                {
                  mysqlColumns: [
                    {
                      collation: 'Test string',
                      column: 'Test string',
                      dataType: 'Test string',
                      length: 42,
                      nullable: true,
                      ordinalPosition: 42,
                      precision: 42,
                      primaryKey: true,
                      scale: 42,
                    },
                  ],
                  table: 'Test string',
                },
              ],
            },
          ],
        },
        oracleRdbms: {
          oracleSchemas: [
            {
              oracleTables: [
                {
                  oracleColumns: [
                    {
                      column: 'Test string',
                      dataType: 'Test string',
                      encoding: 'Test string',
                      length: 42,
                      nullable: true,
                      ordinalPosition: 42,
                      precision: 42,
                      primaryKey: true,
                      scale: 42,
                    },
                  ],
                  table: 'Test string',
                },
              ],
              schema: 'Test string',
            },
          ],
        },
        postgresqlRdbms: {
          postgresqlSchemas: [
            {
              postgresqlTables: [
                {
                  postgresqlColumns: [
                    {
                      column: 'Test string',
                      dataType: 'Test string',
                      length: 42,
                      nullable: true,
                      ordinalPosition: 42,
                      precision: 42,
                      primaryKey: true,
                      scale: 42,
                    },
                  ],
                  table: 'Test string',
                },
              ],
              schema: 'Test string',
            },
          ],
        },
        salesforceOrg: {
          objects: [
            {
              fields: [
                {
                  dataType: 'Test string',
                  name: 'Test string',
                  nillable: true,
                },
              ],
              objectName: 'Test string',
            },
          ],
        },
        sqlServerRdbms: {
          schemas: [
            {
              schema: 'Test string',
              tables: [
                {
                  columns: [
                    {
                      column: 'Test string',
                      dataType: 'Test string',
                      length: 42,
                      nullable: true,
                      ordinalPosition: 42,
                      precision: 42,
                      primaryKey: true,
                      scale: 42,
                    },
                  ],
                  table: 'Test string',
                },
              ],
            },
          ],
        },
      },
    );
    /** Use this method to get details about a connection profile. */
    await gapi.client.datastream.projects.locations.connectionProfiles.get({
      name: 'Test string',
    });
    /** Use this method to list connection profiles created in a project and location. */
    await gapi.client.datastream.projects.locations.connectionProfiles.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Use this method to update the parameters of a connection profile. */
    await gapi.client.datastream.projects.locations.connectionProfiles.patch(
      {
        force: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        bigqueryProfile: {},
        createTime: 'Test string',
        displayName: 'Test string',
        forwardSshConnectivity: {
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          privateKey: 'Test string',
          username: 'Test string',
        },
        gcsProfile: {
          bucket: 'Test string',
          rootPath: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        mongodbProfile: {
          hostAddresses: [
            {
              hostname: 'Test string',
              port: 42,
            },
          ],
          password: 'Test string',
          replicaSet: 'Test string',
          secretManagerStoredPassword: 'Test string',
          srvConnectionFormat: {},
          sslConfig: {
            caCertificate: 'Test string',
            caCertificateSet: true,
            clientCertificate: 'Test string',
            clientCertificateSet: true,
            clientKey: 'Test string',
            clientKeySet: true,
            secretManagerStoredClientKey: 'Test string',
          },
          standardConnectionFormat: {
            directConnection: true,
          },
          username: 'Test string',
        },
        mysqlProfile: {
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          sslConfig: {
            caCertificate: 'Test string',
            caCertificateSet: true,
            clientCertificate: 'Test string',
            clientCertificateSet: true,
            clientKey: 'Test string',
            clientKeySet: true,
          },
          username: 'Test string',
        },
        name: 'Test string',
        oracleProfile: {
          connectionAttributes: {
            A: 'Test string',
          },
          databaseService: 'Test string',
          hostname: 'Test string',
          oracleAsmConfig: {
            asmService: 'Test string',
            connectionAttributes: {
              A: 'Test string',
            },
            hostname: 'Test string',
            oracleSslConfig: {
              caCertificate: 'Test string',
              caCertificateSet: true,
              serverCertificateDistinguishedName: 'Test string',
            },
            password: 'Test string',
            port: 42,
            secretManagerStoredPassword: 'Test string',
            username: 'Test string',
          },
          oracleSslConfig: {
            caCertificate: 'Test string',
            caCertificateSet: true,
            serverCertificateDistinguishedName: 'Test string',
          },
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          username: 'Test string',
        },
        postgresqlProfile: {
          database: 'Test string',
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          sslConfig: {
            serverAndClientVerification: {
              caCertificate: 'Test string',
              clientCertificate: 'Test string',
              clientKey: 'Test string',
              serverCertificateHostname: 'Test string',
            },
            serverVerification: {
              caCertificate: 'Test string',
              serverCertificateHostname: 'Test string',
            },
          },
          username: 'Test string',
        },
        privateConnectivity: {
          privateConnection: 'Test string',
        },
        salesforceProfile: {
          domain: 'Test string',
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: 'Test string',
            secretManagerStoredClientSecret: 'Test string',
          },
          userCredentials: {
            password: 'Test string',
            secretManagerStoredPassword: 'Test string',
            secretManagerStoredSecurityToken: 'Test string',
            securityToken: 'Test string',
            username: 'Test string',
          },
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        sqlServerProfile: {
          database: 'Test string',
          hostname: 'Test string',
          password: 'Test string',
          port: 42,
          secretManagerStoredPassword: 'Test string',
          sslConfig: {
            basicEncryption: {},
            encryptionAndServerValidation: {
              caCertificate: 'Test string',
              serverCertificateHostname: 'Test string',
            },
            encryptionNotEnforced: {},
          },
          username: 'Test string',
        },
        staticServiceIpConnectivity: {},
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.datastream.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.datastream.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.datastream.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.datastream.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Use this method to create a private connectivity configuration. */
    await gapi.client.datastream.projects.locations.privateConnections.create(
      {
        force: true,
        parent: 'Test string',
        privateConnectionId: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        error: {
          details: {
            A: 'Test string',
          },
          errorTime: 'Test string',
          errorUuid: 'Test string',
          message: 'Test string',
          reason: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        pscInterfaceConfig: {
          networkAttachment: 'Test string',
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        state: 'Test string',
        updateTime: 'Test string',
        vpcPeeringConfig: {
          subnet: 'Test string',
          vpc: 'Test string',
        },
      },
    );
    /** Use this method to delete a private connectivity configuration. */
    await gapi.client.datastream.projects.locations.privateConnections.delete({
      force: true,
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Use this method to get details about a private connectivity configuration. */
    await gapi.client.datastream.projects.locations.privateConnections.get({
      name: 'Test string',
    });
    /** Use this method to list private connectivity configurations in a project and location. */
    await gapi.client.datastream.projects.locations.privateConnections.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Use this method to create a route for a private connectivity configuration in a project and location. */
    await gapi.client.datastream.projects.locations.privateConnections.routes.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        routeId: 'Test string',
      },
      {
        createTime: 'Test string',
        destinationAddress: 'Test string',
        destinationPort: 42,
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Use this method to delete a route. */
    await gapi.client.datastream.projects.locations.privateConnections.routes.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Use this method to get details about a route. */
    await gapi.client.datastream.projects.locations.privateConnections.routes.get(
      {
        name: 'Test string',
      },
    );
    /** Use this method to list routes created for a private connectivity configuration in a project and location. */
    await gapi.client.datastream.projects.locations.privateConnections.routes.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Use this method to create a stream. */
    await gapi.client.datastream.projects.locations.streams.create(
      {
        force: true,
        parent: 'Test string',
        requestId: 'Test string',
        streamId: 'Test string',
        validateOnly: true,
      },
      {
        backfillAll: {
          mongodbExcludedObjects: {
            databases: [
              {
                collections: [
                  {
                    collection: 'Test string',
                    fields: [
                      {
                        field: 'Test string',
                      },
                    ],
                  },
                ],
                database: 'Test string',
              },
            ],
          },
          mysqlExcludedObjects: {
            mysqlDatabases: [
              {
                database: 'Test string',
                mysqlTables: [
                  {
                    mysqlColumns: [
                      {
                        collation: 'Test string',
                        column: 'Test string',
                        dataType: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
              },
            ],
          },
          oracleExcludedObjects: {
            oracleSchemas: [
              {
                oracleTables: [
                  {
                    oracleColumns: [
                      {
                        column: 'Test string',
                        dataType: 'Test string',
                        encoding: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
                schema: 'Test string',
              },
            ],
          },
          postgresqlExcludedObjects: {
            postgresqlSchemas: [
              {
                postgresqlTables: [
                  {
                    postgresqlColumns: [
                      {
                        column: 'Test string',
                        dataType: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
                schema: 'Test string',
              },
            ],
          },
          salesforceExcludedObjects: {
            objects: [
              {
                fields: [
                  {
                    dataType: 'Test string',
                    name: 'Test string',
                    nillable: true,
                  },
                ],
                objectName: 'Test string',
              },
            ],
          },
          sqlServerExcludedObjects: {
            schemas: [
              {
                schema: 'Test string',
                tables: [
                  {
                    columns: [
                      {
                        column: 'Test string',
                        dataType: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
              },
            ],
          },
        },
        backfillNone: {},
        createTime: 'Test string',
        customerManagedEncryptionKey: 'Test string',
        destinationConfig: {
          bigqueryDestinationConfig: {
            appendOnly: {},
            blmtConfig: {
              bucket: 'Test string',
              connectionName: 'Test string',
              fileFormat: 'Test string',
              rootPath: 'Test string',
              tableFormat: 'Test string',
            },
            dataFreshness: 'Test string',
            merge: {},
            singleTargetDataset: {
              datasetId: 'Test string',
            },
            sourceHierarchyDatasets: {
              datasetTemplate: {
                datasetIdPrefix: 'Test string',
                kmsKeyName: 'Test string',
                location: 'Test string',
              },
              projectId: 'Test string',
            },
          },
          destinationConnectionProfile: 'Test string',
          gcsDestinationConfig: {
            avroFileFormat: {},
            fileRotationInterval: 'Test string',
            fileRotationMb: 42,
            jsonFileFormat: {
              compression: 'Test string',
              schemaFileFormat: 'Test string',
            },
            path: 'Test string',
          },
        },
        displayName: 'Test string',
        errors: [
          {
            details: {
              A: 'Test string',
            },
            errorTime: 'Test string',
            errorUuid: 'Test string',
            message: 'Test string',
            reason: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        lastRecoveryTime: 'Test string',
        name: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        sourceConfig: {
          mongodbSourceConfig: {
            excludeObjects: {
              databases: [
                {
                  collections: [
                    {
                      collection: 'Test string',
                      fields: [
                        {
                          field: 'Test string',
                        },
                      ],
                    },
                  ],
                  database: 'Test string',
                },
              ],
            },
            includeObjects: {
              databases: [
                {
                  collections: [
                    {
                      collection: 'Test string',
                      fields: [
                        {
                          field: 'Test string',
                        },
                      ],
                    },
                  ],
                  database: 'Test string',
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
          },
          mysqlSourceConfig: {
            binaryLogPosition: {},
            excludeObjects: {
              mysqlDatabases: [
                {
                  database: 'Test string',
                  mysqlTables: [
                    {
                      mysqlColumns: [
                        {
                          collation: 'Test string',
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            gtid: {},
            includeObjects: {
              mysqlDatabases: [
                {
                  database: 'Test string',
                  mysqlTables: [
                    {
                      mysqlColumns: [
                        {
                          collation: 'Test string',
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
            maxConcurrentCdcTasks: 42,
          },
          oracleSourceConfig: {
            binaryLogParser: {
              logFileDirectories: {
                archivedLogDirectory: 'Test string',
                onlineLogDirectory: 'Test string',
              },
              oracleAsmLogFileAccess: {},
            },
            dropLargeObjects: {},
            excludeObjects: {
              oracleSchemas: [
                {
                  oracleTables: [
                    {
                      oracleColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          encoding: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            includeObjects: {
              oracleSchemas: [
                {
                  oracleTables: [
                    {
                      oracleColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          encoding: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            logMiner: {},
            maxConcurrentBackfillTasks: 42,
            maxConcurrentCdcTasks: 42,
            streamLargeObjects: {},
          },
          postgresqlSourceConfig: {
            excludeObjects: {
              postgresqlSchemas: [
                {
                  postgresqlTables: [
                    {
                      postgresqlColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            includeObjects: {
              postgresqlSchemas: [
                {
                  postgresqlTables: [
                    {
                      postgresqlColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
            publication: 'Test string',
            replicationSlot: 'Test string',
          },
          salesforceSourceConfig: {
            excludeObjects: {
              objects: [
                {
                  fields: [
                    {
                      dataType: 'Test string',
                      name: 'Test string',
                      nillable: true,
                    },
                  ],
                  objectName: 'Test string',
                },
              ],
            },
            includeObjects: {
              objects: [
                {
                  fields: [
                    {
                      dataType: 'Test string',
                      name: 'Test string',
                      nillable: true,
                    },
                  ],
                  objectName: 'Test string',
                },
              ],
            },
            pollingInterval: 'Test string',
          },
          sourceConnectionProfile: 'Test string',
          sqlServerSourceConfig: {
            changeTables: {},
            excludeObjects: {
              schemas: [
                {
                  schema: 'Test string',
                  tables: [
                    {
                      columns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            includeObjects: {
              schemas: [
                {
                  schema: 'Test string',
                  tables: [
                    {
                      columns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
            maxConcurrentCdcTasks: 42,
            transactionLogs: {},
          },
        },
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Use this method to delete a stream. */
    await gapi.client.datastream.projects.locations.streams.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Use this method to get details about a stream. */
    await gapi.client.datastream.projects.locations.streams.get({
      name: 'Test string',
    });
    /** Use this method to list streams in a project and location. */
    await gapi.client.datastream.projects.locations.streams.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Use this method to update the configuration of a stream. */
    await gapi.client.datastream.projects.locations.streams.patch(
      {
        force: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        backfillAll: {
          mongodbExcludedObjects: {
            databases: [
              {
                collections: [
                  {
                    collection: 'Test string',
                    fields: [
                      {
                        field: 'Test string',
                      },
                    ],
                  },
                ],
                database: 'Test string',
              },
            ],
          },
          mysqlExcludedObjects: {
            mysqlDatabases: [
              {
                database: 'Test string',
                mysqlTables: [
                  {
                    mysqlColumns: [
                      {
                        collation: 'Test string',
                        column: 'Test string',
                        dataType: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
              },
            ],
          },
          oracleExcludedObjects: {
            oracleSchemas: [
              {
                oracleTables: [
                  {
                    oracleColumns: [
                      {
                        column: 'Test string',
                        dataType: 'Test string',
                        encoding: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
                schema: 'Test string',
              },
            ],
          },
          postgresqlExcludedObjects: {
            postgresqlSchemas: [
              {
                postgresqlTables: [
                  {
                    postgresqlColumns: [
                      {
                        column: 'Test string',
                        dataType: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
                schema: 'Test string',
              },
            ],
          },
          salesforceExcludedObjects: {
            objects: [
              {
                fields: [
                  {
                    dataType: 'Test string',
                    name: 'Test string',
                    nillable: true,
                  },
                ],
                objectName: 'Test string',
              },
            ],
          },
          sqlServerExcludedObjects: {
            schemas: [
              {
                schema: 'Test string',
                tables: [
                  {
                    columns: [
                      {
                        column: 'Test string',
                        dataType: 'Test string',
                        length: 42,
                        nullable: true,
                        ordinalPosition: 42,
                        precision: 42,
                        primaryKey: true,
                        scale: 42,
                      },
                    ],
                    table: 'Test string',
                  },
                ],
              },
            ],
          },
        },
        backfillNone: {},
        createTime: 'Test string',
        customerManagedEncryptionKey: 'Test string',
        destinationConfig: {
          bigqueryDestinationConfig: {
            appendOnly: {},
            blmtConfig: {
              bucket: 'Test string',
              connectionName: 'Test string',
              fileFormat: 'Test string',
              rootPath: 'Test string',
              tableFormat: 'Test string',
            },
            dataFreshness: 'Test string',
            merge: {},
            singleTargetDataset: {
              datasetId: 'Test string',
            },
            sourceHierarchyDatasets: {
              datasetTemplate: {
                datasetIdPrefix: 'Test string',
                kmsKeyName: 'Test string',
                location: 'Test string',
              },
              projectId: 'Test string',
            },
          },
          destinationConnectionProfile: 'Test string',
          gcsDestinationConfig: {
            avroFileFormat: {},
            fileRotationInterval: 'Test string',
            fileRotationMb: 42,
            jsonFileFormat: {
              compression: 'Test string',
              schemaFileFormat: 'Test string',
            },
            path: 'Test string',
          },
        },
        displayName: 'Test string',
        errors: [
          {
            details: {
              A: 'Test string',
            },
            errorTime: 'Test string',
            errorUuid: 'Test string',
            message: 'Test string',
            reason: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        lastRecoveryTime: 'Test string',
        name: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        sourceConfig: {
          mongodbSourceConfig: {
            excludeObjects: {
              databases: [
                {
                  collections: [
                    {
                      collection: 'Test string',
                      fields: [
                        {
                          field: 'Test string',
                        },
                      ],
                    },
                  ],
                  database: 'Test string',
                },
              ],
            },
            includeObjects: {
              databases: [
                {
                  collections: [
                    {
                      collection: 'Test string',
                      fields: [
                        {
                          field: 'Test string',
                        },
                      ],
                    },
                  ],
                  database: 'Test string',
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
          },
          mysqlSourceConfig: {
            binaryLogPosition: {},
            excludeObjects: {
              mysqlDatabases: [
                {
                  database: 'Test string',
                  mysqlTables: [
                    {
                      mysqlColumns: [
                        {
                          collation: 'Test string',
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            gtid: {},
            includeObjects: {
              mysqlDatabases: [
                {
                  database: 'Test string',
                  mysqlTables: [
                    {
                      mysqlColumns: [
                        {
                          collation: 'Test string',
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
            maxConcurrentCdcTasks: 42,
          },
          oracleSourceConfig: {
            binaryLogParser: {
              logFileDirectories: {
                archivedLogDirectory: 'Test string',
                onlineLogDirectory: 'Test string',
              },
              oracleAsmLogFileAccess: {},
            },
            dropLargeObjects: {},
            excludeObjects: {
              oracleSchemas: [
                {
                  oracleTables: [
                    {
                      oracleColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          encoding: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            includeObjects: {
              oracleSchemas: [
                {
                  oracleTables: [
                    {
                      oracleColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          encoding: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            logMiner: {},
            maxConcurrentBackfillTasks: 42,
            maxConcurrentCdcTasks: 42,
            streamLargeObjects: {},
          },
          postgresqlSourceConfig: {
            excludeObjects: {
              postgresqlSchemas: [
                {
                  postgresqlTables: [
                    {
                      postgresqlColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            includeObjects: {
              postgresqlSchemas: [
                {
                  postgresqlTables: [
                    {
                      postgresqlColumns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                  schema: 'Test string',
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
            publication: 'Test string',
            replicationSlot: 'Test string',
          },
          salesforceSourceConfig: {
            excludeObjects: {
              objects: [
                {
                  fields: [
                    {
                      dataType: 'Test string',
                      name: 'Test string',
                      nillable: true,
                    },
                  ],
                  objectName: 'Test string',
                },
              ],
            },
            includeObjects: {
              objects: [
                {
                  fields: [
                    {
                      dataType: 'Test string',
                      name: 'Test string',
                      nillable: true,
                    },
                  ],
                  objectName: 'Test string',
                },
              ],
            },
            pollingInterval: 'Test string',
          },
          sourceConnectionProfile: 'Test string',
          sqlServerSourceConfig: {
            changeTables: {},
            excludeObjects: {
              schemas: [
                {
                  schema: 'Test string',
                  tables: [
                    {
                      columns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            includeObjects: {
              schemas: [
                {
                  schema: 'Test string',
                  tables: [
                    {
                      columns: [
                        {
                          column: 'Test string',
                          dataType: 'Test string',
                          length: 42,
                          nullable: true,
                          ordinalPosition: 42,
                          precision: 42,
                          primaryKey: true,
                          scale: 42,
                        },
                      ],
                      table: 'Test string',
                    },
                  ],
                },
              ],
            },
            maxConcurrentBackfillTasks: 42,
            maxConcurrentCdcTasks: 42,
            transactionLogs: {},
          },
        },
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Use this method to start, resume or recover a stream with a non default CDC strategy. */
    await gapi.client.datastream.projects.locations.streams.run(
      {
        name: 'Test string',
      },
      {
        cdcStrategy: {
          mostRecentStartPosition: {},
          nextAvailableStartPosition: {},
          specificStartPosition: {
            mysqlGtidPosition: {
              gtidSet: 'Test string',
            },
            mysqlLogPosition: {
              logFile: 'Test string',
              logPosition: 42,
            },
            oracleScnPosition: {
              scn: 'Test string',
            },
            sqlServerLsnPosition: {
              lsn: 'Test string',
            },
          },
        },
        force: true,
      },
    );
    /** Use this method to get details about a stream object. */
    await gapi.client.datastream.projects.locations.streams.objects.get({
      name: 'Test string',
    });
    /** Use this method to list the objects of a specific stream. */
    await gapi.client.datastream.projects.locations.streams.objects.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Use this method to look up a stream object by its source object identifier. */
    await gapi.client.datastream.projects.locations.streams.objects.lookup(
      {
        parent: 'Test string',
      },
      {
        sourceObjectIdentifier: {
          mongodbIdentifier: {
            collection: 'Test string',
            database: 'Test string',
          },
          mysqlIdentifier: {
            database: 'Test string',
            table: 'Test string',
          },
          oracleIdentifier: {
            schema: 'Test string',
            table: 'Test string',
          },
          postgresqlIdentifier: {
            schema: 'Test string',
            table: 'Test string',
          },
          salesforceIdentifier: {
            objectName: 'Test string',
          },
          sqlServerIdentifier: {
            schema: 'Test string',
            table: 'Test string',
          },
        },
      },
    );
    /** Use this method to start a backfill job for the specified stream object. */
    await gapi.client.datastream.projects.locations.streams.objects.startBackfillJob(
      {
        object: 'Test string',
      },
      {},
    );
    /** Use this method to stop a backfill job for the specified stream object. */
    await gapi.client.datastream.projects.locations.streams.objects.stopBackfillJob(
      {
        object: 'Test string',
      },
      {},
    );
  }
});
