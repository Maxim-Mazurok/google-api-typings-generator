/* This is stub file for gapi.client.securitycenter-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240622

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://securitycenter.googleapis.com/$discovery/rest?version=v1beta2'
  );
  /** now we can use gapi.client.securitycenter */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.folders.getContainerThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the EventThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetEventThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateEventThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.folders.getEventThreatDetectionSettings({
      name: 'Test string',
    });
    /** Get the RapidVulnerabilityDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetRapidVulnerabilityDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateRapidVulnerabilityDetectionSettings for this purpose. */
    await gapi.client.securitycenter.folders.getRapidVulnerabilityDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the SecurityCenterSettings resource. */
    await gapi.client.securitycenter.folders.getSecurityCenterSettings({
      name: 'Test string',
    });
    /** Get the SecurityHealthAnalyticsSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetSecurityHealthAnalyticsSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateSecurityHealthAnalyticsSettings for this purpose. */
    await gapi.client.securitycenter.folders.getSecurityHealthAnalyticsSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the VirtualMachineThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetVirtualMachineThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateVirtualMachineThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.folders.getVirtualMachineThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the WebSecurityScannerSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetWebSecurityScannerSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateWebSecurityScannerSettings for this purpose. */
    await gapi.client.securitycenter.folders.getWebSecurityScannerSettings({
      name: 'Test string',
    });
    /** Update the ContainerThreatDetectionSettings resource. */
    await gapi.client.securitycenter.folders.updateContainerThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the EventThreatDetectionSettings resource. */
    await gapi.client.securitycenter.folders.updateEventThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the RapidVulnerabilityDetectionSettings resource. */
    await gapi.client.securitycenter.folders.updateRapidVulnerabilityDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the SecurityHealthAnalyticsSettings resource. */
    await gapi.client.securitycenter.folders.updateSecurityHealthAnalyticsSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the VirtualMachineThreatDetectionSettings resource. */
    await gapi.client.securitycenter.folders.updateVirtualMachineThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the WebSecurityScannerSettings resource. */
    await gapi.client.securitycenter.folders.updateWebSecurityScannerSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.folders.containerThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective EventThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective RapidVulnerabilityDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.folders.rapidVulnerabilityDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective VirtualMachineThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.folders.virtualMachineThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.folders.webSecurityScannerSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.organizations.getContainerThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the EventThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetEventThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateEventThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.organizations.getEventThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the RapidVulnerabilityDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetRapidVulnerabilityDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateRapidVulnerabilityDetectionSettings for this purpose. */
    await gapi.client.securitycenter.organizations.getRapidVulnerabilityDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the SecurityCenterSettings resource. */
    await gapi.client.securitycenter.organizations.getSecurityCenterSettings({
      name: 'Test string',
    });
    /** Get the SecurityHealthAnalyticsSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetSecurityHealthAnalyticsSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateSecurityHealthAnalyticsSettings for this purpose. */
    await gapi.client.securitycenter.organizations.getSecurityHealthAnalyticsSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the Subscription resource. */
    await gapi.client.securitycenter.organizations.getSubscription({
      name: 'Test string',
    });
    /** Get the VirtualMachineThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetVirtualMachineThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateVirtualMachineThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.organizations.getVirtualMachineThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the WebSecurityScannerSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetWebSecurityScannerSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateWebSecurityScannerSettings for this purpose. */
    await gapi.client.securitycenter.organizations.getWebSecurityScannerSettings(
      {
        name: 'Test string',
      }
    );
    /** Update the ContainerThreatDetectionSettings resource. */
    await gapi.client.securitycenter.organizations.updateContainerThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the EventThreatDetectionSettings resource. */
    await gapi.client.securitycenter.organizations.updateEventThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the RapidVulnerabilityDetectionSettings resource. */
    await gapi.client.securitycenter.organizations.updateRapidVulnerabilityDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the SecurityHealthAnalyticsSettings resource. */
    await gapi.client.securitycenter.organizations.updateSecurityHealthAnalyticsSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the VirtualMachineThreatDetectionSettings resource. */
    await gapi.client.securitycenter.organizations.updateVirtualMachineThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the WebSecurityScannerSettings resource. */
    await gapi.client.securitycenter.organizations.updateWebSecurityScannerSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.organizations.containerThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective EventThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective RapidVulnerabilityDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.organizations.rapidVulnerabilityDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective VirtualMachineThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.organizations.virtualMachineThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.organizations.webSecurityScannerSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.projects.getContainerThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the EventThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetEventThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateEventThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.projects.getEventThreatDetectionSettings({
      name: 'Test string',
    });
    /** Get the RapidVulnerabilityDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetRapidVulnerabilityDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateRapidVulnerabilityDetectionSettings for this purpose. */
    await gapi.client.securitycenter.projects.getRapidVulnerabilityDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the SecurityCenterSettings resource. */
    await gapi.client.securitycenter.projects.getSecurityCenterSettings({
      name: 'Test string',
    });
    /** Get the SecurityHealthAnalyticsSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetSecurityHealthAnalyticsSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateSecurityHealthAnalyticsSettings for this purpose. */
    await gapi.client.securitycenter.projects.getSecurityHealthAnalyticsSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the VirtualMachineThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetVirtualMachineThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateVirtualMachineThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.projects.getVirtualMachineThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Get the WebSecurityScannerSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetWebSecurityScannerSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateWebSecurityScannerSettings for this purpose. */
    await gapi.client.securitycenter.projects.getWebSecurityScannerSettings({
      name: 'Test string',
    });
    /** Update the ContainerThreatDetectionSettings resource. */
    await gapi.client.securitycenter.projects.updateContainerThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the EventThreatDetectionSettings resource. */
    await gapi.client.securitycenter.projects.updateEventThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the RapidVulnerabilityDetectionSettings resource. */
    await gapi.client.securitycenter.projects.updateRapidVulnerabilityDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the SecurityHealthAnalyticsSettings resource. */
    await gapi.client.securitycenter.projects.updateSecurityHealthAnalyticsSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the VirtualMachineThreatDetectionSettings resource. */
    await gapi.client.securitycenter.projects.updateVirtualMachineThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Update the WebSecurityScannerSettings resource. */
    await gapi.client.securitycenter.projects.updateWebSecurityScannerSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.containerThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective EventThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Get the ContainerThreatDetectionSettings resource. In the returned settings response, a missing field only indicates that it was not explicitly set, so no assumption should be made about these fields. In other words, GetContainerThreatDetectionSettings does not calculate the effective service settings for the resource, which accounts for inherited settings and defaults. Instead, use CalculateContainerThreatDetectionSettings for this purpose. */
    await gapi.client.securitycenter.projects.locations.clusters.getContainerThreatDetectionSettings(
      {
        name: 'Test string',
      }
    );
    /** Update the ContainerThreatDetectionSettings resource. */
    await gapi.client.securitycenter.projects.locations.clusters.updateContainerThreatDetectionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        modules: {
          A: {
            moduleEnablementState: 'Test string',
            value: {
              A: 42,
            },
          },
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        serviceEnablementState: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.locations.clusters.containerThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective RapidVulnerabilityDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.rapidVulnerabilityDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective VirtualMachineThreatDetectionSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.virtualMachineThreatDetectionSettings.calculate(
      {
        name: 'Test string',
      }
    );
    /** Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings. Settings provided closer to the target resource take precedence over those further away (e.g. folder will override organization level settings). The default SCC setting for the detector service defaults can be overridden at organization, folder and project levels. No assumptions should be made about the SCC defaults as it is considered an internal implementation detail. */
    await gapi.client.securitycenter.projects.webSecurityScannerSettings.calculate(
      {
        name: 'Test string',
      }
    );
  }
});
