/* This is stub file for gapi.client.file-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250430

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://file.googleapis.com/$discovery/rest?version=v1beta1',
  );
  /** now we can use gapi.client.file */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.file.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.file.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a backup. */
    await gapi.client.file.projects.locations.backups.create(
      {
        backupId: 'Test string',
        parent: 'Test string',
      },
      {
        capacityGb: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        downloadBytes: 'Test string',
        fileSystemProtocol: 'Test string',
        kmsKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        sourceFileShare: 'Test string',
        sourceInstance: 'Test string',
        sourceInstanceTier: 'Test string',
        state: 'Test string',
        storageBytes: 'Test string',
        tags: {
          A: 'Test string',
        },
      },
    );
    /** Deletes a backup. */
    await gapi.client.file.projects.locations.backups.delete({
      name: 'Test string',
    });
    /** Gets the details of a specific backup. */
    await gapi.client.file.projects.locations.backups.get({
      name: 'Test string',
    });
    /** Lists all backups in a project for either a specified location or for all locations. */
    await gapi.client.file.projects.locations.backups.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the settings of a specific backup. */
    await gapi.client.file.projects.locations.backups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        capacityGb: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        downloadBytes: 'Test string',
        fileSystemProtocol: 'Test string',
        kmsKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        sourceFileShare: 'Test string',
        sourceInstance: 'Test string',
        sourceInstanceTier: 'Test string',
        state: 'Test string',
        storageBytes: 'Test string',
        tags: {
          A: 'Test string',
        },
      },
    );
    /** Creates an instance. When creating from a backup, the capacity of the new instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier). */
    await gapi.client.file.projects.locations.instances.create(
      {
        instanceId: 'Test string',
        parent: 'Test string',
      },
      {
        capacityGb: 'Test string',
        capacityStepSizeGb: 'Test string',
        createTime: 'Test string',
        customPerformanceSupported: true,
        deletionProtectionEnabled: true,
        deletionProtectionReason: 'Test string',
        description: 'Test string',
        directoryServices: {
          ldap: {
            domain: 'Test string',
            groupsOu: 'Test string',
            servers: ['Test string'],
            usersOu: 'Test string',
          },
          managedActiveDirectory: {
            computer: 'Test string',
            domain: 'Test string',
          },
        },
        etag: 'Test string',
        fileShares: [
          {
            capacityGb: 'Test string',
            name: 'Test string',
            nfsExportOptions: [
              {
                accessMode: 'Test string',
                anonGid: 'Test string',
                anonUid: 'Test string',
                ipRanges: ['Test string'],
                network: 'Test string',
                securityFlavors: ['Test string'],
                squashMode: 'Test string',
              },
            ],
            sourceBackup: 'Test string',
          },
        ],
        kmsKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        maxCapacityGb: 'Test string',
        maxShareCount: 'Test string',
        multiShareEnabled: true,
        name: 'Test string',
        networks: [
          {
            connectMode: 'Test string',
            ipAddresses: ['Test string'],
            modes: ['Test string'],
            network: 'Test string',
            pscConfig: {
              endpointProject: 'Test string',
            },
            reservedIpRange: 'Test string',
          },
        ],
        performanceConfig: {
          fixedIops: {
            maxIops: 'Test string',
          },
          iopsPerTb: {
            maxIopsPerTb: 'Test string',
          },
        },
        performanceLimits: {
          maxIops: 'Test string',
          maxReadIops: 'Test string',
          maxReadThroughputBps: 'Test string',
          maxWriteIops: 'Test string',
          maxWriteThroughputBps: 'Test string',
        },
        protocol: 'Test string',
        replication: {
          replicas: [
            {
              lastActiveSyncTime: 'Test string',
              peerInstance: 'Test string',
              state: 'Test string',
              stateReasons: ['Test string'],
            },
          ],
          role: 'Test string',
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        state: 'Test string',
        statusMessage: 'Test string',
        suspensionReasons: ['Test string'],
        tags: {
          A: 'Test string',
        },
        tier: 'Test string',
      },
    );
    /** Deletes an instance. */
    await gapi.client.file.projects.locations.instances.delete({
      force: true,
      name: 'Test string',
    });
    /** Gets the details of a specific instance. */
    await gapi.client.file.projects.locations.instances.get({
      name: 'Test string',
    });
    /** Lists all instances in a project for either a specified location or for all locations. */
    await gapi.client.file.projects.locations.instances.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the settings of a specific instance. */
    await gapi.client.file.projects.locations.instances.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        capacityGb: 'Test string',
        capacityStepSizeGb: 'Test string',
        createTime: 'Test string',
        customPerformanceSupported: true,
        deletionProtectionEnabled: true,
        deletionProtectionReason: 'Test string',
        description: 'Test string',
        directoryServices: {
          ldap: {
            domain: 'Test string',
            groupsOu: 'Test string',
            servers: ['Test string'],
            usersOu: 'Test string',
          },
          managedActiveDirectory: {
            computer: 'Test string',
            domain: 'Test string',
          },
        },
        etag: 'Test string',
        fileShares: [
          {
            capacityGb: 'Test string',
            name: 'Test string',
            nfsExportOptions: [
              {
                accessMode: 'Test string',
                anonGid: 'Test string',
                anonUid: 'Test string',
                ipRanges: ['Test string'],
                network: 'Test string',
                securityFlavors: ['Test string'],
                squashMode: 'Test string',
              },
            ],
            sourceBackup: 'Test string',
          },
        ],
        kmsKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        maxCapacityGb: 'Test string',
        maxShareCount: 'Test string',
        multiShareEnabled: true,
        name: 'Test string',
        networks: [
          {
            connectMode: 'Test string',
            ipAddresses: ['Test string'],
            modes: ['Test string'],
            network: 'Test string',
            pscConfig: {
              endpointProject: 'Test string',
            },
            reservedIpRange: 'Test string',
          },
        ],
        performanceConfig: {
          fixedIops: {
            maxIops: 'Test string',
          },
          iopsPerTb: {
            maxIopsPerTb: 'Test string',
          },
        },
        performanceLimits: {
          maxIops: 'Test string',
          maxReadIops: 'Test string',
          maxReadThroughputBps: 'Test string',
          maxWriteIops: 'Test string',
          maxWriteThroughputBps: 'Test string',
        },
        protocol: 'Test string',
        replication: {
          replicas: [
            {
              lastActiveSyncTime: 'Test string',
              peerInstance: 'Test string',
              state: 'Test string',
              stateReasons: ['Test string'],
            },
          ],
          role: 'Test string',
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        state: 'Test string',
        statusMessage: 'Test string',
        suspensionReasons: ['Test string'],
        tags: {
          A: 'Test string',
        },
        tier: 'Test string',
      },
    );
    /** Promote the standby instance (replica). */
    await gapi.client.file.projects.locations.instances.promoteReplica(
      {
        name: 'Test string',
      },
      {
        peerInstance: 'Test string',
      },
    );
    /** Restores an existing instance's file share from a backup. The capacity of the instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier). */
    await gapi.client.file.projects.locations.instances.restore(
      {
        name: 'Test string',
      },
      {
        fileShare: 'Test string',
        sourceBackup: 'Test string',
        sourceSnapshot: 'Test string',
      },
    );
    /** Revert an existing instance's file system to a specified snapshot. */
    await gapi.client.file.projects.locations.instances.revert(
      {
        name: 'Test string',
      },
      {
        targetSnapshotId: 'Test string',
      },
    );
    /** Creates a share. */
    await gapi.client.file.projects.locations.instances.shares.create(
      {
        parent: 'Test string',
        shareId: 'Test string',
      },
      {
        backup: 'Test string',
        capacityGb: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        mountName: 'Test string',
        name: 'Test string',
        nfsExportOptions: [
          {
            accessMode: 'Test string',
            anonGid: 'Test string',
            anonUid: 'Test string',
            ipRanges: ['Test string'],
            network: 'Test string',
            securityFlavors: ['Test string'],
            squashMode: 'Test string',
          },
        ],
        state: 'Test string',
      },
    );
    /** Deletes a share. */
    await gapi.client.file.projects.locations.instances.shares.delete({
      name: 'Test string',
    });
    /** Gets the details of a specific share. */
    await gapi.client.file.projects.locations.instances.shares.get({
      name: 'Test string',
    });
    /** Lists all shares for a specified instance. */
    await gapi.client.file.projects.locations.instances.shares.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the settings of a specific share. */
    await gapi.client.file.projects.locations.instances.shares.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        backup: 'Test string',
        capacityGb: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        mountName: 'Test string',
        name: 'Test string',
        nfsExportOptions: [
          {
            accessMode: 'Test string',
            anonGid: 'Test string',
            anonUid: 'Test string',
            ipRanges: ['Test string'],
            network: 'Test string',
            securityFlavors: ['Test string'],
            squashMode: 'Test string',
          },
        ],
        state: 'Test string',
      },
    );
    /** Creates a snapshot. */
    await gapi.client.file.projects.locations.instances.snapshots.create(
      {
        parent: 'Test string',
        snapshotId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filesystemUsedBytes: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        tags: {
          A: 'Test string',
        },
      },
    );
    /** Deletes a snapshot. */
    await gapi.client.file.projects.locations.instances.snapshots.delete({
      name: 'Test string',
    });
    /** Gets the details of a specific snapshot. */
    await gapi.client.file.projects.locations.instances.snapshots.get({
      name: 'Test string',
    });
    /** Lists all snapshots in a project for either a specified location or for all locations. */
    await gapi.client.file.projects.locations.instances.snapshots.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      returnPartialSuccess: true,
    });
    /** Updates the settings of a specific snapshot. */
    await gapi.client.file.projects.locations.instances.snapshots.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filesystemUsedBytes: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        tags: {
          A: 'Test string',
        },
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.file.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.file.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.file.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.file.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
