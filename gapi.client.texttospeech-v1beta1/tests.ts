/* This is stub file for gapi.client.texttospeech-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250114

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://texttospeech.googleapis.com/$discovery/rest?version=v1beta1'
  );
  /** now we can use gapi.client.texttospeech */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Synthesizes long form text asynchronously. */
    await gapi.client.texttospeech.projects.locations.synthesizeLongAudio(
      {
        parent: 'Test string',
      },
      {
        audioConfig: {
          audioEncoding: 'Test string',
          effectsProfileId: ['Test string'],
          pitch: 42,
          sampleRateHertz: 42,
          speakingRate: 42,
          volumeGainDb: 42,
        },
        input: {
          customPronunciations: {
            pronunciations: [
              {
                phoneticEncoding: 'Test string',
                phrase: 'Test string',
                pronunciation: 'Test string',
              },
            ],
          },
          multiSpeakerMarkup: {
            turns: [
              {
                speaker: 'Test string',
                text: 'Test string',
              },
            ],
          },
          ssml: 'Test string',
          text: 'Test string',
        },
        outputGcsUri: 'Test string',
        voice: {
          customVoice: {
            model: 'Test string',
            reportedUsage: 'Test string',
          },
          languageCode: 'Test string',
          name: 'Test string',
          ssmlGender: 'Test string',
          voiceClone: {
            voiceCloningKey: 'Test string',
          },
        },
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.texttospeech.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.texttospeech.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Synthesizes speech synchronously: receive results after all text input has been processed. */
    await gapi.client.texttospeech.text.synthesize(
      {},
      {
        advancedVoiceOptions: {
          lowLatencyJourneySynthesis: true,
        },
        audioConfig: {
          audioEncoding: 'Test string',
          effectsProfileId: ['Test string'],
          pitch: 42,
          sampleRateHertz: 42,
          speakingRate: 42,
          volumeGainDb: 42,
        },
        enableTimePointing: ['Test string'],
        input: {
          customPronunciations: {
            pronunciations: [
              {
                phoneticEncoding: 'Test string',
                phrase: 'Test string',
                pronunciation: 'Test string',
              },
            ],
          },
          multiSpeakerMarkup: {
            turns: [
              {
                speaker: 'Test string',
                text: 'Test string',
              },
            ],
          },
          ssml: 'Test string',
          text: 'Test string',
        },
        voice: {
          customVoice: {
            model: 'Test string',
            reportedUsage: 'Test string',
          },
          languageCode: 'Test string',
          name: 'Test string',
          ssmlGender: 'Test string',
          voiceClone: {
            voiceCloningKey: 'Test string',
          },
        },
      }
    );
    /** Returns a list of Voice supported for synthesis. */
    await gapi.client.texttospeech.voices.list({
      languageCode: 'Test string',
    });
  }
});
