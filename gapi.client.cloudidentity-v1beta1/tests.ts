/* This is stub file for gapi.client.cloudidentity-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230207

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://cloudidentity.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.cloudidentity */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** Private Service: https://www.googleapis.com/auth/cloud-identity.devices */
        'https://www.googleapis.com/auth/cloud-identity.devices',
        /** See your device details */
        'https://www.googleapis.com/auth/cloud-identity.devices.lookup',
        /** Private Service: https://www.googleapis.com/auth/cloud-identity.devices.readonly */
        'https://www.googleapis.com/auth/cloud-identity.devices.readonly',
        /** See, change, create, and delete any of the Cloud Identity Groups that you can access, including the members of each group */
        'https://www.googleapis.com/auth/cloud-identity.groups',
        /** See any Cloud Identity Groups that you can access, including group members and their emails */
        'https://www.googleapis.com/auth/cloud-identity.groups.readonly',
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Cancels a UserInvitation that was already sent. */
        await gapi.client.cloudidentity.customers.userinvitations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Retrieves a UserInvitation resource. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay
         * also applies to newly-verified domains.
         */
        await gapi.client.cloudidentity.customers.userinvitations.get({
            name: "Test string",
        });
        /**
         * Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer
         * account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both
         * conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.
         */
        await gapi.client.cloudidentity.customers.userinvitations.isInvitableUser({
            name: "Test string",
        });
        /**
         * Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result.
         * This delay also applies to newly-verified domains.
         */
        await gapi.client.cloudidentity.customers.userinvitations.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and
         * `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the
         * unmanaged email address and IsInvitableUser==True.
         */
        await gapi.client.cloudidentity.customers.userinvitations.send({
            name: "Test string",
        }, {
        });
        /** Cancels an unfinished device wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped. */
        await gapi.client.cloudidentity.devices.cancelWipe({
            name: "Test string",
        }, {
            customer: "Test string",
        });
        /**
         * Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise
         * Plus, Enterprise for Education, and Cloud Identity Premium
         */
        await gapi.client.cloudidentity.devices.create({
        }, {
            customer: "Test string",
            device: {
                androidSpecificAttributes: {
                    enabledUnknownSources: true,
                    ownerProfileAccount: true,
                    ownershipPrivilege: "Test string",
                    supportsWorkProfile: true,
                },
                assetTag: "Test string",
                basebandVersion: "Test string",
                bootloaderVersion: "Test string",
                brand: "Test string",
                buildNumber: "Test string",
                clientTypes: [
                    "Test string"
                ],
                compromisedState: "Test string",
                createTime: "Test string",
                deviceId: "Test string",
                deviceType: "Test string",
                enabledDeveloperOptions: true,
                enabledUsbDebugging: true,
                encryptionState: "Test string",
                endpointVerificationSpecificAttributes: {
                    certificateAttributes: [
                        {
                            certificateTemplate: {
                                id: "Test string",
                                majorVersion: 42,
                                minorVersion: 42,
                            },
                            fingerprint: "Test string",
                            issuer: "Test string",
                            serialNumber: "Test string",
                            subject: "Test string",
                            thumbprint: "Test string",
                            validationState: "Test string",
                            validityExpirationTime: "Test string",
                            validityStartTime: "Test string",
                        }
                    ],
                },
                hostname: "Test string",
                imei: "Test string",
                kernelVersion: "Test string",
                lastSyncTime: "Test string",
                managementState: "Test string",
                manufacturer: "Test string",
                meid: "Test string",
                model: "Test string",
                name: "Test string",
                networkOperator: "Test string",
                osVersion: "Test string",
                otherAccounts: [
                    "Test string"
                ],
                ownerType: "Test string",
                releaseVersion: "Test string",
                securityPatchTime: "Test string",
                serialNumber: "Test string",
                wifiMacAddresses: [
                    "Test string"
                ],
            },
        });
        /** Deletes the specified device. */
        await gapi.client.cloudidentity.devices.delete({
            customer: "Test string",
            name: "Test string",
        });
        /** Retrieves the specified device. */
        await gapi.client.cloudidentity.devices.get({
            customer: "Test string",
            name: "Test string",
        });
        /** Lists/Searches devices. */
        await gapi.client.cloudidentity.devices.list({
            customer: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            view: "Test string",
        });
        /** Wipes all data on the specified device. */
        await gapi.client.cloudidentity.devices.wipe({
            name: "Test string",
        }, {
            customer: "Test string",
            removeResetLock: true,
        });
        /** Approves device to access user data. */
        await gapi.client.cloudidentity.devices.deviceUsers.approve({
            name: "Test string",
        }, {
            customer: "Test string",
        });
        /** Blocks device from accessing user data */
        await gapi.client.cloudidentity.devices.deviceUsers.block({
            name: "Test string",
        }, {
            customer: "Test string",
        });
        /** Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped. */
        await gapi.client.cloudidentity.devices.deviceUsers.cancelWipe({
            name: "Test string",
        }, {
            customer: "Test string",
        });
        /** Deletes the specified DeviceUser. This also revokes the user's access to device data. */
        await gapi.client.cloudidentity.devices.deviceUsers.delete({
            customer: "Test string",
            name: "Test string",
        });
        /** Retrieves the specified DeviceUser */
        await gapi.client.cloudidentity.devices.deviceUsers.get({
            customer: "Test string",
            name: "Test string",
        });
        /** Lists/Searches DeviceUsers. */
        await gapi.client.cloudidentity.devices.deviceUsers.list({
            customer: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user
         * credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are
         * considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely
         * identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is
         * required. - Desktop: Specifying the 'raw_resource_id' field is required.
         */
        await gapi.client.cloudidentity.devices.deviceUsers.lookup({
            androidId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            rawResourceId: "Test string",
            userId: "Test string",
        });
        /** Wipes the user's account on a device. */
        await gapi.client.cloudidentity.devices.deviceUsers.wipe({
            name: "Test string",
        }, {
            customer: "Test string",
        });
        /** Gets the client state for the device user */
        await gapi.client.cloudidentity.devices.deviceUsers.clientStates.get({
            customer: "Test string",
            name: "Test string",
        });
        /**
         * Updates the client state for the device user **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise
         * for Education, and Cloud Identity Premium
         */
        await gapi.client.cloudidentity.devices.deviceUsers.clientStates.patch({
            customer: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            assetTags: [
                "Test string"
            ],
            complianceState: "Test string",
            createTime: "Test string",
            customId: "Test string",
            etag: "Test string",
            healthScore: "Test string",
            keyValuePairs: {
                A: {
                    boolValue: true,
                    numberValue: 42,
                    stringValue: "Test string",
                }
            },
            lastUpdateTime: "Test string",
            managed: "Test string",
            name: "Test string",
            ownerType: "Test string",
            scoreReason: "Test string",
        });
        /** Creates a `Group`. */
        await gapi.client.cloudidentity.groups.create({
            initialGroupConfig: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            dynamicGroupMetadata: {
                queries: [
                    {
                        query: "Test string",
                        resourceType: "Test string",
                    }
                ],
                status: {
                    status: "Test string",
                    statusTime: "Test string",
                },
            },
            groupKey: {
                id: "Test string",
                namespace: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            parent: "Test string",
            posixGroups: [
                {
                    gid: "Test string",
                    name: "Test string",
                    systemId: "Test string",
                }
            ],
            updateTime: "Test string",
        });
        /** Deletes a `Group`. */
        await gapi.client.cloudidentity.groups.delete({
            name: "Test string",
        });
        /** Retrieves a `Group`. */
        await gapi.client.cloudidentity.groups.get({
            name: "Test string",
        });
        /** Get Security Settings */
        await gapi.client.cloudidentity.groups.getSecuritySettings({
            name: "Test string",
            readMask: "Test string",
        });
        /** Lists the `Group` resources under a customer or namespace. */
        await gapi.client.cloudidentity.groups.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`. */
        await gapi.client.cloudidentity.groups.lookup({
            "groupKey.id": "Test string",
            "groupKey.namespace": "Test string",
        });
        /** Updates a `Group`. */
        await gapi.client.cloudidentity.groups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            dynamicGroupMetadata: {
                queries: [
                    {
                        query: "Test string",
                        resourceType: "Test string",
                    }
                ],
                status: {
                    status: "Test string",
                    statusTime: "Test string",
                },
            },
            groupKey: {
                id: "Test string",
                namespace: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            parent: "Test string",
            posixGroups: [
                {
                    gid: "Test string",
                    name: "Test string",
                    systemId: "Test string",
                }
            ],
            updateTime: "Test string",
        });
        /** Searches for `Group` resources matching a specified query. */
        await gapi.client.cloudidentity.groups.search({
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            query: "Test string",
            view: "Test string",
        });
        /** Update Security Settings */
        await gapi.client.cloudidentity.groups.updateSecuritySettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            memberRestriction: {
                evaluation: {
                    state: "Test string",
                },
                query: "Test string",
            },
            name: "Test string",
        });
        /**
         * Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and
         * Cloud Identity Premium accounts. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have
         * view permissions to at least one transitive membership between the member and group.
         */
        await gapi.client.cloudidentity.groups.memberships.checkTransitiveMembership({
            parent: "Test string",
            query: "Test string",
        });
        /** Creates a `Membership`. */
        await gapi.client.cloudidentity.groups.memberships.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            memberKey: {
                id: "Test string",
                namespace: "Test string",
            },
            name: "Test string",
            preferredMemberKey: {
                id: "Test string",
                namespace: "Test string",
            },
            roles: [
                {
                    expiryDetail: {
                        expireTime: "Test string",
                    },
                    name: "Test string",
                    restrictionEvaluations: {
                        memberRestrictionEvaluation: {
                            state: "Test string",
                        },
                    },
                }
            ],
            type: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a `Membership`. */
        await gapi.client.cloudidentity.groups.memberships.delete({
            name: "Test string",
        });
        /** Retrieves a `Membership`. */
        await gapi.client.cloudidentity.groups.memberships.get({
            name: "Test string",
        });
        /**
         * Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise
         * for Education; and Cloud Identity Premium accounts. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will
         * contain all membership paths between the group and the member.
         */
        await gapi.client.cloudidentity.groups.memberships.getMembershipGraph({
            parent: "Test string",
            query: "Test string",
        });
        /** Lists the `Membership`s within a `Group`. */
        await gapi.client.cloudidentity.groups.memberships.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`. */
        await gapi.client.cloudidentity.groups.memberships.lookup({
            "memberKey.id": "Test string",
            "memberKey.namespace": "Test string",
            parent: "Test string",
        });
        /** Modifies the `MembershipRole`s of a `Membership`. */
        await gapi.client.cloudidentity.groups.memberships.modifyMembershipRoles({
            name: "Test string",
        }, {
            addRoles: [
                {
                    expiryDetail: {
                        expireTime: "Test string",
                    },
                    name: "Test string",
                    restrictionEvaluations: {
                        memberRestrictionEvaluation: {
                            state: "Test string",
                        },
                    },
                }
            ],
            removeRoles: [
                "Test string"
            ],
            updateRolesParams: [
                {
                    fieldMask: "Test string",
                    membershipRole: {
                        expiryDetail: {
                            expireTime: "Test string",
                        },
                        name: "Test string",
                        restrictionEvaluations: {
                            memberRestrictionEvaluation: {
                                state: "Test string",
                            },
                        },
                    },
                }
            ],
        });
        /**
         * Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity
         * Premium accounts. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.
         */
        await gapi.client.cloudidentity.groups.memberships.searchTransitiveGroups({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            query: "Test string",
        });
        /**
         * Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud
         * Identity Premium accounts. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.
         */
        await gapi.client.cloudidentity.groups.memberships.searchTransitiveMemberships({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates an InboundSamlSsoProfile for a customer. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.create({
        }, {
            customer: "Test string",
            displayName: "Test string",
            idpConfig: {
                changePasswordUri: "Test string",
                entityId: "Test string",
                logoutRedirectUri: "Test string",
                singleSignOnServiceUri: "Test string",
            },
            name: "Test string",
            spConfig: {
                assertionConsumerServiceUri: "Test string",
                entityId: "Test string",
            },
        });
        /** Deletes an InboundSamlSsoProfile. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.delete({
            name: "Test string",
        });
        /** Gets an InboundSamlSsoProfile. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.get({
            name: "Test string",
        });
        /** Lists InboundSamlSsoProfiles for a customer. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates an InboundSamlSsoProfile. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            customer: "Test string",
            displayName: "Test string",
            idpConfig: {
                changePasswordUri: "Test string",
                entityId: "Test string",
                logoutRedirectUri: "Test string",
                singleSignOnServiceUri: "Test string",
            },
            name: "Test string",
            spConfig: {
                assertionConsumerServiceUri: "Test string",
                entityId: "Test string",
            },
        });
        /** Adds an IdpCredential. Up to 2 credentials are allowed. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.idpCredentials.add({
            parent: "Test string",
        }, {
            pemData: "Test string",
        });
        /** Deletes an IdpCredential. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.idpCredentials.delete({
            name: "Test string",
        });
        /** Gets an IdpCredential. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.idpCredentials.get({
            name: "Test string",
        });
        /** Returns a list of IdpCredentials in an InboundSamlSsoProfile. */
        await gapi.client.cloudidentity.inboundSamlSsoProfiles.idpCredentials.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates an InboundSsoAssignment for users and devices in a `Customer` under a given `Group` or `OrgUnit`. */
        await gapi.client.cloudidentity.inboundSsoAssignments.create({
        }, {
            customer: "Test string",
            name: "Test string",
            rank: 42,
            samlSsoInfo: {
                inboundSamlSsoProfile: "Test string",
            },
            signInBehavior: {
                redirectCondition: "Test string",
            },
            ssoMode: "Test string",
            targetGroup: "Test string",
            targetOrgUnit: "Test string",
        });
        /** Deletes an InboundSsoAssignment. To disable SSO, Create (or Update) an assignment that has `sso_mode` == `SSO_OFF`. */
        await gapi.client.cloudidentity.inboundSsoAssignments.delete({
            name: "Test string",
        });
        /** Gets an InboundSsoAssignment. */
        await gapi.client.cloudidentity.inboundSsoAssignments.get({
            name: "Test string",
        });
        /** Lists the InboundSsoAssignments for a `Customer`. */
        await gapi.client.cloudidentity.inboundSsoAssignments.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates an InboundSsoAssignment. The body of this request is the `inbound_sso_assignment` field and the `update_mask` is relative to that. For example: a PATCH to
         * `/v1beta1/inboundSsoAssignments/0abcdefg1234567&update_mask=rank` with a body of `{ "rank": 1 }` moves that (presumably group-targeted) SSO assignment to the highest priority and shifts
         * any other group-targeted assignments down in priority.
         */
        await gapi.client.cloudidentity.inboundSsoAssignments.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            customer: "Test string",
            name: "Test string",
            rank: 42,
            samlSsoInfo: {
                inboundSamlSsoProfile: "Test string",
            },
            signInBehavior: {
                redirectCondition: "Test string",
            },
            ssoMode: "Test string",
            targetGroup: "Test string",
            targetOrgUnit: "Test string",
        });
        /**
         * List OrgMembership resources in an OrgUnit treated as 'parent'. Parent format: orgUnits/{$orgUnitId} where `$orgUnitId` is the `orgUnitId` from the [Admin SDK `OrgUnit`
         * resource](https://developers.google.com/admin-sdk/directory/reference/rest/v1/orgunits)
         */
        await gapi.client.cloudidentity.orgUnits.memberships.list({
            customer: "Test string",
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Move an OrgMembership to a new OrgUnit. NOTE: This is an atomic copy-and-delete. The resource will have a new copy under the destination OrgUnit and be deleted from the source OrgUnit.
         * The resource can only be searched under the destination OrgUnit afterwards.
         */
        await gapi.client.cloudidentity.orgUnits.memberships.move({
            name: "Test string",
        }, {
            customer: "Test string",
            destinationOrgUnit: "Test string",
        });
    }
});
