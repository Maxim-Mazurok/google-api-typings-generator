/* This is stub file for gapi.client.firebasehosting-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230122

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://firebasehosting.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.firebasehosting */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        /** View and administer all your Firebase data and settings */
        'https://www.googleapis.com/auth/firebase',
        /** View all your Firebase data and settings */
        'https://www.googleapis.com/auth/firebase.readonly',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.firebasehosting.projects.operations.get({
            name: "Test string",
        });
        /** Creates a new Hosting Site in the specified parent Firebase project. Note that Hosting sites can take several minutes to propagate through Firebase systems. */
        await gapi.client.firebasehosting.projects.sites.create({
            parent: "Test string",
            siteId: "Test string",
        }, {
            appId: "Test string",
            defaultUrl: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            type: "Test string",
        });
        /** Deletes the specified Hosting Site from the specified parent Firebase project. */
        await gapi.client.firebasehosting.projects.sites.delete({
            name: "Test string",
        });
        /** Gets the specified Hosting Site. */
        await gapi.client.firebasehosting.projects.sites.get({
            name: "Test string",
        });
        /** Gets the Hosting metadata for a specific site. */
        await gapi.client.firebasehosting.projects.sites.getConfig({
            name: "Test string",
        });
        /** Lists each Hosting Site associated with the specified parent Firebase project. */
        await gapi.client.firebasehosting.projects.sites.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates attributes of the specified Hosting Site. */
        await gapi.client.firebasehosting.projects.sites.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appId: "Test string",
            defaultUrl: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            type: "Test string",
        });
        /** Sets the Hosting metadata for a specific site. */
        await gapi.client.firebasehosting.projects.sites.updateConfig({
            name: "Test string",
            updateMask: "Test string",
        }, {
            cloudLoggingEnabled: true,
            maxVersions: "Test string",
        });
        /** Creates a new channel in the specified site. */
        await gapi.client.firebasehosting.projects.sites.channels.create({
            channelId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            expireTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            release: {
                message: "Test string",
                name: "Test string",
                releaseTime: "Test string",
                releaseUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                type: "Test string",
                version: {
                    config: {
                        appAssociation: "Test string",
                        cleanUrls: true,
                        headers: [
                            {
                                glob: "Test string",
                                headers: {
                                    A: "Test string"
                                },
                                regex: "Test string",
                            }
                        ],
                        i18n: {
                            root: "Test string",
                        },
                        redirects: [
                            {
                                glob: "Test string",
                                location: "Test string",
                                regex: "Test string",
                                statusCode: 42,
                            }
                        ],
                        rewrites: [
                            {
                                dynamicLinks: true,
                                function: "Test string",
                                functionRegion: "Test string",
                                glob: "Test string",
                                path: "Test string",
                                regex: "Test string",
                                run: {
                                    region: "Test string",
                                    serviceId: "Test string",
                                },
                            }
                        ],
                        trailingSlashBehavior: "Test string",
                    },
                    createTime: "Test string",
                    createUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    deleteTime: "Test string",
                    deleteUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    fileCount: "Test string",
                    finalizeTime: "Test string",
                    finalizeUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    name: "Test string",
                    status: "Test string",
                    versionBytes: "Test string",
                },
            },
            retainedReleaseCount: 42,
            ttl: "Test string",
            updateTime: "Test string",
            url: "Test string",
        });
        /** Deletes the specified channel of the specified site. The `live` channel cannot be deleted. */
        await gapi.client.firebasehosting.projects.sites.channels.delete({
            name: "Test string",
        });
        /** Retrieves information for the specified channel of the specified site. */
        await gapi.client.firebasehosting.projects.sites.channels.get({
            name: "Test string",
        });
        /** Lists the channels for the specified site. All sites have a default `live` channel. */
        await gapi.client.firebasehosting.projects.sites.channels.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates information for the specified channel of the specified site. Implicitly creates the channel if it doesn't already exist. */
        await gapi.client.firebasehosting.projects.sites.channels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            expireTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            release: {
                message: "Test string",
                name: "Test string",
                releaseTime: "Test string",
                releaseUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                type: "Test string",
                version: {
                    config: {
                        appAssociation: "Test string",
                        cleanUrls: true,
                        headers: [
                            {
                                glob: "Test string",
                                headers: {
                                    A: "Test string"
                                },
                                regex: "Test string",
                            }
                        ],
                        i18n: {
                            root: "Test string",
                        },
                        redirects: [
                            {
                                glob: "Test string",
                                location: "Test string",
                                regex: "Test string",
                                statusCode: 42,
                            }
                        ],
                        rewrites: [
                            {
                                dynamicLinks: true,
                                function: "Test string",
                                functionRegion: "Test string",
                                glob: "Test string",
                                path: "Test string",
                                regex: "Test string",
                                run: {
                                    region: "Test string",
                                    serviceId: "Test string",
                                },
                            }
                        ],
                        trailingSlashBehavior: "Test string",
                    },
                    createTime: "Test string",
                    createUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    deleteTime: "Test string",
                    deleteUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    fileCount: "Test string",
                    finalizeTime: "Test string",
                    finalizeUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    name: "Test string",
                    status: "Test string",
                    versionBytes: "Test string",
                },
            },
            retainedReleaseCount: 42,
            ttl: "Test string",
            updateTime: "Test string",
            url: "Test string",
        });
        /** Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s). */
        await gapi.client.firebasehosting.projects.sites.channels.releases.create({
            parent: "Test string",
            versionName: "Test string",
        }, {
            message: "Test string",
            name: "Test string",
            releaseTime: "Test string",
            releaseUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            type: "Test string",
            version: {
                config: {
                    appAssociation: "Test string",
                    cleanUrls: true,
                    headers: [
                        {
                            glob: "Test string",
                            headers: {
                                A: "Test string"
                            },
                            regex: "Test string",
                        }
                    ],
                    i18n: {
                        root: "Test string",
                    },
                    redirects: [
                        {
                            glob: "Test string",
                            location: "Test string",
                            regex: "Test string",
                            statusCode: 42,
                        }
                    ],
                    rewrites: [
                        {
                            dynamicLinks: true,
                            function: "Test string",
                            functionRegion: "Test string",
                            glob: "Test string",
                            path: "Test string",
                            regex: "Test string",
                            run: {
                                region: "Test string",
                                serviceId: "Test string",
                            },
                        }
                    ],
                    trailingSlashBehavior: "Test string",
                },
                createTime: "Test string",
                createUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                deleteTime: "Test string",
                deleteUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                fileCount: "Test string",
                finalizeTime: "Test string",
                finalizeUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                status: "Test string",
                versionBytes: "Test string",
            },
        });
        /**
         * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and
         * any active preview channels for the specified site.
         */
        await gapi.client.firebasehosting.projects.sites.channels.releases.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a domain mapping on the specified site. */
        await gapi.client.firebasehosting.projects.sites.domains.create({
            parent: "Test string",
        }, {
            domainName: "Test string",
            domainRedirect: {
                domainName: "Test string",
                type: "Test string",
            },
            provisioning: {
                certChallengeDiscoveredTxt: [
                    "Test string"
                ],
                certChallengeDns: {
                    domainName: "Test string",
                    token: "Test string",
                },
                certChallengeHttp: {
                    path: "Test string",
                    token: "Test string",
                },
                certStatus: "Test string",
                discoveredIps: [
                    "Test string"
                ],
                dnsFetchTime: "Test string",
                dnsStatus: "Test string",
                expectedIps: [
                    "Test string"
                ],
            },
            site: "Test string",
            status: "Test string",
            updateTime: "Test string",
        });
        /** Deletes the existing domain mapping on the specified site. */
        await gapi.client.firebasehosting.projects.sites.domains.delete({
            name: "Test string",
        });
        /** Gets a domain mapping on the specified site. */
        await gapi.client.firebasehosting.projects.sites.domains.get({
            name: "Test string",
        });
        /** Lists the domains for the specified site. */
        await gapi.client.firebasehosting.projects.sites.domains.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified domain mapping, creating the mapping as if it does not exist. */
        await gapi.client.firebasehosting.projects.sites.domains.update({
            name: "Test string",
        }, {
            domainName: "Test string",
            domainRedirect: {
                domainName: "Test string",
                type: "Test string",
            },
            provisioning: {
                certChallengeDiscoveredTxt: [
                    "Test string"
                ],
                certChallengeDns: {
                    domainName: "Test string",
                    token: "Test string",
                },
                certChallengeHttp: {
                    path: "Test string",
                    token: "Test string",
                },
                certStatus: "Test string",
                discoveredIps: [
                    "Test string"
                ],
                dnsFetchTime: "Test string",
                dnsStatus: "Test string",
                expectedIps: [
                    "Test string"
                ],
            },
            site: "Test string",
            status: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s). */
        await gapi.client.firebasehosting.projects.sites.releases.create({
            parent: "Test string",
            versionName: "Test string",
        }, {
            message: "Test string",
            name: "Test string",
            releaseTime: "Test string",
            releaseUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            type: "Test string",
            version: {
                config: {
                    appAssociation: "Test string",
                    cleanUrls: true,
                    headers: [
                        {
                            glob: "Test string",
                            headers: {
                                A: "Test string"
                            },
                            regex: "Test string",
                        }
                    ],
                    i18n: {
                        root: "Test string",
                    },
                    redirects: [
                        {
                            glob: "Test string",
                            location: "Test string",
                            regex: "Test string",
                            statusCode: 42,
                        }
                    ],
                    rewrites: [
                        {
                            dynamicLinks: true,
                            function: "Test string",
                            functionRegion: "Test string",
                            glob: "Test string",
                            path: "Test string",
                            regex: "Test string",
                            run: {
                                region: "Test string",
                                serviceId: "Test string",
                            },
                        }
                    ],
                    trailingSlashBehavior: "Test string",
                },
                createTime: "Test string",
                createUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                deleteTime: "Test string",
                deleteUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                fileCount: "Test string",
                finalizeTime: "Test string",
                finalizeUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                status: "Test string",
                versionBytes: "Test string",
            },
        });
        /**
         * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and
         * any active preview channels for the specified site.
         */
        await gapi.client.firebasehosting.projects.sites.releases.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a new version on the specified target site using the content of the specified version. */
        await gapi.client.firebasehosting.projects.sites.versions.clone({
            parent: "Test string",
        }, {
            exclude: {
                regexes: [
                    "Test string"
                ],
            },
            finalize: true,
            include: {
                regexes: [
                    "Test string"
                ],
            },
            sourceVersion: "Test string",
        });
        /** Creates a new version for the specified site. */
        await gapi.client.firebasehosting.projects.sites.versions.create({
            parent: "Test string",
            sizeBytes: "Test string",
            versionId: "Test string",
        }, {
            config: {
                appAssociation: "Test string",
                cleanUrls: true,
                headers: [
                    {
                        glob: "Test string",
                        headers: {
                            A: "Test string"
                        },
                        regex: "Test string",
                    }
                ],
                i18n: {
                    root: "Test string",
                },
                redirects: [
                    {
                        glob: "Test string",
                        location: "Test string",
                        regex: "Test string",
                        statusCode: 42,
                    }
                ],
                rewrites: [
                    {
                        dynamicLinks: true,
                        function: "Test string",
                        functionRegion: "Test string",
                        glob: "Test string",
                        path: "Test string",
                        regex: "Test string",
                        run: {
                            region: "Test string",
                            serviceId: "Test string",
                        },
                    }
                ],
                trailingSlashBehavior: "Test string",
            },
            createTime: "Test string",
            createUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            deleteTime: "Test string",
            deleteUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            fileCount: "Test string",
            finalizeTime: "Test string",
            finalizeUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            status: "Test string",
            versionBytes: "Test string",
        });
        /** Deletes the specified version. */
        await gapi.client.firebasehosting.projects.sites.versions.delete({
            name: "Test string",
        });
        /** Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site. */
        await gapi.client.firebasehosting.projects.sites.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported
         * [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
         */
        await gapi.client.firebasehosting.projects.sites.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            config: {
                appAssociation: "Test string",
                cleanUrls: true,
                headers: [
                    {
                        glob: "Test string",
                        headers: {
                            A: "Test string"
                        },
                        regex: "Test string",
                    }
                ],
                i18n: {
                    root: "Test string",
                },
                redirects: [
                    {
                        glob: "Test string",
                        location: "Test string",
                        regex: "Test string",
                        statusCode: 42,
                    }
                ],
                rewrites: [
                    {
                        dynamicLinks: true,
                        function: "Test string",
                        functionRegion: "Test string",
                        glob: "Test string",
                        path: "Test string",
                        regex: "Test string",
                        run: {
                            region: "Test string",
                            serviceId: "Test string",
                        },
                    }
                ],
                trailingSlashBehavior: "Test string",
            },
            createTime: "Test string",
            createUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            deleteTime: "Test string",
            deleteUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            fileCount: "Test string",
            finalizeTime: "Test string",
            finalizeUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            status: "Test string",
            versionBytes: "Test string",
        });
        /** Adds content files to the specified version. Each file must be under 2 GB. */
        await gapi.client.firebasehosting.projects.sites.versions.populateFiles({
            parent: "Test string",
        }, {
            files: {
                A: "Test string"
            },
        });
        /** Lists the remaining files to be uploaded for the specified version. */
        await gapi.client.firebasehosting.projects.sites.versions.files.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            status: "Test string",
        });
        /** Gets the Hosting metadata for a specific site. */
        await gapi.client.firebasehosting.sites.getConfig({
            name: "Test string",
        });
        /** Sets the Hosting metadata for a specific site. */
        await gapi.client.firebasehosting.sites.updateConfig({
            name: "Test string",
            updateMask: "Test string",
        }, {
            cloudLoggingEnabled: true,
            maxVersions: "Test string",
        });
        /** Creates a new channel in the specified site. */
        await gapi.client.firebasehosting.sites.channels.create({
            channelId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            expireTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            release: {
                message: "Test string",
                name: "Test string",
                releaseTime: "Test string",
                releaseUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                type: "Test string",
                version: {
                    config: {
                        appAssociation: "Test string",
                        cleanUrls: true,
                        headers: [
                            {
                                glob: "Test string",
                                headers: {
                                    A: "Test string"
                                },
                                regex: "Test string",
                            }
                        ],
                        i18n: {
                            root: "Test string",
                        },
                        redirects: [
                            {
                                glob: "Test string",
                                location: "Test string",
                                regex: "Test string",
                                statusCode: 42,
                            }
                        ],
                        rewrites: [
                            {
                                dynamicLinks: true,
                                function: "Test string",
                                functionRegion: "Test string",
                                glob: "Test string",
                                path: "Test string",
                                regex: "Test string",
                                run: {
                                    region: "Test string",
                                    serviceId: "Test string",
                                },
                            }
                        ],
                        trailingSlashBehavior: "Test string",
                    },
                    createTime: "Test string",
                    createUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    deleteTime: "Test string",
                    deleteUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    fileCount: "Test string",
                    finalizeTime: "Test string",
                    finalizeUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    name: "Test string",
                    status: "Test string",
                    versionBytes: "Test string",
                },
            },
            retainedReleaseCount: 42,
            ttl: "Test string",
            updateTime: "Test string",
            url: "Test string",
        });
        /** Deletes the specified channel of the specified site. The `live` channel cannot be deleted. */
        await gapi.client.firebasehosting.sites.channels.delete({
            name: "Test string",
        });
        /** Retrieves information for the specified channel of the specified site. */
        await gapi.client.firebasehosting.sites.channels.get({
            name: "Test string",
        });
        /** Lists the channels for the specified site. All sites have a default `live` channel. */
        await gapi.client.firebasehosting.sites.channels.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates information for the specified channel of the specified site. Implicitly creates the channel if it doesn't already exist. */
        await gapi.client.firebasehosting.sites.channels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            expireTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            release: {
                message: "Test string",
                name: "Test string",
                releaseTime: "Test string",
                releaseUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                type: "Test string",
                version: {
                    config: {
                        appAssociation: "Test string",
                        cleanUrls: true,
                        headers: [
                            {
                                glob: "Test string",
                                headers: {
                                    A: "Test string"
                                },
                                regex: "Test string",
                            }
                        ],
                        i18n: {
                            root: "Test string",
                        },
                        redirects: [
                            {
                                glob: "Test string",
                                location: "Test string",
                                regex: "Test string",
                                statusCode: 42,
                            }
                        ],
                        rewrites: [
                            {
                                dynamicLinks: true,
                                function: "Test string",
                                functionRegion: "Test string",
                                glob: "Test string",
                                path: "Test string",
                                regex: "Test string",
                                run: {
                                    region: "Test string",
                                    serviceId: "Test string",
                                },
                            }
                        ],
                        trailingSlashBehavior: "Test string",
                    },
                    createTime: "Test string",
                    createUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    deleteTime: "Test string",
                    deleteUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    fileCount: "Test string",
                    finalizeTime: "Test string",
                    finalizeUser: {
                        email: "Test string",
                        imageUrl: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    name: "Test string",
                    status: "Test string",
                    versionBytes: "Test string",
                },
            },
            retainedReleaseCount: 42,
            ttl: "Test string",
            updateTime: "Test string",
            url: "Test string",
        });
        /** Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s). */
        await gapi.client.firebasehosting.sites.channels.releases.create({
            parent: "Test string",
            versionName: "Test string",
        }, {
            message: "Test string",
            name: "Test string",
            releaseTime: "Test string",
            releaseUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            type: "Test string",
            version: {
                config: {
                    appAssociation: "Test string",
                    cleanUrls: true,
                    headers: [
                        {
                            glob: "Test string",
                            headers: {
                                A: "Test string"
                            },
                            regex: "Test string",
                        }
                    ],
                    i18n: {
                        root: "Test string",
                    },
                    redirects: [
                        {
                            glob: "Test string",
                            location: "Test string",
                            regex: "Test string",
                            statusCode: 42,
                        }
                    ],
                    rewrites: [
                        {
                            dynamicLinks: true,
                            function: "Test string",
                            functionRegion: "Test string",
                            glob: "Test string",
                            path: "Test string",
                            regex: "Test string",
                            run: {
                                region: "Test string",
                                serviceId: "Test string",
                            },
                        }
                    ],
                    trailingSlashBehavior: "Test string",
                },
                createTime: "Test string",
                createUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                deleteTime: "Test string",
                deleteUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                fileCount: "Test string",
                finalizeTime: "Test string",
                finalizeUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                status: "Test string",
                versionBytes: "Test string",
            },
        });
        /**
         * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and
         * any active preview channels for the specified site.
         */
        await gapi.client.firebasehosting.sites.channels.releases.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a domain mapping on the specified site. */
        await gapi.client.firebasehosting.sites.domains.create({
            parent: "Test string",
        }, {
            domainName: "Test string",
            domainRedirect: {
                domainName: "Test string",
                type: "Test string",
            },
            provisioning: {
                certChallengeDiscoveredTxt: [
                    "Test string"
                ],
                certChallengeDns: {
                    domainName: "Test string",
                    token: "Test string",
                },
                certChallengeHttp: {
                    path: "Test string",
                    token: "Test string",
                },
                certStatus: "Test string",
                discoveredIps: [
                    "Test string"
                ],
                dnsFetchTime: "Test string",
                dnsStatus: "Test string",
                expectedIps: [
                    "Test string"
                ],
            },
            site: "Test string",
            status: "Test string",
            updateTime: "Test string",
        });
        /** Deletes the existing domain mapping on the specified site. */
        await gapi.client.firebasehosting.sites.domains.delete({
            name: "Test string",
        });
        /** Gets a domain mapping on the specified site. */
        await gapi.client.firebasehosting.sites.domains.get({
            name: "Test string",
        });
        /** Lists the domains for the specified site. */
        await gapi.client.firebasehosting.sites.domains.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified domain mapping, creating the mapping as if it does not exist. */
        await gapi.client.firebasehosting.sites.domains.update({
            name: "Test string",
        }, {
            domainName: "Test string",
            domainRedirect: {
                domainName: "Test string",
                type: "Test string",
            },
            provisioning: {
                certChallengeDiscoveredTxt: [
                    "Test string"
                ],
                certChallengeDns: {
                    domainName: "Test string",
                    token: "Test string",
                },
                certChallengeHttp: {
                    path: "Test string",
                    token: "Test string",
                },
                certStatus: "Test string",
                discoveredIps: [
                    "Test string"
                ],
                dnsFetchTime: "Test string",
                dnsStatus: "Test string",
                expectedIps: [
                    "Test string"
                ],
            },
            site: "Test string",
            status: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s). */
        await gapi.client.firebasehosting.sites.releases.create({
            parent: "Test string",
            versionName: "Test string",
        }, {
            message: "Test string",
            name: "Test string",
            releaseTime: "Test string",
            releaseUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            type: "Test string",
            version: {
                config: {
                    appAssociation: "Test string",
                    cleanUrls: true,
                    headers: [
                        {
                            glob: "Test string",
                            headers: {
                                A: "Test string"
                            },
                            regex: "Test string",
                        }
                    ],
                    i18n: {
                        root: "Test string",
                    },
                    redirects: [
                        {
                            glob: "Test string",
                            location: "Test string",
                            regex: "Test string",
                            statusCode: 42,
                        }
                    ],
                    rewrites: [
                        {
                            dynamicLinks: true,
                            function: "Test string",
                            functionRegion: "Test string",
                            glob: "Test string",
                            path: "Test string",
                            regex: "Test string",
                            run: {
                                region: "Test string",
                                serviceId: "Test string",
                            },
                        }
                    ],
                    trailingSlashBehavior: "Test string",
                },
                createTime: "Test string",
                createUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                deleteTime: "Test string",
                deleteUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                fileCount: "Test string",
                finalizeTime: "Test string",
                finalizeUser: {
                    email: "Test string",
                    imageUrl: "Test string",
                },
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                status: "Test string",
                versionBytes: "Test string",
            },
        });
        /**
         * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and
         * any active preview channels for the specified site.
         */
        await gapi.client.firebasehosting.sites.releases.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a new version on the specified target site using the content of the specified version. */
        await gapi.client.firebasehosting.sites.versions.clone({
            parent: "Test string",
        }, {
            exclude: {
                regexes: [
                    "Test string"
                ],
            },
            finalize: true,
            include: {
                regexes: [
                    "Test string"
                ],
            },
            sourceVersion: "Test string",
        });
        /** Creates a new version for the specified site. */
        await gapi.client.firebasehosting.sites.versions.create({
            parent: "Test string",
            sizeBytes: "Test string",
            versionId: "Test string",
        }, {
            config: {
                appAssociation: "Test string",
                cleanUrls: true,
                headers: [
                    {
                        glob: "Test string",
                        headers: {
                            A: "Test string"
                        },
                        regex: "Test string",
                    }
                ],
                i18n: {
                    root: "Test string",
                },
                redirects: [
                    {
                        glob: "Test string",
                        location: "Test string",
                        regex: "Test string",
                        statusCode: 42,
                    }
                ],
                rewrites: [
                    {
                        dynamicLinks: true,
                        function: "Test string",
                        functionRegion: "Test string",
                        glob: "Test string",
                        path: "Test string",
                        regex: "Test string",
                        run: {
                            region: "Test string",
                            serviceId: "Test string",
                        },
                    }
                ],
                trailingSlashBehavior: "Test string",
            },
            createTime: "Test string",
            createUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            deleteTime: "Test string",
            deleteUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            fileCount: "Test string",
            finalizeTime: "Test string",
            finalizeUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            status: "Test string",
            versionBytes: "Test string",
        });
        /** Deletes the specified version. */
        await gapi.client.firebasehosting.sites.versions.delete({
            name: "Test string",
        });
        /** Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site. */
        await gapi.client.firebasehosting.sites.versions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported
         * [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
         */
        await gapi.client.firebasehosting.sites.versions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            config: {
                appAssociation: "Test string",
                cleanUrls: true,
                headers: [
                    {
                        glob: "Test string",
                        headers: {
                            A: "Test string"
                        },
                        regex: "Test string",
                    }
                ],
                i18n: {
                    root: "Test string",
                },
                redirects: [
                    {
                        glob: "Test string",
                        location: "Test string",
                        regex: "Test string",
                        statusCode: 42,
                    }
                ],
                rewrites: [
                    {
                        dynamicLinks: true,
                        function: "Test string",
                        functionRegion: "Test string",
                        glob: "Test string",
                        path: "Test string",
                        regex: "Test string",
                        run: {
                            region: "Test string",
                            serviceId: "Test string",
                        },
                    }
                ],
                trailingSlashBehavior: "Test string",
            },
            createTime: "Test string",
            createUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            deleteTime: "Test string",
            deleteUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            fileCount: "Test string",
            finalizeTime: "Test string",
            finalizeUser: {
                email: "Test string",
                imageUrl: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            status: "Test string",
            versionBytes: "Test string",
        });
        /** Adds content files to the specified version. Each file must be under 2 GB. */
        await gapi.client.firebasehosting.sites.versions.populateFiles({
            parent: "Test string",
        }, {
            files: {
                A: "Test string"
            },
        });
        /** Lists the remaining files to be uploaded for the specified version. */
        await gapi.client.firebasehosting.sites.versions.files.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            status: "Test string",
        });
    }
});
