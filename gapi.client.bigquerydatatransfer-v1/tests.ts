/* This is stub file for gapi.client.bigquerydatatransfer-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250430

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://bigquerydatatransfer.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.bigquerydatatransfer */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** View and manage your data in Google BigQuery and see the email address for your Google Account */
    'https://www.googleapis.com/auth/bigquery',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View your data across Google Cloud services and see the email address of your Google Account */
    'https://www.googleapis.com/auth/cloud-platform.read-only',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers). */
    await gapi.client.bigquerydatatransfer.projects.enrollDataSources(
      {
        name: 'Test string',
      },
      {
        dataSourceIds: ['Test string'],
      },
    );
    /** Returns true if valid credentials exist for the given data source and requesting user. */
    await gapi.client.bigquerydatatransfer.projects.dataSources.checkValidCreds(
      {
        name: 'Test string',
      },
      {},
    );
    /** Retrieves a supported data source and returns its settings. */
    await gapi.client.bigquerydatatransfer.projects.dataSources.get({
      name: 'Test string',
    });
    /** Lists supported data sources and returns their settings. */
    await gapi.client.bigquerydatatransfer.projects.dataSources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers). */
    await gapi.client.bigquerydatatransfer.projects.locations.enrollDataSources(
      {
        name: 'Test string',
      },
      {
        dataSourceIds: ['Test string'],
      },
    );
    /** Gets information about a location. */
    await gapi.client.bigquerydatatransfer.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.bigquerydatatransfer.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Unenroll data sources in a user project. This allows users to remove transfer configurations for these data sources. They will no longer appear in the ListDataSources RPC and will also no longer appear in the [BigQuery UI](https://console.cloud.google.com/bigquery). Data transfers configurations of unenrolled data sources will not be scheduled. */
    await gapi.client.bigquerydatatransfer.projects.locations.unenrollDataSources(
      {
        name: 'Test string',
      },
      {
        dataSourceIds: ['Test string'],
      },
    );
    /** Returns true if valid credentials exist for the given data source and requesting user. */
    await gapi.client.bigquerydatatransfer.projects.locations.dataSources.checkValidCreds(
      {
        name: 'Test string',
      },
      {},
    );
    /** Retrieves a supported data source and returns its settings. */
    await gapi.client.bigquerydatatransfer.projects.locations.dataSources.get({
      name: 'Test string',
    });
    /** Lists supported data sources and returns their settings. */
    await gapi.client.bigquerydatatransfer.projects.locations.dataSources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new data transfer configuration. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.create(
      {
        authorizationCode: 'Test string',
        parent: 'Test string',
        serviceAccountName: 'Test string',
        versionInfo: 'Test string',
      },
      {
        dataRefreshWindowDays: 42,
        datasetRegion: 'Test string',
        dataSourceId: 'Test string',
        destinationDatasetId: 'Test string',
        disabled: true,
        displayName: 'Test string',
        emailPreferences: {
          enableFailureEmail: true,
        },
        encryptionConfiguration: {
          kmsKeyName: 'Test string',
        },
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        name: 'Test string',
        nextRunTime: 'Test string',
        notificationPubsubTopic: 'Test string',
        ownerInfo: {
          email: 'Test string',
        },
        params: {
          A: 42,
        },
        schedule: 'Test string',
        scheduleOptions: {
          disableAutoScheduling: true,
          endTime: 'Test string',
          startTime: 'Test string',
        },
        scheduleOptionsV2: {
          eventDrivenSchedule: {
            pubsubSubscription: 'Test string',
          },
          manualSchedule: {},
          timeBasedSchedule: {
            endTime: 'Test string',
            schedule: 'Test string',
            startTime: 'Test string',
          },
        },
        state: 'Test string',
        updateTime: 'Test string',
        userId: 'Test string',
      },
    );
    /** Deletes a data transfer configuration, including any associated transfer runs and logs. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.delete(
      {
        name: 'Test string',
      },
    );
    /** Returns information about a data transfer config. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.get(
      {
        name: 'Test string',
      },
    );
    /** Returns information about all transfer configs owned by a project in the specified location. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.list(
      {
        dataSourceIds: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a data transfer configuration. All fields must be set, even if they are not updated. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.patch(
      {
        authorizationCode: 'Test string',
        name: 'Test string',
        serviceAccountName: 'Test string',
        updateMask: 'Test string',
        versionInfo: 'Test string',
      },
      {
        dataRefreshWindowDays: 42,
        datasetRegion: 'Test string',
        dataSourceId: 'Test string',
        destinationDatasetId: 'Test string',
        disabled: true,
        displayName: 'Test string',
        emailPreferences: {
          enableFailureEmail: true,
        },
        encryptionConfiguration: {
          kmsKeyName: 'Test string',
        },
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        name: 'Test string',
        nextRunTime: 'Test string',
        notificationPubsubTopic: 'Test string',
        ownerInfo: {
          email: 'Test string',
        },
        params: {
          A: 42,
        },
        schedule: 'Test string',
        scheduleOptions: {
          disableAutoScheduling: true,
          endTime: 'Test string',
          startTime: 'Test string',
        },
        scheduleOptionsV2: {
          eventDrivenSchedule: {
            pubsubSubscription: 'Test string',
          },
          manualSchedule: {},
          timeBasedSchedule: {
            endTime: 'Test string',
            schedule: 'Test string',
            startTime: 'Test string',
          },
        },
        state: 'Test string',
        updateTime: 'Test string',
        userId: 'Test string',
      },
    );
    /** Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.scheduleRuns(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        startTime: 'Test string',
      },
    );
    /** Manually initiates transfer runs. You can schedule these runs in two ways: 1. For a specific point in time using the 'requested_run_time' parameter. 2. For a period between 'start_time' (inclusive) and 'end_time' (exclusive). If scheduling a single run, it is set to execute immediately (schedule_time equals the current time). When scheduling multiple runs within a time range, the first run starts now, and subsequent runs are delayed by 15 seconds each. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.startManualRuns(
      {
        parent: 'Test string',
      },
      {
        requestedRunTime: 'Test string',
        requestedTimeRange: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
      },
    );
    /** Deletes the specified transfer run. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.runs.delete(
      {
        name: 'Test string',
      },
    );
    /** Returns information about the particular transfer run. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.runs.get(
      {
        name: 'Test string',
      },
    );
    /** Returns information about running and completed transfer runs. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.runs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        runAttempt: 'Test string',
        states: 'Test string',
      },
    );
    /** Returns log messages for the transfer run. */
    await gapi.client.bigquerydatatransfer.projects.locations.transferConfigs.runs.transferLogs.list(
      {
        messageTypes: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new data transfer configuration. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.create(
      {
        authorizationCode: 'Test string',
        parent: 'Test string',
        serviceAccountName: 'Test string',
        versionInfo: 'Test string',
      },
      {
        dataRefreshWindowDays: 42,
        datasetRegion: 'Test string',
        dataSourceId: 'Test string',
        destinationDatasetId: 'Test string',
        disabled: true,
        displayName: 'Test string',
        emailPreferences: {
          enableFailureEmail: true,
        },
        encryptionConfiguration: {
          kmsKeyName: 'Test string',
        },
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        name: 'Test string',
        nextRunTime: 'Test string',
        notificationPubsubTopic: 'Test string',
        ownerInfo: {
          email: 'Test string',
        },
        params: {
          A: 42,
        },
        schedule: 'Test string',
        scheduleOptions: {
          disableAutoScheduling: true,
          endTime: 'Test string',
          startTime: 'Test string',
        },
        scheduleOptionsV2: {
          eventDrivenSchedule: {
            pubsubSubscription: 'Test string',
          },
          manualSchedule: {},
          timeBasedSchedule: {
            endTime: 'Test string',
            schedule: 'Test string',
            startTime: 'Test string',
          },
        },
        state: 'Test string',
        updateTime: 'Test string',
        userId: 'Test string',
      },
    );
    /** Deletes a data transfer configuration, including any associated transfer runs and logs. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.delete({
      name: 'Test string',
    });
    /** Returns information about a data transfer config. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.get({
      name: 'Test string',
    });
    /** Returns information about all transfer configs owned by a project in the specified location. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.list({
      dataSourceIds: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a data transfer configuration. All fields must be set, even if they are not updated. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.patch(
      {
        authorizationCode: 'Test string',
        name: 'Test string',
        serviceAccountName: 'Test string',
        updateMask: 'Test string',
        versionInfo: 'Test string',
      },
      {
        dataRefreshWindowDays: 42,
        datasetRegion: 'Test string',
        dataSourceId: 'Test string',
        destinationDatasetId: 'Test string',
        disabled: true,
        displayName: 'Test string',
        emailPreferences: {
          enableFailureEmail: true,
        },
        encryptionConfiguration: {
          kmsKeyName: 'Test string',
        },
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        name: 'Test string',
        nextRunTime: 'Test string',
        notificationPubsubTopic: 'Test string',
        ownerInfo: {
          email: 'Test string',
        },
        params: {
          A: 42,
        },
        schedule: 'Test string',
        scheduleOptions: {
          disableAutoScheduling: true,
          endTime: 'Test string',
          startTime: 'Test string',
        },
        scheduleOptionsV2: {
          eventDrivenSchedule: {
            pubsubSubscription: 'Test string',
          },
          manualSchedule: {},
          timeBasedSchedule: {
            endTime: 'Test string',
            schedule: 'Test string',
            startTime: 'Test string',
          },
        },
        state: 'Test string',
        updateTime: 'Test string',
        userId: 'Test string',
      },
    );
    /** Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.scheduleRuns(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        startTime: 'Test string',
      },
    );
    /** Manually initiates transfer runs. You can schedule these runs in two ways: 1. For a specific point in time using the 'requested_run_time' parameter. 2. For a period between 'start_time' (inclusive) and 'end_time' (exclusive). If scheduling a single run, it is set to execute immediately (schedule_time equals the current time). When scheduling multiple runs within a time range, the first run starts now, and subsequent runs are delayed by 15 seconds each. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.startManualRuns(
      {
        parent: 'Test string',
      },
      {
        requestedRunTime: 'Test string',
        requestedTimeRange: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
      },
    );
    /** Deletes the specified transfer run. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.runs.delete(
      {
        name: 'Test string',
      },
    );
    /** Returns information about the particular transfer run. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.runs.get({
      name: 'Test string',
    });
    /** Returns information about running and completed transfer runs. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.runs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      runAttempt: 'Test string',
      states: 'Test string',
    });
    /** Returns log messages for the transfer run. */
    await gapi.client.bigquerydatatransfer.projects.transferConfigs.runs.transferLogs.list(
      {
        messageTypes: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
  }
});
