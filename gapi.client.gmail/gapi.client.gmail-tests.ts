/* This is stub file for gapi.client.gmail definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('gmail', 'v1', () => {
        /** now we can use gapi.client.gmail */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Read, compose, send, and permanently delete all your email from Gmail */
            'https://mail.google.com/',
            /** Manage drafts and send emails when you interact with the add-on */
            'https://www.googleapis.com/auth/gmail.addons.current.action.compose',
            /** View your email messages when you interact with the add-on */
            'https://www.googleapis.com/auth/gmail.addons.current.message.action',
            /** View your email message metadata when the add-on is running */
            'https://www.googleapis.com/auth/gmail.addons.current.message.metadata',
            /** View your email messages when the add-on is running */
            'https://www.googleapis.com/auth/gmail.addons.current.message.readonly',
            /** Manage drafts and send emails */
            'https://www.googleapis.com/auth/gmail.compose',
            /** Insert mail into your mailbox */
            'https://www.googleapis.com/auth/gmail.insert',
            /** Manage mailbox labels */
            'https://www.googleapis.com/auth/gmail.labels',
            /** View your email message metadata such as labels and headers, but not the email body */
            'https://www.googleapis.com/auth/gmail.metadata',
            /** View and modify but not delete your email */
            'https://www.googleapis.com/auth/gmail.modify',
            /** View your email messages and settings */
            'https://www.googleapis.com/auth/gmail.readonly',
            /** Send email on your behalf */
            'https://www.googleapis.com/auth/gmail.send',
            /** Manage your basic mail settings */
            'https://www.googleapis.com/auth/gmail.settings.basic',
            /** Manage your sensitive mail settings, including who can manage your mail */
            'https://www.googleapis.com/auth/gmail.settings.sharing',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Gets the current user's Gmail profile. */
        await gapi.client.gmail.users.getProfile({
            userId: "Test string",
        });
        /** Creates a new draft with the `DRAFT` label. */
        await gapi.client.gmail.users.drafts.create({
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /**
         * Immediately and permanently deletes the specified draft.
         * Does not simply trash it.
         */
        await gapi.client.gmail.users.drafts.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified draft. */
        await gapi.client.gmail.users.drafts.get({
            format: "Test string",
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the drafts in the user's mailbox. */
        await gapi.client.gmail.users.drafts.list({
            includeSpamTrash: true,
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /**
         * Sends the specified, existing draft to the recipients in the
         * `To`, `Cc`, and `Bcc` headers.
         */
        await gapi.client.gmail.users.drafts.send({
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /** Replaces a draft's content. */
        await gapi.client.gmail.users.drafts.update({
            id: "Test string",
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /**
         * Lists the history of all changes to the given mailbox. History results are
         * returned in chronological order (increasing `historyId`).
         */
        await gapi.client.gmail.users.history.list({
            historyTypes: "Test string",
            labelId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            startHistoryId: "Test string",
            userId: "Test string",
        });
        /** Creates a new label. */
        await gapi.client.gmail.users.labels.create({
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified label and removes it from
         * any messages and threads that it is applied to.
         */
        await gapi.client.gmail.users.labels.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified label. */
        await gapi.client.gmail.users.labels.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists all labels in the user's mailbox. */
        await gapi.client.gmail.users.labels.list({
            userId: "Test string",
        });
        /** Patch the specified label. */
        await gapi.client.gmail.users.labels.patch({
            id: "Test string",
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /** Updates the specified label. */
        await gapi.client.gmail.users.labels.update({
            id: "Test string",
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /**
         * Deletes many messages by message ID.  Provides no guarantees that messages
         * were not already deleted or even existed at all.
         */
        await gapi.client.gmail.users.messages.batchDelete({
            userId: "Test string",
        }, {
            ids: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Modifies the labels on the specified messages. */
        await gapi.client.gmail.users.messages.batchModify({
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            ids: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified message. This operation
         * cannot be undone.  Prefer `messages.trash` instead.
         */
        await gapi.client.gmail.users.messages.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message. */
        await gapi.client.gmail.users.messages.get({
            format: "Test string",
            id: "Test string",
            metadataHeaders: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Imports a message into only this user's mailbox, with standard
         * email delivery scanning and classification similar to receiving via SMTP.
         * Does not send a message.
         */
        await gapi.client.gmail.users.messages.import({
            deleted: true,
            internalDateSource: "Test string",
            neverMarkSpam: true,
            processForCalendar: true,
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Directly inserts a message into only this user's mailbox similar to
         * `IMAP APPEND`, bypassing most scanning and classification.
         * Does not send a message.
         */
        await gapi.client.gmail.users.messages.insert({
            deleted: true,
            internalDateSource: "Test string",
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Lists the messages in the user's mailbox. */
        await gapi.client.gmail.users.messages.list({
            includeSpamTrash: true,
            labelIds: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Modifies the labels on the specified message. */
        await gapi.client.gmail.users.messages.modify({
            id: "Test string",
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Sends the specified message to the recipients in the
         * `To`, `Cc`, and `Bcc` headers.
         */
        await gapi.client.gmail.users.messages.send({
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Moves the specified message to the trash. */
        await gapi.client.gmail.users.messages.trash({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Removes the specified message from the trash. */
        await gapi.client.gmail.users.messages.untrash({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Gets the auto-forwarding setting for the specified account. */
        await gapi.client.gmail.users.settings.getAutoForwarding({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets IMAP settings. */
        await gapi.client.gmail.users.settings.getImap({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets language settings. */
        await gapi.client.gmail.users.settings.getLanguage({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets POP settings. */
        await gapi.client.gmail.users.settings.getPop({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets vacation responder settings. */
        await gapi.client.gmail.users.settings.getVacation({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates the auto-forwarding setting for the specified account.  A verified
         * forwarding address must be specified when auto-forwarding is enabled.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.updateAutoForwarding({
            userId: "Test string",
        }, {
            disposition: "Test string",
            emailAddress: "Test string",
            enabled: true,
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates IMAP settings. */
        await gapi.client.gmail.users.settings.updateImap({
            userId: "Test string",
        }, {
            autoExpunge: true,
            enabled: true,
            expungeBehavior: "Test string",
            maxFolderSize: 42,
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates language settings.
         *
         * If successful, the return object contains the `displayLanguage`
         * that was saved for the user, which may differ from the value passed into
         * the request. This is because the requested `displayLanguage` may
         * not be directly supported by Gmail but have a close variant that is, and so
         * the variant may be chosen and saved instead.
         */
        await gapi.client.gmail.users.settings.updateLanguage({
            userId: "Test string",
        }, {
            displayLanguage: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates POP settings. */
        await gapi.client.gmail.users.settings.updatePop({
            userId: "Test string",
        }, {
            accessWindow: "Test string",
            disposition: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates vacation responder settings. */
        await gapi.client.gmail.users.settings.updateVacation({
            userId: "Test string",
        }, {
            enableAutoReply: true,
            endTime: "Test string",
            responseBodyHtml: "Test string",
            responseBodyPlainText: "Test string",
            responseSubject: "Test string",
            restrictToContacts: true,
            restrictToDomain: true,
            startTime: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified thread. This operation
         * cannot be undone. Prefer `threads.trash` instead.
         */
        await gapi.client.gmail.users.threads.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified thread. */
        await gapi.client.gmail.users.threads.get({
            format: "Test string",
            id: "Test string",
            metadataHeaders: "Test string",
            userId: "Test string",
        });
        /** Lists the threads in the user's mailbox. */
        await gapi.client.gmail.users.threads.list({
            includeSpamTrash: true,
            labelIds: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /**
         * Modifies the labels applied to the thread. This applies to all messages
         * in the thread.
         */
        await gapi.client.gmail.users.threads.modify({
            id: "Test string",
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Moves the specified thread to the trash. */
        await gapi.client.gmail.users.threads.trash({
            id: "Test string",
            userId: "Test string",
        });
        /** Removes the specified thread from the trash. */
        await gapi.client.gmail.users.threads.untrash({
            id: "Test string",
            userId: "Test string",
        });
        /** Stop receiving push notifications for the given user mailbox. */
        await gapi.client.gmail.users.stop({
            userId: "Test string",
        });
        /** Creates a new draft with the `DRAFT` label. */
        await gapi.client.gmail.users.drafts.create({
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /**
         * Immediately and permanently deletes the specified draft.
         * Does not simply trash it.
         */
        await gapi.client.gmail.users.drafts.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified draft. */
        await gapi.client.gmail.users.drafts.get({
            format: "Test string",
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the drafts in the user's mailbox. */
        await gapi.client.gmail.users.drafts.list({
            includeSpamTrash: true,
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /**
         * Sends the specified, existing draft to the recipients in the
         * `To`, `Cc`, and `Bcc` headers.
         */
        await gapi.client.gmail.users.drafts.send({
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /** Replaces a draft's content. */
        await gapi.client.gmail.users.drafts.update({
            id: "Test string",
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /**
         * Lists the history of all changes to the given mailbox. History results are
         * returned in chronological order (increasing `historyId`).
         */
        await gapi.client.gmail.users.history.list({
            historyTypes: "Test string",
            labelId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            startHistoryId: "Test string",
            userId: "Test string",
        });
        /** Creates a new label. */
        await gapi.client.gmail.users.labels.create({
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified label and removes it from
         * any messages and threads that it is applied to.
         */
        await gapi.client.gmail.users.labels.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified label. */
        await gapi.client.gmail.users.labels.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists all labels in the user's mailbox. */
        await gapi.client.gmail.users.labels.list({
            userId: "Test string",
        });
        /** Patch the specified label. */
        await gapi.client.gmail.users.labels.patch({
            id: "Test string",
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /** Updates the specified label. */
        await gapi.client.gmail.users.labels.update({
            id: "Test string",
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /**
         * Deletes many messages by message ID.  Provides no guarantees that messages
         * were not already deleted or even existed at all.
         */
        await gapi.client.gmail.users.messages.batchDelete({
            userId: "Test string",
        }, {
            ids: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Modifies the labels on the specified messages. */
        await gapi.client.gmail.users.messages.batchModify({
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            ids: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified message. This operation
         * cannot be undone.  Prefer `messages.trash` instead.
         */
        await gapi.client.gmail.users.messages.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message. */
        await gapi.client.gmail.users.messages.get({
            format: "Test string",
            id: "Test string",
            metadataHeaders: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Imports a message into only this user's mailbox, with standard
         * email delivery scanning and classification similar to receiving via SMTP.
         * Does not send a message.
         */
        await gapi.client.gmail.users.messages.import({
            deleted: true,
            internalDateSource: "Test string",
            neverMarkSpam: true,
            processForCalendar: true,
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Directly inserts a message into only this user's mailbox similar to
         * `IMAP APPEND`, bypassing most scanning and classification.
         * Does not send a message.
         */
        await gapi.client.gmail.users.messages.insert({
            deleted: true,
            internalDateSource: "Test string",
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Lists the messages in the user's mailbox. */
        await gapi.client.gmail.users.messages.list({
            includeSpamTrash: true,
            labelIds: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Modifies the labels on the specified message. */
        await gapi.client.gmail.users.messages.modify({
            id: "Test string",
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Sends the specified message to the recipients in the
         * `To`, `Cc`, and `Bcc` headers.
         */
        await gapi.client.gmail.users.messages.send({
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Moves the specified message to the trash. */
        await gapi.client.gmail.users.messages.trash({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Removes the specified message from the trash. */
        await gapi.client.gmail.users.messages.untrash({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Gets the auto-forwarding setting for the specified account. */
        await gapi.client.gmail.users.settings.getAutoForwarding({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets IMAP settings. */
        await gapi.client.gmail.users.settings.getImap({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets language settings. */
        await gapi.client.gmail.users.settings.getLanguage({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets POP settings. */
        await gapi.client.gmail.users.settings.getPop({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets vacation responder settings. */
        await gapi.client.gmail.users.settings.getVacation({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates the auto-forwarding setting for the specified account.  A verified
         * forwarding address must be specified when auto-forwarding is enabled.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.updateAutoForwarding({
            userId: "Test string",
        }, {
            disposition: "Test string",
            emailAddress: "Test string",
            enabled: true,
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates IMAP settings. */
        await gapi.client.gmail.users.settings.updateImap({
            userId: "Test string",
        }, {
            autoExpunge: true,
            enabled: true,
            expungeBehavior: "Test string",
            maxFolderSize: 42,
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates language settings.
         *
         * If successful, the return object contains the `displayLanguage`
         * that was saved for the user, which may differ from the value passed into
         * the request. This is because the requested `displayLanguage` may
         * not be directly supported by Gmail but have a close variant that is, and so
         * the variant may be chosen and saved instead.
         */
        await gapi.client.gmail.users.settings.updateLanguage({
            userId: "Test string",
        }, {
            displayLanguage: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates POP settings. */
        await gapi.client.gmail.users.settings.updatePop({
            userId: "Test string",
        }, {
            accessWindow: "Test string",
            disposition: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates vacation responder settings. */
        await gapi.client.gmail.users.settings.updateVacation({
            userId: "Test string",
        }, {
            enableAutoReply: true,
            endTime: "Test string",
            responseBodyHtml: "Test string",
            responseBodyPlainText: "Test string",
            responseSubject: "Test string",
            restrictToContacts: true,
            restrictToDomain: true,
            startTime: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified thread. This operation
         * cannot be undone. Prefer `threads.trash` instead.
         */
        await gapi.client.gmail.users.threads.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified thread. */
        await gapi.client.gmail.users.threads.get({
            format: "Test string",
            id: "Test string",
            metadataHeaders: "Test string",
            userId: "Test string",
        });
        /** Lists the threads in the user's mailbox. */
        await gapi.client.gmail.users.threads.list({
            includeSpamTrash: true,
            labelIds: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /**
         * Modifies the labels applied to the thread. This applies to all messages
         * in the thread.
         */
        await gapi.client.gmail.users.threads.modify({
            id: "Test string",
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Moves the specified thread to the trash. */
        await gapi.client.gmail.users.threads.trash({
            id: "Test string",
            userId: "Test string",
        });
        /** Removes the specified thread from the trash. */
        await gapi.client.gmail.users.threads.untrash({
            id: "Test string",
            userId: "Test string",
        });
        /** Set up or update a push notification watch on the given user mailbox. */
        await gapi.client.gmail.users.watch({
            userId: "Test string",
        }, {
            labelFilterAction: "Test string",
            labelIds: [
                "Test string"            ],
            topicName: "Test string",
        });
        /** Creates a new draft with the `DRAFT` label. */
        await gapi.client.gmail.users.drafts.create({
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /**
         * Immediately and permanently deletes the specified draft.
         * Does not simply trash it.
         */
        await gapi.client.gmail.users.drafts.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified draft. */
        await gapi.client.gmail.users.drafts.get({
            format: "Test string",
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the drafts in the user's mailbox. */
        await gapi.client.gmail.users.drafts.list({
            includeSpamTrash: true,
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /**
         * Sends the specified, existing draft to the recipients in the
         * `To`, `Cc`, and `Bcc` headers.
         */
        await gapi.client.gmail.users.drafts.send({
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /** Replaces a draft's content. */
        await gapi.client.gmail.users.drafts.update({
            id: "Test string",
            userId: "Test string",
        }, {
            id: "Test string",
            message: {
                historyId: "Test string",
                id: "Test string",
                internalDate: "Test string",
                labelIds: [
                    "Test string"                ],
                payload: {
                    body: {
                        attachmentId: "Test string",
                        data: "Test string",
                        size: 42,
                    },
                    filename: "Test string",
                    headers: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }                    ],
                    mimeType: "Test string",
                    partId: "Test string",
                    parts: undefined,
                },
                raw: "Test string",
                sizeEstimate: 42,
                snippet: "Test string",
                threadId: "Test string",
            },
        });
        /**
         * Lists the history of all changes to the given mailbox. History results are
         * returned in chronological order (increasing `historyId`).
         */
        await gapi.client.gmail.users.history.list({
            historyTypes: "Test string",
            labelId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            startHistoryId: "Test string",
            userId: "Test string",
        });
        /** Creates a new label. */
        await gapi.client.gmail.users.labels.create({
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified label and removes it from
         * any messages and threads that it is applied to.
         */
        await gapi.client.gmail.users.labels.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified label. */
        await gapi.client.gmail.users.labels.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists all labels in the user's mailbox. */
        await gapi.client.gmail.users.labels.list({
            userId: "Test string",
        });
        /** Patch the specified label. */
        await gapi.client.gmail.users.labels.patch({
            id: "Test string",
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /** Updates the specified label. */
        await gapi.client.gmail.users.labels.update({
            id: "Test string",
            userId: "Test string",
        }, {
            color: {
                backgroundColor: "Test string",
                textColor: "Test string",
            },
            id: "Test string",
            labelListVisibility: "Test string",
            messageListVisibility: "Test string",
            messagesTotal: 42,
            messagesUnread: 42,
            name: "Test string",
            threadsTotal: 42,
            threadsUnread: 42,
            type: "Test string",
        });
        /**
         * Deletes many messages by message ID.  Provides no guarantees that messages
         * were not already deleted or even existed at all.
         */
        await gapi.client.gmail.users.messages.batchDelete({
            userId: "Test string",
        }, {
            ids: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Modifies the labels on the specified messages. */
        await gapi.client.gmail.users.messages.batchModify({
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            ids: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified message. This operation
         * cannot be undone.  Prefer `messages.trash` instead.
         */
        await gapi.client.gmail.users.messages.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message. */
        await gapi.client.gmail.users.messages.get({
            format: "Test string",
            id: "Test string",
            metadataHeaders: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Imports a message into only this user's mailbox, with standard
         * email delivery scanning and classification similar to receiving via SMTP.
         * Does not send a message.
         */
        await gapi.client.gmail.users.messages.import({
            deleted: true,
            internalDateSource: "Test string",
            neverMarkSpam: true,
            processForCalendar: true,
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Directly inserts a message into only this user's mailbox similar to
         * `IMAP APPEND`, bypassing most scanning and classification.
         * Does not send a message.
         */
        await gapi.client.gmail.users.messages.insert({
            deleted: true,
            internalDateSource: "Test string",
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Lists the messages in the user's mailbox. */
        await gapi.client.gmail.users.messages.list({
            includeSpamTrash: true,
            labelIds: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Modifies the labels on the specified message. */
        await gapi.client.gmail.users.messages.modify({
            id: "Test string",
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /**
         * Sends the specified message to the recipients in the
         * `To`, `Cc`, and `Bcc` headers.
         */
        await gapi.client.gmail.users.messages.send({
            userId: "Test string",
        }, {
            historyId: "Test string",
            id: "Test string",
            internalDate: "Test string",
            labelIds: [
                "Test string"            ],
            payload: {
                body: {
                    attachmentId: "Test string",
                    data: "Test string",
                    size: 42,
                },
                filename: "Test string",
                headers: [
                    {
                        name: "Test string",
                        value: "Test string",
                    }                ],
                mimeType: "Test string",
                partId: "Test string",
                parts: undefined,
            },
            raw: "Test string",
            sizeEstimate: 42,
            snippet: "Test string",
            threadId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Moves the specified message to the trash. */
        await gapi.client.gmail.users.messages.trash({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Removes the specified message from the trash. */
        await gapi.client.gmail.users.messages.untrash({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified message attachment. */
        await gapi.client.gmail.users.messages.attachments.get({
            id: "Test string",
            messageId: "Test string",
            userId: "Test string",
        });
        /** Gets the auto-forwarding setting for the specified account. */
        await gapi.client.gmail.users.settings.getAutoForwarding({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets IMAP settings. */
        await gapi.client.gmail.users.settings.getImap({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets language settings. */
        await gapi.client.gmail.users.settings.getLanguage({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets POP settings. */
        await gapi.client.gmail.users.settings.getPop({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets vacation responder settings. */
        await gapi.client.gmail.users.settings.getVacation({
            userId: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates the auto-forwarding setting for the specified account.  A verified
         * forwarding address must be specified when auto-forwarding is enabled.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.updateAutoForwarding({
            userId: "Test string",
        }, {
            disposition: "Test string",
            emailAddress: "Test string",
            enabled: true,
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates IMAP settings. */
        await gapi.client.gmail.users.settings.updateImap({
            userId: "Test string",
        }, {
            autoExpunge: true,
            enabled: true,
            expungeBehavior: "Test string",
            maxFolderSize: 42,
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates language settings.
         *
         * If successful, the return object contains the `displayLanguage`
         * that was saved for the user, which may differ from the value passed into
         * the request. This is because the requested `displayLanguage` may
         * not be directly supported by Gmail but have a close variant that is, and so
         * the variant may be chosen and saved instead.
         */
        await gapi.client.gmail.users.settings.updateLanguage({
            userId: "Test string",
        }, {
            displayLanguage: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates POP settings. */
        await gapi.client.gmail.users.settings.updatePop({
            userId: "Test string",
        }, {
            accessWindow: "Test string",
            disposition: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Updates vacation responder settings. */
        await gapi.client.gmail.users.settings.updateVacation({
            userId: "Test string",
        }, {
            enableAutoReply: true,
            endTime: "Test string",
            responseBodyHtml: "Test string",
            responseBodyPlainText: "Test string",
            responseSubject: "Test string",
            restrictToContacts: true,
            restrictToDomain: true,
            startTime: "Test string",
        });
        /**
         * Adds a delegate with its verification status set directly to
         * `accepted`, without sending any verification email.  The
         * delegate user must be a member of the same G Suite organization as the
         * delegator user.
         *
         * Gmail imposes limitations on the number of delegates and delegators each
         * user in a G Suite organization can have. These limits depend on your
         * organization, but in general each user can have up to 25 delegates and
         * up to 10 delegators.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * Also note that when a new delegate is created, there may be up to a one
         * minute delay before the new delegate is available for use.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.create({
            userId: "Test string",
        }, {
            delegateEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Removes the specified delegate (which can be of any verification status),
         * and revokes any verification that may have been required for using it.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.delete({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified delegate.
         *
         * Note that a delegate user must be referred to by their primary email
         * address, and not an email alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.get({
            delegateEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the delegates for the specified account.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.delegates.list({
            userId: "Test string",
        });
        /** Creates a filter. */
        await gapi.client.gmail.users.settings.filters.create({
            userId: "Test string",
        }, {
            action: {
                addLabelIds: [
                    "Test string"                ],
                forward: "Test string",
                removeLabelIds: [
                    "Test string"                ],
            },
            criteria: {
                excludeChats: true,
                from: "Test string",
                hasAttachment: true,
                negatedQuery: "Test string",
                query: "Test string",
                size: 42,
                sizeComparison: "Test string",
                subject: "Test string",
                to: "Test string",
            },
            id: "Test string",
        });
        /** Deletes a filter. */
        await gapi.client.gmail.users.settings.filters.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets a filter. */
        await gapi.client.gmail.users.settings.filters.get({
            id: "Test string",
            userId: "Test string",
        });
        /** Lists the message filters of a Gmail user. */
        await gapi.client.gmail.users.settings.filters.list({
            userId: "Test string",
        });
        /**
         * Creates a forwarding address.  If ownership verification is required, a
         * message will be sent to the recipient and the resource's verification
         * status will be set to `pending`; otherwise, the resource will be
         * created with verification status set to `accepted`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.create({
            userId: "Test string",
        }, {
            forwardingEmail: "Test string",
            verificationStatus: "Test string",
        });
        /**
         * Deletes the specified forwarding address and revokes any verification that
         * may have been required.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.forwardingAddresses.delete({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified forwarding address. */
        await gapi.client.gmail.users.settings.forwardingAddresses.get({
            forwardingEmail: "Test string",
            userId: "Test string",
        });
        /** Lists the forwarding addresses for the specified account. */
        await gapi.client.gmail.users.settings.forwardingAddresses.list({
            userId: "Test string",
        });
        /**
         * Creates a custom "from" send-as alias.  If an SMTP MSA is specified, Gmail
         * will attempt to connect to the SMTP service to validate the configuration
         * before creating the alias.  If ownership verification is required for the
         * alias, a message will be sent to the email address and the resource's
         * verification status will be set to `pending`; otherwise, the
         * resource will be created with verification status set to
         * `accepted`.  If a signature is provided, Gmail will sanitize the
         * HTML before saving it with the alias.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.create({
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the specified send-as alias.  Revokes any verification that may
         * have been required for using it.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.delete({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Gets the specified send-as alias.  Fails with an HTTP 404 error if the
         * specified address is not a member of the collection.
         */
        await gapi.client.gmail.users.settings.sendAs.get({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Lists the send-as aliases for the specified account.  The result includes
         * the primary send-as address associated with the account as well as any
         * custom "from" aliases.
         */
        await gapi.client.gmail.users.settings.sendAs.list({
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Patch the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.patch({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Updates a send-as alias.  If a signature is provided, Gmail will sanitize
         * the HTML before saving it with the alias.
         *
         * Addresses other than the primary address for the account can only be
         * updated by service account clients that have been delegated domain-wide
         * authority.
         */
        await gapi.client.gmail.users.settings.sendAs.update({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            displayName: "Test string",
            isDefault: true,
            isPrimary: true,
            replyToAddress: "Test string",
            sendAsEmail: "Test string",
            signature: "Test string",
            smtpMsa: {
                host: "Test string",
                password: "Test string",
                port: 42,
                securityMode: "Test string",
                username: "Test string",
            },
            treatAsAlias: true,
            verificationStatus: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Sends a verification email to the specified send-as alias address.
         * The verification status must be `pending`.
         *
         * This method is only available to service account clients that have been
         * delegated domain-wide authority.
         */
        await gapi.client.gmail.users.settings.sendAs.verify({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Deletes the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.delete({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Gets the specified S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.get({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Insert (upload) the given S/MIME config for the specified send-as alias.
         * Note that pkcs12 format is required for the key.
         */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.insert({
            sendAsEmail: "Test string",
            userId: "Test string",
        }, {
            encryptedKeyPassword: "Test string",
            expiration: "Test string",
            id: "Test string",
            isDefault: true,
            issuerCn: "Test string",
            pem: "Test string",
            pkcs12: "Test string",
        });
        /** Lists S/MIME configs for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.list({
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /** Sets the default S/MIME config for the specified send-as alias. */
        await gapi.client.gmail.users.settings.sendAs.smimeInfo.setDefault({
            id: "Test string",
            sendAsEmail: "Test string",
            userId: "Test string",
        });
        /**
         * Immediately and permanently deletes the specified thread. This operation
         * cannot be undone. Prefer `threads.trash` instead.
         */
        await gapi.client.gmail.users.threads.delete({
            id: "Test string",
            userId: "Test string",
        });
        /** Gets the specified thread. */
        await gapi.client.gmail.users.threads.get({
            format: "Test string",
            id: "Test string",
            metadataHeaders: "Test string",
            userId: "Test string",
        });
        /** Lists the threads in the user's mailbox. */
        await gapi.client.gmail.users.threads.list({
            includeSpamTrash: true,
            labelIds: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            q: "Test string",
            userId: "Test string",
        });
        /**
         * Modifies the labels applied to the thread. This applies to all messages
         * in the thread.
         */
        await gapi.client.gmail.users.threads.modify({
            id: "Test string",
            userId: "Test string",
        }, {
            addLabelIds: [
                "Test string"            ],
            removeLabelIds: [
                "Test string"            ],
        });
        /** Moves the specified thread to the trash. */
        await gapi.client.gmail.users.threads.trash({
            id: "Test string",
            userId: "Test string",
        });
        /** Removes the specified thread from the trash. */
        await gapi.client.gmail.users.threads.untrash({
            id: "Test string",
            userId: "Test string",
        });
    }
});
