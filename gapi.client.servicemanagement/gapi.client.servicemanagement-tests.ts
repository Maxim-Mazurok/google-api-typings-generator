/* This is stub file for gapi.client.servicemanagement definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('servicemanagement', 'v1', () => {
        /** now we can use gapi.client.servicemanagement */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
            /** Manage your Google API service configuration */
            'https://www.googleapis.com/auth/service.management',
            /** View your Google API service configuration */
            'https://www.googleapis.com/auth/service.management.readonly',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.servicemanagement.operations.get({
            name: "Test string",
        });
        /** Lists service operations that match the specified filter in the request. */
        await gapi.client.servicemanagement.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Creates a new managed service. A managed service is immutable, and is subject to mandatory 30-day data retention. You cannot move a service or recreate it within 30 days after deletion.
         * One producer project can own no more than 500 services. For security and reliability purposes, a production service should be hosted in a dedicated producer project. Operation
         */
        await gapi.client.servicemanagement.services.create({
        }, {
            producerProjectId: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Deletes a managed service. This method will change the service to the `Soft-Delete` state for 30 days. Within this period, service producers may call UndeleteService to restore the
         * service. After 30 days, the service will be permanently deleted. Operation
         */
        await gapi.client.servicemanagement.services.delete({
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /** Disables a service for a project, so it can no longer be be used for the project. It prevents accidental usage that may cause unexpected billing charges or security leaks. Operation */
        await gapi.client.servicemanagement.services.disable({
            serviceName: "Test string",
        }, {
            consumerId: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /** Enables a service for a project, so it can be used for the project. See [Cloud Auth Guide](https://cloud.google.com/docs/authentication) for more information. Operation */
        await gapi.client.servicemanagement.services.enable({
            serviceName: "Test string",
        }, {
            consumerId: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Generates and returns a report (errors, warnings and changes from existing configurations) associated with GenerateConfigReportRequest.new_value If GenerateConfigReportRequest.old_value
         * is specified, GenerateConfigReportRequest will contain a single ChangeReport based on the comparison between GenerateConfigReportRequest.new_value and
         * GenerateConfigReportRequest.old_value. If GenerateConfigReportRequest.old_value is not specified, this method will compare GenerateConfigReportRequest.new_value with the last pushed
         * service configuration.
         */
        await gapi.client.servicemanagement.services.generateConfigReport({
        }, {
            newConfig: {
                A: 42            },
            oldConfig: {
                A: 42            },
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /** Gets a managed service. Authentication is required unless the service is public. */
        await gapi.client.servicemanagement.services.get({
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.getConfig({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Lists managed services. Returns all public services. For authenticated users, also returns all services the calling user has "servicemanagement.services.get" permission for. **BETA:**
         * If the caller specifies the `consumer_id`, it returns only the services enabled on the consumer. The `consumer_id` must have the format of "project:{PROJECT-ID}".
         */
        await gapi.client.servicemanagement.services.list({
            consumerId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            producerProjectId: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Revives a previously deleted managed service. The method restores the service using the configuration at the time the service was deleted. The target service must exist and must have
         * been deleted within the last 30 days. Operation
         */
        await gapi.client.servicemanagement.services.undelete({
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please
         * call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
         */
        await gapi.client.servicemanagement.services.configs.create({
            serviceName: "Test string",
        }, {
            apis: [
                {
                    methods: [
                        {
                            name: "Test string",
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            requestStreaming: true,
                            requestTypeUrl: "Test string",
                            responseStreaming: true,
                            responseTypeUrl: "Test string",
                            syntax: "Test string",
                        }                    ],
                    mixins: [
                        {
                            name: "Test string",
                            root: "Test string",
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                    version: "Test string",
                }            ],
            authentication: {
                providers: [
                    {
                        audiences: "Test string",
                        authorizationUrl: "Test string",
                        id: "Test string",
                        issuer: "Test string",
                        jwksUri: "Test string",
                        jwtLocations: [
                            {
                                header: "Test string",
                                query: "Test string",
                                valuePrefix: "Test string",
                            }                        ],
                    }                ],
                rules: [
                    {
                        allowWithoutCredential: true,
                        oauth: {
                            canonicalScopes: "Test string",
                        },
                        requirements: [
                            {
                                audiences: "Test string",
                                providerId: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            backend: {
                rules: [
                    {
                        address: "Test string",
                        deadline: 42,
                        disableAuth: true,
                        jwtAudience: "Test string",
                        minDeadline: 42,
                        operationDeadline: 42,
                        pathTranslation: "Test string",
                        protocol: "Test string",
                        selector: "Test string",
                    }                ],
            },
            billing: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            configVersion: 42,
            context: {
                rules: [
                    {
                        allowedRequestExtensions: [
                            "Test string"                        ],
                        allowedResponseExtensions: [
                            "Test string"                        ],
                        provided: [
                            "Test string"                        ],
                        requested: [
                            "Test string"                        ],
                        selector: "Test string",
                    }                ],
            },
            control: {
                environment: "Test string",
            },
            customError: {
                rules: [
                    {
                        isErrorType: true,
                        selector: "Test string",
                    }                ],
                types: [
                    "Test string"                ],
            },
            documentation: {
                documentationRootUrl: "Test string",
                overview: "Test string",
                pages: [
                    {
                        content: "Test string",
                        name: "Test string",
                        subpages: undefined,
                    }                ],
                rules: [
                    {
                        deprecationDescription: "Test string",
                        description: "Test string",
                        selector: "Test string",
                    }                ],
                serviceRootUrl: "Test string",
                summary: "Test string",
            },
            endpoints: [
                {
                    aliases: [
                        "Test string"                    ],
                    allowCors: true,
                    name: "Test string",
                    target: "Test string",
                }            ],
            enums: [
                {
                    enumvalue: [
                        {
                            name: "Test string",
                            number: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                        }                    ],
                    name: "Test string",
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            http: {
                fullyDecodeReservedExpansion: true,
                rules: [
                    {
                        additionalBindings: undefined,
                        allowHalfDuplex: true,
                        body: "Test string",
                        custom: {
                            kind: "Test string",
                            path: "Test string",
                        },
                        delete: "Test string",
                        get: "Test string",
                        patch: "Test string",
                        post: "Test string",
                        put: "Test string",
                        responseBody: "Test string",
                        selector: "Test string",
                    }                ],
            },
            id: "Test string",
            logging: {
                consumerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        logs: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            logs: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    name: "Test string",
                }            ],
            metrics: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    metadata: {
                        ingestDelay: "Test string",
                        launchStage: "Test string",
                        samplePeriod: "Test string",
                    },
                    metricKind: "Test string",
                    monitoredResourceTypes: [
                        "Test string"                    ],
                    name: "Test string",
                    type: "Test string",
                    unit: "Test string",
                    valueType: "Test string",
                }            ],
            monitoredResources: [
                {
                    description: "Test string",
                    displayName: "Test string",
                    labels: [
                        {
                            description: "Test string",
                            key: "Test string",
                            valueType: "Test string",
                        }                    ],
                    launchStage: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            monitoring: {
                consumerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
                producerDestinations: [
                    {
                        metrics: [
                            "Test string"                        ],
                        monitoredResource: "Test string",
                    }                ],
            },
            name: "Test string",
            producerProjectId: "Test string",
            quota: {
                limits: [
                    {
                        defaultLimit: "Test string",
                        description: "Test string",
                        displayName: "Test string",
                        duration: "Test string",
                        freeTier: "Test string",
                        maxLimit: "Test string",
                        metric: "Test string",
                        name: "Test string",
                        unit: "Test string",
                        values: {
                            A: "Test string"                        },
                    }                ],
                metricRules: [
                    {
                        metricCosts: {
                            A: "Test string"                        },
                        selector: "Test string",
                    }                ],
            },
            sourceInfo: {
                sourceFiles: [
                    {
                        A: 42                    }                ],
            },
            systemParameters: {
                rules: [
                    {
                        parameters: [
                            {
                                httpHeader: "Test string",
                                name: "Test string",
                                urlQueryParameter: "Test string",
                            }                        ],
                        selector: "Test string",
                    }                ],
            },
            systemTypes: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            title: "Test string",
            types: [
                {
                    fields: [
                        {
                            cardinality: "Test string",
                            defaultValue: "Test string",
                            jsonName: "Test string",
                            kind: "Test string",
                            name: "Test string",
                            number: 42,
                            oneofIndex: 42,
                            options: [
                                {
                                    name: "Test string",
                                    value: {
                                        A: 42                                    },
                                }                            ],
                            packed: true,
                            typeUrl: "Test string",
                        }                    ],
                    name: "Test string",
                    oneofs: [
                        "Test string"                    ],
                    options: [
                        {
                            name: "Test string",
                            value: {
                                A: 42                            },
                        }                    ],
                    sourceContext: {
                        fileName: "Test string",
                    },
                    syntax: "Test string",
                }            ],
            usage: {
                producerNotificationChannel: "Test string",
                requirements: [
                    "Test string"                ],
                rules: [
                    {
                        allowUnregisteredCalls: true,
                        selector: "Test string",
                        skipServiceControl: true,
                    }                ],
                serviceIdentity: {
                    description: "Test string",
                    displayName: "Test string",
                    serviceAccountParent: "Test string",
                },
            },
        });
        /** Gets a service configuration (version) for a managed service. */
        await gapi.client.servicemanagement.services.configs.get({
            configId: "Test string",
            serviceName: "Test string",
            view: "Test string",
        });
        /** Lists the history of the service configuration for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.configs.list({
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
        /**
         * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source
         * configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent
         * configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.configs.submit({
            serviceName: "Test string",
        }, {
            configSource: {
                files: [
                    {
                        fileContents: "Test string",
                        filePath: "Test string",
                        fileType: "Test string",
                    }                ],
                id: "Test string",
            },
            validateOnly: true,
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.servicemanagement.services.consumers.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.servicemanagement.services.consumers.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.servicemanagement.services.consumers.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the
         * logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so
         * that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent)
         * rollouts are kept for each service. The rest will be deleted eventually. Operation
         */
        await gapi.client.servicemanagement.services.rollouts.create({
            serviceName: "Test string",
        }, {
            createdBy: "Test string",
            createTime: "Test string",
            deleteServiceStrategy: {
            },
            rolloutId: "Test string",
            serviceName: "Test string",
            status: "Test string",
            trafficPercentStrategy: {
                percentages: {
                    A: 42                },
            },
        });
        /** Gets a service configuration rollout. */
        await gapi.client.servicemanagement.services.rollouts.get({
            rolloutId: "Test string",
            serviceName: "Test string",
        });
        /** Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest. */
        await gapi.client.servicemanagement.services.rollouts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            serviceName: "Test string",
        });
    }
});
