/* This is stub file for gapi.client.reseller definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('reseller', 'v1', () => {
        /** now we can use gapi.client.reseller */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage users on your domain */
            'https://www.googleapis.com/auth/apps.order',
            /** Manage users on your domain */
            'https://www.googleapis.com/auth/apps.order.readonly',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Get a customer account. */
        await gapi.client.reseller.customers.get({
            customerId: "Test string",
        });
        /** Order a new customer's account. */
        await gapi.client.reseller.customers.insert({
            customerAuthToken: "Test string",
        }, {
            alternateEmail: "Test string",
            customerDomain: "Test string",
            customerDomainVerified: true,
            customerId: "Test string",
            kind: "Test string",
            phoneNumber: "Test string",
            postalAddress: {
                addressLine1: "Test string",
                addressLine2: "Test string",
                addressLine3: "Test string",
                contactName: "Test string",
                countryCode: "Test string",
                kind: "Test string",
                locality: "Test string",
                organizationName: "Test string",
                postalCode: "Test string",
                region: "Test string",
            },
            resourceUiUrl: "Test string",
        });
        /** Update a customer account's settings. This method supports patch semantics. */
        await gapi.client.reseller.customers.patch({
            customerId: "Test string",
        }, {
            alternateEmail: "Test string",
            customerDomain: "Test string",
            customerDomainVerified: true,
            customerId: "Test string",
            kind: "Test string",
            phoneNumber: "Test string",
            postalAddress: {
                addressLine1: "Test string",
                addressLine2: "Test string",
                addressLine3: "Test string",
                contactName: "Test string",
                countryCode: "Test string",
                kind: "Test string",
                locality: "Test string",
                organizationName: "Test string",
                postalCode: "Test string",
                region: "Test string",
            },
            resourceUiUrl: "Test string",
        });
        /** Update a customer account's settings. */
        await gapi.client.reseller.customers.update({
            customerId: "Test string",
        }, {
            alternateEmail: "Test string",
            customerDomain: "Test string",
            customerDomainVerified: true,
            customerId: "Test string",
            kind: "Test string",
            phoneNumber: "Test string",
            postalAddress: {
                addressLine1: "Test string",
                addressLine2: "Test string",
                addressLine3: "Test string",
                contactName: "Test string",
                countryCode: "Test string",
                kind: "Test string",
                locality: "Test string",
                organizationName: "Test string",
                postalCode: "Test string",
                region: "Test string",
            },
            resourceUiUrl: "Test string",
        });
        /** Returns all the details of the watch corresponding to the reseller. */
        await gapi.client.reseller.resellernotify.getwatchdetails();
        /** Registers a Reseller for receiving notifications. */
        await gapi.client.reseller.resellernotify.register({
            serviceAccountEmailAddress: "Test string",
        });
        /** Unregisters a Reseller for receiving notifications. */
        await gapi.client.reseller.resellernotify.unregister({
            serviceAccountEmailAddress: "Test string",
        });
        /** Activates a subscription previously suspended by the reseller */
        await gapi.client.reseller.subscriptions.activate({
            customerId: "Test string",
            subscriptionId: "Test string",
        });
        /** Update a subscription plan. Use this method to update a plan for a 30-day trial or a flexible plan subscription to an annual commitment plan with monthly or yearly payments. */
        await gapi.client.reseller.subscriptions.changePlan({
            customerId: "Test string",
            subscriptionId: "Test string",
        }, {
            dealCode: "Test string",
            kind: "Test string",
            planName: "Test string",
            purchaseOrderId: "Test string",
            seats: {
                kind: "Test string",
                licensedNumberOfSeats: 42,
                maximumNumberOfSeats: 42,
                numberOfSeats: 42,
            },
        });
        /** Update a user license's renewal settings. This is applicable for accounts with annual commitment plans only. */
        await gapi.client.reseller.subscriptions.changeRenewalSettings({
            customerId: "Test string",
            subscriptionId: "Test string",
        }, {
            kind: "Test string",
            renewalType: "Test string",
        });
        /** Update a subscription's user license settings. */
        await gapi.client.reseller.subscriptions.changeSeats({
            customerId: "Test string",
            subscriptionId: "Test string",
        }, {
            kind: "Test string",
            licensedNumberOfSeats: 42,
            maximumNumberOfSeats: 42,
            numberOfSeats: 42,
        });
        /** Cancel, suspend, or transfer a subscription to direct. */
        await gapi.client.reseller.subscriptions.delete({
            customerId: "Test string",
            deletionType: "Test string",
            subscriptionId: "Test string",
        });
        /** Get a specific subscription. */
        await gapi.client.reseller.subscriptions.get({
            customerId: "Test string",
            subscriptionId: "Test string",
        });
        /** Create or transfer a subscription. */
        await gapi.client.reseller.subscriptions.insert({
            customerAuthToken: "Test string",
            customerId: "Test string",
        }, {
            billingMethod: "Test string",
            creationTime: "Test string",
            customerDomain: "Test string",
            customerId: "Test string",
            dealCode: "Test string",
            kind: "Test string",
            plan: {
                commitmentInterval: {
                    endTime: "Test string",
                    startTime: "Test string",
                },
                isCommitmentPlan: true,
                planName: "Test string",
            },
            purchaseOrderId: "Test string",
            renewalSettings: {
                kind: "Test string",
                renewalType: "Test string",
            },
            resourceUiUrl: "Test string",
            seats: {
                kind: "Test string",
                licensedNumberOfSeats: 42,
                maximumNumberOfSeats: 42,
                numberOfSeats: 42,
            },
            skuId: "Test string",
            skuName: "Test string",
            status: "Test string",
            subscriptionId: "Test string",
            suspensionReasons: [
                "Test string"            ],
            transferInfo: {
                minimumTransferableSeats: 42,
                transferabilityExpirationTime: "Test string",
            },
            trialSettings: {
                isInTrial: true,
                trialEndTime: "Test string",
            },
        });
        /** List of subscriptions managed by the reseller. The list can be all subscriptions, all of a customer's subscriptions, or all of a customer's transferable subscriptions. */
        await gapi.client.reseller.subscriptions.list({
            customerAuthToken: "Test string",
            customerId: "Test string",
            customerNamePrefix: "Test string",
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Immediately move a 30-day free trial subscription to a paid service subscription. */
        await gapi.client.reseller.subscriptions.startPaidService({
            customerId: "Test string",
            subscriptionId: "Test string",
        });
        /** Suspends an active subscription. */
        await gapi.client.reseller.subscriptions.suspend({
            customerId: "Test string",
            subscriptionId: "Test string",
        });
    }
});
