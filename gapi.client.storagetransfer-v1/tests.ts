/* This is stub file for gapi.client.storagetransfer-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241116

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://storagetransfer.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.storagetransfer */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Returns the Google service account that is used by Storage Transfer Service to access buckets in the project where transfers run or in other projects. Each Google service account is associated with one Google Cloud project. Users should add this service account to the Google Cloud Storage bucket ACLs to grant access to Storage Transfer Service. This service account is created and owned by Storage Transfer Service and can only be used by Storage Transfer Service. */
    await gapi.client.storagetransfer.googleServiceAccounts.get({
      projectId: 'Test string',
    });
    /** Creates an agent pool resource. */
    await gapi.client.storagetransfer.projects.agentPools.create(
      {
        agentPoolId: 'Test string',
        projectId: 'Test string',
      },
      {
        bandwidthLimit: {
          limitMbps: 'Test string',
        },
        displayName: 'Test string',
        name: 'Test string',
        state: 'Test string',
      }
    );
    /** Deletes an agent pool. */
    await gapi.client.storagetransfer.projects.agentPools.delete({
      name: 'Test string',
    });
    /** Gets an agent pool. */
    await gapi.client.storagetransfer.projects.agentPools.get({
      name: 'Test string',
    });
    /** Lists agent pools. */
    await gapi.client.storagetransfer.projects.agentPools.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectId: 'Test string',
    });
    /** Updates an existing agent pool resource. */
    await gapi.client.storagetransfer.projects.agentPools.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        bandwidthLimit: {
          limitMbps: 'Test string',
        },
        displayName: 'Test string',
        name: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a transfer job that runs periodically. */
    await gapi.client.storagetransfer.transferJobs.create(
      {},
      {
        creationTime: 'Test string',
        deletionTime: 'Test string',
        description: 'Test string',
        eventStream: {
          eventStreamExpirationTime: 'Test string',
          eventStreamStartTime: 'Test string',
          name: 'Test string',
        },
        lastModificationTime: 'Test string',
        latestOperationName: 'Test string',
        loggingConfig: {
          enableOnpremGcsTransferLogs: true,
          logActions: ['Test string'],
          logActionStates: ['Test string'],
        },
        name: 'Test string',
        notificationConfig: {
          eventTypes: ['Test string'],
          payloadFormat: 'Test string',
          pubsubTopic: 'Test string',
        },
        projectId: 'Test string',
        replicationSpec: {
          gcsDataSink: {
            bucketName: 'Test string',
            managedFolderTransferEnabled: true,
            path: 'Test string',
          },
          gcsDataSource: {
            bucketName: 'Test string',
            managedFolderTransferEnabled: true,
            path: 'Test string',
          },
          objectConditions: {
            excludePrefixes: ['Test string'],
            includePrefixes: ['Test string'],
            lastModifiedBefore: 'Test string',
            lastModifiedSince: 'Test string',
            maxTimeElapsedSinceLastModification: 'Test string',
            minTimeElapsedSinceLastModification: 'Test string',
          },
          transferOptions: {
            deleteObjectsFromSourceAfterTransfer: true,
            deleteObjectsUniqueInSink: true,
            metadataOptions: {
              acl: 'Test string',
              gid: 'Test string',
              kmsKey: 'Test string',
              mode: 'Test string',
              storageClass: 'Test string',
              symlink: 'Test string',
              temporaryHold: 'Test string',
              timeCreated: 'Test string',
              uid: 'Test string',
            },
            overwriteObjectsAlreadyExistingInSink: true,
            overwriteWhen: 'Test string',
          },
        },
        schedule: {
          endTimeOfDay: {
            hours: 42,
            minutes: 42,
            nanos: 42,
            seconds: 42,
          },
          repeatInterval: 'Test string',
          scheduleEndDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          scheduleStartDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          startTimeOfDay: {
            hours: 42,
            minutes: 42,
            nanos: 42,
            seconds: 42,
          },
        },
        status: 'Test string',
        transferSpec: {
          awsS3CompatibleDataSource: {
            bucketName: 'Test string',
            endpoint: 'Test string',
            path: 'Test string',
            region: 'Test string',
            s3Metadata: {
              authMethod: 'Test string',
              listApi: 'Test string',
              protocol: 'Test string',
              requestModel: 'Test string',
            },
          },
          awsS3DataSource: {
            awsAccessKey: {
              accessKeyId: 'Test string',
              secretAccessKey: 'Test string',
            },
            bucketName: 'Test string',
            cloudfrontDomain: 'Test string',
            credentialsSecret: 'Test string',
            managedPrivateNetwork: true,
            path: 'Test string',
            roleArn: 'Test string',
          },
          azureBlobStorageDataSource: {
            azureCredentials: {
              sasToken: 'Test string',
            },
            container: 'Test string',
            credentialsSecret: 'Test string',
            path: 'Test string',
            storageAccount: 'Test string',
          },
          gcsDataSink: {
            bucketName: 'Test string',
            managedFolderTransferEnabled: true,
            path: 'Test string',
          },
          gcsDataSource: {
            bucketName: 'Test string',
            managedFolderTransferEnabled: true,
            path: 'Test string',
          },
          gcsIntermediateDataLocation: {
            bucketName: 'Test string',
            managedFolderTransferEnabled: true,
            path: 'Test string',
          },
          hdfsDataSource: {
            path: 'Test string',
          },
          httpDataSource: {
            listUrl: 'Test string',
          },
          objectConditions: {
            excludePrefixes: ['Test string'],
            includePrefixes: ['Test string'],
            lastModifiedBefore: 'Test string',
            lastModifiedSince: 'Test string',
            maxTimeElapsedSinceLastModification: 'Test string',
            minTimeElapsedSinceLastModification: 'Test string',
          },
          posixDataSink: {
            rootDirectory: 'Test string',
          },
          posixDataSource: {
            rootDirectory: 'Test string',
          },
          sinkAgentPoolName: 'Test string',
          sourceAgentPoolName: 'Test string',
          transferManifest: {
            location: 'Test string',
          },
          transferOptions: {
            deleteObjectsFromSourceAfterTransfer: true,
            deleteObjectsUniqueInSink: true,
            metadataOptions: {
              acl: 'Test string',
              gid: 'Test string',
              kmsKey: 'Test string',
              mode: 'Test string',
              storageClass: 'Test string',
              symlink: 'Test string',
              temporaryHold: 'Test string',
              timeCreated: 'Test string',
              uid: 'Test string',
            },
            overwriteObjectsAlreadyExistingInSink: true,
            overwriteWhen: 'Test string',
          },
        },
      }
    );
    /** Deletes a transfer job. Deleting a transfer job sets its status to DELETED. */
    await gapi.client.storagetransfer.transferJobs.delete({
      jobName: 'Test string',
      projectId: 'Test string',
    });
    /** Gets a transfer job. */
    await gapi.client.storagetransfer.transferJobs.get({
      jobName: 'Test string',
      projectId: 'Test string',
    });
    /** Lists transfer jobs. */
    await gapi.client.storagetransfer.transferJobs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a transfer job. Updating a job's transfer spec does not affect transfer operations that are running already. **Note:** The job's status field can be modified using this RPC (for example, to set a job's status to DELETED, DISABLED, or ENABLED). */
    await gapi.client.storagetransfer.transferJobs.patch(
      {
        jobName: 'Test string',
      },
      {
        projectId: 'Test string',
        transferJob: {
          creationTime: 'Test string',
          deletionTime: 'Test string',
          description: 'Test string',
          eventStream: {
            eventStreamExpirationTime: 'Test string',
            eventStreamStartTime: 'Test string',
            name: 'Test string',
          },
          lastModificationTime: 'Test string',
          latestOperationName: 'Test string',
          loggingConfig: {
            enableOnpremGcsTransferLogs: true,
            logActions: ['Test string'],
            logActionStates: ['Test string'],
          },
          name: 'Test string',
          notificationConfig: {
            eventTypes: ['Test string'],
            payloadFormat: 'Test string',
            pubsubTopic: 'Test string',
          },
          projectId: 'Test string',
          replicationSpec: {
            gcsDataSink: {
              bucketName: 'Test string',
              managedFolderTransferEnabled: true,
              path: 'Test string',
            },
            gcsDataSource: {
              bucketName: 'Test string',
              managedFolderTransferEnabled: true,
              path: 'Test string',
            },
            objectConditions: {
              excludePrefixes: ['Test string'],
              includePrefixes: ['Test string'],
              lastModifiedBefore: 'Test string',
              lastModifiedSince: 'Test string',
              maxTimeElapsedSinceLastModification: 'Test string',
              minTimeElapsedSinceLastModification: 'Test string',
            },
            transferOptions: {
              deleteObjectsFromSourceAfterTransfer: true,
              deleteObjectsUniqueInSink: true,
              metadataOptions: {
                acl: 'Test string',
                gid: 'Test string',
                kmsKey: 'Test string',
                mode: 'Test string',
                storageClass: 'Test string',
                symlink: 'Test string',
                temporaryHold: 'Test string',
                timeCreated: 'Test string',
                uid: 'Test string',
              },
              overwriteObjectsAlreadyExistingInSink: true,
              overwriteWhen: 'Test string',
            },
          },
          schedule: {
            endTimeOfDay: {
              hours: 42,
              minutes: 42,
              nanos: 42,
              seconds: 42,
            },
            repeatInterval: 'Test string',
            scheduleEndDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            scheduleStartDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startTimeOfDay: {
              hours: 42,
              minutes: 42,
              nanos: 42,
              seconds: 42,
            },
          },
          status: 'Test string',
          transferSpec: {
            awsS3CompatibleDataSource: {
              bucketName: 'Test string',
              endpoint: 'Test string',
              path: 'Test string',
              region: 'Test string',
              s3Metadata: {
                authMethod: 'Test string',
                listApi: 'Test string',
                protocol: 'Test string',
                requestModel: 'Test string',
              },
            },
            awsS3DataSource: {
              awsAccessKey: {
                accessKeyId: 'Test string',
                secretAccessKey: 'Test string',
              },
              bucketName: 'Test string',
              cloudfrontDomain: 'Test string',
              credentialsSecret: 'Test string',
              managedPrivateNetwork: true,
              path: 'Test string',
              roleArn: 'Test string',
            },
            azureBlobStorageDataSource: {
              azureCredentials: {
                sasToken: 'Test string',
              },
              container: 'Test string',
              credentialsSecret: 'Test string',
              path: 'Test string',
              storageAccount: 'Test string',
            },
            gcsDataSink: {
              bucketName: 'Test string',
              managedFolderTransferEnabled: true,
              path: 'Test string',
            },
            gcsDataSource: {
              bucketName: 'Test string',
              managedFolderTransferEnabled: true,
              path: 'Test string',
            },
            gcsIntermediateDataLocation: {
              bucketName: 'Test string',
              managedFolderTransferEnabled: true,
              path: 'Test string',
            },
            hdfsDataSource: {
              path: 'Test string',
            },
            httpDataSource: {
              listUrl: 'Test string',
            },
            objectConditions: {
              excludePrefixes: ['Test string'],
              includePrefixes: ['Test string'],
              lastModifiedBefore: 'Test string',
              lastModifiedSince: 'Test string',
              maxTimeElapsedSinceLastModification: 'Test string',
              minTimeElapsedSinceLastModification: 'Test string',
            },
            posixDataSink: {
              rootDirectory: 'Test string',
            },
            posixDataSource: {
              rootDirectory: 'Test string',
            },
            sinkAgentPoolName: 'Test string',
            sourceAgentPoolName: 'Test string',
            transferManifest: {
              location: 'Test string',
            },
            transferOptions: {
              deleteObjectsFromSourceAfterTransfer: true,
              deleteObjectsUniqueInSink: true,
              metadataOptions: {
                acl: 'Test string',
                gid: 'Test string',
                kmsKey: 'Test string',
                mode: 'Test string',
                storageClass: 'Test string',
                symlink: 'Test string',
                temporaryHold: 'Test string',
                timeCreated: 'Test string',
                uid: 'Test string',
              },
              overwriteObjectsAlreadyExistingInSink: true,
              overwriteWhen: 'Test string',
            },
          },
        },
        updateTransferJobFieldMask: 'Test string',
      }
    );
    /** Starts a new operation for the specified transfer job. A `TransferJob` has a maximum of one active `TransferOperation`. If this method is called while a `TransferOperation` is active, an error is returned. */
    await gapi.client.storagetransfer.transferJobs.run(
      {
        jobName: 'Test string',
      },
      {
        projectId: 'Test string',
      }
    );
    /** Cancels a transfer. Use the transferOperations.get method to check if the cancellation succeeded or if the operation completed despite the `cancel` request. When you cancel an operation, the currently running transfer is interrupted. For recurring transfer jobs, the next instance of the transfer job will still run. For example, if your job is configured to run every day at 1pm and you cancel Monday's operation at 1:05pm, Monday's transfer will stop. However, a transfer job will still be attempted on Tuesday. This applies only to currently running operations. If an operation is not currently running, `cancel` does nothing. *Caution:* Canceling a transfer job can leave your data in an unknown state. We recommend that you restore the state at both the destination and the source after the `cancel` request completes so that your data is in a consistent state. When you cancel a job, the next job computes a delta of files and may repair any inconsistent state. For instance, if you run a job every day, and today's job found 10 new files and transferred five files before you canceled the job, tomorrow's transfer operation will compute a new delta with the five files that were not copied today plus any new files discovered tomorrow. */
    await gapi.client.storagetransfer.transferOperations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.storagetransfer.transferOperations.get({
      name: 'Test string',
    });
    /** Lists transfer operations. Operations are ordered by their creation time in reverse chronological order. */
    await gapi.client.storagetransfer.transferOperations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Pauses a transfer operation. */
    await gapi.client.storagetransfer.transferOperations.pause(
      {
        name: 'Test string',
      },
      {}
    );
    /** Resumes a transfer operation that is paused. */
    await gapi.client.storagetransfer.transferOperations.resume(
      {
        name: 'Test string',
      },
      {}
    );
  }
});
