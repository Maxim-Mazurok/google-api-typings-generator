/* This is stub file for gapi.client.datacatalog-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231108

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://datacatalog.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.datacatalog */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Searches Data Catalog for multiple resources like entries, tags that match a query. This is a custom method (https://cloud.google.com/apis/design/custom_methods) and does not return the
         * complete resource, only the resource identifier and high level fields. Clients can subsequently call `Get` methods. Note that Data Catalog search queries do not guarantee full recall.
         * Query results that match your query may not be returned, even in subsequent result pages. Also note that results returned (and not returned) can vary across repeated search queries. See
         * [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.
         */
        await gapi.client.datacatalog.catalog.search({
        }, {
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            query: "Test string",
            scope: {
                includeGcpPublicDatasets: true,
                includeOrgIds: [
                    "Test string"
                ],
                includeProjectIds: [
                    "Test string"
                ],
                restrictedLocations: [
                    "Test string"
                ],
            },
        });
        /** Get an entry by target resource name. This method allows clients to use the resource name from the source Google Cloud Platform service to get the Data Catalog Entry. */
        await gapi.client.datacatalog.entries.lookup({
            linkedResource: "Test string",
            sqlResource: "Test string",
        });
        /**
         * A maximum of 10,000 entry groups may be created per organization across all locations. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see
         * [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.create({
            entryGroupId: "Test string",
            parent: "Test string",
        }, {
            dataCatalogTimestamps: {
                createTime: "Test string",
                expireTime: "Test string",
                updateTime: "Test string",
            },
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /**
         * Deletes an EntryGroup. Only entry groups that do not contain entries can be deleted. Users should enable the Data Catalog API in the project identified by the `name` parameter (see
         * [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.delete({
            force: true,
            name: "Test string",
        });
        /** Gets an EntryGroup. */
        await gapi.client.datacatalog.projects.locations.entryGroups.get({
            name: "Test string",
            readMask: "Test string",
        });
        /**
         * Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a
         * policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google
         * Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. -
         * `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists entry groups. */
        await gapi.client.datacatalog.projects.locations.entryGroups.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates an EntryGroup. The user should enable the Data Catalog API in the project identified by the `entry_group.name` parameter (see [Data Catalog Resource Project]
         * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            dataCatalogTimestamps: {
                createTime: "Test string",
                expireTime: "Test string",
                updateTime: "Test string",
            },
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /**
         * Sets the access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to
         * manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission -
         * `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entries.setIamPolicy` to set policies on entries. - `datacatalog.entryGroups.setIamPolicy` to
         * set policies on entry groups.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: -
         * Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data
         * Catalog. A caller is not required to have Google IAM permission to make this request.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Creates an entry. Only entries of 'FILESET' type or user-specified type can be created. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see
         * [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information). A maximum of 100,000 entries may be created per entry
         * group.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.create({
            entryId: "Test string",
            parent: "Test string",
        }, {
            bigqueryDateShardedSpec: {
                dataset: "Test string",
                shardCount: "Test string",
                tablePrefix: "Test string",
            },
            bigqueryTableSpec: {
                tableSourceType: "Test string",
                tableSpec: {
                    groupedEntry: "Test string",
                },
                viewSpec: {
                    viewQuery: "Test string",
                },
            },
            description: "Test string",
            displayName: "Test string",
            gcsFilesetSpec: {
                filePatterns: [
                    "Test string"
                ],
                sampleGcsFileSpecs: [
                    {
                        filePath: "Test string",
                        gcsTimestamps: {
                            createTime: "Test string",
                            expireTime: "Test string",
                            updateTime: "Test string",
                        },
                        sizeBytes: "Test string",
                    }
                ],
            },
            integratedSystem: "Test string",
            linkedResource: "Test string",
            name: "Test string",
            schema: {
                columns: [
                    {
                        column: "Test string",
                        description: "Test string",
                        mode: "Test string",
                        subcolumns: undefined,
                        type: "Test string",
                    }
                ],
            },
            sourceSystemTimestamps: {
                createTime: "Test string",
                expireTime: "Test string",
                updateTime: "Test string",
            },
            type: "Test string",
            usageSignal: {
                updateTime: "Test string",
                usageWithinTimeRange: {
                    A: {
                        totalCancellations: 42,
                        totalCompletions: 42,
                        totalExecutionTimeForCompletionsMillis: 42,
                        totalFailures: 42,
                    }
                },
            },
            userSpecifiedSystem: "Test string",
            userSpecifiedType: "Test string",
        });
        /**
         * Deletes an existing entry. Only entries created through CreateEntry method can be deleted. Users should enable the Data Catalog API in the project identified by the `name` parameter
         * (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.delete({
            name: "Test string",
        });
        /** Gets an entry. */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.get({
            name: "Test string",
        });
        /**
         * Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a
         * policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google
         * Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. -
         * `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists entries. */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readMask: "Test string",
        });
        /**
         * Updates an existing entry. Users should enable the Data Catalog API in the project identified by the `entry.name` parameter (see [Data Catalog Resource Project]
         * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            bigqueryDateShardedSpec: {
                dataset: "Test string",
                shardCount: "Test string",
                tablePrefix: "Test string",
            },
            bigqueryTableSpec: {
                tableSourceType: "Test string",
                tableSpec: {
                    groupedEntry: "Test string",
                },
                viewSpec: {
                    viewQuery: "Test string",
                },
            },
            description: "Test string",
            displayName: "Test string",
            gcsFilesetSpec: {
                filePatterns: [
                    "Test string"
                ],
                sampleGcsFileSpecs: [
                    {
                        filePath: "Test string",
                        gcsTimestamps: {
                            createTime: "Test string",
                            expireTime: "Test string",
                            updateTime: "Test string",
                        },
                        sizeBytes: "Test string",
                    }
                ],
            },
            integratedSystem: "Test string",
            linkedResource: "Test string",
            name: "Test string",
            schema: {
                columns: [
                    {
                        column: "Test string",
                        description: "Test string",
                        mode: "Test string",
                        subcolumns: undefined,
                        type: "Test string",
                    }
                ],
            },
            sourceSystemTimestamps: {
                createTime: "Test string",
                expireTime: "Test string",
                updateTime: "Test string",
            },
            type: "Test string",
            usageSignal: {
                updateTime: "Test string",
                usageWithinTimeRange: {
                    A: {
                        totalCancellations: 42,
                        totalCompletions: 42,
                        totalExecutionTimeForCompletionsMillis: 42,
                        totalFailures: 42,
                    }
                },
            },
            userSpecifiedSystem: "Test string",
            userSpecifiedType: "Test string",
        });
        /**
         * Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: -
         * Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data
         * Catalog. A caller is not required to have Google IAM permission to make this request.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the
         * [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag
         * template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same
         * organization.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.create({
            parent: "Test string",
        }, {
            column: "Test string",
            fields: {
                A: {
                    boolValue: true,
                    displayName: "Test string",
                    doubleValue: 42,
                    enumValue: {
                        displayName: "Test string",
                    },
                    order: 42,
                    stringValue: "Test string",
                    timestampValue: "Test string",
                }
            },
            name: "Test string",
            template: "Test string",
            templateDisplayName: "Test string",
        });
        /** Deletes a tag. */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.delete({
            name: "Test string",
        });
        /** Lists tags assigned to an Entry. The columns in the response are lowercased. */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an existing tag. */
        await gapi.client.datacatalog.projects.locations.entryGroups.entries.tags.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            column: "Test string",
            fields: {
                A: {
                    boolValue: true,
                    displayName: "Test string",
                    doubleValue: 42,
                    enumValue: {
                        displayName: "Test string",
                    },
                    order: 42,
                    stringValue: "Test string",
                    timestampValue: "Test string",
                }
            },
            name: "Test string",
            template: "Test string",
            templateDisplayName: "Test string",
        });
        /**
         * Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the
         * [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag
         * template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same
         * organization.
         */
        await gapi.client.datacatalog.projects.locations.entryGroups.tags.create({
            parent: "Test string",
        }, {
            column: "Test string",
            fields: {
                A: {
                    boolValue: true,
                    displayName: "Test string",
                    doubleValue: 42,
                    enumValue: {
                        displayName: "Test string",
                    },
                    order: 42,
                    stringValue: "Test string",
                    timestampValue: "Test string",
                }
            },
            name: "Test string",
            template: "Test string",
            templateDisplayName: "Test string",
        });
        /** Deletes a tag. */
        await gapi.client.datacatalog.projects.locations.entryGroups.tags.delete({
            name: "Test string",
        });
        /** Lists tags assigned to an Entry. The columns in the response are lowercased. */
        await gapi.client.datacatalog.projects.locations.entryGroups.tags.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an existing tag. */
        await gapi.client.datacatalog.projects.locations.entryGroups.tags.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            column: "Test string",
            fields: {
                A: {
                    boolValue: true,
                    displayName: "Test string",
                    doubleValue: 42,
                    enumValue: {
                        displayName: "Test string",
                    },
                    order: 42,
                    stringValue: "Test string",
                    timestampValue: "Test string",
                }
            },
            name: "Test string",
            template: "Test string",
            templateDisplayName: "Test string",
        });
        /**
         * Creates a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource
         * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.create({
            parent: "Test string",
            tagTemplateId: "Test string",
        }, {
            displayName: "Test string",
            fields: {
                A: {
                    description: "Test string",
                    displayName: "Test string",
                    isRequired: true,
                    name: "Test string",
                    order: 42,
                    type: {
                        enumType: {
                            allowedValues: [
                                {
                                    displayName: "Test string",
                                }
                            ],
                        },
                        primitiveType: "Test string",
                    },
                }
            },
            name: "Test string",
        });
        /**
         * Deletes a tag template and all tags using the template. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project]
         * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.delete({
            force: true,
            name: "Test string",
        });
        /** Gets a tag template. */
        await gapi.client.datacatalog.projects.locations.tagTemplates.get({
            name: "Test string",
        });
        /**
         * Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a
         * policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google
         * Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. -
         * `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /**
         * Updates a tag template. This method cannot be used to update the fields of a template. The tag template fields are represented as separate resources and should be updated using their
         * own create/update/delete methods. Users should enable the Data Catalog API in the project identified by the `tag_template.name` parameter (see [Data Catalog Resource Project]
         * (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            fields: {
                A: {
                    description: "Test string",
                    displayName: "Test string",
                    isRequired: true,
                    name: "Test string",
                    order: 42,
                    type: {
                        enumType: {
                            allowedValues: [
                                {
                                    displayName: "Test string",
                                }
                            ],
                        },
                        primitiveType: "Test string",
                    },
                }
            },
            name: "Test string",
        });
        /**
         * Sets the access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to
         * manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission -
         * `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entries.setIamPolicy` to set policies on entries. - `datacatalog.entryGroups.setIamPolicy` to
         * set policies on entry groups.
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: -
         * Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data
         * Catalog. A caller is not required to have Google IAM permission to make this request.
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Creates a field in a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource
         * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.fields.create({
            parent: "Test string",
            tagTemplateFieldId: "Test string",
        }, {
            description: "Test string",
            displayName: "Test string",
            isRequired: true,
            name: "Test string",
            order: 42,
            type: {
                enumType: {
                    allowedValues: [
                        {
                            displayName: "Test string",
                        }
                    ],
                },
                primitiveType: "Test string",
            },
        });
        /**
         * Deletes a field in a tag template and all uses of that field. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource
         * Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.fields.delete({
            force: true,
            name: "Test string",
        });
        /**
         * Updates a field in a tag template. This method cannot be used to update the field type. Users should enable the Data Catalog API in the project identified by the `name` parameter (see
         * [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.fields.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            displayName: "Test string",
            isRequired: true,
            name: "Test string",
            order: 42,
            type: {
                enumType: {
                    allowedValues: [
                        {
                            displayName: "Test string",
                        }
                    ],
                },
                primitiveType: "Test string",
            },
        });
        /**
         * Renames a field in a tag template. The user should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource
         * Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.fields.rename({
            name: "Test string",
        }, {
            newTagTemplateFieldId: "Test string",
        });
        /**
         * Renames an enum value in a tag template. The enum values have to be unique within one enum field. Thus, an enum value cannot be renamed with a name used in any other enum value within
         * the same enum field.
         */
        await gapi.client.datacatalog.projects.locations.tagTemplates.fields.enumValues.rename({
            name: "Test string",
        }, {
            newEnumValueDisplayName: "Test string",
        });
        /** Creates a taxonomy in the specified project. */
        await gapi.client.datacatalog.projects.locations.taxonomies.create({
            parent: "Test string",
        }, {
            activatedPolicyTypes: [
                "Test string"
            ],
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            policyTagCount: 42,
            service: {
                identity: "Test string",
                name: "Test string",
            },
            taxonomyTimestamps: {
                createTime: "Test string",
                expireTime: "Test string",
                updateTime: "Test string",
            },
        });
        /** Deletes a taxonomy. This operation will also delete all policy tags in this taxonomy along with their associated policies. */
        await gapi.client.datacatalog.projects.locations.taxonomies.delete({
            name: "Test string",
        });
        /**
         * Exports all taxonomies and their policy tags in a project. This method generates SerializedTaxonomy protos with nested policy tags that can be used as an input for future
         * ImportTaxonomies calls.
         */
        await gapi.client.datacatalog.projects.locations.taxonomies.export({
            parent: "Test string",
            serializedTaxonomies: true,
            taxonomies: "Test string",
        });
        /** Gets a taxonomy. */
        await gapi.client.datacatalog.projects.locations.taxonomies.get({
            name: "Test string",
        });
        /** Gets the IAM policy for a taxonomy or a policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Imports all taxonomies and their policy tags to a project as new taxonomies. This method provides a bulk taxonomy / policy tag creation using nested proto structure. */
        await gapi.client.datacatalog.projects.locations.taxonomies.import({
            parent: "Test string",
        }, {
            inlineSource: {
                taxonomies: [
                    {
                        activatedPolicyTypes: [
                            "Test string"
                        ],
                        description: "Test string",
                        displayName: "Test string",
                        policyTags: [
                            {
                                childPolicyTags: undefined,
                                description: "Test string",
                                displayName: "Test string",
                                policyTag: "Test string",
                            }
                        ],
                    }
                ],
            },
        });
        /** Lists all taxonomies in a project in a particular location that the caller has permission to view. */
        await gapi.client.datacatalog.projects.locations.taxonomies.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a taxonomy. */
        await gapi.client.datacatalog.projects.locations.taxonomies.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            activatedPolicyTypes: [
                "Test string"
            ],
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            policyTagCount: 42,
            service: {
                identity: "Test string",
                name: "Test string",
            },
            taxonomyTimestamps: {
                createTime: "Test string",
                expireTime: "Test string",
                updateTime: "Test string",
            },
        });
        /** Sets the IAM policy for a taxonomy or a policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Returns the permissions that a caller has on the specified taxonomy or policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a policy tag in the specified taxonomy. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.create({
            parent: "Test string",
        }, {
            childPolicyTags: [
                "Test string"
            ],
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            parentPolicyTag: "Test string",
        });
        /** Deletes a policy tag. Also deletes all of its descendant policy tags. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.delete({
            name: "Test string",
        });
        /** Gets a policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.get({
            name: "Test string",
        });
        /** Gets the IAM policy for a taxonomy or a policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists all policy tags in a taxonomy. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            childPolicyTags: [
                "Test string"
            ],
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            parentPolicyTag: "Test string",
        });
        /** Sets the IAM policy for a taxonomy or a policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Returns the permissions that a caller has on the specified taxonomy or policy tag. */
        await gapi.client.datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
