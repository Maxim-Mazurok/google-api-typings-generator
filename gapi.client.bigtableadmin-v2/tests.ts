/* This is stub file for gapi.client.bigtableadmin-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230110

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://bigtableadmin.googleapis.com/$discovery/rest?version=v2');
    /** now we can use gapi.client.bigtableadmin */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** Administer your Cloud Bigtable tables and clusters */
        'https://www.googleapis.com/auth/bigtable.admin',
        /** Administer your Cloud Bigtable clusters */
        'https://www.googleapis.com/auth/bigtable.admin.cluster',
        /** Administer your Cloud Bigtable clusters */
        'https://www.googleapis.com/auth/bigtable.admin.instance',
        /** Administer your Cloud Bigtable tables */
        'https://www.googleapis.com/auth/bigtable.admin.table',
        /** Administer your Cloud Bigtable tables and clusters */
        'https://www.googleapis.com/auth/cloud-bigtable.admin',
        /** Administer your Cloud Bigtable clusters */
        'https://www.googleapis.com/auth/cloud-bigtable.admin.cluster',
        /** Administer your Cloud Bigtable tables */
        'https://www.googleapis.com/auth/cloud-bigtable.admin.table',
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.bigtableadmin.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.bigtableadmin.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.bigtableadmin.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‚Äç/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.bigtableadmin.operations.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Create an instance within a project. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero,
         * then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
         */
        await gapi.client.bigtableadmin.projects.instances.create({
            parent: "Test string",
        }, {
            clusters: {
                A: {
                    clusterConfig: {
                        clusterAutoscalingConfig: {
                            autoscalingLimits: {
                                maxServeNodes: 42,
                                minServeNodes: 42,
                            },
                            autoscalingTargets: {
                                cpuUtilizationPercent: 42,
                                storageUtilizationGibPerNode: 42,
                            },
                        },
                    },
                    defaultStorageType: "Test string",
                    encryptionConfig: {
                        kmsKeyName: "Test string",
                    },
                    location: "Test string",
                    name: "Test string",
                    serveNodes: 42,
                    state: "Test string",
                }
            },
            instance: {
                createTime: "Test string",
                displayName: "Test string",
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                satisfiesPzs: true,
                state: "Test string",
                type: "Test string",
            },
            instanceId: "Test string",
            parent: "Test string",
        });
        /** Delete an instance from a project. */
        await gapi.client.bigtableadmin.projects.instances.delete({
            name: "Test string",
        });
        /** Gets information about an instance. */
        await gapi.client.bigtableadmin.projects.instances.get({
            name: "Test string",
        });
        /** Gets the access control policy for an instance resource. Returns an empty policy if an instance exists but does not have a policy set. */
        await gapi.client.bigtableadmin.projects.instances.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists information about instances in a project. */
        await gapi.client.bigtableadmin.projects.instances.list({
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Partially updates an instance within a project. This method can modify all fields of an Instance and is the preferred way to update an Instance. */
        await gapi.client.bigtableadmin.projects.instances.partialUpdateInstance({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            satisfiesPzs: true,
            state: "Test string",
            type: "Test string",
        });
        /** Sets the access control policy on an instance resource. Replaces any existing policy. */
        await gapi.client.bigtableadmin.projects.instances.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Returns permissions that the caller has on the specified instance resource. */
        await gapi.client.bigtableadmin.projects.instances.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Updates an instance within a project. This method updates only the display name and type for an Instance. To update other Instance properties, such as labels, use PartialUpdateInstance. */
        await gapi.client.bigtableadmin.projects.instances.update({
            name: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            satisfiesPzs: true,
            state: "Test string",
            type: "Test string",
        });
        /** Creates an app profile within an instance. */
        await gapi.client.bigtableadmin.projects.instances.appProfiles.create({
            appProfileId: "Test string",
            ignoreWarnings: true,
            parent: "Test string",
        }, {
            description: "Test string",
            etag: "Test string",
            multiClusterRoutingUseAny: {
                clusterIds: [
                    "Test string"
                ],
            },
            name: "Test string",
            singleClusterRouting: {
                allowTransactionalWrites: true,
                clusterId: "Test string",
            },
        });
        /** Deletes an app profile from an instance. */
        await gapi.client.bigtableadmin.projects.instances.appProfiles.delete({
            ignoreWarnings: true,
            name: "Test string",
        });
        /** Gets information about an app profile. */
        await gapi.client.bigtableadmin.projects.instances.appProfiles.get({
            name: "Test string",
        });
        /** Lists information about app profiles in an instance. */
        await gapi.client.bigtableadmin.projects.instances.appProfiles.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an app profile within an instance. */
        await gapi.client.bigtableadmin.projects.instances.appProfiles.patch({
            ignoreWarnings: true,
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            etag: "Test string",
            multiClusterRoutingUseAny: {
                clusterIds: [
                    "Test string"
                ],
            },
            name: "Test string",
            singleClusterRouting: {
                allowTransactionalWrites: true,
                clusterId: "Test string",
            },
        });
        /**
         * Creates a cluster within an instance. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero,
         * then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
         */
        await gapi.client.bigtableadmin.projects.instances.clusters.create({
            clusterId: "Test string",
            parent: "Test string",
        }, {
            clusterConfig: {
                clusterAutoscalingConfig: {
                    autoscalingLimits: {
                        maxServeNodes: 42,
                        minServeNodes: 42,
                    },
                    autoscalingTargets: {
                        cpuUtilizationPercent: 42,
                        storageUtilizationGibPerNode: 42,
                    },
                },
            },
            defaultStorageType: "Test string",
            encryptionConfig: {
                kmsKeyName: "Test string",
            },
            location: "Test string",
            name: "Test string",
            serveNodes: 42,
            state: "Test string",
        });
        /** Deletes a cluster from an instance. */
        await gapi.client.bigtableadmin.projects.instances.clusters.delete({
            name: "Test string",
        });
        /** Gets information about a cluster. */
        await gapi.client.bigtableadmin.projects.instances.clusters.get({
            name: "Test string",
        });
        /** Lists information about clusters in an instance. */
        await gapi.client.bigtableadmin.projects.instances.clusters.list({
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Partially updates a cluster within a project. This method is the preferred way to update a Cluster. To enable and update autoscaling, set cluster_config.cluster_autoscaling_config. When
         * autoscaling is enabled, serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it are ignored. Note that an update cannot simultaneously set serve_nodes to non-zero and
         * cluster_config.cluster_autoscaling_config to non-empty, and also specify both in the update_mask. To disable autoscaling, clear cluster_config.cluster_autoscaling_config, and explicitly
         * set a serve_node count via the update_mask.
         */
        await gapi.client.bigtableadmin.projects.instances.clusters.partialUpdateCluster({
            name: "Test string",
            updateMask: "Test string",
        }, {
            clusterConfig: {
                clusterAutoscalingConfig: {
                    autoscalingLimits: {
                        maxServeNodes: 42,
                        minServeNodes: 42,
                    },
                    autoscalingTargets: {
                        cpuUtilizationPercent: 42,
                        storageUtilizationGibPerNode: 42,
                    },
                },
            },
            defaultStorageType: "Test string",
            encryptionConfig: {
                kmsKeyName: "Test string",
            },
            location: "Test string",
            name: "Test string",
            serveNodes: 42,
            state: "Test string",
        });
        /**
         * Updates a cluster within an instance. Note that UpdateCluster does not support updating cluster_config.cluster_autoscaling_config. In order to update it, you must use
         * PartialUpdateCluster.
         */
        await gapi.client.bigtableadmin.projects.instances.clusters.update({
            name: "Test string",
        }, {
            clusterConfig: {
                clusterAutoscalingConfig: {
                    autoscalingLimits: {
                        maxServeNodes: 42,
                        minServeNodes: 42,
                    },
                    autoscalingTargets: {
                        cpuUtilizationPercent: 42,
                        storageUtilizationGibPerNode: 42,
                    },
                },
            },
            defaultStorageType: "Test string",
            encryptionConfig: {
                kmsKeyName: "Test string",
            },
            location: "Test string",
            name: "Test string",
            serveNodes: 42,
            state: "Test string",
        });
        /** Copy a Cloud Bigtable backup to a new backup in the destination cluster located in the destination instance and project. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.copy({
            parent: "Test string",
        }, {
            backupId: "Test string",
            expireTime: "Test string",
            sourceBackup: "Test string",
        });
        /**
         * Starts creating a new Cloud Bigtable Backup. The returned backup long-running operation can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The
         * response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup.
         */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.create({
            backupId: "Test string",
            parent: "Test string",
        }, {
            encryptionInfo: {
                encryptionStatus: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                encryptionType: "Test string",
                kmsKeyVersion: "Test string",
            },
            endTime: "Test string",
            expireTime: "Test string",
            name: "Test string",
            sizeBytes: "Test string",
            sourceBackup: "Test string",
            sourceTable: "Test string",
            startTime: "Test string",
            state: "Test string",
        });
        /** Deletes a pending or completed Cloud Bigtable backup. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.delete({
            name: "Test string",
        });
        /** Gets metadata on a pending or completed Cloud Bigtable Backup. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.get({
            name: "Test string",
        });
        /** Gets the access control policy for a Table resource. Returns an empty policy if the resource exists but does not have a policy set. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists Cloud Bigtable backups. Returns both completed and pending backups. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a pending or completed Cloud Bigtable Backup. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            encryptionInfo: {
                encryptionStatus: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                encryptionType: "Test string",
                kmsKeyVersion: "Test string",
            },
            endTime: "Test string",
            expireTime: "Test string",
            name: "Test string",
            sizeBytes: "Test string",
            sourceBackup: "Test string",
            sourceTable: "Test string",
            startTime: "Test string",
            state: "Test string",
        });
        /** Sets the access control policy on a Table resource. Replaces any existing policy. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Returns permissions that the caller has on the specified table resource. */
        await gapi.client.bigtableadmin.projects.instances.clusters.backups.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Lists hot tablets in a cluster, within the time range provided. Hot tablets are ordered based on CPU usage. */
        await gapi.client.bigtableadmin.projects.instances.clusters.hotTablets.list({
            endTime: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            startTime: "Test string",
        });
        /** Checks replication consistency based on a consistency token, that is, if replication has caught up based on the conditions specified in the token and the check request. */
        await gapi.client.bigtableadmin.projects.instances.tables.checkConsistency({
            name: "Test string",
        }, {
            consistencyToken: "Test string",
        });
        /** Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request. */
        await gapi.client.bigtableadmin.projects.instances.tables.create({
            parent: "Test string",
        }, {
            initialSplits: [
                {
                    key: "Test string",
                }
            ],
            table: {
                clusterStates: {
                    A: {
                        encryptionInfo: [
                            {
                                encryptionStatus: {
                                    code: 42,
                                    details: [
                                        {
                                            A: 42
                                        }
                                    ],
                                    message: "Test string",
                                },
                                encryptionType: "Test string",
                                kmsKeyVersion: "Test string",
                            }
                        ],
                        replicationState: "Test string",
                    }
                },
                columnFamilies: {
                    A: {
                        gcRule: {
                            intersection: {
                                rules: undefined,
                            },
                            maxAge: "Test string",
                            maxNumVersions: 42,
                            union: {
                                rules: undefined,
                            },
                        },
                        stats: {
                            averageCellsPerColumn: 42,
                            averageColumnsPerRow: 42,
                            logicalDataBytes: "Test string",
                        },
                    }
                },
                deletionProtection: true,
                granularity: "Test string",
                name: "Test string",
                restoreInfo: {
                    backupInfo: {
                        backup: "Test string",
                        endTime: "Test string",
                        sourceBackup: "Test string",
                        sourceTable: "Test string",
                        startTime: "Test string",
                    },
                    sourceType: "Test string",
                },
                stats: {
                    averageCellsPerColumn: 42,
                    averageColumnsPerRow: 42,
                    logicalDataBytes: "Test string",
                    rowCount: "Test string",
                },
            },
            tableId: "Test string",
        });
        /** Permanently deletes a specified table and all of its data. */
        await gapi.client.bigtableadmin.projects.instances.tables.delete({
            name: "Test string",
        });
        /** Permanently drop/delete a row range from a specified table. The request can specify whether to delete all rows in a table, or only those that match a particular prefix. */
        await gapi.client.bigtableadmin.projects.instances.tables.dropRowRange({
            name: "Test string",
        }, {
            deleteAllDataFromTable: true,
            rowKeyPrefix: "Test string",
        });
        /**
         * Generates a consistency token for a Table, which can be used in CheckConsistency to check whether mutations to the table that finished before this call started have been replicated. The
         * tokens will be available for 90 days.
         */
        await gapi.client.bigtableadmin.projects.instances.tables.generateConsistencyToken({
            name: "Test string",
        }, {
        });
        /** Gets metadata information about the specified table. */
        await gapi.client.bigtableadmin.projects.instances.tables.get({
            name: "Test string",
            view: "Test string",
        });
        /** Gets the access control policy for a Table resource. Returns an empty policy if the resource exists but does not have a policy set. */
        await gapi.client.bigtableadmin.projects.instances.tables.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists all tables served from a specified instance. */
        await gapi.client.bigtableadmin.projects.instances.tables.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /**
         * Performs a series of column family modifications on the specified table. Either all or none of the modifications will occur before this method returns, but data requests received prior
         * to that point may see a table where only some modifications have taken effect.
         */
        await gapi.client.bigtableadmin.projects.instances.tables.modifyColumnFamilies({
            name: "Test string",
        }, {
            modifications: [
                {
                    create: {
                        gcRule: {
                            intersection: {
                                rules: undefined,
                            },
                            maxAge: "Test string",
                            maxNumVersions: 42,
                            union: {
                                rules: undefined,
                            },
                        },
                        stats: {
                            averageCellsPerColumn: 42,
                            averageColumnsPerRow: 42,
                            logicalDataBytes: "Test string",
                        },
                    },
                    drop: true,
                    id: "Test string",
                    update: {
                        gcRule: {
                            intersection: {
                                rules: undefined,
                            },
                            maxAge: "Test string",
                            maxNumVersions: 42,
                            union: {
                                rules: undefined,
                            },
                        },
                        stats: {
                            averageCellsPerColumn: 42,
                            averageColumnsPerRow: 42,
                            logicalDataBytes: "Test string",
                        },
                    },
                }
            ],
        });
        /** Updates a specified table. */
        await gapi.client.bigtableadmin.projects.instances.tables.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            clusterStates: {
                A: {
                    encryptionInfo: [
                        {
                            encryptionStatus: {
                                code: 42,
                                details: [
                                    {
                                        A: 42
                                    }
                                ],
                                message: "Test string",
                            },
                            encryptionType: "Test string",
                            kmsKeyVersion: "Test string",
                        }
                    ],
                    replicationState: "Test string",
                }
            },
            columnFamilies: {
                A: {
                    gcRule: {
                        intersection: {
                            rules: undefined,
                        },
                        maxAge: "Test string",
                        maxNumVersions: 42,
                        union: {
                            rules: undefined,
                        },
                    },
                    stats: {
                        averageCellsPerColumn: 42,
                        averageColumnsPerRow: 42,
                        logicalDataBytes: "Test string",
                    },
                }
            },
            deletionProtection: true,
            granularity: "Test string",
            name: "Test string",
            restoreInfo: {
                backupInfo: {
                    backup: "Test string",
                    endTime: "Test string",
                    sourceBackup: "Test string",
                    sourceTable: "Test string",
                    startTime: "Test string",
                },
                sourceType: "Test string",
            },
            stats: {
                averageCellsPerColumn: 42,
                averageColumnsPerRow: 42,
                logicalDataBytes: "Test string",
                rowCount: "Test string",
            },
        });
        /**
         * Create a new table by restoring from a completed backup. The returned table long-running operation can be used to track the progress of the operation, and to cancel it. The metadata
         * field type is RestoreTableMetadata. The response type is Table, if successful.
         */
        await gapi.client.bigtableadmin.projects.instances.tables.restore({
            parent: "Test string",
        }, {
            backup: "Test string",
            tableId: "Test string",
        });
        /** Sets the access control policy on a Table resource. Replaces any existing policy. */
        await gapi.client.bigtableadmin.projects.instances.tables.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Returns permissions that the caller has on the specified table resource. */
        await gapi.client.bigtableadmin.projects.instances.tables.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Restores a specified table which was accidentally deleted. */
        await gapi.client.bigtableadmin.projects.instances.tables.undelete({
            name: "Test string",
        }, {
        });
        /** Gets information about a location. */
        await gapi.client.bigtableadmin.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.bigtableadmin.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
