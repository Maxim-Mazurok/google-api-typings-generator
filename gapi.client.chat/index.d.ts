/* Type definitions for non-npm package Google Chat API v1 1.0 */
// Project: https://developers.google.com/hangouts/chat
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://chat.googleapis.com/$discovery/rest?version=v1
// Revision: 20220420

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Google Chat API v1 */
    function load(name: "chat", version: "v1"): PromiseLike<void>;
    function load(name: "chat", version: "v1", callback: () => any): void;

    namespace chat {
        interface ActionParameter {
            /** The name of the parameter for the action script. */
            key?: string;
            /** The value of the parameter. */
            value?: string;
        }
        interface ActionResponse {
            /** Input only. A response to an event related to a [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be accompanied by `ResponseType.Dialog`. */
            dialogAction?: DialogAction;
            /** Input only. The type of Chat app response. */
            type?: string;
            /** Input only. URL for users to auth or config. (Only for REQUEST_CONFIG response types.) */
            url?: string;
        }
        interface ActionStatus {
            /** The status code. */
            statusCode?: string;
            /** The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent. */
            userFacingMessage?: string;
        }
        interface Annotation {
            /** Length of the substring in the plain-text message body this annotation corresponds to. */
            length?: number;
            /** The metadata for a slash command. */
            slashCommand?: SlashCommandMetadata;
            /** Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to. */
            startIndex?: number;
            /** The type of this annotation. */
            type?: string;
            /** The metadata of user mention. */
            userMention?: UserMentionMetadata;
        }
        interface Attachment {
            /** A reference to the attachment data. This is used with the media API to download the attachment data. */
            attachmentDataRef?: AttachmentDataRef;
            /** The original file name for the content, not the full path. */
            contentName?: string;
            /** The content type (MIME type) of the file. */
            contentType?: string;
            /** Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps should not use this URL to download attachment content. */
            downloadUri?: string;
            /** A reference to the drive attachment. This is used with the Drive API. */
            driveDataRef?: DriveDataRef;
            /** Resource name of the attachment, in the form "spaces/*‍/messages/*‍/attachments/*". */
            name?: string;
            /** The source of the attachment. */
            source?: string;
            /** Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps should not use this URL to download attachment content. */
            thumbnailUri?: string;
        }
        interface AttachmentDataRef {
            /** The resource name of the attachment data. This is used with the media API to download the attachment data. */
            resourceName?: string;
        }
        interface Button {
            /** A button with image and onclick action. */
            imageButton?: ImageButton;
            /** A button with text and onclick action. */
            textButton?: TextButton;
        }
        interface Card {
            /** The actions of this card. */
            cardActions?: CardAction[];
            /** The header of the card. A header usually contains a title and an image. */
            header?: CardHeader;
            /** Name of the card. */
            name?: string;
            /** Sections are separated by a line divider. */
            sections?: Section[];
        }
        interface CardAction {
            /** The label used to be displayed in the action menu item. */
            actionLabel?: string;
            /** The onclick action for this action item. */
            onClick?: OnClick;
        }
        interface CardHeader {
            /** The image's type (e.g. square border or circular border). */
            imageStyle?: string;
            /** The URL of the image in the card header. */
            imageUrl?: string;
            /** The subtitle of the card header. */
            subtitle?: string;
            /**
             * The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both
             * lines.
             */
            title?: string;
        }
        interface ChatAppLogEntry {
            /** The deployment that caused the error. For Chat bots built in Apps Script, this is the deployment ID defined by Apps Script. */
            deployment?: string;
            /** The unencrypted `callback_method` name that was running when the error was encountered. */
            deploymentFunction?: string;
            /** The error code and message. */
            error?: Status;
        }
        interface Color {
            /**
             * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) *
             * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message
             * rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color
             * (as if the alpha value had been explicitly given a value of 1.0).
             */
            alpha?: number;
            /** The amount of blue in the color as a value in the interval [0, 1]. */
            blue?: number;
            /** The amount of green in the color as a value in the interval [0, 1]. */
            green?: number;
            /** The amount of red in the color as a value in the interval [0, 1]. */
            red?: number;
        }
        interface CommonEventObject {
            /**
             * A map containing the current values of the widgets in a card. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. Depending on
             * the input data type, a different object represents each input: For single-value widgets, `StringInput`. For multi-value widgets, an array of `StringInput` objects. For a date-time
             * picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a time-only picker, a `TimeInput`. Corresponds with the data entered by a user on a card in a
             * [dialog](https://developers.google.com/chat/how-tos/dialogs).
             */
            formInputs?: { [P in string]: Inputs };
            /** The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps. */
            hostApp?: string;
            /** Name of the invoked function associated with the widget. Only set for Chat apps. */
            invokedFunction?: string;
            /** Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings. */
            parameters?: { [P in string]: string };
            /** The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps. */
            platform?: string;
            /** The timezone ID and offset from Coordinated Universal Time (UTC). */
            timeZone?: TimeZone;
            /** The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as "en-US". Not supported by Chat apps. */
            userLocale?: string;
        }
        interface DateInput {
            /** Time since epoch time, in milliseconds. */
            msSinceEpoch?: string;
        }
        interface DateTimeInput {
            /** Whether the `datetime` input includes a calendar date. */
            hasDate?: boolean;
            /** Whether the `datetime` input includes a timestamp. */
            hasTime?: boolean;
            /** Time since epoch time, in milliseconds. */
            msSinceEpoch?: string;
        }
        interface DeprecatedEvent {
            /**
             * The form action data associated with an interactive card that was clicked. Only populated for CARD_CLICKED events. See the [Interactive Cards guide](/chat/how-tos/cards-onclick) for
             * more information.
             */
            action?: FormAction;
            /**
             * Represents information about the user's client, such as locale, host app, and platform. For Chat apps, `CommonEventObject` includes information submitted by users interacting with
             * [dialogs](https://developers.google.com/chat/how-tos/dialogs), like data entered on a card.
             */
            common?: CommonEventObject;
            /**
             * The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. See the [Authorizing access to 3p services
             * guide](/chat/how-tos/auth-3p) for more information.
             */
            configCompleteRedirectUrl?: string;
            /** The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) event received. */
            dialogEventType?: string;
            /** The timestamp indicating when the event occurred. */
            eventTime?: string;
            /** True when the event is related to [dialogs](https://developers.google.com/chat/how-tos/dialogs). */
            isDialogEvent?: boolean;
            /** The message that triggered the event, if applicable. */
            message?: Message;
            /** The space in which the event occurred. */
            space?: Space;
            /** The Chat app-defined key for the thread related to the event. See the thread_key field of the `spaces.message.create` request for more information. */
            threadKey?: string;
            /**
             * A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or
             * regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat
             * apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
             */
            token?: string;
            /** The type of the event. */
            type?: string;
            /** The user that triggered the event. */
            user?: User;
        }
        interface Dialog {
            /** Input only. Body of the dialog, which is rendered in a modal. Google Chat apps do not support the following card entities: `DateTimePicker`, `OnChangeAction`. */
            body?: GoogleAppsCardV1Card;
        }
        interface DialogAction {
            /**
             * Input only. Status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays a status and message to users, if necessary. For
             * example, in case of an error or success.
             */
            actionStatus?: ActionStatus;
            /** Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs) for the request. */
            dialog?: Dialog;
        }
        interface DriveDataRef {
            /** The id for the drive file, for use with the Drive API. */
            driveFileId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FormAction {
            /**
             * The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same
             * method name can be used for several elements that trigger a common behavior if desired.
             */
            actionMethodName?: string;
            /** List of action parameters. */
            parameters?: ActionParameter[];
        }
        interface GoogleAppsCardV1Action {
            /** Apps Script function to invoke when the containing element is clicked/activated. */
            function?: string;
            /** Specifies the loading indicator that the action displays while making the call to the action. */
            loadIndicator?: string;
            /** List of action parameters. */
            parameters?: GoogleAppsCardV1ActionParameter[];
            /**
             * Indicates whether form values persist after the action. The default value is `false`. If `true`, form values remain after the action is triggered. When using
             * [LoadIndicator.NONE](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for actions, `persist_values` = `true`is recommended, as it ensures that any changes made by
             * the user after form or on change actions are sent to the server are not overwritten by the response. If `false`, the form values are cleared when the action is triggered. When
             * `persist_values` is set to `false`, it is strongly recommended that the card use [LoadIndicator.SPINNER](workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) for all
             * actions, as this locks the UI to ensure no changes are made by the user while the action is being processed.
             */
            persistValues?: boolean;
        }
        interface GoogleAppsCardV1ActionParameter {
            /** The name of the parameter for the action script. */
            key?: string;
            /** The value of the parameter. */
            value?: string;
        }
        interface GoogleAppsCardV1BorderStyle {
            /** The corner radius for the border. */
            cornerRadius?: number;
            /** The colors to use when the type is `BORDER_TYPE_STROKE`. */
            strokeColor?: Color;
            /** The border type. */
            type?: string;
        }
        interface GoogleAppsCardV1Button {
            /** The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead. */
            altText?: string;
            /** If set, the button is filled with a solid background. */
            color?: Color;
            /** If `true`, the button is displayed in a disabled state and doesn't respond to user actions. */
            disabled?: boolean;
            /** The icon image. */
            icon?: GoogleAppsCardV1Icon;
            /** The action to perform when the button is clicked. */
            onClick?: GoogleAppsCardV1OnClick;
            /** The text of the button. */
            text?: string;
        }
        interface GoogleAppsCardV1ButtonList {
            /** An array of buttons. */
            buttons?: GoogleAppsCardV1Button[];
        }
        interface GoogleAppsCardV1Card {
            /**
             * The card's actions. Actions are added to the card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options:
             * ``` "card_actions": [ { "actionLabel": "Settings", "onClick": { "action": { "functionName": "goToView", "parameters": [ { "key": "viewType", "value": "SETTING" } ], "loadIndicator":
             * "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send Feedback", "onClick": { "openLink": { "url": "https://example.com/feedback" } } } ] ```
             */
            cardActions?: GoogleAppsCardV1CardAction[];
            /** The display style for `peekCardHeader`. */
            displayStyle?: string;
            /** The fixed footer shown at the bottom of this card. */
            fixedFooter?: GoogleAppsCardV1CardFixedFooter;
            /** The header of the card. A header usually contains a title and an image. */
            header?: GoogleAppsCardV1CardHeader;
            /** Name of the card. Used as a card identifier in card navigation. */
            name?: string;
            /** When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards. */
            peekCardHeader?: GoogleAppsCardV1CardHeader;
            /** Sections are separated by a line divider. */
            sections?: GoogleAppsCardV1Section[];
        }
        interface GoogleAppsCardV1CardAction {
            /** The label that displays as the action menu item. */
            actionLabel?: string;
            /** The `onClick` action for this action item. */
            onClick?: GoogleAppsCardV1OnClick;
        }
        interface GoogleAppsCardV1CardFixedFooter {
            /** The primary button of the fixed footer. The button must be a text button with text and color set. */
            primaryButton?: GoogleAppsCardV1Button;
            /** The secondary button of the fixed footer. The button must be a text button with text and color set. `primaryButton` must be set if `secondaryButton` is set. */
            secondaryButton?: GoogleAppsCardV1Button;
        }
        interface GoogleAppsCardV1CardHeader {
            /** The alternative text of this image which is used for accessibility. */
            imageAltText?: string;
            /** The image's type. */
            imageType?: string;
            /** The URL of the image in the card header. */
            imageUrl?: string;
            /** The subtitle of the card header. */
            subtitle?: string;
            /**
             * Required. The title of the card header. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is specified, it takes
             * up both lines.
             */
            title?: string;
        }
        interface GoogleAppsCardV1DateTimePicker {
            /** The label for the field that displays to the user. */
            label?: string;
            /** The name of the text input that's used in `formInput`, and uniquely identifies this input. */
            name?: string;
            /** Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation. */
            onChangeAction?: GoogleAppsCardV1Action;
            /**
             * The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone
             * setting on the client side.
             */
            timezoneOffsetDate?: number;
            /** The type of the date/time picker. */
            type?: string;
            /**
             * The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is
             * used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 *
             * 1000` to represent 3am.
             */
            valueMsEpoch?: string;
        }
        interface GoogleAppsCardV1DecoratedText {
            /** The formatted text label that shows below the main text. */
            bottomLabel?: string;
            /** A button that can be clicked to trigger an action. */
            button?: GoogleAppsCardV1Button;
            /** An icon displayed after the text. */
            endIcon?: GoogleAppsCardV1Icon;
            /** Deprecated in favor of start_icon. */
            icon?: GoogleAppsCardV1Icon;
            /** Only the top and bottom label and content region are clickable. */
            onClick?: GoogleAppsCardV1OnClick;
            /** The icon displayed in front of the text. */
            startIcon?: GoogleAppsCardV1Icon;
            /** A switch widget can be clicked to change its state or trigger an action. */
            switchControl?: GoogleAppsCardV1SwitchControl;
            /** Required. The main widget formatted text. See Text formatting for details. */
            text?: string;
            /** The formatted text label that shows above the main text. */
            topLabel?: string;
            /** The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated. */
            wrapText?: boolean;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleAppsCardV1Divider {
        }
        interface GoogleAppsCardV1Grid {
            /** The border style to apply to each grid item. */
            borderStyle?: GoogleAppsCardV1BorderStyle;
            /**
             * The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog
             * versus companion).
             */
            columnCount?: number;
            /** The items to display in the grid. */
            items?: GoogleAppsCardV1GridItem[];
            /** This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters. */
            onClick?: GoogleAppsCardV1OnClick;
            /** The text that displays in the grid header. */
            title?: string;
        }
        interface GoogleAppsCardV1GridItem {
            /** A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters. */
            id?: string;
            /** The image that displays in the grid item. */
            image?: GoogleAppsCardV1ImageComponent;
            /** The layout to use for the grid item. */
            layout?: string;
            /** The grid item's subtitle. */
            subtitle?: string;
            /** The horizontal alignment of the grid item's text. */
            textAlignment?: string;
            /** The grid item's title. */
            title?: string;
        }
        interface GoogleAppsCardV1Icon {
            /** The description of the icon, used for accessibility. The default value is provided if you don't specify one. */
            altText?: string;
            /** The icon specified by a URL. */
            iconUrl?: string;
            /** The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon. */
            imageType?: string;
            /** The icon specified by the string name of a list of known icons. */
            knownIcon?: string;
        }
        interface GoogleAppsCardV1Image {
            /** The alternative text of this image, used for accessibility. */
            altText?: string;
            /** An image URL. */
            imageUrl?: string;
            /** The action triggered by an `onClick` event. */
            onClick?: GoogleAppsCardV1OnClick;
        }
        interface GoogleAppsCardV1ImageComponent {
            /** The accessibility label for the image. */
            altText?: string;
            /** The border style to apply to the image. */
            borderStyle?: GoogleAppsCardV1BorderStyle;
            /** The crop style to apply to the image. */
            cropStyle?: GoogleAppsCardV1ImageCropStyle;
            /** The image URL. */
            imageUri?: string;
        }
        interface GoogleAppsCardV1ImageCropStyle {
            /** The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. */
            aspectRatio?: number;
            /** The crop type. */
            type?: string;
        }
        interface GoogleAppsCardV1OnClick {
            /** If specified, an action is triggered by this `onClick`. */
            action?: GoogleAppsCardV1Action;
            /** A new card is pushed to the card stack after clicking if specified. */
            card?: GoogleAppsCardV1Card;
            /**
             * An add-on triggers this action when the action needs to open a link. This differs from the `open_link` above in that this needs to talk to server to get the link. Thus some
             * preparation work is required for web client to do before the open link action response comes back.
             */
            openDynamicLinkAction?: GoogleAppsCardV1Action;
            /** If specified, this `onClick` triggers an open link action. */
            openLink?: GoogleAppsCardV1OpenLink;
        }
        interface GoogleAppsCardV1OpenLink {
            /** Whether the client forgets about a link after opening it, or observes it until the window closes. Not supported by Chat apps. */
            onClose?: string;
            /** How to open a link. Not supported by Chat apps. */
            openAs?: string;
            /** The URL to open. */
            url?: string;
        }
        interface GoogleAppsCardV1Section {
            /** Indicates whether this section is collapsible. If a section is collapsible, the description must be given. */
            collapsible?: boolean;
            /** The header of the section. Formatted text is supported. */
            header?: string;
            /**
             * The number of uncollapsible widgets. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and
             * the last three are collapsed as default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.
             */
            uncollapsibleWidgetsCount?: number;
            /** A section must contain at least 1 widget. */
            widgets?: GoogleAppsCardV1Widget[];
        }
        interface GoogleAppsCardV1SelectionInput {
            /** An array of the selected items. */
            items?: GoogleAppsCardV1SelectionItem[];
            /** The label displayed ahead of the switch control. */
            label?: string;
            /** The name of the text input which is used in `formInput`. */
            name?: string;
            /** If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button. */
            onChangeAction?: GoogleAppsCardV1Action;
            /** The type of the selection. */
            type?: string;
        }
        interface GoogleAppsCardV1SelectionItem {
            /** If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored. */
            selected?: boolean;
            /** The text to be displayed. */
            text?: string;
            /** The value associated with this item. The client should use this as a form input value. */
            value?: string;
        }
        interface GoogleAppsCardV1SuggestionItem {
            /** The suggested autocomplete result. */
            text?: string;
        }
        interface GoogleAppsCardV1Suggestions {
            /** A list of suggestions used for autocomplete recommendations. */
            items?: GoogleAppsCardV1SuggestionItem[];
        }
        interface GoogleAppsCardV1SwitchControl {
            /** The control type, either switch or checkbox. */
            controlType?: string;
            /** The name of the switch widget that's used in `formInput`. */
            name?: string;
            /** The action when the switch state is changed. */
            onChangeAction?: GoogleAppsCardV1Action;
            /** If the switch is selected. */
            selected?: boolean;
            /** The value is what is passed back in the callback. */
            value?: string;
        }
        interface GoogleAppsCardV1TextInput {
            /**
             * The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion
             * items.
             */
            autoCompleteAction?: GoogleAppsCardV1Action;
            /** The hint text. */
            hintText?: string;
            /** The initial suggestions made before any user input. */
            initialSuggestions?: GoogleAppsCardV1Suggestions;
            /** At least one of label and hintText must be specified. */
            label?: string;
            /** The name of the text input which is used in `formInput`. */
            name?: string;
            /** The onChange action, for example, invoke a function. */
            onChangeAction?: GoogleAppsCardV1Action;
            /** The style of the text, for example, a single line or multiple lines. */
            type?: string;
            /** The default value when there is no input from the user. */
            value?: string;
        }
        interface GoogleAppsCardV1TextParagraph {
            /** The text that's shown in the widget. */
            text?: string;
        }
        interface GoogleAppsCardV1Widget {
            /**
             * A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` "buttonList": {
             * "buttons": [ "button": { "text": "Edit", "Color": { "Red": 255 "Green": 255 "Blue": 255 } "disabled": true }, "button": { "icon": { "knownIcon": "INVITE" "altText": "check calendar"
             * }, "onClick": { "openLink": { "url": "https://example.com/calendar" } } }, ] } ```
             */
            buttonList?: GoogleAppsCardV1ButtonList;
            /**
             * Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` "date_time_picker": { "name":
             * "appointment_time", "label": "Book your appointment at:", "type": "DateTimePickerType.DATE_AND_TIME", "valueMsEpoch": "796435200000" } ```
             */
            dateTimePicker?: GoogleAppsCardV1DateTimePicker;
            /**
             * Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` "decoratedText": { "icon": { "knownIcon":
             * "EMAIL" }, "topLabel": "Email Address", "content": "sasha@example.com", "bottomLabel": "This is a new Email address!", "switchWidget": { "name": "has_send_welcome_email_to_sasha",
             * "selected": false, "controlType": "ControlType.CHECKBOX" } } ```
             */
            decoratedText?: GoogleAppsCardV1DecoratedText;
            /** Displays a divider. For example, the following JSON creates a divider: ``` "divider": { } ``` */
            divider?: any;
            /**
             * Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` "grid": { "title": "A fine collection of items",
             * "numColumns": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4.0 }, "items": [ "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
             * "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment": "CENTER" ], "onClick": { "openLink": { "url":"https://www.example.com" } } } ```
             */
            grid?: GoogleAppsCardV1Grid;
            /** The horizontal alignment of this widget. */
            horizontalAlignment?: string;
            /**
             * Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` "image": { "imageUrl": "https://example.com/sasha.png" "altText":
             * "Avatar for Sasha" } ```
             */
            image?: GoogleAppsCardV1Image;
            /**
             * Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` "switchControl": { "name": "size", "label": "Size" "type":
             * "SelectionType.DROPDOWN", "items": [ { "text": "S", "value": "small", "selected": false }, { "text": "M", "value": "medium", "selected": true }, { "text": "L", "value": "large",
             * "selected": false }, { "text": "XL", "value": "extra_large", "selected": false } ] } ```
             */
            selectionInput?: GoogleAppsCardV1SelectionInput;
            /**
             * Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` "textInput": { "name": "mailing_address", "label": "Mailing Address"
             * } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` "textInput": { "name": "preferred_programing_language",
             * "label": "Preferred Language", "initialSuggestions": { "items": [ { "text": "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" } ] } } ```
             */
            textInput?: GoogleAppsCardV1TextInput;
            /** Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` "textParagraph": { "text": " *bold text*" } ``` */
            textParagraph?: GoogleAppsCardV1TextParagraph;
        }
        interface Image {
            /**
             * The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the
             * native aspect ratio of the image. If unset, the server fills it by prefetching the image.
             */
            aspectRatio?: number;
            /** The URL of the image. */
            imageUrl?: string;
            /** The onclick action. */
            onClick?: OnClick;
        }
        interface ImageButton {
            /** The icon specified by an enum that indices to an icon provided by Chat API. */
            icon?: string;
            /** The icon specified by a URL. */
            iconUrl?: string;
            /** The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify. */
            name?: string;
            /** The onclick action. */
            onClick?: OnClick;
        }
        interface Inputs {
            /** Date input values. Not supported by Chat apps. */
            dateInput?: DateInput;
            /** Date and time input values. Not supported by Chat apps. */
            dateTimeInput?: DateTimeInput;
            /** Input parameter for regular widgets. For single-valued widgets, it is a single value list. For multi-valued widgets, such as checkbox, all the values are presented. */
            stringInputs?: StringInputs;
            /** Time input values. Not supported by Chat apps. */
            timeInput?: TimeInput;
        }
        interface KeyValue {
            /** The text of the bottom label. Formatted text supported. */
            bottomLabel?: string;
            /** A button that can be clicked to trigger an action. */
            button?: Button;
            /** The text of the content. Formatted text supported and always required. */
            content?: string;
            /** If the content should be multiline. */
            contentMultiline?: boolean;
            /** An enum value that will be replaced by the Chat API with the corresponding icon image. */
            icon?: string;
            /** The icon specified by a URL. */
            iconUrl?: string;
            /** The onclick action. Only the top label, bottom label and content region are clickable. */
            onClick?: OnClick;
            /** The text of the top label. Formatted text supported. */
            topLabel?: string;
        }
        interface ListMembershipsResponse {
            /** List of memberships in the requested (or first) page. */
            memberships?: Membership[];
            /** Continuation token to retrieve the next page of results. It will be empty for the last page of results. */
            nextPageToken?: string;
        }
        interface ListSpacesResponse {
            /** Continuation token to retrieve the next page of results. It will be empty for the last page of results. Tokens expire in an hour. An error is thrown if an expired token is passed. */
            nextPageToken?: string;
            /** List of spaces in the requested (or first) page. */
            spaces?: Space[];
        }
        interface MatchedUrl {
            /** Output only. The url that was matched. */
            url?: string;
        }
        interface Media {
            /** Name of the media resource. */
            resourceName?: string;
        }
        interface Membership {
            /** Output only. The creation time of the membership a.k.a. the time at which the member joined the space, if applicable. */
            createTime?: string;
            /**
             * A Google Chat user or app. Format: `users/{person}` or `users/app` When `users/{person}`, represents a [person](https://developers.google.com/people/api/rest/v1/people) in the
             * People API or a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. Format: `users/{user}` When `users/app`, represents
             * a Chat app creating membership for itself. Creating membership is available as a [developer preview](https://developers.google.com/workspace/preview).
             */
            member?: User;
            name?: string;
            /** Output only. State of the membership. */
            state?: string;
        }
        interface Message {
            /** Input only. Parameters that a Chat app can use to configure how its response is posted. */
            actionResponse?: ActionResponse;
            /** Output only. Annotations associated with the text in this message. */
            annotations?: Annotation[];
            /** Plain-text body of the message with all Chat app mentions stripped out. */
            argumentText?: string;
            /** User uploaded attachment. */
            attachment?: Attachment[];
            /**
             * Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text
             * body of the message.
             */
            cards?: Card[];
            /** Output only. The time at which the message was created in Google Chat server. */
            createTime?: string;
            /** A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications). */
            fallbackText?: string;
            /** Output only. The time at which the message was last updated in Google Chat server. If the message was never updated, this field will be same as create_time. */
            lastUpdateTime?: string;
            /**
             * Output only. A URL in `spaces.messages.text` that matches a link unfurling pattern. For more information, refer to [Unfurl
             * links](https://developers.google.com/chat/how-tos/link-unfurling).
             */
            matchedUrl?: MatchedUrl;
            /** Resource name in the form `spaces/*‍/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB` */
            name?: string;
            /** Output only. The user who created the message. */
            sender?: User;
            /** Output only. Slash command information, if applicable. */
            slashCommand?: SlashCommand;
            /** The space the message belongs to. */
            space?: Space;
            /** Plain-text body of the message. The first link to an image, video, web page, or other preview-able item generates a preview chip. */
            text?: string;
            /** The thread the message belongs to. */
            thread?: Thread;
        }
        interface OnClick {
            /** A form action will be triggered by this onclick if specified. */
            action?: FormAction;
            /** This onclick triggers an open link action if specified. */
            openLink?: OpenLink;
        }
        interface OpenLink {
            /** The URL to open. */
            url?: string;
        }
        interface Section {
            /** The header of the section, text formatted supported. */
            header?: string;
            /** A section must contain at least 1 widget. */
            widgets?: WidgetMarkup[];
        }
        interface SlashCommand {
            /** The id of the slash command invoked. */
            commandId?: string;
        }
        interface SlashCommandMetadata {
            /** The Chat app whose command was invoked. */
            bot?: User;
            /** The command id of the invoked slash command. */
            commandId?: string;
            /** The name of the invoked slash command. */
            commandName?: string;
            /** Indicating whether the slash command is for a dialog. */
            triggersDialog?: boolean;
            /** The type of slash command. */
            type?: string;
        }
        interface Space {
            /** The space's display name. For direct messages between humans, this field might be empty. */
            displayName?: string;
            /** Resource name of the space, in the form "spaces/*". Example: spaces/AAAAAAAAAAAA */
            name?: string;
            /** Output only. Whether the space is a DM between a Chat app and a single human. */
            singleUserBotDm?: boolean;
            /** Output only. Output only. Whether the messages are threaded in this space. */
            threaded?: boolean;
            /** Output only. Deprecated: Use `single_user_bot_dm` instead. Output only. The type of a space. */
            type?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface StringInputs {
            /** An array of strings entered by the user. */
            value?: string[];
        }
        interface TextButton {
            /** The onclick action of the button. */
            onClick?: OnClick;
            /** The text of the button. */
            text?: string;
        }
        interface TextParagraph {
            text?: string;
        }
        interface Thread {
            /** Resource name, in the form "spaces/*‍/threads/*". Example: spaces/AAAAAAAAAAA/threads/TTTTTTTTTTT */
            name?: string;
        }
        interface TimeInput {
            /** The hour on a 24-hour clock. */
            hours?: number;
            /** The number of minutes past the hour. Valid values are 0 to 59. */
            minutes?: number;
        }
        interface TimeZone {
            /** The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such as "America/Toronto". */
            id?: string;
            /** The user timezone offset, in milliseconds, from Coordinated Universal Time (UTC). */
            offset?: number;
        }
        interface User {
            /** Output only. The user's display name. */
            displayName?: string;
            /** Unique identifier of the user's Google Workspace domain. */
            domainId?: string;
            /** Output only. When `true`, the user is deleted or their profile is not visible. */
            isAnonymous?: boolean;
            /**
             * Resource name for a Google Chat user. Represents a [person](https://developers.google.com/people/api/rest/v1/people#Person) in the People API or a
             * [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. Formatted as: `users/{user}`
             */
            name?: string;
            /** User type. */
            type?: string;
        }
        interface UserMentionMetadata {
            /** The type of user mention. */
            type?: string;
            /** The user mentioned. */
            user?: User;
        }
        interface WidgetMarkup {
            /** A list of buttons. Buttons is also oneof data and only one of these fields should be set. */
            buttons?: Button[];
            /** Display an image in this widget. */
            image?: Image;
            /** Display a key value item in this widget. */
            keyValue?: KeyValue;
            /** Display a text paragraph in this widget. */
            textParagraph?: TextParagraph;
        }
        interface ConversationsResource {
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
        }
        interface DmsResource {
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            webhooks(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            webhooks(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            conversations: ConversationsResource;
        }
        interface MediaResource {
            /** Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`. */
            download(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the media that is being downloaded. See ReadRequest.resource_name. */
                resourceName: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Media>;
        }
        interface ConversationsResource {
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
        }
        interface RoomsResource {
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            messages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            webhooks(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            webhooks(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            conversations: ConversationsResource;
        }
        interface MembersResource {
            /** Returns a membership. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the membership to be retrieved, in the form "spaces/*‍/members/*". Example: spaces/AAAAAAAAAAAA/members/111111111111111111111 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Membership>;
            /** Lists human memberships in a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100. */
                pageSize?: number;
                /** A token identifying a page of results the server should return. */
                pageToken?: string;
                /** Required. The resource name of the space for which membership list is to be fetched, in the form "spaces/*". Example: spaces/AAAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListMembershipsResponse>;
        }
        interface AttachmentsResource {
            /**
             * Gets the metadata of a message attachment. The attachment data is fetched using the media API. Requires [service account
             * authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the attachment, in the form "spaces/*‍/messages/*‍/attachments/*". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Attachment>;
        }
        interface MessagesResource {
            /** Creates a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            /** Deletes a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the message to be deleted, in the form "spaces/*‍/messages/*" Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the message to be retrieved, in the form "spaces/*‍/messages/*". Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Message>;
            /** Updates a message. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name in the form `spaces/*‍/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards * attachment */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name in the form `spaces/*‍/messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB` */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. The field paths to be updated, comma separated if there are multiple. Currently supported field paths: * text * cards * attachment */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            attachments: AttachmentsResource;
        }
        interface SpacesResource {
            /** Returns a space. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name of the space, in the form "spaces/*". Example: spaces/AAAAAAAAAAAA */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Space>;
            /** Lists spaces the caller is a member of. Requires [service account authentication](https://developers.google.com/chat/api/guides/auth/service-accounts). */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The value is capped at 1000. Server may return fewer results than requested. If unspecified, server will default to 100. */
                pageSize?: number;
                /** A token identifying a page of results the server should return. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSpacesResponse>;
            /** Legacy path for creating message. Calling these will result in a BadRequest response. */
            webhooks(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Message;
            }): Request<Message>;
            webhooks(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Space resource name, in the form "spaces/*". Example: spaces/AAAAAAAAAAA */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message. */
                requestId?: string;
                /**
                 * Optional. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` instead of thread.name. (Setting thread.name has no effect.) The
                 * first message with a given `threadKey` starts a new thread. Subsequent messages with the same `threadKey` post into the same thread.
                 */
                threadKey?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Message): Request<Message>;
            members: MembersResource;
            messages: MessagesResource;
        }

        const dms: DmsResource;

        const media: MediaResource;

        const rooms: RoomsResource;

        const spaces: SpacesResource;
    }
}
