/* This is stub file for gapi.client.servicedirectory-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230618

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://servicedirectory.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.servicedirectory */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.servicedirectory.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.servicedirectory.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a namespace, and returns the new namespace. */
        await gapi.client.servicedirectory.projects.locations.namespaces.create({
            namespaceId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a namespace. This also deletes all services and endpoints in the namespace. */
        await gapi.client.servicedirectory.projects.locations.namespaces.delete({
            name: "Test string",
        });
        /** Gets a namespace. */
        await gapi.client.servicedirectory.projects.locations.namespaces.get({
            name: "Test string",
        });
        /** Gets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists all namespaces. */
        await gapi.client.servicedirectory.projects.locations.namespaces.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a namespace. */
        await gapi.client.servicedirectory.projects.locations.namespaces.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Sets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Tests IAM permissions for a resource (namespace, service or service workload only). */
        await gapi.client.servicedirectory.projects.locations.namespaces.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a service, and returns the new service. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.create({
            parent: "Test string",
            serviceId: "Test string",
        }, {
            createTime: "Test string",
            endpoints: [
                {
                    address: "Test string",
                    createTime: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    name: "Test string",
                    network: "Test string",
                    port: 42,
                    uid: "Test string",
                    updateTime: "Test string",
                }
            ],
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a service. This also deletes all endpoints associated with the service. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.delete({
            name: "Test string",
        });
        /** Gets a service. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.get({
            name: "Test string",
        });
        /** Gets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists all services belonging to a namespace. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a service. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            endpoints: [
                {
                    address: "Test string",
                    createTime: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    name: "Test string",
                    network: "Test string",
                    port: 42,
                    uid: "Test string",
                    updateTime: "Test string",
                }
            ],
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Returns a service and its associated endpoints. Resolving a service is not considered an active developer method. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.resolve({
            name: "Test string",
        }, {
            endpointFilter: "Test string",
            maxEndpoints: 42,
        });
        /** Sets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Tests IAM permissions for a resource (namespace, service or service workload only). */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates an endpoint, and returns the new endpoint. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.endpoints.create({
            endpointId: "Test string",
            parent: "Test string",
        }, {
            address: "Test string",
            createTime: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            network: "Test string",
            port: 42,
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an endpoint. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.endpoints.delete({
            name: "Test string",
        });
        /** Gets an endpoint. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.endpoints.get({
            name: "Test string",
        });
        /** Lists all endpoints. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.endpoints.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an endpoint. */
        await gapi.client.servicedirectory.projects.locations.namespaces.services.endpoints.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            address: "Test string",
            createTime: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            network: "Test string",
            port: 42,
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Gets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.serviceWorkloads.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.serviceWorkloads.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Tests IAM permissions for a resource (namespace, service or service workload only). */
        await gapi.client.servicedirectory.projects.locations.namespaces.serviceWorkloads.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Gets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.workloads.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Sets the IAM Policy for a resource */
        await gapi.client.servicedirectory.projects.locations.namespaces.workloads.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Tests IAM permissions for a resource (namespace, service or service workload only). */
        await gapi.client.servicedirectory.projects.locations.namespaces.workloads.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
