/* This is stub file for gapi.client.identitytoolkit-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250130

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://identitytoolkit.googleapis.com/$discovery/rest?version=v2',
  );
  /** now we can use gapi.client.identitytoolkit */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and administer all your Firebase data and settings */
    'https://www.googleapis.com/auth/firebase',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Revokes a user's token from an Identity Provider (IdP). This is done by manually providing an IdP credential, and the token types for revocation. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.revokeToken(
      {},
      {
        idToken: 'Test string',
        providerId: 'Test string',
        redirectUri: 'Test string',
        tenantId: 'Test string',
        token: 'Test string',
        tokenType: 'Test string',
      },
    );
    /** Finishes enrolling a second factor for the user. */
    await gapi.client.identitytoolkit.accounts.mfaEnrollment.finalize(
      {},
      {
        displayName: 'Test string',
        idToken: 'Test string',
        phoneVerificationInfo: {
          androidVerificationProof: 'Test string',
          code: 'Test string',
          phoneNumber: 'Test string',
          sessionInfo: 'Test string',
        },
        tenantId: 'Test string',
        totpVerificationInfo: {
          sessionInfo: 'Test string',
          verificationCode: 'Test string',
        },
      },
    );
    /** Step one of the MFA enrollment process. In SMS case, this sends an SMS verification code to the user. */
    await gapi.client.identitytoolkit.accounts.mfaEnrollment.start(
      {},
      {
        idToken: 'Test string',
        phoneEnrollmentInfo: {
          autoRetrievalInfo: {
            appSignatureHash: 'Test string',
          },
          captchaResponse: 'Test string',
          clientType: 'Test string',
          iosReceipt: 'Test string',
          iosSecret: 'Test string',
          phoneNumber: 'Test string',
          playIntegrityToken: 'Test string',
          recaptchaToken: 'Test string',
          recaptchaVersion: 'Test string',
          safetyNetToken: 'Test string',
        },
        tenantId: 'Test string',
        totpEnrollmentInfo: {},
      },
    );
    /** Revokes one second factor from the enrolled second factors for an account. */
    await gapi.client.identitytoolkit.accounts.mfaEnrollment.withdraw(
      {},
      {
        idToken: 'Test string',
        mfaEnrollmentId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Verifies the MFA challenge and performs sign-in */
    await gapi.client.identitytoolkit.accounts.mfaSignIn.finalize(
      {},
      {
        mfaEnrollmentId: 'Test string',
        mfaPendingCredential: 'Test string',
        phoneVerificationInfo: {
          androidVerificationProof: 'Test string',
          code: 'Test string',
          phoneNumber: 'Test string',
          sessionInfo: 'Test string',
        },
        tenantId: 'Test string',
        totpVerificationInfo: {
          verificationCode: 'Test string',
        },
      },
    );
    /** Sends the MFA challenge */
    await gapi.client.identitytoolkit.accounts.mfaSignIn.start(
      {},
      {
        mfaEnrollmentId: 'Test string',
        mfaPendingCredential: 'Test string',
        phoneSignInInfo: {
          autoRetrievalInfo: {
            appSignatureHash: 'Test string',
          },
          captchaResponse: 'Test string',
          clientType: 'Test string',
          iosReceipt: 'Test string',
          iosSecret: 'Test string',
          phoneNumber: 'Test string',
          playIntegrityToken: 'Test string',
          recaptchaToken: 'Test string',
          recaptchaVersion: 'Test string',
          safetyNetToken: 'Test string',
        },
        tenantId: 'Test string',
      },
    );
    /** List all default supported Idps. */
    await gapi.client.identitytoolkit.defaultSupportedIdps.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Retrieve an Identity Toolkit project configuration. */
    await gapi.client.identitytoolkit.projects.getConfig({
      name: 'Test string',
    });
    /** Update an Identity Toolkit project configuration. */
    await gapi.client.identitytoolkit.projects.updateConfig(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        authorizedDomains: ['Test string'],
        autodeleteAnonymousUsers: true,
        blockingFunctions: {
          forwardInboundCredentials: {
            accessToken: true,
            idToken: true,
            refreshToken: true,
          },
          triggers: {
            A: {
              functionUri: 'Test string',
              updateTime: 'Test string',
            },
          },
        },
        client: {
          apiKey: 'Test string',
          firebaseSubdomain: 'Test string',
          permissions: {
            disabledUserDeletion: true,
            disabledUserSignup: true,
          },
        },
        defaultHostingSite: 'Test string',
        emailPrivacyConfig: {
          enableImprovedEmailPrivacy: true,
        },
        mfa: {
          enabledProviders: ['Test string'],
          providerConfigs: [
            {
              state: 'Test string',
              totpProviderConfig: {
                adjacentIntervals: 42,
              },
            },
          ],
          state: 'Test string',
        },
        mobileLinksConfig: {
          domain: 'Test string',
        },
        monitoring: {
          requestLogging: {
            enabled: true,
          },
        },
        multiTenant: {
          allowTenants: true,
          defaultTenantLocation: 'Test string',
        },
        name: 'Test string',
        notification: {
          defaultLocale: 'Test string',
          sendEmail: {
            callbackUri: 'Test string',
            changeEmailTemplate: {
              body: 'Test string',
              bodyFormat: 'Test string',
              customized: true,
              replyTo: 'Test string',
              senderDisplayName: 'Test string',
              senderLocalPart: 'Test string',
              subject: 'Test string',
            },
            dnsInfo: {
              customDomain: 'Test string',
              customDomainState: 'Test string',
              domainVerificationRequestTime: 'Test string',
              pendingCustomDomain: 'Test string',
              useCustomDomain: true,
            },
            legacyResetPasswordTemplate: {
              body: 'Test string',
              bodyFormat: 'Test string',
              customized: true,
              replyTo: 'Test string',
              senderDisplayName: 'Test string',
              senderLocalPart: 'Test string',
              subject: 'Test string',
            },
            method: 'Test string',
            resetPasswordTemplate: {
              body: 'Test string',
              bodyFormat: 'Test string',
              customized: true,
              replyTo: 'Test string',
              senderDisplayName: 'Test string',
              senderLocalPart: 'Test string',
              subject: 'Test string',
            },
            revertSecondFactorAdditionTemplate: {
              body: 'Test string',
              bodyFormat: 'Test string',
              customized: true,
              replyTo: 'Test string',
              senderDisplayName: 'Test string',
              senderLocalPart: 'Test string',
              subject: 'Test string',
            },
            smtp: {
              host: 'Test string',
              password: 'Test string',
              port: 42,
              securityMode: 'Test string',
              senderEmail: 'Test string',
              username: 'Test string',
            },
            verifyEmailTemplate: {
              body: 'Test string',
              bodyFormat: 'Test string',
              customized: true,
              replyTo: 'Test string',
              senderDisplayName: 'Test string',
              senderLocalPart: 'Test string',
              subject: 'Test string',
            },
          },
          sendSms: {
            smsTemplate: {
              content: 'Test string',
            },
            useDeviceLocale: true,
          },
        },
        passwordPolicyConfig: {
          forceUpgradeOnSignin: true,
          lastUpdateTime: 'Test string',
          passwordPolicyEnforcementState: 'Test string',
          passwordPolicyVersions: [
            {
              customStrengthOptions: {
                containsLowercaseCharacter: true,
                containsNonAlphanumericCharacter: true,
                containsNumericCharacter: true,
                containsUppercaseCharacter: true,
                maxPasswordLength: 42,
                minPasswordLength: 42,
              },
              schemaVersion: 42,
            },
          ],
        },
        quota: {
          signUpQuotaConfig: {
            quota: 'Test string',
            quotaDuration: 'Test string',
            startTime: 'Test string',
          },
        },
        recaptchaConfig: {
          emailPasswordEnforcementState: 'Test string',
          managedRules: [
            {
              action: 'Test string',
              endScore: 42,
            },
          ],
          phoneEnforcementState: 'Test string',
          recaptchaKeys: [
            {
              key: 'Test string',
              type: 'Test string',
            },
          ],
          tollFraudManagedRules: [
            {
              action: 'Test string',
              startScore: 42,
            },
          ],
          useAccountDefender: true,
          useSmsBotScore: true,
          useSmsTollFraudProtection: true,
        },
        signIn: {
          allowDuplicateEmails: true,
          anonymous: {
            enabled: true,
          },
          email: {
            enabled: true,
            passwordRequired: true,
          },
          hashConfig: {
            algorithm: 'Test string',
            memoryCost: 42,
            rounds: 42,
            saltSeparator: 'Test string',
            signerKey: 'Test string',
          },
          phoneNumber: {
            enabled: true,
            testPhoneNumbers: {
              A: 'Test string',
            },
          },
        },
        smsRegionConfig: {
          allowByDefault: {
            disallowedRegions: ['Test string'],
          },
          allowlistOnly: {
            allowedRegions: ['Test string'],
          },
        },
        subtype: 'Test string',
      },
    );
    /** Create a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.defaultSupportedIdpConfigs.create(
      {
        idpId: 'Test string',
        parent: 'Test string',
      },
      {
        appleSignInConfig: {
          bundleIds: ['Test string'],
          codeFlowConfig: {
            keyId: 'Test string',
            privateKey: 'Test string',
            teamId: 'Test string',
          },
        },
        clientId: 'Test string',
        clientSecret: 'Test string',
        enabled: true,
        name: 'Test string',
      },
    );
    /** Delete a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.defaultSupportedIdpConfigs.delete(
      {
        name: 'Test string',
      },
    );
    /** Retrieve a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.defaultSupportedIdpConfigs.get({
      name: 'Test string',
    });
    /** List all default supported Idp configurations for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.defaultSupportedIdpConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.defaultSupportedIdpConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        appleSignInConfig: {
          bundleIds: ['Test string'],
          codeFlowConfig: {
            keyId: 'Test string',
            privateKey: 'Test string',
            teamId: 'Test string',
          },
        },
        clientId: 'Test string',
        clientSecret: 'Test string',
        enabled: true,
        name: 'Test string',
      },
    );
    /** Initialize Identity Platform for a Cloud project. Identity Platform is an end-to-end authentication system for third-party users to access your apps and services. These could include mobile/web apps, games, APIs and beyond. This is the publicly available variant of EnableIdentityPlatform that is only available to billing-enabled projects. */
    await gapi.client.identitytoolkit.projects.identityPlatform.initializeAuth(
      {
        project: 'Test string',
      },
      {},
    );
    /** Create an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.inboundSamlConfigs.create(
      {
        inboundSamlConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        enabled: true,
        idpConfig: {
          idpCertificates: [
            {
              x509Certificate: 'Test string',
            },
          ],
          idpEntityId: 'Test string',
          signRequest: true,
          ssoUrl: 'Test string',
        },
        name: 'Test string',
        spConfig: {
          callbackUri: 'Test string',
          spCertificates: [
            {
              expiresAt: 'Test string',
              x509Certificate: 'Test string',
            },
          ],
          spEntityId: 'Test string',
        },
      },
    );
    /** Delete an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.inboundSamlConfigs.delete({
      name: 'Test string',
    });
    /** Retrieve an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.inboundSamlConfigs.get({
      name: 'Test string',
    });
    /** List all inbound SAML configurations for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.inboundSamlConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.inboundSamlConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        enabled: true,
        idpConfig: {
          idpCertificates: [
            {
              x509Certificate: 'Test string',
            },
          ],
          idpEntityId: 'Test string',
          signRequest: true,
          ssoUrl: 'Test string',
        },
        name: 'Test string',
        spConfig: {
          callbackUri: 'Test string',
          spCertificates: [
            {
              expiresAt: 'Test string',
              x509Certificate: 'Test string',
            },
          ],
          spEntityId: 'Test string',
        },
      },
    );
    /** Create an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.oauthIdpConfigs.create(
      {
        oauthIdpConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        clientId: 'Test string',
        clientSecret: 'Test string',
        displayName: 'Test string',
        enabled: true,
        issuer: 'Test string',
        name: 'Test string',
        responseType: {
          code: true,
          idToken: true,
          token: true,
        },
      },
    );
    /** Delete an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.oauthIdpConfigs.delete({
      name: 'Test string',
    });
    /** Retrieve an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.oauthIdpConfigs.get({
      name: 'Test string',
    });
    /** List all Oidc Idp configurations for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.oauthIdpConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.oauthIdpConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        clientId: 'Test string',
        clientSecret: 'Test string',
        displayName: 'Test string',
        enabled: true,
        issuer: 'Test string',
        name: 'Test string',
        responseType: {
          code: true,
          idToken: true,
          token: true,
        },
      },
    );
    /** Create a tenant. Requires write permission on the Agent project. */
    await gapi.client.identitytoolkit.projects.tenants.create(
      {
        parent: 'Test string',
      },
      {
        allowPasswordSignup: true,
        autodeleteAnonymousUsers: true,
        client: {
          permissions: {
            disabledUserDeletion: true,
            disabledUserSignup: true,
          },
        },
        disableAuth: true,
        displayName: 'Test string',
        emailPrivacyConfig: {
          enableImprovedEmailPrivacy: true,
        },
        enableAnonymousUser: true,
        enableEmailLinkSignin: true,
        hashConfig: {
          algorithm: 'Test string',
          memoryCost: 42,
          rounds: 42,
          saltSeparator: 'Test string',
          signerKey: 'Test string',
        },
        inheritance: {
          emailSendingConfig: true,
        },
        mfaConfig: {
          enabledProviders: ['Test string'],
          providerConfigs: [
            {
              state: 'Test string',
              totpProviderConfig: {
                adjacentIntervals: 42,
              },
            },
          ],
          state: 'Test string',
        },
        mobileLinksConfig: {
          domain: 'Test string',
        },
        monitoring: {
          requestLogging: {
            enabled: true,
          },
        },
        name: 'Test string',
        passwordPolicyConfig: {
          forceUpgradeOnSignin: true,
          lastUpdateTime: 'Test string',
          passwordPolicyEnforcementState: 'Test string',
          passwordPolicyVersions: [
            {
              customStrengthOptions: {
                containsLowercaseCharacter: true,
                containsNonAlphanumericCharacter: true,
                containsNumericCharacter: true,
                containsUppercaseCharacter: true,
                maxPasswordLength: 42,
                minPasswordLength: 42,
              },
              schemaVersion: 42,
            },
          ],
        },
        recaptchaConfig: {
          emailPasswordEnforcementState: 'Test string',
          managedRules: [
            {
              action: 'Test string',
              endScore: 42,
            },
          ],
          phoneEnforcementState: 'Test string',
          recaptchaKeys: [
            {
              key: 'Test string',
              type: 'Test string',
            },
          ],
          tollFraudManagedRules: [
            {
              action: 'Test string',
              startScore: 42,
            },
          ],
          useAccountDefender: true,
          useSmsBotScore: true,
          useSmsTollFraudProtection: true,
        },
        smsRegionConfig: {
          allowByDefault: {
            disallowedRegions: ['Test string'],
          },
          allowlistOnly: {
            allowedRegions: ['Test string'],
          },
        },
        testPhoneNumbers: {
          A: 'Test string',
        },
      },
    );
    /** Delete a tenant. Requires write permission on the Agent project. */
    await gapi.client.identitytoolkit.projects.tenants.delete({
      name: 'Test string',
    });
    /** Get a tenant. Requires read permission on the Tenant resource. */
    await gapi.client.identitytoolkit.projects.tenants.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. An error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Caller must have the right Google IAM permission on the resource. */
    await gapi.client.identitytoolkit.projects.tenants.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** List tenants under the given agent project. Requires read permission on the Agent project. */
    await gapi.client.identitytoolkit.projects.tenants.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a tenant. Requires write permission on the Tenant resource. */
    await gapi.client.identitytoolkit.projects.tenants.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        allowPasswordSignup: true,
        autodeleteAnonymousUsers: true,
        client: {
          permissions: {
            disabledUserDeletion: true,
            disabledUserSignup: true,
          },
        },
        disableAuth: true,
        displayName: 'Test string',
        emailPrivacyConfig: {
          enableImprovedEmailPrivacy: true,
        },
        enableAnonymousUser: true,
        enableEmailLinkSignin: true,
        hashConfig: {
          algorithm: 'Test string',
          memoryCost: 42,
          rounds: 42,
          saltSeparator: 'Test string',
          signerKey: 'Test string',
        },
        inheritance: {
          emailSendingConfig: true,
        },
        mfaConfig: {
          enabledProviders: ['Test string'],
          providerConfigs: [
            {
              state: 'Test string',
              totpProviderConfig: {
                adjacentIntervals: 42,
              },
            },
          ],
          state: 'Test string',
        },
        mobileLinksConfig: {
          domain: 'Test string',
        },
        monitoring: {
          requestLogging: {
            enabled: true,
          },
        },
        name: 'Test string',
        passwordPolicyConfig: {
          forceUpgradeOnSignin: true,
          lastUpdateTime: 'Test string',
          passwordPolicyEnforcementState: 'Test string',
          passwordPolicyVersions: [
            {
              customStrengthOptions: {
                containsLowercaseCharacter: true,
                containsNonAlphanumericCharacter: true,
                containsNumericCharacter: true,
                containsUppercaseCharacter: true,
                maxPasswordLength: 42,
                minPasswordLength: 42,
              },
              schemaVersion: 42,
            },
          ],
        },
        recaptchaConfig: {
          emailPasswordEnforcementState: 'Test string',
          managedRules: [
            {
              action: 'Test string',
              endScore: 42,
            },
          ],
          phoneEnforcementState: 'Test string',
          recaptchaKeys: [
            {
              key: 'Test string',
              type: 'Test string',
            },
          ],
          tollFraudManagedRules: [
            {
              action: 'Test string',
              startScore: 42,
            },
          ],
          useAccountDefender: true,
          useSmsBotScore: true,
          useSmsTollFraudProtection: true,
        },
        smsRegionConfig: {
          allowByDefault: {
            disallowedRegions: ['Test string'],
          },
          allowlistOnly: {
            allowedRegions: ['Test string'],
          },
        },
        testPhoneNumbers: {
          A: 'Test string',
        },
      },
    );
    /** Sets the access control policy for a resource. If the policy exists, it is replaced. Caller must have the right Google IAM permission on the resource. */
    await gapi.client.identitytoolkit.projects.tenants.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns the caller's permissions on a resource. An error is returned if the resource does not exist. A caller is not required to have Google IAM permission to make this request. */
    await gapi.client.identitytoolkit.projects.tenants.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.create(
      {
        idpId: 'Test string',
        parent: 'Test string',
      },
      {
        appleSignInConfig: {
          bundleIds: ['Test string'],
          codeFlowConfig: {
            keyId: 'Test string',
            privateKey: 'Test string',
            teamId: 'Test string',
          },
        },
        clientId: 'Test string',
        clientSecret: 'Test string',
        enabled: true,
        name: 'Test string',
      },
    );
    /** Delete a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.delete(
      {
        name: 'Test string',
      },
    );
    /** Retrieve a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.get(
      {
        name: 'Test string',
      },
    );
    /** List all default supported Idp configurations for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Update a default supported Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        appleSignInConfig: {
          bundleIds: ['Test string'],
          codeFlowConfig: {
            keyId: 'Test string',
            privateKey: 'Test string',
            teamId: 'Test string',
          },
        },
        clientId: 'Test string',
        clientSecret: 'Test string',
        enabled: true,
        name: 'Test string',
      },
    );
    /** Create an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.inboundSamlConfigs.create(
      {
        inboundSamlConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        enabled: true,
        idpConfig: {
          idpCertificates: [
            {
              x509Certificate: 'Test string',
            },
          ],
          idpEntityId: 'Test string',
          signRequest: true,
          ssoUrl: 'Test string',
        },
        name: 'Test string',
        spConfig: {
          callbackUri: 'Test string',
          spCertificates: [
            {
              expiresAt: 'Test string',
              x509Certificate: 'Test string',
            },
          ],
          spEntityId: 'Test string',
        },
      },
    );
    /** Delete an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.inboundSamlConfigs.delete(
      {
        name: 'Test string',
      },
    );
    /** Retrieve an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.inboundSamlConfigs.get({
      name: 'Test string',
    });
    /** List all inbound SAML configurations for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.inboundSamlConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an inbound SAML configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.inboundSamlConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        enabled: true,
        idpConfig: {
          idpCertificates: [
            {
              x509Certificate: 'Test string',
            },
          ],
          idpEntityId: 'Test string',
          signRequest: true,
          ssoUrl: 'Test string',
        },
        name: 'Test string',
        spConfig: {
          callbackUri: 'Test string',
          spCertificates: [
            {
              expiresAt: 'Test string',
              x509Certificate: 'Test string',
            },
          ],
          spEntityId: 'Test string',
        },
      },
    );
    /** Create an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.oauthIdpConfigs.create(
      {
        oauthIdpConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        clientId: 'Test string',
        clientSecret: 'Test string',
        displayName: 'Test string',
        enabled: true,
        issuer: 'Test string',
        name: 'Test string',
        responseType: {
          code: true,
          idToken: true,
          token: true,
        },
      },
    );
    /** Delete an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.oauthIdpConfigs.delete({
      name: 'Test string',
    });
    /** Retrieve an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.oauthIdpConfigs.get({
      name: 'Test string',
    });
    /** List all Oidc Idp configurations for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.oauthIdpConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an Oidc Idp configuration for an Identity Toolkit project. */
    await gapi.client.identitytoolkit.projects.tenants.oauthIdpConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        clientId: 'Test string',
        clientSecret: 'Test string',
        displayName: 'Test string',
        enabled: true,
        issuer: 'Test string',
        name: 'Test string',
        responseType: {
          code: true,
          idToken: true,
          token: true,
        },
      },
    );
    /** Gets password policy config set on the project or tenant. */
    await gapi.client.identitytoolkit.v2.getPasswordPolicy({
      tenantId: 'Test string',
    });
    /** Gets parameters needed for reCAPTCHA analysis. */
    await gapi.client.identitytoolkit.v2.getRecaptchaConfig({
      clientType: 'Test string',
      tenantId: 'Test string',
      version: 'Test string',
    });
  }
});
