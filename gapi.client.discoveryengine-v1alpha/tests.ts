/* This is stub file for gapi.client.discoveryengine-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230117

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://discoveryengine.googleapis.com/$discovery/rest?version=v1alpha');
    /** now we can use gapi.client.discoveryengine */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Creates a Document. */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.create({
            documentId: "Test string",
            parent: "Test string",
        }, {
            id: "Test string",
            jsonData: "Test string",
            name: "Test string",
            parentDocumentId: "Test string",
            schemaId: "Test string",
            structData: {
                A: 42
            },
        });
        /** Deletes a Document. */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.delete({
            name: "Test string",
        });
        /** Gets a Document. */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.get({
            name: "Test string",
        });
        /**
         * Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items will be created. Note: It is possible for a subset of the Documents to be successfully
         * updated.
         */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.import({
            parent: "Test string",
        }, {
            bigquerySource: {
                dataSchema: "Test string",
                datasetId: "Test string",
                gcsStagingDir: "Test string",
                partitionDate: {
                    day: 42,
                    month: 42,
                    year: 42,
                },
                projectId: "Test string",
                tableId: "Test string",
            },
            errorConfig: {
                gcsPrefix: "Test string",
            },
            gcsSource: {
                dataSchema: "Test string",
                inputUris: [
                    "Test string"
                ],
            },
            inlineSource: {
                documents: [
                    {
                        id: "Test string",
                        jsonData: "Test string",
                        name: "Test string",
                        parentDocumentId: "Test string",
                        schemaId: "Test string",
                        structData: {
                            A: 42
                        },
                    }
                ],
            },
            reconciliationMode: "Test string",
        });
        /** Gets a list of Documents. */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a Document. */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.patch({
            allowMissing: true,
            name: "Test string",
        }, {
            id: "Test string",
            jsonData: "Test string",
            name: "Test string",
            parentDocumentId: "Test string",
            schemaId: "Test string",
            structData: {
                A: 42
            },
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.discoveryengine.projects.locations.dataStores.models.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.discoveryengine.projects.locations.dataStores.models.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.discoveryengine.projects.locations.dataStores.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.discoveryengine.projects.locations.dataStores.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Makes a recommendation, which requires a contextual user event. */
        await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.recommend({
            servingConfig: "Test string",
        }, {
            filter: "Test string",
            pageSize: 42,
            params: {
                A: 42
            },
            userEvent: {
                attributes: {
                    A: {
                        numbers: [
                            42
                        ],
                        text: [
                            "Test string"
                        ],
                    }
                },
                attributionToken: "Test string",
                completionInfo: {
                    selectedPosition: 42,
                    selectedSuggestion: "Test string",
                },
                directUserRequest: true,
                documents: [
                    {
                        id: "Test string",
                        name: "Test string",
                        promotionIds: [
                            "Test string"
                        ],
                        quantity: 42,
                    }
                ],
                eventTime: "Test string",
                eventType: "Test string",
                filter: "Test string",
                mediaInfo: {
                    mediaProgressDuration: "Test string",
                    mediaProgressPercentage: 42,
                },
                pageInfo: {
                    pageCategory: "Test string",
                    pageviewId: "Test string",
                    referrerUri: "Test string",
                    uri: "Test string",
                },
                panel: {
                    displayName: "Test string",
                    panelId: "Test string",
                    panelPosition: 42,
                    totalPanels: 42,
                },
                promotionIds: [
                    "Test string"
                ],
                searchInfo: {
                    offset: 42,
                    orderBy: "Test string",
                    searchQuery: "Test string",
                },
                sessionId: "Test string",
                tagIds: [
                    "Test string"
                ],
                transactionInfo: {
                    cost: 42,
                    currency: "Test string",
                    discountValue: 42,
                    tax: 42,
                    transactionId: "Test string",
                    value: 42,
                },
                userInfo: {
                    userAgent: "Test string",
                    userId: "Test string",
                },
                userPseudoId: "Test string",
            },
            userLabels: {
                A: "Test string"
            },
            validateOnly: true,
        });
        /**
         * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Discovery Engine
         * API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
         */
        await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.collect({
            ets: "Test string",
            parent: "Test string",
            uri: "Test string",
            userEvent: "Test string",
        });
        /**
         * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is
         * of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
         */
        await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.import({
            parent: "Test string",
        }, {
            bigquerySource: {
                dataSchema: "Test string",
                datasetId: "Test string",
                gcsStagingDir: "Test string",
                partitionDate: {
                    day: 42,
                    month: 42,
                    year: 42,
                },
                projectId: "Test string",
                tableId: "Test string",
            },
            errorConfig: {
                gcsPrefix: "Test string",
            },
            gcsSource: {
                dataSchema: "Test string",
                inputUris: [
                    "Test string"
                ],
            },
            inlineSource: {
                userEvents: [
                    {
                        attributes: {
                            A: {
                                numbers: [
                                    42
                                ],
                                text: [
                                    "Test string"
                                ],
                            }
                        },
                        attributionToken: "Test string",
                        completionInfo: {
                            selectedPosition: 42,
                            selectedSuggestion: "Test string",
                        },
                        directUserRequest: true,
                        documents: [
                            {
                                id: "Test string",
                                name: "Test string",
                                promotionIds: [
                                    "Test string"
                                ],
                                quantity: 42,
                            }
                        ],
                        eventTime: "Test string",
                        eventType: "Test string",
                        filter: "Test string",
                        mediaInfo: {
                            mediaProgressDuration: "Test string",
                            mediaProgressPercentage: 42,
                        },
                        pageInfo: {
                            pageCategory: "Test string",
                            pageviewId: "Test string",
                            referrerUri: "Test string",
                            uri: "Test string",
                        },
                        panel: {
                            displayName: "Test string",
                            panelId: "Test string",
                            panelPosition: 42,
                            totalPanels: 42,
                        },
                        promotionIds: [
                            "Test string"
                        ],
                        searchInfo: {
                            offset: 42,
                            orderBy: "Test string",
                            searchQuery: "Test string",
                        },
                        sessionId: "Test string",
                        tagIds: [
                            "Test string"
                        ],
                        transactionInfo: {
                            cost: 42,
                            currency: "Test string",
                            discountValue: 42,
                            tax: 42,
                            transactionId: "Test string",
                            value: 42,
                        },
                        userInfo: {
                            userAgent: "Test string",
                            userId: "Test string",
                        },
                        userPseudoId: "Test string",
                    }
                ],
            },
        });
        /** Writes a single user event. */
        await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.write({
            parent: "Test string",
        }, {
            attributes: {
                A: {
                    numbers: [
                        42
                    ],
                    text: [
                        "Test string"
                    ],
                }
            },
            attributionToken: "Test string",
            completionInfo: {
                selectedPosition: 42,
                selectedSuggestion: "Test string",
            },
            directUserRequest: true,
            documents: [
                {
                    id: "Test string",
                    name: "Test string",
                    promotionIds: [
                        "Test string"
                    ],
                    quantity: 42,
                }
            ],
            eventTime: "Test string",
            eventType: "Test string",
            filter: "Test string",
            mediaInfo: {
                mediaProgressDuration: "Test string",
                mediaProgressPercentage: 42,
            },
            pageInfo: {
                pageCategory: "Test string",
                pageviewId: "Test string",
                referrerUri: "Test string",
                uri: "Test string",
            },
            panel: {
                displayName: "Test string",
                panelId: "Test string",
                panelPosition: 42,
                totalPanels: 42,
            },
            promotionIds: [
                "Test string"
            ],
            searchInfo: {
                offset: 42,
                orderBy: "Test string",
                searchQuery: "Test string",
            },
            sessionId: "Test string",
            tagIds: [
                "Test string"
            ],
            transactionInfo: {
                cost: 42,
                currency: "Test string",
                discountValue: 42,
                tax: 42,
                transactionId: "Test string",
                value: 42,
            },
            userInfo: {
                userAgent: "Test string",
                userId: "Test string",
            },
            userPseudoId: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.discoveryengine.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.discoveryengine.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.discoveryengine.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.discoveryengine.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
