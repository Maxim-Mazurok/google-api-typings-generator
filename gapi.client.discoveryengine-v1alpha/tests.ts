/* This is stub file for gapi.client.discoveryengine-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250401

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://discoveryengine.googleapis.com/$discovery/rest?version=v1alpha',
  );
  /** now we can use gapi.client.discoveryengine */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Search your organization's data in the Cloud Search index */
    'https://www.googleapis.com/auth/cloud_search.query',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Uploads a file for Notebook LM to use. Creates a Source. */
    await gapi.client.discoveryengine.media.upload(
      {
        parent: 'Test string',
      },
      {
        blob: {
          algorithm: 'Test string',
          bigstoreObjectRef: 'Test string',
          blobRef: 'Test string',
          blobstore2Info: {
            blobGeneration: 'Test string',
            blobId: 'Test string',
            downloadReadHandle: 'Test string',
            readToken: 'Test string',
            uploadMetadataContainer: 'Test string',
          },
          compositeMedia: [
            {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
          ],
          contentType: 'Test string',
          contentTypeInfo: {
            bestGuess: 'Test string',
            fromBytes: 'Test string',
            fromFileName: 'Test string',
            fromHeader: 'Test string',
            fromUrlPath: 'Test string',
          },
          cosmoBinaryReference: 'Test string',
          crc32cHash: 42,
          diffChecksumsResponse: {
            checksumsLocation: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            chunkSizeBytes: 'Test string',
            objectLocation: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            objectSizeBytes: 'Test string',
            objectVersion: 'Test string',
          },
          diffDownloadResponse: {
            objectLocation: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
          },
          diffUploadRequest: {
            checksumsInfo: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            objectInfo: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            objectVersion: 'Test string',
          },
          diffUploadResponse: {
            objectVersion: 'Test string',
            originalObject: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
          },
          diffVersionResponse: {
            objectSizeBytes: 'Test string',
            objectVersion: 'Test string',
          },
          downloadParameters: {
            allowGzipCompression: true,
            ignoreRange: true,
          },
          filename: 'Test string',
          hash: 'Test string',
          hashVerified: true,
          inline: 'Test string',
          isPotentialRetry: true,
          length: 'Test string',
          md5Hash: 'Test string',
          mediaId: 'Test string',
          objectId: {
            bucketName: 'Test string',
            generation: 'Test string',
            objectName: 'Test string',
          },
          path: 'Test string',
          referenceType: 'Test string',
          sha1Hash: 'Test string',
          sha256Hash: 'Test string',
          timestamp: 'Test string',
          token: 'Test string',
        },
        mediaRequestInfo: {
          currentBytes: 'Test string',
          customData: 'Test string',
          diffObjectVersion: 'Test string',
          finalStatus: 42,
          notificationType: 'Test string',
          requestId: 'Test string',
          requestReceivedParamsServingInfo: 'Test string',
          totalBytes: 'Test string',
          totalBytesIsEstimated: true,
        },
      },
    );
    /** Gets a Project. Returns NOT_FOUND when the project is not yet created. */
    await gapi.client.discoveryengine.projects.get({
      name: 'Test string',
    });
    /** Provisions the project resource. During the process, related systems will get prepared and initialized. Caller must read the [Terms for data use](https://cloud.google.com/retail/data-use-terms), and optionally specify in request to provide consent to that service terms. */
    await gapi.client.discoveryengine.projects.provision(
      {
        name: 'Test string',
      },
      {
        acceptDataUseTerms: true,
        dataUseTermsVersion: 'Test string',
      },
    );
    /** Updates service terms for this project. This method can be used to retroactively accept the latest terms. Terms available for update: * [Terms for data use](https://cloud.google.com/retail/data-use-terms) */
    await gapi.client.discoveryengine.projects.reportConsentChange(
      {
        project: 'Test string',
      },
      {
        consentChangeAction: 'Test string',
        serviceTermId: 'Test string',
        serviceTermVersion: 'Test string',
      },
    );
    /** Estimates the data size to be used by a customer. */
    await gapi.client.discoveryengine.projects.locations.estimateDataSize(
      {
        location: 'Test string',
      },
      {
        fileDataSource: {
          bigquerySource: {
            dataSchema: 'Test string',
            datasetId: 'Test string',
            gcsStagingDir: 'Test string',
            partitionDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            projectId: 'Test string',
            tableId: 'Test string',
          },
          gcsSource: {
            dataSchema: 'Test string',
            inputUris: ['Test string'],
          },
        },
        websiteDataSource: {
          estimatorUriPatterns: [
            {
              exactMatch: true,
              exclusive: true,
              providedUriPattern: 'Test string',
            },
          ],
        },
      },
    );
    /** Gets the AclConfig. */
    await gapi.client.discoveryengine.projects.locations.getAclConfig({
      name: 'Test string',
    });
    /** Gets the CmekConfig. */
    await gapi.client.discoveryengine.projects.locations.getCmekConfig({
      name: 'Test string',
    });
    /** Obtains the time series data of organic or dedicated crawl rate for monitoring. When dedicated crawl rate is not set, it will return vertex AI's organic crawl rate time series. Organic crawl means Google automatically crawl the internet at its own convenience. When dedicated crawl rate is set, it will return vertex AI's dedicated crawl rate time series. */
    await gapi.client.discoveryengine.projects.locations.obtainCrawlRate(
      {
        location: 'Test string',
      },
      {
        crawlRateScope: 'Test string',
      },
    );
    /** Removes the dedicated crawl rate for a craw_rate_scope. If the dedicated crawl rate was set, this will disable vertex AI's crawl bot from using the dedicated crawl rate for crawling. If the dedicated crawl rate was not set, this is a no-op. */
    await gapi.client.discoveryengine.projects.locations.removeDedicatedCrawlRate(
      {
        location: 'Test string',
      },
      {
        crawlRateScope: 'Test string',
      },
    );
    /** Sets the dedicated crawl rate for a crawl_rate_scope. If the dedicated crawl rate was not set, this will enable vertex AI's crawl bot to use the new dedicated crawl rate for crawling. If the dedicated crawl rate was set, vertex AI's crawl bot will try to update the rate to the new value. If the new value is too high, the crawl bot may crawl at a lower rate to avoid overloading the user's website. */
    await gapi.client.discoveryengine.projects.locations.setDedicatedCrawlRate(
      {
        location: 'Test string',
      },
      {
        crawlRate: 42,
        crawlRateScope: 'Test string',
        crawlType: 'Test string',
        mode: 'Test string',
      },
    );
    /** Creates a Collection and sets up the DataConnector for it. To stop a DataConnector after setup, use the CollectionService.DeleteCollection method. */
    await gapi.client.discoveryengine.projects.locations.setUpDataConnector(
      {
        parent: 'Test string',
      },
      {
        collectionDisplayName: 'Test string',
        collectionId: 'Test string',
        dataConnector: {
          actionConfig: {
            actionParams: {
              A: 42,
            },
            isActionConfigured: true,
            serviceName: 'Test string',
          },
          alertPolicyConfigs: [
            {
              alertEnrollments: [
                {
                  alertId: 'Test string',
                  enrollState: 'Test string',
                },
              ],
              alertPolicyName: 'Test string',
            },
          ],
          autoRunDisabled: true,
          bapConfig: {
            supportedConnectorModes: ['Test string'],
          },
          blockingReasons: ['Test string'],
          connectorType: 'Test string',
          createTime: 'Test string',
          dataSource: 'Test string',
          destinationConfigs: [
            {
              destinations: [
                {
                  host: 'Test string',
                  port: 42,
                },
              ],
              key: 'Test string',
              params: {
                A: 42,
              },
            },
          ],
          entities: [
            {
              dataStore: 'Test string',
              entityName: 'Test string',
              healthcareFhirConfig: {
                enableConfigurableSchema: true,
                enableStaticIndexingForBatchIngestion: true,
              },
              keyPropertyMappings: {
                A: 'Test string',
              },
              params: {
                A: 42,
              },
              startingSchema: {
                fieldConfigs: [
                  {
                    advancedSiteSearchDataSources: ['Test string'],
                    completableOption: 'Test string',
                    dynamicFacetableOption: 'Test string',
                    fieldPath: 'Test string',
                    fieldType: 'Test string',
                    indexableOption: 'Test string',
                    keyPropertyType: 'Test string',
                    metatagName: 'Test string',
                    recsFilterableOption: 'Test string',
                    retrievableOption: 'Test string',
                    schemaOrgPaths: ['Test string'],
                    searchableOption: 'Test string',
                  },
                ],
                jsonSchema: 'Test string',
                name: 'Test string',
                structSchema: {
                  A: 42,
                },
              },
            },
          ],
          errors: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          identityRefreshInterval: 'Test string',
          identityScheduleConfig: {
            nextSyncTime: {
              day: 42,
              hours: 42,
              minutes: 42,
              month: 42,
              nanos: 42,
              seconds: 42,
              timeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              utcOffset: 'Test string',
              year: 42,
            },
            refreshInterval: 'Test string',
          },
          kmsKeyName: 'Test string',
          lastSyncTime: 'Test string',
          latestPauseTime: 'Test string',
          name: 'Test string',
          nextSyncTime: {
            day: 42,
            hours: 42,
            minutes: 42,
            month: 42,
            nanos: 42,
            seconds: 42,
            timeZone: {
              id: 'Test string',
              version: 'Test string',
            },
            utcOffset: 'Test string',
            year: 42,
          },
          params: {
            A: 42,
          },
          privateConnectivityProjectId: 'Test string',
          realtimeState: 'Test string',
          realtimeSyncConfig: {
            realtimeSyncSecret: 'Test string',
            webhookUri: 'Test string',
          },
          refreshInterval: 'Test string',
          state: 'Test string',
          staticIpAddresses: ['Test string'],
          staticIpEnabled: true,
          syncMode: 'Test string',
          updateTime: 'Test string',
        },
      },
    );
    /** Default ACL configuration for use in a location of a customer's project. Updates will only reflect to new data stores. Existing data stores will still use the old value. */
    await gapi.client.discoveryengine.projects.locations.updateAclConfig(
      {
        name: 'Test string',
      },
      {
        idpConfig: {
          externalIdpConfig: {
            workforcePoolName: 'Test string',
          },
          idpType: 'Test string',
        },
        name: 'Test string',
      },
    );
    /** Provisions a CMEK key for use in a location of a customer's project. This method will also conduct location validation on the provided cmekConfig to make sure the key is valid and can be used in the selected location. */
    await gapi.client.discoveryengine.projects.locations.updateCmekConfig(
      {
        name: 'Test string',
        setDefault: true,
      },
      {
        isDefault: true,
        kmsKey: 'Test string',
        kmsKeyVersion: 'Test string',
        lastRotationTimestampMicros: 'Test string',
        name: 'Test string',
        notebooklmState: 'Test string',
        singleRegionKeys: [
          {
            kmsKey: 'Test string',
          },
        ],
        state: 'Test string',
      },
    );
    /** De-provisions a CmekConfig. */
    await gapi.client.discoveryengine.projects.locations.cmekConfigs.delete({
      name: 'Test string',
    });
    /** Gets the CmekConfig. */
    await gapi.client.discoveryengine.projects.locations.cmekConfigs.get({
      name: 'Test string',
    });
    /** Lists all the CmekConfigs with the project. */
    await gapi.client.discoveryengine.projects.locations.cmekConfigs.list({
      parent: 'Test string',
    });
    /** Provisions a CMEK key for use in a location of a customer's project. This method will also conduct location validation on the provided cmekConfig to make sure the key is valid and can be used in the selected location. */
    await gapi.client.discoveryengine.projects.locations.cmekConfigs.patch(
      {
        name: 'Test string',
        setDefault: true,
      },
      {
        isDefault: true,
        kmsKey: 'Test string',
        kmsKeyVersion: 'Test string',
        lastRotationTimestampMicros: 'Test string',
        name: 'Test string',
        notebooklmState: 'Test string',
        singleRegionKeys: [
          {
            kmsKey: 'Test string',
          },
        ],
        state: 'Test string',
      },
    );
    /** Deletes a Collection. */
    await gapi.client.discoveryengine.projects.locations.collections.delete({
      name: 'Test string',
    });
    /** Gets a Collection. */
    await gapi.client.discoveryengine.projects.locations.collections.get({
      name: 'Test string',
    });
    /** Gets the DataConnector. DataConnector is a singleton resource for each Collection. */
    await gapi.client.discoveryengine.projects.locations.collections.getDataConnector(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of Collections. */
    await gapi.client.discoveryengine.projects.locations.collections.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Collection. */
    await gapi.client.discoveryengine.projects.locations.collections.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        dataConnector: {
          actionConfig: {
            actionParams: {
              A: 42,
            },
            isActionConfigured: true,
            serviceName: 'Test string',
          },
          alertPolicyConfigs: [
            {
              alertEnrollments: [
                {
                  alertId: 'Test string',
                  enrollState: 'Test string',
                },
              ],
              alertPolicyName: 'Test string',
            },
          ],
          autoRunDisabled: true,
          bapConfig: {
            supportedConnectorModes: ['Test string'],
          },
          blockingReasons: ['Test string'],
          connectorType: 'Test string',
          createTime: 'Test string',
          dataSource: 'Test string',
          destinationConfigs: [
            {
              destinations: [
                {
                  host: 'Test string',
                  port: 42,
                },
              ],
              key: 'Test string',
              params: {
                A: 42,
              },
            },
          ],
          entities: [
            {
              dataStore: 'Test string',
              entityName: 'Test string',
              healthcareFhirConfig: {
                enableConfigurableSchema: true,
                enableStaticIndexingForBatchIngestion: true,
              },
              keyPropertyMappings: {
                A: 'Test string',
              },
              params: {
                A: 42,
              },
              startingSchema: {
                fieldConfigs: [
                  {
                    advancedSiteSearchDataSources: ['Test string'],
                    completableOption: 'Test string',
                    dynamicFacetableOption: 'Test string',
                    fieldPath: 'Test string',
                    fieldType: 'Test string',
                    indexableOption: 'Test string',
                    keyPropertyType: 'Test string',
                    metatagName: 'Test string',
                    recsFilterableOption: 'Test string',
                    retrievableOption: 'Test string',
                    schemaOrgPaths: ['Test string'],
                    searchableOption: 'Test string',
                  },
                ],
                jsonSchema: 'Test string',
                name: 'Test string',
                structSchema: {
                  A: 42,
                },
              },
            },
          ],
          errors: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          identityRefreshInterval: 'Test string',
          identityScheduleConfig: {
            nextSyncTime: {
              day: 42,
              hours: 42,
              minutes: 42,
              month: 42,
              nanos: 42,
              seconds: 42,
              timeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              utcOffset: 'Test string',
              year: 42,
            },
            refreshInterval: 'Test string',
          },
          kmsKeyName: 'Test string',
          lastSyncTime: 'Test string',
          latestPauseTime: 'Test string',
          name: 'Test string',
          nextSyncTime: {
            day: 42,
            hours: 42,
            minutes: 42,
            month: 42,
            nanos: 42,
            seconds: 42,
            timeZone: {
              id: 'Test string',
              version: 'Test string',
            },
            utcOffset: 'Test string',
            year: 42,
          },
          params: {
            A: 42,
          },
          privateConnectivityProjectId: 'Test string',
          realtimeState: 'Test string',
          realtimeSyncConfig: {
            realtimeSyncSecret: 'Test string',
            webhookUri: 'Test string',
          },
          refreshInterval: 'Test string',
          state: 'Test string',
          staticIpAddresses: ['Test string'],
          staticIpEnabled: true,
          syncMode: 'Test string',
          updateTime: 'Test string',
        },
        displayName: 'Test string',
        name: 'Test string',
      },
    );
    /** Updates a DataConnector. */
    await gapi.client.discoveryengine.projects.locations.collections.updateDataConnector(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        actionConfig: {
          actionParams: {
            A: 42,
          },
          isActionConfigured: true,
          serviceName: 'Test string',
        },
        alertPolicyConfigs: [
          {
            alertEnrollments: [
              {
                alertId: 'Test string',
                enrollState: 'Test string',
              },
            ],
            alertPolicyName: 'Test string',
          },
        ],
        autoRunDisabled: true,
        bapConfig: {
          supportedConnectorModes: ['Test string'],
        },
        blockingReasons: ['Test string'],
        connectorType: 'Test string',
        createTime: 'Test string',
        dataSource: 'Test string',
        destinationConfigs: [
          {
            destinations: [
              {
                host: 'Test string',
                port: 42,
              },
            ],
            key: 'Test string',
            params: {
              A: 42,
            },
          },
        ],
        entities: [
          {
            dataStore: 'Test string',
            entityName: 'Test string',
            healthcareFhirConfig: {
              enableConfigurableSchema: true,
              enableStaticIndexingForBatchIngestion: true,
            },
            keyPropertyMappings: {
              A: 'Test string',
            },
            params: {
              A: 42,
            },
            startingSchema: {
              fieldConfigs: [
                {
                  advancedSiteSearchDataSources: ['Test string'],
                  completableOption: 'Test string',
                  dynamicFacetableOption: 'Test string',
                  fieldPath: 'Test string',
                  fieldType: 'Test string',
                  indexableOption: 'Test string',
                  keyPropertyType: 'Test string',
                  metatagName: 'Test string',
                  recsFilterableOption: 'Test string',
                  retrievableOption: 'Test string',
                  schemaOrgPaths: ['Test string'],
                  searchableOption: 'Test string',
                },
              ],
              jsonSchema: 'Test string',
              name: 'Test string',
              structSchema: {
                A: 42,
              },
            },
          },
        ],
        errors: [
          {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
        ],
        identityRefreshInterval: 'Test string',
        identityScheduleConfig: {
          nextSyncTime: {
            day: 42,
            hours: 42,
            minutes: 42,
            month: 42,
            nanos: 42,
            seconds: 42,
            timeZone: {
              id: 'Test string',
              version: 'Test string',
            },
            utcOffset: 'Test string',
            year: 42,
          },
          refreshInterval: 'Test string',
        },
        kmsKeyName: 'Test string',
        lastSyncTime: 'Test string',
        latestPauseTime: 'Test string',
        name: 'Test string',
        nextSyncTime: {
          day: 42,
          hours: 42,
          minutes: 42,
          month: 42,
          nanos: 42,
          seconds: 42,
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          utcOffset: 'Test string',
          year: 42,
        },
        params: {
          A: 42,
        },
        privateConnectivityProjectId: 'Test string',
        realtimeState: 'Test string',
        realtimeSyncConfig: {
          realtimeSyncSecret: 'Test string',
          webhookUri: 'Test string',
        },
        refreshInterval: 'Test string',
        state: 'Test string',
        staticIpAddresses: ['Test string'],
        staticIpEnabled: true,
        syncMode: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Starts an immediate synchronization process for a DataConnector. Third Party Connector Users must specify which entities should be synced. FHIR Connectors must provide a timestamp to indicate the point in time from which data should be synced. */
    await gapi.client.discoveryengine.projects.locations.collections.dataConnector.startConnectorRun(
      {
        parent: 'Test string',
      },
      {
        entities: ['Test string'],
        forceRefreshContent: true,
        healthcareFhirResourceTypes: ['Test string'],
        syncIdentity: true,
        syncSinceTimestamp: 'Test string',
      },
    );
    /** Lists the ConnectorRuns of a DataConnector. */
    await gapi.client.discoveryengine.projects.locations.collections.dataConnector.connectorRuns.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataConnector.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataConnector.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Completes the specified user input with keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completeQuery(
      {
        dataStore: 'Test string',
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.create(
      {
        cmekConfigName: 'Test string',
        createAdvancedSiteSearch: true,
        dataStoreId: 'Test string',
        disableCmek: true,
        parent: 'Test string',
        skipDefaultSchemaCreation: true,
      },
      {
        aclEnabled: true,
        advancedSiteSearchConfig: {
          disableAutomaticRefresh: true,
          disableInitialIndex: true,
        },
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        cmekConfig: {
          isDefault: true,
          kmsKey: 'Test string',
          kmsKeyVersion: 'Test string',
          lastRotationTimestampMicros: 'Test string',
          name: 'Test string',
          notebooklmState: 'Test string',
          singleRegionKeys: [
            {
              kmsKey: 'Test string',
            },
          ],
          state: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {
              enableImageAnnotation: true,
              enableTableAnnotation: true,
            },
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {
                enableImageAnnotation: true,
                enableTableAnnotation: true,
              },
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        healthcareFhirConfig: {
          enableConfigurableSchema: true,
          enableStaticIndexingForBatchIngestion: true,
        },
        identityMappingStore: 'Test string',
        idpConfig: {
          externalIdpConfig: {
            workforcePoolName: 'Test string',
          },
          idpType: 'Test string',
        },
        industryVertical: 'Test string',
        isInfobotFaqDataStore: true,
        kmsKeyName: 'Test string',
        languageInfo: {
          language: 'Test string',
          languageCode: 'Test string',
          normalizedLanguageCode: 'Test string',
          region: 'Test string',
        },
        name: 'Test string',
        naturalLanguageQueryUnderstandingConfig: {
          mode: 'Test string',
        },
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          fieldConfigs: [
            {
              advancedSiteSearchDataSources: ['Test string'],
              completableOption: 'Test string',
              dynamicFacetableOption: 'Test string',
              fieldPath: 'Test string',
              fieldType: 'Test string',
              indexableOption: 'Test string',
              keyPropertyType: 'Test string',
              metatagName: 'Test string',
              recsFilterableOption: 'Test string',
              retrievableOption: 'Test string',
              schemaOrgPaths: ['Test string'],
              searchableOption: 'Test string',
            },
          ],
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          superAdminEmailAddress: 'Test string',
          superAdminServiceAccount: 'Test string',
          type: 'Test string',
        },
      },
    );
    /** Deletes a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a DocumentProcessingConfig. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.getDocumentProcessingConfig(
      {
        name: 'Test string',
      },
    );
    /** Gets the SiteSearchEngine. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.getSiteSearchEngine(
      {
        name: 'Test string',
      },
    );
    /** Lists all the DataStores associated with the project. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a DataStore */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        aclEnabled: true,
        advancedSiteSearchConfig: {
          disableAutomaticRefresh: true,
          disableInitialIndex: true,
        },
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        cmekConfig: {
          isDefault: true,
          kmsKey: 'Test string',
          kmsKeyVersion: 'Test string',
          lastRotationTimestampMicros: 'Test string',
          name: 'Test string',
          notebooklmState: 'Test string',
          singleRegionKeys: [
            {
              kmsKey: 'Test string',
            },
          ],
          state: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {
              enableImageAnnotation: true,
              enableTableAnnotation: true,
            },
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {
                enableImageAnnotation: true,
                enableTableAnnotation: true,
              },
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        healthcareFhirConfig: {
          enableConfigurableSchema: true,
          enableStaticIndexingForBatchIngestion: true,
        },
        identityMappingStore: 'Test string',
        idpConfig: {
          externalIdpConfig: {
            workforcePoolName: 'Test string',
          },
          idpType: 'Test string',
        },
        industryVertical: 'Test string',
        isInfobotFaqDataStore: true,
        kmsKeyName: 'Test string',
        languageInfo: {
          language: 'Test string',
          languageCode: 'Test string',
          normalizedLanguageCode: 'Test string',
          region: 'Test string',
        },
        name: 'Test string',
        naturalLanguageQueryUnderstandingConfig: {
          mode: 'Test string',
        },
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          fieldConfigs: [
            {
              advancedSiteSearchDataSources: ['Test string'],
              completableOption: 'Test string',
              dynamicFacetableOption: 'Test string',
              fieldPath: 'Test string',
              fieldType: 'Test string',
              indexableOption: 'Test string',
              keyPropertyType: 'Test string',
              metatagName: 'Test string',
              recsFilterableOption: 'Test string',
              retrievableOption: 'Test string',
              schemaOrgPaths: ['Test string'],
              searchableOption: 'Test string',
            },
          ],
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          superAdminEmailAddress: 'Test string',
          superAdminServiceAccount: 'Test string',
          type: 'Test string',
        },
      },
    );
    /** Trains a custom model. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.trainCustomModel(
      {
        dataStore: 'Test string',
      },
      {
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsTrainingInput: {
          corpusDataPath: 'Test string',
          queryDataPath: 'Test string',
          testDataPath: 'Test string',
          trainDataPath: 'Test string',
        },
        modelId: 'Test string',
        modelType: 'Test string',
      },
    );
    /** Updates the DocumentProcessingConfig. DocumentProcessingConfig is a singleon resource of DataStore. It's empty when DataStore is created. The first call to this method will set up DocumentProcessingConfig. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.updateDocumentProcessingConfig(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        chunkingConfig: {
          layoutBasedChunkingConfig: {
            chunkSize: 42,
            includeAncestorHeadings: true,
          },
        },
        defaultParsingConfig: {
          digitalParsingConfig: {},
          layoutParsingConfig: {
            enableImageAnnotation: true,
            enableTableAnnotation: true,
          },
          ocrParsingConfig: {
            enhancedDocumentElements: ['Test string'],
            useNativeText: true,
          },
        },
        name: 'Test string',
        parsingConfigOverrides: {
          A: {
            digitalParsingConfig: {},
            layoutParsingConfig: {
              enableImageAnnotation: true,
              enableTableAnnotation: true,
            },
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
        },
      },
    );
    /** Gets index freshness metadata for Documents. Supported for website search only. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.batchGetDocumentsMetadata(
      {
        'matcher.fhirMatcher.fhirResources': 'Test string',
        'matcher.urisMatcher.uris': 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.create(
      {
        documentId: 'Test string',
        parent: 'Test string',
      },
      {
        aclInfo: {
          readers: [
            {
              idpWide: true,
              principals: [
                {
                  groupId: 'Test string',
                  userId: 'Test string',
                },
              ],
            },
          ],
        },
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
          pendingMessage: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      },
    );
    /** Deletes a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.get(
      {
        name: 'Test string',
      },
    );
    /** Gets the parsed layout information for a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.getProcessedDocument(
      {
        name: 'Test string',
        processedDocumentFormat: 'Test string',
        processedDocumentType: 'Test string',
      },
    );
    /** Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items are created. Note: It is possible for a subset of the Documents to be successfully updated. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.import(
      {
        parent: 'Test string',
      },
      {
        alloyDbSource: {
          clusterId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          locationId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        autoGenerateIds: true,
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        bigtableSource: {
          bigtableOptions: {
            families: {
              A: {
                columns: [
                  {
                    encoding: 'Test string',
                    fieldName: 'Test string',
                    qualifier: 'Test string',
                    type: 'Test string',
                  },
                ],
                encoding: 'Test string',
                fieldName: 'Test string',
                type: 'Test string',
              },
            },
            keyFieldName: 'Test string',
          },
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        cloudSqlSource: {
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          instanceId: 'Test string',
          offload: true,
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        fhirStoreSource: {
          fhirStore: 'Test string',
          gcsStagingDir: 'Test string',
          resourceTypes: ['Test string'],
          updateFromLatestPredefinedSchema: true,
        },
        firestoreSource: {
          collectionId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          projectId: 'Test string',
        },
        forceRefreshContent: true,
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        idField: 'Test string',
        inlineSource: {
          documents: [
            {
              aclInfo: {
                readers: [
                  {
                    idpWide: true,
                    principals: [
                      {
                        groupId: 'Test string',
                        userId: 'Test string',
                      },
                    ],
                  },
                ],
              },
              content: {
                mimeType: 'Test string',
                rawBytes: 'Test string',
                uri: 'Test string',
              },
              derivedStructData: {
                A: 42,
              },
              id: 'Test string',
              indexStatus: {
                errorSamples: [
                  {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                ],
                indexTime: 'Test string',
                pendingMessage: 'Test string',
              },
              indexTime: 'Test string',
              jsonData: 'Test string',
              name: 'Test string',
              parentDocumentId: 'Test string',
              schemaId: 'Test string',
              structData: {
                A: 42,
              },
            },
          ],
        },
        reconciliationMode: 'Test string',
        spannerSource: {
          databaseId: 'Test string',
          enableDataBoost: true,
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        updateMask: 'Test string',
      },
    );
    /** Gets a list of Documents. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        aclInfo: {
          readers: [
            {
              idpWide: true,
              principals: [
                {
                  groupId: 'Test string',
                  userId: 'Test string',
                },
              ],
            },
          ],
        },
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
          pendingMessage: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      },
    );
    /** Permanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.purge(
      {
        parent: 'Test string',
      },
      {
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        filter: 'Test string',
        force: true,
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          documents: ['Test string'],
        },
      },
    );
    /** Gets a Document. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.chunks.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of Chunks. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.documents.chunks.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.branches.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Completes the user input with advanced keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completionConfig.completeQuery(
      {
        completionConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              condition: 'Test string',
            },
          ],
        },
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        suggestionTypes: ['Test string'],
        suggestionTypeSpecs: [
          {
            maxSuggestions: 42,
            suggestionType: 'Test string',
          },
        ],
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Imports CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completionSuggestions.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          suggestions: [
            {
              alternativePhrases: ['Test string'],
              frequency: 'Test string',
              globalScore: 42,
              groupId: 'Test string',
              groupScore: 42,
              languageCode: 'Test string',
              suggestion: 'Test string',
            },
          ],
        },
      },
    );
    /** Permanently deletes all CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.completionSuggestions.purge(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Creates a Control. By default 1000 controls are allowed for a data store. A request can be submitted to adjust this limit. If the Control to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.create(
      {
        controlId: 'Test string',
        parent: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
          fixedBoost: 42,
          interpolationBoostSpec: {
            attributeType: 'Test string',
            controlPoints: [
              {
                attributeValue: 'Test string',
                boostAmount: 42,
              },
            ],
            fieldName: 'Test string',
            interpolationType: 'Test string',
          },
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryRegex: 'Test string',
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        promoteAction: {
          dataStore: 'Test string',
          searchLinkPromotion: {
            description: 'Test string',
            enabled: true,
            imageUri: 'Test string',
            title: 'Test string',
            uri: 'Test string',
          },
        },
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      },
    );
    /** Deletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Control. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all Controls by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Control. Control action type cannot be changed. If the Control to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.controls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
          fixedBoost: 42,
          interpolationBoostSpec: {
            attributeType: 'Test string',
            controlPoints: [
              {
                attributeValue: 'Test string',
                boostAmount: 42,
              },
            ],
            fieldName: 'Test string',
            interpolationType: 'Test string',
          },
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryRegex: 'Test string',
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        promoteAction: {
          dataStore: 'Test string',
          searchLinkPromotion: {
            description: 'Test string',
            enabled: true,
            imageUri: 'Test string',
            title: 'Test string',
            uri: 'Test string',
          },
        },
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      },
    );
    /** Converses a conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.converse(
      {
        name: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        conversation: {
          endTime: 'Test string',
          messages: [
            {
              createTime: 'Test string',
              reply: {
                references: [
                  {
                    anchorText: 'Test string',
                    end: 42,
                    start: 42,
                    uri: 'Test string',
                  },
                ],
                reply: 'Test string',
                summary: {
                  safetyAttributes: {
                    categories: ['Test string'],
                    scores: [42],
                  },
                  summarySkippedReasons: ['Test string'],
                  summaryText: 'Test string',
                  summaryWithMetadata: {
                    blobAttachments: [
                      {
                        attributionType: 'Test string',
                        data: {
                          data: 'Test string',
                          mimeType: 'Test string',
                        },
                      },
                    ],
                    citationMetadata: {
                      citations: [
                        {
                          endIndex: 'Test string',
                          sources: [
                            {
                              referenceIndex: 'Test string',
                            },
                          ],
                          startIndex: 'Test string',
                        },
                      ],
                    },
                    references: [
                      {
                        chunkContents: [
                          {
                            blobAttachmentIndexes: ['Test string'],
                            content: 'Test string',
                            pageIdentifier: 'Test string',
                          },
                        ],
                        document: 'Test string',
                        title: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    summary: 'Test string',
                  },
                },
              },
              userInput: {
                context: {
                  activeDocument: 'Test string',
                  contextDocuments: ['Test string'],
                },
                input: 'Test string',
              },
            },
          ],
          name: 'Test string',
          startTime: 'Test string',
          state: 'Test string',
          userPseudoId: 'Test string',
        },
        filter: 'Test string',
        query: {
          context: {
            activeDocument: 'Test string',
            contextDocuments: ['Test string'],
          },
          input: 'Test string',
        },
        safeSearch: true,
        servingConfig: 'Test string',
        summarySpec: {
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonSummarySeekingQuery: true,
          includeCitations: true,
          languageCode: 'Test string',
          modelPromptSpec: {
            preamble: 'Test string',
          },
          modelSpec: {
            version: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          summaryResultCount: 42,
          useSemanticChunks: true,
        },
        userLabels: {
          A: 'Test string',
        },
      },
    );
    /** Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              references: [
                {
                  anchorText: 'Test string',
                  end: 42,
                  start: 42,
                  uri: 'Test string',
                },
              ],
              reply: 'Test string',
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  blobAttachments: [
                    {
                      attributionType: 'Test string',
                      data: {
                        data: 'Test string',
                        mimeType: 'Test string',
                      },
                    },
                  ],
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          blobAttachmentIndexes: ['Test string'],
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Deletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all Conversations by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              references: [
                {
                  anchorText: 'Test string',
                  end: 42,
                  start: 42,
                  uri: 'Test string',
                },
              ],
              reply: 'Test string',
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  blobAttachments: [
                    {
                      attributionType: 'Test string',
                      data: {
                        data: 'Test string',
                        mimeType: 'Test string',
                      },
                    },
                  ],
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          blobAttachmentIndexes: ['Test string'],
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Gets a list of all the custom models. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.customModels.list(
      {
        dataStore: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.models.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.models.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Creates a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.create(
      {
        parent: 'Test string',
        schemaId: 'Test string',
      },
      {
        fieldConfigs: [
          {
            advancedSiteSearchDataSources: ['Test string'],
            completableOption: 'Test string',
            dynamicFacetableOption: 'Test string',
            fieldPath: 'Test string',
            fieldType: 'Test string',
            indexableOption: 'Test string',
            keyPropertyType: 'Test string',
            metatagName: 'Test string',
            recsFilterableOption: 'Test string',
            retrievableOption: 'Test string',
            schemaOrgPaths: ['Test string'],
            searchableOption: 'Test string',
          },
        ],
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      },
    );
    /** Deletes a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of Schemas. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Schema. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.patch(
      {
        allowMissing: true,
        name: 'Test string',
      },
      {
        fieldConfigs: [
          {
            advancedSiteSearchDataSources: ['Test string'],
            completableOption: 'Test string',
            dynamicFacetableOption: 'Test string',
            fieldPath: 'Test string',
            fieldType: 'Test string',
            indexableOption: 'Test string',
            keyPropertyType: 'Test string',
            metatagName: 'Test string',
            recsFilterableOption: 'Test string',
            retrievableOption: 'Test string',
            schemaOrgPaths: ['Test string'],
            searchableOption: 'Test string',
          },
        ],
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.schemas.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Answer query method. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.answer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        endUserSpec: {
          endUserMetadata: [
            {
              chunkInfo: {
                content: 'Test string',
                documentMetadata: {
                  title: 'Test string',
                },
              },
            },
          ],
        },
        groundingSpec: {
          filteringLevel: 'Test string',
          includeGroundingSupports: true,
        },
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          disableSpellCorrection: true,
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
            modelSpec: {
              modelType: 'Test string',
            },
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
          safetySettings: [
            {
              category: 'Test string',
              threshold: 'Test string',
            },
          ],
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Gets a ServingConfig. Returns a NotFound error if the ServingConfig does not exist. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all ServingConfigs linked to this dataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a ServingConfig. Returns a NOT_FOUND error if the ServingConfig does not exist. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        boostControlIds: ['Test string'],
        createTime: 'Test string',
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        displayName: 'Test string',
        dissociateControlIds: ['Test string'],
        diversityLevel: 'Test string',
        embeddingConfig: {
          fieldPath: 'Test string',
        },
        filterControlIds: ['Test string'],
        genericConfig: {
          contentSearchSpec: {
            chunkSpec: {
              numNextChunks: 42,
              numPreviousChunks: 42,
            },
            extractiveContentSpec: {
              maxExtractiveAnswerCount: 42,
              maxExtractiveSegmentCount: 42,
              numNextSegments: 42,
              numPreviousSegments: 42,
              returnExtractiveSegmentScore: true,
            },
            searchResultMode: 'Test string',
            snippetSpec: {
              maxSnippetCount: 42,
              referenceOnly: true,
              returnSnippet: true,
            },
            summarySpec: {
              ignoreAdversarialQuery: true,
              ignoreJailBreakingQuery: true,
              ignoreLowRelevantContent: true,
              ignoreNonSummarySeekingQuery: true,
              includeCitations: true,
              languageCode: 'Test string',
              modelPromptSpec: {
                preamble: 'Test string',
              },
              modelSpec: {
                version: 'Test string',
              },
              multimodalSpec: {
                imageSource: 'Test string',
              },
              summaryResultCount: 42,
              useSemanticChunks: true,
            },
          },
        },
        guidedSearchSpec: {
          enableRefinementAttributes: true,
          enableRelatedQuestions: true,
          maxRelatedQuestions: 42,
        },
        ignoreControlIds: ['Test string'],
        mediaConfig: {
          contentFreshnessCutoffDays: 42,
          contentWatchedPercentageThreshold: 42,
          contentWatchedSecondsThreshold: 42,
          demoteContentWatchedPastDays: 42,
          demotionEventType: 'Test string',
        },
        modelId: 'Test string',
        name: 'Test string',
        onewaySynonymsControlIds: ['Test string'],
        personalizationSpec: {
          mode: 'Test string',
        },
        promoteControlIds: ['Test string'],
        rankingExpression: 'Test string',
        redirectControlIds: ['Test string'],
        replacementControlIds: ['Test string'],
        solutionType: 'Test string',
        synonymsControlIds: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Makes a recommendation, which requires a contextual user event. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.recommend(
      {
        servingConfig: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        params: {
          A: 42,
        },
        userEvent: {
          attributes: {
            A: {
              numbers: [42],
              text: ['Test string'],
            },
          },
          attributionToken: 'Test string',
          completionInfo: {
            selectedPosition: 42,
            selectedSuggestion: 'Test string',
          },
          conversionType: 'Test string',
          dataStore: 'Test string',
          directUserRequest: true,
          documents: [
            {
              conversionValue: 42,
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          engine: 'Test string',
          eventTime: 'Test string',
          eventType: 'Test string',
          filter: 'Test string',
          mediaInfo: {
            mediaProgressDuration: 'Test string',
            mediaProgressPercentage: 42,
          },
          pageInfo: {
            pageCategory: 'Test string',
            pageviewId: 'Test string',
            referrerUri: 'Test string',
            uri: 'Test string',
          },
          panel: {
            displayName: 'Test string',
            documents: [
              {
                conversionValue: 42,
                id: 'Test string',
                joined: true,
                name: 'Test string',
                promotionIds: ['Test string'],
                quantity: 42,
                uri: 'Test string',
              },
            ],
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
          panels: [
            {
              displayName: 'Test string',
              documents: [
                {
                  conversionValue: 42,
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              panelId: 'Test string',
              panelPosition: 42,
              totalPanels: 42,
            },
          ],
          promotionIds: ['Test string'],
          searchInfo: {
            offset: 42,
            orderBy: 'Test string',
            searchQuery: 'Test string',
          },
          sessionId: 'Test string',
          tagIds: ['Test string'],
          transactionInfo: {
            cost: 42,
            currency: 'Test string',
            discountValue: 42,
            tax: 42,
            transactionId: 'Test string',
            value: 42,
          },
          userInfo: {
            timeZone: 'Test string',
            userAgent: 'Test string',
            userId: 'Test string',
          },
          userPseudoId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        validateOnly: true,
      },
    );
    /** Performs a search. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.search(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            multimodalSpec: {
              imageSource: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        dataStoreSpecs: [
          {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        displaySpec: {
          matchHighlightingCondition: 'Test string',
        },
        embeddingSpec: {
          embeddingVectors: [
            {
              fieldPath: 'Test string',
              vector: [42],
            },
          ],
        },
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        naturalLanguageQueryUnderstandingSpec: {
          filterExtractionCondition: 'Test string',
          geoSearchQueryDetectionFieldNames: ['Test string'],
        },
        offset: 42,
        oneBoxPageSize: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        personalizationSpec: {
          mode: 'Test string',
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        rankingExpression: 'Test string',
        rankingExpressionBackend: 'Test string',
        regionCode: 'Test string',
        relevanceScoreSpec: {
          returnRelevanceScore: true,
        },
        relevanceThreshold: 'Test string',
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        servingConfig: 'Test string',
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Performs a search. Similar to the SearchService.Search method, but a lite version that allows API key for authentication, where OAuth and IAM checks are not required. Only public website search is supported by this method. If data stores and engines not associated with public website search are specified, a `FAILED_PRECONDITION` error is returned. This method can be used for easy onboarding without having to implement an authentication backend. However, it is strongly recommended to use SearchService.Search instead with required OAuth and IAM checks to provide better data security. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.searchLite(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            multimodalSpec: {
              imageSource: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        dataStoreSpecs: [
          {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        displaySpec: {
          matchHighlightingCondition: 'Test string',
        },
        embeddingSpec: {
          embeddingVectors: [
            {
              fieldPath: 'Test string',
              vector: [42],
            },
          ],
        },
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        naturalLanguageQueryUnderstandingSpec: {
          filterExtractionCondition: 'Test string',
          geoSearchQueryDetectionFieldNames: ['Test string'],
        },
        offset: 42,
        oneBoxPageSize: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        personalizationSpec: {
          mode: 'Test string',
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        rankingExpression: 'Test string',
        rankingExpressionBackend: 'Test string',
        regionCode: 'Test string',
        relevanceScoreSpec: {
          returnRelevanceScore: true,
        },
        relevanceThreshold: 'Test string',
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        servingConfig: 'Test string',
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Answer query method (streaming). It takes one AnswerQueryRequest and returns multiple AnswerQueryResponse messages in a stream. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.servingConfigs.streamAnswer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        endUserSpec: {
          endUserMetadata: [
            {
              chunkInfo: {
                content: 'Test string',
                documentMetadata: {
                  title: 'Test string',
                },
              },
            },
          ],
        },
        groundingSpec: {
          filteringLevel: 'Test string',
          includeGroundingSupports: true,
        },
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          disableSpellCorrection: true,
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
            modelSpec: {
              modelType: 'Test string',
            },
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
          safetySettings: [
            {
              category: 'Test string',
              threshold: 'Test string',
            },
          ],
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Creates a Session. If the Session to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        isPinned: true,
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            detailedAnswer: {
              answerSkippedReasons: ['Test string'],
              answerText: 'Test string',
              blobAttachments: [
                {
                  attributionType: 'Test string',
                  data: {
                    data: 'Test string',
                    mimeType: 'Test string',
                  },
                },
              ],
              citations: [
                {
                  endIndex: 'Test string',
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              completeTime: 'Test string',
              createTime: 'Test string',
              groundingScore: 42,
              groundingSupports: [
                {
                  endIndex: 'Test string',
                  groundingCheckRequired: true,
                  groundingScore: 42,
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              name: 'Test string',
              queryUnderstandingInfo: {
                queryClassificationInfo: [
                  {
                    positive: true,
                    type: 'Test string',
                  },
                ],
              },
              references: [
                {
                  chunkInfo: {
                    blobAttachmentIndexes: ['Test string'],
                    chunk: 'Test string',
                    content: 'Test string',
                    documentMetadata: {
                      document: 'Test string',
                      pageIdentifier: 'Test string',
                      structData: {
                        A: 42,
                      },
                      title: 'Test string',
                      uri: 'Test string',
                    },
                    relevanceScore: 42,
                  },
                  structuredDocumentInfo: {
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                  unstructuredDocumentInfo: {
                    chunkContents: [
                      {
                        blobAttachmentIndexes: ['Test string'],
                        content: 'Test string',
                        pageIdentifier: 'Test string',
                        relevanceScore: 42,
                      },
                    ],
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
              ],
              relatedQuestions: ['Test string'],
              safetyRatings: [
                {
                  blocked: true,
                  category: 'Test string',
                  probability: 'Test string',
                  probabilityScore: 42,
                  severity: 'Test string',
                  severityScore: 42,
                },
              ],
              state: 'Test string',
              steps: [
                {
                  actions: [
                    {
                      observation: {
                        searchResults: [
                          {
                            chunkInfo: [
                              {
                                chunk: 'Test string',
                                content: 'Test string',
                                relevanceScore: 42,
                              },
                            ],
                            document: 'Test string',
                            snippetInfo: [
                              {
                                snippet: 'Test string',
                                snippetStatus: 'Test string',
                              },
                            ],
                            structData: {
                              A: 42,
                            },
                            title: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      searchAction: {
                        query: 'Test string',
                      },
                    },
                  ],
                  description: 'Test string',
                  state: 'Test string',
                  thought: 'Test string',
                },
              ],
            },
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      },
    );
    /** Deletes a Session. If the Session to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Session. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.get(
      {
        includeAnswerDetails: true,
        name: 'Test string',
      },
    );
    /** Lists all Sessions by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Session. Session action type cannot be changed. If the Session to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        isPinned: true,
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            detailedAnswer: {
              answerSkippedReasons: ['Test string'],
              answerText: 'Test string',
              blobAttachments: [
                {
                  attributionType: 'Test string',
                  data: {
                    data: 'Test string',
                    mimeType: 'Test string',
                  },
                },
              ],
              citations: [
                {
                  endIndex: 'Test string',
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              completeTime: 'Test string',
              createTime: 'Test string',
              groundingScore: 42,
              groundingSupports: [
                {
                  endIndex: 'Test string',
                  groundingCheckRequired: true,
                  groundingScore: 42,
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              name: 'Test string',
              queryUnderstandingInfo: {
                queryClassificationInfo: [
                  {
                    positive: true,
                    type: 'Test string',
                  },
                ],
              },
              references: [
                {
                  chunkInfo: {
                    blobAttachmentIndexes: ['Test string'],
                    chunk: 'Test string',
                    content: 'Test string',
                    documentMetadata: {
                      document: 'Test string',
                      pageIdentifier: 'Test string',
                      structData: {
                        A: 42,
                      },
                      title: 'Test string',
                      uri: 'Test string',
                    },
                    relevanceScore: 42,
                  },
                  structuredDocumentInfo: {
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                  unstructuredDocumentInfo: {
                    chunkContents: [
                      {
                        blobAttachmentIndexes: ['Test string'],
                        content: 'Test string',
                        pageIdentifier: 'Test string',
                        relevanceScore: 42,
                      },
                    ],
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
              ],
              relatedQuestions: ['Test string'],
              safetyRatings: [
                {
                  blocked: true,
                  category: 'Test string',
                  probability: 'Test string',
                  probabilityScore: 42,
                  severity: 'Test string',
                  severityScore: 42,
                },
              ],
              state: 'Test string',
              steps: [
                {
                  actions: [
                    {
                      observation: {
                        searchResults: [
                          {
                            chunkInfo: [
                              {
                                chunk: 'Test string',
                                content: 'Test string',
                                relevanceScore: 42,
                              },
                            ],
                            document: 'Test string',
                            snippetInfo: [
                              {
                                snippet: 'Test string',
                                snippetStatus: 'Test string',
                              },
                            ],
                            structData: {
                              A: 42,
                            },
                            title: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      searchAction: {
                        query: 'Test string',
                      },
                    },
                  ],
                  description: 'Test string',
                  state: 'Test string',
                  thought: 'Test string',
                },
              ],
            },
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      },
    );
    /** Gets a Answer. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.sessions.answers.get(
      {
        name: 'Test string',
      },
    );
    /** Verify target sites' ownership and validity. This API sends all the target sites under site search engine for verification. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.batchVerifyTargetSites(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Downgrade from advanced site search to basic site search. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.disableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {},
    );
    /** Upgrade from basic site search to advanced site search. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.enableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {},
    );
    /** Returns list of target sites with its domain verification status. This method can only be called under data store with BASIC_SITE_SEARCH state at the moment. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.fetchDomainVerificationStatus(
      {
        pageSize: 42,
        pageToken: 'Test string',
        siteSearchEngine: 'Test string',
      },
    );
    /** Gets the URI Pattern to Document data mapping for an Advanced Site Search DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.getUriPatternDocumentData(
      {
        siteSearchEngine: 'Test string',
      },
    );
    /** Request on-demand recrawl for a list of URIs. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.recrawlUris(
      {
        siteSearchEngine: 'Test string',
      },
      {
        siteCredential: 'Test string',
        uris: ['Test string'],
      },
    );
    /** Sets the URI Pattern to Document data mapping for an Advanced Site Search DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.setUriPatternDocumentData(
      {
        siteSearchEngine: 'Test string',
      },
      {
        documentDataMap: {
          A: {
            A: 42,
          },
        },
        emptyDocumentDataMap: true,
        schema: {
          A: 42,
        },
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Creates a Sitemap. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.sitemaps.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        uri: 'Test string',
      },
    );
    /** Deletes a Sitemap. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.sitemaps.delete(
      {
        name: 'Test string',
      },
    );
    /** Fetch Sitemaps in a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.sitemaps.fetch(
      {
        'matcher.urisMatcher.uris': 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates TargetSite in a batch. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            targetSite: {
              exactMatch: true,
              failureReason: {
                quotaFailure: {
                  totalRequiredQuota: 'Test string',
                },
              },
              generatedUriPattern: 'Test string',
              indexingStatus: 'Test string',
              name: 'Test string',
              providedUriPattern: 'Test string',
              rootDomainUri: 'Test string',
              siteVerificationInfo: {
                siteVerificationState: 'Test string',
                verifyTime: 'Test string',
              },
              type: 'Test string',
              updateTime: 'Test string',
            },
          },
        ],
      },
    );
    /** Creates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.create(
      {
        parent: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of TargetSites. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.patch(
      {
        name: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Imports all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.suggestionDenyListEntries.import(
      {
        parent: 'Test string',
      },
      {
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          entries: [
            {
              blockPhrase: 'Test string',
              matchOperator: 'Test string',
            },
          ],
        },
      },
    );
    /** Permanently deletes all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.suggestionDenyListEntries.purge(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.collect(
      {
        ets: 'Test string',
        parent: 'Test string',
        uri: 'Test string',
        userEvent: 'Test string',
      },
    );
    /** Bulk import of user events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          userEvents: [
            {
              attributes: {
                A: {
                  numbers: [42],
                  text: ['Test string'],
                },
              },
              attributionToken: 'Test string',
              completionInfo: {
                selectedPosition: 42,
                selectedSuggestion: 'Test string',
              },
              conversionType: 'Test string',
              dataStore: 'Test string',
              directUserRequest: true,
              documents: [
                {
                  conversionValue: 42,
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              engine: 'Test string',
              eventTime: 'Test string',
              eventType: 'Test string',
              filter: 'Test string',
              mediaInfo: {
                mediaProgressDuration: 'Test string',
                mediaProgressPercentage: 42,
              },
              pageInfo: {
                pageCategory: 'Test string',
                pageviewId: 'Test string',
                referrerUri: 'Test string',
                uri: 'Test string',
              },
              panel: {
                displayName: 'Test string',
                documents: [
                  {
                    conversionValue: 42,
                    id: 'Test string',
                    joined: true,
                    name: 'Test string',
                    promotionIds: ['Test string'],
                    quantity: 42,
                    uri: 'Test string',
                  },
                ],
                panelId: 'Test string',
                panelPosition: 42,
                totalPanels: 42,
              },
              panels: [
                {
                  displayName: 'Test string',
                  documents: [
                    {
                      conversionValue: 42,
                      id: 'Test string',
                      joined: true,
                      name: 'Test string',
                      promotionIds: ['Test string'],
                      quantity: 42,
                      uri: 'Test string',
                    },
                  ],
                  panelId: 'Test string',
                  panelPosition: 42,
                  totalPanels: 42,
                },
              ],
              promotionIds: ['Test string'],
              searchInfo: {
                offset: 42,
                orderBy: 'Test string',
                searchQuery: 'Test string',
              },
              sessionId: 'Test string',
              tagIds: ['Test string'],
              transactionInfo: {
                cost: 42,
                currency: 'Test string',
                discountValue: 42,
                tax: 42,
                transactionId: 'Test string',
                value: 42,
              },
              userInfo: {
                timeZone: 'Test string',
                userAgent: 'Test string',
                userId: 'Test string',
              },
              userPseudoId: 'Test string',
            },
          ],
        },
      },
    );
    /** Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.purge(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        force: true,
      },
    );
    /** Writes a single user event. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.userEvents.write(
      {
        parent: 'Test string',
        writeAsync: true,
      },
      {
        attributes: {
          A: {
            numbers: [42],
            text: ['Test string'],
          },
        },
        attributionToken: 'Test string',
        completionInfo: {
          selectedPosition: 42,
          selectedSuggestion: 'Test string',
        },
        conversionType: 'Test string',
        dataStore: 'Test string',
        directUserRequest: true,
        documents: [
          {
            conversionValue: 42,
            id: 'Test string',
            joined: true,
            name: 'Test string',
            promotionIds: ['Test string'],
            quantity: 42,
            uri: 'Test string',
          },
        ],
        engine: 'Test string',
        eventTime: 'Test string',
        eventType: 'Test string',
        filter: 'Test string',
        mediaInfo: {
          mediaProgressDuration: 'Test string',
          mediaProgressPercentage: 42,
        },
        pageInfo: {
          pageCategory: 'Test string',
          pageviewId: 'Test string',
          referrerUri: 'Test string',
          uri: 'Test string',
        },
        panel: {
          displayName: 'Test string',
          documents: [
            {
              conversionValue: 42,
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          panelId: 'Test string',
          panelPosition: 42,
          totalPanels: 42,
        },
        panels: [
          {
            displayName: 'Test string',
            documents: [
              {
                conversionValue: 42,
                id: 'Test string',
                joined: true,
                name: 'Test string',
                promotionIds: ['Test string'],
                quantity: 42,
                uri: 'Test string',
              },
            ],
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
        ],
        promotionIds: ['Test string'],
        searchInfo: {
          offset: 42,
          orderBy: 'Test string',
          searchQuery: 'Test string',
        },
        sessionId: 'Test string',
        tagIds: ['Test string'],
        transactionInfo: {
          cost: 42,
          currency: 'Test string',
          discountValue: 42,
          tax: 42,
          transactionId: 'Test string',
          value: 42,
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Gets a WidgetConfig. */
    await gapi.client.discoveryengine.projects.locations.collections.dataStores.widgetConfigs.get(
      {
        acceptCache: true,
        name: 'Test string',
      },
    );
    /** Creates a Engine. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.create(
      {
        engineId: 'Test string',
        parent: 'Test string',
      },
      {
        chatEngineConfig: {
          agentCreationConfig: {
            business: 'Test string',
            defaultLanguageCode: 'Test string',
            location: 'Test string',
            timeZone: 'Test string',
          },
          allowCrossRegion: true,
          dialogflowAgentToLink: 'Test string',
        },
        chatEngineMetadata: {
          dialogflowAgent: 'Test string',
        },
        commonConfig: {
          companyName: 'Test string',
        },
        createTime: 'Test string',
        dataStoreIds: ['Test string'],
        disableAnalytics: true,
        displayName: 'Test string',
        industryVertical: 'Test string',
        mediaRecommendationEngineConfig: {
          optimizationObjective: 'Test string',
          optimizationObjectiveConfig: {
            targetField: 'Test string',
            targetFieldValueFloat: 42,
          },
          trainingState: 'Test string',
          type: 'Test string',
        },
        name: 'Test string',
        recommendationMetadata: {
          dataState: 'Test string',
          lastTuneTime: 'Test string',
          servingState: 'Test string',
          tuningOperation: 'Test string',
        },
        searchEngineConfig: {
          searchAddOns: ['Test string'],
          searchTier: 'Test string',
        },
        similarDocumentsConfig: {},
        solutionType: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a Engine. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Engine. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all the Engines associated with the project. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates an Engine */
    await gapi.client.discoveryengine.projects.locations.collections.engines.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        chatEngineConfig: {
          agentCreationConfig: {
            business: 'Test string',
            defaultLanguageCode: 'Test string',
            location: 'Test string',
            timeZone: 'Test string',
          },
          allowCrossRegion: true,
          dialogflowAgentToLink: 'Test string',
        },
        chatEngineMetadata: {
          dialogflowAgent: 'Test string',
        },
        commonConfig: {
          companyName: 'Test string',
        },
        createTime: 'Test string',
        dataStoreIds: ['Test string'],
        disableAnalytics: true,
        displayName: 'Test string',
        industryVertical: 'Test string',
        mediaRecommendationEngineConfig: {
          optimizationObjective: 'Test string',
          optimizationObjectiveConfig: {
            targetField: 'Test string',
            targetFieldValueFloat: 42,
          },
          trainingState: 'Test string',
          type: 'Test string',
        },
        name: 'Test string',
        recommendationMetadata: {
          dataState: 'Test string',
          lastTuneTime: 'Test string',
          servingState: 'Test string',
          tuningOperation: 'Test string',
        },
        searchEngineConfig: {
          searchAddOns: ['Test string'],
          searchTier: 'Test string',
        },
        similarDocumentsConfig: {},
        solutionType: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Pauses the training of an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.pause(
      {
        name: 'Test string',
      },
      {},
    );
    /** Resumes the training of an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.resume(
      {
        name: 'Test string',
      },
      {},
    );
    /** Tunes an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.tune(
      {
        name: 'Test string',
      },
      {},
    );
    /** Completes the user input with advanced keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.completionConfig.completeQuery(
      {
        completionConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              condition: 'Test string',
            },
          ],
        },
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        suggestionTypes: ['Test string'],
        suggestionTypeSpecs: [
          {
            maxSuggestions: 42,
            suggestionType: 'Test string',
          },
        ],
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Removes the search history suggestion in an engine for a user. This will remove the suggestion from being returned in the AdvancedCompleteQueryResponse.recent_search_suggestions for this user. If the user searches the same suggestion again, the new history will override and suggest this suggestion again. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.completionConfig.removeSuggestion(
      {
        completionConfig: 'Test string',
      },
      {
        removeAllSearchHistorySuggestions: true,
        removeTime: 'Test string',
        searchHistorySuggestion: 'Test string',
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Creates a Control. By default 1000 controls are allowed for a data store. A request can be submitted to adjust this limit. If the Control to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.create(
      {
        controlId: 'Test string',
        parent: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
          fixedBoost: 42,
          interpolationBoostSpec: {
            attributeType: 'Test string',
            controlPoints: [
              {
                attributeValue: 'Test string',
                boostAmount: 42,
              },
            ],
            fieldName: 'Test string',
            interpolationType: 'Test string',
          },
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryRegex: 'Test string',
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        promoteAction: {
          dataStore: 'Test string',
          searchLinkPromotion: {
            description: 'Test string',
            enabled: true,
            imageUri: 'Test string',
            title: 'Test string',
            uri: 'Test string',
          },
        },
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      },
    );
    /** Deletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Control. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all Controls by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Control. Control action type cannot be changed. If the Control to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.controls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
          fixedBoost: 42,
          interpolationBoostSpec: {
            attributeType: 'Test string',
            controlPoints: [
              {
                attributeValue: 'Test string',
                boostAmount: 42,
              },
            ],
            fieldName: 'Test string',
            interpolationType: 'Test string',
          },
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryRegex: 'Test string',
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        promoteAction: {
          dataStore: 'Test string',
          searchLinkPromotion: {
            description: 'Test string',
            enabled: true,
            imageUri: 'Test string',
            title: 'Test string',
            uri: 'Test string',
          },
        },
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      },
    );
    /** Converses a conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.converse(
      {
        name: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        conversation: {
          endTime: 'Test string',
          messages: [
            {
              createTime: 'Test string',
              reply: {
                references: [
                  {
                    anchorText: 'Test string',
                    end: 42,
                    start: 42,
                    uri: 'Test string',
                  },
                ],
                reply: 'Test string',
                summary: {
                  safetyAttributes: {
                    categories: ['Test string'],
                    scores: [42],
                  },
                  summarySkippedReasons: ['Test string'],
                  summaryText: 'Test string',
                  summaryWithMetadata: {
                    blobAttachments: [
                      {
                        attributionType: 'Test string',
                        data: {
                          data: 'Test string',
                          mimeType: 'Test string',
                        },
                      },
                    ],
                    citationMetadata: {
                      citations: [
                        {
                          endIndex: 'Test string',
                          sources: [
                            {
                              referenceIndex: 'Test string',
                            },
                          ],
                          startIndex: 'Test string',
                        },
                      ],
                    },
                    references: [
                      {
                        chunkContents: [
                          {
                            blobAttachmentIndexes: ['Test string'],
                            content: 'Test string',
                            pageIdentifier: 'Test string',
                          },
                        ],
                        document: 'Test string',
                        title: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    summary: 'Test string',
                  },
                },
              },
              userInput: {
                context: {
                  activeDocument: 'Test string',
                  contextDocuments: ['Test string'],
                },
                input: 'Test string',
              },
            },
          ],
          name: 'Test string',
          startTime: 'Test string',
          state: 'Test string',
          userPseudoId: 'Test string',
        },
        filter: 'Test string',
        query: {
          context: {
            activeDocument: 'Test string',
            contextDocuments: ['Test string'],
          },
          input: 'Test string',
        },
        safeSearch: true,
        servingConfig: 'Test string',
        summarySpec: {
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonSummarySeekingQuery: true,
          includeCitations: true,
          languageCode: 'Test string',
          modelPromptSpec: {
            preamble: 'Test string',
          },
          modelSpec: {
            version: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          summaryResultCount: 42,
          useSemanticChunks: true,
        },
        userLabels: {
          A: 'Test string',
        },
      },
    );
    /** Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              references: [
                {
                  anchorText: 'Test string',
                  end: 42,
                  start: 42,
                  uri: 'Test string',
                },
              ],
              reply: 'Test string',
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  blobAttachments: [
                    {
                      attributionType: 'Test string',
                      data: {
                        data: 'Test string',
                        mimeType: 'Test string',
                      },
                    },
                  ],
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          blobAttachmentIndexes: ['Test string'],
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Deletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Conversation. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all Conversations by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              references: [
                {
                  anchorText: 'Test string',
                  end: 42,
                  start: 42,
                  uri: 'Test string',
                },
              ],
              reply: 'Test string',
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  blobAttachments: [
                    {
                      attributionType: 'Test string',
                      data: {
                        data: 'Test string',
                        mimeType: 'Test string',
                      },
                    },
                  ],
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          blobAttachmentIndexes: ['Test string'],
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Answer query method. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.answer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        endUserSpec: {
          endUserMetadata: [
            {
              chunkInfo: {
                content: 'Test string',
                documentMetadata: {
                  title: 'Test string',
                },
              },
            },
          ],
        },
        groundingSpec: {
          filteringLevel: 'Test string',
          includeGroundingSupports: true,
        },
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          disableSpellCorrection: true,
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
            modelSpec: {
              modelType: 'Test string',
            },
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
          safetySettings: [
            {
              category: 'Test string',
              threshold: 'Test string',
            },
          ],
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Gets a ServingConfig. Returns a NotFound error if the ServingConfig does not exist. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all ServingConfigs linked to this dataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a ServingConfig. Returns a NOT_FOUND error if the ServingConfig does not exist. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        boostControlIds: ['Test string'],
        createTime: 'Test string',
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        displayName: 'Test string',
        dissociateControlIds: ['Test string'],
        diversityLevel: 'Test string',
        embeddingConfig: {
          fieldPath: 'Test string',
        },
        filterControlIds: ['Test string'],
        genericConfig: {
          contentSearchSpec: {
            chunkSpec: {
              numNextChunks: 42,
              numPreviousChunks: 42,
            },
            extractiveContentSpec: {
              maxExtractiveAnswerCount: 42,
              maxExtractiveSegmentCount: 42,
              numNextSegments: 42,
              numPreviousSegments: 42,
              returnExtractiveSegmentScore: true,
            },
            searchResultMode: 'Test string',
            snippetSpec: {
              maxSnippetCount: 42,
              referenceOnly: true,
              returnSnippet: true,
            },
            summarySpec: {
              ignoreAdversarialQuery: true,
              ignoreJailBreakingQuery: true,
              ignoreLowRelevantContent: true,
              ignoreNonSummarySeekingQuery: true,
              includeCitations: true,
              languageCode: 'Test string',
              modelPromptSpec: {
                preamble: 'Test string',
              },
              modelSpec: {
                version: 'Test string',
              },
              multimodalSpec: {
                imageSource: 'Test string',
              },
              summaryResultCount: 42,
              useSemanticChunks: true,
            },
          },
        },
        guidedSearchSpec: {
          enableRefinementAttributes: true,
          enableRelatedQuestions: true,
          maxRelatedQuestions: 42,
        },
        ignoreControlIds: ['Test string'],
        mediaConfig: {
          contentFreshnessCutoffDays: 42,
          contentWatchedPercentageThreshold: 42,
          contentWatchedSecondsThreshold: 42,
          demoteContentWatchedPastDays: 42,
          demotionEventType: 'Test string',
        },
        modelId: 'Test string',
        name: 'Test string',
        onewaySynonymsControlIds: ['Test string'],
        personalizationSpec: {
          mode: 'Test string',
        },
        promoteControlIds: ['Test string'],
        rankingExpression: 'Test string',
        redirectControlIds: ['Test string'],
        replacementControlIds: ['Test string'],
        solutionType: 'Test string',
        synonymsControlIds: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Makes a recommendation, which requires a contextual user event. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.recommend(
      {
        servingConfig: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        params: {
          A: 42,
        },
        userEvent: {
          attributes: {
            A: {
              numbers: [42],
              text: ['Test string'],
            },
          },
          attributionToken: 'Test string',
          completionInfo: {
            selectedPosition: 42,
            selectedSuggestion: 'Test string',
          },
          conversionType: 'Test string',
          dataStore: 'Test string',
          directUserRequest: true,
          documents: [
            {
              conversionValue: 42,
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          engine: 'Test string',
          eventTime: 'Test string',
          eventType: 'Test string',
          filter: 'Test string',
          mediaInfo: {
            mediaProgressDuration: 'Test string',
            mediaProgressPercentage: 42,
          },
          pageInfo: {
            pageCategory: 'Test string',
            pageviewId: 'Test string',
            referrerUri: 'Test string',
            uri: 'Test string',
          },
          panel: {
            displayName: 'Test string',
            documents: [
              {
                conversionValue: 42,
                id: 'Test string',
                joined: true,
                name: 'Test string',
                promotionIds: ['Test string'],
                quantity: 42,
                uri: 'Test string',
              },
            ],
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
          panels: [
            {
              displayName: 'Test string',
              documents: [
                {
                  conversionValue: 42,
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              panelId: 'Test string',
              panelPosition: 42,
              totalPanels: 42,
            },
          ],
          promotionIds: ['Test string'],
          searchInfo: {
            offset: 42,
            orderBy: 'Test string',
            searchQuery: 'Test string',
          },
          sessionId: 'Test string',
          tagIds: ['Test string'],
          transactionInfo: {
            cost: 42,
            currency: 'Test string',
            discountValue: 42,
            tax: 42,
            transactionId: 'Test string',
            value: 42,
          },
          userInfo: {
            timeZone: 'Test string',
            userAgent: 'Test string',
            userId: 'Test string',
          },
          userPseudoId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        validateOnly: true,
      },
    );
    /** Performs a search. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.search(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            multimodalSpec: {
              imageSource: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        dataStoreSpecs: [
          {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        displaySpec: {
          matchHighlightingCondition: 'Test string',
        },
        embeddingSpec: {
          embeddingVectors: [
            {
              fieldPath: 'Test string',
              vector: [42],
            },
          ],
        },
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        naturalLanguageQueryUnderstandingSpec: {
          filterExtractionCondition: 'Test string',
          geoSearchQueryDetectionFieldNames: ['Test string'],
        },
        offset: 42,
        oneBoxPageSize: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        personalizationSpec: {
          mode: 'Test string',
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        rankingExpression: 'Test string',
        rankingExpressionBackend: 'Test string',
        regionCode: 'Test string',
        relevanceScoreSpec: {
          returnRelevanceScore: true,
        },
        relevanceThreshold: 'Test string',
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        servingConfig: 'Test string',
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Performs a search. Similar to the SearchService.Search method, but a lite version that allows API key for authentication, where OAuth and IAM checks are not required. Only public website search is supported by this method. If data stores and engines not associated with public website search are specified, a `FAILED_PRECONDITION` error is returned. This method can be used for easy onboarding without having to implement an authentication backend. However, it is strongly recommended to use SearchService.Search instead with required OAuth and IAM checks to provide better data security. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.searchLite(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            multimodalSpec: {
              imageSource: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        dataStoreSpecs: [
          {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        displaySpec: {
          matchHighlightingCondition: 'Test string',
        },
        embeddingSpec: {
          embeddingVectors: [
            {
              fieldPath: 'Test string',
              vector: [42],
            },
          ],
        },
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        naturalLanguageQueryUnderstandingSpec: {
          filterExtractionCondition: 'Test string',
          geoSearchQueryDetectionFieldNames: ['Test string'],
        },
        offset: 42,
        oneBoxPageSize: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        personalizationSpec: {
          mode: 'Test string',
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        rankingExpression: 'Test string',
        rankingExpressionBackend: 'Test string',
        regionCode: 'Test string',
        relevanceScoreSpec: {
          returnRelevanceScore: true,
        },
        relevanceThreshold: 'Test string',
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        servingConfig: 'Test string',
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Answer query method (streaming). It takes one AnswerQueryRequest and returns multiple AnswerQueryResponse messages in a stream. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.servingConfigs.streamAnswer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        endUserSpec: {
          endUserMetadata: [
            {
              chunkInfo: {
                content: 'Test string',
                documentMetadata: {
                  title: 'Test string',
                },
              },
            },
          ],
        },
        groundingSpec: {
          filteringLevel: 'Test string',
          includeGroundingSupports: true,
        },
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          disableSpellCorrection: true,
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
            modelSpec: {
              modelType: 'Test string',
            },
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
          safetySettings: [
            {
              category: 'Test string',
              threshold: 'Test string',
            },
          ],
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Creates a Session. If the Session to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        isPinned: true,
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            detailedAnswer: {
              answerSkippedReasons: ['Test string'],
              answerText: 'Test string',
              blobAttachments: [
                {
                  attributionType: 'Test string',
                  data: {
                    data: 'Test string',
                    mimeType: 'Test string',
                  },
                },
              ],
              citations: [
                {
                  endIndex: 'Test string',
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              completeTime: 'Test string',
              createTime: 'Test string',
              groundingScore: 42,
              groundingSupports: [
                {
                  endIndex: 'Test string',
                  groundingCheckRequired: true,
                  groundingScore: 42,
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              name: 'Test string',
              queryUnderstandingInfo: {
                queryClassificationInfo: [
                  {
                    positive: true,
                    type: 'Test string',
                  },
                ],
              },
              references: [
                {
                  chunkInfo: {
                    blobAttachmentIndexes: ['Test string'],
                    chunk: 'Test string',
                    content: 'Test string',
                    documentMetadata: {
                      document: 'Test string',
                      pageIdentifier: 'Test string',
                      structData: {
                        A: 42,
                      },
                      title: 'Test string',
                      uri: 'Test string',
                    },
                    relevanceScore: 42,
                  },
                  structuredDocumentInfo: {
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                  unstructuredDocumentInfo: {
                    chunkContents: [
                      {
                        blobAttachmentIndexes: ['Test string'],
                        content: 'Test string',
                        pageIdentifier: 'Test string',
                        relevanceScore: 42,
                      },
                    ],
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
              ],
              relatedQuestions: ['Test string'],
              safetyRatings: [
                {
                  blocked: true,
                  category: 'Test string',
                  probability: 'Test string',
                  probabilityScore: 42,
                  severity: 'Test string',
                  severityScore: 42,
                },
              ],
              state: 'Test string',
              steps: [
                {
                  actions: [
                    {
                      observation: {
                        searchResults: [
                          {
                            chunkInfo: [
                              {
                                chunk: 'Test string',
                                content: 'Test string',
                                relevanceScore: 42,
                              },
                            ],
                            document: 'Test string',
                            snippetInfo: [
                              {
                                snippet: 'Test string',
                                snippetStatus: 'Test string',
                              },
                            ],
                            structData: {
                              A: 42,
                            },
                            title: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      searchAction: {
                        query: 'Test string',
                      },
                    },
                  ],
                  description: 'Test string',
                  state: 'Test string',
                  thought: 'Test string',
                },
              ],
            },
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      },
    );
    /** Deletes a Session. If the Session to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Session. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.get(
      {
        includeAnswerDetails: true,
        name: 'Test string',
      },
    );
    /** Lists all Sessions by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Session. Session action type cannot be changed. If the Session to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        isPinned: true,
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            detailedAnswer: {
              answerSkippedReasons: ['Test string'],
              answerText: 'Test string',
              blobAttachments: [
                {
                  attributionType: 'Test string',
                  data: {
                    data: 'Test string',
                    mimeType: 'Test string',
                  },
                },
              ],
              citations: [
                {
                  endIndex: 'Test string',
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              completeTime: 'Test string',
              createTime: 'Test string',
              groundingScore: 42,
              groundingSupports: [
                {
                  endIndex: 'Test string',
                  groundingCheckRequired: true,
                  groundingScore: 42,
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              name: 'Test string',
              queryUnderstandingInfo: {
                queryClassificationInfo: [
                  {
                    positive: true,
                    type: 'Test string',
                  },
                ],
              },
              references: [
                {
                  chunkInfo: {
                    blobAttachmentIndexes: ['Test string'],
                    chunk: 'Test string',
                    content: 'Test string',
                    documentMetadata: {
                      document: 'Test string',
                      pageIdentifier: 'Test string',
                      structData: {
                        A: 42,
                      },
                      title: 'Test string',
                      uri: 'Test string',
                    },
                    relevanceScore: 42,
                  },
                  structuredDocumentInfo: {
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                  unstructuredDocumentInfo: {
                    chunkContents: [
                      {
                        blobAttachmentIndexes: ['Test string'],
                        content: 'Test string',
                        pageIdentifier: 'Test string',
                        relevanceScore: 42,
                      },
                    ],
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
              ],
              relatedQuestions: ['Test string'],
              safetyRatings: [
                {
                  blocked: true,
                  category: 'Test string',
                  probability: 'Test string',
                  probabilityScore: 42,
                  severity: 'Test string',
                  severityScore: 42,
                },
              ],
              state: 'Test string',
              steps: [
                {
                  actions: [
                    {
                      observation: {
                        searchResults: [
                          {
                            chunkInfo: [
                              {
                                chunk: 'Test string',
                                content: 'Test string',
                                relevanceScore: 42,
                              },
                            ],
                            document: 'Test string',
                            snippetInfo: [
                              {
                                snippet: 'Test string',
                                snippetStatus: 'Test string',
                              },
                            ],
                            structData: {
                              A: 42,
                            },
                            title: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      searchAction: {
                        query: 'Test string',
                      },
                    },
                  ],
                  description: 'Test string',
                  state: 'Test string',
                  thought: 'Test string',
                },
              ],
            },
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      },
    );
    /** Gets a Answer. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.sessions.answers.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a WidgetConfig. */
    await gapi.client.discoveryengine.projects.locations.collections.engines.widgetConfigs.get(
      {
        acceptCache: true,
        name: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.collections.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.collections.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Completes the specified user input with keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completeQuery(
      {
        dataStore: 'Test string',
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately. */
    await gapi.client.discoveryengine.projects.locations.dataStores.create(
      {
        cmekConfigName: 'Test string',
        createAdvancedSiteSearch: true,
        dataStoreId: 'Test string',
        disableCmek: true,
        parent: 'Test string',
        skipDefaultSchemaCreation: true,
      },
      {
        aclEnabled: true,
        advancedSiteSearchConfig: {
          disableAutomaticRefresh: true,
          disableInitialIndex: true,
        },
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        cmekConfig: {
          isDefault: true,
          kmsKey: 'Test string',
          kmsKeyVersion: 'Test string',
          lastRotationTimestampMicros: 'Test string',
          name: 'Test string',
          notebooklmState: 'Test string',
          singleRegionKeys: [
            {
              kmsKey: 'Test string',
            },
          ],
          state: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {
              enableImageAnnotation: true,
              enableTableAnnotation: true,
            },
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {
                enableImageAnnotation: true,
                enableTableAnnotation: true,
              },
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        healthcareFhirConfig: {
          enableConfigurableSchema: true,
          enableStaticIndexingForBatchIngestion: true,
        },
        identityMappingStore: 'Test string',
        idpConfig: {
          externalIdpConfig: {
            workforcePoolName: 'Test string',
          },
          idpType: 'Test string',
        },
        industryVertical: 'Test string',
        isInfobotFaqDataStore: true,
        kmsKeyName: 'Test string',
        languageInfo: {
          language: 'Test string',
          languageCode: 'Test string',
          normalizedLanguageCode: 'Test string',
          region: 'Test string',
        },
        name: 'Test string',
        naturalLanguageQueryUnderstandingConfig: {
          mode: 'Test string',
        },
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          fieldConfigs: [
            {
              advancedSiteSearchDataSources: ['Test string'],
              completableOption: 'Test string',
              dynamicFacetableOption: 'Test string',
              fieldPath: 'Test string',
              fieldType: 'Test string',
              indexableOption: 'Test string',
              keyPropertyType: 'Test string',
              metatagName: 'Test string',
              recsFilterableOption: 'Test string',
              retrievableOption: 'Test string',
              schemaOrgPaths: ['Test string'],
              searchableOption: 'Test string',
            },
          ],
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          superAdminEmailAddress: 'Test string',
          superAdminServiceAccount: 'Test string',
          type: 'Test string',
        },
      },
    );
    /** Deletes a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.delete({
      name: 'Test string',
    });
    /** Gets a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.get({
      name: 'Test string',
    });
    /** Gets a DocumentProcessingConfig. */
    await gapi.client.discoveryengine.projects.locations.dataStores.getDocumentProcessingConfig(
      {
        name: 'Test string',
      },
    );
    /** Gets the SiteSearchEngine. */
    await gapi.client.discoveryengine.projects.locations.dataStores.getSiteSearchEngine(
      {
        name: 'Test string',
      },
    );
    /** Lists all the DataStores associated with the project. */
    await gapi.client.discoveryengine.projects.locations.dataStores.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataStore */
    await gapi.client.discoveryengine.projects.locations.dataStores.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        aclEnabled: true,
        advancedSiteSearchConfig: {
          disableAutomaticRefresh: true,
          disableInitialIndex: true,
        },
        billingEstimation: {
          structuredDataSize: 'Test string',
          structuredDataUpdateTime: 'Test string',
          unstructuredDataSize: 'Test string',
          unstructuredDataUpdateTime: 'Test string',
          websiteDataSize: 'Test string',
          websiteDataUpdateTime: 'Test string',
        },
        cmekConfig: {
          isDefault: true,
          kmsKey: 'Test string',
          kmsKeyVersion: 'Test string',
          lastRotationTimestampMicros: 'Test string',
          name: 'Test string',
          notebooklmState: 'Test string',
          singleRegionKeys: [
            {
              kmsKey: 'Test string',
            },
          ],
          state: 'Test string',
        },
        contentConfig: 'Test string',
        createTime: 'Test string',
        defaultSchemaId: 'Test string',
        displayName: 'Test string',
        documentProcessingConfig: {
          chunkingConfig: {
            layoutBasedChunkingConfig: {
              chunkSize: 42,
              includeAncestorHeadings: true,
            },
          },
          defaultParsingConfig: {
            digitalParsingConfig: {},
            layoutParsingConfig: {
              enableImageAnnotation: true,
              enableTableAnnotation: true,
            },
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
          name: 'Test string',
          parsingConfigOverrides: {
            A: {
              digitalParsingConfig: {},
              layoutParsingConfig: {
                enableImageAnnotation: true,
                enableTableAnnotation: true,
              },
              ocrParsingConfig: {
                enhancedDocumentElements: ['Test string'],
                useNativeText: true,
              },
            },
          },
        },
        healthcareFhirConfig: {
          enableConfigurableSchema: true,
          enableStaticIndexingForBatchIngestion: true,
        },
        identityMappingStore: 'Test string',
        idpConfig: {
          externalIdpConfig: {
            workforcePoolName: 'Test string',
          },
          idpType: 'Test string',
        },
        industryVertical: 'Test string',
        isInfobotFaqDataStore: true,
        kmsKeyName: 'Test string',
        languageInfo: {
          language: 'Test string',
          languageCode: 'Test string',
          normalizedLanguageCode: 'Test string',
          region: 'Test string',
        },
        name: 'Test string',
        naturalLanguageQueryUnderstandingConfig: {
          mode: 'Test string',
        },
        servingConfigDataStore: {
          disabledForServing: true,
        },
        solutionTypes: ['Test string'],
        startingSchema: {
          fieldConfigs: [
            {
              advancedSiteSearchDataSources: ['Test string'],
              completableOption: 'Test string',
              dynamicFacetableOption: 'Test string',
              fieldPath: 'Test string',
              fieldType: 'Test string',
              indexableOption: 'Test string',
              keyPropertyType: 'Test string',
              metatagName: 'Test string',
              recsFilterableOption: 'Test string',
              retrievableOption: 'Test string',
              schemaOrgPaths: ['Test string'],
              searchableOption: 'Test string',
            },
          ],
          jsonSchema: 'Test string',
          name: 'Test string',
          structSchema: {
            A: 42,
          },
        },
        workspaceConfig: {
          dasherCustomerId: 'Test string',
          superAdminEmailAddress: 'Test string',
          superAdminServiceAccount: 'Test string',
          type: 'Test string',
        },
      },
    );
    /** Updates the DocumentProcessingConfig. DocumentProcessingConfig is a singleon resource of DataStore. It's empty when DataStore is created. The first call to this method will set up DocumentProcessingConfig. */
    await gapi.client.discoveryengine.projects.locations.dataStores.updateDocumentProcessingConfig(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        chunkingConfig: {
          layoutBasedChunkingConfig: {
            chunkSize: 42,
            includeAncestorHeadings: true,
          },
        },
        defaultParsingConfig: {
          digitalParsingConfig: {},
          layoutParsingConfig: {
            enableImageAnnotation: true,
            enableTableAnnotation: true,
          },
          ocrParsingConfig: {
            enhancedDocumentElements: ['Test string'],
            useNativeText: true,
          },
        },
        name: 'Test string',
        parsingConfigOverrides: {
          A: {
            digitalParsingConfig: {},
            layoutParsingConfig: {
              enableImageAnnotation: true,
              enableTableAnnotation: true,
            },
            ocrParsingConfig: {
              enhancedDocumentElements: ['Test string'],
              useNativeText: true,
            },
          },
        },
      },
    );
    /** Gets index freshness metadata for Documents. Supported for website search only. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.batchGetDocumentsMetadata(
      {
        'matcher.fhirMatcher.fhirResources': 'Test string',
        'matcher.urisMatcher.uris': 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.create(
      {
        documentId: 'Test string',
        parent: 'Test string',
      },
      {
        aclInfo: {
          readers: [
            {
              idpWide: true,
              principals: [
                {
                  groupId: 'Test string',
                  userId: 'Test string',
                },
              ],
            },
          ],
        },
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
          pendingMessage: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      },
    );
    /** Deletes a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.get(
      {
        name: 'Test string',
      },
    );
    /** Gets the parsed layout information for a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.getProcessedDocument(
      {
        name: 'Test string',
        processedDocumentFormat: 'Test string',
        processedDocumentType: 'Test string',
      },
    );
    /** Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items are created. Note: It is possible for a subset of the Documents to be successfully updated. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.import(
      {
        parent: 'Test string',
      },
      {
        alloyDbSource: {
          clusterId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          locationId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        autoGenerateIds: true,
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        bigtableSource: {
          bigtableOptions: {
            families: {
              A: {
                columns: [
                  {
                    encoding: 'Test string',
                    fieldName: 'Test string',
                    qualifier: 'Test string',
                    type: 'Test string',
                  },
                ],
                encoding: 'Test string',
                fieldName: 'Test string',
                type: 'Test string',
              },
            },
            keyFieldName: 'Test string',
          },
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        cloudSqlSource: {
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          instanceId: 'Test string',
          offload: true,
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        fhirStoreSource: {
          fhirStore: 'Test string',
          gcsStagingDir: 'Test string',
          resourceTypes: ['Test string'],
          updateFromLatestPredefinedSchema: true,
        },
        firestoreSource: {
          collectionId: 'Test string',
          databaseId: 'Test string',
          gcsStagingDir: 'Test string',
          projectId: 'Test string',
        },
        forceRefreshContent: true,
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        idField: 'Test string',
        inlineSource: {
          documents: [
            {
              aclInfo: {
                readers: [
                  {
                    idpWide: true,
                    principals: [
                      {
                        groupId: 'Test string',
                        userId: 'Test string',
                      },
                    ],
                  },
                ],
              },
              content: {
                mimeType: 'Test string',
                rawBytes: 'Test string',
                uri: 'Test string',
              },
              derivedStructData: {
                A: 42,
              },
              id: 'Test string',
              indexStatus: {
                errorSamples: [
                  {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                ],
                indexTime: 'Test string',
                pendingMessage: 'Test string',
              },
              indexTime: 'Test string',
              jsonData: 'Test string',
              name: 'Test string',
              parentDocumentId: 'Test string',
              schemaId: 'Test string',
              structData: {
                A: 42,
              },
            },
          ],
        },
        reconciliationMode: 'Test string',
        spannerSource: {
          databaseId: 'Test string',
          enableDataBoost: true,
          instanceId: 'Test string',
          projectId: 'Test string',
          tableId: 'Test string',
        },
        updateMask: 'Test string',
      },
    );
    /** Gets a list of Documents. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        aclInfo: {
          readers: [
            {
              idpWide: true,
              principals: [
                {
                  groupId: 'Test string',
                  userId: 'Test string',
                },
              ],
            },
          ],
        },
        content: {
          mimeType: 'Test string',
          rawBytes: 'Test string',
          uri: 'Test string',
        },
        derivedStructData: {
          A: 42,
        },
        id: 'Test string',
        indexStatus: {
          errorSamples: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          indexTime: 'Test string',
          pendingMessage: 'Test string',
        },
        indexTime: 'Test string',
        jsonData: 'Test string',
        name: 'Test string',
        parentDocumentId: 'Test string',
        schemaId: 'Test string',
        structData: {
          A: 42,
        },
      },
    );
    /** Permanently deletes all selected Documents in a branch. This process is asynchronous. Depending on the number of Documents to be deleted, this operation can take hours to complete. Before the delete operation completes, some Documents might still be returned by DocumentService.GetDocument or DocumentService.ListDocuments. To get a list of the Documents to be deleted, set PurgeDocumentsRequest.force to false. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.purge(
      {
        parent: 'Test string',
      },
      {
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        filter: 'Test string',
        force: true,
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          documents: ['Test string'],
        },
      },
    );
    /** Gets a Document. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.chunks.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of Chunks. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.documents.chunks.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.branches.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Completes the user input with advanced keyword suggestions. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completionConfig.completeQuery(
      {
        completionConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              condition: 'Test string',
            },
          ],
        },
        includeTailSuggestions: true,
        query: 'Test string',
        queryModel: 'Test string',
        suggestionTypes: ['Test string'],
        suggestionTypeSpecs: [
          {
            maxSuggestions: 42,
            suggestionType: 'Test string',
          },
        ],
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Imports CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completionSuggestions.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          suggestions: [
            {
              alternativePhrases: ['Test string'],
              frequency: 'Test string',
              globalScore: 42,
              groupId: 'Test string',
              groupScore: 42,
              languageCode: 'Test string',
              suggestion: 'Test string',
            },
          ],
        },
      },
    );
    /** Permanently deletes all CompletionSuggestions for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.completionSuggestions.purge(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Creates a Control. By default 1000 controls are allowed for a data store. A request can be submitted to adjust this limit. If the Control to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.create(
      {
        controlId: 'Test string',
        parent: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
          fixedBoost: 42,
          interpolationBoostSpec: {
            attributeType: 'Test string',
            controlPoints: [
              {
                attributeValue: 'Test string',
                boostAmount: 42,
              },
            ],
            fieldName: 'Test string',
            interpolationType: 'Test string',
          },
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryRegex: 'Test string',
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        promoteAction: {
          dataStore: 'Test string',
          searchLinkPromotion: {
            description: 'Test string',
            enabled: true,
            imageUri: 'Test string',
            title: 'Test string',
            uri: 'Test string',
          },
        },
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      },
    );
    /** Deletes a Control. If the Control to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Control. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all Controls by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Control. Control action type cannot be changed. If the Control to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.controls.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        associatedServingConfigIds: ['Test string'],
        boostAction: {
          boost: 42,
          dataStore: 'Test string',
          filter: 'Test string',
          fixedBoost: 42,
          interpolationBoostSpec: {
            attributeType: 'Test string',
            controlPoints: [
              {
                attributeValue: 'Test string',
                boostAmount: 42,
              },
            ],
            fieldName: 'Test string',
            interpolationType: 'Test string',
          },
        },
        conditions: [
          {
            activeTimeRange: [
              {
                endTime: 'Test string',
                startTime: 'Test string',
              },
            ],
            queryRegex: 'Test string',
            queryTerms: [
              {
                fullMatch: true,
                value: 'Test string',
              },
            ],
          },
        ],
        displayName: 'Test string',
        filterAction: {
          dataStore: 'Test string',
          filter: 'Test string',
        },
        name: 'Test string',
        promoteAction: {
          dataStore: 'Test string',
          searchLinkPromotion: {
            description: 'Test string',
            enabled: true,
            imageUri: 'Test string',
            title: 'Test string',
            uri: 'Test string',
          },
        },
        redirectAction: {
          redirectUri: 'Test string',
        },
        solutionType: 'Test string',
        synonymsAction: {
          synonyms: ['Test string'],
        },
        useCases: ['Test string'],
      },
    );
    /** Converses a conversation. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.converse(
      {
        name: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        conversation: {
          endTime: 'Test string',
          messages: [
            {
              createTime: 'Test string',
              reply: {
                references: [
                  {
                    anchorText: 'Test string',
                    end: 42,
                    start: 42,
                    uri: 'Test string',
                  },
                ],
                reply: 'Test string',
                summary: {
                  safetyAttributes: {
                    categories: ['Test string'],
                    scores: [42],
                  },
                  summarySkippedReasons: ['Test string'],
                  summaryText: 'Test string',
                  summaryWithMetadata: {
                    blobAttachments: [
                      {
                        attributionType: 'Test string',
                        data: {
                          data: 'Test string',
                          mimeType: 'Test string',
                        },
                      },
                    ],
                    citationMetadata: {
                      citations: [
                        {
                          endIndex: 'Test string',
                          sources: [
                            {
                              referenceIndex: 'Test string',
                            },
                          ],
                          startIndex: 'Test string',
                        },
                      ],
                    },
                    references: [
                      {
                        chunkContents: [
                          {
                            blobAttachmentIndexes: ['Test string'],
                            content: 'Test string',
                            pageIdentifier: 'Test string',
                          },
                        ],
                        document: 'Test string',
                        title: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    summary: 'Test string',
                  },
                },
              },
              userInput: {
                context: {
                  activeDocument: 'Test string',
                  contextDocuments: ['Test string'],
                },
                input: 'Test string',
              },
            },
          ],
          name: 'Test string',
          startTime: 'Test string',
          state: 'Test string',
          userPseudoId: 'Test string',
        },
        filter: 'Test string',
        query: {
          context: {
            activeDocument: 'Test string',
            contextDocuments: ['Test string'],
          },
          input: 'Test string',
        },
        safeSearch: true,
        servingConfig: 'Test string',
        summarySpec: {
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonSummarySeekingQuery: true,
          includeCitations: true,
          languageCode: 'Test string',
          modelPromptSpec: {
            preamble: 'Test string',
          },
          modelSpec: {
            version: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          summaryResultCount: 42,
          useSemanticChunks: true,
        },
        userLabels: {
          A: 'Test string',
        },
      },
    );
    /** Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.create(
      {
        parent: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              references: [
                {
                  anchorText: 'Test string',
                  end: 42,
                  start: 42,
                  uri: 'Test string',
                },
              ],
              reply: 'Test string',
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  blobAttachments: [
                    {
                      attributionType: 'Test string',
                      data: {
                        data: 'Test string',
                        mimeType: 'Test string',
                      },
                    },
                  ],
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          blobAttachmentIndexes: ['Test string'],
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Deletes a Conversation. If the Conversation to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Conversation. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all Conversations by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Conversation. Conversation action type cannot be changed. If the Conversation to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        endTime: 'Test string',
        messages: [
          {
            createTime: 'Test string',
            reply: {
              references: [
                {
                  anchorText: 'Test string',
                  end: 42,
                  start: 42,
                  uri: 'Test string',
                },
              ],
              reply: 'Test string',
              summary: {
                safetyAttributes: {
                  categories: ['Test string'],
                  scores: [42],
                },
                summarySkippedReasons: ['Test string'],
                summaryText: 'Test string',
                summaryWithMetadata: {
                  blobAttachments: [
                    {
                      attributionType: 'Test string',
                      data: {
                        data: 'Test string',
                        mimeType: 'Test string',
                      },
                    },
                  ],
                  citationMetadata: {
                    citations: [
                      {
                        endIndex: 'Test string',
                        sources: [
                          {
                            referenceIndex: 'Test string',
                          },
                        ],
                        startIndex: 'Test string',
                      },
                    ],
                  },
                  references: [
                    {
                      chunkContents: [
                        {
                          blobAttachmentIndexes: ['Test string'],
                          content: 'Test string',
                          pageIdentifier: 'Test string',
                        },
                      ],
                      document: 'Test string',
                      title: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  summary: 'Test string',
                },
              },
            },
            userInput: {
              context: {
                activeDocument: 'Test string',
                contextDocuments: ['Test string'],
              },
              input: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        userPseudoId: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.dataStores.models.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.models.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.dataStores.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.dataStores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Creates a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.create(
      {
        parent: 'Test string',
        schemaId: 'Test string',
      },
      {
        fieldConfigs: [
          {
            advancedSiteSearchDataSources: ['Test string'],
            completableOption: 'Test string',
            dynamicFacetableOption: 'Test string',
            fieldPath: 'Test string',
            fieldType: 'Test string',
            indexableOption: 'Test string',
            keyPropertyType: 'Test string',
            metatagName: 'Test string',
            recsFilterableOption: 'Test string',
            retrievableOption: 'Test string',
            schemaOrgPaths: ['Test string'],
            searchableOption: 'Test string',
          },
        ],
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      },
    );
    /** Deletes a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of Schemas. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Schema. */
    await gapi.client.discoveryengine.projects.locations.dataStores.schemas.patch(
      {
        allowMissing: true,
        name: 'Test string',
      },
      {
        fieldConfigs: [
          {
            advancedSiteSearchDataSources: ['Test string'],
            completableOption: 'Test string',
            dynamicFacetableOption: 'Test string',
            fieldPath: 'Test string',
            fieldType: 'Test string',
            indexableOption: 'Test string',
            keyPropertyType: 'Test string',
            metatagName: 'Test string',
            recsFilterableOption: 'Test string',
            retrievableOption: 'Test string',
            schemaOrgPaths: ['Test string'],
            searchableOption: 'Test string',
          },
        ],
        jsonSchema: 'Test string',
        name: 'Test string',
        structSchema: {
          A: 42,
        },
      },
    );
    /** Answer query method. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.answer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        endUserSpec: {
          endUserMetadata: [
            {
              chunkInfo: {
                content: 'Test string',
                documentMetadata: {
                  title: 'Test string',
                },
              },
            },
          ],
        },
        groundingSpec: {
          filteringLevel: 'Test string',
          includeGroundingSupports: true,
        },
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          disableSpellCorrection: true,
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
            modelSpec: {
              modelType: 'Test string',
            },
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
          safetySettings: [
            {
              category: 'Test string',
              threshold: 'Test string',
            },
          ],
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Gets a ServingConfig. Returns a NotFound error if the ServingConfig does not exist. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all ServingConfigs linked to this dataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a ServingConfig. Returns a NOT_FOUND error if the ServingConfig does not exist. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        boostControlIds: ['Test string'],
        createTime: 'Test string',
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        displayName: 'Test string',
        dissociateControlIds: ['Test string'],
        diversityLevel: 'Test string',
        embeddingConfig: {
          fieldPath: 'Test string',
        },
        filterControlIds: ['Test string'],
        genericConfig: {
          contentSearchSpec: {
            chunkSpec: {
              numNextChunks: 42,
              numPreviousChunks: 42,
            },
            extractiveContentSpec: {
              maxExtractiveAnswerCount: 42,
              maxExtractiveSegmentCount: 42,
              numNextSegments: 42,
              numPreviousSegments: 42,
              returnExtractiveSegmentScore: true,
            },
            searchResultMode: 'Test string',
            snippetSpec: {
              maxSnippetCount: 42,
              referenceOnly: true,
              returnSnippet: true,
            },
            summarySpec: {
              ignoreAdversarialQuery: true,
              ignoreJailBreakingQuery: true,
              ignoreLowRelevantContent: true,
              ignoreNonSummarySeekingQuery: true,
              includeCitations: true,
              languageCode: 'Test string',
              modelPromptSpec: {
                preamble: 'Test string',
              },
              modelSpec: {
                version: 'Test string',
              },
              multimodalSpec: {
                imageSource: 'Test string',
              },
              summaryResultCount: 42,
              useSemanticChunks: true,
            },
          },
        },
        guidedSearchSpec: {
          enableRefinementAttributes: true,
          enableRelatedQuestions: true,
          maxRelatedQuestions: 42,
        },
        ignoreControlIds: ['Test string'],
        mediaConfig: {
          contentFreshnessCutoffDays: 42,
          contentWatchedPercentageThreshold: 42,
          contentWatchedSecondsThreshold: 42,
          demoteContentWatchedPastDays: 42,
          demotionEventType: 'Test string',
        },
        modelId: 'Test string',
        name: 'Test string',
        onewaySynonymsControlIds: ['Test string'],
        personalizationSpec: {
          mode: 'Test string',
        },
        promoteControlIds: ['Test string'],
        rankingExpression: 'Test string',
        redirectControlIds: ['Test string'],
        replacementControlIds: ['Test string'],
        solutionType: 'Test string',
        synonymsControlIds: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Makes a recommendation, which requires a contextual user event. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.recommend(
      {
        servingConfig: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        params: {
          A: 42,
        },
        userEvent: {
          attributes: {
            A: {
              numbers: [42],
              text: ['Test string'],
            },
          },
          attributionToken: 'Test string',
          completionInfo: {
            selectedPosition: 42,
            selectedSuggestion: 'Test string',
          },
          conversionType: 'Test string',
          dataStore: 'Test string',
          directUserRequest: true,
          documents: [
            {
              conversionValue: 42,
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          engine: 'Test string',
          eventTime: 'Test string',
          eventType: 'Test string',
          filter: 'Test string',
          mediaInfo: {
            mediaProgressDuration: 'Test string',
            mediaProgressPercentage: 42,
          },
          pageInfo: {
            pageCategory: 'Test string',
            pageviewId: 'Test string',
            referrerUri: 'Test string',
            uri: 'Test string',
          },
          panel: {
            displayName: 'Test string',
            documents: [
              {
                conversionValue: 42,
                id: 'Test string',
                joined: true,
                name: 'Test string',
                promotionIds: ['Test string'],
                quantity: 42,
                uri: 'Test string',
              },
            ],
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
          panels: [
            {
              displayName: 'Test string',
              documents: [
                {
                  conversionValue: 42,
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              panelId: 'Test string',
              panelPosition: 42,
              totalPanels: 42,
            },
          ],
          promotionIds: ['Test string'],
          searchInfo: {
            offset: 42,
            orderBy: 'Test string',
            searchQuery: 'Test string',
          },
          sessionId: 'Test string',
          tagIds: ['Test string'],
          transactionInfo: {
            cost: 42,
            currency: 'Test string',
            discountValue: 42,
            tax: 42,
            transactionId: 'Test string',
            value: 42,
          },
          userInfo: {
            timeZone: 'Test string',
            userAgent: 'Test string',
            userId: 'Test string',
          },
          userPseudoId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        validateOnly: true,
      },
    );
    /** Performs a search. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.search(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            multimodalSpec: {
              imageSource: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        dataStoreSpecs: [
          {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        displaySpec: {
          matchHighlightingCondition: 'Test string',
        },
        embeddingSpec: {
          embeddingVectors: [
            {
              fieldPath: 'Test string',
              vector: [42],
            },
          ],
        },
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        naturalLanguageQueryUnderstandingSpec: {
          filterExtractionCondition: 'Test string',
          geoSearchQueryDetectionFieldNames: ['Test string'],
        },
        offset: 42,
        oneBoxPageSize: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        personalizationSpec: {
          mode: 'Test string',
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        rankingExpression: 'Test string',
        rankingExpressionBackend: 'Test string',
        regionCode: 'Test string',
        relevanceScoreSpec: {
          returnRelevanceScore: true,
        },
        relevanceThreshold: 'Test string',
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        servingConfig: 'Test string',
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Performs a search. Similar to the SearchService.Search method, but a lite version that allows API key for authentication, where OAuth and IAM checks are not required. Only public website search is supported by this method. If data stores and engines not associated with public website search are specified, a `FAILED_PRECONDITION` error is returned. This method can be used for easy onboarding without having to implement an authentication backend. However, it is strongly recommended to use SearchService.Search instead with required OAuth and IAM checks to provide better data security. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.searchLite(
      {
        servingConfig: 'Test string',
      },
      {
        boostSpec: {
          conditionBoostSpecs: [
            {
              boost: 42,
              boostControlSpec: {
                attributeType: 'Test string',
                controlPoints: [
                  {
                    attributeValue: 'Test string',
                    boostAmount: 42,
                  },
                ],
                fieldName: 'Test string',
                interpolationType: 'Test string',
              },
              condition: 'Test string',
            },
          ],
        },
        branch: 'Test string',
        canonicalFilter: 'Test string',
        contentSearchSpec: {
          chunkSpec: {
            numNextChunks: 42,
            numPreviousChunks: 42,
          },
          extractiveContentSpec: {
            maxExtractiveAnswerCount: 42,
            maxExtractiveSegmentCount: 42,
            numNextSegments: 42,
            numPreviousSegments: 42,
            returnExtractiveSegmentScore: true,
          },
          searchResultMode: 'Test string',
          snippetSpec: {
            maxSnippetCount: 42,
            referenceOnly: true,
            returnSnippet: true,
          },
          summarySpec: {
            ignoreAdversarialQuery: true,
            ignoreJailBreakingQuery: true,
            ignoreLowRelevantContent: true,
            ignoreNonSummarySeekingQuery: true,
            includeCitations: true,
            languageCode: 'Test string',
            modelPromptSpec: {
              preamble: 'Test string',
            },
            modelSpec: {
              version: 'Test string',
            },
            multimodalSpec: {
              imageSource: 'Test string',
            },
            summaryResultCount: 42,
            useSemanticChunks: true,
          },
        },
        customFineTuningSpec: {
          enableSearchAdaptor: true,
        },
        dataStoreSpecs: [
          {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            dataStore: 'Test string',
            filter: 'Test string',
          },
        ],
        displaySpec: {
          matchHighlightingCondition: 'Test string',
        },
        embeddingSpec: {
          embeddingVectors: [
            {
              fieldPath: 'Test string',
              vector: [42],
            },
          ],
        },
        facetSpecs: [
          {
            enableDynamicPosition: true,
            excludedFilterKeys: ['Test string'],
            facetKey: {
              caseInsensitive: true,
              contains: ['Test string'],
              intervals: [
                {
                  exclusiveMaximum: 42,
                  exclusiveMinimum: 42,
                  maximum: 42,
                  minimum: 42,
                },
              ],
              key: 'Test string',
              orderBy: 'Test string',
              prefixes: ['Test string'],
              restrictedValues: ['Test string'],
            },
            limit: 42,
          },
        ],
        filter: 'Test string',
        imageQuery: {
          imageBytes: 'Test string',
        },
        languageCode: 'Test string',
        naturalLanguageQueryUnderstandingSpec: {
          filterExtractionCondition: 'Test string',
          geoSearchQueryDetectionFieldNames: ['Test string'],
        },
        offset: 42,
        oneBoxPageSize: 42,
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        params: {
          A: 42,
        },
        personalizationSpec: {
          mode: 'Test string',
        },
        query: 'Test string',
        queryExpansionSpec: {
          condition: 'Test string',
          pinUnexpandedResults: true,
        },
        rankingExpression: 'Test string',
        rankingExpressionBackend: 'Test string',
        regionCode: 'Test string',
        relevanceScoreSpec: {
          returnRelevanceScore: true,
        },
        relevanceThreshold: 'Test string',
        safeSearch: true,
        searchAsYouTypeSpec: {
          condition: 'Test string',
        },
        servingConfig: 'Test string',
        session: 'Test string',
        sessionSpec: {
          queryId: 'Test string',
          searchResultPersistenceCount: 42,
        },
        spellCorrectionSpec: {
          mode: 'Test string',
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Answer query method (streaming). It takes one AnswerQueryRequest and returns multiple AnswerQueryResponse messages in a stream. */
    await gapi.client.discoveryengine.projects.locations.dataStores.servingConfigs.streamAnswer(
      {
        servingConfig: 'Test string',
      },
      {
        answerGenerationSpec: {
          answerLanguageCode: 'Test string',
          ignoreAdversarialQuery: true,
          ignoreJailBreakingQuery: true,
          ignoreLowRelevantContent: true,
          ignoreNonAnswerSeekingQuery: true,
          includeCitations: true,
          modelSpec: {
            modelVersion: 'Test string',
          },
          multimodalSpec: {
            imageSource: 'Test string',
          },
          promptSpec: {
            preamble: 'Test string',
          },
        },
        asynchronousMode: true,
        endUserSpec: {
          endUserMetadata: [
            {
              chunkInfo: {
                content: 'Test string',
                documentMetadata: {
                  title: 'Test string',
                },
              },
            },
          ],
        },
        groundingSpec: {
          filteringLevel: 'Test string',
          includeGroundingSupports: true,
        },
        query: {
          queryId: 'Test string',
          text: 'Test string',
        },
        queryUnderstandingSpec: {
          disableSpellCorrection: true,
          queryClassificationSpec: {
            types: ['Test string'],
          },
          queryRephraserSpec: {
            disable: true,
            maxRephraseSteps: 42,
            modelSpec: {
              modelType: 'Test string',
            },
          },
        },
        relatedQuestionsSpec: {
          enable: true,
        },
        safetySpec: {
          enable: true,
          safetySettings: [
            {
              category: 'Test string',
              threshold: 'Test string',
            },
          ],
        },
        searchSpec: {
          searchParams: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            filter: 'Test string',
            maxReturnResults: 42,
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            orderBy: 'Test string',
            searchResultMode: 'Test string',
          },
          searchResultList: {
            searchResults: [
              {
                chunkInfo: {
                  chunk: 'Test string',
                  content: 'Test string',
                  documentMetadata: {
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
                unstructuredDocumentInfo: {
                  document: 'Test string',
                  documentContexts: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveAnswers: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  extractiveSegments: [
                    {
                      content: 'Test string',
                      pageIdentifier: 'Test string',
                    },
                  ],
                  title: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
          },
        },
        session: 'Test string',
        userLabels: {
          A: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Creates a Session. If the Session to create already exists, an ALREADY_EXISTS error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        isPinned: true,
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            detailedAnswer: {
              answerSkippedReasons: ['Test string'],
              answerText: 'Test string',
              blobAttachments: [
                {
                  attributionType: 'Test string',
                  data: {
                    data: 'Test string',
                    mimeType: 'Test string',
                  },
                },
              ],
              citations: [
                {
                  endIndex: 'Test string',
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              completeTime: 'Test string',
              createTime: 'Test string',
              groundingScore: 42,
              groundingSupports: [
                {
                  endIndex: 'Test string',
                  groundingCheckRequired: true,
                  groundingScore: 42,
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              name: 'Test string',
              queryUnderstandingInfo: {
                queryClassificationInfo: [
                  {
                    positive: true,
                    type: 'Test string',
                  },
                ],
              },
              references: [
                {
                  chunkInfo: {
                    blobAttachmentIndexes: ['Test string'],
                    chunk: 'Test string',
                    content: 'Test string',
                    documentMetadata: {
                      document: 'Test string',
                      pageIdentifier: 'Test string',
                      structData: {
                        A: 42,
                      },
                      title: 'Test string',
                      uri: 'Test string',
                    },
                    relevanceScore: 42,
                  },
                  structuredDocumentInfo: {
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                  unstructuredDocumentInfo: {
                    chunkContents: [
                      {
                        blobAttachmentIndexes: ['Test string'],
                        content: 'Test string',
                        pageIdentifier: 'Test string',
                        relevanceScore: 42,
                      },
                    ],
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
              ],
              relatedQuestions: ['Test string'],
              safetyRatings: [
                {
                  blocked: true,
                  category: 'Test string',
                  probability: 'Test string',
                  probabilityScore: 42,
                  severity: 'Test string',
                  severityScore: 42,
                },
              ],
              state: 'Test string',
              steps: [
                {
                  actions: [
                    {
                      observation: {
                        searchResults: [
                          {
                            chunkInfo: [
                              {
                                chunk: 'Test string',
                                content: 'Test string',
                                relevanceScore: 42,
                              },
                            ],
                            document: 'Test string',
                            snippetInfo: [
                              {
                                snippet: 'Test string',
                                snippetStatus: 'Test string',
                              },
                            ],
                            structData: {
                              A: 42,
                            },
                            title: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      searchAction: {
                        query: 'Test string',
                      },
                    },
                  ],
                  description: 'Test string',
                  state: 'Test string',
                  thought: 'Test string',
                },
              ],
            },
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      },
    );
    /** Deletes a Session. If the Session to delete does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a Session. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.get(
      {
        includeAnswerDetails: true,
        name: 'Test string',
      },
    );
    /** Lists all Sessions by their parent DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a Session. Session action type cannot be changed. If the Session to update does not exist, a NOT_FOUND error is returned. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        isPinned: true,
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        turns: [
          {
            answer: 'Test string',
            detailedAnswer: {
              answerSkippedReasons: ['Test string'],
              answerText: 'Test string',
              blobAttachments: [
                {
                  attributionType: 'Test string',
                  data: {
                    data: 'Test string',
                    mimeType: 'Test string',
                  },
                },
              ],
              citations: [
                {
                  endIndex: 'Test string',
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              completeTime: 'Test string',
              createTime: 'Test string',
              groundingScore: 42,
              groundingSupports: [
                {
                  endIndex: 'Test string',
                  groundingCheckRequired: true,
                  groundingScore: 42,
                  sources: [
                    {
                      referenceId: 'Test string',
                    },
                  ],
                  startIndex: 'Test string',
                },
              ],
              name: 'Test string',
              queryUnderstandingInfo: {
                queryClassificationInfo: [
                  {
                    positive: true,
                    type: 'Test string',
                  },
                ],
              },
              references: [
                {
                  chunkInfo: {
                    blobAttachmentIndexes: ['Test string'],
                    chunk: 'Test string',
                    content: 'Test string',
                    documentMetadata: {
                      document: 'Test string',
                      pageIdentifier: 'Test string',
                      structData: {
                        A: 42,
                      },
                      title: 'Test string',
                      uri: 'Test string',
                    },
                    relevanceScore: 42,
                  },
                  structuredDocumentInfo: {
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                  unstructuredDocumentInfo: {
                    chunkContents: [
                      {
                        blobAttachmentIndexes: ['Test string'],
                        content: 'Test string',
                        pageIdentifier: 'Test string',
                        relevanceScore: 42,
                      },
                    ],
                    document: 'Test string',
                    structData: {
                      A: 42,
                    },
                    title: 'Test string',
                    uri: 'Test string',
                  },
                },
              ],
              relatedQuestions: ['Test string'],
              safetyRatings: [
                {
                  blocked: true,
                  category: 'Test string',
                  probability: 'Test string',
                  probabilityScore: 42,
                  severity: 'Test string',
                  severityScore: 42,
                },
              ],
              state: 'Test string',
              steps: [
                {
                  actions: [
                    {
                      observation: {
                        searchResults: [
                          {
                            chunkInfo: [
                              {
                                chunk: 'Test string',
                                content: 'Test string',
                                relevanceScore: 42,
                              },
                            ],
                            document: 'Test string',
                            snippetInfo: [
                              {
                                snippet: 'Test string',
                                snippetStatus: 'Test string',
                              },
                            ],
                            structData: {
                              A: 42,
                            },
                            title: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      searchAction: {
                        query: 'Test string',
                      },
                    },
                  ],
                  description: 'Test string',
                  state: 'Test string',
                  thought: 'Test string',
                },
              ],
            },
            query: {
              queryId: 'Test string',
              text: 'Test string',
            },
          },
        ],
        userPseudoId: 'Test string',
      },
    );
    /** Gets a Answer. */
    await gapi.client.discoveryengine.projects.locations.dataStores.sessions.answers.get(
      {
        name: 'Test string',
      },
    );
    /** Downgrade from advanced site search to basic site search. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.disableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {},
    );
    /** Upgrade from basic site search to advanced site search. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.enableAdvancedSiteSearch(
      {
        siteSearchEngine: 'Test string',
      },
      {},
    );
    /** Request on-demand recrawl for a list of URIs. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.recrawlUris(
      {
        siteSearchEngine: 'Test string',
      },
      {
        siteCredential: 'Test string',
        uris: ['Test string'],
      },
    );
    /** Creates a Sitemap. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.sitemaps.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        uri: 'Test string',
      },
    );
    /** Deletes a Sitemap. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.sitemaps.delete(
      {
        name: 'Test string',
      },
    );
    /** Fetch Sitemaps in a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.sitemaps.fetch(
      {
        'matcher.urisMatcher.uris': 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates TargetSite in a batch. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            targetSite: {
              exactMatch: true,
              failureReason: {
                quotaFailure: {
                  totalRequiredQuota: 'Test string',
                },
              },
              generatedUriPattern: 'Test string',
              indexingStatus: 'Test string',
              name: 'Test string',
              providedUriPattern: 'Test string',
              rootDomainUri: 'Test string',
              siteVerificationInfo: {
                siteVerificationState: 'Test string',
                verifyTime: 'Test string',
              },
              type: 'Test string',
              updateTime: 'Test string',
            },
          },
        ],
      },
    );
    /** Creates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.create(
      {
        parent: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.get(
      {
        name: 'Test string',
      },
    );
    /** Gets a list of TargetSites. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a TargetSite. */
    await gapi.client.discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.patch(
      {
        name: 'Test string',
      },
      {
        exactMatch: true,
        failureReason: {
          quotaFailure: {
            totalRequiredQuota: 'Test string',
          },
        },
        generatedUriPattern: 'Test string',
        indexingStatus: 'Test string',
        name: 'Test string',
        providedUriPattern: 'Test string',
        rootDomainUri: 'Test string',
        siteVerificationInfo: {
          siteVerificationState: 'Test string',
          verifyTime: 'Test string',
        },
        type: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Imports all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.suggestionDenyListEntries.import(
      {
        parent: 'Test string',
      },
      {
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          entries: [
            {
              blockPhrase: 'Test string',
              matchOperator: 'Test string',
            },
          ],
        },
      },
    );
    /** Permanently deletes all SuggestionDenyListEntry for a DataStore. */
    await gapi.client.discoveryengine.projects.locations.dataStores.suggestionDenyListEntries.purge(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.collect(
      {
        ets: 'Test string',
        parent: 'Test string',
        uri: 'Test string',
        userEvent: 'Test string',
      },
    );
    /** Bulk import of user events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          userEvents: [
            {
              attributes: {
                A: {
                  numbers: [42],
                  text: ['Test string'],
                },
              },
              attributionToken: 'Test string',
              completionInfo: {
                selectedPosition: 42,
                selectedSuggestion: 'Test string',
              },
              conversionType: 'Test string',
              dataStore: 'Test string',
              directUserRequest: true,
              documents: [
                {
                  conversionValue: 42,
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              engine: 'Test string',
              eventTime: 'Test string',
              eventType: 'Test string',
              filter: 'Test string',
              mediaInfo: {
                mediaProgressDuration: 'Test string',
                mediaProgressPercentage: 42,
              },
              pageInfo: {
                pageCategory: 'Test string',
                pageviewId: 'Test string',
                referrerUri: 'Test string',
                uri: 'Test string',
              },
              panel: {
                displayName: 'Test string',
                documents: [
                  {
                    conversionValue: 42,
                    id: 'Test string',
                    joined: true,
                    name: 'Test string',
                    promotionIds: ['Test string'],
                    quantity: 42,
                    uri: 'Test string',
                  },
                ],
                panelId: 'Test string',
                panelPosition: 42,
                totalPanels: 42,
              },
              panels: [
                {
                  displayName: 'Test string',
                  documents: [
                    {
                      conversionValue: 42,
                      id: 'Test string',
                      joined: true,
                      name: 'Test string',
                      promotionIds: ['Test string'],
                      quantity: 42,
                      uri: 'Test string',
                    },
                  ],
                  panelId: 'Test string',
                  panelPosition: 42,
                  totalPanels: 42,
                },
              ],
              promotionIds: ['Test string'],
              searchInfo: {
                offset: 42,
                orderBy: 'Test string',
                searchQuery: 'Test string',
              },
              sessionId: 'Test string',
              tagIds: ['Test string'],
              transactionInfo: {
                cost: 42,
                currency: 'Test string',
                discountValue: 42,
                tax: 42,
                transactionId: 'Test string',
                value: 42,
              },
              userInfo: {
                timeZone: 'Test string',
                userAgent: 'Test string',
                userId: 'Test string',
              },
              userPseudoId: 'Test string',
            },
          ],
        },
      },
    );
    /** Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.purge(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        force: true,
      },
    );
    /** Writes a single user event. */
    await gapi.client.discoveryengine.projects.locations.dataStores.userEvents.write(
      {
        parent: 'Test string',
        writeAsync: true,
      },
      {
        attributes: {
          A: {
            numbers: [42],
            text: ['Test string'],
          },
        },
        attributionToken: 'Test string',
        completionInfo: {
          selectedPosition: 42,
          selectedSuggestion: 'Test string',
        },
        conversionType: 'Test string',
        dataStore: 'Test string',
        directUserRequest: true,
        documents: [
          {
            conversionValue: 42,
            id: 'Test string',
            joined: true,
            name: 'Test string',
            promotionIds: ['Test string'],
            quantity: 42,
            uri: 'Test string',
          },
        ],
        engine: 'Test string',
        eventTime: 'Test string',
        eventType: 'Test string',
        filter: 'Test string',
        mediaInfo: {
          mediaProgressDuration: 'Test string',
          mediaProgressPercentage: 42,
        },
        pageInfo: {
          pageCategory: 'Test string',
          pageviewId: 'Test string',
          referrerUri: 'Test string',
          uri: 'Test string',
        },
        panel: {
          displayName: 'Test string',
          documents: [
            {
              conversionValue: 42,
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          panelId: 'Test string',
          panelPosition: 42,
          totalPanels: 42,
        },
        panels: [
          {
            displayName: 'Test string',
            documents: [
              {
                conversionValue: 42,
                id: 'Test string',
                joined: true,
                name: 'Test string',
                promotionIds: ['Test string'],
                quantity: 42,
                uri: 'Test string',
              },
            ],
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
        ],
        promotionIds: ['Test string'],
        searchInfo: {
          offset: 42,
          orderBy: 'Test string',
          searchQuery: 'Test string',
        },
        sessionId: 'Test string',
        tagIds: ['Test string'],
        transactionInfo: {
          cost: 42,
          currency: 'Test string',
          discountValue: 42,
          tax: 42,
          transactionId: 'Test string',
          value: 42,
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Gets a WidgetConfig. */
    await gapi.client.discoveryengine.projects.locations.dataStores.widgetConfigs.get(
      {
        acceptCache: true,
        name: 'Test string',
      },
    );
    /** Creates a Evaluation. Upon creation, the evaluation will be automatically triggered and begin execution. */
    await gapi.client.discoveryengine.projects.locations.evaluations.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        endTime: 'Test string',
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        errorSamples: [
          {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
        ],
        evaluationSpec: {
          querySetSpec: {
            sampleQuerySet: 'Test string',
          },
          searchRequest: {
            boostSpec: {
              conditionBoostSpecs: [
                {
                  boost: 42,
                  boostControlSpec: {
                    attributeType: 'Test string',
                    controlPoints: [
                      {
                        attributeValue: 'Test string',
                        boostAmount: 42,
                      },
                    ],
                    fieldName: 'Test string',
                    interpolationType: 'Test string',
                  },
                  condition: 'Test string',
                },
              ],
            },
            branch: 'Test string',
            canonicalFilter: 'Test string',
            contentSearchSpec: {
              chunkSpec: {
                numNextChunks: 42,
                numPreviousChunks: 42,
              },
              extractiveContentSpec: {
                maxExtractiveAnswerCount: 42,
                maxExtractiveSegmentCount: 42,
                numNextSegments: 42,
                numPreviousSegments: 42,
                returnExtractiveSegmentScore: true,
              },
              searchResultMode: 'Test string',
              snippetSpec: {
                maxSnippetCount: 42,
                referenceOnly: true,
                returnSnippet: true,
              },
              summarySpec: {
                ignoreAdversarialQuery: true,
                ignoreJailBreakingQuery: true,
                ignoreLowRelevantContent: true,
                ignoreNonSummarySeekingQuery: true,
                includeCitations: true,
                languageCode: 'Test string',
                modelPromptSpec: {
                  preamble: 'Test string',
                },
                modelSpec: {
                  version: 'Test string',
                },
                multimodalSpec: {
                  imageSource: 'Test string',
                },
                summaryResultCount: 42,
                useSemanticChunks: true,
              },
            },
            customFineTuningSpec: {
              enableSearchAdaptor: true,
            },
            dataStoreSpecs: [
              {
                boostSpec: {
                  conditionBoostSpecs: [
                    {
                      boost: 42,
                      boostControlSpec: {
                        attributeType: 'Test string',
                        controlPoints: [
                          {
                            attributeValue: 'Test string',
                            boostAmount: 42,
                          },
                        ],
                        fieldName: 'Test string',
                        interpolationType: 'Test string',
                      },
                      condition: 'Test string',
                    },
                  ],
                },
                dataStore: 'Test string',
                filter: 'Test string',
              },
            ],
            displaySpec: {
              matchHighlightingCondition: 'Test string',
            },
            embeddingSpec: {
              embeddingVectors: [
                {
                  fieldPath: 'Test string',
                  vector: [42],
                },
              ],
            },
            facetSpecs: [
              {
                enableDynamicPosition: true,
                excludedFilterKeys: ['Test string'],
                facetKey: {
                  caseInsensitive: true,
                  contains: ['Test string'],
                  intervals: [
                    {
                      exclusiveMaximum: 42,
                      exclusiveMinimum: 42,
                      maximum: 42,
                      minimum: 42,
                    },
                  ],
                  key: 'Test string',
                  orderBy: 'Test string',
                  prefixes: ['Test string'],
                  restrictedValues: ['Test string'],
                },
                limit: 42,
              },
            ],
            filter: 'Test string',
            imageQuery: {
              imageBytes: 'Test string',
            },
            languageCode: 'Test string',
            naturalLanguageQueryUnderstandingSpec: {
              filterExtractionCondition: 'Test string',
              geoSearchQueryDetectionFieldNames: ['Test string'],
            },
            offset: 42,
            oneBoxPageSize: 42,
            orderBy: 'Test string',
            pageSize: 42,
            pageToken: 'Test string',
            params: {
              A: 42,
            },
            personalizationSpec: {
              mode: 'Test string',
            },
            query: 'Test string',
            queryExpansionSpec: {
              condition: 'Test string',
              pinUnexpandedResults: true,
            },
            rankingExpression: 'Test string',
            rankingExpressionBackend: 'Test string',
            regionCode: 'Test string',
            relevanceScoreSpec: {
              returnRelevanceScore: true,
            },
            relevanceThreshold: 'Test string',
            safeSearch: true,
            searchAsYouTypeSpec: {
              condition: 'Test string',
            },
            servingConfig: 'Test string',
            session: 'Test string',
            sessionSpec: {
              queryId: 'Test string',
              searchResultPersistenceCount: 42,
            },
            spellCorrectionSpec: {
              mode: 'Test string',
            },
            userInfo: {
              timeZone: 'Test string',
              userAgent: 'Test string',
              userId: 'Test string',
            },
            userLabels: {
              A: 'Test string',
            },
            userPseudoId: 'Test string',
          },
        },
        name: 'Test string',
        qualityMetrics: {
          docNdcg: {
            top1: 42,
            top10: 42,
            top3: 42,
            top5: 42,
          },
          docPrecision: {
            top1: 42,
            top10: 42,
            top3: 42,
            top5: 42,
          },
          docRecall: {
            top1: 42,
            top10: 42,
            top3: 42,
            top5: 42,
          },
          pageNdcg: {
            top1: 42,
            top10: 42,
            top3: 42,
            top5: 42,
          },
          pageRecall: {
            top1: 42,
            top10: 42,
            top3: 42,
            top5: 42,
          },
        },
        state: 'Test string',
      },
    );
    /** Gets a Evaluation. */
    await gapi.client.discoveryengine.projects.locations.evaluations.get({
      name: 'Test string',
    });
    /** Gets a list of Evaluations. */
    await gapi.client.discoveryengine.projects.locations.evaluations.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets a list of results for a given a Evaluation. */
    await gapi.client.discoveryengine.projects.locations.evaluations.listResults(
      {
        evaluation: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.evaluations.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Performs a grounding check. */
    await gapi.client.discoveryengine.projects.locations.groundingConfigs.check(
      {
        groundingConfig: 'Test string',
      },
      {
        answerCandidate: 'Test string',
        facts: [
          {
            attributes: {
              A: 'Test string',
            },
            factText: 'Test string',
          },
        ],
        groundingSpec: {
          citationThreshold: 42,
        },
        userLabels: {
          A: 'Test string',
        },
      },
    );
    /** Creates a new Identity Mapping Store. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.create(
      {
        cmekConfigName: 'Test string',
        disableCmek: true,
        identityMappingStoreId: 'Test string',
        parent: 'Test string',
      },
      {
        cmekConfig: {
          isDefault: true,
          kmsKey: 'Test string',
          kmsKeyVersion: 'Test string',
          lastRotationTimestampMicros: 'Test string',
          name: 'Test string',
          notebooklmState: 'Test string',
          singleRegionKeys: [
            {
              kmsKey: 'Test string',
            },
          ],
          state: 'Test string',
        },
        idpConfig: {
          externalIdpConfig: {
            workforcePoolName: 'Test string',
          },
          idpType: 'Test string',
        },
        kmsKeyName: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes the Identity Mapping Store. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets the Identity Mapping Store. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.get(
      {
        name: 'Test string',
      },
    );
    /** Imports a list of Identity Mapping Entries to an Identity Mapping Store. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.importIdentityMappings(
      {
        identityMappingStore: 'Test string',
      },
      {
        inlineSource: {
          identityMappingEntries: [
            {
              externalIdentity: 'Test string',
              groupId: 'Test string',
              userId: 'Test string',
            },
          ],
        },
      },
    );
    /** Lists all Identity Mapping Stores. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Lists Identity Mappings in an Identity Mapping Store. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.listIdentityMappings(
      {
        identityMappingStore: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Purges specified or all Identity Mapping Entries from an Identity Mapping Store. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.purgeIdentityMappings(
      {
        identityMappingStore: 'Test string',
      },
      {
        filter: 'Test string',
        force: true,
        inlineSource: {
          identityMappingEntries: [
            {
              externalIdentity: 'Test string',
              groupId: 'Test string',
              userId: 'Test string',
            },
          ],
        },
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.identityMappingStores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.podcasts.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Ranks a list of text records based on the given input query. */
    await gapi.client.discoveryengine.projects.locations.rankingConfigs.rank(
      {
        rankingConfig: 'Test string',
      },
      {
        ignoreRecordDetailsInResponse: true,
        model: 'Test string',
        query: 'Test string',
        records: [
          {
            content: 'Test string',
            id: 'Test string',
            score: 42,
            title: 'Test string',
          },
        ],
        topN: 42,
        userLabels: {
          A: 'Test string',
        },
      },
    );
    /** Check a particular requirement. */
    await gapi.client.discoveryengine.projects.locations.requirements.checkRequirement(
      {
        location: 'Test string',
      },
      {
        requirementType: 'Test string',
        resources: [
          {
            labels: {
              A: 'Test string',
            },
            type: 'Test string',
          },
        ],
      },
    );
    /** Creates a SampleQuerySet */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.create(
      {
        parent: 'Test string',
        sampleQuerySetId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a SampleQuerySet. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a SampleQuerySet. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.get({
      name: 'Test string',
    });
    /** Gets a list of SampleQuerySets. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a SampleQuerySet. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Creates a SampleQuery */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.sampleQueries.create(
      {
        parent: 'Test string',
        sampleQueryId: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        queryEntry: {
          query: 'Test string',
          targets: [
            {
              pageNumbers: [42],
              score: 42,
              uri: 'Test string',
            },
          ],
        },
      },
    );
    /** Deletes a SampleQuery. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.sampleQueries.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a SampleQuery. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.sampleQueries.get(
      {
        name: 'Test string',
      },
    );
    /** Bulk import of multiple SampleQuerys. Sample queries that already exist may be deleted. Note: It is possible for a subset of the SampleQuerys to be successfully imported. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.sampleQueries.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          sampleQueries: [
            {
              createTime: 'Test string',
              name: 'Test string',
              queryEntry: {
                query: 'Test string',
                targets: [
                  {
                    pageNumbers: [42],
                    score: 42,
                    uri: 'Test string',
                  },
                ],
              },
            },
          ],
        },
      },
    );
    /** Gets a list of SampleQuerys. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.sampleQueries.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a SampleQuery. */
    await gapi.client.discoveryengine.projects.locations.sampleQuerySets.sampleQueries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        queryEntry: {
          query: 'Test string',
          targets: [
            {
              pageNumbers: [42],
              score: 42,
              uri: 'Test string',
            },
          ],
        },
      },
    );
    /** Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a third-party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly. */
    await gapi.client.discoveryengine.projects.locations.userEvents.collect({
      ets: 'Test string',
      parent: 'Test string',
      uri: 'Test string',
      userEvent: 'Test string',
    });
    /** Bulk import of user events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata. */
    await gapi.client.discoveryengine.projects.locations.userEvents.import(
      {
        parent: 'Test string',
      },
      {
        bigquerySource: {
          dataSchema: 'Test string',
          datasetId: 'Test string',
          gcsStagingDir: 'Test string',
          partitionDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          projectId: 'Test string',
          tableId: 'Test string',
        },
        errorConfig: {
          gcsPrefix: 'Test string',
        },
        gcsSource: {
          dataSchema: 'Test string',
          inputUris: ['Test string'],
        },
        inlineSource: {
          userEvents: [
            {
              attributes: {
                A: {
                  numbers: [42],
                  text: ['Test string'],
                },
              },
              attributionToken: 'Test string',
              completionInfo: {
                selectedPosition: 42,
                selectedSuggestion: 'Test string',
              },
              conversionType: 'Test string',
              dataStore: 'Test string',
              directUserRequest: true,
              documents: [
                {
                  conversionValue: 42,
                  id: 'Test string',
                  joined: true,
                  name: 'Test string',
                  promotionIds: ['Test string'],
                  quantity: 42,
                  uri: 'Test string',
                },
              ],
              engine: 'Test string',
              eventTime: 'Test string',
              eventType: 'Test string',
              filter: 'Test string',
              mediaInfo: {
                mediaProgressDuration: 'Test string',
                mediaProgressPercentage: 42,
              },
              pageInfo: {
                pageCategory: 'Test string',
                pageviewId: 'Test string',
                referrerUri: 'Test string',
                uri: 'Test string',
              },
              panel: {
                displayName: 'Test string',
                documents: [
                  {
                    conversionValue: 42,
                    id: 'Test string',
                    joined: true,
                    name: 'Test string',
                    promotionIds: ['Test string'],
                    quantity: 42,
                    uri: 'Test string',
                  },
                ],
                panelId: 'Test string',
                panelPosition: 42,
                totalPanels: 42,
              },
              panels: [
                {
                  displayName: 'Test string',
                  documents: [
                    {
                      conversionValue: 42,
                      id: 'Test string',
                      joined: true,
                      name: 'Test string',
                      promotionIds: ['Test string'],
                      quantity: 42,
                      uri: 'Test string',
                    },
                  ],
                  panelId: 'Test string',
                  panelPosition: 42,
                  totalPanels: 42,
                },
              ],
              promotionIds: ['Test string'],
              searchInfo: {
                offset: 42,
                orderBy: 'Test string',
                searchQuery: 'Test string',
              },
              sessionId: 'Test string',
              tagIds: ['Test string'],
              transactionInfo: {
                cost: 42,
                currency: 'Test string',
                discountValue: 42,
                tax: 42,
                transactionId: 'Test string',
                value: 42,
              },
              userInfo: {
                timeZone: 'Test string',
                userAgent: 'Test string',
                userId: 'Test string',
              },
              userPseudoId: 'Test string',
            },
          ],
        },
      },
    );
    /** Writes a single user event. */
    await gapi.client.discoveryengine.projects.locations.userEvents.write(
      {
        parent: 'Test string',
        writeAsync: true,
      },
      {
        attributes: {
          A: {
            numbers: [42],
            text: ['Test string'],
          },
        },
        attributionToken: 'Test string',
        completionInfo: {
          selectedPosition: 42,
          selectedSuggestion: 'Test string',
        },
        conversionType: 'Test string',
        dataStore: 'Test string',
        directUserRequest: true,
        documents: [
          {
            conversionValue: 42,
            id: 'Test string',
            joined: true,
            name: 'Test string',
            promotionIds: ['Test string'],
            quantity: 42,
            uri: 'Test string',
          },
        ],
        engine: 'Test string',
        eventTime: 'Test string',
        eventType: 'Test string',
        filter: 'Test string',
        mediaInfo: {
          mediaProgressDuration: 'Test string',
          mediaProgressPercentage: 42,
        },
        pageInfo: {
          pageCategory: 'Test string',
          pageviewId: 'Test string',
          referrerUri: 'Test string',
          uri: 'Test string',
        },
        panel: {
          displayName: 'Test string',
          documents: [
            {
              conversionValue: 42,
              id: 'Test string',
              joined: true,
              name: 'Test string',
              promotionIds: ['Test string'],
              quantity: 42,
              uri: 'Test string',
            },
          ],
          panelId: 'Test string',
          panelPosition: 42,
          totalPanels: 42,
        },
        panels: [
          {
            displayName: 'Test string',
            documents: [
              {
                conversionValue: 42,
                id: 'Test string',
                joined: true,
                name: 'Test string',
                promotionIds: ['Test string'],
                quantity: 42,
                uri: 'Test string',
              },
            ],
            panelId: 'Test string',
            panelPosition: 42,
            totalPanels: 42,
          },
        ],
        promotionIds: ['Test string'],
        searchInfo: {
          offset: 42,
          orderBy: 'Test string',
          searchQuery: 'Test string',
        },
        sessionId: 'Test string',
        tagIds: ['Test string'],
        transactionInfo: {
          cost: 42,
          currency: 'Test string',
          discountValue: 42,
          tax: 42,
          transactionId: 'Test string',
          value: 42,
        },
        userInfo: {
          timeZone: 'Test string',
          userAgent: 'Test string',
          userId: 'Test string',
        },
        userPseudoId: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.locations.userStores.operations.get(
      {
        name: 'Test string',
      },
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.locations.userStores.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.discoveryengine.projects.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.discoveryengine.projects.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
