/* Type definitions for non-npm package Service Consumer Management API v1 1.0 */
// Project: https://cloud.google.com/service-consumer-management/docs/overview
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://serviceconsumermanagement.googleapis.com/$discovery/rest?version=v1
// Revision: 20210621

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Service Consumer Management API v1 */
    function load(name: "serviceconsumermanagement", version: "v1"): PromiseLike<void>;
    function load(name: "serviceconsumermanagement", version: "v1", callback: () => any): void;

    namespace serviceconsumermanagement {
        interface AddTenantProjectRequest {
            /** Configuration of the new tenant project to be added to tenancy unit resources. */
            projectConfig?: TenantProjectConfig;
            /** Required. Tag of the added project. Must be less than 128 characters. Required. */
            tag?: string;
        }
        interface Api {
            /** The methods of this interface, in unspecified order. */
            methods?: Method[];
            /** Included interfaces. See Mixin. */
            mixins?: Mixin[];
            /** The fully qualified name of this interface, including package name followed by the interface's simple name. */
            name?: string;
            /** Any metadata attached to the interface. */
            options?: Option[];
            /** Source context for the protocol buffer service represented by this message. */
            sourceContext?: SourceContext;
            /** The source syntax of the service. */
            syntax?: string;
            /**
             * A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the
             * entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to
             * be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the
             * minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product
             * plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be
             * omitted. Zero major versions must only be used for experimental, non-GA interfaces.
             */
            version?: string;
        }
        interface ApplyTenantProjectConfigRequest {
            /** Configuration that should be applied to the existing tenant project. */
            projectConfig?: TenantProjectConfig;
            /** Required. Tag of the project. Must be less than 128 characters. Required. */
            tag?: string;
        }
        interface AttachTenantProjectRequest {
            /** When attaching an external project, this is in the format of `projects/{project_number}`. */
            externalResource?: string;
            /**
             * When attaching a reserved project already in tenancy units, this is the tag of a tenant resource under the tenancy unit for the managed service's service producer project. The
             * reserved tenant resource must be in an active state.
             */
            reservedResource?: string;
            /** Required. Tag of the tenant resource after attachment. Must be less than 128 characters. Required. */
            tag?: string;
        }
        interface Authentication {
            /** Defines a set of authentication providers that a service supports. */
            providers?: AuthProvider[];
            /** A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: AuthenticationRule[];
        }
        interface AuthenticationRule {
            /** If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests. */
            allowWithoutCredential?: boolean;
            /** The requirements for OAuth credentials. */
            oauth?: OAuthRequirements;
            /** Requirements for additional authentication providers. */
            requirements?: AuthRequirement[];
            /** Selects the methods to which this rule applies. Refer to selector for syntax details. */
            selector?: string;
        }
        interface AuthProvider {
            /**
             * The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will
             * be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no
             * audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService -
             * https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
             */
            audiences?: string;
            /** Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec. */
            authorizationUrl?: string;
            /** The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth". */
            id?: string;
            /**
             * Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example:
             * https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
             */
            issuer?: string;
            /**
             * URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional
             * if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email
             * domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
             */
            jwksUri?: string;
            /**
             * Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is:
             * checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token
             * query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query:
             * access_token
             */
            jwtLocations?: JwtLocation[];
        }
        interface AuthRequirement {
            /**
             * NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT
             * [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When
             * this setting is absent, only JWTs with audience "https://Service_name/API_name" will be accepted. For example, if no audiences are in the setting, LibraryService API will only
             * accept JWTs with the following audience "https://library-example.googleapis.com/google.example.library.v1.LibraryService". Example: audiences:
             * bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
             */
            audiences?: string;
            /** id from authentication provider. Example: provider_id: bookstore_auth */
            providerId?: string;
        }
        interface Backend {
            /** A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: BackendRule[];
        }
        interface BackendRule {
            /**
             * The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None
             * https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If
             * the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
             */
            address?: string;
            /** The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment. */
            deadline?: number;
            /**
             * When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is
             * expected by the backend, this field must be set to true to preserve the header.
             */
            disableAuth?: boolean;
            /** The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend. */
            jwtAudience?: string;
            /** The number of seconds to wait for the completion of a long running operation. The default is no deadline. */
            operationDeadline?: number;
            pathTranslation?: string;
            /**
             * The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME
             * PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance.
             * Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See
             * https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
             */
            protocol?: string;
            /** Selects the methods to which this rule applies. Refer to selector for syntax details. */
            selector?: string;
        }
        interface Billing {
            /**
             * Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type.
             * A metric can be used in at most one consumer destination.
             */
            consumerDestinations?: BillingDestination[];
        }
        interface BillingConfig {
            /** Name of the billing account. For example `billingAccounts/012345-567890-ABCDEF`. */
            billingAccount?: string;
        }
        interface BillingDestination {
            /** Names of the metrics to report to this billing destination. Each name must be defined in Service.metrics section. */
            metrics?: string[];
            /** The monitored resource type. The type must be defined in Service.monitored_resources section. */
            monitoredResource?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface Context {
            /** A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: ContextRule[];
        }
        interface ContextRule {
            /** A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend. */
            allowedRequestExtensions?: string[];
            /** A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client. */
            allowedResponseExtensions?: string[];
            /** A list of full type names of provided contexts. */
            provided?: string[];
            /** A list of full type names of requested contexts. */
            requested?: string[];
            /** Selects the methods to which this rule applies. Refer to selector for syntax details. */
            selector?: string;
        }
        interface Control {
            /** The service control environment to use. If empty, no control plane feature (like quota and billing) will be enabled. */
            environment?: string;
        }
        interface CreateTenancyUnitRequest {
            /**
             * Optional. Optional service producer-provided identifier of the tenancy unit. Must be no longer than 40 characters and preferably URI friendly. If it isn't provided, a UID for the
             * tenancy unit is automatically generated. The identifier must be unique across a managed service. If the tenancy unit already exists for the managed service and service consumer
             * pair, calling `CreateTenancyUnit` returns the existing tenancy unit if the provided identifier is identical or empty, otherwise the call fails.
             */
            tenancyUnitId?: string;
        }
        interface CustomError {
            /** The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: CustomErrorRule[];
            /** The list of custom error detail types, e.g. 'google.foo.v1.CustomError'. */
            types?: string[];
        }
        interface CustomErrorRule {
            /** Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload. */
            isErrorType?: boolean;
            /** Selects messages to which this rule applies. Refer to selector for syntax details. */
            selector?: string;
        }
        interface CustomHttpPattern {
            /** The name of this custom HTTP verb. */
            kind?: string;
            /** The path matched by this custom verb. */
            path?: string;
        }
        interface DeleteTenantProjectRequest {
            /** Required. Tag of the resource within the tenancy unit. */
            tag?: string;
        }
        interface Documentation {
            /** The URL to the root of documentation. */
            documentationRootUrl?: string;
            /**
             * Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style):
             * documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
             */
            overview?: string;
            /** The top level pages for the documentation set. */
            pages?: Page[];
            /** A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: DocumentationRule[];
            /**
             * Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections
             * that show a base that other urls are relative to.
             */
            serviceRootUrl?: string;
            /** A short summary of what the service does. Can only be provided by plain text. */
            summary?: string;
        }
        interface DocumentationRule {
            /** Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`. */
            deprecationDescription?: string;
            /** Description of the selected API(s). */
            description?: string;
            /**
             * The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in "*", indicating a wildcard. Wildcards are only allowed at the
             * end and for a whole component of the qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or more components. To specify a default for all
             * applicable elements, the whole pattern "*" is used.
             */
            selector?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Endpoint {
            /**
             * Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to
             * HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed.
             */
            allowCors?: boolean;
            /** The canonical name of this endpoint. */
            name?: string;
            /**
             * The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be
             * either a valid IPv4 address or a fully-qualified domain name. For example, "8.8.8.8" or "myservice.appspot.com".
             */
            target?: string;
        }
        interface Enum {
            /** Enum value definitions. */
            enumvalue?: EnumValue[];
            /** Enum type name. */
            name?: string;
            /** Protocol buffer options. */
            options?: Option[];
            /** The source context. */
            sourceContext?: SourceContext;
            /** The source syntax. */
            syntax?: string;
        }
        interface EnumValue {
            /** Enum value name. */
            name?: string;
            /** Enum value number. */
            number?: number;
            /** Protocol buffer options. */
            options?: Option[];
        }
        interface Field {
            /** The field cardinality. */
            cardinality?: string;
            /** The string value of the default value of this field. Proto2 syntax only. */
            defaultValue?: string;
            /** The field JSON name. */
            jsonName?: string;
            /** The field type. */
            kind?: string;
            /** The field name. */
            name?: string;
            /** The field number. */
            number?: number;
            /** The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list. */
            oneofIndex?: number;
            /** The protocol buffer options. */
            options?: Option[];
            /** Whether to use alternative packed wire representation. */
            packed?: boolean;
            /** The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`. */
            typeUrl?: string;
        }
        interface Http {
            /**
             * When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default
             * behavior is to not decode RFC 6570 reserved characters in multi segment matches.
             */
            fullyDecodeReservedExpansion?: boolean;
            /** A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: HttpRule[];
        }
        interface HttpRule {
            /** Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep). */
            additionalBindings?: HttpRule[];
            /**
             * The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for
             * not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
             */
            body?: string;
            /**
             * The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for this rule. The
             * wild-card rule is useful for services that provide content to Web (HTML) clients.
             */
            custom?: CustomHttpPattern;
            /** Maps to HTTP DELETE. Used for deleting a resource. */
            delete?: string;
            /** Maps to HTTP GET. Used for listing and getting information about resources. */
            get?: string;
            /** Maps to HTTP PATCH. Used for updating a resource. */
            patch?: string;
            /** Maps to HTTP POST. Used for creating a resource or performing an action. */
            post?: string;
            /** Maps to HTTP PUT. Used for replacing a resource. */
            put?: string;
            /**
             * Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The
             * referred field must be present at the top-level of the response message type.
             */
            responseBody?: string;
            /** Selects a method to which this rule applies. Refer to selector for syntax details. */
            selector?: string;
        }
        interface JwtLocation {
            /** Specifies HTTP header name to extract JWT token. */
            header?: string;
            /** Specifies URL query parameter name to extract JWT token. */
            query?: string;
            /**
             * The value prefix. The value format is "value_prefix{token}" Only applies to "in" header type. Must be empty for "in" query type. If not empty, the header value has to match (case
             * sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for "Authorization: Bearer {JWT}",
             * value_prefix="Bearer " with a space at the end.
             */
            valuePrefix?: string;
        }
        interface LabelDescriptor {
            /** A human-readable description for the label. */
            description?: string;
            /** The label key. */
            key?: string;
            /** The type of data that can be assigned to the label. */
            valueType?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface ListTenancyUnitsResponse {
            /** Pagination token for large results. */
            nextPageToken?: string;
            /** Tenancy units matching the request. */
            tenancyUnits?: TenancyUnit[];
        }
        interface LogDescriptor {
            /** A human-readable description of this log. This information appears in the documentation and can contain details. */
            description?: string;
            /** The human-readable name for this log. This information appears on the user interface and should be concise. */
            displayName?: string;
            /** The set of labels that are available to describe a specific log entry. Runtime requests that contain labels not specified here are considered invalid. */
            labels?: LabelDescriptor[];
            /**
             * The name of the log. It must be less than 512 characters long and can include the following characters: upper- and lower-case alphanumeric characters [A-Za-z0-9], and punctuation
             * characters including slash, underscore, hyphen, period [/_-.].
             */
            name?: string;
        }
        interface Logging {
            /**
             * Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be
             * used in at most one consumer destination.
             */
            consumerDestinations?: LoggingDestination[];
            /**
             * Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be
             * used in at most one producer destination.
             */
            producerDestinations?: LoggingDestination[];
        }
        interface LoggingDestination {
            /**
             * Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically
             * prefixed with the service name followed by "/".
             */
            logs?: string[];
            /** The monitored resource type. The type must be defined in the Service.monitored_resources section. */
            monitoredResource?: string;
        }
        interface Method {
            /** The simple name of this method. */
            name?: string;
            /** Any metadata attached to the method. */
            options?: Option[];
            /** If true, the request is streamed. */
            requestStreaming?: boolean;
            /** A URL of the input message type. */
            requestTypeUrl?: string;
            /** If true, the response is streamed. */
            responseStreaming?: boolean;
            /** The URL of the output message type. */
            responseTypeUrl?: string;
            /** The source syntax of this method. */
            syntax?: string;
        }
        interface MetricDescriptor {
            /** A detailed description of the metric, which can be used in documentation. */
            description?: string;
            /**
             * A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is
             * recommended to be set for any metrics associated with user-visible concepts, such as Quota.
             */
            displayName?: string;
            /**
             * The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a
             * label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
             */
            labels?: LabelDescriptor[];
            /** Optional. The launch stage of the metric definition. */
            launchStage?: string;
            /** Optional. Metadata which can be used to guide usage of the metric. */
            metadata?: MetricDescriptorMetadata;
            /** Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported. */
            metricKind?: string;
            /**
             * Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be
             * associated with one of the monitored resource types listed here.
             */
            monitoredResourceTypes?: string[];
            /** The resource name of the metric descriptor. */
            name?: string;
            /**
             * The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`.
             * Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up"
             * "appengine.googleapis.com/http/server/response_latencies"
             */
            type?: string;
            /**
             * The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the
             * stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_
             * be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom
             * metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the
             * job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE
             * CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported
             * units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min`
             * minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) *
             * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) *
             * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/`
             * division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed
             * at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a
             * unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}"
             * ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`,
             * `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless
             * unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per
             * day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as
             * `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values
             * giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically
             * in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
             */
            unit?: string;
            /** Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported. */
            valueType?: string;
        }
        interface MetricDescriptorMetadata {
            /** The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors. */
            ingestDelay?: string;
            /** Deprecated. Must use the MetricDescriptor.launch_stage instead. */
            launchStage?: string;
            /**
             * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors.
             * Metrics with a higher granularity have a smaller sampling period.
             */
            samplePeriod?: string;
        }
        interface MetricRule {
            /**
             * Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount
             * increased for the metric against which the quota limits are defined. The value must not be negative.
             */
            metricCosts?: { [P in string]: string };
            /** Selects the methods to which this rule applies. Refer to selector for syntax details. */
            selector?: string;
        }
        interface Mixin {
            /** The fully qualified name of the interface which is included. */
            name?: string;
            /** If non-empty specifies a path under which inherited HTTP paths are rooted. */
            root?: string;
        }
        interface MonitoredResourceDescriptor {
            /** Optional. A detailed description of the monitored resource type that might be used in documentation. */
            description?: string;
            /**
             * Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other
             * determiners. For example, `"Google Cloud SQL Database"`.
             */
            displayName?: string;
            /**
             * Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels
             * `"database_id"` and `"zone"`.
             */
            labels?: LabelDescriptor[];
            /** Optional. The launch stage of the monitored resource definition. */
            launchStage?: string;
            /**
             * Optional. The resource name of the monitored resource descriptor: `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type} is the value of the `type` field in this
             * object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format
             * `"monitoredResourceDescriptors/{type}"`.
             */
            name?: string;
            /** Required. The monitored resource type. For example, the type `"cloudsql_database"` represents databases in Google Cloud SQL. */
            type?: string;
        }
        interface Monitoring {
            /**
             * Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring
             * destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used
             * once in the Monitoring configuration.
             */
            consumerDestinations?: MonitoringDestination[];
            /**
             * Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring
             * destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used
             * once in the Monitoring configuration.
             */
            producerDestinations?: MonitoringDestination[];
        }
        interface MonitoringDestination {
            /** Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section. */
            metrics?: string[];
            /** The monitored resource type. The type must be defined in Service.monitored_resources section. */
            monitoredResource?: string;
        }
        interface OAuthRequirements {
            /**
             * The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes:
             * https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
             */
            canonicalScopes?: string;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface Option {
            /**
             * The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `"map_entry"`. For custom options, it should be the
             * fully-qualified name. For example, `"google.api.http"`.
             */
            name?: string;
            /**
             * The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an
             * enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
             */
            value?: { [P in string]: any };
        }
        interface Page {
            /** The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file. */
            content?: string;
            /**
             * The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the
             * root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md
             * ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
             */
            name?: string;
            /** Subpages of this page. The order of subpages specified here will be honored in the generated docset. */
            subpages?: Page[];
        }
        interface PolicyBinding {
            /** Uses the same format as in IAM policy. `member` must include both a prefix and ID. For example, `user:{emailId}`, `serviceAccount:{emailId}`, `group:{emailId}`. */
            members?: string[];
            /** Role. (https://cloud.google.com/iam/docs/understanding-roles) For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
            role?: string;
        }
        interface Quota {
            /** List of `QuotaLimit` definitions for the service. */
            limits?: QuotaLimit[];
            /** List of `MetricRule` definitions, each one mapping a selected method to one or more metrics. */
            metricRules?: MetricRule[];
        }
        interface QuotaLimit {
            /**
             * Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for
             * his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1
             * will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
             */
            defaultLimit?: string;
            /**
             * Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name
             * (see: `display_name`).
             */
            description?: string;
            /**
             * User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the
             * default display name generated from the configuration.
             */
            displayName?: string;
            /** Duration of this limit in textual notation. Must be "100s" or "1d". Used by group-based quotas only. */
            duration?: string;
            /**
             * Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled.
             * This field can only be set on a limit with duration "1d", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is
             * no free tier for this service. Used by group-based quotas only.
             */
            freeTier?: string;
            /**
             * Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this
             * value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to
             * -1, indicating unlimited maximum quota. Used by group-based quotas only.
             */
            maxLimit?: string;
            /**
             * The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service
             * config.
             */
            metric?: string;
            /**
             * Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of
             * the limit name is 64 characters.
             */
            name?: string;
            /**
             * Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: *
             * "1/min/{project}" for quota per minute per project. Note: the order of unit components is insignificant. The "1" at the beginning is required to follow the metric unit syntax.
             */
            unit?: string;
            /**
             * Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD
             * is supported.
             */
            values?: { [P in string]: string };
        }
        interface RemoveTenantProjectRequest {
            /** Required. Tag of the resource within the tenancy unit. */
            tag?: string;
        }
        interface SearchTenancyUnitsResponse {
            /** Pagination token for large results. */
            nextPageToken?: string;
            /** Tenancy Units matching the request. */
            tenancyUnits?: TenancyUnit[];
        }
        interface Service {
            /**
             * A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be
             * derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
             */
            apis?: Api[];
            /** Auth configuration. */
            authentication?: Authentication;
            /** API backend configuration. */
            backend?: Backend;
            /** Billing configuration. */
            billing?: Billing;
            /** Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`. */
            configVersion?: number;
            /** Context configuration. */
            context?: Context;
            /** Configuration for the service control plane. */
            control?: Control;
            /** Custom error configuration. */
            customError?: CustomError;
            /** Additional API documentation. */
            documentation?: Documentation;
            /** Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs. */
            endpoints?: Endpoint[];
            /**
             * A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be
             * included should be listed here by name. Example: enums: - name: google.someapi.v1.SomeEnum
             */
            enums?: Enum[];
            /** HTTP configuration. */
            http?: Http;
            /**
             * A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits,
             * '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
             */
            id?: string;
            /** Logging configuration. */
            logging?: Logging;
            /** Defines the logs used by this service. */
            logs?: LogDescriptor[];
            /** Defines the metrics used by this service. */
            metrics?: MetricDescriptor[];
            /** Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations. */
            monitoredResources?: MonitoredResourceDescriptor[];
            /** Monitoring configuration. */
            monitoring?: Monitoring;
            /**
             * The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure
             * the owner of the service also owns the DNS name.
             */
            name?: string;
            /** The Google project that owns this service. */
            producerProjectId?: string;
            /** Quota configuration. */
            quota?: Quota;
            /** Output only. The source information for this configuration if available. */
            sourceInfo?: SourceInfo;
            /** System parameter configuration. */
            systemParameters?: SystemParameters;
            /**
             * A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs.
             * Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
             */
            systemTypes?: Type[];
            /** The product title for this service. */
            title?: string;
            /**
             * A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced
             * but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name. Example: types: - name: google.protobuf.Int32
             */
            types?: Type[];
            /** Configuration controlling usage of this service. */
            usage?: Usage;
        }
        interface ServiceAccountConfig {
            /**
             * ID of the IAM service account to be created in tenant project. The email format of the service account is "@.iam.gserviceaccount.com". This account ID must be unique within tenant
             * project and service producers have to guarantee it. The ID must be 6-30 characters long, and match the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])`.
             */
            accountId?: string;
            /** Roles for the associated service account for the tenant project. */
            tenantProjectRoles?: string[];
        }
        interface SourceContext {
            /** The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`. */
            fileName?: string;
        }
        interface SourceInfo {
            /** All files used during config generation. */
            sourceFiles?: Array<{ [P in string]: any }>;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface SystemParameter {
            /** Define the HTTP header name to use for the parameter. It is case insensitive. */
            httpHeader?: string;
            /** Define the name of the parameter, such as "api_key" . It is case sensitive. */
            name?: string;
            /** Define the URL query parameter name to use for the parameter. It is case sensitive. */
            urlQueryParameter?: string;
        }
        interface SystemParameterRule {
            /**
             * Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is
             * implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
             */
            parameters?: SystemParameter[];
            /** Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details. */
            selector?: string;
        }
        interface SystemParameters {
            /**
             * Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default
             * system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*"
             * parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: -
             * name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
             */
            rules?: SystemParameterRule[];
        }
        interface TenancyUnit {
            /** Output only. @OutputOnly Cloud resource name of the consumer of this service. For example 'projects/123456'. */
            consumer?: string;
            /** Output only. @OutputOnly The time this tenancy unit was created. */
            createTime?: string;
            /** Globally unique identifier of this tenancy unit "services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}" */
            name?: string;
            /** Output only. Google Cloud API name of the managed service owning this tenancy unit. For example 'serviceconsumermanagement.googleapis.com'. */
            service?: string;
            /** Resources constituting the tenancy unit. There can be at most 512 tenant resources in a tenancy unit. */
            tenantResources?: TenantResource[];
        }
        interface TenantProjectConfig {
            /** Billing account properties. The billing account must be specified. */
            billingConfig?: BillingConfig;
            /**
             * Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a
             * project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`).
             */
            folder?: string;
            /** Labels that are applied to this project. */
            labels?: { [P in string]: string };
            /** Configuration for the IAM service account on the tenant project. */
            serviceAccountConfig?: ServiceAccountConfig;
            /**
             * Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example:
             * 'compute.googleapis.com','cloudfunctions.googleapis.com'
             */
            services?: string[];
            /** Describes ownership and policies for the new tenant project. Required. */
            tenantProjectPolicy?: TenantProjectPolicy;
        }
        interface TenantProjectPolicy {
            /**
             * Policy bindings to be applied to the tenant project, in addition to the 'roles/owner' role granted to the Service Consumer Management service account. At least one binding must have
             * the role `roles/owner`.
             */
            policyBindings?: PolicyBinding[];
        }
        interface TenantResource {
            /** Output only. @OutputOnly Identifier of the tenant resource. For cloud projects, it is in the form 'projects/{number}'. For example 'projects/123456'. */
            resource?: string;
            /** Status of tenant resource. */
            status?: string;
            /** Unique per single tenancy unit. */
            tag?: string;
        }
        interface Type {
            /** The list of fields. */
            fields?: Field[];
            /** The fully qualified message name. */
            name?: string;
            /** The list of types appearing in `oneof` definitions in this type. */
            oneofs?: string[];
            /** The protocol buffer options. */
            options?: Option[];
            /** The source context. */
            sourceContext?: SourceContext;
            /** The source syntax. */
            syntax?: string;
        }
        interface UndeleteTenantProjectRequest {
            /** Required. Tag of the resource within the tenancy unit. */
            tag?: string;
        }
        interface Usage {
            /**
             * The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud
             * Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud
             * Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
             */
            producerNotificationChannel?: string;
            /**
             * Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For
             * Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include
             * "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
             */
            requirements?: string[];
            /** A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order. */
            rules?: UsageRule[];
        }
        interface UsageRule {
            /** If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application. */
            allowUnregisteredCalls?: boolean;
            /** Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details. */
            selector?: string;
            /**
             * If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud
             * Endpoints to bypass checks for internal methods, such as service health check methods.
             */
            skipServiceControl?: boolean;
        }
        interface V1AddVisibilityLabelsResponse {
            /** The updated set of visibility labels for this consumer on this service. */
            labels?: string[];
        }
        interface V1Beta1BatchCreateProducerOverridesResponse {
            /** The overrides that were created. */
            overrides?: V1Beta1QuotaOverride[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface V1Beta1DisableConsumerResponse {
        }
        // tslint:disable-next-line:no-empty-interface
        interface V1Beta1EnableConsumerResponse {
        }
        interface V1Beta1GenerateServiceIdentityResponse {
            /** ServiceIdentity that was created or retrieved. */
            identity?: V1Beta1ServiceIdentity;
        }
        interface V1Beta1ImportProducerOverridesResponse {
            /** The overrides that were created from the imported data. */
            overrides?: V1Beta1QuotaOverride[];
        }
        interface V1Beta1ImportProducerQuotaPoliciesResponse {
            /** The policies that were created from the imported data. */
            policies?: V1Beta1ProducerQuotaPolicy[];
        }
        interface V1Beta1ProducerQuotaPolicy {
            /** The cloud resource container at which the quota policy is created. The format is {container_type}/{container_number} */
            container?: string;
            /**
             * If this map is nonempty, then this policy applies only to specific values for dimensions defined in the limit unit. For example, an policy on a limit with the unit
             * 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the policy is only applied to quota consumed in that region. This map has the following
             * restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. *
             * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota polcies that apply only to a
             * specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid key other
             * than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
             */
            dimensions?: { [P in string]: string };
            /** The name of the metric to which this policy applies. An example name would be: `compute.googleapis.com/cpus` */
            metric?: string;
            /**
             * The resource name of the producer policy. An example name would be:
             * `services/compute.googleapis.com/organizations/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerQuotaPolicies/4a3f2c1d`
             */
            name?: string;
            /** The quota policy value. Can be any nonnegative integer, or -1 (unlimited quota). */
            policyValue?: string;
            /**
             * The limit unit of the limit to which this policy applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example;
             * the literal characters `{` and `}` occur in the string.
             */
            unit?: string;
        }
        interface V1Beta1QuotaOverride {
            /** The resource name of the ancestor that requested the override. For example: "organizations/12345" or "folders/67890". Used by admin overrides only. */
            adminOverrideAncestor?: string;
            /**
             * If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit
             * 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the override is only applied to quota consumed in that region. This map has the
             * following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined
             * key. * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota overrides that apply
             * only to a specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid
             * key other than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
             */
            dimensions?: { [P in string]: string };
            /** The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus` */
            metric?: string;
            /**
             * The resource name of the producer override. An example name would be:
             * `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerOverrides/4a3f2c1d`
             */
            name?: string;
            /** The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota). */
            overrideValue?: string;
            /**
             * The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this
             * example; the literal characters `{` and `}` occur in the string.
             */
            unit?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface V1Beta1RefreshConsumerResponse {
        }
        interface V1Beta1ServiceIdentity {
            /** The email address of the service identity. */
            email?: string;
            /** P4 service identity resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/serviceIdentities/default` */
            name?: string;
            /** The P4 service identity configuration tag. This must be defined in activation_grants. If not specified when creating the account, the tag is set to "default". */
            tag?: string;
            /** The unique and stable id of the service identity. */
            uniqueId?: string;
        }
        interface V1DefaultIdentity {
            /** The email address of the default identity. */
            email?: string;
            /** Default identity resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/defaultIdentity` */
            name?: string;
            /**
             * The Default Identity tag. If specified when creating the account, the tag must be present in activation_grants. If not specified when creating the account, the tag is set to the tag
             * specified in activation_grants.
             */
            tag?: string;
            /** The unique and stable id of the default identity. */
            uniqueId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface V1DisableConsumerResponse {
        }
        // tslint:disable-next-line:no-empty-interface
        interface V1EnableConsumerResponse {
        }
        interface V1GenerateDefaultIdentityResponse {
            /** Status of the role attachment. Under development (go/si-attach-role), currently always return ATTACH_STATUS_UNSPECIFIED) */
            attachStatus?: string;
            /** DefaultIdentity that was created or retrieved. */
            identity?: V1DefaultIdentity;
            /** Role attached to consumer project. Empty if not attached in this request. (Under development, currently always return empty.) */
            role?: string;
        }
        interface V1GenerateServiceAccountResponse {
            /** ServiceAccount that was created or retrieved. */
            account?: V1ServiceAccount;
        }
        // tslint:disable-next-line:no-empty-interface
        interface V1RefreshConsumerResponse {
        }
        interface V1RemoveVisibilityLabelsResponse {
            /** The updated set of visibility labels for this consumer on this service. */
            labels?: string[];
        }
        interface V1ServiceAccount {
            /** The email address of the service account. */
            email?: string;
            /** Deprecated. See b/136209818. */
            iamAccountName?: string;
            /** P4 SA resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/serviceAccounts/default` */
            name?: string;
            /** The P4 SA configuration tag. This must be defined in activation_grants. If not specified when creating the account, the tag is set to "default". */
            tag?: string;
            /** The unique and stable id of the service account. */
            uniqueId?: string;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services
             * to override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
             * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
             * ensure the name binding is the parent resource, without the operations collection id.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
        }
        interface TenancyUnitsResource {
            /**
             * Add a new tenant project to the tenancy unit. There can be a maximum of 1024 tenant projects in a tenancy unit. If there are previously failed `AddTenantProject` calls, you might
             * need to call `RemoveTenantProject` first to resolve them before you can make another call to `AddTenantProject` with the same tag. Operation.
             */
            addProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddTenantProjectRequest;
            }): Request<Operation>;
            addProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddTenantProjectRequest): Request<Operation>;
            /**
             * Apply a configuration to an existing tenant project. This project must exist in an active state and have the original owner account. The caller must have permission to add a project
             * to the given tenancy unit. The configuration is applied, but any existing settings on the project aren't modified. Specified policy bindings are applied. Existing bindings aren't
             * modified. Specified services are activated. No service is deactivated. If specified, new billing configuration is applied. Omit a billing configuration to keep the existing one. A
             * service account in the project is created if previously non existed. Specified labels will be appended to tenant project, note that the value of existing label key will be updated
             * if the same label key is requested. The specified folder is ignored, as moving a tenant project to a different folder isn't supported. The operation fails if any of the steps fail,
             * but no rollback of already applied configuration changes is attempted. Operation.
             */
            applyProjectConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ApplyTenantProjectConfigRequest;
            }): Request<Operation>;
            applyProjectConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ApplyTenantProjectConfigRequest): Request<Operation>;
            /**
             * Attach an existing project to the tenancy unit as a new tenant resource. The project could either be the tenant project reserved by calling `AddTenantProject` under a tenancy unit
             * of a service producer's project of a managed service, or from a separate project. The caller is checked against a set of permissions as if calling `AddTenantProject` on the same
             * service consumer. To trigger the attachment, the targeted tenant project must be in a folder. Make sure the ServiceConsumerManagement service account is the owner of that project.
             * These two requirements are already met if the project is reserved by calling `AddTenantProject`. Operation.
             */
            attachProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit that the project will be attached to. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AttachTenantProjectRequest;
            }): Request<Operation>;
            attachProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit that the project will be attached to. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AttachTenantProjectRequest): Request<Operation>;
            /**
             * Creates a tenancy unit with no tenant resources. If tenancy unit already exists, it will be returned, however, in this case, returned TenancyUnit does not have tenant_resources
             * field set and ListTenancyUnits has to be used to get a complete TenancyUnit with all fields populated.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. services/{service}/{collection id}/{resource id} {collection id} is the cloud resource collection type representing the service consumer, for example 'projects', or
                 * 'organizations'. {resource id} is the consumer numeric id, such as project number: '123456'. {service} the name of a managed service, such as 'service.googleapis.com'. Enables
                 * service binding using the new tenancy unit.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CreateTenancyUnitRequest;
            }): Request<TenancyUnit>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. services/{service}/{collection id}/{resource id} {collection id} is the cloud resource collection type representing the service consumer, for example 'projects', or
                 * 'organizations'. {resource id} is the consumer numeric id, such as project number: '123456'. {service} the name of a managed service, such as 'service.googleapis.com'. Enables
                 * service binding using the new tenancy unit.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CreateTenancyUnitRequest): Request<TenancyUnit>;
            /** Delete a tenancy unit. Before you delete the tenancy unit, there should be no tenant resources in it that aren't in a DELETED state. Operation. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Deletes the specified project resource identified by a tenant resource tag. The mothod removes a project lien with a 'TenantManager' origin if that was added. It will then attempt
             * to delete the project. If that operation fails, this method also fails. After the project has been deleted, the tenant resource state is set to DELETED. To permanently remove
             * resource metadata, call the `RemoveTenantProject` method. New resources with the same tag can't be added if there are existing resources in a DELETED state. Operation.
             */
            deleteProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeleteTenantProjectRequest;
            }): Request<Operation>;
            deleteProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeleteTenantProjectRequest): Request<Operation>;
            /**
             * Find the tenancy unit for a managed service and service consumer. This method shouldn't be used in a service producer's runtime path, for example to find the tenant project number
             * when creating VMs. Service producers must persist the tenant project's information after the project is created.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Optional. Filter expression over tenancy resources field. Optional. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. The maximum number of results returned by this request. */
                pageSize?: number;
                /**
                 * Optional. The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the
                 * previous response.
                 */
                pageToken?: string;
                /**
                 * Required. Managed service and service consumer. Required. services/{service}/{collection id}/{resource id} {collection id} is the cloud resource collection type representing the
                 * service consumer, for example 'projects', or 'organizations'. {resource id} is the consumer numeric id, such as project number: '123456'. {service} the name of a service, such
                 * as 'service.googleapis.com'.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListTenancyUnitsResponse>;
            /**
             * Removes the specified project resource identified by a tenant resource tag. The method removes the project lien with 'TenantManager' origin if that was added. It then attempts to
             * delete the project. If that operation fails, this method also fails. Calls to remove already removed or non-existent tenant project succeed. After the project has been deleted, or
             * if was already in a DELETED state, resource metadata is permanently removed from the tenancy unit. Operation.
             */
            removeProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RemoveTenantProjectRequest;
            }): Request<Operation>;
            removeProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RemoveTenantProjectRequest): Request<Operation>;
            /**
             * Attempts to undelete a previously deleted tenant project. The project must be in a DELETED state. There are no guarantees that an undeleted project will be in a fully restored and
             * functional state. Call the `ApplyTenantProjectConfig` method to update its configuration and then validate all managed service resources. Operation.
             */
            undeleteProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UndeleteTenantProjectRequest;
            }): Request<Operation>;
            undeleteProject(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UndeleteTenantProjectRequest): Request<Operation>;
        }
        interface ServicesResource {
            /** Search tenancy units for a managed service. */
            search(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The maximum number of results returned by this request. Currently, the default maximum is set to 1000. If `page_size` isn't provided or the size provided is a number
                 * larger than 1000, it's automatically set to 1000.
                 */
                pageSize?: number;
                /**
                 * Optional. The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the
                 * previous response.
                 */
                pageToken?: string;
                /** Required. Service for which search is performed. services/{service} {service} the name of a service, for example 'service.googleapis.com'. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * Optional. Set a query `{expression}` for querying tenancy units. Your `{expression}` must be in the format: `field_name=literal_string`. The `field_name` is the name of the
                 * field you want to compare. Supported fields are `tenant_resources.tag` and `tenant_resources.resource`. For example, to search tenancy units that contain at least one tenant
                 * resource with a given tag 'xyz', use the query `tenant_resources.tag=xyz`. To search tenancy units that contain at least one tenant resource with a given resource name
                 * 'projects/123456', use the query `tenant_resources.resource=projects/123456`. Multiple expressions can be joined with `AND`s. Tenancy units must match all expressions to be
                 * included in the result set. For example, `tenant_resources.tag=xyz AND tenant_resources.resource=projects/123456`
                 */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SearchTenancyUnitsResponse>;
            tenancyUnits: TenancyUnitsResource;
        }

        const operations: OperationsResource;

        const services: ServicesResource;
    }
}
