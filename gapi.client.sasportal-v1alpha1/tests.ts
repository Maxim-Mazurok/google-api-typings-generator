/* This is stub file for gapi.client.sasportal-v1alpha1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240520

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://sasportal.googleapis.com/$discovery/rest?version=v1alpha1'
  );
  /** now we can use gapi.client.sasportal */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** Read, create, update, and delete your SAS Portal data. */
    'https://www.googleapis.com/auth/sasportal',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Returns a requested customer. */
    await gapi.client.sasportal.customers.get({
      name: 'Test string',
    });
    /** Returns a list of requested customers. */
    await gapi.client.sasportal.customers.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Returns a list of SAS deployments associated with current GCP project. Includes whether SAS analytics has been enabled or not. */
    await gapi.client.sasportal.customers.listGcpProjectDeployments({});
    /** Returns a list of legacy organizations. */
    await gapi.client.sasportal.customers.listLegacyOrganizations({});
    /** Migrates a SAS organization to the cloud. This will create GCP projects for each deployment and associate them. The SAS Organization is linked to the gcp project that called the command. go/sas-legacy-customer-migration */
    await gapi.client.sasportal.customers.migrateOrganization(
      {},
      {
        organizationId: 'Test string',
      }
    );
    /** Updates an existing customer. */
    await gapi.client.sasportal.customers.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Creates a new SAS deployment through the GCP workflow. Creates a SAS organization if an organization match is not found. */
    await gapi.client.sasportal.customers.provisionDeployment(
      {},
      {
        newDeploymentDisplayName: 'Test string',
        newOrganizationDisplayName: 'Test string',
        organizationId: 'Test string',
      }
    );
    /** Setups the a GCP Project to receive SAS Analytics messages via GCP Pub/Sub with a subscription to BigQuery. All the Pub/Sub topics and BigQuery tables are created automatically as part of this service. */
    await gapi.client.sasportal.customers.setupSasAnalytics(
      {},
      {
        userId: 'Test string',
      }
    );
    /** Creates a new deployment. */
    await gapi.client.sasportal.customers.deployments.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        frns: ['Test string'],
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Deletes a deployment. */
    await gapi.client.sasportal.customers.deployments.delete({
      name: 'Test string',
    });
    /** Returns a requested deployment. */
    await gapi.client.sasportal.customers.deployments.get({
      name: 'Test string',
    });
    /** Lists deployments. */
    await gapi.client.sasportal.customers.deployments.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves a deployment under another node or customer. */
    await gapi.client.sasportal.customers.deployments.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates an existing deployment. */
    await gapi.client.sasportal.customers.deployments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        frns: ['Test string'],
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Creates a device under a node or customer. */
    await gapi.client.sasportal.customers.deployments.devices.create(
      {
        parent: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a signed device under a node or customer. */
    await gapi.client.sasportal.customers.deployments.devices.createSigned(
      {
        parent: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Lists devices under a node or customer. */
    await gapi.client.sasportal.customers.deployments.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a device under a node or customer. */
    await gapi.client.sasportal.customers.devices.create(
      {
        parent: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a signed device under a node or customer. */
    await gapi.client.sasportal.customers.devices.createSigned(
      {
        parent: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Deletes a device. */
    await gapi.client.sasportal.customers.devices.delete({
      name: 'Test string',
    });
    /** Gets details about a device. */
    await gapi.client.sasportal.customers.devices.get({
      name: 'Test string',
    });
    /** Lists devices under a node or customer. */
    await gapi.client.sasportal.customers.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves a device under another node or customer. */
    await gapi.client.sasportal.customers.devices.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates a device. */
    await gapi.client.sasportal.customers.devices.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Signs a device. */
    await gapi.client.sasportal.customers.devices.signDevice(
      {
        name: 'Test string',
      },
      {
        device: {
          activeConfig: {
            airInterface: {
              radioTechnology: 'Test string',
              supportedSpec: 'Test string',
            },
            callSign: 'Test string',
            category: 'Test string',
            installationParams: {
              antennaAzimuth: 42,
              antennaBeamwidth: 42,
              antennaDowntilt: 42,
              antennaGain: 42,
              antennaModel: 'Test string',
              cpeCbsdIndication: true,
              eirpCapability: 42,
              height: 42,
              heightType: 'Test string',
              horizontalAccuracy: 42,
              indoorDeployment: true,
              latitude: 42,
              longitude: 42,
              verticalAccuracy: 42,
            },
            isSigned: true,
            measurementCapabilities: ['Test string'],
            model: {
              firmwareVersion: 'Test string',
              hardwareVersion: 'Test string',
              name: 'Test string',
              softwareVersion: 'Test string',
              vendor: 'Test string',
            },
            state: 'Test string',
            updateTime: 'Test string',
            userId: 'Test string',
          },
          currentChannels: [
            {
              frequencyRange: {
                highFrequencyMhz: 42,
                lowFrequencyMhz: 42,
              },
              score: 42,
            },
          ],
          deviceMetadata: {
            antennaModel: 'Test string',
            commonChannelGroup: 'Test string',
            interferenceCoordinationGroup: 'Test string',
            nrqzValidated: true,
            nrqzValidation: {
              caseId: 'Test string',
              cpiId: 'Test string',
              latitude: 42,
              longitude: 42,
              state: 'Test string',
            },
          },
          displayName: 'Test string',
          fccId: 'Test string',
          grantRangeAllowlists: [
            {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
          ],
          grants: [
            {
              channelType: 'Test string',
              expireTime: 'Test string',
              frequencyRange: {
                highFrequencyMhz: 42,
                lowFrequencyMhz: 42,
              },
              grantId: 'Test string',
              lastHeartbeatTransmitExpireTime: 'Test string',
              maxEirp: 42,
              moveList: [
                {
                  dpaId: 'Test string',
                  frequencyRange: {
                    highFrequencyMhz: 42,
                    lowFrequencyMhz: 42,
                  },
                },
              ],
              state: 'Test string',
              suspensionReason: ['Test string'],
            },
          ],
          name: 'Test string',
          preloadedConfig: {
            airInterface: {
              radioTechnology: 'Test string',
              supportedSpec: 'Test string',
            },
            callSign: 'Test string',
            category: 'Test string',
            installationParams: {
              antennaAzimuth: 42,
              antennaBeamwidth: 42,
              antennaDowntilt: 42,
              antennaGain: 42,
              antennaModel: 'Test string',
              cpeCbsdIndication: true,
              eirpCapability: 42,
              height: 42,
              heightType: 'Test string',
              horizontalAccuracy: 42,
              indoorDeployment: true,
              latitude: 42,
              longitude: 42,
              verticalAccuracy: 42,
            },
            isSigned: true,
            measurementCapabilities: ['Test string'],
            model: {
              firmwareVersion: 'Test string',
              hardwareVersion: 'Test string',
              name: 'Test string',
              softwareVersion: 'Test string',
              vendor: 'Test string',
            },
            state: 'Test string',
            updateTime: 'Test string',
            userId: 'Test string',
          },
          serialNumber: 'Test string',
          state: 'Test string',
        },
      }
    );
    /** Updates a signed device. */
    await gapi.client.sasportal.customers.devices.updateSigned(
      {
        name: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Creates a new node. */
    await gapi.client.sasportal.customers.nodes.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Deletes a node. */
    await gapi.client.sasportal.customers.nodes.delete({
      name: 'Test string',
    });
    /** Returns a requested node. */
    await gapi.client.sasportal.customers.nodes.get({
      name: 'Test string',
    });
    /** Lists nodes. */
    await gapi.client.sasportal.customers.nodes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves a node under another node or customer. */
    await gapi.client.sasportal.customers.nodes.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates an existing node. */
    await gapi.client.sasportal.customers.nodes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Creates a new deployment. */
    await gapi.client.sasportal.customers.nodes.deployments.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        frns: ['Test string'],
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Lists deployments. */
    await gapi.client.sasportal.customers.nodes.deployments.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a device under a node or customer. */
    await gapi.client.sasportal.customers.nodes.devices.create(
      {
        parent: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a signed device under a node or customer. */
    await gapi.client.sasportal.customers.nodes.devices.createSigned(
      {
        parent: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Lists devices under a node or customer. */
    await gapi.client.sasportal.customers.nodes.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new node. */
    await gapi.client.sasportal.customers.nodes.nodes.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Lists nodes. */
    await gapi.client.sasportal.customers.nodes.nodes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Returns a requested deployment. */
    await gapi.client.sasportal.deployments.get({
      name: 'Test string',
    });
    /** Deletes a device. */
    await gapi.client.sasportal.deployments.devices.delete({
      name: 'Test string',
    });
    /** Gets details about a device. */
    await gapi.client.sasportal.deployments.devices.get({
      name: 'Test string',
    });
    /** Moves a device under another node or customer. */
    await gapi.client.sasportal.deployments.devices.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates a device. */
    await gapi.client.sasportal.deployments.devices.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Signs a device. */
    await gapi.client.sasportal.deployments.devices.signDevice(
      {
        name: 'Test string',
      },
      {
        device: {
          activeConfig: {
            airInterface: {
              radioTechnology: 'Test string',
              supportedSpec: 'Test string',
            },
            callSign: 'Test string',
            category: 'Test string',
            installationParams: {
              antennaAzimuth: 42,
              antennaBeamwidth: 42,
              antennaDowntilt: 42,
              antennaGain: 42,
              antennaModel: 'Test string',
              cpeCbsdIndication: true,
              eirpCapability: 42,
              height: 42,
              heightType: 'Test string',
              horizontalAccuracy: 42,
              indoorDeployment: true,
              latitude: 42,
              longitude: 42,
              verticalAccuracy: 42,
            },
            isSigned: true,
            measurementCapabilities: ['Test string'],
            model: {
              firmwareVersion: 'Test string',
              hardwareVersion: 'Test string',
              name: 'Test string',
              softwareVersion: 'Test string',
              vendor: 'Test string',
            },
            state: 'Test string',
            updateTime: 'Test string',
            userId: 'Test string',
          },
          currentChannels: [
            {
              frequencyRange: {
                highFrequencyMhz: 42,
                lowFrequencyMhz: 42,
              },
              score: 42,
            },
          ],
          deviceMetadata: {
            antennaModel: 'Test string',
            commonChannelGroup: 'Test string',
            interferenceCoordinationGroup: 'Test string',
            nrqzValidated: true,
            nrqzValidation: {
              caseId: 'Test string',
              cpiId: 'Test string',
              latitude: 42,
              longitude: 42,
              state: 'Test string',
            },
          },
          displayName: 'Test string',
          fccId: 'Test string',
          grantRangeAllowlists: [
            {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
          ],
          grants: [
            {
              channelType: 'Test string',
              expireTime: 'Test string',
              frequencyRange: {
                highFrequencyMhz: 42,
                lowFrequencyMhz: 42,
              },
              grantId: 'Test string',
              lastHeartbeatTransmitExpireTime: 'Test string',
              maxEirp: 42,
              moveList: [
                {
                  dpaId: 'Test string',
                  frequencyRange: {
                    highFrequencyMhz: 42,
                    lowFrequencyMhz: 42,
                  },
                },
              ],
              state: 'Test string',
              suspensionReason: ['Test string'],
            },
          ],
          name: 'Test string',
          preloadedConfig: {
            airInterface: {
              radioTechnology: 'Test string',
              supportedSpec: 'Test string',
            },
            callSign: 'Test string',
            category: 'Test string',
            installationParams: {
              antennaAzimuth: 42,
              antennaBeamwidth: 42,
              antennaDowntilt: 42,
              antennaGain: 42,
              antennaModel: 'Test string',
              cpeCbsdIndication: true,
              eirpCapability: 42,
              height: 42,
              heightType: 'Test string',
              horizontalAccuracy: 42,
              indoorDeployment: true,
              latitude: 42,
              longitude: 42,
              verticalAccuracy: 42,
            },
            isSigned: true,
            measurementCapabilities: ['Test string'],
            model: {
              firmwareVersion: 'Test string',
              hardwareVersion: 'Test string',
              name: 'Test string',
              softwareVersion: 'Test string',
              vendor: 'Test string',
            },
            state: 'Test string',
            updateTime: 'Test string',
            userId: 'Test string',
          },
          serialNumber: 'Test string',
          state: 'Test string',
        },
      }
    );
    /** Updates a signed device. */
    await gapi.client.sasportal.deployments.devices.updateSigned(
      {
        name: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Generates a secret to be used with the ValidateInstaller. */
    await gapi.client.sasportal.installer.generateSecret({}, {});
    /** Validates the identity of a Certified Professional Installer (CPI). */
    await gapi.client.sasportal.installer.validate(
      {},
      {
        encodedSecret: 'Test string',
        installerId: 'Test string',
        secret: 'Test string',
      }
    );
    /** Returns a requested node. */
    await gapi.client.sasportal.nodes.get({
      name: 'Test string',
    });
    /** Deletes a deployment. */
    await gapi.client.sasportal.nodes.deployments.delete({
      name: 'Test string',
    });
    /** Returns a requested deployment. */
    await gapi.client.sasportal.nodes.deployments.get({
      name: 'Test string',
    });
    /** Lists deployments. */
    await gapi.client.sasportal.nodes.deployments.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves a deployment under another node or customer. */
    await gapi.client.sasportal.nodes.deployments.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates an existing deployment. */
    await gapi.client.sasportal.nodes.deployments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        frns: ['Test string'],
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Creates a device under a node or customer. */
    await gapi.client.sasportal.nodes.deployments.devices.create(
      {
        parent: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a signed device under a node or customer. */
    await gapi.client.sasportal.nodes.deployments.devices.createSigned(
      {
        parent: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Lists devices under a node or customer. */
    await gapi.client.sasportal.nodes.deployments.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a device under a node or customer. */
    await gapi.client.sasportal.nodes.devices.create(
      {
        parent: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a signed device under a node or customer. */
    await gapi.client.sasportal.nodes.devices.createSigned(
      {
        parent: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Deletes a device. */
    await gapi.client.sasportal.nodes.devices.delete({
      name: 'Test string',
    });
    /** Gets details about a device. */
    await gapi.client.sasportal.nodes.devices.get({
      name: 'Test string',
    });
    /** Lists devices under a node or customer. */
    await gapi.client.sasportal.nodes.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves a device under another node or customer. */
    await gapi.client.sasportal.nodes.devices.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates a device. */
    await gapi.client.sasportal.nodes.devices.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Signs a device. */
    await gapi.client.sasportal.nodes.devices.signDevice(
      {
        name: 'Test string',
      },
      {
        device: {
          activeConfig: {
            airInterface: {
              radioTechnology: 'Test string',
              supportedSpec: 'Test string',
            },
            callSign: 'Test string',
            category: 'Test string',
            installationParams: {
              antennaAzimuth: 42,
              antennaBeamwidth: 42,
              antennaDowntilt: 42,
              antennaGain: 42,
              antennaModel: 'Test string',
              cpeCbsdIndication: true,
              eirpCapability: 42,
              height: 42,
              heightType: 'Test string',
              horizontalAccuracy: 42,
              indoorDeployment: true,
              latitude: 42,
              longitude: 42,
              verticalAccuracy: 42,
            },
            isSigned: true,
            measurementCapabilities: ['Test string'],
            model: {
              firmwareVersion: 'Test string',
              hardwareVersion: 'Test string',
              name: 'Test string',
              softwareVersion: 'Test string',
              vendor: 'Test string',
            },
            state: 'Test string',
            updateTime: 'Test string',
            userId: 'Test string',
          },
          currentChannels: [
            {
              frequencyRange: {
                highFrequencyMhz: 42,
                lowFrequencyMhz: 42,
              },
              score: 42,
            },
          ],
          deviceMetadata: {
            antennaModel: 'Test string',
            commonChannelGroup: 'Test string',
            interferenceCoordinationGroup: 'Test string',
            nrqzValidated: true,
            nrqzValidation: {
              caseId: 'Test string',
              cpiId: 'Test string',
              latitude: 42,
              longitude: 42,
              state: 'Test string',
            },
          },
          displayName: 'Test string',
          fccId: 'Test string',
          grantRangeAllowlists: [
            {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
          ],
          grants: [
            {
              channelType: 'Test string',
              expireTime: 'Test string',
              frequencyRange: {
                highFrequencyMhz: 42,
                lowFrequencyMhz: 42,
              },
              grantId: 'Test string',
              lastHeartbeatTransmitExpireTime: 'Test string',
              maxEirp: 42,
              moveList: [
                {
                  dpaId: 'Test string',
                  frequencyRange: {
                    highFrequencyMhz: 42,
                    lowFrequencyMhz: 42,
                  },
                },
              ],
              state: 'Test string',
              suspensionReason: ['Test string'],
            },
          ],
          name: 'Test string',
          preloadedConfig: {
            airInterface: {
              radioTechnology: 'Test string',
              supportedSpec: 'Test string',
            },
            callSign: 'Test string',
            category: 'Test string',
            installationParams: {
              antennaAzimuth: 42,
              antennaBeamwidth: 42,
              antennaDowntilt: 42,
              antennaGain: 42,
              antennaModel: 'Test string',
              cpeCbsdIndication: true,
              eirpCapability: 42,
              height: 42,
              heightType: 'Test string',
              horizontalAccuracy: 42,
              indoorDeployment: true,
              latitude: 42,
              longitude: 42,
              verticalAccuracy: 42,
            },
            isSigned: true,
            measurementCapabilities: ['Test string'],
            model: {
              firmwareVersion: 'Test string',
              hardwareVersion: 'Test string',
              name: 'Test string',
              softwareVersion: 'Test string',
              vendor: 'Test string',
            },
            state: 'Test string',
            updateTime: 'Test string',
            userId: 'Test string',
          },
          serialNumber: 'Test string',
          state: 'Test string',
        },
      }
    );
    /** Updates a signed device. */
    await gapi.client.sasportal.nodes.devices.updateSigned(
      {
        name: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Creates a new node. */
    await gapi.client.sasportal.nodes.nodes.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Deletes a node. */
    await gapi.client.sasportal.nodes.nodes.delete({
      name: 'Test string',
    });
    /** Returns a requested node. */
    await gapi.client.sasportal.nodes.nodes.get({
      name: 'Test string',
    });
    /** Lists nodes. */
    await gapi.client.sasportal.nodes.nodes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves a node under another node or customer. */
    await gapi.client.sasportal.nodes.nodes.move(
      {
        name: 'Test string',
      },
      {
        destination: 'Test string',
      }
    );
    /** Updates an existing node. */
    await gapi.client.sasportal.nodes.nodes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Creates a new deployment. */
    await gapi.client.sasportal.nodes.nodes.deployments.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        frns: ['Test string'],
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Lists deployments. */
    await gapi.client.sasportal.nodes.nodes.deployments.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a device under a node or customer. */
    await gapi.client.sasportal.nodes.nodes.devices.create(
      {
        parent: 'Test string',
      },
      {
        activeConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        currentChannels: [
          {
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            score: 42,
          },
        ],
        deviceMetadata: {
          antennaModel: 'Test string',
          commonChannelGroup: 'Test string',
          interferenceCoordinationGroup: 'Test string',
          nrqzValidated: true,
          nrqzValidation: {
            caseId: 'Test string',
            cpiId: 'Test string',
            latitude: 42,
            longitude: 42,
            state: 'Test string',
          },
        },
        displayName: 'Test string',
        fccId: 'Test string',
        grantRangeAllowlists: [
          {
            highFrequencyMhz: 42,
            lowFrequencyMhz: 42,
          },
        ],
        grants: [
          {
            channelType: 'Test string',
            expireTime: 'Test string',
            frequencyRange: {
              highFrequencyMhz: 42,
              lowFrequencyMhz: 42,
            },
            grantId: 'Test string',
            lastHeartbeatTransmitExpireTime: 'Test string',
            maxEirp: 42,
            moveList: [
              {
                dpaId: 'Test string',
                frequencyRange: {
                  highFrequencyMhz: 42,
                  lowFrequencyMhz: 42,
                },
              },
            ],
            state: 'Test string',
            suspensionReason: ['Test string'],
          },
        ],
        name: 'Test string',
        preloadedConfig: {
          airInterface: {
            radioTechnology: 'Test string',
            supportedSpec: 'Test string',
          },
          callSign: 'Test string',
          category: 'Test string',
          installationParams: {
            antennaAzimuth: 42,
            antennaBeamwidth: 42,
            antennaDowntilt: 42,
            antennaGain: 42,
            antennaModel: 'Test string',
            cpeCbsdIndication: true,
            eirpCapability: 42,
            height: 42,
            heightType: 'Test string',
            horizontalAccuracy: 42,
            indoorDeployment: true,
            latitude: 42,
            longitude: 42,
            verticalAccuracy: 42,
          },
          isSigned: true,
          measurementCapabilities: ['Test string'],
          model: {
            firmwareVersion: 'Test string',
            hardwareVersion: 'Test string',
            name: 'Test string',
            softwareVersion: 'Test string',
            vendor: 'Test string',
          },
          state: 'Test string',
          updateTime: 'Test string',
          userId: 'Test string',
        },
        serialNumber: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a signed device under a node or customer. */
    await gapi.client.sasportal.nodes.nodes.devices.createSigned(
      {
        parent: 'Test string',
      },
      {
        encodedDevice: 'Test string',
        installerId: 'Test string',
      }
    );
    /** Lists devices under a node or customer. */
    await gapi.client.sasportal.nodes.nodes.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new node. */
    await gapi.client.sasportal.nodes.nodes.nodes.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        sasUserIds: ['Test string'],
      }
    );
    /** Lists nodes. */
    await gapi.client.sasportal.nodes.nodes.nodes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.sasportal.policies.get(
      {},
      {
        resource: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. */
    await gapi.client.sasportal.policies.set(
      {},
      {
        disableNotification: true,
        policy: {
          assignments: [
            {
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
        },
        resource: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. */
    await gapi.client.sasportal.policies.test(
      {},
      {
        permissions: ['Test string'],
        resource: 'Test string',
      }
    );
  }
});
