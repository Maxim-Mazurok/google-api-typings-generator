/* This is stub file for gapi.client.monitoring definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('monitoring', 'v3', () => {
        /** now we can use gapi.client.monitoring */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View and write monitoring data for all of your Google and third-party Cloud and API projects */
            'https://www.googleapis.com/auth/monitoring',
            /** View monitoring data for all of your Google Cloud and third-party projects */
            'https://www.googleapis.com/auth/monitoring.read',
            /** Publish metric data to your Google Cloud projects */
            'https://www.googleapis.com/auth/monitoring.write',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Create a Service. */
        await gapi.client.monitoring.services.create({
            parent: "Test string",
            serviceId: "Test string",
        }, {
            appEngine: {
                moduleId: "Test string",
            },
            cloudEndpoints: {
                service: "Test string",
            },
            clusterIstio: {
                clusterName: "Test string",
                location: "Test string",
                serviceName: "Test string",
                serviceNamespace: "Test string",
            },
            custom: {
            },
            displayName: "Test string",
            meshIstio: {
                meshUid: "Test string",
                serviceName: "Test string",
                serviceNamespace: "Test string",
            },
            name: "Test string",
            telemetry: {
                resourceName: "Test string",
            },
        });
        /** Create a ServiceLevelObjective for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.create({
            parent: "Test string",
            serviceLevelObjectiveId: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Delete the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.delete({
            name: "Test string",
        });
        /** Get a ServiceLevelObjective by name. */
        await gapi.client.monitoring.services.serviceLevelObjectives.get({
            name: "Test string",
            view: "Test string",
        });
        /** List the ServiceLevelObjectives for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Update the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Soft delete this Service. */
        await gapi.client.monitoring.services.delete({
            name: "Test string",
        });
        /** Create a ServiceLevelObjective for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.create({
            parent: "Test string",
            serviceLevelObjectiveId: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Delete the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.delete({
            name: "Test string",
        });
        /** Get a ServiceLevelObjective by name. */
        await gapi.client.monitoring.services.serviceLevelObjectives.get({
            name: "Test string",
            view: "Test string",
        });
        /** List the ServiceLevelObjectives for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Update the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Get the named Service. */
        await gapi.client.monitoring.services.get({
            name: "Test string",
        });
        /** Create a ServiceLevelObjective for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.create({
            parent: "Test string",
            serviceLevelObjectiveId: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Delete the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.delete({
            name: "Test string",
        });
        /** Get a ServiceLevelObjective by name. */
        await gapi.client.monitoring.services.serviceLevelObjectives.get({
            name: "Test string",
            view: "Test string",
        });
        /** List the ServiceLevelObjectives for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Update the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** List Services for this workspace. */
        await gapi.client.monitoring.services.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Create a ServiceLevelObjective for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.create({
            parent: "Test string",
            serviceLevelObjectiveId: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Delete the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.delete({
            name: "Test string",
        });
        /** Get a ServiceLevelObjective by name. */
        await gapi.client.monitoring.services.serviceLevelObjectives.get({
            name: "Test string",
            view: "Test string",
        });
        /** List the ServiceLevelObjectives for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Update the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Update this Service. */
        await gapi.client.monitoring.services.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appEngine: {
                moduleId: "Test string",
            },
            cloudEndpoints: {
                service: "Test string",
            },
            clusterIstio: {
                clusterName: "Test string",
                location: "Test string",
                serviceName: "Test string",
                serviceNamespace: "Test string",
            },
            custom: {
            },
            displayName: "Test string",
            meshIstio: {
                meshUid: "Test string",
                serviceName: "Test string",
                serviceNamespace: "Test string",
            },
            name: "Test string",
            telemetry: {
                resourceName: "Test string",
            },
        });
        /** Create a ServiceLevelObjective for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.create({
            parent: "Test string",
            serviceLevelObjectiveId: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Delete the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.delete({
            name: "Test string",
        });
        /** Get a ServiceLevelObjective by name. */
        await gapi.client.monitoring.services.serviceLevelObjectives.get({
            name: "Test string",
            view: "Test string",
        });
        /** List the ServiceLevelObjectives for the given Service. */
        await gapi.client.monitoring.services.serviceLevelObjectives.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Update the given ServiceLevelObjective. */
        await gapi.client.monitoring.services.serviceLevelObjectives.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            calendarPeriod: "Test string",
            displayName: "Test string",
            goal: 42,
            name: "Test string",
            rollingPeriod: "Test string",
            serviceLevelIndicator: {
                basicSli: {
                    availability: {
                    },
                    latency: {
                        threshold: "Test string",
                    },
                    location: [
                        "Test string"                    ],
                    method: [
                        "Test string"                    ],
                    version: [
                        "Test string"                    ],
                },
                requestBased: {
                    distributionCut: {
                        distributionFilter: "Test string",
                        range: {
                            max: 42,
                            min: 42,
                        },
                    },
                    goodTotalRatio: {
                        badServiceFilter: "Test string",
                        goodServiceFilter: "Test string",
                        totalServiceFilter: "Test string",
                    },
                },
                windowsBased: {
                    goodBadMetricFilter: "Test string",
                    goodTotalRatioThreshold: {
                        basicSliPerformance: {
                            availability: {
                            },
                            latency: {
                                threshold: "Test string",
                            },
                            location: [
                                "Test string"                            ],
                            method: [
                                "Test string"                            ],
                            version: [
                                "Test string"                            ],
                        },
                        performance: {
                            distributionCut: {
                                distributionFilter: "Test string",
                                range: {
                                    max: 42,
                                    min: 42,
                                },
                            },
                            goodTotalRatio: {
                                badServiceFilter: "Test string",
                                goodServiceFilter: "Test string",
                                totalServiceFilter: "Test string",
                            },
                        },
                        threshold: 42,
                    },
                    metricMeanInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    metricSumInRange: {
                        range: {
                            max: 42,
                            min: 42,
                        },
                        timeSeries: "Test string",
                    },
                    windowPeriod: "Test string",
                },
            },
        });
        /** Returns the list of IP addresses that checkers run from */
        await gapi.client.monitoring.uptimeCheckIps.list({
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
