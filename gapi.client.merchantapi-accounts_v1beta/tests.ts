/* This is stub file for gapi.client.merchantapi-accounts_v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241020

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://merchantapi.googleapis.com/$discovery/rest?version=accounts_v1beta'
  );
  /** now we can use gapi.client.merchantapi */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your product listings and accounts for Google Shopping */
    'https://www.googleapis.com/auth/content',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a standalone Merchant Center account with additional configuration. Adds the user that makes the request as an admin for the new account. */
    await gapi.client.merchantapi.accounts.createAndConfigure(
      {},
      {
        account: {
          accountId: 'Test string',
          accountName: 'Test string',
          adultContent: true,
          languageCode: 'Test string',
          name: 'Test string',
          testAccount: true,
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
        },
        service: [
          {
            accountAggregation: {},
            provider: 'Test string',
          },
        ],
        users: [
          {
            parent: 'Test string',
            user: {
              accessRights: ['Test string'],
              name: 'Test string',
              state: 'Test string',
            },
            userId: 'Test string',
          },
        ],
      }
    );
    /** Deletes the specified account regardless of its type: standalone, MCA or sub-account. Deleting an MCA leads to the deletion of all of its sub-accounts. Executing this method requires admin access. The deletion succeeds only if the account does not provide services to any other account and has no processed offers. You can use the `force` parameter to override this. */
    await gapi.client.merchantapi.accounts.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves an account from your Merchant Center account. After inserting, updating, or deleting an account, it may take several minutes before changes take effect. */
    await gapi.client.merchantapi.accounts.get({
      name: 'Test string',
    });
    /** Lists accounts accessible to the calling user and matching the constraints of the request such as page size or filters. This is not just listing the sub-accounts of an MCA, but all accounts the calling user has access to including other MCAs, linked accounts, standalone accounts and so on. If no filter is provided, then it returns accounts the user is directly added to. */
    await gapi.client.merchantapi.accounts.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** List all sub-accounts for a given multi client account. This is a convenience wrapper for the more powerful `ListAccounts` method. This method will produce the same results as calling `ListsAccounts` with the following filter: `relationship(providerId={parent} AND service(type="ACCOUNT_AGGREGATION"))` */
    await gapi.client.merchantapi.accounts.listSubaccounts({
      pageSize: 42,
      pageToken: 'Test string',
      provider: 'Test string',
    });
    /** Updates an account regardless of its type: standalone, MCA or sub-account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accountId: 'Test string',
        accountName: 'Test string',
        adultContent: true,
        languageCode: 'Test string',
        name: 'Test string',
        testAccount: true,
        timeZone: {
          id: 'Test string',
          version: 'Test string',
        },
      }
    );
    /** Retrieves the autofeed settings of an account. */
    await gapi.client.merchantapi.accounts.autofeedSettings.getAutofeedSettings(
      {
        name: 'Test string',
      }
    );
    /** Updates the autofeed settings of an account. */
    await gapi.client.merchantapi.accounts.autofeedSettings.updateAutofeedSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        eligible: true,
        enableProducts: true,
        name: 'Test string',
      }
    );
    /** Retrieves the business identity of an account. */
    await gapi.client.merchantapi.accounts.businessIdentity.getBusinessIdentity(
      {
        name: 'Test string',
      }
    );
    /** Updates the business identity of an account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.businessIdentity.updateBusinessIdentity(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        blackOwned: {
          identityDeclaration: 'Test string',
        },
        latinoOwned: {
          identityDeclaration: 'Test string',
        },
        name: 'Test string',
        promotionsConsent: 'Test string',
        smallBusiness: {
          identityDeclaration: 'Test string',
        },
        veteranOwned: {
          identityDeclaration: 'Test string',
        },
        womenOwned: {
          identityDeclaration: 'Test string',
        },
      }
    );
    /** Retrieves the business info of an account. */
    await gapi.client.merchantapi.accounts.businessInfo.getBusinessInfo({
      name: 'Test string',
    });
    /** Updates the business info of an account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.businessInfo.updateBusinessInfo(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        address: {
          addressLines: ['Test string'],
          administrativeArea: 'Test string',
          languageCode: 'Test string',
          locality: 'Test string',
          organization: 'Test string',
          postalCode: 'Test string',
          recipients: ['Test string'],
          regionCode: 'Test string',
          revision: 42,
          sortingCode: 'Test string',
          sublocality: 'Test string',
        },
        customerService: {
          email: 'Test string',
          phone: {
            e164Number: 'Test string',
            extension: 'Test string',
            shortCode: {
              number: 'Test string',
              regionCode: 'Test string',
            },
          },
          uri: 'Test string',
        },
        koreanBusinessRegistrationNumber: 'Test string',
        name: 'Test string',
        phone: {
          e164Number: 'Test string',
          extension: 'Test string',
          shortCode: {
            number: 'Test string',
            regionCode: 'Test string',
          },
        },
        phoneVerificationState: 'Test string',
      }
    );
    /** Returns the email preferences for a Merchant Center account user. This service only permits retrieving and updating email preferences for the authenticated user. Use the name=accounts/*‍/users/me/emailPreferences alias to get preferences for the authenticated user. */
    await gapi.client.merchantapi.accounts.emailPreferences.getEmailPreferences(
      {
        name: 'Test string',
      }
    );
    /** Updates the email preferences for a Merchant Center account user. MCA users should specify the MCA account rather than a sub-account of the MCA. Preferences which are not explicitly selected in the update mask will not be updated. It is invalid for updates to specify an UNCONFIRMED opt-in status value. Use the name=accounts/*‍/users/me/emailPreferences alias to update preferences for the authenticated user. */
    await gapi.client.merchantapi.accounts.emailPreferences.updateEmailPreferences(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        name: 'Test string',
        newsAndTips: 'Test string',
      }
    );
    /** Claims a store's homepage. Executing this method requires admin access. If the homepage is already claimed, this will recheck the verification (unless the merchant is exempted from claiming, which also exempts from verification) and return a successful response. If ownership can no longer be verified, it will return an error, but it won't clear the claim. In case of failure, a canonical error message will be returned: * PERMISSION_DENIED: user doesn't have the necessary permissions on this MC account; * FAILED_PRECONDITION: - The account is not a Merchant Center account; - MC account doesn't have a homepage; - claiming failed (in this case the error message will contain more details). */
    await gapi.client.merchantapi.accounts.homepage.claim(
      {
        name: 'Test string',
      },
      {
        overwrite: true,
      }
    );
    /** Retrieves a store's homepage. */
    await gapi.client.merchantapi.accounts.homepage.getHomepage({
      name: 'Test string',
    });
    /** Unclaims a store's homepage. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.homepage.unclaim(
      {
        name: 'Test string',
      },
      {}
    );
    /** Updates a store's homepage. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.homepage.updateHomepage(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        claimed: true,
        name: 'Test string',
        uri: 'Test string',
      }
    );
    /** Lists all account issues of a Merchant Center account. */
    await gapi.client.merchantapi.accounts.issues.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      timeZone: 'Test string',
    });
    /** Gets an existing return policy. */
    await gapi.client.merchantapi.accounts.onlineReturnPolicies.get({
      name: 'Test string',
    });
    /** Lists all existing return policies. */
    await gapi.client.merchantapi.accounts.onlineReturnPolicies.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Disable participation in the specified program for the account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.programs.disable(
      {
        name: 'Test string',
      },
      {}
    );
    /** Enable participation in the specified program for the account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.programs.enable(
      {
        name: 'Test string',
      },
      {}
    );
    /** Retrieves the specified program for the account. */
    await gapi.client.merchantapi.accounts.programs.get({
      name: 'Test string',
    });
    /** Retrieves all programs for the account. */
    await gapi.client.merchantapi.accounts.programs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a region definition in your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.create(
      {
        parent: 'Test string',
        regionId: 'Test string',
      },
      {
        displayName: 'Test string',
        geotargetArea: {
          geotargetCriteriaIds: ['Test string'],
        },
        name: 'Test string',
        postalCodeArea: {
          postalCodes: [
            {
              begin: 'Test string',
              end: 'Test string',
            },
          ],
          regionCode: 'Test string',
        },
        regionalInventoryEligible: true,
        shippingEligible: true,
      }
    );
    /** Deletes a region definition from your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.delete({
      name: 'Test string',
    });
    /** Retrieves a region defined in your Merchant Center account. */
    await gapi.client.merchantapi.accounts.regions.get({
      name: 'Test string',
    });
    /** Lists the regions in your Merchant Center account. */
    await gapi.client.merchantapi.accounts.regions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a region definition in your Merchant Center account. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.regions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        geotargetArea: {
          geotargetCriteriaIds: ['Test string'],
        },
        name: 'Test string',
        postalCodeArea: {
          postalCodes: [
            {
              begin: 'Test string',
              end: 'Test string',
            },
          ],
          regionCode: 'Test string',
        },
        regionalInventoryEligible: true,
        shippingEligible: true,
      }
    );
    /** Retrieve shipping setting information. */
    await gapi.client.merchantapi.accounts.shippingSettings.getShippingSettings(
      {
        name: 'Test string',
      }
    );
    /** Replace the shipping setting of a merchant with the request shipping setting. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.shippingSettings.insert(
      {
        parent: 'Test string',
      },
      {
        etag: 'Test string',
        name: 'Test string',
        services: [
          {
            active: true,
            currencyCode: 'Test string',
            deliveryCountries: ['Test string'],
            deliveryTime: {
              cutoffTime: {
                hour: 42,
                minute: 42,
                timeZone: 'Test string',
              },
              handlingBusinessDayConfig: {
                businessDays: ['Test string'],
              },
              maxHandlingDays: 42,
              maxTransitDays: 42,
              minHandlingDays: 42,
              minTransitDays: 42,
              transitBusinessDayConfig: {
                businessDays: ['Test string'],
              },
              transitTimeTable: {
                postalCodeGroupNames: ['Test string'],
                rows: [
                  {
                    values: [
                      {
                        maxTransitDays: 42,
                        minTransitDays: 42,
                      },
                    ],
                  },
                ],
                transitTimeLabels: ['Test string'],
              },
              warehouseBasedDeliveryTimes: [
                {
                  carrier: 'Test string',
                  carrierService: 'Test string',
                  warehouse: 'Test string',
                },
              ],
            },
            loyaltyPrograms: [
              {
                loyaltyProgramTiers: [
                  {
                    tierLabel: 'Test string',
                  },
                ],
                programLabel: 'Test string',
              },
            ],
            minimumOrderValue: {
              amountMicros: 'Test string',
              currencyCode: 'Test string',
            },
            minimumOrderValueTable: {
              storeCodeSetWithMovs: [
                {
                  storeCodes: ['Test string'],
                  value: {
                    amountMicros: 'Test string',
                    currencyCode: 'Test string',
                  },
                },
              ],
            },
            rateGroups: [
              {
                applicableShippingLabels: ['Test string'],
                carrierRates: [
                  {
                    carrier: 'Test string',
                    carrierService: 'Test string',
                    flatAdjustment: {
                      amountMicros: 'Test string',
                      currencyCode: 'Test string',
                    },
                    name: 'Test string',
                    originPostalCode: 'Test string',
                    percentageAdjustment: 'Test string',
                  },
                ],
                mainTable: {
                  columnHeaders: {
                    locations: [
                      {
                        locationIds: ['Test string'],
                      },
                    ],
                    numberOfItems: ['Test string'],
                    postalCodeGroupNames: ['Test string'],
                    prices: [
                      {
                        amountMicros: 'Test string',
                        currencyCode: 'Test string',
                      },
                    ],
                    weights: [
                      {
                        amountMicros: 'Test string',
                        unit: 'Test string',
                      },
                    ],
                  },
                  name: 'Test string',
                  rowHeaders: {
                    locations: [
                      {
                        locationIds: ['Test string'],
                      },
                    ],
                    numberOfItems: ['Test string'],
                    postalCodeGroupNames: ['Test string'],
                    prices: [
                      {
                        amountMicros: 'Test string',
                        currencyCode: 'Test string',
                      },
                    ],
                    weights: [
                      {
                        amountMicros: 'Test string',
                        unit: 'Test string',
                      },
                    ],
                  },
                  rows: [
                    {
                      cells: [
                        {
                          carrierRate: 'Test string',
                          flatRate: {
                            amountMicros: 'Test string',
                            currencyCode: 'Test string',
                          },
                          noShipping: true,
                          pricePercentage: 'Test string',
                          subtable: 'Test string',
                        },
                      ],
                    },
                  ],
                },
                name: 'Test string',
                singleValue: {
                  carrierRate: 'Test string',
                  flatRate: {
                    amountMicros: 'Test string',
                    currencyCode: 'Test string',
                  },
                  noShipping: true,
                  pricePercentage: 'Test string',
                  subtable: 'Test string',
                },
                subtables: [
                  {
                    columnHeaders: {
                      locations: [
                        {
                          locationIds: ['Test string'],
                        },
                      ],
                      numberOfItems: ['Test string'],
                      postalCodeGroupNames: ['Test string'],
                      prices: [
                        {
                          amountMicros: 'Test string',
                          currencyCode: 'Test string',
                        },
                      ],
                      weights: [
                        {
                          amountMicros: 'Test string',
                          unit: 'Test string',
                        },
                      ],
                    },
                    name: 'Test string',
                    rowHeaders: {
                      locations: [
                        {
                          locationIds: ['Test string'],
                        },
                      ],
                      numberOfItems: ['Test string'],
                      postalCodeGroupNames: ['Test string'],
                      prices: [
                        {
                          amountMicros: 'Test string',
                          currencyCode: 'Test string',
                        },
                      ],
                      weights: [
                        {
                          amountMicros: 'Test string',
                          unit: 'Test string',
                        },
                      ],
                    },
                    rows: [
                      {
                        cells: [
                          {
                            carrierRate: 'Test string',
                            flatRate: {
                              amountMicros: 'Test string',
                              currencyCode: 'Test string',
                            },
                            noShipping: true,
                            pricePercentage: 'Test string',
                            subtable: 'Test string',
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
            serviceName: 'Test string',
            shipmentType: 'Test string',
            storeConfig: {
              cutoffConfig: {
                localCutoffTime: {
                  hour: 'Test string',
                  minute: 'Test string',
                },
                noDeliveryPostCutoff: true,
                storeCloseOffsetHours: 'Test string',
              },
              serviceRadius: {
                unit: 'Test string',
                value: 'Test string',
              },
              storeCodes: ['Test string'],
              storeServiceType: 'Test string',
            },
          },
        ],
        warehouses: [
          {
            businessDayConfig: {
              businessDays: ['Test string'],
            },
            cutoffTime: {
              hour: 42,
              minute: 42,
            },
            handlingDays: 'Test string',
            name: 'Test string',
            shippingAddress: {
              administrativeArea: 'Test string',
              city: 'Test string',
              postalCode: 'Test string',
              regionCode: 'Test string',
              streetAddress: 'Test string',
            },
          },
        ],
      }
    );
    /** Returns the state of a terms of service agreement. */
    await gapi.client.merchantapi.accounts.termsOfServiceAgreementStates.get({
      name: 'Test string',
    });
    /** Retrieves the state of the agreement for the application terms of service. */
    await gapi.client.merchantapi.accounts.termsOfServiceAgreementStates.retrieveForApplication(
      {
        parent: 'Test string',
      }
    );
    /** Creates a Merchant Center account user. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.users.create(
      {
        parent: 'Test string',
        userId: 'Test string',
      },
      {
        accessRights: ['Test string'],
        name: 'Test string',
        state: 'Test string',
      }
    );
    /** Deletes a Merchant Center account user. Executing this method requires admin access. The user to be deleted can't be the last admin user of that account. Also a user is protected from deletion if it is managed by Business Manager" */
    await gapi.client.merchantapi.accounts.users.delete({
      name: 'Test string',
    });
    /** Retrieves a Merchant Center account user. */
    await gapi.client.merchantapi.accounts.users.get({
      name: 'Test string',
    });
    /** Lists all users of a Merchant Center account. */
    await gapi.client.merchantapi.accounts.users.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Merchant Center account user. Executing this method requires admin access. */
    await gapi.client.merchantapi.accounts.users.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accessRights: ['Test string'],
        name: 'Test string',
        state: 'Test string',
      }
    );
    /** Accepts a `TermsOfService`. Executing this method requires admin access. */
    await gapi.client.merchantapi.termsOfService.accept({
      account: 'Test string',
      name: 'Test string',
      regionCode: 'Test string',
    });
    /** Retrieves the `TermsOfService` associated with the provided version. */
    await gapi.client.merchantapi.termsOfService.get({
      name: 'Test string',
    });
    /** Retrieves the latest version of the `TermsOfService` for a given `kind` and `region_code`. */
    await gapi.client.merchantapi.termsOfService.retrieveLatest({
      kind: 'Test string',
      regionCode: 'Test string',
    });
  }
});
