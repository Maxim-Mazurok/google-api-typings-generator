/* Type definitions for non-npm package Chrome Policy API v1 1.0 */
// Project: http://developers.google.com/chrome/policy
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://chromepolicy.googleapis.com/$discovery/rest?version=v1
// Revision: 20220105

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Chrome Policy API v1 */
    function load(name: "chromepolicy", version: "v1"): PromiseLike<void>;
    function load(name: "chromepolicy", version: "v1", callback: () => any): void;

    namespace chromepolicy {
        interface ChromeCrosDpanelAutosettingsProtoPolicyApiLifecycle {
            /** Description about current life cycle. */
            description?: string;
            /** End supporting date for current policy. */
            endSupport?: GoogleTypeDate;
            /** Indicate current life cycle stage of the policy API. */
            policyApiLifecycleStage?: string;
        }
        interface GoogleChromePolicyV1AdditionalTargetKeyName {
            /** Key name. */
            key?: string;
            /** Key description. */
            keyDescription?: string;
        }
        interface GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest {
            /**
             * List of policies that have to inherit their values as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the
             * same root namespace. 2. All `policyTargetKey.targetResource` values must point to an org unit resource. 3. All `policyTargetKey` values must have the same key names in the `
             * additionalTargetKeys`. This also means if one of the targets has an empty `additionalTargetKeys` map, all of the targets must have an empty `additionalTargetKeys` map. 4. No two
             * modification requests can reference the same `policySchema` + ` policyTargetKey` pair.
             */
            requests?: GoogleChromePolicyV1InheritOrgUnitPolicyRequest[];
        }
        interface GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest {
            /**
             * List of policies to modify as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the same root namespace. 2.
             * All `policyTargetKey.targetResource` values must point to an org unit resource. 3. All `policyTargetKey` values must have the same key names in the ` additionalTargetKeys`. This
             * also means if one of the targets has an empty `additionalTargetKeys` map, all of the targets must have an empty `additionalTargetKeys` map. 4. No two modification requests can
             * reference the same `policySchema` + ` policyTargetKey` pair.
             */
            requests?: GoogleChromePolicyV1ModifyOrgUnitPolicyRequest[];
        }
        interface GoogleChromePolicyV1InheritOrgUnitPolicyRequest {
            /** The fully qualified name of the policy schema that is being inherited. */
            policySchema?: string;
            /** Required. The key of the target for which we want to modify a policy. The target resource must point to an Org Unit. */
            policyTargetKey?: GoogleChromePolicyV1PolicyTargetKey;
        }
        interface GoogleChromePolicyV1ListPolicySchemasResponse {
            /** The page token used to get the next page of policy schemas. */
            nextPageToken?: string;
            /** The list of policy schemas that match the query. */
            policySchemas?: GoogleChromePolicyV1PolicySchema[];
        }
        interface GoogleChromePolicyV1ModifyOrgUnitPolicyRequest {
            /** Required. The key of the target for which we want to modify a policy. The target resource must point to an Org Unit. */
            policyTargetKey?: GoogleChromePolicyV1PolicyTargetKey;
            /** The new value for the policy. */
            policyValue?: GoogleChromePolicyV1PolicyValue;
            /**
             * Required. Policy fields to update. Only fields in this mask will be updated; other fields in `policy_value` will be ignored (even if they have values). If a field is in this list it
             * must have a value in 'policy_value'.
             */
            updateMask?: string;
        }
        interface GoogleChromePolicyV1PolicySchema {
            /** Output only. Specific access restrictions related to this policy. */
            accessRestrictions?: string[];
            /**
             * Output only. Additional key names that will be used to identify the target of the policy value. When specifying a `policyTargetKey`, each of the additional keys specified here will
             * have to be included in the `additionalTargetKeys` map.
             */
            additionalTargetKeyNames?: GoogleChromePolicyV1AdditionalTargetKeyName[];
            /** Schema definition using proto descriptor. */
            definition?: Proto2FileDescriptorProto;
            /** Output only. Detailed description of each field that is part of the schema. */
            fieldDescriptions?: GoogleChromePolicyV1PolicySchemaFieldDescription[];
            /** Format: name=customers/{customer}/policySchemas/{schema_namespace} */
            name?: string;
            /** Output only. Special notice messages related to setting certain values in certain fields in the schema. */
            notices?: GoogleChromePolicyV1PolicySchemaNoticeDescription[];
            /** Output only. Current life cycle information. */
            policyApiLifeycle?: ChromeCrosDpanelAutosettingsProtoPolicyApiLifecycle;
            /** Output only. Description about the policy schema for user consumption. */
            policyDescription?: string;
            /**
             * Output only. The fully qualified name of the policy schema. This value is used to fill the field `policy_schema` in PolicyValue when calling BatchInheritOrgUnitPolicies or
             * BatchModifyOrgUnitPolicies
             */
            schemaName?: string;
            /** Output only. URI to related support article for this schema. */
            supportUri?: string;
            /** Output only. Information about applicable target resources for the policy. */
            validTargetResources?: string[];
        }
        interface GoogleChromePolicyV1PolicySchemaFieldDependencies {
            /** The source field which this field depends on. */
            sourceField?: string;
            /** The value which the source field must have for this field to be allowed to be set. */
            sourceFieldValue?: string;
        }
        interface GoogleChromePolicyV1PolicySchemaFieldDescription {
            /** Output only. The description for the field. */
            description?: string;
            /** Output only. The name of the field for associated with this description. */
            field?: string;
            /** Output only. Provides a list of fields and the values they must have for this field to be allowed to be set. */
            fieldDependencies?: GoogleChromePolicyV1PolicySchemaFieldDependencies[];
            /** Output only. Any input constraints associated on the values for the field. */
            inputConstraint?: string;
            /** Output only. If the field has a set of known values, this field will provide a description for these values. */
            knownValueDescriptions?: GoogleChromePolicyV1PolicySchemaFieldKnownValueDescription[];
            /** Output only. Provides the description of the fields nested in this field, if the field is a message type that defines multiple fields. */
            nestedFieldDescriptions?: GoogleChromePolicyV1PolicySchemaFieldDescription[];
        }
        interface GoogleChromePolicyV1PolicySchemaFieldKnownValueDescription {
            /** Output only. Additional description for this value. */
            description?: string;
            /** Output only. The string represenstation of the value that can be set for the field. */
            value?: string;
        }
        interface GoogleChromePolicyV1PolicySchemaNoticeDescription {
            /** Output only. Whether the user needs to acknowledge the notice message before the value can be set. */
            acknowledgementRequired?: boolean;
            /** Output only. The field name associated with the notice. */
            field?: string;
            /** Output only. The notice message associate with the value of the field. */
            noticeMessage?: string;
            /**
             * Output only. The value of the field that has a notice. When setting the field to this value, the user may be required to acknowledge the notice message in order for the value to be
             * set.
             */
            noticeValue?: string;
        }
        interface GoogleChromePolicyV1PolicyTargetKey {
            /** Map containing the additional target key name and value pairs used to further identify the target of the policy. */
            additionalTargetKeys?: { [P in string]: string };
            /** The target resource on which this policy is applied. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}") */
            targetResource?: string;
        }
        interface GoogleChromePolicyV1PolicyValue {
            /** The fully qualified name of the policy schema associated with this policy. */
            policySchema?: string;
            /** The value of the policy that is compatible with the schema that it is associated with. */
            value?: { [P in string]: any };
        }
        interface GoogleChromePolicyV1ResolvedPolicy {
            /**
             * Output only. The source resource from which this policy value is obtained. May be the same as `targetKey` if the policy is directly modified on the target, otherwise it would be
             * another resource from which the policy gets its value (if applicable). If not present, the source is the default value for the customer.
             */
            sourceKey?: GoogleChromePolicyV1PolicyTargetKey;
            /** Output only. The target resource for which the resolved policy value applies. */
            targetKey?: GoogleChromePolicyV1PolicyTargetKey;
            /** Output only. The resolved value of the policy. */
            value?: GoogleChromePolicyV1PolicyValue;
        }
        interface GoogleChromePolicyV1ResolveRequest {
            /** The maximum number of policies to return, defaults to 100 and has a maximum of 1000. */
            pageSize?: number;
            /** The page token used to retrieve a specific page of the request. */
            pageToken?: string;
            /**
             * The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in
             * the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/chrome-management/guides/policyapi for details
             * on schema namepsaces. For example: Valid: "chrome.users.*", "chrome.users.apps.*", "chrome.printers.*" Invalid: "*", "*.users", "chrome.*", "chrome.*.apps.*"
             */
            policySchemaFilter?: string;
            /** Required. The key of the target resource on which the policies should be resolved. The target resource must point to an Org Unit. */
            policyTargetKey?: GoogleChromePolicyV1PolicyTargetKey;
        }
        interface GoogleChromePolicyV1ResolveResponse {
            /** The page token used to get the next set of resolved policies found by the request. */
            nextPageToken?: string;
            /** The list of resolved policies found by the resolve request. */
            resolvedPolicies?: GoogleChromePolicyV1ResolvedPolicy[];
        }
        interface GoogleChromePolicyV1UploadPolicyFileRequest {
            /** Required. The fully qualified policy schema and field name this file is uploaded for. This information will be used to validate the content type of the file. */
            policyField?: string;
        }
        interface GoogleChromePolicyV1UploadPolicyFileResponse {
            /** The uri for end user to download the file. */
            downloadUri?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleProtobufEmpty {
        }
        interface GoogleTypeDate {
            /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
            day?: number;
            /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
            month?: number;
            /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
            year?: number;
        }
        interface Proto2DescriptorProto {
            enumType?: Proto2EnumDescriptorProto[];
            field?: Proto2FieldDescriptorProto[];
            name?: string;
            nestedType?: Proto2DescriptorProto[];
            oneofDecl?: Proto2OneofDescriptorProto[];
        }
        interface Proto2EnumDescriptorProto {
            name?: string;
            value?: Proto2EnumValueDescriptorProto[];
        }
        interface Proto2EnumValueDescriptorProto {
            name?: string;
            number?: number;
        }
        interface Proto2FieldDescriptorProto {
            /**
             * For numeric types, contains the original text representation of the value. For booleans, "true" or "false". For strings, contains the default text contents (not escaped in any way).
             * For bytes, contains the C escaped value. All bytes >= 128 are escaped.
             */
            defaultValue?: string;
            /**
             * JSON name of this field. The value is set by protocol compiler. If the user has set a "json_name" option on this field, that option's value will be used. Otherwise, it's deduced
             * from the field's name by converting it to camelCase.
             */
            jsonName?: string;
            label?: string;
            name?: string;
            number?: number;
            /** If set, gives the index of a oneof in the containing type's oneof_decl list. This field is a member of that oneof. */
            oneofIndex?: number;
            /**
             * If true, this is a proto3 "optional". When a proto3 field is optional, it tracks presence regardless of field type. When proto3_optional is true, this field must be belong to a
             * oneof to signal to old proto3 clients that presence is tracked for this field. This oneof is known as a "synthetic" oneof, and this field must be its sole member (each proto3
             * optional field gets its own synthetic oneof). Synthetic oneofs exist in the descriptor only, and do not generate any API. Synthetic oneofs must be ordered after all "real" oneofs.
             * For message fields, proto3_optional doesn't create any semantic change, since non-repeated message fields always track presence. However it still indicates the semantic detail of
             * whether the user wrote "optional" or not. This can be useful for round-tripping the .proto file. For consistency we give message fields a synthetic oneof also, even though it is not
             * required to track presence. This is especially important because the parser can't tell if a field is a message or an enum, so it must always create a synthetic oneof. Proto2
             * optional fields do not set this flag, because they already indicate optional with `LABEL_OPTIONAL`.
             */
            proto3Optional?: boolean;
            /** If type_name is set, this need not be set. If both this and type_name are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP. */
            type?: string;
            /**
             * For message and enum types, this is the name of the type. If the name starts with a '.', it is fully-qualified. Otherwise, C++-like scoping rules are used to find the type (i.e.
             * first the nested types within this message are searched, then within the parent, on up to the root namespace).
             */
            typeName?: string;
        }
        interface Proto2FileDescriptorProto {
            enumType?: Proto2EnumDescriptorProto[];
            /** All top-level definitions in this file. */
            messageType?: Proto2DescriptorProto[];
            /** file name, relative to root of source tree */
            name?: string;
            /** e.g. "foo", "foo.bar", etc. */
            package?: string;
            /** The syntax of the proto file. The supported values are "proto2" and "proto3". */
            syntax?: string;
        }
        interface Proto2OneofDescriptorProto {
            name?: string;
        }
        interface OrgunitsResource {
            /**
             * Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format.
             * That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be
             * different. On failure the request will return the error details as part of the google.rpc.Status.
             */
            batchInherit(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the G Suite account or literal "my_customer" for the customer associated to the request. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest;
            }): Request<{}>;
            batchInherit(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the G Suite account or literal "my_customer" for the customer associated to the request. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleChromePolicyV1BatchInheritOrgUnitPoliciesRequest): Request<{}>;
            /**
             * Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource
             * and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part
             * of the google.rpc.Status.
             */
            batchModify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the G Suite account or literal "my_customer" for the customer associated to the request. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest;
            }): Request<{}>;
            batchModify(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the G Suite account or literal "my_customer" for the customer associated to the request. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleChromePolicyV1BatchModifyOrgUnitPoliciesRequest): Request<{}>;
        }
        interface PoliciesResource {
            /** Gets the resolved policy values for a list of policies that match a search query. */
            resolve(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the G Suite account or literal "my_customer" for the customer associated to the request. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleChromePolicyV1ResolveRequest;
            }): Request<GoogleChromePolicyV1ResolveResponse>;
            resolve(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** ID of the G Suite account or literal "my_customer" for the customer associated to the request. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleChromePolicyV1ResolveRequest): Request<GoogleChromePolicyV1ResolveResponse>;
            orgunits: OrgunitsResource;
        }
        interface PolicySchemasResource {
            /** Get a specific policy schema for a customer by its resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The policy schema resource name to query. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleChromePolicyV1PolicySchema>;
            /** Gets a list of policy schemas that match a specified filter value for a given customer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The schema filter used to find a particular schema based on fields like its resource name, description and `additionalTargetKeyNames`. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of policy schemas to return. */
                pageSize?: number;
                /** The page token used to retrieve a specific page of the listing request. */
                pageToken?: string;
                /** Required. The customer for which the listing request will apply. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleChromePolicyV1ListPolicySchemasResponse>;
        }
        interface CustomersResource {
            policies: PoliciesResource;
            policySchemas: PolicySchemasResource;
        }
        interface MediaResource {
            /** Creates an enterprise file from the content provided by user. Returns a public download url for end user. */
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Required. The customer for which the file upload will apply. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleChromePolicyV1UploadPolicyFileRequest;
            }): Request<GoogleChromePolicyV1UploadPolicyFileResponse>;
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Required. The customer for which the file upload will apply. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleChromePolicyV1UploadPolicyFileRequest): Request<GoogleChromePolicyV1UploadPolicyFileResponse>;
        }

        const customers: CustomersResource;

        const media: MediaResource;
    }
}
