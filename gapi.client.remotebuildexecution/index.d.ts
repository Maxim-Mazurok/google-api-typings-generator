/* Type definitions for non-npm package Remote Build Execution API v2 2.0 */
// Project: https://cloud.google.com/remote-build-execution/docs/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://remotebuildexecution.googleapis.com/$discovery/rest?version=v2
// Revision: 20201117

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Remote Build Execution API v2 */
    function load(name: "remotebuildexecution", version: "v2"): PromiseLike<void>;
    function load(name: "remotebuildexecution", version: "v2", callback: () => any): void;

    namespace remotebuildexecution {
        interface BuildBazelRemoteExecutionV2Action {
            /** The digest of the Command to run, which MUST be present in the ContentAddressableStorage. */
            commandDigest?: BuildBazelRemoteExecutionV2Digest;
            /** If true, then the `Action`'s result cannot be cached, and in-flight requests for the same `Action` may not be merged. */
            doNotCache?: boolean;
            /**
             * The digest of the root Directory for the input files. The files in the directory tree are available in the correct location on the build machine before the command is executed. The
             * root directory, as well as every subdirectory and content blob referred to, MUST be in the ContentAddressableStorage.
             */
            inputRootDigest?: BuildBazelRemoteExecutionV2Digest;
            /**
             * List of required supported NodeProperty keys. In order to ensure that equivalent `Action`s always hash to the same value, the supported node properties MUST be lexicographically
             * sorted by name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes. The interpretation of these properties is server-dependent. If a property is not
             * recognized by the server, the server will return an `INVALID_ARGUMENT` error.
             */
            outputNodeProperties?: string[];
            /**
             * A timeout after which the execution should be killed. If the timeout is absent, then the client is specifying that the execution should continue as long as the server will let it.
             * The server SHOULD impose a timeout if the client does not specify one, however, if the client does specify a timeout that is longer than the server's maximum timeout, the server
             * MUST reject the request. The timeout is a part of the Action message, and therefore two `Actions` with different timeouts are different, even if they are otherwise identical. This
             * is because, if they were not, running an `Action` with a lower timeout than is required might result in a cache hit from an execution run with a longer timeout, hiding the fact that
             * the timeout is too short. By encoding it directly in the `Action`, a lower timeout will result in a cache miss and the execution timeout will fail immediately, rather than whenever
             * the cache entry gets evicted.
             */
            timeout?: string;
        }
        interface BuildBazelRemoteExecutionV2ActionCacheUpdateCapabilities {
            updateEnabled?: boolean;
        }
        interface BuildBazelRemoteExecutionV2ActionResult {
            /** The details of the execution that originally produced this result. */
            executionMetadata?: BuildBazelRemoteExecutionV2ExecutedActionMetadata;
            /** The exit code of the command. */
            exitCode?: number;
            /**
             * The output directories of the action. For each output directory requested in the `output_directories` or `output_paths` field of the Action, if the corresponding directory existed
             * after the action completed, a single entry will be present in the output list, which will contain the digest of a Tree message containing the directory tree, and the path equal
             * exactly to the corresponding Action output_directories member. As an example, suppose the Action had an output directory `a/b/dir` and the execution produced the following contents
             * in `a/b/dir`: a file named `bar` and a directory named `foo` with an executable file named `baz`. Then, output_directory will contain (hashes shortened for readability): ```json //
             * OutputDirectory proto: { path: "a/b/dir" tree_digest: { hash: "4a73bc9d03...", size: 55 } } // Tree proto with hash "4a73bc9d03..." and size 55: { root: { files: [ { name: "bar",
             * digest: { hash: "4a73bc9d03...", size: 65534 } } ], directories: [ { name: "foo", digest: { hash: "4cf2eda940...", size: 43 } } ] } children : { // (Directory proto with hash
             * "4cf2eda940..." and size 43) files: [ { name: "baz", digest: { hash: "b2c941073e...", size: 1294, }, is_executable: true } ] } } ``` If an output of the same name as listed in
             * `output_files` of the Command was found in `output_directories`, but was not a directory, the server will return a FAILED_PRECONDITION.
             */
            outputDirectories?: BuildBazelRemoteExecutionV2OutputDirectory[];
            /**
             * The output directories of the action that are symbolic links to other directories. Those may be links to other output directories, or input directories, or even absolute paths
             * outside of the working directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output directory requested in the `output_directories` field of the Action, if
             * the directory existed after the action completed, a single entry will be present either in this field, or in the `output_directories` field, if the directory was not a symbolic
             * link. If an output of the same name was found, but was a symbolic link to a file instead of a directory, the server will return a FAILED_PRECONDITION. If the action does not produce
             * the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is
             * sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to `output_symlinks`.
             */
            outputDirectorySymlinks?: BuildBazelRemoteExecutionV2OutputSymlink[];
            /**
             * The output files of the action. For each output file requested in the `output_files` or `output_paths` field of the Action, if the corresponding file existed after the action
             * completed, a single entry will be present either in this field, or the `output_file_symlinks` field if the file was a symbolic link to another file (`output_symlinks` field after
             * v2.1). If an output listed in `output_files` was found, but was a directory rather than a regular file, the server will return a FAILED_PRECONDITION. If the action does not produce
             * the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired; clients MUST NOT assume that the output list is
             * sorted.
             */
            outputFiles?: BuildBazelRemoteExecutionV2OutputFile[];
            /**
             * The output files of the action that are symbolic links to other files. Those may be links to other output files, or input files, or even absolute paths outside of the working
             * directory, if the server supports SymlinkAbsolutePathStrategy.ALLOWED. For each output file requested in the `output_files` or `output_paths` field of the Action, if the
             * corresponding file existed after the action completed, a single entry will be present either in this field, or in the `output_files` field, if the file was not a symbolic link. If
             * an output symbolic link of the same name as listed in `output_files` of the Command was found, but its target type was not a regular file, the server will return a
             * FAILED_PRECONDITION. If the action does not produce the requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired;
             * clients MUST NOT assume that the output list is sorted. DEPRECATED as of v2.1. Servers that wish to be compatible with v2.0 API should still populate this field in addition to
             * `output_symlinks`.
             */
            outputFileSymlinks?: BuildBazelRemoteExecutionV2OutputSymlink[];
            /**
             * New in v2.1: this field will only be populated if the command `output_paths` field was used, and not the pre v2.1 `output_files` or `output_directories` fields. The output paths of
             * the action that are symbolic links to other paths. Those may be links to other outputs, or inputs, or even absolute paths outside of the working directory, if the server supports
             * SymlinkAbsolutePathStrategy.ALLOWED. A single entry for each output requested in `output_paths` field of the Action, if the corresponding path existed after the action completed and
             * was a symbolic link. If the action does not produce a requested output, then that output will be omitted from the list. The server is free to arrange the output list as desired;
             * clients MUST NOT assume that the output list is sorted.
             */
            outputSymlinks?: BuildBazelRemoteExecutionV2OutputSymlink[];
            /** The digest for a blob containing the standard error of the action, which can be retrieved from the ContentAddressableStorage. */
            stderrDigest?: BuildBazelRemoteExecutionV2Digest;
            /**
             * The standard error buffer of the action. The server SHOULD NOT inline stderr unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining, even
             * if requested, and MUST do so if inlining would cause the response to exceed message size limits.
             */
            stderrRaw?: string;
            /** The digest for a blob containing the standard output of the action, which can be retrieved from the ContentAddressableStorage. */
            stdoutDigest?: BuildBazelRemoteExecutionV2Digest;
            /**
             * The standard output buffer of the action. The server SHOULD NOT inline stdout unless requested by the client in the GetActionResultRequest message. The server MAY omit inlining,
             * even if requested, and MUST do so if inlining would cause the response to exceed message size limits.
             */
            stdoutRaw?: string;
        }
        interface BuildBazelRemoteExecutionV2BatchReadBlobsRequest {
            /** The individual blob digests. */
            digests?: BuildBazelRemoteExecutionV2Digest[];
        }
        interface BuildBazelRemoteExecutionV2BatchReadBlobsResponse {
            /** The responses to the requests. */
            responses?: BuildBazelRemoteExecutionV2BatchReadBlobsResponseResponse[];
        }
        interface BuildBazelRemoteExecutionV2BatchReadBlobsResponseResponse {
            /** The raw binary data. */
            data?: string;
            /** The digest to which this response corresponds. */
            digest?: BuildBazelRemoteExecutionV2Digest;
            /** The result of attempting to download that blob. */
            status?: GoogleRpcStatus;
        }
        interface BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest {
            /** The individual upload requests. */
            requests?: BuildBazelRemoteExecutionV2BatchUpdateBlobsRequestRequest[];
        }
        interface BuildBazelRemoteExecutionV2BatchUpdateBlobsRequestRequest {
            /** The raw binary data. */
            data?: string;
            /** The digest of the blob. This MUST be the digest of `data`. */
            digest?: BuildBazelRemoteExecutionV2Digest;
        }
        interface BuildBazelRemoteExecutionV2BatchUpdateBlobsResponse {
            /** The responses to the requests. */
            responses?: BuildBazelRemoteExecutionV2BatchUpdateBlobsResponseResponse[];
        }
        interface BuildBazelRemoteExecutionV2BatchUpdateBlobsResponseResponse {
            /** The blob digest to which this response corresponds. */
            digest?: BuildBazelRemoteExecutionV2Digest;
            /** The result of attempting to upload that blob. */
            status?: GoogleRpcStatus;
        }
        interface BuildBazelRemoteExecutionV2CacheCapabilities {
            /** Capabilities for updating the action cache. */
            actionCacheUpdateCapabilities?: BuildBazelRemoteExecutionV2ActionCacheUpdateCapabilities;
            /** Supported cache priority range for both CAS and ActionCache. */
            cachePriorityCapabilities?: BuildBazelRemoteExecutionV2PriorityCapabilities;
            /** All the digest functions supported by the remote cache. Remote cache may support multiple digest functions simultaneously. */
            digestFunction?: string[];
            /**
             * Maximum total size of blobs to be uploaded/downloaded using batch methods. A value of 0 means no limit is set, although in practice there will always be a message size limitation of
             * the protocol in use, e.g. GRPC.
             */
            maxBatchTotalSizeBytes?: string;
            /** Whether absolute symlink targets are supported. */
            symlinkAbsolutePathStrategy?: string;
        }
        interface BuildBazelRemoteExecutionV2Command {
            /**
             * The arguments to the command. The first argument must be the path to the executable, which must be either a relative path, in which case it is evaluated with respect to the input
             * root, or an absolute path.
             */
            arguments?: string[];
            /**
             * The environment variables to set when running the program. The worker may provide its own default environment variables; these defaults can be overridden using this field.
             * Additional variables can also be specified. In order to ensure that equivalent Commands always hash to the same value, the environment variables MUST be lexicographically sorted by
             * name. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
             */
            environmentVariables?: BuildBazelRemoteExecutionV2CommandEnvironmentVariable[];
            /**
             * A list of the output directories that the client expects to retrieve from the action. Only the listed directories will be returned (an entire directory structure will be returned as
             * a Tree message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or directories that may be created during command execution are discarded. The
             * paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform
             * natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. The special value of empty string is allowed, although
             * not recommended, and can be used to capture the entire working directory tree, including inputs. In order to ensure consistent hashing of the same Action, the output paths MUST be
             * sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). An output directory cannot be duplicated or have the same path as any of the listed output files. An
             * output directory is allowed to be a parent of another output directory. Directories leading up to the output directories (but not the output directories themselves) are created by
             * the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since 2.1: Use `output_paths` instead.
             */
            outputDirectories?: string[];
            /**
             * A list of the output files that the client expects to retrieve from the action. Only the listed files, as well as directories listed in `output_directories`, will be returned to the
             * client as output. Other files or directories that may be created during command execution are discarded. The paths are relative to the working directory of the action execution. The
             * paths are specified using a single forward slash (`/`) as a path separator, even if the execution platform natively uses a different separator. The path MUST NOT include a trailing
             * slash, nor a leading slash, being a relative path. In order to ensure consistent hashing of the same Action, the output paths MUST be sorted lexicographically by code point (or,
             * equivalently, by UTF-8 bytes). An output file cannot be duplicated, be a parent of another output file, or have the same path as any of the listed output directories. Directories
             * leading up to the output files are created by the worker prior to execution, even if they are not explicitly part of the input root. DEPRECATED since v2.1: Use `output_paths`
             * instead.
             */
            outputFiles?: string[];
            /**
             * A list of the output paths that the client expects to retrieve from the action. Only the listed paths will be returned to the client as output. The type of the output (file or
             * directory) is not specified, and will be determined by the server after action execution. If the resulting path is a file, it will be returned in an OutputFile) typed field. If the
             * path is a directory, the entire directory structure will be returned as a Tree message digest, see OutputDirectory) Other files or directories that may be created during command
             * execution are discarded. The paths are relative to the working directory of the action execution. The paths are specified using a single forward slash (`/`) as a path separator,
             * even if the execution platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a leading slash, being a relative path. In order to ensure
             * consistent hashing of the same Action, the output paths MUST be deduplicated and sorted lexicographically by code point (or, equivalently, by UTF-8 bytes). Directories leading up to
             * the output paths are created by the worker prior to execution, even if they are not explicitly part of the input root. New in v2.1: this field supersedes the DEPRECATED
             * `output_files` and `output_directories` fields. If `output_paths` is used, `output_files` and `output_directories` will be ignored!
             */
            outputPaths?: string[];
            /**
             * The platform requirements for the execution environment. The server MAY choose to execute the action on any worker satisfying the requirements, so the client SHOULD ensure that
             * running the action on any such worker will have the same result. A detailed lexicon for this can be found in the accompanying platform.md.
             */
            platform?: BuildBazelRemoteExecutionV2Platform;
            /**
             * The working directory, relative to the input root, for the command to run in. It must be a directory which exists in the input tree. If it is left empty, then the action is run in
             * the input root.
             */
            workingDirectory?: string;
        }
        interface BuildBazelRemoteExecutionV2CommandEnvironmentVariable {
            /** The variable name. */
            name?: string;
            /** The variable value. */
            value?: string;
        }
        interface BuildBazelRemoteExecutionV2Digest {
            /** The hash. In the case of SHA-256, it will always be a lowercase hex string exactly 64 characters long. */
            hash?: string;
            /** The size of the blob, in bytes. */
            sizeBytes?: string;
        }
        interface BuildBazelRemoteExecutionV2Directory {
            /** The subdirectories in the directory. */
            directories?: BuildBazelRemoteExecutionV2DirectoryNode[];
            /** The files in the directory. */
            files?: BuildBazelRemoteExecutionV2FileNode[];
            /** The node properties of the Directory. */
            nodeProperties?: BuildBazelRemoteExecutionV2NodeProperty[];
            /** The symlinks in the directory. */
            symlinks?: BuildBazelRemoteExecutionV2SymlinkNode[];
        }
        interface BuildBazelRemoteExecutionV2DirectoryNode {
            /** The digest of the Directory object represented. See Digest for information about how to take the digest of a proto message. */
            digest?: BuildBazelRemoteExecutionV2Digest;
            /** The name of the directory. */
            name?: string;
        }
        interface BuildBazelRemoteExecutionV2ExecutedActionMetadata {
            /** When the worker completed executing the action command. */
            executionCompletedTimestamp?: string;
            /** When the worker started executing the action command. */
            executionStartTimestamp?: string;
            /** When the worker finished fetching action inputs. */
            inputFetchCompletedTimestamp?: string;
            /** When the worker started fetching action inputs. */
            inputFetchStartTimestamp?: string;
            /** When the worker finished uploading action outputs. */
            outputUploadCompletedTimestamp?: string;
            /** When the worker started uploading action outputs. */
            outputUploadStartTimestamp?: string;
            /** When was the action added to the queue. */
            queuedTimestamp?: string;
            /** The name of the worker which ran the execution. */
            worker?: string;
            /** When the worker completed the action, including all stages. */
            workerCompletedTimestamp?: string;
            /** When the worker received the action. */
            workerStartTimestamp?: string;
        }
        interface BuildBazelRemoteExecutionV2ExecuteOperationMetadata {
            /** The digest of the Action being executed. */
            actionDigest?: BuildBazelRemoteExecutionV2Digest;
            /** The current stage of execution. */
            stage?: string;
            /** If set, the client can use this name with ByteStream.Read to stream the standard error. */
            stderrStreamName?: string;
            /** If set, the client can use this name with ByteStream.Read to stream the standard output. */
            stdoutStreamName?: string;
        }
        interface BuildBazelRemoteExecutionV2ExecuteRequest {
            /** The digest of the Action to execute. */
            actionDigest?: BuildBazelRemoteExecutionV2Digest;
            /** An optional policy for execution of the action. The server will have a default policy if this is not provided. */
            executionPolicy?: BuildBazelRemoteExecutionV2ExecutionPolicy;
            /**
             * An optional policy for the results of this execution in the remote cache. The server will have a default policy if this is not provided. This may be applied to both the ActionResult
             * and the associated blobs.
             */
            resultsCachePolicy?: BuildBazelRemoteExecutionV2ResultsCachePolicy;
            /**
             * If true, the action will be executed even if its result is already present in the ActionCache. The execution is still allowed to be merged with other in-flight executions of the
             * same action, however - semantically, the service MUST only guarantee that the results of an execution with this field set were not visible before the corresponding execution request
             * was sent. Note that actions from execution requests setting this field set are still eligible to be entered into the action cache upon completion, and services SHOULD overwrite any
             * existing entries that may exist. This allows skip_cache_lookup requests to be used as a mechanism for replacing action cache entries that reference outputs no longer available or
             * that are poisoned in any way. If false, the result may be served from the action cache.
             */
            skipCacheLookup?: boolean;
        }
        interface BuildBazelRemoteExecutionV2ExecuteResponse {
            /** True if the result was served from cache, false if it was executed. */
            cachedResult?: boolean;
            /** Freeform informational message with details on the execution of the action that may be displayed to the user upon failure or when requested explicitly. */
            message?: string;
            /** The result of the action. */
            result?: BuildBazelRemoteExecutionV2ActionResult;
            /**
             * An optional list of additional log outputs the server wishes to provide. A server can use this to return execution-specific logs however it wishes. This is intended primarily to
             * make it easier for users to debug issues that may be outside of the actual job execution, such as by identifying the worker executing the action or by providing logs from the
             * worker's setup phase. The keys SHOULD be human readable so that a client can display them to a user.
             */
            serverLogs?: { [P in string]: BuildBazelRemoteExecutionV2LogFile };
            /**
             * If the status has a code other than `OK`, it indicates that the action did not finish execution. For example, if the operation times out during execution, the status will have a
             * `DEADLINE_EXCEEDED` code. Servers MUST use this field for errors in execution, rather than the error field on the `Operation` object. If the status code is other than `OK`, then the
             * result MUST NOT be cached. For an error status, the `result` field is optional; the server may populate the output-, stdout-, and stderr-related fields if it has any information
             * available, such as the stdout and stderr of a timed-out action.
             */
            status?: GoogleRpcStatus;
        }
        interface BuildBazelRemoteExecutionV2ExecutionCapabilities {
            /** Remote execution may only support a single digest function. */
            digestFunction?: string;
            /** Whether remote execution is enabled for the particular server/instance. */
            execEnabled?: boolean;
            /** Supported execution priority range. */
            executionPriorityCapabilities?: BuildBazelRemoteExecutionV2PriorityCapabilities;
            /** Supported node properties. */
            supportedNodeProperties?: string[];
        }
        interface BuildBazelRemoteExecutionV2ExecutionPolicy {
            /**
             * The priority (relative importance) of this action. Generally, a lower value means that the action should be run sooner than actions having a greater priority value, but the
             * interpretation of a given value is server- dependent. A priority of 0 means the *default* priority. Priorities may be positive or negative, and such actions should run later or
             * sooner than actions having the default priority, respectively. The particular semantics of this field is up to the server. In particular, every server will have their own supported
             * range of priorities, and will decide how these map into scheduling policy.
             */
            priority?: number;
        }
        interface BuildBazelRemoteExecutionV2FileNode {
            /** The digest of the file's content. */
            digest?: BuildBazelRemoteExecutionV2Digest;
            /** True if file is executable, false otherwise. */
            isExecutable?: boolean;
            /** The name of the file. */
            name?: string;
            /** The node properties of the FileNode. */
            nodeProperties?: BuildBazelRemoteExecutionV2NodeProperty[];
        }
        interface BuildBazelRemoteExecutionV2FindMissingBlobsRequest {
            /** A list of the blobs to check. */
            blobDigests?: BuildBazelRemoteExecutionV2Digest[];
        }
        interface BuildBazelRemoteExecutionV2FindMissingBlobsResponse {
            /** A list of the blobs requested *not* present in the storage. */
            missingBlobDigests?: BuildBazelRemoteExecutionV2Digest[];
        }
        interface BuildBazelRemoteExecutionV2GetTreeResponse {
            /** The directories descended from the requested root. */
            directories?: BuildBazelRemoteExecutionV2Directory[];
            /**
             * If present, signifies that there are more results which the client can retrieve by passing this as the page_token in a subsequent request. If empty, signifies that this is the last
             * page of results.
             */
            nextPageToken?: string;
        }
        interface BuildBazelRemoteExecutionV2LogFile {
            /** The digest of the log contents. */
            digest?: BuildBazelRemoteExecutionV2Digest;
            /**
             * This is a hint as to the purpose of the log, and is set to true if the log is human-readable text that can be usefully displayed to a user, and false otherwise. For instance, if a
             * command-line client wishes to print the server logs to the terminal for a failed action, this allows it to avoid displaying a binary file.
             */
            humanReadable?: boolean;
        }
        interface BuildBazelRemoteExecutionV2NodeProperty {
            /** The property name. */
            name?: string;
            /** The property value. */
            value?: string;
        }
        interface BuildBazelRemoteExecutionV2OutputDirectory {
            /**
             * The full path of the directory relative to the working directory. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with a leading forward
             * slash. The empty string value is allowed, and it denotes the entire working directory.
             */
            path?: string;
            /** The digest of the encoded Tree proto containing the directory's contents. */
            treeDigest?: BuildBazelRemoteExecutionV2Digest;
        }
        interface BuildBazelRemoteExecutionV2OutputFile {
            /**
             * The contents of the file if inlining was requested. The server SHOULD NOT inline file contents unless requested by the client in the GetActionResultRequest message. The server MAY
             * omit inlining, even if requested, and MUST do so if inlining would cause the response to exceed message size limits.
             */
            contents?: string;
            /** The digest of the file's content. */
            digest?: BuildBazelRemoteExecutionV2Digest;
            /** True if file is executable, false otherwise. */
            isExecutable?: boolean;
            /** The supported node properties of the OutputFile, if requested by the Action. */
            nodeProperties?: BuildBazelRemoteExecutionV2NodeProperty[];
            /**
             * The full path of the file relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin with
             * a leading forward slash.
             */
            path?: string;
        }
        interface BuildBazelRemoteExecutionV2OutputSymlink {
            /** The supported node properties of the OutputSymlink, if requested by the Action. */
            nodeProperties?: BuildBazelRemoteExecutionV2NodeProperty[];
            /**
             * The full path of the symlink relative to the working directory, including the filename. The path separator is a forward slash `/`. Since this is a relative path, it MUST NOT begin
             * with a leading forward slash.
             */
            path?: string;
            /**
             * The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path
             * starting with `/`. Support for absolute paths can be checked using the Capabilities API. The canonical form forbids the substrings `/./` and `//` in the target path. `..` components
             * are allowed anywhere in the target path.
             */
            target?: string;
        }
        interface BuildBazelRemoteExecutionV2Platform {
            /**
             * The properties that make up this platform. In order to ensure that equivalent `Platform`s always hash to the same value, the properties MUST be lexicographically sorted by name, and
             * then by value. Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
             */
            properties?: BuildBazelRemoteExecutionV2PlatformProperty[];
        }
        interface BuildBazelRemoteExecutionV2PlatformProperty {
            /** The property name. */
            name?: string;
            /** The property value. */
            value?: string;
        }
        interface BuildBazelRemoteExecutionV2PriorityCapabilities {
            priorities?: BuildBazelRemoteExecutionV2PriorityCapabilitiesPriorityRange[];
        }
        interface BuildBazelRemoteExecutionV2PriorityCapabilitiesPriorityRange {
            maxPriority?: number;
            minPriority?: number;
        }
        interface BuildBazelRemoteExecutionV2RequestMetadata {
            /** An identifier that ties multiple requests to the same action. For example, multiple requests to the CAS, Action Cache, and Execution API are used in order to compile foo.cc. */
            actionId?: string;
            /** An identifier to tie multiple tool invocations together. For example, runs of foo_test, bar_test and baz_test on a post-submit of a given patch. */
            correlatedInvocationsId?: string;
            /** The details for the tool invoking the requests. */
            toolDetails?: BuildBazelRemoteExecutionV2ToolDetails;
            /** An identifier that ties multiple actions together to a final result. For example, multiple actions are required to build and run foo_test. */
            toolInvocationId?: string;
        }
        interface BuildBazelRemoteExecutionV2ResultsCachePolicy {
            /**
             * The priority (relative importance) of this content in the overall cache. Generally, a lower value means a longer retention time or other advantage, but the interpretation of a given
             * value is server-dependent. A priority of 0 means a *default* value, decided by the server. The particular semantics of this field is up to the server. In particular, every server
             * will have their own supported range of priorities, and will decide how these map into retention/eviction policy.
             */
            priority?: number;
        }
        interface BuildBazelRemoteExecutionV2ServerCapabilities {
            /** Capabilities of the remote cache system. */
            cacheCapabilities?: BuildBazelRemoteExecutionV2CacheCapabilities;
            /** Earliest RE API version supported, including deprecated versions. */
            deprecatedApiVersion?: BuildBazelSemverSemVer;
            /** Capabilities of the remote execution system. */
            executionCapabilities?: BuildBazelRemoteExecutionV2ExecutionCapabilities;
            /** Latest RE API version supported. */
            highApiVersion?: BuildBazelSemverSemVer;
            /** Earliest non-deprecated RE API version supported. */
            lowApiVersion?: BuildBazelSemverSemVer;
        }
        interface BuildBazelRemoteExecutionV2SymlinkNode {
            /** The name of the symlink. */
            name?: string;
            /** The node properties of the SymlinkNode. */
            nodeProperties?: BuildBazelRemoteExecutionV2NodeProperty[];
            /**
             * The target path of the symlink. The path separator is a forward slash `/`. The target path can be relative to the parent directory of the symlink or it can be an absolute path
             * starting with `/`. Support for absolute paths can be checked using the Capabilities API. The canonical form forbids the substrings `/./` and `//` in the target path. `..` components
             * are allowed anywhere in the target path.
             */
            target?: string;
        }
        interface BuildBazelRemoteExecutionV2ToolDetails {
            /** Name of the tool, e.g. bazel. */
            toolName?: string;
            /** Version of the tool used for the request, e.g. 5.0.3. */
            toolVersion?: string;
        }
        interface BuildBazelRemoteExecutionV2Tree {
            /**
             * All the child directories: the directories referred to by the root and, recursively, all its children. In order to reconstruct the directory tree, the client must take the digests
             * of each of the child directories and then build up a tree starting from the `root`.
             */
            children?: BuildBazelRemoteExecutionV2Directory[];
            /** The root directory in the tree. */
            root?: BuildBazelRemoteExecutionV2Directory;
        }
        // tslint:disable-next-line:no-empty-interface
        interface BuildBazelRemoteExecutionV2WaitExecutionRequest {
        }
        interface BuildBazelSemverSemVer {
            /** The major version, e.g 10 for 10.2.3. */
            major?: number;
            /** The minor version, e.g. 2 for 10.2.3. */
            minor?: number;
            /** The patch version, e.g 3 for 10.2.3. */
            patch?: number;
            /**
             * The pre-release version. Either this field or major/minor/patch fields must be filled. They are mutually exclusive. Pre-release versions are assumed to be earlier than any released
             * versions.
             */
            prerelease?: string;
        }
        interface GoogleDevtoolsRemotebuildbotCommandDurations {
            /** The time spent preparing the command to be run in a Docker container (includes pulling the Docker image, if necessary). */
            dockerPrep?: string;
            /** The timestamp when docker preparation begins. */
            dockerPrepStartTime?: string;
            /** The time spent downloading the input files and constructing the working directory. */
            download?: string;
            /** The timestamp when downloading the input files begins. */
            downloadStartTime?: string;
            /** The timestamp when execution begins. */
            execStartTime?: string;
            /** The time spent executing the command (i.e., doing useful work). */
            execution?: string;
            /** The timestamp when preparation is done and bot starts downloading files. */
            isoPrepDone?: string;
            /** The time spent completing the command, in total. */
            overall?: string;
            /** The time spent uploading the stdout logs. */
            stdout?: string;
            /** The time spent uploading the output files. */
            upload?: string;
            /** The timestamp when uploading the output files begins. */
            uploadStartTime?: string;
        }
        interface GoogleDevtoolsRemotebuildbotCommandEvents {
            /** Indicates whether we are using a cached Docker image (true) or had to pull the Docker image (false) for this command. */
            dockerCacheHit?: boolean;
            /** Docker Image name. */
            dockerImageName?: string;
            /** The input cache miss ratio. */
            inputCacheMiss?: number;
            /** The number of errors reported. */
            numErrors?: string;
            /** The number of warnings reported. */
            numWarnings?: string;
        }
        interface GoogleDevtoolsRemotebuildbotCommandStatus {
            /** The status code. */
            code?: string;
            /** The error message. */
            message?: string;
        }
        interface GoogleDevtoolsRemotebuildbotResourceUsage {
            cpuUsedPercent?: number;
            diskUsage?: GoogleDevtoolsRemotebuildbotResourceUsageStat;
            memoryUsage?: GoogleDevtoolsRemotebuildbotResourceUsageStat;
        }
        interface GoogleDevtoolsRemotebuildbotResourceUsageStat {
            total?: string;
            used?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig {
            /** The number of guest accelerator cards exposed to each VM. */
            acceleratorCount?: string;
            /** The type of accelerator to attach to each VM, e.g. "nvidia-tesla-k80" for nVidia Tesla K80. */
            acceleratorType?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale {
            /** The maximal number of workers. Must be equal to or greater than min_size. */
            maxSize?: string;
            /** The minimal number of workers. Must be greater than 0. */
            minSize?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequest {
            /** Specifies the instance to create. The name in the instance, if specified in the instance, is ignored. */
            instance?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance;
            /**
             * ID of the created instance. A valid `instance_id` must: be 6-50 characters long, contain only lowercase letters, digits, hyphens and underscores, start with a lowercase letter, and
             * end with a lowercase letter or a digit.
             */
            instanceId?: string;
            /** Resource name of the project containing the instance. Format: `projects/[PROJECT_ID]`. */
            parent?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest {
            /** Resource name of the instance in which to create the new worker pool. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. */
            parent?: string;
            /**
             * ID of the created worker pool. A valid pool ID must: be 6-50 characters long, contain only lowercase letters, digits, hyphens and underscores, start with a lowercase letter, and end
             * with a lowercase letter or a digit.
             */
            poolId?: string;
            /** Specifies the worker pool to create. The name in the worker pool, if specified, is ignored. */
            workerPool?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteInstanceRequest {
            /** Name of the instance to delete. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. */
            name?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteWorkerPoolRequest {
            /** Name of the worker pool to delete. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. */
            name?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy {
            /**
             * Which container image sources are allowed. Currently only RBE-supported registry (gcr.io) is allowed. One can allow all repositories under a project or one specific repository only.
             * E.g. container_image_sources { policy: RESTRICTED allowed_values: [ "gcr.io/project-foo", "gcr.io/project-bar/repo-baz", ] } will allow any repositories under "gcr.io/project-foo"
             * plus the repository "gcr.io/project-bar/repo-baz". Default (UNSPECIFIED) is equivalent to any source is allowed.
             */
            containerImageSources?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** Whether dockerAddCapabilities can be used or what capabilities are allowed. */
            dockerAddCapabilities?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** Whether dockerChrootPath can be used. */
            dockerChrootPath?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** Whether dockerNetwork can be used or what network modes are allowed. E.g. one may allow `off` value only via `allowed_values`. */
            dockerNetwork?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** Whether dockerPrivileged can be used. */
            dockerPrivileged?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** Whether dockerRunAsRoot can be used. */
            dockerRunAsRoot?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /**
             * Whether dockerRuntime is allowed to be set or what runtimes are allowed. Note linux_isolation takes precedence, and if set, docker_runtime values may be rejected if they are
             * incompatible with the selected isolation.
             */
            dockerRuntime?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** Whether dockerSiblingContainers can be used. */
            dockerSiblingContainers?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature;
            /** linux_isolation allows overriding the docker runtime used for containers started on Linux. */
            linuxIsolation?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicyFeature {
            /** A list of acceptable values. Only effective when the policy is `RESTRICTED`. */
            allowedValues?: string[];
            /** The policy of the feature. */
            policy?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetInstanceRequest {
            /** Name of the instance to retrieve. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. */
            name?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetWorkerPoolRequest {
            /** Name of the worker pool to retrieve. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. */
            name?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance {
            /** The policy to define whether or not RBE features can be used or how they can be used. */
            featurePolicy?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaFeaturePolicy;
            /** The location is a GCP region. Currently only `us-central1` is supported. */
            location?: string;
            /** Output only. Whether stack driver logging is enabled for the instance. */
            loggingEnabled?: boolean;
            /**
             * Output only. Instance resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. Name should not be populated when creating an instance since it is provided in the
             * `instance_id` field.
             */
            name?: string;
            /** Output only. State of the instance. */
            state?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesRequest {
            /** Resource name of the project. Format: `projects/[PROJECT_ID]`. */
            parent?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse {
            /** The list of instances in a given project. */
            instances?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance[];
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest {
            /**
             * Optional. A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use
             * for filtering. The value must be a string, a number, or a boolean. String values are case-insensitive. The comparison operator must be either `:`, `=`, `!=`, `>`, `>=`, `<=` or `<`.
             * The `:` operator can be used with string fields to match substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a
             * key has been defined. You can also filter on nested fields. To filter on multiple expressions, you can separate expression using `AND` and `OR` operators, using parentheses to
             * specify precedence. If neither operator is specified, `AND` is assumed. Examples: Include only pools with more than 100 reserved workers: `(worker_count > 100)
             * (worker_config.reserved = true)` Include only pools with a certain label or machines of the n1-standard family: `worker_config.labels.key1 : * OR worker_config.machine_type:
             * n1-standard`
             */
            filter?: string;
            /** Resource name of the instance. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. */
            parent?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse {
            /** The list of worker pools in a given instance. */
            workerPools?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool[];
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaSoleTenancyConfig {
            /** Zone in which STNs are reserved. */
            nodesZone?: string;
            /** The sole-tenant node type to host the pool's workers on. */
            nodeType?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateInstanceRequest {
            /** Specifies the instance to update. */
            instance?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance;
            /** Deprecated, use instance.logging_enabled instead. Whether to enable Stackdriver logging for this instance. */
            loggingEnabled?: boolean;
            /** Deprecated, use instance.Name instead. Name of the instance to update. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`. */
            name?: string;
            /**
             * The update mask applies to instance. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty
             * update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty
             * string) an explicit update_mask must be provided.
             */
            updateMask?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest {
            /**
             * The update mask applies to worker_pool. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty
             * update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty
             * string) an explicit update_mask must be provided.
             */
            updateMask?: string;
            /** Specifies the worker pool to update. */
            workerPool?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig {
            /** The accelerator card attached to each VM. */
            accelerator?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig;
            /** Required. Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ */
            diskSizeGb?: string;
            /** Required. Disk Type to use for the worker. See [Storage options](https://cloud.google.com/compute/docs/disks/#introduction). Currently only `pd-standard` and `pd-ssd` are supported. */
            diskType?: string;
            /**
             * Labels associated with the workers. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes.
             * International letters are permitted. Label keys must start with a letter. Label values are optional. There can not be more than 64 labels per resource.
             */
            labels?: { [P in string]: string };
            /**
             * Required. Machine type of the worker, such as `n1-standard-2`. See https://cloud.google.com/compute/docs/machine-types for a list of supported machine types. Note that `f1-micro`
             * and `g1-small` are not yet supported.
             */
            machineType?: string;
            /** The maximum number of actions a worker can execute concurrently. */
            maxConcurrentActions?: string;
            /** Minimum CPU platform to use when creating the worker. See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms). */
            minCpuPlatform?: string;
            /**
             * Determines the type of network access granted to workers. Possible values: - "public": Workers can connect to the public internet. - "private": Workers can only connect to Google
             * APIs and services. - "restricted-private": Workers can only connect to Google APIs that are reachable through `restricted.googleapis.com` (`199.36.153.4/30`).
             */
            networkAccess?: string;
            /**
             * Determines whether the worker is reserved (equivalent to a Compute Engine on-demand VM and therefore won't be preempted). See [Preemptible
             * VMs](https://cloud.google.com/preemptible-vms/) for more details.
             */
            reserved?: boolean;
            /** Sole-tenant node information for pools hosted on STNs. */
            soleTenancy?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaSoleTenancyConfig;
            /** The name of the image used by each VM. */
            vmImage?: string;
        }
        interface GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool {
            /** The autoscale policy to apply on a pool. */
            autoscale?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale;
            /** Channel specifies the release channel of the pool. */
            channel?: string;
            /**
             * WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is
             * provided in the `poolId` field.
             */
            name?: string;
            /** Output only. State of the worker pool. */
            state?: string;
            /** Specifies the properties, such as machine type and disk size, used for creating workers in a worker pool. */
            workerConfig?: GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig;
            /** The desired number of workers in the worker pool. Must be a value between 0 and 15000. */
            workerCount?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2AdminTemp {
            /** The argument to the admin action; see `Command` for semantics. */
            arg?: string;
            /** The admin action; see `Command` for legal values. */
            command?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2Blob {
            /** The contents of the blob. */
            contents?: string;
            /** The digest of the blob. This should be verified by the receiver. */
            digest?: GoogleDevtoolsRemoteworkersV1test2Digest;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandOutputs {
            /**
             * exit_code is only fully reliable if the status' code is OK. If the task exceeded its deadline or was cancelled, the process may still produce an exit code as it is cancelled, and
             * this will be populated, but a successful (zero) is unlikely to be correct unless the status code is OK.
             */
            exitCode?: number;
            /**
             * The output files. The blob referenced by the digest should contain one of the following (implementation-dependent): * A marshalled DirectoryMetadata of the returned filesystem * A
             * LUCI-style .isolated file
             */
            outputs?: GoogleDevtoolsRemoteworkersV1test2Digest;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandOverhead {
            /**
             * The elapsed time between calling Accept and Complete. The server will also have its own idea of what this should be, but this excludes the overhead of the RPCs and the bot response
             * time.
             */
            duration?: string;
            /** The amount of time *not* spent executing the command (ie uploading/downloading files). */
            overhead?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandResult {
            /**
             * The elapsed time between calling Accept and Complete. The server will also have its own idea of what this should be, but this excludes the overhead of the RPCs and the bot response
             * time.
             */
            duration?: string;
            /** The exit code of the process. An exit code of "0" should only be trusted if `status` has a code of OK (otherwise it may simply be unset). */
            exitCode?: number;
            /**
             * Implementation-dependent metadata about the task. Both servers and bots may define messages which can be encoded here; bots are free to provide metadata in multiple formats, and
             * servers are free to choose one or more of the values to process and ignore others. In particular, it is *not* considered an error for the bot to provide the server with a field that
             * it doesn't know about.
             */
            metadata?: Array<{ [P in string]: any }>;
            /**
             * The output files. The blob referenced by the digest should contain one of the following (implementation-dependent): * A marshalled DirectoryMetadata of the returned filesystem * A
             * LUCI-style .isolated file
             */
            outputs?: GoogleDevtoolsRemoteworkersV1test2Digest;
            /** The amount of time *not* spent executing the command (ie uploading/downloading files). */
            overhead?: string;
            /**
             * An overall status for the command. For example, if the command timed out, this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for memory exhaustion, it might
             * have a code of RESOURCE_EXHAUSTED.
             */
            status?: GoogleRpcStatus;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandTask {
            /** The expected outputs from the task. */
            expectedOutputs?: GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs;
            /** The inputs to the task. */
            inputs?: GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs;
            /** The timeouts of this task. */
            timeouts?: GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs {
            /**
             * The command itself to run (e.g., argv). This field should be passed directly to the underlying operating system, and so it must be sensible to that operating system. For example, on
             * Windows, the first argument might be "C:\Windows\System32\ping.exe" - that is, using drive letters and backslashes. A command for a *nix system, on the other hand, would use forward
             * slashes. All other fields in the RWAPI must consistently use forward slashes, since those fields may be interpretted by both the service and the bot.
             */
            arguments?: string[];
            /** All environment variables required by the task. */
            environmentVariables?: GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable[];
            /**
             * The input filesystem to be set up prior to the task beginning. The contents should be a repeated set of FileMetadata messages though other formats are allowed if better for the
             * implementation (eg, a LUCI-style .isolated file). This field is repeated since implementations might want to cache the metadata, in which case it may be useful to break up portions
             * of the filesystem that change frequently (eg, specific input files) from those that don't (eg, standard header files).
             */
            files?: GoogleDevtoolsRemoteworkersV1test2Digest[];
            /**
             * Inline contents for blobs expected to be needed by the bot to execute the task. For example, contents of entries in `files` or blobs that are indirectly referenced by an entry
             * there. The bot should check against this list before downloading required task inputs to reduce the number of communications between itself and the remote CAS server.
             */
            inlineBlobs?: GoogleDevtoolsRemoteworkersV1test2Blob[];
            /**
             * Directory from which a command is executed. It is a relative directory with respect to the bot's working directory (i.e., "./"). If it is non-empty, then it must exist under "./".
             * Otherwise, "./" will be used.
             */
            workingDirectory?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable {
            /** The envvar name. */
            name?: string;
            /** The envvar value. */
            value?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs {
            /** A list of expected directories, relative to the execution root. All paths MUST be delimited by forward slashes. */
            directories?: string[];
            /** A list of expected files, relative to the execution root. All paths MUST be delimited by forward slashes. */
            files?: string[];
            /**
             * The destination to which any stderr should be sent. The method by which the bot should send the stream contents to that destination is not defined in this API. As examples, the
             * destination could be a file referenced in the `files` field in this message, or it could be a URI that must be written via the ByteStream API.
             */
            stderrDestination?: string;
            /**
             * The destination to which any stdout should be sent. The method by which the bot should send the stream contents to that destination is not defined in this API. As examples, the
             * destination could be a file referenced in the `files` field in this message, or it could be a URI that must be written via the ByteStream API.
             */
            stdoutDestination?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts {
            /**
             * This specifies the maximum time that the task can run, excluding the time required to download inputs or upload outputs. That is, the worker will terminate the task if it runs
             * longer than this.
             */
            execution?: string;
            /**
             * This specifies the maximum amount of time the task can be idle - that is, go without generating some output in either stdout or stderr. If the process is silent for more than the
             * specified time, the worker will terminate the task.
             */
            idle?: string;
            /**
             * If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the task and return any existing logs. However, tasks may be hard-frozen in which case this
             * process will fail. This timeout specifies how long to wait for a terminated task to shut down gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix,
             * CTRL_BREAK_EVENT on Windows).
             */
            shutdown?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2Digest {
            /** A string-encoded hash (eg "1a2b3c", not the byte array [0x1a, 0x2b, 0x3c]) using an implementation-defined hash algorithm (eg SHA-256). */
            hash?: string;
            /**
             * The size of the contents. While this is not strictly required as part of an identifier (after all, any given hash will have exactly one canonical size), it's useful in almost all
             * cases when one might want to send or retrieve blobs of content and is included here for this reason.
             */
            sizeBytes?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2Directory {
            /** Any subdirectories */
            directories?: GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata[];
            /** The files in this directory */
            files?: GoogleDevtoolsRemoteworkersV1test2FileMetadata[];
        }
        interface GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata {
            /** A pointer to the contents of the directory, in the form of a marshalled Directory message. */
            digest?: GoogleDevtoolsRemoteworkersV1test2Digest;
            /** The path of the directory, as in FileMetadata.path. */
            path?: string;
        }
        interface GoogleDevtoolsRemoteworkersV1test2FileMetadata {
            /** If the file is small enough, its contents may also or alternatively be listed here. */
            contents?: string;
            /** A pointer to the contents of the file. The method by which a client retrieves the contents from a CAS system is not defined here. */
            digest?: GoogleDevtoolsRemoteworkersV1test2Digest;
            /** Properties of the file */
            isExecutable?: boolean;
            /**
             * The path of this file. If this message is part of the CommandOutputs.outputs fields, the path is relative to the execution root and must correspond to an entry in
             * CommandTask.outputs.files. If this message is part of a Directory message, then the path is relative to the root of that directory. All paths MUST be delimited by forward slashes.
             */
            path?: string;
        }
        interface GoogleLongrunningOperation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: GoogleRpcStatus;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface GoogleRpcStatus {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface ActionResultsResource {
            /**
             * Retrieve a cached execution result. Implementations SHOULD ensure that any blobs referenced from the ContentAddressableStorage are available at the time of returning the
             * ActionResult and will be for some period of time afterwards. The TTLs of the referenced blobs SHOULD be increased if necessary and applicable. Errors: * `NOT_FOUND`: The requested
             * `ActionResult` is not in the cache.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hash. In the case of SHA-256, it will always be a lowercase hex string exactly 64 characters long. */
                hash: string;
                /** A hint to the server to inline the contents of the listed output files. Each path needs to exactly match one path in `output_files` in the Command message. */
                inlineOutputFiles?: string | string[];
                /** A hint to the server to request inlining stderr in the ActionResult message. */
                inlineStderr?: boolean;
                /** A hint to the server to request inlining stdout in the ActionResult message. */
                inlineStdout?: boolean;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The size of the blob, in bytes. */
                sizeBytes: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<BuildBazelRemoteExecutionV2ActionResult>;
            /**
             * Upload a new execution result. In order to allow the server to perform access control based on the type of action, and to assist with client debugging, the client MUST first upload
             * the Action that produced the result, along with its Command, into the `ContentAddressableStorage`. Errors: * `INVALID_ARGUMENT`: One or more arguments are invalid. *
             * `FAILED_PRECONDITION`: One or more errors occurred in updating the action result, such as a missing command or action. * `RESOURCE_EXHAUSTED`: There is insufficient storage space to
             * add the entry to the cache.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hash. In the case of SHA-256, it will always be a lowercase hex string exactly 64 characters long. */
                hash: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The priority (relative importance) of this content in the overall cache. Generally, a lower value means a longer retention time or other advantage, but the interpretation of a
                 * given value is server-dependent. A priority of 0 means a *default* value, decided by the server. The particular semantics of this field is up to the server. In particular, every
                 * server will have their own supported range of priorities, and will decide how these map into retention/eviction policy.
                 */
                "resultsCachePolicy.priority"?: number;
                /** The size of the blob, in bytes. */
                sizeBytes: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BuildBazelRemoteExecutionV2ActionResult;
            }): Request<BuildBazelRemoteExecutionV2ActionResult>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hash. In the case of SHA-256, it will always be a lowercase hex string exactly 64 characters long. */
                hash: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The priority (relative importance) of this content in the overall cache. Generally, a lower value means a longer retention time or other advantage, but the interpretation of a
                 * given value is server-dependent. A priority of 0 means a *default* value, decided by the server. The particular semantics of this field is up to the server. In particular, every
                 * server will have their own supported range of priorities, and will decide how these map into retention/eviction policy.
                 */
                "resultsCachePolicy.priority"?: number;
                /** The size of the blob, in bytes. */
                sizeBytes: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BuildBazelRemoteExecutionV2ActionResult): Request<BuildBazelRemoteExecutionV2ActionResult>;
        }
        interface ActionsResource {
            /**
             * Execute an action remotely. In order to execute an action, the client must first upload all of the inputs, the Command to run, and the Action into the ContentAddressableStorage. It
             * then calls `Execute` with an `action_digest` referring to them. The server will run the action and eventually return the result. The input `Action`'s fields MUST meet the various
             * canonicalization requirements specified in the documentation for their types so that it has the same digest as other logically equivalent `Action`s. The server MAY enforce the
             * requirements and return errors if a non-canonical input is received. It MAY also proceed without verifying some or all of the requirements, such as for performance reasons. If the
             * server does not verify the requirement, then it will treat the `Action` as distinct from another logically equivalent action if they hash differently. Returns a stream of
             * google.longrunning.Operation messages describing the resulting execution, with eventual `response` ExecuteResponse. The `metadata` on the operation is of type
             * ExecuteOperationMetadata. If the client remains connected after the first response is returned after the server, then updates are streamed as if the client had called WaitExecution
             * until the execution completes or the request reaches an error. The operation can also be queried using Operations API. The server NEED NOT implement other methods or functionality
             * of the Operations API. Errors discovered during creation of the `Operation` will be reported as gRPC Status errors, while errors that occurred while running the action will be
             * reported in the `status` field of the `ExecuteResponse`. The server MUST NOT set the `error` field of the `Operation` proto. The possible errors include: * `INVALID_ARGUMENT`: One
             * or more arguments are invalid. * `FAILED_PRECONDITION`: One or more errors occurred in setting up the action requested, such as a missing input or command or no worker being
             * available. The client may be able to fix the errors and retry. * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run the action. * `UNAVAILABLE`: Due to a
             * transient condition, such as all workers being occupied (and the server does not support a queue), the action could not be started. The client should retry. * `INTERNAL`: An
             * internal error occurred in the execution engine or the worker. * `DEADLINE_EXCEEDED`: The execution timed out. * `CANCELLED`: The operation was cancelled by the client. This status
             * is only possible if the server implements the Operations API CancelOperation method, and it was called for the current execution. In the case of a missing input or command, the
             * server SHOULD additionally send a PreconditionFailure error detail where, for each requested blob not present in the CAS, there is a `Violation` with a `type` of `MISSING` and a
             * `subject` of `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
             */
            execute(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BuildBazelRemoteExecutionV2ExecuteRequest;
            }): Request<GoogleLongrunningOperation>;
            execute(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BuildBazelRemoteExecutionV2ExecuteRequest): Request<GoogleLongrunningOperation>;
        }
        interface BlobsResource {
            /**
             * Download many blobs at once. The server may enforce a limit of the combined total size of blobs to be downloaded using this API. This limit may be obtained using the Capabilities
             * API. Requests exceeding the limit should either be split into smaller chunks or downloaded using the ByteStream API, as appropriate. This request is equivalent to calling a
             * Bytestream `Read` request on each individual blob, in parallel. The requests may succeed or fail independently. Errors: * `INVALID_ARGUMENT`: The client attempted to read more than
             * the server supported limit. Every error on individual read will be returned in the corresponding digest status.
             */
            batchRead(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BuildBazelRemoteExecutionV2BatchReadBlobsRequest;
            }): Request<BuildBazelRemoteExecutionV2BatchReadBlobsResponse>;
            batchRead(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BuildBazelRemoteExecutionV2BatchReadBlobsRequest): Request<BuildBazelRemoteExecutionV2BatchReadBlobsResponse>;
            /**
             * Upload many blobs at once. The server may enforce a limit of the combined total size of blobs to be uploaded using this API. This limit may be obtained using the Capabilities API.
             * Requests exceeding the limit should either be split into smaller chunks or uploaded using the ByteStream API, as appropriate. This request is equivalent to calling a Bytestream
             * `Write` request on each individual blob, in parallel. The requests may succeed or fail independently. Errors: * `INVALID_ARGUMENT`: The client attempted to upload more than the
             * server supported limit. Individual requests may return the following errors, additionally: * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob. *
             * `INVALID_ARGUMENT`: The Digest does not match the provided data.
             */
            batchUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest;
            }): Request<BuildBazelRemoteExecutionV2BatchUpdateBlobsResponse>;
            batchUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BuildBazelRemoteExecutionV2BatchUpdateBlobsRequest): Request<BuildBazelRemoteExecutionV2BatchUpdateBlobsResponse>;
            /**
             * Determine if blobs are present in the CAS. Clients can use this API before uploading blobs to determine which ones are already present in the CAS and do not need to be uploaded
             * again. Servers SHOULD increase the TTLs of the referenced blobs if necessary and applicable. There are no method-specific errors.
             */
            findMissing(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BuildBazelRemoteExecutionV2FindMissingBlobsRequest;
            }): Request<BuildBazelRemoteExecutionV2FindMissingBlobsResponse>;
            findMissing(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BuildBazelRemoteExecutionV2FindMissingBlobsRequest): Request<BuildBazelRemoteExecutionV2FindMissingBlobsResponse>;
            /**
             * Fetch the entire directory tree rooted at a node. This request must be targeted at a Directory stored in the ContentAddressableStorage (CAS). The server will enumerate the
             * `Directory` tree recursively and return every node descended from the root. The GetTreeRequest.page_token parameter can be used to skip ahead in the stream (e.g. when retrying a
             * partially completed and aborted request), by setting it to a value taken from GetTreeResponse.next_page_token of the last successfully processed GetTreeResponse). The exact
             * traversal order is unspecified and, unless retrieving subsequent pages from an earlier request, is not guaranteed to be stable across multiple invocations of `GetTree`. If part of
             * the tree is missing from the CAS, the server will return the portion present and omit the rest. Errors: * `NOT_FOUND`: The requested tree root is not present in the CAS.
             */
            getTree(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The hash. In the case of SHA-256, it will always be a lowercase hex string exactly 64 characters long. */
                hash: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * A maximum page size to request. If present, the server will request no more than this many items. Regardless of whether a page size is specified, the server may place its own
                 * limit on the number of items to be returned and require the client to retrieve more items using a subsequent request.
                 */
                pageSize?: number;
                /**
                 * A page token, which must be a value received in a previous GetTreeResponse. If present, the server will use that token as an offset, returning only that page and the ones that
                 * succeed it.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The size of the blob, in bytes. */
                sizeBytes: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<BuildBazelRemoteExecutionV2GetTreeResponse>;
        }
        interface OperationsResource {
            /**
             * Wait for an execution operation to complete. When the client initially makes the request, the server immediately responds with the current status of the execution. The server will
             * leave the request stream open until the operation completes, and then respond with the completed operation. The server MAY choose to stream additional updates as execution
             * progresses, such as to provide an update as to the state of the execution.
             */
            waitExecution(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Operation returned by Execute. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BuildBazelRemoteExecutionV2WaitExecutionRequest;
            }): Request<GoogleLongrunningOperation>;
            waitExecution(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Operation returned by Execute. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BuildBazelRemoteExecutionV2WaitExecutionRequest): Request<GoogleLongrunningOperation>;
        }
        interface V2Resource {
            /**
             * GetCapabilities returns the server capabilities configuration of the remote endpoint. Only the capabilities of the services supported by the endpoint will be returned: * Execution +
             * CAS + Action Cache endpoints should return both CacheCapabilities and ExecutionCapabilities. * Execution only endpoints should return ExecutionCapabilities. * CAS + Action Cache
             * only endpoints should return CacheCapabilities.
             */
            getCapabilities(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * The instance of the execution system to operate against. A server may support multiple instances of the execution system (with their own workers, storage, caches, etc.). The
                 * server MAY require use of this field to select between them in an implementation-defined fashion, otherwise it can be omitted.
                 */
                instanceName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<BuildBazelRemoteExecutionV2ServerCapabilities>;
        }

        const actionResults: ActionResultsResource;

        const actions: ActionsResource;

        const blobs: BlobsResource;

        const operations: OperationsResource;

        const v2: V2Resource;
    }
}
