/* This is stub file for gapi.client.biglake-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240415

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://biglake.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.biglake */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** View and manage your data in Google BigQuery and see the email address for your Google Account */
    'https://www.googleapis.com/auth/bigquery',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a new catalog. */
    await gapi.client.biglake.projects.locations.catalogs.create(
      {
        catalogId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        expireTime: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing catalog specified by the catalog ID. */
    await gapi.client.biglake.projects.locations.catalogs.delete({
      name: 'Test string',
    });
    /** Gets the catalog specified by the resource name. */
    await gapi.client.biglake.projects.locations.catalogs.get({
      name: 'Test string',
    });
    /** List all catalogs in a specified project. */
    await gapi.client.biglake.projects.locations.catalogs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new database. */
    await gapi.client.biglake.projects.locations.catalogs.databases.create(
      {
        databaseId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        expireTime: 'Test string',
        hiveOptions: {
          locationUri: 'Test string',
          parameters: {
            A: 'Test string',
          },
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing database specified by the database ID. */
    await gapi.client.biglake.projects.locations.catalogs.databases.delete({
      name: 'Test string',
    });
    /** Gets the database specified by the resource name. */
    await gapi.client.biglake.projects.locations.catalogs.databases.get({
      name: 'Test string',
    });
    /** List all databases in a specified catalog. */
    await gapi.client.biglake.projects.locations.catalogs.databases.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing database specified by the database ID. */
    await gapi.client.biglake.projects.locations.catalogs.databases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        expireTime: 'Test string',
        hiveOptions: {
          locationUri: 'Test string',
          parameters: {
            A: 'Test string',
          },
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a new table. */
    await gapi.client.biglake.projects.locations.catalogs.databases.tables.create(
      {
        parent: 'Test string',
        tableId: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        etag: 'Test string',
        expireTime: 'Test string',
        hiveOptions: {
          parameters: {
            A: 'Test string',
          },
          storageDescriptor: {
            inputFormat: 'Test string',
            locationUri: 'Test string',
            outputFormat: 'Test string',
            serdeInfo: {
              serializationLib: 'Test string',
            },
          },
          tableType: 'Test string',
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing table specified by the table ID. */
    await gapi.client.biglake.projects.locations.catalogs.databases.tables.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets the table specified by the resource name. */
    await gapi.client.biglake.projects.locations.catalogs.databases.tables.get({
      name: 'Test string',
    });
    /** List all tables in a specified database. */
    await gapi.client.biglake.projects.locations.catalogs.databases.tables.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      }
    );
    /** Updates an existing table specified by the table ID. */
    await gapi.client.biglake.projects.locations.catalogs.databases.tables.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        etag: 'Test string',
        expireTime: 'Test string',
        hiveOptions: {
          parameters: {
            A: 'Test string',
          },
          storageDescriptor: {
            inputFormat: 'Test string',
            locationUri: 'Test string',
            outputFormat: 'Test string',
            serdeInfo: {
              serializationLib: 'Test string',
            },
          },
          tableType: 'Test string',
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Renames an existing table specified by the table ID. */
    await gapi.client.biglake.projects.locations.catalogs.databases.tables.rename(
      {
        name: 'Test string',
      },
      {
        newName: 'Test string',
      }
    );
  }
});
