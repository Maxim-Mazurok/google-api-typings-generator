/* This is stub file for gapi.client.firebaseappdistribution-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250908

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://firebaseappdistribution.googleapis.com/$discovery/rest?version=v1alpha',
  );
  /** now we can use gapi.client.firebaseappdistribution */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Get the app, if it exists */
    await gapi.client.firebaseappdistribution.apps.get({
      appView: 'Test string',
      mobilesdkAppId: 'Test string',
    });
    /** Get a JWT token */
    await gapi.client.firebaseappdistribution.apps.getJwt({
      mobilesdkAppId: 'Test string',
    });
    /** GET Release by binary upload hash */
    await gapi.client.firebaseappdistribution.apps.release_by_hash.get({
      mobilesdkAppId: 'Test string',
      uploadHash: 'Test string',
    });
    /** Enable access on a release for testers. */
    await gapi.client.firebaseappdistribution.apps.releases.enable_access(
      {
        mobilesdkAppId: 'Test string',
        releaseId: 'Test string',
      },
      {
        buildVersion: 'Test string',
        displayVersion: 'Test string',
        emails: ['Test string'],
        groupIds: ['Test string'],
      },
    );
    /** Create release notes on a release. */
    await gapi.client.firebaseappdistribution.apps.releases.notes.create(
      {
        mobilesdkAppId: 'Test string',
        releaseId: 'Test string',
      },
      {
        releaseNotes: {
          releaseNotes: 'Test string',
        },
      },
    );
    /** Get UDIDs of tester iOS devices in a project */
    await gapi.client.firebaseappdistribution.apps.testers.getTesterUdids({
      mobilesdkAppId: 'Test string',
      project: 'Test string',
    });
    /** GET Binary upload status by token */
    await gapi.client.firebaseappdistribution.apps.upload_status.get({
      mobilesdkAppId: 'Test string',
      uploadToken: 'Test string',
    });
    /** Get information about the quota for `ReleaseTests`. */
    await gapi.client.firebaseappdistribution.projects.getTestQuota({
      name: 'Test string',
    });
    /** Gets configuration for automated tests. */
    await gapi.client.firebaseappdistribution.projects.apps.getTestConfig({
      name: 'Test string',
    });
    /** Updates automated test configuration. */
    await gapi.client.firebaseappdistribution.projects.apps.updateTestConfig(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        roboCrawler: {
          aiInstructions: {
            steps: [
              {
                assertion: 'Test string',
                goal: 'Test string',
                hint: 'Test string',
                successCriteria: 'Test string',
                testCase: 'Test string',
              },
            ],
          },
          loginCredential: {
            fieldHints: {
              passwordResourceName: 'Test string',
              usernameResourceName: 'Test string',
            },
            google: true,
            password: 'Test string',
            username: 'Test string',
          },
        },
        testDevices: [
          {
            locale: 'Test string',
            model: 'Test string',
            orientation: 'Test string',
            version: 'Test string',
          },
        ],
      },
    );
    /** Abort automated test run on release. */
    await gapi.client.firebaseappdistribution.projects.apps.releases.tests.cancel(
      {
        name: 'Test string',
      },
    );
    /** Run automated test(s) on release. */
    await gapi.client.firebaseappdistribution.projects.apps.releases.tests.create(
      {
        parent: 'Test string',
        releaseTestId: 'Test string',
      },
      {
        aiInstructions: {
          steps: [
            {
              assertion: 'Test string',
              goal: 'Test string',
              hint: 'Test string',
              successCriteria: 'Test string',
              testCase: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        deviceExecutions: [
          {
            aiStepResults: [
              {
                assertionDetails: {
                  explanation: 'Test string',
                  result: true,
                  screenshot: {
                    height: 42,
                    uri: 'Test string',
                    width: 42,
                  },
                },
                goalDetails: {
                  goalActions: [
                    {
                      debugInfo: {
                        annotatedScreenshotUri: 'Test string',
                        jsonUri: 'Test string',
                      },
                      deviceAction: {
                        description: 'Test string',
                        deviceInteractions: [
                          {
                            backAction: {},
                            dragAndDrop: {
                              end: {
                                xCoordinate: 42,
                                yCoordinate: 42,
                              },
                              start: {
                                xCoordinate: 42,
                                yCoordinate: 42,
                              },
                            },
                            enterText: {
                              elementBounds: {
                                bottom: 42,
                                left: 42,
                                right: 42,
                                top: 42,
                              },
                              text: 'Test string',
                            },
                            keyCode: 'Test string',
                            longPress: {
                              xCoordinate: 42,
                              yCoordinate: 42,
                            },
                            screenshot: {
                              height: 42,
                              uri: 'Test string',
                              width: 42,
                            },
                            swipe: {
                              end: {
                                xCoordinate: 42,
                                yCoordinate: 42,
                              },
                              start: {
                                xCoordinate: 42,
                                yCoordinate: 42,
                              },
                            },
                            tap: {
                              xCoordinate: 42,
                              yCoordinate: 42,
                            },
                            textInput: 'Test string',
                            wait: {
                              duration: 'Test string',
                            },
                          },
                        ],
                      },
                      explanation: 'Test string',
                      startTime: 'Test string',
                      terminalAction: {
                        reason: 'Test string',
                        screenshot: {
                          height: 42,
                          uri: 'Test string',
                          width: 42,
                        },
                      },
                    },
                  ],
                },
                state: 'Test string',
                step: {
                  assertion: 'Test string',
                  goal: 'Test string',
                  hint: 'Test string',
                  successCriteria: 'Test string',
                  testCase: 'Test string',
                },
              },
            ],
            appCrash: {
              message: 'Test string',
              stackTrace: 'Test string',
            },
            crawlGraphUri: 'Test string',
            device: {
              locale: 'Test string',
              model: 'Test string',
              orientation: 'Test string',
              version: 'Test string',
            },
            failedReason: 'Test string',
            inconclusiveReason: 'Test string',
            resultsStoragePath: 'Test string',
            roboStats: {
              actionsPerformed: 42,
              crawlDuration: 'Test string',
              distinctVisitedScreens: 42,
              mainActivityCrawlTimedOut: true,
            },
            screenshotUris: ['Test string'],
            state: 'Test string',
            videoStartTime: 'Test string',
            videoUri: 'Test string',
          },
        ],
        displayName: 'Test string',
        loginCredential: {
          fieldHints: {
            passwordResourceName: 'Test string',
            usernameResourceName: 'Test string',
          },
          google: true,
          password: 'Test string',
          username: 'Test string',
        },
        name: 'Test string',
        testCase: 'Test string',
        testState: 'Test string',
      },
    );
    /** Get results for automated test run on release. */
    await gapi.client.firebaseappdistribution.projects.apps.releases.tests.get({
      name: 'Test string',
    });
    /** List results for automated tests run on release. */
    await gapi.client.firebaseappdistribution.projects.apps.releases.tests.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      },
    );
    /** Delete test cases. */
    await gapi.client.firebaseappdistribution.projects.apps.testCases.batchDelete(
      {
        parent: 'Test string',
      },
      {
        names: ['Test string'],
      },
    );
    /** Create a new test case. */
    await gapi.client.firebaseappdistribution.projects.apps.testCases.create(
      {
        parent: 'Test string',
        testCaseId: 'Test string',
      },
      {
        aiInstructions: {
          steps: [
            {
              assertion: 'Test string',
              goal: 'Test string',
              hint: 'Test string',
              successCriteria: 'Test string',
              testCase: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        dependentTestCases: ['Test string'],
        displayName: 'Test string',
        name: 'Test string',
        prerequisiteTestCase: 'Test string',
      },
    );
    /** Delete a test case. */
    await gapi.client.firebaseappdistribution.projects.apps.testCases.delete({
      name: 'Test string',
    });
    /** Get a test case. */
    await gapi.client.firebaseappdistribution.projects.apps.testCases.get({
      name: 'Test string',
    });
    /** List test cases. */
    await gapi.client.firebaseappdistribution.projects.apps.testCases.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a test case. */
    await gapi.client.firebaseappdistribution.projects.apps.testCases.patch(
      {
        name: 'Test string',
      },
      {
        aiInstructions: {
          steps: [
            {
              assertion: 'Test string',
              goal: 'Test string',
              hint: 'Test string',
              successCriteria: 'Test string',
              testCase: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        dependentTestCases: ['Test string'],
        displayName: 'Test string',
        name: 'Test string',
        prerequisiteTestCase: 'Test string',
      },
    );
    /** Get UDIDs of tester iOS devices in a project */
    await gapi.client.firebaseappdistribution.projects.testers.getUdids({
      mobilesdkAppId: 'Test string',
      project: 'Test string',
    });
  }
});
