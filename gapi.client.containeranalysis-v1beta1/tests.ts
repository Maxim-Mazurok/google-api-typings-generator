/* This is stub file for gapi.client.containeranalysis-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240315

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://containeranalysis.googleapis.com/$discovery/rest?version=v1beta1'
  );
  /** now we can use gapi.client.containeranalysis */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets the specified note. */
    await gapi.client.containeranalysis.projects.locations.notes.get({
      name: 'Test string',
    });
    /** Lists notes for the specified project. */
    await gapi.client.containeranalysis.projects.locations.notes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note. */
    await gapi.client.containeranalysis.projects.locations.notes.occurrences.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Gets the specified occurrence. */
    await gapi.client.containeranalysis.projects.locations.occurrences.get({
      name: 'Test string',
    });
    /** Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project. */
    await gapi.client.containeranalysis.projects.locations.occurrences.getNotes(
      {
        name: 'Test string',
      }
    );
    /** Gets a summary of the number and severity of occurrences. */
    await gapi.client.containeranalysis.projects.locations.occurrences.getVulnerabilitySummary(
      {
        filter: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists occurrences for the specified project. */
    await gapi.client.containeranalysis.projects.locations.occurrences.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Generates an SBOM and other dependency information for the given resource. */
    await gapi.client.containeranalysis.projects.locations.resources.exportSBOM(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets a summary of the packages within a given resource. */
    await gapi.client.containeranalysis.projects.locations.resources.generatePackagesSummary(
      {
        name: 'Test string',
      },
      {}
    );
    /** Creates new notes in batch. */
    await gapi.client.containeranalysis.projects.notes.batchCreate(
      {
        parent: 'Test string',
      },
      {
        notes: {
          A: {
            attestationAuthority: {
              hint: {
                humanReadableName: 'Test string',
              },
            },
            baseImage: {
              fingerprint: {
                v1Name: 'Test string',
                v2Blob: ['Test string'],
                v2Name: 'Test string',
              },
              resourceUrl: 'Test string',
            },
            build: {
              builderVersion: 'Test string',
              signature: {
                keyId: 'Test string',
                keyType: 'Test string',
                publicKey: 'Test string',
                signature: 'Test string',
              },
            },
            createTime: 'Test string',
            deployable: {
              resourceUri: ['Test string'],
            },
            discovery: {
              analysisKind: 'Test string',
            },
            expirationTime: 'Test string',
            intoto: {
              expectedCommand: ['Test string'],
              expectedMaterials: [
                {
                  artifactRule: ['Test string'],
                },
              ],
              expectedProducts: [
                {
                  artifactRule: ['Test string'],
                },
              ],
              signingKeys: [
                {
                  keyId: 'Test string',
                  keyScheme: 'Test string',
                  keyType: 'Test string',
                  publicKeyValue: 'Test string',
                },
              ],
              stepName: 'Test string',
              threshold: 'Test string',
            },
            kind: 'Test string',
            longDescription: 'Test string',
            name: 'Test string',
            package: {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              digest: [
                {
                  algo: 'Test string',
                  digestBytes: 'Test string',
                },
              ],
              distribution: [
                {
                  architecture: 'Test string',
                  cpeUri: 'Test string',
                  description: 'Test string',
                  latestVersion: {
                    epoch: 42,
                    inclusive: true,
                    kind: 'Test string',
                    name: 'Test string',
                    revision: 'Test string',
                  },
                  maintainer: 'Test string',
                  url: 'Test string',
                },
              ],
              license: {
                comments: 'Test string',
                expression: 'Test string',
              },
              maintainer: 'Test string',
              name: 'Test string',
              packageType: 'Test string',
              url: 'Test string',
              version: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
            },
            relatedNoteNames: ['Test string'],
            relatedUrl: [
              {
                label: 'Test string',
                url: 'Test string',
              },
            ],
            sbom: {
              dataLicence: 'Test string',
              spdxVersion: 'Test string',
            },
            sbomReference: {
              format: 'Test string',
              version: 'Test string',
            },
            shortDescription: 'Test string',
            spdxFile: {
              checksum: ['Test string'],
              fileType: 'Test string',
              title: 'Test string',
            },
            spdxPackage: {
              analyzed: true,
              attribution: 'Test string',
              checksum: 'Test string',
              copyright: 'Test string',
              detailedDescription: 'Test string',
              downloadLocation: 'Test string',
              externalRefs: [
                {
                  category: 'Test string',
                  comment: 'Test string',
                  locator: 'Test string',
                  type: 'Test string',
                },
              ],
              filesLicenseInfo: ['Test string'],
              homePage: 'Test string',
              licenseDeclared: {
                comments: 'Test string',
                expression: 'Test string',
              },
              originator: 'Test string',
              packageType: 'Test string',
              summaryDescription: 'Test string',
              supplier: 'Test string',
              title: 'Test string',
              verificationCode: 'Test string',
              version: 'Test string',
            },
            spdxRelationship: {
              type: 'Test string',
            },
            updateTime: 'Test string',
            vulnerability: {
              cvssScore: 42,
              cvssV2: {
                attackComplexity: 'Test string',
                attackVector: 'Test string',
                authentication: 'Test string',
                availabilityImpact: 'Test string',
                baseScore: 42,
                confidentialityImpact: 'Test string',
                exploitabilityScore: 42,
                impactScore: 42,
                integrityImpact: 'Test string',
                privilegesRequired: 'Test string',
                scope: 'Test string',
                userInteraction: 'Test string',
              },
              cvssV3: {
                attackComplexity: 'Test string',
                attackVector: 'Test string',
                availabilityImpact: 'Test string',
                baseScore: 42,
                confidentialityImpact: 'Test string',
                exploitabilityScore: 42,
                impactScore: 42,
                integrityImpact: 'Test string',
                privilegesRequired: 'Test string',
                scope: 'Test string',
                userInteraction: 'Test string',
              },
              cvssVersion: 'Test string',
              cwe: ['Test string'],
              details: [
                {
                  cpeUri: 'Test string',
                  description: 'Test string',
                  fixedLocation: {
                    cpeUri: 'Test string',
                    package: 'Test string',
                    version: {
                      epoch: 42,
                      inclusive: true,
                      kind: 'Test string',
                      name: 'Test string',
                      revision: 'Test string',
                    },
                  },
                  isObsolete: true,
                  maxAffectedVersion: {
                    epoch: 42,
                    inclusive: true,
                    kind: 'Test string',
                    name: 'Test string',
                    revision: 'Test string',
                  },
                  minAffectedVersion: {
                    epoch: 42,
                    inclusive: true,
                    kind: 'Test string',
                    name: 'Test string',
                    revision: 'Test string',
                  },
                  package: 'Test string',
                  packageType: 'Test string',
                  severityName: 'Test string',
                  source: 'Test string',
                  sourceUpdateTime: 'Test string',
                  vendor: 'Test string',
                },
              ],
              severity: 'Test string',
              sourceUpdateTime: 'Test string',
              windowsDetails: [
                {
                  cpeUri: 'Test string',
                  description: 'Test string',
                  fixingKbs: [
                    {
                      name: 'Test string',
                      url: 'Test string',
                    },
                  ],
                  name: 'Test string',
                },
              ],
            },
            vulnerabilityAssessment: {
              assessment: {
                cve: 'Test string',
                impacts: ['Test string'],
                justification: {
                  details: 'Test string',
                  justificationType: 'Test string',
                },
                longDescription: 'Test string',
                relatedUris: [
                  {
                    label: 'Test string',
                    url: 'Test string',
                  },
                ],
                remediations: [
                  {
                    details: 'Test string',
                    remediationType: 'Test string',
                    remediationUri: {
                      label: 'Test string',
                      url: 'Test string',
                    },
                  },
                ],
                shortDescription: 'Test string',
                state: 'Test string',
                vulnerabilityId: 'Test string',
              },
              languageCode: 'Test string',
              longDescription: 'Test string',
              product: {
                genericUri: 'Test string',
                id: 'Test string',
                name: 'Test string',
              },
              publisher: {
                issuingAuthority: 'Test string',
                name: 'Test string',
                publisherNamespace: 'Test string',
              },
              shortDescription: 'Test string',
              title: 'Test string',
            },
          },
        },
      }
    );
    /** Creates a new note. */
    await gapi.client.containeranalysis.projects.notes.create(
      {
        noteId: 'Test string',
        parent: 'Test string',
      },
      {
        attestationAuthority: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        baseImage: {
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          resourceUrl: 'Test string',
        },
        build: {
          builderVersion: 'Test string',
          signature: {
            keyId: 'Test string',
            keyType: 'Test string',
            publicKey: 'Test string',
            signature: 'Test string',
          },
        },
        createTime: 'Test string',
        deployable: {
          resourceUri: ['Test string'],
        },
        discovery: {
          analysisKind: 'Test string',
        },
        expirationTime: 'Test string',
        intoto: {
          expectedCommand: ['Test string'],
          expectedMaterials: [
            {
              artifactRule: ['Test string'],
            },
          ],
          expectedProducts: [
            {
              artifactRule: ['Test string'],
            },
          ],
          signingKeys: [
            {
              keyId: 'Test string',
              keyScheme: 'Test string',
              keyType: 'Test string',
              publicKeyValue: 'Test string',
            },
          ],
          stepName: 'Test string',
          threshold: 'Test string',
        },
        kind: 'Test string',
        longDescription: 'Test string',
        name: 'Test string',
        package: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          description: 'Test string',
          digest: [
            {
              algo: 'Test string',
              digestBytes: 'Test string',
            },
          ],
          distribution: [
            {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              latestVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              maintainer: 'Test string',
              url: 'Test string',
            },
          ],
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          maintainer: 'Test string',
          name: 'Test string',
          packageType: 'Test string',
          url: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        relatedNoteNames: ['Test string'],
        relatedUrl: [
          {
            label: 'Test string',
            url: 'Test string',
          },
        ],
        sbom: {
          dataLicence: 'Test string',
          spdxVersion: 'Test string',
        },
        sbomReference: {
          format: 'Test string',
          version: 'Test string',
        },
        shortDescription: 'Test string',
        spdxFile: {
          checksum: ['Test string'],
          fileType: 'Test string',
          title: 'Test string',
        },
        spdxPackage: {
          analyzed: true,
          attribution: 'Test string',
          checksum: 'Test string',
          copyright: 'Test string',
          detailedDescription: 'Test string',
          downloadLocation: 'Test string',
          externalRefs: [
            {
              category: 'Test string',
              comment: 'Test string',
              locator: 'Test string',
              type: 'Test string',
            },
          ],
          filesLicenseInfo: ['Test string'],
          homePage: 'Test string',
          licenseDeclared: {
            comments: 'Test string',
            expression: 'Test string',
          },
          originator: 'Test string',
          packageType: 'Test string',
          summaryDescription: 'Test string',
          supplier: 'Test string',
          title: 'Test string',
          verificationCode: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          type: 'Test string',
        },
        updateTime: 'Test string',
        vulnerability: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssV3: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          cwe: ['Test string'],
          details: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              isObsolete: true,
              maxAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              minAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              package: 'Test string',
              packageType: 'Test string',
              severityName: 'Test string',
              source: 'Test string',
              sourceUpdateTime: 'Test string',
              vendor: 'Test string',
            },
          ],
          severity: 'Test string',
          sourceUpdateTime: 'Test string',
          windowsDetails: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixingKbs: [
                {
                  name: 'Test string',
                  url: 'Test string',
                },
              ],
              name: 'Test string',
            },
          ],
        },
        vulnerabilityAssessment: {
          assessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            longDescription: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                url: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  url: 'Test string',
                },
              },
            ],
            shortDescription: 'Test string',
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
          languageCode: 'Test string',
          longDescription: 'Test string',
          product: {
            genericUri: 'Test string',
            id: 'Test string',
            name: 'Test string',
          },
          publisher: {
            issuingAuthority: 'Test string',
            name: 'Test string',
            publisherNamespace: 'Test string',
          },
          shortDescription: 'Test string',
          title: 'Test string',
        },
      }
    );
    /** Deletes the specified note. */
    await gapi.client.containeranalysis.projects.notes.delete({
      name: 'Test string',
    });
    /** Gets the specified note. */
    await gapi.client.containeranalysis.projects.notes.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
    await gapi.client.containeranalysis.projects.notes.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Lists notes for the specified project. */
    await gapi.client.containeranalysis.projects.notes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified note. */
    await gapi.client.containeranalysis.projects.notes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attestationAuthority: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        baseImage: {
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          resourceUrl: 'Test string',
        },
        build: {
          builderVersion: 'Test string',
          signature: {
            keyId: 'Test string',
            keyType: 'Test string',
            publicKey: 'Test string',
            signature: 'Test string',
          },
        },
        createTime: 'Test string',
        deployable: {
          resourceUri: ['Test string'],
        },
        discovery: {
          analysisKind: 'Test string',
        },
        expirationTime: 'Test string',
        intoto: {
          expectedCommand: ['Test string'],
          expectedMaterials: [
            {
              artifactRule: ['Test string'],
            },
          ],
          expectedProducts: [
            {
              artifactRule: ['Test string'],
            },
          ],
          signingKeys: [
            {
              keyId: 'Test string',
              keyScheme: 'Test string',
              keyType: 'Test string',
              publicKeyValue: 'Test string',
            },
          ],
          stepName: 'Test string',
          threshold: 'Test string',
        },
        kind: 'Test string',
        longDescription: 'Test string',
        name: 'Test string',
        package: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          description: 'Test string',
          digest: [
            {
              algo: 'Test string',
              digestBytes: 'Test string',
            },
          ],
          distribution: [
            {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              latestVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              maintainer: 'Test string',
              url: 'Test string',
            },
          ],
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          maintainer: 'Test string',
          name: 'Test string',
          packageType: 'Test string',
          url: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        relatedNoteNames: ['Test string'],
        relatedUrl: [
          {
            label: 'Test string',
            url: 'Test string',
          },
        ],
        sbom: {
          dataLicence: 'Test string',
          spdxVersion: 'Test string',
        },
        sbomReference: {
          format: 'Test string',
          version: 'Test string',
        },
        shortDescription: 'Test string',
        spdxFile: {
          checksum: ['Test string'],
          fileType: 'Test string',
          title: 'Test string',
        },
        spdxPackage: {
          analyzed: true,
          attribution: 'Test string',
          checksum: 'Test string',
          copyright: 'Test string',
          detailedDescription: 'Test string',
          downloadLocation: 'Test string',
          externalRefs: [
            {
              category: 'Test string',
              comment: 'Test string',
              locator: 'Test string',
              type: 'Test string',
            },
          ],
          filesLicenseInfo: ['Test string'],
          homePage: 'Test string',
          licenseDeclared: {
            comments: 'Test string',
            expression: 'Test string',
          },
          originator: 'Test string',
          packageType: 'Test string',
          summaryDescription: 'Test string',
          supplier: 'Test string',
          title: 'Test string',
          verificationCode: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          type: 'Test string',
        },
        updateTime: 'Test string',
        vulnerability: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssV3: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          cwe: ['Test string'],
          details: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              isObsolete: true,
              maxAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              minAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              package: 'Test string',
              packageType: 'Test string',
              severityName: 'Test string',
              source: 'Test string',
              sourceUpdateTime: 'Test string',
              vendor: 'Test string',
            },
          ],
          severity: 'Test string',
          sourceUpdateTime: 'Test string',
          windowsDetails: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixingKbs: [
                {
                  name: 'Test string',
                  url: 'Test string',
                },
              ],
              name: 'Test string',
            },
          ],
        },
        vulnerabilityAssessment: {
          assessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            longDescription: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                url: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  url: 'Test string',
                },
              },
            ],
            shortDescription: 'Test string',
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
          languageCode: 'Test string',
          longDescription: 'Test string',
          product: {
            genericUri: 'Test string',
            id: 'Test string',
            name: 'Test string',
          },
          publisher: {
            issuingAuthority: 'Test string',
            name: 'Test string',
            publisherNamespace: 'Test string',
          },
          shortDescription: 'Test string',
          title: 'Test string',
        },
      }
    );
    /** Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
    await gapi.client.containeranalysis.projects.notes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
    await gapi.client.containeranalysis.projects.notes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note. */
    await gapi.client.containeranalysis.projects.notes.occurrences.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates new occurrences in batch. */
    await gapi.client.containeranalysis.projects.occurrences.batchCreate(
      {
        parent: 'Test string',
      },
      {
        occurrences: [
          {
            attestation: {
              attestation: {
                genericSignedAttestation: {
                  contentType: 'Test string',
                  serializedPayload: 'Test string',
                  signatures: [
                    {
                      publicKeyId: 'Test string',
                      signature: 'Test string',
                    },
                  ],
                },
                pgpSignedAttestation: {
                  contentType: 'Test string',
                  pgpKeyId: 'Test string',
                  signature: 'Test string',
                },
              },
            },
            build: {
              inTotoSlsaProvenanceV1: {
                _type: 'Test string',
                predicate: {
                  buildDefinition: {
                    buildType: 'Test string',
                    externalParameters: {
                      A: 42,
                    },
                    internalParameters: {
                      A: 42,
                    },
                    resolvedDependencies: [
                      {
                        annotations: {
                          A: 42,
                        },
                        content: 'Test string',
                        digest: {
                          A: 'Test string',
                        },
                        downloadLocation: 'Test string',
                        mediaType: 'Test string',
                        name: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  runDetails: {
                    builder: {
                      builderDependencies: [
                        {
                          annotations: {
                            A: 42,
                          },
                          content: 'Test string',
                          digest: {
                            A: 'Test string',
                          },
                          downloadLocation: 'Test string',
                          mediaType: 'Test string',
                          name: 'Test string',
                          uri: 'Test string',
                        },
                      ],
                      id: 'Test string',
                      version: {
                        A: 'Test string',
                      },
                    },
                    byproducts: [
                      {
                        annotations: {
                          A: 42,
                        },
                        content: 'Test string',
                        digest: {
                          A: 'Test string',
                        },
                        downloadLocation: 'Test string',
                        mediaType: 'Test string',
                        name: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                    metadata: {
                      finishedOn: 'Test string',
                      invocationId: 'Test string',
                      startedOn: 'Test string',
                    },
                  },
                },
                predicateType: 'Test string',
                subject: [
                  {
                    digest: {
                      A: 'Test string',
                    },
                    name: 'Test string',
                  },
                ],
              },
              provenance: {
                builderVersion: 'Test string',
                buildOptions: {
                  A: 'Test string',
                },
                builtArtifacts: [
                  {
                    checksum: 'Test string',
                    id: 'Test string',
                    names: ['Test string'],
                  },
                ],
                commands: [
                  {
                    args: ['Test string'],
                    dir: 'Test string',
                    env: ['Test string'],
                    id: 'Test string',
                    name: 'Test string',
                    waitFor: ['Test string'],
                  },
                ],
                createTime: 'Test string',
                creator: 'Test string',
                endTime: 'Test string',
                id: 'Test string',
                logsUri: 'Test string',
                projectId: 'Test string',
                sourceProvenance: {
                  additionalContexts: [
                    {
                      cloudRepo: {
                        aliasContext: {
                          kind: 'Test string',
                          name: 'Test string',
                        },
                        repoId: {
                          projectRepoId: {
                            projectId: 'Test string',
                            repoName: 'Test string',
                          },
                          uid: 'Test string',
                        },
                        revisionId: 'Test string',
                      },
                      gerrit: {
                        aliasContext: {
                          kind: 'Test string',
                          name: 'Test string',
                        },
                        gerritProject: 'Test string',
                        hostUri: 'Test string',
                        revisionId: 'Test string',
                      },
                      git: {
                        revisionId: 'Test string',
                        url: 'Test string',
                      },
                      labels: {
                        A: 'Test string',
                      },
                    },
                  ],
                  artifactStorageSourceUri: 'Test string',
                  context: {
                    cloudRepo: {
                      aliasContext: {
                        kind: 'Test string',
                        name: 'Test string',
                      },
                      repoId: {
                        projectRepoId: {
                          projectId: 'Test string',
                          repoName: 'Test string',
                        },
                        uid: 'Test string',
                      },
                      revisionId: 'Test string',
                    },
                    gerrit: {
                      aliasContext: {
                        kind: 'Test string',
                        name: 'Test string',
                      },
                      gerritProject: 'Test string',
                      hostUri: 'Test string',
                      revisionId: 'Test string',
                    },
                    git: {
                      revisionId: 'Test string',
                      url: 'Test string',
                    },
                    labels: {
                      A: 'Test string',
                    },
                  },
                  fileHashes: {
                    A: {
                      fileHash: [
                        {
                          type: 'Test string',
                          value: 'Test string',
                        },
                      ],
                    },
                  },
                },
                startTime: 'Test string',
                triggerId: 'Test string',
              },
              provenanceBytes: 'Test string',
            },
            createTime: 'Test string',
            deployment: {
              deployment: {
                address: 'Test string',
                config: 'Test string',
                deployTime: 'Test string',
                platform: 'Test string',
                resourceUri: ['Test string'],
                undeployTime: 'Test string',
                userEmail: 'Test string',
              },
            },
            derivedImage: {
              derivedImage: {
                baseResourceUrl: 'Test string',
                distance: 42,
                fingerprint: {
                  v1Name: 'Test string',
                  v2Blob: ['Test string'],
                  v2Name: 'Test string',
                },
                layerInfo: [
                  {
                    arguments: 'Test string',
                    directive: 'Test string',
                  },
                ],
              },
            },
            discovered: {
              discovered: {
                analysisCompleted: {
                  analysisType: ['Test string'],
                },
                analysisError: [
                  {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                ],
                analysisStatus: 'Test string',
                analysisStatusError: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                continuousAnalysis: 'Test string',
                lastAnalysisTime: 'Test string',
                lastScanTime: 'Test string',
                sbomStatus: {
                  error: 'Test string',
                  sbomState: 'Test string',
                },
              },
            },
            envelope: {
              payload: 'Test string',
              payloadType: 'Test string',
              signatures: [
                {
                  keyid: 'Test string',
                  sig: 'Test string',
                },
              ],
            },
            installation: {
              installation: {
                architecture: 'Test string',
                cpeUri: 'Test string',
                license: {
                  comments: 'Test string',
                  expression: 'Test string',
                },
                location: [
                  {
                    cpeUri: 'Test string',
                    path: 'Test string',
                    version: {
                      epoch: 42,
                      inclusive: true,
                      kind: 'Test string',
                      name: 'Test string',
                      revision: 'Test string',
                    },
                  },
                ],
                name: 'Test string',
                packageType: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
            },
            intoto: {
              signatures: [
                {
                  keyid: 'Test string',
                  sig: 'Test string',
                },
              ],
              signed: {
                byproducts: {
                  customValues: {
                    A: 'Test string',
                  },
                },
                command: ['Test string'],
                environment: {
                  customValues: {
                    A: 'Test string',
                  },
                },
                materials: [
                  {
                    hashes: {
                      sha256: 'Test string',
                    },
                    resourceUri: 'Test string',
                  },
                ],
                products: [
                  {
                    hashes: {
                      sha256: 'Test string',
                    },
                    resourceUri: 'Test string',
                  },
                ],
              },
            },
            kind: 'Test string',
            name: 'Test string',
            noteName: 'Test string',
            remediation: 'Test string',
            resource: {
              contentHash: {
                type: 'Test string',
                value: 'Test string',
              },
              name: 'Test string',
              uri: 'Test string',
            },
            sbom: {
              createTime: 'Test string',
              creatorComment: 'Test string',
              creators: ['Test string'],
              documentComment: 'Test string',
              externalDocumentRefs: ['Test string'],
              id: 'Test string',
              licenseListVersion: 'Test string',
              namespace: 'Test string',
              title: 'Test string',
            },
            sbomReference: {
              payload: {
                _type: 'Test string',
                predicate: {
                  digest: {
                    A: 'Test string',
                  },
                  location: 'Test string',
                  mimeType: 'Test string',
                  referrerId: 'Test string',
                },
                predicateType: 'Test string',
                subject: [
                  {
                    digest: {
                      A: 'Test string',
                    },
                    name: 'Test string',
                  },
                ],
              },
              payloadType: 'Test string',
              signatures: [
                {
                  keyid: 'Test string',
                  sig: 'Test string',
                },
              ],
            },
            spdxFile: {
              attributions: ['Test string'],
              comment: 'Test string',
              contributors: ['Test string'],
              copyright: 'Test string',
              filesLicenseInfo: ['Test string'],
              id: 'Test string',
              licenseConcluded: {
                comments: 'Test string',
                expression: 'Test string',
              },
              notice: 'Test string',
            },
            spdxPackage: {
              comment: 'Test string',
              filename: 'Test string',
              homePage: 'Test string',
              id: 'Test string',
              licenseConcluded: {
                comments: 'Test string',
                expression: 'Test string',
              },
              packageType: 'Test string',
              sourceInfo: 'Test string',
              summaryDescription: 'Test string',
              title: 'Test string',
              version: 'Test string',
            },
            spdxRelationship: {
              comment: 'Test string',
              source: 'Test string',
              target: 'Test string',
              type: 'Test string',
            },
            updateTime: 'Test string',
            vulnerability: {
              cvssScore: 42,
              cvssV2: {
                attackComplexity: 'Test string',
                attackVector: 'Test string',
                authentication: 'Test string',
                availabilityImpact: 'Test string',
                baseScore: 42,
                confidentialityImpact: 'Test string',
                exploitabilityScore: 42,
                impactScore: 42,
                integrityImpact: 'Test string',
                privilegesRequired: 'Test string',
                scope: 'Test string',
                userInteraction: 'Test string',
              },
              cvssV3: {
                attackComplexity: 'Test string',
                attackVector: 'Test string',
                authentication: 'Test string',
                availabilityImpact: 'Test string',
                baseScore: 42,
                confidentialityImpact: 'Test string',
                exploitabilityScore: 42,
                impactScore: 42,
                integrityImpact: 'Test string',
                privilegesRequired: 'Test string',
                scope: 'Test string',
                userInteraction: 'Test string',
              },
              cvssVersion: 'Test string',
              effectiveSeverity: 'Test string',
              extraDetails: 'Test string',
              longDescription: 'Test string',
              packageIssue: [
                {
                  affectedLocation: {
                    cpeUri: 'Test string',
                    package: 'Test string',
                    version: {
                      epoch: 42,
                      inclusive: true,
                      kind: 'Test string',
                      name: 'Test string',
                      revision: 'Test string',
                    },
                  },
                  effectiveSeverity: 'Test string',
                  fixedLocation: {
                    cpeUri: 'Test string',
                    package: 'Test string',
                    version: {
                      epoch: 42,
                      inclusive: true,
                      kind: 'Test string',
                      name: 'Test string',
                      revision: 'Test string',
                    },
                  },
                  packageType: 'Test string',
                  severityName: 'Test string',
                },
              ],
              relatedUrls: [
                {
                  label: 'Test string',
                  url: 'Test string',
                },
              ],
              severity: 'Test string',
              shortDescription: 'Test string',
              type: 'Test string',
              vexAssessment: {
                cve: 'Test string',
                impacts: ['Test string'],
                justification: {
                  details: 'Test string',
                  justificationType: 'Test string',
                },
                noteName: 'Test string',
                relatedUris: [
                  {
                    label: 'Test string',
                    url: 'Test string',
                  },
                ],
                remediations: [
                  {
                    details: 'Test string',
                    remediationType: 'Test string',
                    remediationUri: {
                      label: 'Test string',
                      url: 'Test string',
                    },
                  },
                ],
                state: 'Test string',
                vulnerabilityId: 'Test string',
              },
            },
          },
        ],
      }
    );
    /** Creates a new occurrence. */
    await gapi.client.containeranalysis.projects.occurrences.create(
      {
        parent: 'Test string',
      },
      {
        attestation: {
          attestation: {
            genericSignedAttestation: {
              contentType: 'Test string',
              serializedPayload: 'Test string',
              signatures: [
                {
                  publicKeyId: 'Test string',
                  signature: 'Test string',
                },
              ],
            },
            pgpSignedAttestation: {
              contentType: 'Test string',
              pgpKeyId: 'Test string',
              signature: 'Test string',
            },
          },
        },
        build: {
          inTotoSlsaProvenanceV1: {
            _type: 'Test string',
            predicate: {
              buildDefinition: {
                buildType: 'Test string',
                externalParameters: {
                  A: 42,
                },
                internalParameters: {
                  A: 42,
                },
                resolvedDependencies: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
              },
              runDetails: {
                builder: {
                  builderDependencies: [
                    {
                      annotations: {
                        A: 42,
                      },
                      content: 'Test string',
                      digest: {
                        A: 'Test string',
                      },
                      downloadLocation: 'Test string',
                      mediaType: 'Test string',
                      name: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  id: 'Test string',
                  version: {
                    A: 'Test string',
                  },
                },
                byproducts: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
                metadata: {
                  finishedOn: 'Test string',
                  invocationId: 'Test string',
                  startedOn: 'Test string',
                },
              },
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          provenance: {
            builderVersion: 'Test string',
            buildOptions: {
              A: 'Test string',
            },
            builtArtifacts: [
              {
                checksum: 'Test string',
                id: 'Test string',
                names: ['Test string'],
              },
            ],
            commands: [
              {
                args: ['Test string'],
                dir: 'Test string',
                env: ['Test string'],
                id: 'Test string',
                name: 'Test string',
                waitFor: ['Test string'],
              },
            ],
            createTime: 'Test string',
            creator: 'Test string',
            endTime: 'Test string',
            id: 'Test string',
            logsUri: 'Test string',
            projectId: 'Test string',
            sourceProvenance: {
              additionalContexts: [
                {
                  cloudRepo: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    repoId: {
                      projectRepoId: {
                        projectId: 'Test string',
                        repoName: 'Test string',
                      },
                      uid: 'Test string',
                    },
                    revisionId: 'Test string',
                  },
                  gerrit: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    gerritProject: 'Test string',
                    hostUri: 'Test string',
                    revisionId: 'Test string',
                  },
                  git: {
                    revisionId: 'Test string',
                    url: 'Test string',
                  },
                  labels: {
                    A: 'Test string',
                  },
                },
              ],
              artifactStorageSourceUri: 'Test string',
              context: {
                cloudRepo: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  repoId: {
                    projectRepoId: {
                      projectId: 'Test string',
                      repoName: 'Test string',
                    },
                    uid: 'Test string',
                  },
                  revisionId: 'Test string',
                },
                gerrit: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  gerritProject: 'Test string',
                  hostUri: 'Test string',
                  revisionId: 'Test string',
                },
                git: {
                  revisionId: 'Test string',
                  url: 'Test string',
                },
                labels: {
                  A: 'Test string',
                },
              },
              fileHashes: {
                A: {
                  fileHash: [
                    {
                      type: 'Test string',
                      value: 'Test string',
                    },
                  ],
                },
              },
            },
            startTime: 'Test string',
            triggerId: 'Test string',
          },
          provenanceBytes: 'Test string',
        },
        createTime: 'Test string',
        deployment: {
          deployment: {
            address: 'Test string',
            config: 'Test string',
            deployTime: 'Test string',
            platform: 'Test string',
            resourceUri: ['Test string'],
            undeployTime: 'Test string',
            userEmail: 'Test string',
          },
        },
        derivedImage: {
          derivedImage: {
            baseResourceUrl: 'Test string',
            distance: 42,
            fingerprint: {
              v1Name: 'Test string',
              v2Blob: ['Test string'],
              v2Name: 'Test string',
            },
            layerInfo: [
              {
                arguments: 'Test string',
                directive: 'Test string',
              },
            ],
          },
        },
        discovered: {
          discovered: {
            analysisCompleted: {
              analysisType: ['Test string'],
            },
            analysisError: [
              {
                code: 42,
                details: [
                  {
                    A: 42,
                  },
                ],
                message: 'Test string',
              },
            ],
            analysisStatus: 'Test string',
            analysisStatusError: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            continuousAnalysis: 'Test string',
            lastAnalysisTime: 'Test string',
            lastScanTime: 'Test string',
            sbomStatus: {
              error: 'Test string',
              sbomState: 'Test string',
            },
          },
        },
        envelope: {
          payload: 'Test string',
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        installation: {
          installation: {
            architecture: 'Test string',
            cpeUri: 'Test string',
            license: {
              comments: 'Test string',
              expression: 'Test string',
            },
            location: [
              {
                cpeUri: 'Test string',
                path: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
            ],
            name: 'Test string',
            packageType: 'Test string',
            version: {
              epoch: 42,
              inclusive: true,
              kind: 'Test string',
              name: 'Test string',
              revision: 'Test string',
            },
          },
        },
        intoto: {
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
          signed: {
            byproducts: {
              customValues: {
                A: 'Test string',
              },
            },
            command: ['Test string'],
            environment: {
              customValues: {
                A: 'Test string',
              },
            },
            materials: [
              {
                hashes: {
                  sha256: 'Test string',
                },
                resourceUri: 'Test string',
              },
            ],
            products: [
              {
                hashes: {
                  sha256: 'Test string',
                },
                resourceUri: 'Test string',
              },
            ],
          },
        },
        kind: 'Test string',
        name: 'Test string',
        noteName: 'Test string',
        remediation: 'Test string',
        resource: {
          contentHash: {
            type: 'Test string',
            value: 'Test string',
          },
          name: 'Test string',
          uri: 'Test string',
        },
        sbom: {
          createTime: 'Test string',
          creatorComment: 'Test string',
          creators: ['Test string'],
          documentComment: 'Test string',
          externalDocumentRefs: ['Test string'],
          id: 'Test string',
          licenseListVersion: 'Test string',
          namespace: 'Test string',
          title: 'Test string',
        },
        sbomReference: {
          payload: {
            _type: 'Test string',
            predicate: {
              digest: {
                A: 'Test string',
              },
              location: 'Test string',
              mimeType: 'Test string',
              referrerId: 'Test string',
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        spdxFile: {
          attributions: ['Test string'],
          comment: 'Test string',
          contributors: ['Test string'],
          copyright: 'Test string',
          filesLicenseInfo: ['Test string'],
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          notice: 'Test string',
        },
        spdxPackage: {
          comment: 'Test string',
          filename: 'Test string',
          homePage: 'Test string',
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          packageType: 'Test string',
          sourceInfo: 'Test string',
          summaryDescription: 'Test string',
          title: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          comment: 'Test string',
          source: 'Test string',
          target: 'Test string',
          type: 'Test string',
        },
        updateTime: 'Test string',
        vulnerability: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssV3: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          effectiveSeverity: 'Test string',
          extraDetails: 'Test string',
          longDescription: 'Test string',
          packageIssue: [
            {
              affectedLocation: {
                cpeUri: 'Test string',
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              effectiveSeverity: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              packageType: 'Test string',
              severityName: 'Test string',
            },
          ],
          relatedUrls: [
            {
              label: 'Test string',
              url: 'Test string',
            },
          ],
          severity: 'Test string',
          shortDescription: 'Test string',
          type: 'Test string',
          vexAssessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            noteName: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                url: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  url: 'Test string',
                },
              },
            ],
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
        },
      }
    );
    /** Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource. */
    await gapi.client.containeranalysis.projects.occurrences.delete({
      name: 'Test string',
    });
    /** Gets the specified occurrence. */
    await gapi.client.containeranalysis.projects.occurrences.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
    await gapi.client.containeranalysis.projects.occurrences.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project. */
    await gapi.client.containeranalysis.projects.occurrences.getNotes({
      name: 'Test string',
    });
    /** Gets a summary of the number and severity of occurrences. */
    await gapi.client.containeranalysis.projects.occurrences.getVulnerabilitySummary(
      {
        filter: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists occurrences for the specified project. */
    await gapi.client.containeranalysis.projects.occurrences.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified occurrence. */
    await gapi.client.containeranalysis.projects.occurrences.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attestation: {
          attestation: {
            genericSignedAttestation: {
              contentType: 'Test string',
              serializedPayload: 'Test string',
              signatures: [
                {
                  publicKeyId: 'Test string',
                  signature: 'Test string',
                },
              ],
            },
            pgpSignedAttestation: {
              contentType: 'Test string',
              pgpKeyId: 'Test string',
              signature: 'Test string',
            },
          },
        },
        build: {
          inTotoSlsaProvenanceV1: {
            _type: 'Test string',
            predicate: {
              buildDefinition: {
                buildType: 'Test string',
                externalParameters: {
                  A: 42,
                },
                internalParameters: {
                  A: 42,
                },
                resolvedDependencies: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
              },
              runDetails: {
                builder: {
                  builderDependencies: [
                    {
                      annotations: {
                        A: 42,
                      },
                      content: 'Test string',
                      digest: {
                        A: 'Test string',
                      },
                      downloadLocation: 'Test string',
                      mediaType: 'Test string',
                      name: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  id: 'Test string',
                  version: {
                    A: 'Test string',
                  },
                },
                byproducts: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
                metadata: {
                  finishedOn: 'Test string',
                  invocationId: 'Test string',
                  startedOn: 'Test string',
                },
              },
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          provenance: {
            builderVersion: 'Test string',
            buildOptions: {
              A: 'Test string',
            },
            builtArtifacts: [
              {
                checksum: 'Test string',
                id: 'Test string',
                names: ['Test string'],
              },
            ],
            commands: [
              {
                args: ['Test string'],
                dir: 'Test string',
                env: ['Test string'],
                id: 'Test string',
                name: 'Test string',
                waitFor: ['Test string'],
              },
            ],
            createTime: 'Test string',
            creator: 'Test string',
            endTime: 'Test string',
            id: 'Test string',
            logsUri: 'Test string',
            projectId: 'Test string',
            sourceProvenance: {
              additionalContexts: [
                {
                  cloudRepo: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    repoId: {
                      projectRepoId: {
                        projectId: 'Test string',
                        repoName: 'Test string',
                      },
                      uid: 'Test string',
                    },
                    revisionId: 'Test string',
                  },
                  gerrit: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    gerritProject: 'Test string',
                    hostUri: 'Test string',
                    revisionId: 'Test string',
                  },
                  git: {
                    revisionId: 'Test string',
                    url: 'Test string',
                  },
                  labels: {
                    A: 'Test string',
                  },
                },
              ],
              artifactStorageSourceUri: 'Test string',
              context: {
                cloudRepo: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  repoId: {
                    projectRepoId: {
                      projectId: 'Test string',
                      repoName: 'Test string',
                    },
                    uid: 'Test string',
                  },
                  revisionId: 'Test string',
                },
                gerrit: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  gerritProject: 'Test string',
                  hostUri: 'Test string',
                  revisionId: 'Test string',
                },
                git: {
                  revisionId: 'Test string',
                  url: 'Test string',
                },
                labels: {
                  A: 'Test string',
                },
              },
              fileHashes: {
                A: {
                  fileHash: [
                    {
                      type: 'Test string',
                      value: 'Test string',
                    },
                  ],
                },
              },
            },
            startTime: 'Test string',
            triggerId: 'Test string',
          },
          provenanceBytes: 'Test string',
        },
        createTime: 'Test string',
        deployment: {
          deployment: {
            address: 'Test string',
            config: 'Test string',
            deployTime: 'Test string',
            platform: 'Test string',
            resourceUri: ['Test string'],
            undeployTime: 'Test string',
            userEmail: 'Test string',
          },
        },
        derivedImage: {
          derivedImage: {
            baseResourceUrl: 'Test string',
            distance: 42,
            fingerprint: {
              v1Name: 'Test string',
              v2Blob: ['Test string'],
              v2Name: 'Test string',
            },
            layerInfo: [
              {
                arguments: 'Test string',
                directive: 'Test string',
              },
            ],
          },
        },
        discovered: {
          discovered: {
            analysisCompleted: {
              analysisType: ['Test string'],
            },
            analysisError: [
              {
                code: 42,
                details: [
                  {
                    A: 42,
                  },
                ],
                message: 'Test string',
              },
            ],
            analysisStatus: 'Test string',
            analysisStatusError: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            continuousAnalysis: 'Test string',
            lastAnalysisTime: 'Test string',
            lastScanTime: 'Test string',
            sbomStatus: {
              error: 'Test string',
              sbomState: 'Test string',
            },
          },
        },
        envelope: {
          payload: 'Test string',
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        installation: {
          installation: {
            architecture: 'Test string',
            cpeUri: 'Test string',
            license: {
              comments: 'Test string',
              expression: 'Test string',
            },
            location: [
              {
                cpeUri: 'Test string',
                path: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
            ],
            name: 'Test string',
            packageType: 'Test string',
            version: {
              epoch: 42,
              inclusive: true,
              kind: 'Test string',
              name: 'Test string',
              revision: 'Test string',
            },
          },
        },
        intoto: {
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
          signed: {
            byproducts: {
              customValues: {
                A: 'Test string',
              },
            },
            command: ['Test string'],
            environment: {
              customValues: {
                A: 'Test string',
              },
            },
            materials: [
              {
                hashes: {
                  sha256: 'Test string',
                },
                resourceUri: 'Test string',
              },
            ],
            products: [
              {
                hashes: {
                  sha256: 'Test string',
                },
                resourceUri: 'Test string',
              },
            ],
          },
        },
        kind: 'Test string',
        name: 'Test string',
        noteName: 'Test string',
        remediation: 'Test string',
        resource: {
          contentHash: {
            type: 'Test string',
            value: 'Test string',
          },
          name: 'Test string',
          uri: 'Test string',
        },
        sbom: {
          createTime: 'Test string',
          creatorComment: 'Test string',
          creators: ['Test string'],
          documentComment: 'Test string',
          externalDocumentRefs: ['Test string'],
          id: 'Test string',
          licenseListVersion: 'Test string',
          namespace: 'Test string',
          title: 'Test string',
        },
        sbomReference: {
          payload: {
            _type: 'Test string',
            predicate: {
              digest: {
                A: 'Test string',
              },
              location: 'Test string',
              mimeType: 'Test string',
              referrerId: 'Test string',
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        spdxFile: {
          attributions: ['Test string'],
          comment: 'Test string',
          contributors: ['Test string'],
          copyright: 'Test string',
          filesLicenseInfo: ['Test string'],
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          notice: 'Test string',
        },
        spdxPackage: {
          comment: 'Test string',
          filename: 'Test string',
          homePage: 'Test string',
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          packageType: 'Test string',
          sourceInfo: 'Test string',
          summaryDescription: 'Test string',
          title: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          comment: 'Test string',
          source: 'Test string',
          target: 'Test string',
          type: 'Test string',
        },
        updateTime: 'Test string',
        vulnerability: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssV3: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          effectiveSeverity: 'Test string',
          extraDetails: 'Test string',
          longDescription: 'Test string',
          packageIssue: [
            {
              affectedLocation: {
                cpeUri: 'Test string',
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              effectiveSeverity: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              packageType: 'Test string',
              severityName: 'Test string',
            },
          ],
          relatedUrls: [
            {
              label: 'Test string',
              url: 'Test string',
            },
          ],
          severity: 'Test string',
          shortDescription: 'Test string',
          type: 'Test string',
          vexAssessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            noteName: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                url: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  url: 'Test string',
                },
              },
            ],
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
        },
      }
    );
    /** Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
    await gapi.client.containeranalysis.projects.occurrences.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
    await gapi.client.containeranalysis.projects.occurrences.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Generates an SBOM and other dependency information for the given resource. */
    await gapi.client.containeranalysis.projects.resources.exportSBOM(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets a summary of the packages within a given resource. */
    await gapi.client.containeranalysis.projects.resources.generatePackagesSummary(
      {
        name: 'Test string',
      },
      {}
    );
  }
});
