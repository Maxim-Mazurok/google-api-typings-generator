/* This is stub file for gapi.client.displayvideo-v3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250501

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://displayvideo.googleapis.com/$discovery/rest?version=v3',
  );
  /** now we can use gapi.client.displayvideo */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Create, see, edit, and permanently delete your Display & Video 360 entities and reports */
    'https://www.googleapis.com/auth/display-video',
    /** Create, see, and edit Display & Video 360 Campaign entities and see billing invoices */
    'https://www.googleapis.com/auth/display-video-mediaplanning',
    /** Private Service: https://www.googleapis.com/auth/display-video-user-management */
    'https://www.googleapis.com/auth/display-video-user-management',
    /** View and manage your reports in DoubleClick Bid Manager */
    'https://www.googleapis.com/auth/doubleclickbidmanager',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See https://support.google.com/displayvideo/answer/6071450. */
    await gapi.client.displayvideo.advertisers.audit({
      advertiserId: 'Test string',
      readMask: 'Test string',
    });
    /** Creates a new advertiser. Returns the newly created advertiser if successful. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors. */
    await gapi.client.displayvideo.advertisers.create(
      {},
      {
        adServerConfig: {
          cmHybridConfig: {
            cmAccountId: 'Test string',
            cmAdvertiserIds: ['Test string'],
            cmFloodlightConfigId: 'Test string',
            cmFloodlightLinkingAuthorized: true,
            cmSyncableSiteIds: ['Test string'],
            dv360ToCmCostReportingEnabled: true,
            dv360ToCmDataSharingEnabled: true,
          },
          thirdPartyOnlyConfig: {
            pixelOrderIdReportingEnabled: true,
          },
        },
        advertiserId: 'Test string',
        billingConfig: {
          billingProfileId: 'Test string',
        },
        creativeConfig: {
          dynamicCreativeEnabled: true,
          iasClientId: 'Test string',
          obaComplianceDisabled: true,
          videoCreativeDataSharingAuthorized: true,
        },
        dataAccessConfig: {
          sdfConfig: {
            overridePartnerSdfConfig: true,
            sdfConfig: {
              adminEmail: 'Test string',
              version: 'Test string',
            },
          },
        },
        displayName: 'Test string',
        entityStatus: 'Test string',
        generalConfig: {
          currencyCode: 'Test string',
          domainUrl: 'Test string',
          timeZone: 'Test string',
        },
        integrationDetails: {
          details: 'Test string',
          integrationCode: 'Test string',
        },
        name: 'Test string',
        partnerId: 'Test string',
        prismaEnabled: true,
        servingConfig: {
          exemptTvFromViewabilityTargeting: true,
        },
        updateTime: 'Test string',
      },
    );
    /** Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be recovered. */
    await gapi.client.displayvideo.advertisers.delete({
      advertiserId: 'Test string',
    });
    /** Edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests . */
    await gapi.client.displayvideo.advertisers.editAssignedTargetingOptions(
      {
        advertiserId: 'Test string',
      },
      {
        createRequests: [
          {
            assignedTargetingOptions: [
              {
                ageRangeDetails: {
                  ageRange: 'Test string',
                },
                appCategoryDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                appDetails: {
                  appId: 'Test string',
                  appPlatform: 'Test string',
                  displayName: 'Test string',
                  negative: true,
                },
                assignedTargetingOptionId: 'Test string',
                assignedTargetingOptionIdAlias: 'Test string',
                audienceGroupDetails: {
                  excludedFirstAndThirdPartyAudienceGroup: {
                    settings: [
                      {
                        firstAndThirdPartyAudienceId: 'Test string',
                        recency: 'Test string',
                      },
                    ],
                  },
                  excludedGoogleAudienceGroup: {
                    settings: [
                      {
                        googleAudienceId: 'Test string',
                      },
                    ],
                  },
                  includedCombinedAudienceGroup: {
                    settings: [
                      {
                        combinedAudienceId: 'Test string',
                      },
                    ],
                  },
                  includedCustomListGroup: {
                    settings: [
                      {
                        customListId: 'Test string',
                      },
                    ],
                  },
                  includedFirstAndThirdPartyAudienceGroups: [
                    {
                      settings: [
                        {
                          firstAndThirdPartyAudienceId: 'Test string',
                          recency: 'Test string',
                        },
                      ],
                    },
                  ],
                  includedGoogleAudienceGroup: {
                    settings: [
                      {
                        googleAudienceId: 'Test string',
                      },
                    ],
                  },
                },
                audioContentTypeDetails: {
                  audioContentType: 'Test string',
                },
                authorizedSellerStatusDetails: {
                  authorizedSellerStatus: 'Test string',
                  targetingOptionId: 'Test string',
                },
                browserDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                businessChainDetails: {
                  displayName: 'Test string',
                  proximityRadiusAmount: 42,
                  proximityRadiusUnit: 'Test string',
                  targetingOptionId: 'Test string',
                },
                carrierAndIspDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                categoryDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                channelDetails: {
                  channelId: 'Test string',
                  negative: true,
                },
                contentDurationDetails: {
                  contentDuration: 'Test string',
                  targetingOptionId: 'Test string',
                },
                contentGenreDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                contentInstreamPositionDetails: {
                  adType: 'Test string',
                  contentInstreamPosition: 'Test string',
                },
                contentOutstreamPositionDetails: {
                  adType: 'Test string',
                  contentOutstreamPosition: 'Test string',
                },
                contentStreamTypeDetails: {
                  contentStreamType: 'Test string',
                  targetingOptionId: 'Test string',
                },
                contentThemeExclusionDetails: {
                  contentTheme: 'Test string',
                  excludedContentTheme: 'Test string',
                  excludedTargetingOptionId: 'Test string',
                },
                dayAndTimeDetails: {
                  dayOfWeek: 'Test string',
                  endHour: 42,
                  startHour: 42,
                  timeZoneResolution: 'Test string',
                },
                deviceMakeModelDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                deviceTypeDetails: {
                  deviceType: 'Test string',
                  youtubeAndPartnersBidMultiplier: 42,
                },
                digitalContentLabelExclusionDetails: {
                  excludedContentRatingTier: 'Test string',
                },
                environmentDetails: {
                  environment: 'Test string',
                },
                exchangeDetails: {
                  exchange: 'Test string',
                },
                genderDetails: {
                  gender: 'Test string',
                },
                geoRegionDetails: {
                  displayName: 'Test string',
                  geoRegionType: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                householdIncomeDetails: {
                  householdIncome: 'Test string',
                },
                inheritance: 'Test string',
                inventorySourceDetails: {
                  inventorySourceId: 'Test string',
                },
                inventorySourceGroupDetails: {
                  inventorySourceGroupId: 'Test string',
                },
                keywordDetails: {
                  keyword: 'Test string',
                  negative: true,
                },
                languageDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                name: 'Test string',
                nativeContentPositionDetails: {
                  contentPosition: 'Test string',
                },
                negativeKeywordListDetails: {
                  negativeKeywordListId: 'Test string',
                },
                omidDetails: {
                  omid: 'Test string',
                },
                onScreenPositionDetails: {
                  adType: 'Test string',
                  onScreenPosition: 'Test string',
                  targetingOptionId: 'Test string',
                },
                operatingSystemDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                parentalStatusDetails: {
                  parentalStatus: 'Test string',
                },
                poiDetails: {
                  displayName: 'Test string',
                  latitude: 42,
                  longitude: 42,
                  proximityRadiusAmount: 42,
                  proximityRadiusUnit: 'Test string',
                  targetingOptionId: 'Test string',
                },
                proximityLocationListDetails: {
                  proximityLocationListId: 'Test string',
                  proximityRadius: 42,
                  proximityRadiusUnit: 'Test string',
                },
                regionalLocationListDetails: {
                  negative: true,
                  regionalLocationListId: 'Test string',
                },
                sensitiveCategoryExclusionDetails: {
                  excludedSensitiveCategory: 'Test string',
                },
                sessionPositionDetails: {
                  sessionPosition: 'Test string',
                },
                subExchangeDetails: {
                  targetingOptionId: 'Test string',
                },
                targetingType: 'Test string',
                thirdPartyVerifierDetails: {
                  adloox: {
                    adultExplicitSexualContent: 'Test string',
                    armsAmmunitionContent: 'Test string',
                    crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
                      'Test string',
                    deathInjuryMilitaryConflictContent: 'Test string',
                    debatedSensitiveSocialIssueContent: 'Test string',
                    displayIabViewability: 'Test string',
                    excludedAdlooxCategories: ['Test string'],
                    excludedFraudIvtMfaCategories: ['Test string'],
                    hateSpeechActsAggressionContent: 'Test string',
                    illegalDrugsTobaccoEcigarettesVapingAlcoholContent:
                      'Test string',
                    misinformationContent: 'Test string',
                    obscenityProfanityContent: 'Test string',
                    onlinePiracyContent: 'Test string',
                    spamHarmfulContent: 'Test string',
                    terrorismContent: 'Test string',
                    videoIabViewability: 'Test string',
                  },
                  doubleVerify: {
                    appStarRating: {
                      avoidedStarRating: 'Test string',
                      avoidInsufficientStarRating: true,
                    },
                    avoidedAgeRatings: ['Test string'],
                    brandSafetyCategories: {
                      avoidedHighSeverityCategories: ['Test string'],
                      avoidedMediumSeverityCategories: ['Test string'],
                      avoidUnknownBrandSafetyCategory: true,
                    },
                    customSegmentId: 'Test string',
                    displayViewability: {
                      iab: 'Test string',
                      viewableDuring: 'Test string',
                    },
                    fraudInvalidTraffic: {
                      avoidedFraudOption: 'Test string',
                      avoidInsufficientOption: true,
                    },
                    videoViewability: {
                      playerImpressionRate: 'Test string',
                      videoIab: 'Test string',
                      videoViewableRate: 'Test string',
                    },
                  },
                  integralAdScience: {
                    customSegmentId: ['Test string'],
                    displayViewability: 'Test string',
                    excludedAdFraudRisk: 'Test string',
                    excludedAdultRisk: 'Test string',
                    excludedAlcoholRisk: 'Test string',
                    excludedDrugsRisk: 'Test string',
                    excludedGamblingRisk: 'Test string',
                    excludedHateSpeechRisk: 'Test string',
                    excludedIllegalDownloadsRisk: 'Test string',
                    excludedOffensiveLanguageRisk: 'Test string',
                    excludedViolenceRisk: 'Test string',
                    excludeUnrateable: true,
                    qualitySyncCustomSegmentId: ['Test string'],
                    traqScoreOption: 'Test string',
                    videoViewability: 'Test string',
                  },
                },
                urlDetails: {
                  negative: true,
                  url: 'Test string',
                },
                userRewardedContentDetails: {
                  targetingOptionId: 'Test string',
                  userRewardedContent: 'Test string',
                },
                videoPlayerSizeDetails: {
                  videoPlayerSize: 'Test string',
                },
                viewabilityDetails: {
                  viewability: 'Test string',
                },
                youtubeChannelDetails: {
                  channelId: 'Test string',
                  negative: true,
                },
                youtubeVideoDetails: {
                  negative: true,
                  videoId: 'Test string',
                },
              },
            ],
            targetingType: 'Test string',
          },
        ],
        deleteRequests: [
          {
            assignedTargetingOptionIds: ['Test string'],
            targetingType: 'Test string',
          },
        ],
      },
    );
    /** Gets an advertiser. */
    await gapi.client.displayvideo.advertisers.get({
      advertiserId: 'Test string',
    });
    /** Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported. */
    await gapi.client.displayvideo.advertisers.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists assigned targeting options of an advertiser across targeting types. */
    await gapi.client.displayvideo.advertisers.listAssignedTargetingOptions({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates an existing advertiser. Returns the updated advertiser if successful. */
    await gapi.client.displayvideo.advertisers.patch(
      {
        advertiserId: 'Test string',
        updateMask: 'Test string',
      },
      {
        adServerConfig: {
          cmHybridConfig: {
            cmAccountId: 'Test string',
            cmAdvertiserIds: ['Test string'],
            cmFloodlightConfigId: 'Test string',
            cmFloodlightLinkingAuthorized: true,
            cmSyncableSiteIds: ['Test string'],
            dv360ToCmCostReportingEnabled: true,
            dv360ToCmDataSharingEnabled: true,
          },
          thirdPartyOnlyConfig: {
            pixelOrderIdReportingEnabled: true,
          },
        },
        advertiserId: 'Test string',
        billingConfig: {
          billingProfileId: 'Test string',
        },
        creativeConfig: {
          dynamicCreativeEnabled: true,
          iasClientId: 'Test string',
          obaComplianceDisabled: true,
          videoCreativeDataSharingAuthorized: true,
        },
        dataAccessConfig: {
          sdfConfig: {
            overridePartnerSdfConfig: true,
            sdfConfig: {
              adminEmail: 'Test string',
              version: 'Test string',
            },
          },
        },
        displayName: 'Test string',
        entityStatus: 'Test string',
        generalConfig: {
          currencyCode: 'Test string',
          domainUrl: 'Test string',
          timeZone: 'Test string',
        },
        integrationDetails: {
          details: 'Test string',
          integrationCode: 'Test string',
        },
        name: 'Test string',
        partnerId: 'Test string',
        prismaEnabled: true,
        servingConfig: {
          exemptTvFromViewabilityTargeting: true,
        },
        updateTime: 'Test string',
      },
    );
    /** Gets an ad group ad. */
    await gapi.client.displayvideo.advertisers.adGroupAds.get({
      adGroupAdId: 'Test string',
      advertiserId: 'Test string',
    });
    /** Lists ad group ads. */
    await gapi.client.displayvideo.advertisers.adGroupAds.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists assigned targeting options for multiple ad groups across targeting types. Inherited assigned targeting options are not included. */
    await gapi.client.displayvideo.advertisers.adGroups.bulkListAdGroupAssignedTargetingOptions(
      {
        adGroupIds: 'Test string',
        advertiserId: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets an ad group. */
    await gapi.client.displayvideo.advertisers.adGroups.get({
      adGroupId: 'Test string',
      advertiserId: 'Test string',
    });
    /** Lists ad groups. */
    await gapi.client.displayvideo.advertisers.adGroups.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets a single targeting option assigned to an ad group. Inherited assigned targeting options are not included. */
    await gapi.client.displayvideo.advertisers.adGroups.targetingTypes.assignedTargetingOptions.get(
      {
        adGroupId: 'Test string',
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists the targeting options assigned to an ad group. Inherited assigned targeting options are not included. */
    await gapi.client.displayvideo.advertisers.adGroups.targetingTypes.assignedTargetingOptions.list(
      {
        adGroupId: 'Test string',
        advertiserId: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Uploads an asset. Returns the ID of the newly uploaded asset if successful. The asset file size should be no more than 10 MB for images, 200 MB for ZIP files, and 1 GB for videos. Must be used within the [multipart media upload process](/display-video/api/guides/how-tos/upload#multipart). Examples using provided client libraries can be found in our [Creating Creatives guide](/display-video/api/guides/creating-creatives/overview#upload_an_asset). */
    await gapi.client.displayvideo.advertisers.assets.upload(
      {
        advertiserId: 'Test string',
      },
      {
        filename: 'Test string',
      },
    );
    /** Creates a new campaign. Returns the newly created campaign if successful. */
    await gapi.client.displayvideo.advertisers.campaigns.create(
      {
        advertiserId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        campaignBudgets: [
          {
            budgetAmountMicros: 'Test string',
            budgetId: 'Test string',
            budgetUnit: 'Test string',
            dateRange: {
              endDate: {
                day: 42,
                month: 42,
                year: 42,
              },
              startDate: {
                day: 42,
                month: 42,
                year: 42,
              },
            },
            displayName: 'Test string',
            externalBudgetId: 'Test string',
            externalBudgetSource: 'Test string',
            invoiceGroupingId: 'Test string',
            prismaConfig: {
              prismaCpeCode: {
                prismaClientCode: 'Test string',
                prismaEstimateCode: 'Test string',
                prismaProductCode: 'Test string',
              },
              prismaType: 'Test string',
              supplier: 'Test string',
            },
          },
        ],
        campaignFlight: {
          plannedDates: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          plannedSpendAmountMicros: 'Test string',
        },
        campaignGoal: {
          campaignGoalType: 'Test string',
          performanceGoal: {
            performanceGoalAmountMicros: 'Test string',
            performanceGoalPercentageMicros: 'Test string',
            performanceGoalString: 'Test string',
            performanceGoalType: 'Test string',
          },
        },
        campaignId: 'Test string',
        displayName: 'Test string',
        entityStatus: 'Test string',
        frequencyCap: {
          maxImpressions: 42,
          maxViews: 42,
          timeUnit: 'Test string',
          timeUnitCount: 42,
          unlimited: true,
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors. */
    await gapi.client.displayvideo.advertisers.campaigns.delete({
      advertiserId: 'Test string',
      campaignId: 'Test string',
    });
    /** Gets a campaign. */
    await gapi.client.displayvideo.advertisers.campaigns.get({
      advertiserId: 'Test string',
      campaignId: 'Test string',
    });
    /** Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with `ENTITY_STATUS_ARCHIVED` will not be included in the results. */
    await gapi.client.displayvideo.advertisers.campaigns.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists assigned targeting options of a campaign across targeting types. */
    await gapi.client.displayvideo.advertisers.campaigns.listAssignedTargetingOptions(
      {
        advertiserId: 'Test string',
        campaignId: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Updates an existing campaign. Returns the updated campaign if successful. */
    await gapi.client.displayvideo.advertisers.campaigns.patch(
      {
        advertiserId: 'Test string',
        campaignId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        campaignBudgets: [
          {
            budgetAmountMicros: 'Test string',
            budgetId: 'Test string',
            budgetUnit: 'Test string',
            dateRange: {
              endDate: {
                day: 42,
                month: 42,
                year: 42,
              },
              startDate: {
                day: 42,
                month: 42,
                year: 42,
              },
            },
            displayName: 'Test string',
            externalBudgetId: 'Test string',
            externalBudgetSource: 'Test string',
            invoiceGroupingId: 'Test string',
            prismaConfig: {
              prismaCpeCode: {
                prismaClientCode: 'Test string',
                prismaEstimateCode: 'Test string',
                prismaProductCode: 'Test string',
              },
              prismaType: 'Test string',
              supplier: 'Test string',
            },
          },
        ],
        campaignFlight: {
          plannedDates: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          plannedSpendAmountMicros: 'Test string',
        },
        campaignGoal: {
          campaignGoalType: 'Test string',
          performanceGoal: {
            performanceGoalAmountMicros: 'Test string',
            performanceGoalPercentageMicros: 'Test string',
            performanceGoalString: 'Test string',
            performanceGoalType: 'Test string',
          },
        },
        campaignId: 'Test string',
        displayName: 'Test string',
        entityStatus: 'Test string',
        frequencyCap: {
          maxImpressions: 42,
          maxViews: 42,
          timeUnit: 'Test string',
          timeUnitCount: 42,
          unlimited: true,
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets a single targeting option assigned to a campaign. */
    await gapi.client.displayvideo.advertisers.campaigns.targetingTypes.assignedTargetingOptions.get(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        campaignId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists the targeting options assigned to a campaign for a specified targeting type. */
    await gapi.client.displayvideo.advertisers.campaigns.targetingTypes.assignedTargetingOptions.list(
      {
        advertiserId: 'Test string',
        campaignId: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Creates a new channel. Returns the newly created channel if successful. */
    await gapi.client.displayvideo.advertisers.channels.create(
      {
        advertiserId: 'Test string',
        partnerId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        negativelyTargetedLineItemCount: 'Test string',
        partnerId: 'Test string',
        positivelyTargetedLineItemCount: 'Test string',
      },
    );
    /** Gets a channel for a partner or advertiser. */
    await gapi.client.displayvideo.advertisers.channels.get({
      advertiserId: 'Test string',
      channelId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists channels for a partner or advertiser. */
    await gapi.client.displayvideo.advertisers.channels.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates a channel. Returns the updated channel if successful. */
    await gapi.client.displayvideo.advertisers.channels.patch(
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        partnerId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        negativelyTargetedLineItemCount: 'Test string',
        partnerId: 'Test string',
        positivelyTargetedLineItemCount: 'Test string',
      },
    );
    /** Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites. */
    await gapi.client.displayvideo.advertisers.channels.sites.bulkEdit(
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        createdSites: [
          {
            name: 'Test string',
            urlOrAppId: 'Test string',
          },
        ],
        deletedSites: ['Test string'],
        partnerId: 'Test string',
      },
    );
    /** Creates a site in a channel. */
    await gapi.client.displayvideo.advertisers.channels.sites.create(
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        partnerId: 'Test string',
      },
      {
        name: 'Test string',
        urlOrAppId: 'Test string',
      },
    );
    /** Deletes a site from a channel. */
    await gapi.client.displayvideo.advertisers.channels.sites.delete({
      advertiserId: 'Test string',
      channelId: 'Test string',
      partnerId: 'Test string',
      urlOrAppId: 'Test string',
    });
    /** Lists sites in a channel. */
    await gapi.client.displayvideo.advertisers.channels.sites.list({
      advertiserId: 'Test string',
      channelId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors. */
    await gapi.client.displayvideo.advertisers.channels.sites.replace(
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        newSites: [
          {
            name: 'Test string',
            urlOrAppId: 'Test string',
          },
        ],
        partnerId: 'Test string',
      },
    );
    /** Creates a new creative. Returns the newly created creative if successful. A ["Standard" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request. */
    await gapi.client.displayvideo.advertisers.creatives.create(
      {
        advertiserId: 'Test string',
      },
      {
        additionalDimensions: [
          {
            heightPixels: 42,
            widthPixels: 42,
          },
        ],
        advertiserId: 'Test string',
        appendedTag: 'Test string',
        assets: [
          {
            asset: {
              content: 'Test string',
              mediaId: 'Test string',
            },
            role: 'Test string',
          },
        ],
        cmPlacementId: 'Test string',
        cmTrackingAd: {
          cmAdId: 'Test string',
          cmCreativeId: 'Test string',
          cmPlacementId: 'Test string',
        },
        companionCreativeIds: ['Test string'],
        counterEvents: [
          {
            name: 'Test string',
            reportingName: 'Test string',
          },
        ],
        createTime: 'Test string',
        creativeAttributes: ['Test string'],
        creativeId: 'Test string',
        creativeType: 'Test string',
        dimensions: {
          heightPixels: 42,
          widthPixels: 42,
        },
        displayName: 'Test string',
        dynamic: true,
        entityStatus: 'Test string',
        exitEvents: [
          {
            name: 'Test string',
            reportingName: 'Test string',
            type: 'Test string',
            url: 'Test string',
          },
        ],
        expandingDirection: 'Test string',
        expandOnHover: true,
        hostingSource: 'Test string',
        html5Video: true,
        iasCampaignMonitoring: true,
        integrationCode: 'Test string',
        jsTrackerUrl: 'Test string',
        lineItemIds: ['Test string'],
        mediaDuration: 'Test string',
        mp3Audio: true,
        name: 'Test string',
        notes: 'Test string',
        obaIcon: {
          clickTrackingUrl: 'Test string',
          dimensions: {
            heightPixels: 42,
            widthPixels: 42,
          },
          landingPageUrl: 'Test string',
          position: 'Test string',
          program: 'Test string',
          resourceMimeType: 'Test string',
          resourceUrl: 'Test string',
          viewTrackingUrl: 'Test string',
        },
        oggAudio: true,
        progressOffset: {
          percentage: 'Test string',
          seconds: 'Test string',
        },
        requireHtml5: true,
        requireMraid: true,
        requirePingForAttribution: true,
        reviewStatus: {
          approvalStatus: 'Test string',
          contentAndPolicyReviewStatus: 'Test string',
          creativeAndLandingPageReviewStatus: 'Test string',
          exchangeReviewStatuses: [
            {
              exchange: 'Test string',
              status: 'Test string',
            },
          ],
          publisherReviewStatuses: [
            {
              publisherName: 'Test string',
              status: 'Test string',
            },
          ],
        },
        skipOffset: {
          percentage: 'Test string',
          seconds: 'Test string',
        },
        skippable: true,
        thirdPartyTag: 'Test string',
        thirdPartyUrls: [
          {
            type: 'Test string',
            url: 'Test string',
          },
        ],
        timerEvents: [
          {
            name: 'Test string',
            reportingName: 'Test string',
          },
        ],
        trackerUrls: ['Test string'],
        transcodes: [
          {
            audioBitRateKbps: 'Test string',
            audioSampleRateHz: 'Test string',
            bitRateKbps: 'Test string',
            dimensions: {
              heightPixels: 42,
              widthPixels: 42,
            },
            fileSizeBytes: 'Test string',
            frameRate: 42,
            mimeType: 'Test string',
            name: 'Test string',
            transcoded: true,
          },
        ],
        universalAdId: {
          id: 'Test string',
          registry: 'Test string',
        },
        updateTime: 'Test string',
        vastTagUrl: 'Test string',
        vpaid: true,
      },
    );
    /** Deletes a creative. Returns error code `NOT_FOUND` if the creative does not exist. The creative should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, before it can be deleted. A ["Standard" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request. */
    await gapi.client.displayvideo.advertisers.creatives.delete({
      advertiserId: 'Test string',
      creativeId: 'Test string',
    });
    /** Gets a creative. */
    await gapi.client.displayvideo.advertisers.creatives.get({
      advertiserId: 'Test string',
      creativeId: 'Test string',
    });
    /** Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with `ENTITY_STATUS_ARCHIVED` will not be included in the results. */
    await gapi.client.displayvideo.advertisers.creatives.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates an existing creative. Returns the updated creative if successful. A ["Standard" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request. */
    await gapi.client.displayvideo.advertisers.creatives.patch(
      {
        advertiserId: 'Test string',
        creativeId: 'Test string',
        updateMask: 'Test string',
      },
      {
        additionalDimensions: [
          {
            heightPixels: 42,
            widthPixels: 42,
          },
        ],
        advertiserId: 'Test string',
        appendedTag: 'Test string',
        assets: [
          {
            asset: {
              content: 'Test string',
              mediaId: 'Test string',
            },
            role: 'Test string',
          },
        ],
        cmPlacementId: 'Test string',
        cmTrackingAd: {
          cmAdId: 'Test string',
          cmCreativeId: 'Test string',
          cmPlacementId: 'Test string',
        },
        companionCreativeIds: ['Test string'],
        counterEvents: [
          {
            name: 'Test string',
            reportingName: 'Test string',
          },
        ],
        createTime: 'Test string',
        creativeAttributes: ['Test string'],
        creativeId: 'Test string',
        creativeType: 'Test string',
        dimensions: {
          heightPixels: 42,
          widthPixels: 42,
        },
        displayName: 'Test string',
        dynamic: true,
        entityStatus: 'Test string',
        exitEvents: [
          {
            name: 'Test string',
            reportingName: 'Test string',
            type: 'Test string',
            url: 'Test string',
          },
        ],
        expandingDirection: 'Test string',
        expandOnHover: true,
        hostingSource: 'Test string',
        html5Video: true,
        iasCampaignMonitoring: true,
        integrationCode: 'Test string',
        jsTrackerUrl: 'Test string',
        lineItemIds: ['Test string'],
        mediaDuration: 'Test string',
        mp3Audio: true,
        name: 'Test string',
        notes: 'Test string',
        obaIcon: {
          clickTrackingUrl: 'Test string',
          dimensions: {
            heightPixels: 42,
            widthPixels: 42,
          },
          landingPageUrl: 'Test string',
          position: 'Test string',
          program: 'Test string',
          resourceMimeType: 'Test string',
          resourceUrl: 'Test string',
          viewTrackingUrl: 'Test string',
        },
        oggAudio: true,
        progressOffset: {
          percentage: 'Test string',
          seconds: 'Test string',
        },
        requireHtml5: true,
        requireMraid: true,
        requirePingForAttribution: true,
        reviewStatus: {
          approvalStatus: 'Test string',
          contentAndPolicyReviewStatus: 'Test string',
          creativeAndLandingPageReviewStatus: 'Test string',
          exchangeReviewStatuses: [
            {
              exchange: 'Test string',
              status: 'Test string',
            },
          ],
          publisherReviewStatuses: [
            {
              publisherName: 'Test string',
              status: 'Test string',
            },
          ],
        },
        skipOffset: {
          percentage: 'Test string',
          seconds: 'Test string',
        },
        skippable: true,
        thirdPartyTag: 'Test string',
        thirdPartyUrls: [
          {
            type: 'Test string',
            url: 'Test string',
          },
        ],
        timerEvents: [
          {
            name: 'Test string',
            reportingName: 'Test string',
          },
        ],
        trackerUrls: ['Test string'],
        transcodes: [
          {
            audioBitRateKbps: 'Test string',
            audioSampleRateHz: 'Test string',
            bitRateKbps: 'Test string',
            dimensions: {
              heightPixels: 42,
              widthPixels: 42,
            },
            fileSizeBytes: 'Test string',
            frameRate: 42,
            mimeType: 'Test string',
            name: 'Test string',
            transcoded: true,
          },
        ],
        universalAdId: {
          id: 'Test string',
          registry: 'Test string',
        },
        updateTime: 'Test string',
        vastTagUrl: 'Test string',
        vpaid: true,
      },
    );
    /** Creates a new insertion order. Returns the newly created insertion order if successful. */
    await gapi.client.displayvideo.advertisers.insertionOrders.create(
      {
        advertiserId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        bidStrategy: {
          fixedBid: {
            bidAmountMicros: 'Test string',
          },
          maximizeSpendAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
            raiseBidForDeals: true,
          },
          performanceGoalAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
          },
          youtubeAndPartnersBid: {
            adGroupEffectiveTargetCpaSource: 'Test string',
            adGroupEffectiveTargetCpaValue: 'Test string',
            type: 'Test string',
            value: 'Test string',
          },
        },
        budget: {
          automationType: 'Test string',
          budgetSegments: [
            {
              budgetAmountMicros: 'Test string',
              campaignBudgetId: 'Test string',
              dateRange: {
                endDate: {
                  day: 42,
                  month: 42,
                  year: 42,
                },
                startDate: {
                  day: 42,
                  month: 42,
                  year: 42,
                },
              },
              description: 'Test string',
            },
          ],
          budgetUnit: 'Test string',
        },
        campaignId: 'Test string',
        displayName: 'Test string',
        entityStatus: 'Test string',
        frequencyCap: {
          maxImpressions: 42,
          maxViews: 42,
          timeUnit: 'Test string',
          timeUnitCount: 42,
          unlimited: true,
        },
        insertionOrderId: 'Test string',
        insertionOrderType: 'Test string',
        integrationDetails: {
          details: 'Test string',
          integrationCode: 'Test string',
        },
        kpi: {
          kpiAlgorithmId: 'Test string',
          kpiAmountMicros: 'Test string',
          kpiPercentageMicros: 'Test string',
          kpiString: 'Test string',
          kpiType: 'Test string',
        },
        name: 'Test string',
        optimizationObjective: 'Test string',
        pacing: {
          dailyMaxImpressions: 'Test string',
          dailyMaxMicros: 'Test string',
          pacingPeriod: 'Test string',
          pacingType: 'Test string',
        },
        partnerCosts: [
          {
            costType: 'Test string',
            feeAmount: 'Test string',
            feePercentageMillis: 'Test string',
            feeType: 'Test string',
            invoiceType: 'Test string',
          },
        ],
        reservationType: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it. */
    await gapi.client.displayvideo.advertisers.insertionOrders.delete({
      advertiserId: 'Test string',
      insertionOrderId: 'Test string',
    });
    /** Gets an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. */
    await gapi.client.displayvideo.advertisers.insertionOrders.get({
      advertiserId: 'Test string',
      insertionOrderId: 'Test string',
    });
    /** Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with `ENTITY_STATUS_ARCHIVED` will not be included in the results. */
    await gapi.client.displayvideo.advertisers.insertionOrders.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists assigned targeting options of an insertion order across targeting types. */
    await gapi.client.displayvideo.advertisers.insertionOrders.listAssignedTargetingOptions(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        insertionOrderId: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Updates an existing insertion order. Returns the updated insertion order if successful. */
    await gapi.client.displayvideo.advertisers.insertionOrders.patch(
      {
        advertiserId: 'Test string',
        insertionOrderId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        bidStrategy: {
          fixedBid: {
            bidAmountMicros: 'Test string',
          },
          maximizeSpendAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
            raiseBidForDeals: true,
          },
          performanceGoalAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
          },
          youtubeAndPartnersBid: {
            adGroupEffectiveTargetCpaSource: 'Test string',
            adGroupEffectiveTargetCpaValue: 'Test string',
            type: 'Test string',
            value: 'Test string',
          },
        },
        budget: {
          automationType: 'Test string',
          budgetSegments: [
            {
              budgetAmountMicros: 'Test string',
              campaignBudgetId: 'Test string',
              dateRange: {
                endDate: {
                  day: 42,
                  month: 42,
                  year: 42,
                },
                startDate: {
                  day: 42,
                  month: 42,
                  year: 42,
                },
              },
              description: 'Test string',
            },
          ],
          budgetUnit: 'Test string',
        },
        campaignId: 'Test string',
        displayName: 'Test string',
        entityStatus: 'Test string',
        frequencyCap: {
          maxImpressions: 42,
          maxViews: 42,
          timeUnit: 'Test string',
          timeUnitCount: 42,
          unlimited: true,
        },
        insertionOrderId: 'Test string',
        insertionOrderType: 'Test string',
        integrationDetails: {
          details: 'Test string',
          integrationCode: 'Test string',
        },
        kpi: {
          kpiAlgorithmId: 'Test string',
          kpiAmountMicros: 'Test string',
          kpiPercentageMicros: 'Test string',
          kpiString: 'Test string',
          kpiType: 'Test string',
        },
        name: 'Test string',
        optimizationObjective: 'Test string',
        pacing: {
          dailyMaxImpressions: 'Test string',
          dailyMaxMicros: 'Test string',
          pacingPeriod: 'Test string',
          pacingType: 'Test string',
        },
        partnerCosts: [
          {
            costType: 'Test string',
            feeAmount: 'Test string',
            feePercentageMillis: 'Test string',
            feeType: 'Test string',
            invoiceType: 'Test string',
          },
        ],
        reservationType: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Assigns a targeting option to an insertion order. Returns the assigned targeting option if successful. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY` */
    await gapi.client.displayvideo.advertisers.insertionOrders.targetingTypes.assignedTargetingOptions.create(
      {
        advertiserId: 'Test string',
        insertionOrderId: 'Test string',
        targetingType: 'Test string',
      },
      {
        ageRangeDetails: {
          ageRange: 'Test string',
        },
        appCategoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        appDetails: {
          appId: 'Test string',
          appPlatform: 'Test string',
          displayName: 'Test string',
          negative: true,
        },
        assignedTargetingOptionId: 'Test string',
        assignedTargetingOptionIdAlias: 'Test string',
        audienceGroupDetails: {
          excludedFirstAndThirdPartyAudienceGroup: {
            settings: [
              {
                firstAndThirdPartyAudienceId: 'Test string',
                recency: 'Test string',
              },
            ],
          },
          excludedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
          includedCombinedAudienceGroup: {
            settings: [
              {
                combinedAudienceId: 'Test string',
              },
            ],
          },
          includedCustomListGroup: {
            settings: [
              {
                customListId: 'Test string',
              },
            ],
          },
          includedFirstAndThirdPartyAudienceGroups: [
            {
              settings: [
                {
                  firstAndThirdPartyAudienceId: 'Test string',
                  recency: 'Test string',
                },
              ],
            },
          ],
          includedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
        },
        audioContentTypeDetails: {
          audioContentType: 'Test string',
        },
        authorizedSellerStatusDetails: {
          authorizedSellerStatus: 'Test string',
          targetingOptionId: 'Test string',
        },
        browserDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        businessChainDetails: {
          displayName: 'Test string',
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        carrierAndIspDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        categoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        channelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        contentDurationDetails: {
          contentDuration: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentGenreDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        contentInstreamPositionDetails: {
          adType: 'Test string',
          contentInstreamPosition: 'Test string',
        },
        contentOutstreamPositionDetails: {
          adType: 'Test string',
          contentOutstreamPosition: 'Test string',
        },
        contentStreamTypeDetails: {
          contentStreamType: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentThemeExclusionDetails: {
          contentTheme: 'Test string',
          excludedContentTheme: 'Test string',
          excludedTargetingOptionId: 'Test string',
        },
        dayAndTimeDetails: {
          dayOfWeek: 'Test string',
          endHour: 42,
          startHour: 42,
          timeZoneResolution: 'Test string',
        },
        deviceMakeModelDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        deviceTypeDetails: {
          deviceType: 'Test string',
          youtubeAndPartnersBidMultiplier: 42,
        },
        digitalContentLabelExclusionDetails: {
          excludedContentRatingTier: 'Test string',
        },
        environmentDetails: {
          environment: 'Test string',
        },
        exchangeDetails: {
          exchange: 'Test string',
        },
        genderDetails: {
          gender: 'Test string',
        },
        geoRegionDetails: {
          displayName: 'Test string',
          geoRegionType: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        householdIncomeDetails: {
          householdIncome: 'Test string',
        },
        inheritance: 'Test string',
        inventorySourceDetails: {
          inventorySourceId: 'Test string',
        },
        inventorySourceGroupDetails: {
          inventorySourceGroupId: 'Test string',
        },
        keywordDetails: {
          keyword: 'Test string',
          negative: true,
        },
        languageDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        name: 'Test string',
        nativeContentPositionDetails: {
          contentPosition: 'Test string',
        },
        negativeKeywordListDetails: {
          negativeKeywordListId: 'Test string',
        },
        omidDetails: {
          omid: 'Test string',
        },
        onScreenPositionDetails: {
          adType: 'Test string',
          onScreenPosition: 'Test string',
          targetingOptionId: 'Test string',
        },
        operatingSystemDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        parentalStatusDetails: {
          parentalStatus: 'Test string',
        },
        poiDetails: {
          displayName: 'Test string',
          latitude: 42,
          longitude: 42,
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        proximityLocationListDetails: {
          proximityLocationListId: 'Test string',
          proximityRadius: 42,
          proximityRadiusUnit: 'Test string',
        },
        regionalLocationListDetails: {
          negative: true,
          regionalLocationListId: 'Test string',
        },
        sensitiveCategoryExclusionDetails: {
          excludedSensitiveCategory: 'Test string',
        },
        sessionPositionDetails: {
          sessionPosition: 'Test string',
        },
        subExchangeDetails: {
          targetingOptionId: 'Test string',
        },
        targetingType: 'Test string',
        thirdPartyVerifierDetails: {
          adloox: {
            adultExplicitSexualContent: 'Test string',
            armsAmmunitionContent: 'Test string',
            crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
              'Test string',
            deathInjuryMilitaryConflictContent: 'Test string',
            debatedSensitiveSocialIssueContent: 'Test string',
            displayIabViewability: 'Test string',
            excludedAdlooxCategories: ['Test string'],
            excludedFraudIvtMfaCategories: ['Test string'],
            hateSpeechActsAggressionContent: 'Test string',
            illegalDrugsTobaccoEcigarettesVapingAlcoholContent: 'Test string',
            misinformationContent: 'Test string',
            obscenityProfanityContent: 'Test string',
            onlinePiracyContent: 'Test string',
            spamHarmfulContent: 'Test string',
            terrorismContent: 'Test string',
            videoIabViewability: 'Test string',
          },
          doubleVerify: {
            appStarRating: {
              avoidedStarRating: 'Test string',
              avoidInsufficientStarRating: true,
            },
            avoidedAgeRatings: ['Test string'],
            brandSafetyCategories: {
              avoidedHighSeverityCategories: ['Test string'],
              avoidedMediumSeverityCategories: ['Test string'],
              avoidUnknownBrandSafetyCategory: true,
            },
            customSegmentId: 'Test string',
            displayViewability: {
              iab: 'Test string',
              viewableDuring: 'Test string',
            },
            fraudInvalidTraffic: {
              avoidedFraudOption: 'Test string',
              avoidInsufficientOption: true,
            },
            videoViewability: {
              playerImpressionRate: 'Test string',
              videoIab: 'Test string',
              videoViewableRate: 'Test string',
            },
          },
          integralAdScience: {
            customSegmentId: ['Test string'],
            displayViewability: 'Test string',
            excludedAdFraudRisk: 'Test string',
            excludedAdultRisk: 'Test string',
            excludedAlcoholRisk: 'Test string',
            excludedDrugsRisk: 'Test string',
            excludedGamblingRisk: 'Test string',
            excludedHateSpeechRisk: 'Test string',
            excludedIllegalDownloadsRisk: 'Test string',
            excludedOffensiveLanguageRisk: 'Test string',
            excludedViolenceRisk: 'Test string',
            excludeUnrateable: true,
            qualitySyncCustomSegmentId: ['Test string'],
            traqScoreOption: 'Test string',
            videoViewability: 'Test string',
          },
        },
        urlDetails: {
          negative: true,
          url: 'Test string',
        },
        userRewardedContentDetails: {
          targetingOptionId: 'Test string',
          userRewardedContent: 'Test string',
        },
        videoPlayerSizeDetails: {
          videoPlayerSize: 'Test string',
        },
        viewabilityDetails: {
          viewability: 'Test string',
        },
        youtubeChannelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        youtubeVideoDetails: {
          negative: true,
          videoId: 'Test string',
        },
      },
    );
    /** Deletes an assigned targeting option from an insertion order. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY` */
    await gapi.client.displayvideo.advertisers.insertionOrders.targetingTypes.assignedTargetingOptions.delete(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        insertionOrderId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Gets a single targeting option assigned to an insertion order. */
    await gapi.client.displayvideo.advertisers.insertionOrders.targetingTypes.assignedTargetingOptions.get(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        insertionOrderId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists the targeting options assigned to an insertion order. */
    await gapi.client.displayvideo.advertisers.insertionOrders.targetingTypes.assignedTargetingOptions.list(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        insertionOrderId: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a "Partner" invoice level are not retrievable through this method. */
    await gapi.client.displayvideo.advertisers.invoices.list({
      advertiserId: 'Test string',
      issueMonth: 'Test string',
      loiSapinInvoiceType: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Retrieves the invoice currency used by an advertiser in a given month. */
    await gapi.client.displayvideo.advertisers.invoices.lookupInvoiceCurrency({
      advertiserId: 'Test string',
      invoiceMonth: 'Test string',
    });
    /** Bulk edits targeting options under multiple line items. The operation will delete the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.create_requests. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkUpdate * lineItems.patch * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.bulkEditAssignedTargetingOptions(
      {
        advertiserId: 'Test string',
      },
      {
        createRequests: [
          {
            assignedTargetingOptions: [
              {
                ageRangeDetails: {
                  ageRange: 'Test string',
                },
                appCategoryDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                appDetails: {
                  appId: 'Test string',
                  appPlatform: 'Test string',
                  displayName: 'Test string',
                  negative: true,
                },
                assignedTargetingOptionId: 'Test string',
                assignedTargetingOptionIdAlias: 'Test string',
                audienceGroupDetails: {
                  excludedFirstAndThirdPartyAudienceGroup: {
                    settings: [
                      {
                        firstAndThirdPartyAudienceId: 'Test string',
                        recency: 'Test string',
                      },
                    ],
                  },
                  excludedGoogleAudienceGroup: {
                    settings: [
                      {
                        googleAudienceId: 'Test string',
                      },
                    ],
                  },
                  includedCombinedAudienceGroup: {
                    settings: [
                      {
                        combinedAudienceId: 'Test string',
                      },
                    ],
                  },
                  includedCustomListGroup: {
                    settings: [
                      {
                        customListId: 'Test string',
                      },
                    ],
                  },
                  includedFirstAndThirdPartyAudienceGroups: [
                    {
                      settings: [
                        {
                          firstAndThirdPartyAudienceId: 'Test string',
                          recency: 'Test string',
                        },
                      ],
                    },
                  ],
                  includedGoogleAudienceGroup: {
                    settings: [
                      {
                        googleAudienceId: 'Test string',
                      },
                    ],
                  },
                },
                audioContentTypeDetails: {
                  audioContentType: 'Test string',
                },
                authorizedSellerStatusDetails: {
                  authorizedSellerStatus: 'Test string',
                  targetingOptionId: 'Test string',
                },
                browserDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                businessChainDetails: {
                  displayName: 'Test string',
                  proximityRadiusAmount: 42,
                  proximityRadiusUnit: 'Test string',
                  targetingOptionId: 'Test string',
                },
                carrierAndIspDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                categoryDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                channelDetails: {
                  channelId: 'Test string',
                  negative: true,
                },
                contentDurationDetails: {
                  contentDuration: 'Test string',
                  targetingOptionId: 'Test string',
                },
                contentGenreDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                contentInstreamPositionDetails: {
                  adType: 'Test string',
                  contentInstreamPosition: 'Test string',
                },
                contentOutstreamPositionDetails: {
                  adType: 'Test string',
                  contentOutstreamPosition: 'Test string',
                },
                contentStreamTypeDetails: {
                  contentStreamType: 'Test string',
                  targetingOptionId: 'Test string',
                },
                contentThemeExclusionDetails: {
                  contentTheme: 'Test string',
                  excludedContentTheme: 'Test string',
                  excludedTargetingOptionId: 'Test string',
                },
                dayAndTimeDetails: {
                  dayOfWeek: 'Test string',
                  endHour: 42,
                  startHour: 42,
                  timeZoneResolution: 'Test string',
                },
                deviceMakeModelDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                deviceTypeDetails: {
                  deviceType: 'Test string',
                  youtubeAndPartnersBidMultiplier: 42,
                },
                digitalContentLabelExclusionDetails: {
                  excludedContentRatingTier: 'Test string',
                },
                environmentDetails: {
                  environment: 'Test string',
                },
                exchangeDetails: {
                  exchange: 'Test string',
                },
                genderDetails: {
                  gender: 'Test string',
                },
                geoRegionDetails: {
                  displayName: 'Test string',
                  geoRegionType: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                householdIncomeDetails: {
                  householdIncome: 'Test string',
                },
                inheritance: 'Test string',
                inventorySourceDetails: {
                  inventorySourceId: 'Test string',
                },
                inventorySourceGroupDetails: {
                  inventorySourceGroupId: 'Test string',
                },
                keywordDetails: {
                  keyword: 'Test string',
                  negative: true,
                },
                languageDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                name: 'Test string',
                nativeContentPositionDetails: {
                  contentPosition: 'Test string',
                },
                negativeKeywordListDetails: {
                  negativeKeywordListId: 'Test string',
                },
                omidDetails: {
                  omid: 'Test string',
                },
                onScreenPositionDetails: {
                  adType: 'Test string',
                  onScreenPosition: 'Test string',
                  targetingOptionId: 'Test string',
                },
                operatingSystemDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                parentalStatusDetails: {
                  parentalStatus: 'Test string',
                },
                poiDetails: {
                  displayName: 'Test string',
                  latitude: 42,
                  longitude: 42,
                  proximityRadiusAmount: 42,
                  proximityRadiusUnit: 'Test string',
                  targetingOptionId: 'Test string',
                },
                proximityLocationListDetails: {
                  proximityLocationListId: 'Test string',
                  proximityRadius: 42,
                  proximityRadiusUnit: 'Test string',
                },
                regionalLocationListDetails: {
                  negative: true,
                  regionalLocationListId: 'Test string',
                },
                sensitiveCategoryExclusionDetails: {
                  excludedSensitiveCategory: 'Test string',
                },
                sessionPositionDetails: {
                  sessionPosition: 'Test string',
                },
                subExchangeDetails: {
                  targetingOptionId: 'Test string',
                },
                targetingType: 'Test string',
                thirdPartyVerifierDetails: {
                  adloox: {
                    adultExplicitSexualContent: 'Test string',
                    armsAmmunitionContent: 'Test string',
                    crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
                      'Test string',
                    deathInjuryMilitaryConflictContent: 'Test string',
                    debatedSensitiveSocialIssueContent: 'Test string',
                    displayIabViewability: 'Test string',
                    excludedAdlooxCategories: ['Test string'],
                    excludedFraudIvtMfaCategories: ['Test string'],
                    hateSpeechActsAggressionContent: 'Test string',
                    illegalDrugsTobaccoEcigarettesVapingAlcoholContent:
                      'Test string',
                    misinformationContent: 'Test string',
                    obscenityProfanityContent: 'Test string',
                    onlinePiracyContent: 'Test string',
                    spamHarmfulContent: 'Test string',
                    terrorismContent: 'Test string',
                    videoIabViewability: 'Test string',
                  },
                  doubleVerify: {
                    appStarRating: {
                      avoidedStarRating: 'Test string',
                      avoidInsufficientStarRating: true,
                    },
                    avoidedAgeRatings: ['Test string'],
                    brandSafetyCategories: {
                      avoidedHighSeverityCategories: ['Test string'],
                      avoidedMediumSeverityCategories: ['Test string'],
                      avoidUnknownBrandSafetyCategory: true,
                    },
                    customSegmentId: 'Test string',
                    displayViewability: {
                      iab: 'Test string',
                      viewableDuring: 'Test string',
                    },
                    fraudInvalidTraffic: {
                      avoidedFraudOption: 'Test string',
                      avoidInsufficientOption: true,
                    },
                    videoViewability: {
                      playerImpressionRate: 'Test string',
                      videoIab: 'Test string',
                      videoViewableRate: 'Test string',
                    },
                  },
                  integralAdScience: {
                    customSegmentId: ['Test string'],
                    displayViewability: 'Test string',
                    excludedAdFraudRisk: 'Test string',
                    excludedAdultRisk: 'Test string',
                    excludedAlcoholRisk: 'Test string',
                    excludedDrugsRisk: 'Test string',
                    excludedGamblingRisk: 'Test string',
                    excludedHateSpeechRisk: 'Test string',
                    excludedIllegalDownloadsRisk: 'Test string',
                    excludedOffensiveLanguageRisk: 'Test string',
                    excludedViolenceRisk: 'Test string',
                    excludeUnrateable: true,
                    qualitySyncCustomSegmentId: ['Test string'],
                    traqScoreOption: 'Test string',
                    videoViewability: 'Test string',
                  },
                },
                urlDetails: {
                  negative: true,
                  url: 'Test string',
                },
                userRewardedContentDetails: {
                  targetingOptionId: 'Test string',
                  userRewardedContent: 'Test string',
                },
                videoPlayerSizeDetails: {
                  videoPlayerSize: 'Test string',
                },
                viewabilityDetails: {
                  viewability: 'Test string',
                },
                youtubeChannelDetails: {
                  channelId: 'Test string',
                  negative: true,
                },
                youtubeVideoDetails: {
                  negative: true,
                  videoId: 'Test string',
                },
              },
            ],
            targetingType: 'Test string',
          },
        ],
        deleteRequests: [
          {
            assignedTargetingOptionIds: ['Test string'],
            targetingType: 'Test string',
          },
        ],
        lineItemIds: ['Test string'],
      },
    );
    /** Lists assigned targeting options for multiple line items across targeting types. */
    await gapi.client.displayvideo.advertisers.lineItems.bulkListAssignedTargetingOptions(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        lineItemIds: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Updates multiple line items. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * UpdateLineItem * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.bulkUpdate(
      {
        advertiserId: 'Test string',
      },
      {
        lineItemIds: ['Test string'],
        targetLineItem: {
          advertiserId: 'Test string',
          bidStrategy: {
            fixedBid: {
              bidAmountMicros: 'Test string',
            },
            maximizeSpendAutoBid: {
              customBiddingAlgorithmId: 'Test string',
              maxAverageCpmBidAmountMicros: 'Test string',
              performanceGoalType: 'Test string',
              raiseBidForDeals: true,
            },
            performanceGoalAutoBid: {
              customBiddingAlgorithmId: 'Test string',
              maxAverageCpmBidAmountMicros: 'Test string',
              performanceGoalAmountMicros: 'Test string',
              performanceGoalType: 'Test string',
            },
            youtubeAndPartnersBid: {
              adGroupEffectiveTargetCpaSource: 'Test string',
              adGroupEffectiveTargetCpaValue: 'Test string',
              type: 'Test string',
              value: 'Test string',
            },
          },
          budget: {
            budgetAllocationType: 'Test string',
            budgetUnit: 'Test string',
            maxAmount: 'Test string',
          },
          campaignId: 'Test string',
          conversionCounting: {
            floodlightActivityConfigs: [
              {
                floodlightActivityId: 'Test string',
                postClickLookbackWindowDays: 42,
                postViewLookbackWindowDays: 42,
              },
            ],
            postViewCountPercentageMillis: 'Test string',
          },
          creativeIds: ['Test string'],
          displayName: 'Test string',
          entityStatus: 'Test string',
          excludeNewExchanges: true,
          flight: {
            dateRange: {
              endDate: {
                day: 42,
                month: 42,
                year: 42,
              },
              startDate: {
                day: 42,
                month: 42,
                year: 42,
              },
            },
            flightDateType: 'Test string',
          },
          frequencyCap: {
            maxImpressions: 42,
            maxViews: 42,
            timeUnit: 'Test string',
            timeUnitCount: 42,
            unlimited: true,
          },
          insertionOrderId: 'Test string',
          integrationDetails: {
            details: 'Test string',
            integrationCode: 'Test string',
          },
          lineItemId: 'Test string',
          lineItemType: 'Test string',
          mobileApp: {
            appId: 'Test string',
            displayName: 'Test string',
            platform: 'Test string',
            publisher: 'Test string',
          },
          name: 'Test string',
          pacing: {
            dailyMaxImpressions: 'Test string',
            dailyMaxMicros: 'Test string',
            pacingPeriod: 'Test string',
            pacingType: 'Test string',
          },
          partnerCosts: [
            {
              costType: 'Test string',
              feeAmount: 'Test string',
              feePercentageMillis: 'Test string',
              feeType: 'Test string',
              invoiceType: 'Test string',
            },
          ],
          partnerRevenueModel: {
            markupAmount: 'Test string',
            markupType: 'Test string',
          },
          reservationType: 'Test string',
          targetingExpansion: {
            audienceExpansionLevel: 'Test string',
            audienceExpansionSeedListExcluded: true,
            enableOptimizedTargeting: true,
          },
          updateTime: 'Test string',
          warningMessages: ['Test string'],
          youtubeAndPartnersSettings: {
            contentCategory: 'Test string',
            effectiveContentCategory: 'Test string',
            inventorySourceSettings: {
              includeGoogleTv: true,
              includeYoutube: true,
              includeYoutubeVideoPartners: true,
            },
            leadFormId: 'Test string',
            linkedMerchantId: 'Test string',
            relatedVideoIds: ['Test string'],
            targetFrequency: {
              targetCount: 'Test string',
              timeUnit: 'Test string',
              timeUnitCount: 42,
            },
            thirdPartyMeasurementConfigs: {
              brandLiftVendorConfigs: [
                {
                  placementId: 'Test string',
                  vendor: 'Test string',
                },
              ],
              brandSafetyVendorConfigs: [
                {
                  placementId: 'Test string',
                  vendor: 'Test string',
                },
              ],
              reachVendorConfigs: [
                {
                  placementId: 'Test string',
                  vendor: 'Test string',
                },
              ],
              viewabilityVendorConfigs: [
                {
                  placementId: 'Test string',
                  vendor: 'Test string',
                },
              ],
            },
            videoAdSequenceSettings: {
              minimumDuration: 'Test string',
              steps: [
                {
                  adGroupId: 'Test string',
                  interactionType: 'Test string',
                  previousStepId: 'Test string',
                  stepId: 'Test string',
                },
              ],
            },
            viewFrequencyCap: {
              maxImpressions: 42,
              maxViews: 42,
              timeUnit: 'Test string',
              timeUnitCount: 42,
              unlimited: true,
            },
          },
        },
        updateMask: 'Test string',
      },
    );
    /** Creates a new line item. Returns the newly created line item if successful. YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.create(
      {
        advertiserId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        bidStrategy: {
          fixedBid: {
            bidAmountMicros: 'Test string',
          },
          maximizeSpendAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
            raiseBidForDeals: true,
          },
          performanceGoalAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
          },
          youtubeAndPartnersBid: {
            adGroupEffectiveTargetCpaSource: 'Test string',
            adGroupEffectiveTargetCpaValue: 'Test string',
            type: 'Test string',
            value: 'Test string',
          },
        },
        budget: {
          budgetAllocationType: 'Test string',
          budgetUnit: 'Test string',
          maxAmount: 'Test string',
        },
        campaignId: 'Test string',
        conversionCounting: {
          floodlightActivityConfigs: [
            {
              floodlightActivityId: 'Test string',
              postClickLookbackWindowDays: 42,
              postViewLookbackWindowDays: 42,
            },
          ],
          postViewCountPercentageMillis: 'Test string',
        },
        creativeIds: ['Test string'],
        displayName: 'Test string',
        entityStatus: 'Test string',
        excludeNewExchanges: true,
        flight: {
          dateRange: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          flightDateType: 'Test string',
        },
        frequencyCap: {
          maxImpressions: 42,
          maxViews: 42,
          timeUnit: 'Test string',
          timeUnitCount: 42,
          unlimited: true,
        },
        insertionOrderId: 'Test string',
        integrationDetails: {
          details: 'Test string',
          integrationCode: 'Test string',
        },
        lineItemId: 'Test string',
        lineItemType: 'Test string',
        mobileApp: {
          appId: 'Test string',
          displayName: 'Test string',
          platform: 'Test string',
          publisher: 'Test string',
        },
        name: 'Test string',
        pacing: {
          dailyMaxImpressions: 'Test string',
          dailyMaxMicros: 'Test string',
          pacingPeriod: 'Test string',
          pacingType: 'Test string',
        },
        partnerCosts: [
          {
            costType: 'Test string',
            feeAmount: 'Test string',
            feePercentageMillis: 'Test string',
            feeType: 'Test string',
            invoiceType: 'Test string',
          },
        ],
        partnerRevenueModel: {
          markupAmount: 'Test string',
          markupType: 'Test string',
        },
        reservationType: 'Test string',
        targetingExpansion: {
          audienceExpansionLevel: 'Test string',
          audienceExpansionSeedListExcluded: true,
          enableOptimizedTargeting: true,
        },
        updateTime: 'Test string',
        warningMessages: ['Test string'],
        youtubeAndPartnersSettings: {
          contentCategory: 'Test string',
          effectiveContentCategory: 'Test string',
          inventorySourceSettings: {
            includeGoogleTv: true,
            includeYoutube: true,
            includeYoutubeVideoPartners: true,
          },
          leadFormId: 'Test string',
          linkedMerchantId: 'Test string',
          relatedVideoIds: ['Test string'],
          targetFrequency: {
            targetCount: 'Test string',
            timeUnit: 'Test string',
            timeUnitCount: 42,
          },
          thirdPartyMeasurementConfigs: {
            brandLiftVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
            brandSafetyVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
            reachVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
            viewabilityVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
          },
          videoAdSequenceSettings: {
            minimumDuration: 'Test string',
            steps: [
              {
                adGroupId: 'Test string',
                interactionType: 'Test string',
                previousStepId: 'Test string',
                stepId: 'Test string',
              },
            ],
          },
          viewFrequencyCap: {
            maxImpressions: 42,
            maxViews: 42,
            timeUnit: 'Test string',
            timeUnitCount: 42,
            unlimited: true,
          },
        },
      },
    );
    /** Deletes a line item. Returns error code `NOT_FOUND` if the line item does not exist. The line item should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it. YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.delete({
      advertiserId: 'Test string',
      lineItemId: 'Test string',
    });
    /** Duplicates a line item. Returns the ID of the created line item if successful. YouTube & Partners line items cannot be created or updated using the API. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors. */
    await gapi.client.displayvideo.advertisers.lineItems.duplicate(
      {
        advertiserId: 'Test string',
        lineItemId: 'Test string',
      },
      {
        targetDisplayName: 'Test string',
      },
    );
    /** Creates a new line item with settings (including targeting) inherited from the insertion order and an `ENTITY_STATUS_DRAFT` entity_status. Returns the newly created line item if successful. There are default values based on the three fields: * The insertion order's insertion_order_type * The insertion order's automation_type * The given line_item_type YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.generateDefault(
      {
        advertiserId: 'Test string',
      },
      {
        displayName: 'Test string',
        insertionOrderId: 'Test string',
        lineItemType: 'Test string',
        mobileApp: {
          appId: 'Test string',
          displayName: 'Test string',
          platform: 'Test string',
          publisher: 'Test string',
        },
      },
    );
    /** Gets a line item. */
    await gapi.client.displayvideo.advertisers.lineItems.get({
      advertiserId: 'Test string',
      lineItemId: 'Test string',
    });
    /** Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with `ENTITY_STATUS_ARCHIVED` will not be included in the results. */
    await gapi.client.displayvideo.advertisers.lineItems.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates an existing line item. Returns the updated line item if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdateLineItems * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors. */
    await gapi.client.displayvideo.advertisers.lineItems.patch(
      {
        advertiserId: 'Test string',
        lineItemId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        bidStrategy: {
          fixedBid: {
            bidAmountMicros: 'Test string',
          },
          maximizeSpendAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
            raiseBidForDeals: true,
          },
          performanceGoalAutoBid: {
            customBiddingAlgorithmId: 'Test string',
            maxAverageCpmBidAmountMicros: 'Test string',
            performanceGoalAmountMicros: 'Test string',
            performanceGoalType: 'Test string',
          },
          youtubeAndPartnersBid: {
            adGroupEffectiveTargetCpaSource: 'Test string',
            adGroupEffectiveTargetCpaValue: 'Test string',
            type: 'Test string',
            value: 'Test string',
          },
        },
        budget: {
          budgetAllocationType: 'Test string',
          budgetUnit: 'Test string',
          maxAmount: 'Test string',
        },
        campaignId: 'Test string',
        conversionCounting: {
          floodlightActivityConfigs: [
            {
              floodlightActivityId: 'Test string',
              postClickLookbackWindowDays: 42,
              postViewLookbackWindowDays: 42,
            },
          ],
          postViewCountPercentageMillis: 'Test string',
        },
        creativeIds: ['Test string'],
        displayName: 'Test string',
        entityStatus: 'Test string',
        excludeNewExchanges: true,
        flight: {
          dateRange: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          flightDateType: 'Test string',
        },
        frequencyCap: {
          maxImpressions: 42,
          maxViews: 42,
          timeUnit: 'Test string',
          timeUnitCount: 42,
          unlimited: true,
        },
        insertionOrderId: 'Test string',
        integrationDetails: {
          details: 'Test string',
          integrationCode: 'Test string',
        },
        lineItemId: 'Test string',
        lineItemType: 'Test string',
        mobileApp: {
          appId: 'Test string',
          displayName: 'Test string',
          platform: 'Test string',
          publisher: 'Test string',
        },
        name: 'Test string',
        pacing: {
          dailyMaxImpressions: 'Test string',
          dailyMaxMicros: 'Test string',
          pacingPeriod: 'Test string',
          pacingType: 'Test string',
        },
        partnerCosts: [
          {
            costType: 'Test string',
            feeAmount: 'Test string',
            feePercentageMillis: 'Test string',
            feeType: 'Test string',
            invoiceType: 'Test string',
          },
        ],
        partnerRevenueModel: {
          markupAmount: 'Test string',
          markupType: 'Test string',
        },
        reservationType: 'Test string',
        targetingExpansion: {
          audienceExpansionLevel: 'Test string',
          audienceExpansionSeedListExcluded: true,
          enableOptimizedTargeting: true,
        },
        updateTime: 'Test string',
        warningMessages: ['Test string'],
        youtubeAndPartnersSettings: {
          contentCategory: 'Test string',
          effectiveContentCategory: 'Test string',
          inventorySourceSettings: {
            includeGoogleTv: true,
            includeYoutube: true,
            includeYoutubeVideoPartners: true,
          },
          leadFormId: 'Test string',
          linkedMerchantId: 'Test string',
          relatedVideoIds: ['Test string'],
          targetFrequency: {
            targetCount: 'Test string',
            timeUnit: 'Test string',
            timeUnitCount: 42,
          },
          thirdPartyMeasurementConfigs: {
            brandLiftVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
            brandSafetyVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
            reachVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
            viewabilityVendorConfigs: [
              {
                placementId: 'Test string',
                vendor: 'Test string',
              },
            ],
          },
          videoAdSequenceSettings: {
            minimumDuration: 'Test string',
            steps: [
              {
                adGroupId: 'Test string',
                interactionType: 'Test string',
                previousStepId: 'Test string',
                stepId: 'Test string',
              },
            ],
          },
          viewFrequencyCap: {
            maxImpressions: 42,
            maxViews: 42,
            timeUnit: 'Test string',
            timeUnitCount: 42,
            unlimited: true,
          },
        },
      },
    );
    /** Assigns a targeting option to a line item. Returns the assigned targeting option if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * DeleteLineItemAssignedTargetingOption YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.create(
      {
        advertiserId: 'Test string',
        lineItemId: 'Test string',
        targetingType: 'Test string',
      },
      {
        ageRangeDetails: {
          ageRange: 'Test string',
        },
        appCategoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        appDetails: {
          appId: 'Test string',
          appPlatform: 'Test string',
          displayName: 'Test string',
          negative: true,
        },
        assignedTargetingOptionId: 'Test string',
        assignedTargetingOptionIdAlias: 'Test string',
        audienceGroupDetails: {
          excludedFirstAndThirdPartyAudienceGroup: {
            settings: [
              {
                firstAndThirdPartyAudienceId: 'Test string',
                recency: 'Test string',
              },
            ],
          },
          excludedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
          includedCombinedAudienceGroup: {
            settings: [
              {
                combinedAudienceId: 'Test string',
              },
            ],
          },
          includedCustomListGroup: {
            settings: [
              {
                customListId: 'Test string',
              },
            ],
          },
          includedFirstAndThirdPartyAudienceGroups: [
            {
              settings: [
                {
                  firstAndThirdPartyAudienceId: 'Test string',
                  recency: 'Test string',
                },
              ],
            },
          ],
          includedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
        },
        audioContentTypeDetails: {
          audioContentType: 'Test string',
        },
        authorizedSellerStatusDetails: {
          authorizedSellerStatus: 'Test string',
          targetingOptionId: 'Test string',
        },
        browserDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        businessChainDetails: {
          displayName: 'Test string',
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        carrierAndIspDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        categoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        channelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        contentDurationDetails: {
          contentDuration: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentGenreDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        contentInstreamPositionDetails: {
          adType: 'Test string',
          contentInstreamPosition: 'Test string',
        },
        contentOutstreamPositionDetails: {
          adType: 'Test string',
          contentOutstreamPosition: 'Test string',
        },
        contentStreamTypeDetails: {
          contentStreamType: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentThemeExclusionDetails: {
          contentTheme: 'Test string',
          excludedContentTheme: 'Test string',
          excludedTargetingOptionId: 'Test string',
        },
        dayAndTimeDetails: {
          dayOfWeek: 'Test string',
          endHour: 42,
          startHour: 42,
          timeZoneResolution: 'Test string',
        },
        deviceMakeModelDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        deviceTypeDetails: {
          deviceType: 'Test string',
          youtubeAndPartnersBidMultiplier: 42,
        },
        digitalContentLabelExclusionDetails: {
          excludedContentRatingTier: 'Test string',
        },
        environmentDetails: {
          environment: 'Test string',
        },
        exchangeDetails: {
          exchange: 'Test string',
        },
        genderDetails: {
          gender: 'Test string',
        },
        geoRegionDetails: {
          displayName: 'Test string',
          geoRegionType: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        householdIncomeDetails: {
          householdIncome: 'Test string',
        },
        inheritance: 'Test string',
        inventorySourceDetails: {
          inventorySourceId: 'Test string',
        },
        inventorySourceGroupDetails: {
          inventorySourceGroupId: 'Test string',
        },
        keywordDetails: {
          keyword: 'Test string',
          negative: true,
        },
        languageDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        name: 'Test string',
        nativeContentPositionDetails: {
          contentPosition: 'Test string',
        },
        negativeKeywordListDetails: {
          negativeKeywordListId: 'Test string',
        },
        omidDetails: {
          omid: 'Test string',
        },
        onScreenPositionDetails: {
          adType: 'Test string',
          onScreenPosition: 'Test string',
          targetingOptionId: 'Test string',
        },
        operatingSystemDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        parentalStatusDetails: {
          parentalStatus: 'Test string',
        },
        poiDetails: {
          displayName: 'Test string',
          latitude: 42,
          longitude: 42,
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        proximityLocationListDetails: {
          proximityLocationListId: 'Test string',
          proximityRadius: 42,
          proximityRadiusUnit: 'Test string',
        },
        regionalLocationListDetails: {
          negative: true,
          regionalLocationListId: 'Test string',
        },
        sensitiveCategoryExclusionDetails: {
          excludedSensitiveCategory: 'Test string',
        },
        sessionPositionDetails: {
          sessionPosition: 'Test string',
        },
        subExchangeDetails: {
          targetingOptionId: 'Test string',
        },
        targetingType: 'Test string',
        thirdPartyVerifierDetails: {
          adloox: {
            adultExplicitSexualContent: 'Test string',
            armsAmmunitionContent: 'Test string',
            crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
              'Test string',
            deathInjuryMilitaryConflictContent: 'Test string',
            debatedSensitiveSocialIssueContent: 'Test string',
            displayIabViewability: 'Test string',
            excludedAdlooxCategories: ['Test string'],
            excludedFraudIvtMfaCategories: ['Test string'],
            hateSpeechActsAggressionContent: 'Test string',
            illegalDrugsTobaccoEcigarettesVapingAlcoholContent: 'Test string',
            misinformationContent: 'Test string',
            obscenityProfanityContent: 'Test string',
            onlinePiracyContent: 'Test string',
            spamHarmfulContent: 'Test string',
            terrorismContent: 'Test string',
            videoIabViewability: 'Test string',
          },
          doubleVerify: {
            appStarRating: {
              avoidedStarRating: 'Test string',
              avoidInsufficientStarRating: true,
            },
            avoidedAgeRatings: ['Test string'],
            brandSafetyCategories: {
              avoidedHighSeverityCategories: ['Test string'],
              avoidedMediumSeverityCategories: ['Test string'],
              avoidUnknownBrandSafetyCategory: true,
            },
            customSegmentId: 'Test string',
            displayViewability: {
              iab: 'Test string',
              viewableDuring: 'Test string',
            },
            fraudInvalidTraffic: {
              avoidedFraudOption: 'Test string',
              avoidInsufficientOption: true,
            },
            videoViewability: {
              playerImpressionRate: 'Test string',
              videoIab: 'Test string',
              videoViewableRate: 'Test string',
            },
          },
          integralAdScience: {
            customSegmentId: ['Test string'],
            displayViewability: 'Test string',
            excludedAdFraudRisk: 'Test string',
            excludedAdultRisk: 'Test string',
            excludedAlcoholRisk: 'Test string',
            excludedDrugsRisk: 'Test string',
            excludedGamblingRisk: 'Test string',
            excludedHateSpeechRisk: 'Test string',
            excludedIllegalDownloadsRisk: 'Test string',
            excludedOffensiveLanguageRisk: 'Test string',
            excludedViolenceRisk: 'Test string',
            excludeUnrateable: true,
            qualitySyncCustomSegmentId: ['Test string'],
            traqScoreOption: 'Test string',
            videoViewability: 'Test string',
          },
        },
        urlDetails: {
          negative: true,
          url: 'Test string',
        },
        userRewardedContentDetails: {
          targetingOptionId: 'Test string',
          userRewardedContent: 'Test string',
        },
        videoPlayerSizeDetails: {
          videoPlayerSize: 'Test string',
        },
        viewabilityDetails: {
          viewability: 'Test string',
        },
        youtubeChannelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        youtubeVideoDetails: {
          negative: true,
          videoId: 'Test string',
        },
      },
    );
    /** Deletes an assigned targeting option from a line item. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * CreateLineItemAssignedTargetingOption YouTube & Partners line items cannot be created or updated using the API. */
    await gapi.client.displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.delete(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        lineItemId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Gets a single targeting option assigned to a line item. */
    await gapi.client.displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.get(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        lineItemId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists the targeting options assigned to a line item. */
    await gapi.client.displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.list(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        lineItemId: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Creates a new location list. Returns the newly created location list if successful. */
    await gapi.client.displayvideo.advertisers.locationLists.create(
      {
        advertiserId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        displayName: 'Test string',
        locationListId: 'Test string',
        locationType: 'Test string',
        name: 'Test string',
      },
    );
    /** Gets a location list. */
    await gapi.client.displayvideo.advertisers.locationLists.get({
      advertiserId: 'Test string',
      locationListId: 'Test string',
    });
    /** Lists location lists based on a given advertiser id. */
    await gapi.client.displayvideo.advertisers.locationLists.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a location list. Returns the updated location list if successful. */
    await gapi.client.displayvideo.advertisers.locationLists.patch(
      {
        advertiserId: 'Test string',
        locationListId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        displayName: 'Test string',
        locationListId: 'Test string',
        locationType: 'Test string',
        name: 'Test string',
      },
    );
    /** Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in deletedAssignedLocations and then create the assigned locations provided in createdAssignedLocations. */
    await gapi.client.displayvideo.advertisers.locationLists.assignedLocations.bulkEdit(
      {
        advertiserId: 'Test string',
        locationListId: 'Test string',
      },
      {
        createdAssignedLocations: [
          {
            assignedLocationId: 'Test string',
            name: 'Test string',
            targetingOptionId: 'Test string',
          },
        ],
        deletedAssignedLocations: ['Test string'],
      },
    );
    /** Creates an assignment between a location and a location list. */
    await gapi.client.displayvideo.advertisers.locationLists.assignedLocations.create(
      {
        advertiserId: 'Test string',
        locationListId: 'Test string',
      },
      {
        assignedLocationId: 'Test string',
        name: 'Test string',
        targetingOptionId: 'Test string',
      },
    );
    /** Deletes the assignment between a location and a location list. */
    await gapi.client.displayvideo.advertisers.locationLists.assignedLocations.delete(
      {
        advertiserId: 'Test string',
        assignedLocationId: 'Test string',
        locationListId: 'Test string',
      },
    );
    /** Lists locations assigned to a location list. */
    await gapi.client.displayvideo.advertisers.locationLists.assignedLocations.list(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        locationListId: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Creates a new negative keyword list. Returns the newly created negative keyword list if successful. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.create(
      {
        advertiserId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        negativeKeywordListId: 'Test string',
        targetedLineItemCount: 'Test string',
      },
    );
    /** Deletes a negative keyword list given an advertiser ID and a negative keyword list ID. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.delete({
      advertiserId: 'Test string',
      negativeKeywordListId: 'Test string',
    });
    /** Gets a negative keyword list given an advertiser ID and a negative keyword list ID. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.get({
      advertiserId: 'Test string',
      negativeKeywordListId: 'Test string',
    });
    /** Lists negative keyword lists based on a given advertiser id. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.list({
      advertiserId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates a negative keyword list. Returns the updated negative keyword list if successful. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.patch(
      {
        advertiserId: 'Test string',
        negativeKeywordListId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        negativeKeywordListId: 'Test string',
        targetedLineItemCount: 'Test string',
      },
    );
    /** Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a partial success or partial failure. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.negativeKeywords.bulkEdit(
      {
        advertiserId: 'Test string',
        negativeKeywordListId: 'Test string',
      },
      {
        createdNegativeKeywords: [
          {
            keywordValue: 'Test string',
            name: 'Test string',
          },
        ],
        deletedNegativeKeywords: ['Test string'],
      },
    );
    /** Creates a negative keyword in a negative keyword list. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.negativeKeywords.create(
      {
        advertiserId: 'Test string',
        negativeKeywordListId: 'Test string',
      },
      {
        keywordValue: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a negative keyword from a negative keyword list. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.negativeKeywords.delete(
      {
        advertiserId: 'Test string',
        keywordValue: 'Test string',
        negativeKeywordListId: 'Test string',
      },
    );
    /** Lists negative keywords in a negative keyword list. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.negativeKeywords.list(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        negativeKeywordListId: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in ReplaceNegativeKeywordsRequest.new_negative_keywords. */
    await gapi.client.displayvideo.advertisers.negativeKeywordLists.negativeKeywords.replace(
      {
        advertiserId: 'Test string',
        negativeKeywordListId: 'Test string',
      },
      {
        newNegativeKeywords: [
          {
            keywordValue: 'Test string',
            name: 'Test string',
          },
        ],
      },
    );
    /** Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful. */
    await gapi.client.displayvideo.advertisers.targetingTypes.assignedTargetingOptions.create(
      {
        advertiserId: 'Test string',
        targetingType: 'Test string',
      },
      {
        ageRangeDetails: {
          ageRange: 'Test string',
        },
        appCategoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        appDetails: {
          appId: 'Test string',
          appPlatform: 'Test string',
          displayName: 'Test string',
          negative: true,
        },
        assignedTargetingOptionId: 'Test string',
        assignedTargetingOptionIdAlias: 'Test string',
        audienceGroupDetails: {
          excludedFirstAndThirdPartyAudienceGroup: {
            settings: [
              {
                firstAndThirdPartyAudienceId: 'Test string',
                recency: 'Test string',
              },
            ],
          },
          excludedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
          includedCombinedAudienceGroup: {
            settings: [
              {
                combinedAudienceId: 'Test string',
              },
            ],
          },
          includedCustomListGroup: {
            settings: [
              {
                customListId: 'Test string',
              },
            ],
          },
          includedFirstAndThirdPartyAudienceGroups: [
            {
              settings: [
                {
                  firstAndThirdPartyAudienceId: 'Test string',
                  recency: 'Test string',
                },
              ],
            },
          ],
          includedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
        },
        audioContentTypeDetails: {
          audioContentType: 'Test string',
        },
        authorizedSellerStatusDetails: {
          authorizedSellerStatus: 'Test string',
          targetingOptionId: 'Test string',
        },
        browserDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        businessChainDetails: {
          displayName: 'Test string',
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        carrierAndIspDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        categoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        channelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        contentDurationDetails: {
          contentDuration: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentGenreDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        contentInstreamPositionDetails: {
          adType: 'Test string',
          contentInstreamPosition: 'Test string',
        },
        contentOutstreamPositionDetails: {
          adType: 'Test string',
          contentOutstreamPosition: 'Test string',
        },
        contentStreamTypeDetails: {
          contentStreamType: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentThemeExclusionDetails: {
          contentTheme: 'Test string',
          excludedContentTheme: 'Test string',
          excludedTargetingOptionId: 'Test string',
        },
        dayAndTimeDetails: {
          dayOfWeek: 'Test string',
          endHour: 42,
          startHour: 42,
          timeZoneResolution: 'Test string',
        },
        deviceMakeModelDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        deviceTypeDetails: {
          deviceType: 'Test string',
          youtubeAndPartnersBidMultiplier: 42,
        },
        digitalContentLabelExclusionDetails: {
          excludedContentRatingTier: 'Test string',
        },
        environmentDetails: {
          environment: 'Test string',
        },
        exchangeDetails: {
          exchange: 'Test string',
        },
        genderDetails: {
          gender: 'Test string',
        },
        geoRegionDetails: {
          displayName: 'Test string',
          geoRegionType: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        householdIncomeDetails: {
          householdIncome: 'Test string',
        },
        inheritance: 'Test string',
        inventorySourceDetails: {
          inventorySourceId: 'Test string',
        },
        inventorySourceGroupDetails: {
          inventorySourceGroupId: 'Test string',
        },
        keywordDetails: {
          keyword: 'Test string',
          negative: true,
        },
        languageDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        name: 'Test string',
        nativeContentPositionDetails: {
          contentPosition: 'Test string',
        },
        negativeKeywordListDetails: {
          negativeKeywordListId: 'Test string',
        },
        omidDetails: {
          omid: 'Test string',
        },
        onScreenPositionDetails: {
          adType: 'Test string',
          onScreenPosition: 'Test string',
          targetingOptionId: 'Test string',
        },
        operatingSystemDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        parentalStatusDetails: {
          parentalStatus: 'Test string',
        },
        poiDetails: {
          displayName: 'Test string',
          latitude: 42,
          longitude: 42,
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        proximityLocationListDetails: {
          proximityLocationListId: 'Test string',
          proximityRadius: 42,
          proximityRadiusUnit: 'Test string',
        },
        regionalLocationListDetails: {
          negative: true,
          regionalLocationListId: 'Test string',
        },
        sensitiveCategoryExclusionDetails: {
          excludedSensitiveCategory: 'Test string',
        },
        sessionPositionDetails: {
          sessionPosition: 'Test string',
        },
        subExchangeDetails: {
          targetingOptionId: 'Test string',
        },
        targetingType: 'Test string',
        thirdPartyVerifierDetails: {
          adloox: {
            adultExplicitSexualContent: 'Test string',
            armsAmmunitionContent: 'Test string',
            crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
              'Test string',
            deathInjuryMilitaryConflictContent: 'Test string',
            debatedSensitiveSocialIssueContent: 'Test string',
            displayIabViewability: 'Test string',
            excludedAdlooxCategories: ['Test string'],
            excludedFraudIvtMfaCategories: ['Test string'],
            hateSpeechActsAggressionContent: 'Test string',
            illegalDrugsTobaccoEcigarettesVapingAlcoholContent: 'Test string',
            misinformationContent: 'Test string',
            obscenityProfanityContent: 'Test string',
            onlinePiracyContent: 'Test string',
            spamHarmfulContent: 'Test string',
            terrorismContent: 'Test string',
            videoIabViewability: 'Test string',
          },
          doubleVerify: {
            appStarRating: {
              avoidedStarRating: 'Test string',
              avoidInsufficientStarRating: true,
            },
            avoidedAgeRatings: ['Test string'],
            brandSafetyCategories: {
              avoidedHighSeverityCategories: ['Test string'],
              avoidedMediumSeverityCategories: ['Test string'],
              avoidUnknownBrandSafetyCategory: true,
            },
            customSegmentId: 'Test string',
            displayViewability: {
              iab: 'Test string',
              viewableDuring: 'Test string',
            },
            fraudInvalidTraffic: {
              avoidedFraudOption: 'Test string',
              avoidInsufficientOption: true,
            },
            videoViewability: {
              playerImpressionRate: 'Test string',
              videoIab: 'Test string',
              videoViewableRate: 'Test string',
            },
          },
          integralAdScience: {
            customSegmentId: ['Test string'],
            displayViewability: 'Test string',
            excludedAdFraudRisk: 'Test string',
            excludedAdultRisk: 'Test string',
            excludedAlcoholRisk: 'Test string',
            excludedDrugsRisk: 'Test string',
            excludedGamblingRisk: 'Test string',
            excludedHateSpeechRisk: 'Test string',
            excludedIllegalDownloadsRisk: 'Test string',
            excludedOffensiveLanguageRisk: 'Test string',
            excludedViolenceRisk: 'Test string',
            excludeUnrateable: true,
            qualitySyncCustomSegmentId: ['Test string'],
            traqScoreOption: 'Test string',
            videoViewability: 'Test string',
          },
        },
        urlDetails: {
          negative: true,
          url: 'Test string',
        },
        userRewardedContentDetails: {
          targetingOptionId: 'Test string',
          userRewardedContent: 'Test string',
        },
        videoPlayerSizeDetails: {
          videoPlayerSize: 'Test string',
        },
        viewabilityDetails: {
          viewability: 'Test string',
        },
        youtubeChannelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        youtubeVideoDetails: {
          negative: true,
          videoId: 'Test string',
        },
      },
    );
    /** Deletes an assigned targeting option from an advertiser. */
    await gapi.client.displayvideo.advertisers.targetingTypes.assignedTargetingOptions.delete(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Gets a single targeting option assigned to an advertiser. */
    await gapi.client.displayvideo.advertisers.targetingTypes.assignedTargetingOptions.get(
      {
        advertiserId: 'Test string',
        assignedTargetingOptionId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists the targeting options assigned to an advertiser. */
    await gapi.client.displayvideo.advertisers.targetingTypes.assignedTargetingOptions.list(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Gets a combined audience. */
    await gapi.client.displayvideo.combinedAudiences.get({
      advertiserId: 'Test string',
      combinedAudienceId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists combined audiences. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.combinedAudiences.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful. */
    await gapi.client.displayvideo.customBiddingAlgorithms.create(
      {},
      {
        advertiserId: 'Test string',
        customBiddingAlgorithmId: 'Test string',
        customBiddingAlgorithmType: 'Test string',
        displayName: 'Test string',
        entityStatus: 'Test string',
        modelDetails: [
          {
            advertiserId: 'Test string',
            readinessState: 'Test string',
            suspensionState: 'Test string',
          },
        ],
        name: 'Test string',
        partnerId: 'Test string',
        sharedAdvertiserIds: ['Test string'],
      },
    );
    /** Gets a custom bidding algorithm. */
    await gapi.client.displayvideo.customBiddingAlgorithms.get({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.customBiddingAlgorithms.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful. Requests updating a custom bidding algorithm assigned to a line item will return an error. */
    await gapi.client.displayvideo.customBiddingAlgorithms.patch(
      {
        customBiddingAlgorithmId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        customBiddingAlgorithmId: 'Test string',
        customBiddingAlgorithmType: 'Test string',
        displayName: 'Test string',
        entityStatus: 'Test string',
        modelDetails: [
          {
            advertiserId: 'Test string',
            readinessState: 'Test string',
            suspensionState: 'Test string',
          },
        ],
        name: 'Test string',
        partnerId: 'Test string',
        sharedAdvertiserIds: ['Test string'],
      },
    );
    /** Creates a rules reference object for an AlgorithmRules file. The resulting reference object provides a resource path where the AlgorithmRules file should be uploaded. This reference object should be included when creating a new CustomBiddingAlgorithmRules resource. */
    await gapi.client.displayvideo.customBiddingAlgorithms.uploadRules({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      partnerId: 'Test string',
    });
    /** Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This reference object should be included in when creating a new custom bidding script object. */
    await gapi.client.displayvideo.customBiddingAlgorithms.uploadScript({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      partnerId: 'Test string',
    });
    /** Creates a new rules resource. Returns the newly created rules resource if successful. Requests creating a custom bidding rules resource under an algorithm assigned to a line item will return an error. */
    await gapi.client.displayvideo.customBiddingAlgorithms.rules.create(
      {
        advertiserId: 'Test string',
        customBiddingAlgorithmId: 'Test string',
        partnerId: 'Test string',
      },
      {
        active: true,
        createTime: 'Test string',
        customBiddingAlgorithmId: 'Test string',
        customBiddingAlgorithmRulesId: 'Test string',
        error: {
          errorCode: 'Test string',
        },
        name: 'Test string',
        rules: {
          resourceName: 'Test string',
        },
        state: 'Test string',
      },
    );
    /** Retrieves a rules resource. */
    await gapi.client.displayvideo.customBiddingAlgorithms.rules.get({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      customBiddingAlgorithmRulesId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists rules resources that belong to the given algorithm. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.customBiddingAlgorithms.rules.list({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Creates a new custom bidding script. Returns the newly created script if successful. Requests creating a custom bidding script under an algorithm assigned to a line item will return an error. */
    await gapi.client.displayvideo.customBiddingAlgorithms.scripts.create(
      {
        advertiserId: 'Test string',
        customBiddingAlgorithmId: 'Test string',
        partnerId: 'Test string',
      },
      {
        active: true,
        createTime: 'Test string',
        customBiddingAlgorithmId: 'Test string',
        customBiddingScriptId: 'Test string',
        errors: [
          {
            column: 'Test string',
            errorCode: 'Test string',
            errorMessage: 'Test string',
            line: 'Test string',
          },
        ],
        name: 'Test string',
        script: {
          resourceName: 'Test string',
        },
        state: 'Test string',
      },
    );
    /** Gets a custom bidding script. */
    await gapi.client.displayvideo.customBiddingAlgorithms.scripts.get({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      customBiddingScriptId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.customBiddingAlgorithms.scripts.list({
      advertiserId: 'Test string',
      customBiddingAlgorithmId: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Gets a custom list. */
    await gapi.client.displayvideo.customLists.get({
      advertiserId: 'Test string',
      customListId: 'Test string',
    });
    /** Lists custom lists. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.customLists.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID` */
    await gapi.client.displayvideo.firstAndThirdPartyAudiences.create(
      {
        advertiserId: 'Test string',
      },
      {
        activeDisplayAudienceSize: 'Test string',
        appId: 'Test string',
        audienceSource: 'Test string',
        audienceType: 'Test string',
        contactInfoList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          contactInfos: [
            {
              countryCode: 'Test string',
              hashedEmails: ['Test string'],
              hashedFirstName: 'Test string',
              hashedLastName: 'Test string',
              hashedPhoneNumbers: ['Test string'],
              zipCodes: ['Test string'],
            },
          ],
        },
        description: 'Test string',
        displayAudienceSize: 'Test string',
        displayDesktopAudienceSize: 'Test string',
        displayMobileAppAudienceSize: 'Test string',
        displayMobileWebAudienceSize: 'Test string',
        displayName: 'Test string',
        firstAndThirdPartyAudienceId: 'Test string',
        firstAndThirdPartyAudienceType: 'Test string',
        gmailAudienceSize: 'Test string',
        membershipDurationDays: 'Test string',
        mobileDeviceIdList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          mobileDeviceIds: ['Test string'],
        },
        name: 'Test string',
        youtubeAudienceSize: 'Test string',
      },
    );
    /** Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID` */
    await gapi.client.displayvideo.firstAndThirdPartyAudiences.editCustomerMatchMembers(
      {
        firstAndThirdPartyAudienceId: 'Test string',
      },
      {
        addedContactInfoList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          contactInfos: [
            {
              countryCode: 'Test string',
              hashedEmails: ['Test string'],
              hashedFirstName: 'Test string',
              hashedLastName: 'Test string',
              hashedPhoneNumbers: ['Test string'],
              zipCodes: ['Test string'],
            },
          ],
        },
        addedMobileDeviceIdList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          mobileDeviceIds: ['Test string'],
        },
        advertiserId: 'Test string',
        removedContactInfoList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          contactInfos: [
            {
              countryCode: 'Test string',
              hashedEmails: ['Test string'],
              hashedFirstName: 'Test string',
              hashedLastName: 'Test string',
              hashedPhoneNumbers: ['Test string'],
              zipCodes: ['Test string'],
            },
          ],
        },
        removedMobileDeviceIdList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          mobileDeviceIds: ['Test string'],
        },
      },
    );
    /** Gets a first and third party audience. */
    await gapi.client.displayvideo.firstAndThirdPartyAudiences.get({
      advertiserId: 'Test string',
      firstAndThirdPartyAudienceId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists first and third party audiences. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.firstAndThirdPartyAudiences.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID` */
    await gapi.client.displayvideo.firstAndThirdPartyAudiences.patch(
      {
        advertiserId: 'Test string',
        firstAndThirdPartyAudienceId: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeDisplayAudienceSize: 'Test string',
        appId: 'Test string',
        audienceSource: 'Test string',
        audienceType: 'Test string',
        contactInfoList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          contactInfos: [
            {
              countryCode: 'Test string',
              hashedEmails: ['Test string'],
              hashedFirstName: 'Test string',
              hashedLastName: 'Test string',
              hashedPhoneNumbers: ['Test string'],
              zipCodes: ['Test string'],
            },
          ],
        },
        description: 'Test string',
        displayAudienceSize: 'Test string',
        displayDesktopAudienceSize: 'Test string',
        displayMobileAppAudienceSize: 'Test string',
        displayMobileWebAudienceSize: 'Test string',
        displayName: 'Test string',
        firstAndThirdPartyAudienceId: 'Test string',
        firstAndThirdPartyAudienceType: 'Test string',
        gmailAudienceSize: 'Test string',
        membershipDurationDays: 'Test string',
        mobileDeviceIdList: {
          consent: {
            adPersonalization: 'Test string',
            adUserData: 'Test string',
          },
          mobileDeviceIds: ['Test string'],
        },
        name: 'Test string',
        youtubeAudienceSize: 'Test string',
      },
    );
    /** Gets a Floodlight group. */
    await gapi.client.displayvideo.floodlightGroups.get({
      floodlightGroupId: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates an existing Floodlight group. Returns the updated Floodlight group if successful. */
    await gapi.client.displayvideo.floodlightGroups.patch(
      {
        floodlightGroupId: 'Test string',
        partnerId: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeViewConfig: {
          displayName: 'Test string',
          minimumDuration: 'Test string',
          minimumQuartile: 'Test string',
          minimumViewability: 'Test string',
          minimumVolume: 'Test string',
        },
        customVariables: {
          A: 42,
        },
        displayName: 'Test string',
        floodlightGroupId: 'Test string',
        lookbackWindow: {
          clickDays: 42,
          impressionDays: 42,
        },
        name: 'Test string',
        webTagType: 'Test string',
      },
    );
    /** Gets a Floodlight activity. */
    await gapi.client.displayvideo.floodlightGroups.floodlightActivities.get({
      floodlightActivityId: 'Test string',
      floodlightGroupId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists Floodlight activities in a Floodlight group. */
    await gapi.client.displayvideo.floodlightGroups.floodlightActivities.list({
      floodlightGroupId: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Gets a Google audience. */
    await gapi.client.displayvideo.googleAudiences.get({
      advertiserId: 'Test string',
      googleAudienceId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists Google audiences. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.googleAudiences.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Creates a new guaranteed order. Returns the newly created guaranteed order if successful. */
    await gapi.client.displayvideo.guaranteedOrders.create(
      {
        advertiserId: 'Test string',
        partnerId: 'Test string',
      },
      {
        defaultAdvertiserId: 'Test string',
        defaultCampaignId: 'Test string',
        displayName: 'Test string',
        exchange: 'Test string',
        guaranteedOrderId: 'Test string',
        legacyGuaranteedOrderId: 'Test string',
        name: 'Test string',
        publisherName: 'Test string',
        readAccessInherited: true,
        readAdvertiserIds: ['Test string'],
        readWriteAdvertiserId: 'Test string',
        readWritePartnerId: 'Test string',
        status: {
          configStatus: 'Test string',
          entityPauseReason: 'Test string',
          entityStatus: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Edits read advertisers of a guaranteed order. */
    await gapi.client.displayvideo.guaranteedOrders.editGuaranteedOrderReadAccessors(
      {
        guaranteedOrderId: 'Test string',
      },
      {
        addedAdvertisers: ['Test string'],
        partnerId: 'Test string',
        readAccessInherited: true,
        removedAdvertisers: ['Test string'],
      },
    );
    /** Gets a guaranteed order. */
    await gapi.client.displayvideo.guaranteedOrders.get({
      advertiserId: 'Test string',
      guaranteedOrderId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists guaranteed orders that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, guaranteed orders with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results. */
    await gapi.client.displayvideo.guaranteedOrders.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates an existing guaranteed order. Returns the updated guaranteed order if successful. */
    await gapi.client.displayvideo.guaranteedOrders.patch(
      {
        advertiserId: 'Test string',
        guaranteedOrderId: 'Test string',
        partnerId: 'Test string',
        updateMask: 'Test string',
      },
      {
        defaultAdvertiserId: 'Test string',
        defaultCampaignId: 'Test string',
        displayName: 'Test string',
        exchange: 'Test string',
        guaranteedOrderId: 'Test string',
        legacyGuaranteedOrderId: 'Test string',
        name: 'Test string',
        publisherName: 'Test string',
        readAccessInherited: true,
        readAdvertiserIds: ['Test string'],
        readWriteAdvertiserId: 'Test string',
        readWritePartnerId: 'Test string',
        status: {
          configStatus: 'Test string',
          entityPauseReason: 'Test string',
          entityStatus: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Creates a new inventory source group. Returns the newly created inventory source group if successful. */
    await gapi.client.displayvideo.inventorySourceGroups.create(
      {
        advertiserId: 'Test string',
        partnerId: 'Test string',
      },
      {
        displayName: 'Test string',
        inventorySourceGroupId: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes an inventory source group. */
    await gapi.client.displayvideo.inventorySourceGroups.delete({
      advertiserId: 'Test string',
      inventorySourceGroupId: 'Test string',
      partnerId: 'Test string',
    });
    /** Gets an inventory source group. */
    await gapi.client.displayvideo.inventorySourceGroups.get({
      advertiserId: 'Test string',
      inventorySourceGroupId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.inventorySourceGroups.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates an inventory source group. Returns the updated inventory source group if successful. */
    await gapi.client.displayvideo.inventorySourceGroups.patch(
      {
        advertiserId: 'Test string',
        inventorySourceGroupId: 'Test string',
        partnerId: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        inventorySourceGroupId: 'Test string',
        name: 'Test string',
      },
    );
    /** Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources. */
    await gapi.client.displayvideo.inventorySourceGroups.assignedInventorySources.bulkEdit(
      {
        inventorySourceGroupId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        createdAssignedInventorySources: [
          {
            assignedInventorySourceId: 'Test string',
            inventorySourceId: 'Test string',
            name: 'Test string',
          },
        ],
        deletedAssignedInventorySources: ['Test string'],
        partnerId: 'Test string',
      },
    );
    /** Creates an assignment between an inventory source and an inventory source group. */
    await gapi.client.displayvideo.inventorySourceGroups.assignedInventorySources.create(
      {
        advertiserId: 'Test string',
        inventorySourceGroupId: 'Test string',
        partnerId: 'Test string',
      },
      {
        assignedInventorySourceId: 'Test string',
        inventorySourceId: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes the assignment between an inventory source and an inventory source group. */
    await gapi.client.displayvideo.inventorySourceGroups.assignedInventorySources.delete(
      {
        advertiserId: 'Test string',
        assignedInventorySourceId: 'Test string',
        inventorySourceGroupId: 'Test string',
        partnerId: 'Test string',
      },
    );
    /** Lists inventory sources assigned to an inventory source group. */
    await gapi.client.displayvideo.inventorySourceGroups.assignedInventorySources.list(
      {
        advertiserId: 'Test string',
        filter: 'Test string',
        inventorySourceGroupId: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        partnerId: 'Test string',
      },
    );
    /** Creates a new inventory source. Returns the newly created inventory source if successful. */
    await gapi.client.displayvideo.inventorySources.create(
      {
        advertiserId: 'Test string',
        partnerId: 'Test string',
      },
      {
        commitment: 'Test string',
        creativeConfigs: [
          {
            creativeType: 'Test string',
            displayCreativeConfig: {
              creativeSize: {
                heightPixels: 42,
                widthPixels: 42,
              },
            },
            videoCreativeConfig: {
              duration: 'Test string',
            },
          },
        ],
        dealId: 'Test string',
        deliveryMethod: 'Test string',
        displayName: 'Test string',
        exchange: 'Test string',
        guaranteedOrderId: 'Test string',
        inventorySourceId: 'Test string',
        inventorySourceProductType: 'Test string',
        inventorySourceType: 'Test string',
        name: 'Test string',
        publisherName: 'Test string',
        rateDetails: {
          inventorySourceRateType: 'Test string',
          minimumSpend: {
            currencyCode: 'Test string',
            nanos: 42,
            units: 'Test string',
          },
          rate: {
            currencyCode: 'Test string',
            nanos: 42,
            units: 'Test string',
          },
          unitsPurchased: 'Test string',
        },
        readAdvertiserIds: ['Test string'],
        readPartnerIds: ['Test string'],
        readWriteAccessors: {
          advertisers: {
            advertiserIds: ['Test string'],
          },
          partner: {
            partnerId: 'Test string',
          },
        },
        status: {
          configStatus: 'Test string',
          entityPauseReason: 'Test string',
          entityStatus: 'Test string',
          sellerPauseReason: 'Test string',
          sellerStatus: 'Test string',
        },
        timeRange: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source. */
    await gapi.client.displayvideo.inventorySources.editInventorySourceReadWriteAccessors(
      {
        inventorySourceId: 'Test string',
      },
      {
        advertisersUpdate: {
          addedAdvertisers: ['Test string'],
          removedAdvertisers: ['Test string'],
        },
        assignPartner: true,
        partnerId: 'Test string',
      },
    );
    /** Gets an inventory source. */
    await gapi.client.displayvideo.inventorySources.get({
      advertiserId: 'Test string',
      inventorySourceId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results. */
    await gapi.client.displayvideo.inventorySources.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates an existing inventory source. Returns the updated inventory source if successful. */
    await gapi.client.displayvideo.inventorySources.patch(
      {
        advertiserId: 'Test string',
        inventorySourceId: 'Test string',
        partnerId: 'Test string',
        updateMask: 'Test string',
      },
      {
        commitment: 'Test string',
        creativeConfigs: [
          {
            creativeType: 'Test string',
            displayCreativeConfig: {
              creativeSize: {
                heightPixels: 42,
                widthPixels: 42,
              },
            },
            videoCreativeConfig: {
              duration: 'Test string',
            },
          },
        ],
        dealId: 'Test string',
        deliveryMethod: 'Test string',
        displayName: 'Test string',
        exchange: 'Test string',
        guaranteedOrderId: 'Test string',
        inventorySourceId: 'Test string',
        inventorySourceProductType: 'Test string',
        inventorySourceType: 'Test string',
        name: 'Test string',
        publisherName: 'Test string',
        rateDetails: {
          inventorySourceRateType: 'Test string',
          minimumSpend: {
            currencyCode: 'Test string',
            nanos: 42,
            units: 'Test string',
          },
          rate: {
            currencyCode: 'Test string',
            nanos: 42,
            units: 'Test string',
          },
          unitsPurchased: 'Test string',
        },
        readAdvertiserIds: ['Test string'],
        readPartnerIds: ['Test string'],
        readWriteAccessors: {
          advertisers: {
            advertiserIds: ['Test string'],
          },
          partner: {
            partnerId: 'Test string',
          },
        },
        status: {
          configStatus: 'Test string',
          entityPauseReason: 'Test string',
          entityStatus: 'Test string',
          sellerPauseReason: 'Test string',
          sellerStatus: 'Test string',
        },
        timeRange: {
          endTime: 'Test string',
          startTime: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Downloads media. Download is supported on the URI `/download/{resource_name=**}?alt=media.` **Note**: Download requests will not be successful without including `alt=media` query string. */
    await gapi.client.displayvideo.media.download({
      resourceName: 'Test string',
    });
    /** Uploads media. Upload is supported on the URI `/upload/media/{resource_name=**}?upload_type=media.` **Note**: Upload requests will not be successful without including `upload_type=media` query string. */
    await gapi.client.displayvideo.media.upload(
      {
        resourceName: 'Test string',
      },
      {
        resourceName: 'Test string',
      },
    );
    /** Edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests . */
    await gapi.client.displayvideo.partners.editAssignedTargetingOptions(
      {
        partnerId: 'Test string',
      },
      {
        createRequests: [
          {
            assignedTargetingOptions: [
              {
                ageRangeDetails: {
                  ageRange: 'Test string',
                },
                appCategoryDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                appDetails: {
                  appId: 'Test string',
                  appPlatform: 'Test string',
                  displayName: 'Test string',
                  negative: true,
                },
                assignedTargetingOptionId: 'Test string',
                assignedTargetingOptionIdAlias: 'Test string',
                audienceGroupDetails: {
                  excludedFirstAndThirdPartyAudienceGroup: {
                    settings: [
                      {
                        firstAndThirdPartyAudienceId: 'Test string',
                        recency: 'Test string',
                      },
                    ],
                  },
                  excludedGoogleAudienceGroup: {
                    settings: [
                      {
                        googleAudienceId: 'Test string',
                      },
                    ],
                  },
                  includedCombinedAudienceGroup: {
                    settings: [
                      {
                        combinedAudienceId: 'Test string',
                      },
                    ],
                  },
                  includedCustomListGroup: {
                    settings: [
                      {
                        customListId: 'Test string',
                      },
                    ],
                  },
                  includedFirstAndThirdPartyAudienceGroups: [
                    {
                      settings: [
                        {
                          firstAndThirdPartyAudienceId: 'Test string',
                          recency: 'Test string',
                        },
                      ],
                    },
                  ],
                  includedGoogleAudienceGroup: {
                    settings: [
                      {
                        googleAudienceId: 'Test string',
                      },
                    ],
                  },
                },
                audioContentTypeDetails: {
                  audioContentType: 'Test string',
                },
                authorizedSellerStatusDetails: {
                  authorizedSellerStatus: 'Test string',
                  targetingOptionId: 'Test string',
                },
                browserDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                businessChainDetails: {
                  displayName: 'Test string',
                  proximityRadiusAmount: 42,
                  proximityRadiusUnit: 'Test string',
                  targetingOptionId: 'Test string',
                },
                carrierAndIspDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                categoryDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                channelDetails: {
                  channelId: 'Test string',
                  negative: true,
                },
                contentDurationDetails: {
                  contentDuration: 'Test string',
                  targetingOptionId: 'Test string',
                },
                contentGenreDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                contentInstreamPositionDetails: {
                  adType: 'Test string',
                  contentInstreamPosition: 'Test string',
                },
                contentOutstreamPositionDetails: {
                  adType: 'Test string',
                  contentOutstreamPosition: 'Test string',
                },
                contentStreamTypeDetails: {
                  contentStreamType: 'Test string',
                  targetingOptionId: 'Test string',
                },
                contentThemeExclusionDetails: {
                  contentTheme: 'Test string',
                  excludedContentTheme: 'Test string',
                  excludedTargetingOptionId: 'Test string',
                },
                dayAndTimeDetails: {
                  dayOfWeek: 'Test string',
                  endHour: 42,
                  startHour: 42,
                  timeZoneResolution: 'Test string',
                },
                deviceMakeModelDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                deviceTypeDetails: {
                  deviceType: 'Test string',
                  youtubeAndPartnersBidMultiplier: 42,
                },
                digitalContentLabelExclusionDetails: {
                  excludedContentRatingTier: 'Test string',
                },
                environmentDetails: {
                  environment: 'Test string',
                },
                exchangeDetails: {
                  exchange: 'Test string',
                },
                genderDetails: {
                  gender: 'Test string',
                },
                geoRegionDetails: {
                  displayName: 'Test string',
                  geoRegionType: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                householdIncomeDetails: {
                  householdIncome: 'Test string',
                },
                inheritance: 'Test string',
                inventorySourceDetails: {
                  inventorySourceId: 'Test string',
                },
                inventorySourceGroupDetails: {
                  inventorySourceGroupId: 'Test string',
                },
                keywordDetails: {
                  keyword: 'Test string',
                  negative: true,
                },
                languageDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                name: 'Test string',
                nativeContentPositionDetails: {
                  contentPosition: 'Test string',
                },
                negativeKeywordListDetails: {
                  negativeKeywordListId: 'Test string',
                },
                omidDetails: {
                  omid: 'Test string',
                },
                onScreenPositionDetails: {
                  adType: 'Test string',
                  onScreenPosition: 'Test string',
                  targetingOptionId: 'Test string',
                },
                operatingSystemDetails: {
                  displayName: 'Test string',
                  negative: true,
                  targetingOptionId: 'Test string',
                },
                parentalStatusDetails: {
                  parentalStatus: 'Test string',
                },
                poiDetails: {
                  displayName: 'Test string',
                  latitude: 42,
                  longitude: 42,
                  proximityRadiusAmount: 42,
                  proximityRadiusUnit: 'Test string',
                  targetingOptionId: 'Test string',
                },
                proximityLocationListDetails: {
                  proximityLocationListId: 'Test string',
                  proximityRadius: 42,
                  proximityRadiusUnit: 'Test string',
                },
                regionalLocationListDetails: {
                  negative: true,
                  regionalLocationListId: 'Test string',
                },
                sensitiveCategoryExclusionDetails: {
                  excludedSensitiveCategory: 'Test string',
                },
                sessionPositionDetails: {
                  sessionPosition: 'Test string',
                },
                subExchangeDetails: {
                  targetingOptionId: 'Test string',
                },
                targetingType: 'Test string',
                thirdPartyVerifierDetails: {
                  adloox: {
                    adultExplicitSexualContent: 'Test string',
                    armsAmmunitionContent: 'Test string',
                    crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
                      'Test string',
                    deathInjuryMilitaryConflictContent: 'Test string',
                    debatedSensitiveSocialIssueContent: 'Test string',
                    displayIabViewability: 'Test string',
                    excludedAdlooxCategories: ['Test string'],
                    excludedFraudIvtMfaCategories: ['Test string'],
                    hateSpeechActsAggressionContent: 'Test string',
                    illegalDrugsTobaccoEcigarettesVapingAlcoholContent:
                      'Test string',
                    misinformationContent: 'Test string',
                    obscenityProfanityContent: 'Test string',
                    onlinePiracyContent: 'Test string',
                    spamHarmfulContent: 'Test string',
                    terrorismContent: 'Test string',
                    videoIabViewability: 'Test string',
                  },
                  doubleVerify: {
                    appStarRating: {
                      avoidedStarRating: 'Test string',
                      avoidInsufficientStarRating: true,
                    },
                    avoidedAgeRatings: ['Test string'],
                    brandSafetyCategories: {
                      avoidedHighSeverityCategories: ['Test string'],
                      avoidedMediumSeverityCategories: ['Test string'],
                      avoidUnknownBrandSafetyCategory: true,
                    },
                    customSegmentId: 'Test string',
                    displayViewability: {
                      iab: 'Test string',
                      viewableDuring: 'Test string',
                    },
                    fraudInvalidTraffic: {
                      avoidedFraudOption: 'Test string',
                      avoidInsufficientOption: true,
                    },
                    videoViewability: {
                      playerImpressionRate: 'Test string',
                      videoIab: 'Test string',
                      videoViewableRate: 'Test string',
                    },
                  },
                  integralAdScience: {
                    customSegmentId: ['Test string'],
                    displayViewability: 'Test string',
                    excludedAdFraudRisk: 'Test string',
                    excludedAdultRisk: 'Test string',
                    excludedAlcoholRisk: 'Test string',
                    excludedDrugsRisk: 'Test string',
                    excludedGamblingRisk: 'Test string',
                    excludedHateSpeechRisk: 'Test string',
                    excludedIllegalDownloadsRisk: 'Test string',
                    excludedOffensiveLanguageRisk: 'Test string',
                    excludedViolenceRisk: 'Test string',
                    excludeUnrateable: true,
                    qualitySyncCustomSegmentId: ['Test string'],
                    traqScoreOption: 'Test string',
                    videoViewability: 'Test string',
                  },
                },
                urlDetails: {
                  negative: true,
                  url: 'Test string',
                },
                userRewardedContentDetails: {
                  targetingOptionId: 'Test string',
                  userRewardedContent: 'Test string',
                },
                videoPlayerSizeDetails: {
                  videoPlayerSize: 'Test string',
                },
                viewabilityDetails: {
                  viewability: 'Test string',
                },
                youtubeChannelDetails: {
                  channelId: 'Test string',
                  negative: true,
                },
                youtubeVideoDetails: {
                  negative: true,
                  videoId: 'Test string',
                },
              },
            ],
            targetingType: 'Test string',
          },
        ],
        deleteRequests: [
          {
            assignedTargetingOptionIds: ['Test string'],
            targetingType: 'Test string',
          },
        ],
      },
    );
    /** Gets a partner. */
    await gapi.client.displayvideo.partners.get({
      partnerId: 'Test string',
    });
    /** Lists partners that are accessible to the current user. The order is defined by the order_by parameter. */
    await gapi.client.displayvideo.partners.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new channel. Returns the newly created channel if successful. */
    await gapi.client.displayvideo.partners.channels.create(
      {
        advertiserId: 'Test string',
        partnerId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        negativelyTargetedLineItemCount: 'Test string',
        partnerId: 'Test string',
        positivelyTargetedLineItemCount: 'Test string',
      },
    );
    /** Gets a channel for a partner or advertiser. */
    await gapi.client.displayvideo.partners.channels.get({
      advertiserId: 'Test string',
      channelId: 'Test string',
      partnerId: 'Test string',
    });
    /** Lists channels for a partner or advertiser. */
    await gapi.client.displayvideo.partners.channels.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Updates a channel. Returns the updated channel if successful. */
    await gapi.client.displayvideo.partners.channels.patch(
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        partnerId: 'Test string',
        updateMask: 'Test string',
      },
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        negativelyTargetedLineItemCount: 'Test string',
        partnerId: 'Test string',
        positivelyTargetedLineItemCount: 'Test string',
      },
    );
    /** Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites. */
    await gapi.client.displayvideo.partners.channels.sites.bulkEdit(
      {
        channelId: 'Test string',
        partnerId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        createdSites: [
          {
            name: 'Test string',
            urlOrAppId: 'Test string',
          },
        ],
        deletedSites: ['Test string'],
        partnerId: 'Test string',
      },
    );
    /** Creates a site in a channel. */
    await gapi.client.displayvideo.partners.channels.sites.create(
      {
        advertiserId: 'Test string',
        channelId: 'Test string',
        partnerId: 'Test string',
      },
      {
        name: 'Test string',
        urlOrAppId: 'Test string',
      },
    );
    /** Deletes a site from a channel. */
    await gapi.client.displayvideo.partners.channels.sites.delete({
      advertiserId: 'Test string',
      channelId: 'Test string',
      partnerId: 'Test string',
      urlOrAppId: 'Test string',
    });
    /** Lists sites in a channel. */
    await gapi.client.displayvideo.partners.channels.sites.list({
      advertiserId: 'Test string',
      channelId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      partnerId: 'Test string',
    });
    /** Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors. */
    await gapi.client.displayvideo.partners.channels.sites.replace(
      {
        channelId: 'Test string',
        partnerId: 'Test string',
      },
      {
        advertiserId: 'Test string',
        newSites: [
          {
            name: 'Test string',
            urlOrAppId: 'Test string',
          },
        ],
        partnerId: 'Test string',
      },
    );
    /** Assigns a targeting option to a partner. Returns the assigned targeting option if successful. */
    await gapi.client.displayvideo.partners.targetingTypes.assignedTargetingOptions.create(
      {
        partnerId: 'Test string',
        targetingType: 'Test string',
      },
      {
        ageRangeDetails: {
          ageRange: 'Test string',
        },
        appCategoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        appDetails: {
          appId: 'Test string',
          appPlatform: 'Test string',
          displayName: 'Test string',
          negative: true,
        },
        assignedTargetingOptionId: 'Test string',
        assignedTargetingOptionIdAlias: 'Test string',
        audienceGroupDetails: {
          excludedFirstAndThirdPartyAudienceGroup: {
            settings: [
              {
                firstAndThirdPartyAudienceId: 'Test string',
                recency: 'Test string',
              },
            ],
          },
          excludedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
          includedCombinedAudienceGroup: {
            settings: [
              {
                combinedAudienceId: 'Test string',
              },
            ],
          },
          includedCustomListGroup: {
            settings: [
              {
                customListId: 'Test string',
              },
            ],
          },
          includedFirstAndThirdPartyAudienceGroups: [
            {
              settings: [
                {
                  firstAndThirdPartyAudienceId: 'Test string',
                  recency: 'Test string',
                },
              ],
            },
          ],
          includedGoogleAudienceGroup: {
            settings: [
              {
                googleAudienceId: 'Test string',
              },
            ],
          },
        },
        audioContentTypeDetails: {
          audioContentType: 'Test string',
        },
        authorizedSellerStatusDetails: {
          authorizedSellerStatus: 'Test string',
          targetingOptionId: 'Test string',
        },
        browserDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        businessChainDetails: {
          displayName: 'Test string',
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        carrierAndIspDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        categoryDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        channelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        contentDurationDetails: {
          contentDuration: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentGenreDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        contentInstreamPositionDetails: {
          adType: 'Test string',
          contentInstreamPosition: 'Test string',
        },
        contentOutstreamPositionDetails: {
          adType: 'Test string',
          contentOutstreamPosition: 'Test string',
        },
        contentStreamTypeDetails: {
          contentStreamType: 'Test string',
          targetingOptionId: 'Test string',
        },
        contentThemeExclusionDetails: {
          contentTheme: 'Test string',
          excludedContentTheme: 'Test string',
          excludedTargetingOptionId: 'Test string',
        },
        dayAndTimeDetails: {
          dayOfWeek: 'Test string',
          endHour: 42,
          startHour: 42,
          timeZoneResolution: 'Test string',
        },
        deviceMakeModelDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        deviceTypeDetails: {
          deviceType: 'Test string',
          youtubeAndPartnersBidMultiplier: 42,
        },
        digitalContentLabelExclusionDetails: {
          excludedContentRatingTier: 'Test string',
        },
        environmentDetails: {
          environment: 'Test string',
        },
        exchangeDetails: {
          exchange: 'Test string',
        },
        genderDetails: {
          gender: 'Test string',
        },
        geoRegionDetails: {
          displayName: 'Test string',
          geoRegionType: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        householdIncomeDetails: {
          householdIncome: 'Test string',
        },
        inheritance: 'Test string',
        inventorySourceDetails: {
          inventorySourceId: 'Test string',
        },
        inventorySourceGroupDetails: {
          inventorySourceGroupId: 'Test string',
        },
        keywordDetails: {
          keyword: 'Test string',
          negative: true,
        },
        languageDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        name: 'Test string',
        nativeContentPositionDetails: {
          contentPosition: 'Test string',
        },
        negativeKeywordListDetails: {
          negativeKeywordListId: 'Test string',
        },
        omidDetails: {
          omid: 'Test string',
        },
        onScreenPositionDetails: {
          adType: 'Test string',
          onScreenPosition: 'Test string',
          targetingOptionId: 'Test string',
        },
        operatingSystemDetails: {
          displayName: 'Test string',
          negative: true,
          targetingOptionId: 'Test string',
        },
        parentalStatusDetails: {
          parentalStatus: 'Test string',
        },
        poiDetails: {
          displayName: 'Test string',
          latitude: 42,
          longitude: 42,
          proximityRadiusAmount: 42,
          proximityRadiusUnit: 'Test string',
          targetingOptionId: 'Test string',
        },
        proximityLocationListDetails: {
          proximityLocationListId: 'Test string',
          proximityRadius: 42,
          proximityRadiusUnit: 'Test string',
        },
        regionalLocationListDetails: {
          negative: true,
          regionalLocationListId: 'Test string',
        },
        sensitiveCategoryExclusionDetails: {
          excludedSensitiveCategory: 'Test string',
        },
        sessionPositionDetails: {
          sessionPosition: 'Test string',
        },
        subExchangeDetails: {
          targetingOptionId: 'Test string',
        },
        targetingType: 'Test string',
        thirdPartyVerifierDetails: {
          adloox: {
            adultExplicitSexualContent: 'Test string',
            armsAmmunitionContent: 'Test string',
            crimeHarmfulActsIndividualsSocietyHumanRightsViolationsContent:
              'Test string',
            deathInjuryMilitaryConflictContent: 'Test string',
            debatedSensitiveSocialIssueContent: 'Test string',
            displayIabViewability: 'Test string',
            excludedAdlooxCategories: ['Test string'],
            excludedFraudIvtMfaCategories: ['Test string'],
            hateSpeechActsAggressionContent: 'Test string',
            illegalDrugsTobaccoEcigarettesVapingAlcoholContent: 'Test string',
            misinformationContent: 'Test string',
            obscenityProfanityContent: 'Test string',
            onlinePiracyContent: 'Test string',
            spamHarmfulContent: 'Test string',
            terrorismContent: 'Test string',
            videoIabViewability: 'Test string',
          },
          doubleVerify: {
            appStarRating: {
              avoidedStarRating: 'Test string',
              avoidInsufficientStarRating: true,
            },
            avoidedAgeRatings: ['Test string'],
            brandSafetyCategories: {
              avoidedHighSeverityCategories: ['Test string'],
              avoidedMediumSeverityCategories: ['Test string'],
              avoidUnknownBrandSafetyCategory: true,
            },
            customSegmentId: 'Test string',
            displayViewability: {
              iab: 'Test string',
              viewableDuring: 'Test string',
            },
            fraudInvalidTraffic: {
              avoidedFraudOption: 'Test string',
              avoidInsufficientOption: true,
            },
            videoViewability: {
              playerImpressionRate: 'Test string',
              videoIab: 'Test string',
              videoViewableRate: 'Test string',
            },
          },
          integralAdScience: {
            customSegmentId: ['Test string'],
            displayViewability: 'Test string',
            excludedAdFraudRisk: 'Test string',
            excludedAdultRisk: 'Test string',
            excludedAlcoholRisk: 'Test string',
            excludedDrugsRisk: 'Test string',
            excludedGamblingRisk: 'Test string',
            excludedHateSpeechRisk: 'Test string',
            excludedIllegalDownloadsRisk: 'Test string',
            excludedOffensiveLanguageRisk: 'Test string',
            excludedViolenceRisk: 'Test string',
            excludeUnrateable: true,
            qualitySyncCustomSegmentId: ['Test string'],
            traqScoreOption: 'Test string',
            videoViewability: 'Test string',
          },
        },
        urlDetails: {
          negative: true,
          url: 'Test string',
        },
        userRewardedContentDetails: {
          targetingOptionId: 'Test string',
          userRewardedContent: 'Test string',
        },
        videoPlayerSizeDetails: {
          videoPlayerSize: 'Test string',
        },
        viewabilityDetails: {
          viewability: 'Test string',
        },
        youtubeChannelDetails: {
          channelId: 'Test string',
          negative: true,
        },
        youtubeVideoDetails: {
          negative: true,
          videoId: 'Test string',
        },
      },
    );
    /** Deletes an assigned targeting option from a partner. */
    await gapi.client.displayvideo.partners.targetingTypes.assignedTargetingOptions.delete(
      {
        assignedTargetingOptionId: 'Test string',
        partnerId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Gets a single targeting option assigned to a partner. */
    await gapi.client.displayvideo.partners.targetingTypes.assignedTargetingOptions.get(
      {
        assignedTargetingOptionId: 'Test string',
        partnerId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Lists the targeting options assigned to a partner. */
    await gapi.client.displayvideo.partners.targetingTypes.assignedTargetingOptions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        partnerId: 'Test string',
        targetingType: 'Test string',
      },
    );
    /** Creates an SDF Download Task. Returns an Operation. An SDF Download Task is a long-running, asynchronous operation. The metadata type of this operation is SdfDownloadTaskMetadata. If the request is successful, the response type of the operation is SdfDownloadTask. The response will not include the download files, which must be retrieved with media.download. The state of operation can be retrieved with `sdfdownloadtasks.operations.get`. Any errors can be found in the error.message. Note that error.details is expected to be empty. */
    await gapi.client.displayvideo.sdfdownloadtasks.create(
      {},
      {
        advertiserId: 'Test string',
        idFilter: {
          adGroupAdIds: ['Test string'],
          adGroupIds: ['Test string'],
          adGroupQaIds: ['Test string'],
          campaignIds: ['Test string'],
          insertionOrderIds: ['Test string'],
          lineItemIds: ['Test string'],
          lineItemQaIds: ['Test string'],
          mediaProductIds: ['Test string'],
        },
        inventorySourceFilter: {
          inventorySourceIds: ['Test string'],
        },
        parentEntityFilter: {
          fileType: ['Test string'],
          filterIds: ['Test string'],
          filterType: 'Test string',
        },
        partnerId: 'Test string',
        version: 'Test string',
      },
    );
    /** Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds. */
    await gapi.client.displayvideo.sdfdownloadtasks.operations.get({
      name: 'Test string',
    });
    /** Gets a single targeting option. */
    await gapi.client.displayvideo.targetingTypes.targetingOptions.get({
      advertiserId: 'Test string',
      targetingOptionId: 'Test string',
      targetingType: 'Test string',
    });
    /** Lists targeting options of a given type. */
    await gapi.client.displayvideo.targetingTypes.targetingOptions.list({
      advertiserId: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      targetingType: 'Test string',
    });
    /** Searches for targeting options of a given type based on the given search terms. */
    await gapi.client.displayvideo.targetingTypes.targetingOptions.search(
      {
        targetingType: 'Test string',
      },
      {
        advertiserId: 'Test string',
        businessChainSearchTerms: {
          businessChainQuery: 'Test string',
          regionQuery: 'Test string',
        },
        geoRegionSearchTerms: {
          geoRegionQuery: 'Test string',
        },
        pageSize: 42,
        pageToken: 'Test string',
        poiSearchTerms: {
          poiQuery: 'Test string',
        },
      },
    );
    /** Bulk edits user roles for a user. The operation will delete the assigned user roles provided in BulkEditAssignedUserRolesRequest.deletedAssignedUserRoles and then assign the user roles provided in BulkEditAssignedUserRolesRequest.createdAssignedUserRoles. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method. */
    await gapi.client.displayvideo.users.bulkEditAssignedUserRoles(
      {
        userId: 'Test string',
      },
      {
        createdAssignedUserRoles: [
          {
            advertiserId: 'Test string',
            assignedUserRoleId: 'Test string',
            partnerId: 'Test string',
            userRole: 'Test string',
          },
        ],
        deletedAssignedUserRoles: ['Test string'],
      },
    );
    /** Creates a new user. Returns the newly created user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method. */
    await gapi.client.displayvideo.users.create(
      {},
      {
        assignedUserRoles: [
          {
            advertiserId: 'Test string',
            assignedUserRoleId: 'Test string',
            partnerId: 'Test string',
            userRole: 'Test string',
          },
        ],
        displayName: 'Test string',
        email: 'Test string',
        lastLoginTime: 'Test string',
        name: 'Test string',
        userId: 'Test string',
      },
    );
    /** Deletes a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method. */
    await gapi.client.displayvideo.users.delete({
      userId: 'Test string',
    });
    /** Gets a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method. */
    await gapi.client.displayvideo.users.get({
      userId: 'Test string',
    });
    /** Lists users that are accessible to the current user. If two users have user roles on the same partner or advertiser, they can access each other. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method. */
    await gapi.client.displayvideo.users.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates an existing user. Returns the updated user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method. */
    await gapi.client.displayvideo.users.patch(
      {
        updateMask: 'Test string',
        userId: 'Test string',
      },
      {
        assignedUserRoles: [
          {
            advertiserId: 'Test string',
            assignedUserRoleId: 'Test string',
            partnerId: 'Test string',
            userRole: 'Test string',
          },
        ],
        displayName: 'Test string',
        email: 'Test string',
        lastLoginTime: 'Test string',
        name: 'Test string',
        userId: 'Test string',
      },
    );
  }
});
