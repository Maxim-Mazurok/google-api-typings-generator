/* This is stub file for gapi.client.cloudscheduler-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230127

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://cloudscheduler.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.cloudscheduler */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.cloudscheduler.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.cloudscheduler.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a job. */
        await gapi.client.cloudscheduler.projects.locations.jobs.create({
            parent: "Test string",
        }, {
            appEngineHttpTarget: {
                appEngineRouting: {
                    host: "Test string",
                    instance: "Test string",
                    service: "Test string",
                    version: "Test string",
                },
                body: "Test string",
                headers: {
                    A: "Test string"
                },
                httpMethod: "Test string",
                relativeUri: "Test string",
            },
            attemptDeadline: "Test string",
            description: "Test string",
            httpTarget: {
                body: "Test string",
                headers: {
                    A: "Test string"
                },
                httpMethod: "Test string",
                oauthToken: {
                    scope: "Test string",
                    serviceAccountEmail: "Test string",
                },
                oidcToken: {
                    audience: "Test string",
                    serviceAccountEmail: "Test string",
                },
                uri: "Test string",
            },
            lastAttemptTime: "Test string",
            legacyAppEngineCron: true,
            name: "Test string",
            pubsubTarget: {
                attributes: {
                    A: "Test string"
                },
                data: "Test string",
                topicName: "Test string",
            },
            retryConfig: {
                maxBackoffDuration: "Test string",
                maxDoublings: 42,
                maxRetryDuration: "Test string",
                minBackoffDuration: "Test string",
                retryCount: 42,
            },
            schedule: "Test string",
            scheduleTime: "Test string",
            state: "Test string",
            status: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            timeZone: "Test string",
            userUpdateTime: "Test string",
        });
        /** Deletes a job. */
        await gapi.client.cloudscheduler.projects.locations.jobs.delete({
            legacyAppEngineCron: true,
            name: "Test string",
        });
        /** Gets a job. */
        await gapi.client.cloudscheduler.projects.locations.jobs.get({
            name: "Test string",
        });
        /** Lists jobs. */
        await gapi.client.cloudscheduler.projects.locations.jobs.list({
            filter: "Test string",
            legacyAppEngineCron: true,
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a job. If successful, the updated Job is returned. If the job does not exist, `NOT_FOUND` is returned. If UpdateJob does not successfully return, it is possible for the job to
         * be in an Job.State.UPDATE_FAILED state. A job in this state may not be executed. If this happens, retry the UpdateJob request until a successful response is received.
         */
        await gapi.client.cloudscheduler.projects.locations.jobs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appEngineHttpTarget: {
                appEngineRouting: {
                    host: "Test string",
                    instance: "Test string",
                    service: "Test string",
                    version: "Test string",
                },
                body: "Test string",
                headers: {
                    A: "Test string"
                },
                httpMethod: "Test string",
                relativeUri: "Test string",
            },
            attemptDeadline: "Test string",
            description: "Test string",
            httpTarget: {
                body: "Test string",
                headers: {
                    A: "Test string"
                },
                httpMethod: "Test string",
                oauthToken: {
                    scope: "Test string",
                    serviceAccountEmail: "Test string",
                },
                oidcToken: {
                    audience: "Test string",
                    serviceAccountEmail: "Test string",
                },
                uri: "Test string",
            },
            lastAttemptTime: "Test string",
            legacyAppEngineCron: true,
            name: "Test string",
            pubsubTarget: {
                attributes: {
                    A: "Test string"
                },
                data: "Test string",
                topicName: "Test string",
            },
            retryConfig: {
                maxBackoffDuration: "Test string",
                maxDoublings: 42,
                maxRetryDuration: "Test string",
                minBackoffDuration: "Test string",
                retryCount: 42,
            },
            schedule: "Test string",
            scheduleTime: "Test string",
            state: "Test string",
            status: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            timeZone: "Test string",
            userUpdateTime: "Test string",
        });
        /**
         * Pauses a job. If a job is paused then the system will stop executing the job until it is re-enabled via ResumeJob. The state of the job is stored in state; if paused it will be set to
         * Job.State.PAUSED. A job must be in Job.State.ENABLED to be paused.
         */
        await gapi.client.cloudscheduler.projects.locations.jobs.pause({
            name: "Test string",
        }, {
        });
        /**
         * Resume a job. This method reenables a job after it has been Job.State.PAUSED. The state of a job is stored in Job.state; after calling this method it will be set to Job.State.ENABLED. A
         * job must be in Job.State.PAUSED to be resumed.
         */
        await gapi.client.cloudscheduler.projects.locations.jobs.resume({
            name: "Test string",
        }, {
        });
        /** Forces a job to run now. When this method is called, Cloud Scheduler will dispatch the job, even if the job is already running. */
        await gapi.client.cloudscheduler.projects.locations.jobs.run({
            name: "Test string",
        }, {
            legacyAppEngineCron: true,
        });
    }
});
