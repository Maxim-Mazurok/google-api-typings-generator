/* This is stub file for gapi.client.iam-v2beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240314

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://iam.googleapis.com/$discovery/rest?version=v2beta'
  );
  /** now we can use gapi.client.iam */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a policy. */
    await gapi.client.iam.policies.createPolicy(
      {
        parent: 'Test string',
        policyId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        rules: [
          {
            denyRule: {
              denialCondition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              deniedPermissions: ['Test string'],
              deniedPrincipals: ['Test string'],
              exceptionPermissions: ['Test string'],
              exceptionPrincipals: ['Test string'],
            },
            description: 'Test string',
          },
        ],
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a policy. This action is permanent. */
    await gapi.client.iam.policies.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Gets a policy. */
    await gapi.client.iam.policies.get({
      name: 'Test string',
    });
    /** Retrieves the policies of the specified kind that are attached to a resource. The response lists only policy metadata. In particular, policy rules are omitted. */
    await gapi.client.iam.policies.listPolicies({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified policy. You can update only the rules and the display name for the policy. To update a policy, you should use a read-modify-write loop: 1. Use GetPolicy to read the current version of the policy. 2. Modify the policy as needed. 3. Use `UpdatePolicy` to write the updated policy. This pattern helps prevent conflicts between concurrent updates. */
    await gapi.client.iam.policies.update(
      {
        name: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        rules: [
          {
            denyRule: {
              denialCondition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              deniedPermissions: ['Test string'],
              deniedPrincipals: ['Test string'],
              exceptionPermissions: ['Test string'],
              exceptionPrincipals: ['Test string'],
            },
            description: 'Test string',
          },
        ],
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.iam.policies.operations.get({
      name: 'Test string',
    });
  }
});
