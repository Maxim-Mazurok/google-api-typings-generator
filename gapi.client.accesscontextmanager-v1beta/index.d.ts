/* Type definitions for non-npm package Access Context Manager API v1beta 0.0 */
// Project: https://cloud.google.com/access-context-manager/docs/reference/rest/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://accesscontextmanager.googleapis.com/$discovery/rest?version=v1beta
// Revision: 20230618

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Access Context Manager API v1beta */
    function load(urlOrObject: "https://accesscontextmanager.googleapis.com/$discovery/rest?version=v1beta"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "accesscontextmanager", version: "v1beta"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "accesscontextmanager", version: "v1beta", callback: () => any): void;

    namespace accesscontextmanager {
        // tslint:disable-next-line:no-empty-interface
        interface AccessContextManagerOperationMetadata {
        }
        interface AccessLevel {
            /** A `BasicLevel` composed of `Conditions`. */
            basic?:
                BasicLevel;
            /** A `CustomLevel` written in the Common Expression Language. */
            custom?:
                CustomLevel;
            /** Description of the `AccessLevel` and its use. Does not affect behavior. */
            description?:
                string;
            /**
             * Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by
             * alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.
             */
            name?:
                string;
            /** Human readable title. Must be unique within the Policy. */
            title?:
                string;
        }
        interface AccessPolicy {
            /** Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{policy_id}` */
            name?:
                string;
            /** Required. The parent of this `AccessPolicy` in the Cloud Resource Hierarchy. Currently immutable once created. Format: `organizations/{organization_id}` */
            parent?:
                string;
            /** Required. Human readable title. Does not affect behavior. */
            title?:
                string;
        }
        interface BasicLevel {
            /**
             * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the
             * `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
             */
            combiningFunction?:
                string;
            /** Required. A list of requirements for the `AccessLevel` to be granted. */
            conditions?:
                Condition[];
        }
        interface Condition {
            /** Device specific restrictions, all restrictions must hold for the Condition to be true. If not specified, all devices are allowed. */
            devicePolicy?:
                DevicePolicy;
            /**
             * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host
             * bits must be zero) or the input is considered malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas
             * "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
             */
            ipSubnetworks?:
                string[];
            /**
             * The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request
             * may come from any user.
             */
            members?:
                string[];
            /**
             * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields, each field must be false for the Condition overall to be satisfied. Defaults to
             * false.
             */
            negate?:
                boolean;
            /** The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes. */
            regions?:
                string[];
            /**
             * A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must
             * be granted for the Condition to be true. Example: "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
             */
            requiredAccessLevels?:
                string[];
        }
        interface CustomLevel {
            /** Required. A Cloud CEL expression evaluating to a boolean. */
            expr?:
                Expr;
        }
        interface DevicePolicy {
            /** Allowed device management levels, an empty list allows all management levels. */
            allowedDeviceManagementLevels?:
                string[];
            /** Allowed encryptions statuses, an empty list allows all statuses. */
            allowedEncryptionStatuses?:
                string[];
            /** Allowed OS versions, an empty list allows all types and all versions. */
            osConstraints?:
                OsConstraint[];
            /** Whether the device needs to be approved by the customer admin. */
            requireAdminApproval?:
                boolean;
            /** Whether the device needs to be corp owned. */
            requireCorpOwned?:
                boolean;
            /** Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`. */
            requireScreenlock?:
                boolean;
        }
        interface Expr {
            /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
            description?:
                string;
            /** Textual representation of an expression in Common Expression Language syntax. */
            expression?:
                string;
            /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
            location?:
                string;
            /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
            title?:
                string;
        }
        interface ListAccessLevelsResponse {
            /** List of the Access Level instances. */
            accessLevels?:
                AccessLevel[];
            /** The pagination token to retrieve the next page of results. If the value is empty, no further results remain. */
            nextPageToken?:
                string;
        }
        interface ListAccessPoliciesResponse {
            /** List of the AccessPolicy instances. */
            accessPolicies?:
                AccessPolicy[];
            /** The pagination token to retrieve the next page of results. If the value is empty, no further results remain. */
            nextPageToken?:
                string;
        }
        interface ListServicePerimetersResponse {
            /** The pagination token to retrieve the next page of results. If the value is empty, no further results remain. */
            nextPageToken?:
                string;
            /** List of the Service Perimeter instances. */
            servicePerimeters?:
                ServicePerimeter[];
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?:
                string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?:
                { [P in string]: any };
        }
        interface OsConstraint {
            /** The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `"major.minor.patch"`. Examples: `"10.5.301"`, `"9.2.1"`. */
            minimumVersion?:
                string;
            /** Required. The allowed OS type. */
            osType?:
                string;
            /**
             * Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller
             * has permission to call the API targeted by the request.
             */
            requireVerifiedChromeOs?:
                boolean;
        }
        interface ServicePerimeter {
            /** Description of the `ServicePerimeter` and its use. Does not affect behavior. */
            description?:
                string;
            /**
             * Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter,
             * followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.
             */
            name?:
                string;
            /**
             * Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a
             * perimeter bridge without being included in regular perimeter. For perimeter bridges, restricted/unrestricted service lists as well as access lists must be empty.
             */
            perimeterType?:
                string;
            /** Current ServicePerimeter configuration. Specifies sets of resources, restricted/unrestricted services and access levels that determine perimeter content and boundaries. */
            status?:
                ServicePerimeterConfig;
            /** Human readable title. Must be unique within the Policy. */
            title?:
                string;
        }
        interface ServicePerimeterConfig {
            /**
             * A list of `AccessLevel` resource names that allow resources within the `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed must be in the same policy as this
             * `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are listed, resources within the perimeter can only be accessed via Google
             * Cloud calls with request origins within the perimeter. Example: `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`. For Service Perimeter Bridge, must be empty.
             */
            accessLevels?:
                string[];
            /** A list of Google Cloud resources that are inside of the service perimeter. Currently only projects are allowed. Format: `projects/{project_number}` */
            resources?:
                string[];
            /**
             * Google Cloud services that are subject to the Service Perimeter restrictions. Must contain a list of services. For example, if `storage.googleapis.com` is specified, access to the
             * storage buckets inside the perimeter must meet the perimeter's access restrictions.
             */
            restrictedServices?:
                string[];
            /**
             * Google Cloud services that are not subject to the Service Perimeter restrictions. Deprecated. Must be set to a single wildcard "*". The wildcard means that unless explicitly
             * specified by "restricted_services" list, any service is treated as unrestricted.
             */
            unrestrictedServices?:
                string[];
            /** Beta. Configuration for APIs allowed within Perimeter. */
            vpcAccessibleServices?:
                VpcAccessibleServices;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface VpcAccessibleServices {
            /**
             * The list of APIs usable within the Service Perimeter. Must be empty unless 'enable_restriction' is True. You can specify a list of individual services, as well as include the
             * 'RESTRICTED-SERVICES' value, which automatically includes all of the services protected by the perimeter.
             */
            allowedServices?:
                string[];
            /** Whether to restrict API calls within the Service Perimeter to the list of APIs specified in 'allowed_services'. */
            enableRestriction?:
                boolean;
        }
        interface AccessLevelsResource {
            /**
             * Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing
             * errors will result in an error response for the first error encountered.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Resource name for the access policy which owns this Access Level. Format: `accessPolicies/{policy_id}` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AccessLevel;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Resource name for the access policy which owns this Access Level. Format: `accessPolicies/{policy_id}` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AccessLevel): Request<Operation>;
            /** Delete an Access Level by resource name. The longrunning operation from this RPC will have a successful status once the Access Level has been removed from long-lasting storage. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name for the Access Level. Format: `accessPolicies/{policy_id}/accessLevels/{access_level_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Get an Access Level by resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * Whether to return `BasicLevels` in the Cloud Common Expression Language rather than as `BasicLevels`. Defaults to AS_DEFINED, where Access Levels are returned as `BasicLevels`
                 * or `CustomLevels` based on how they were created. If set to CEL, all Access Levels are returned as `CustomLevels`. In the CEL case, `BasicLevels` are translated to equivalent
                 * `CustomLevels`.
                 */
                accessLevelFormat?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name for the Access Level. Format: `accessPolicies/{policy_id}/accessLevels/{access_level_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AccessLevel>;
            /** List all Access Levels for an access policy. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * Whether to return `BasicLevels` in the Cloud Common Expression language, as `CustomLevels`, rather than as `BasicLevels`. Defaults to returning `AccessLevels` in the format they
                 * were defined.
                 */
                accessLevelFormat?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Number of Access Levels to include in the list. Default 100. */
                pageSize?:
                    number;
                /** Next page token for the next batch of Access Level instances. Defaults to the first page of results. */
                pageToken?:
                    string;
                /** Required. Resource name for the access policy to list Access Levels from. Format: `accessPolicies/{policy_id}` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAccessLevelsResponse>;
            /**
             * Update an Access Level. The longrunning operation from this RPC will have a successful status once the changes to the Access Level have propagated to long-lasting storage. Access
             * Levels containing errors will result in an error response for the first error encountered.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by
                 * alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Mask to control which fields get updated. Must be non-empty. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AccessLevel;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by
                 * alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Mask to control which fields get updated. Must be non-empty. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AccessLevel): Request<Operation>;
        }
        interface ServicePerimetersResource {
            /**
             * Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service
             * Perimeters containing errors will result in an error response for the first error encountered.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Resource name for the access policy which owns this Service Perimeter. Format: `accessPolicies/{policy_id}` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ServicePerimeter;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Resource name for the access policy which owns this Service Perimeter. Format: `accessPolicies/{policy_id}` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ServicePerimeter): Request<Operation>;
            /**
             * Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting
             * storage.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name for the Service Perimeter. Format: `accessPolicies/{policy_id}/servicePerimeters/{service_perimeter_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Get a Service Perimeter by resource name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name for the Service Perimeter. Format: `accessPolicies/{policy_id}/servicePerimeters/{service_perimeters_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ServicePerimeter>;
            /** List all Service Perimeters for an access policy. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Number of Service Perimeters to include in the list. Default 100. */
                pageSize?:
                    number;
                /** Next page token for the next batch of Service Perimeter instances. Defaults to the first page of results. */
                pageToken?:
                    string;
                /** Required. Resource name for the access policy to list Service Perimeters from. Format: `accessPolicies/{policy_id}` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListServicePerimetersResponse>;
            /**
             * Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage.
             * Service Perimeter containing errors will result in an error response for the first error encountered.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a
                 * letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Mask to control which fields get updated. Must be non-empty. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ServicePerimeter;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a
                 * letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Mask to control which fields get updated. Must be non-empty. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ServicePerimeter): Request<Operation>;
        }
        interface AccessPoliciesResource {
            /**
             * Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to
             * long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AccessPolicy;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AccessPolicy): Request<Operation>;
            /** Delete an AccessPolicy by resource name. The longrunning Operation will have a successful status once the AccessPolicy has been removed from long-lasting storage. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name for the access policy to delete. Format `accessPolicies/{policy_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Get an AccessPolicy by name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name for the access policy to get. Format `accessPolicies/{policy_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AccessPolicy>;
            /** List all AccessPolicies under a container. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Number of AccessPolicy instances to include in the list. Default 100. */
                pageSize?:
                    number;
                /** Next page token for the next batch of AccessPolicy instances. Defaults to the first page of results. */
                pageToken?:
                    string;
                /** Required. Resource name for the container to list AccessPolicy instances from. Format: `organizations/{org_id}` */
                parent?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAccessPoliciesResponse>;
            /**
             * Update an AccessPolicy. The longrunning Operation from this RPC will have a successful status once the changes to the AccessPolicy have propagated to long-lasting storage. Syntactic
             * and basic semantic errors will be returned in `metadata` as a BadRequest proto.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{policy_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Mask to control which fields get updated. Must be non-empty. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AccessPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{policy_id}` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Mask to control which fields get updated. Must be non-empty. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AccessPolicy): Request<Operation>;
            accessLevels:
                AccessLevelsResource;
            servicePerimeters:
                ServicePerimetersResource;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
        }

        const accessPolicies: AccessPoliciesResource;

        const operations: OperationsResource;
    }
}
