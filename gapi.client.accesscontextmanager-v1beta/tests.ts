/* This is stub file for gapi.client.accesscontextmanager-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220826

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://accesscontextmanager.googleapis.com/$discovery/rest?version=v1beta');
    /** now we can use gapi.client.accesscontextmanager */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to
         * long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.
         */
        await gapi.client.accesscontextmanager.accessPolicies.create({
        }, {
            name: "Test string",
            parent: "Test string",
            title: "Test string",
        });
        /** Delete an AccessPolicy by resource name. The longrunning Operation will have a successful status once the AccessPolicy has been removed from long-lasting storage. */
        await gapi.client.accesscontextmanager.accessPolicies.delete({
            name: "Test string",
        });
        /** Get an AccessPolicy by name. */
        await gapi.client.accesscontextmanager.accessPolicies.get({
            name: "Test string",
        });
        /** List all AccessPolicies under a container. */
        await gapi.client.accesscontextmanager.accessPolicies.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Update an AccessPolicy. The longrunning Operation from this RPC will have a successful status once the changes to the AccessPolicy have propagated to long-lasting storage. Syntactic and
         * basic semantic errors will be returned in `metadata` as a BadRequest proto.
         */
        await gapi.client.accesscontextmanager.accessPolicies.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            name: "Test string",
            parent: "Test string",
            title: "Test string",
        });
        /**
         * Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing
         * errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.create({
            parent: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"
                            ],
                            allowedEncryptionStatuses: [
                                "Test string"
                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }
                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"
                        ],
                        members: [
                            "Test string"
                        ],
                        negate: true,
                        regions: [
                            "Test string"
                        ],
                        requiredAccessLevels: [
                            "Test string"
                        ],
                    }
                ],
            },
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
        });
        /** Delete an Access Level by resource name. The longrunning operation from this RPC will have a successful status once the Access Level has been removed from long-lasting storage. */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.delete({
            name: "Test string",
        });
        /** Get an Access Level by resource name. */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.get({
            accessLevelFormat: "Test string",
            name: "Test string",
        });
        /** List all Access Levels for an access policy. */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.list({
            accessLevelFormat: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Update an Access Level. The longrunning operation from this RPC will have a successful status once the changes to the Access Level have propagated to long-lasting storage. Access Levels
         * containing errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.accessLevels.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            basic: {
                combiningFunction: "Test string",
                conditions: [
                    {
                        devicePolicy: {
                            allowedDeviceManagementLevels: [
                                "Test string"
                            ],
                            allowedEncryptionStatuses: [
                                "Test string"
                            ],
                            osConstraints: [
                                {
                                    minimumVersion: "Test string",
                                    osType: "Test string",
                                    requireVerifiedChromeOs: true,
                                }
                            ],
                            requireAdminApproval: true,
                            requireCorpOwned: true,
                            requireScreenlock: true,
                        },
                        ipSubnetworks: [
                            "Test string"
                        ],
                        members: [
                            "Test string"
                        ],
                        negate: true,
                        regions: [
                            "Test string"
                        ],
                        requiredAccessLevels: [
                            "Test string"
                        ],
                    }
                ],
            },
            custom: {
                expr: {
                    description: "Test string",
                    expression: "Test string",
                    location: "Test string",
                    title: "Test string",
                },
            },
            description: "Test string",
            name: "Test string",
            title: "Test string",
        });
        /**
         * Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters
         * containing errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.create({
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"
                ],
                resources: [
                    "Test string"
                ],
                restrictedServices: [
                    "Test string"
                ],
                unrestrictedServices: [
                    "Test string"
                ],
                vpcAccessibleServices: {
                    allowedServices: [
                        "Test string"
                    ],
                    enableRestriction: true,
                },
            },
            title: "Test string",
        });
        /** Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage. */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.delete({
            name: "Test string",
        });
        /** Get a Service Perimeter by resource name. */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.get({
            name: "Test string",
        });
        /** List all Service Perimeters for an access policy. */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage.
         * Service Perimeter containing errors will result in an error response for the first error encountered.
         */
        await gapi.client.accesscontextmanager.accessPolicies.servicePerimeters.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            perimeterType: "Test string",
            status: {
                accessLevels: [
                    "Test string"
                ],
                resources: [
                    "Test string"
                ],
                restrictedServices: [
                    "Test string"
                ],
                unrestrictedServices: [
                    "Test string"
                ],
                vpcAccessibleServices: {
                    allowedServices: [
                        "Test string"
                    ],
                    enableRestriction: true,
                },
            },
            title: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.accesscontextmanager.operations.get({
            name: "Test string",
        });
    }
});
