// Type definitions for non-npm package Cloud Document AI API v1beta2 1.0
// Project: https://cloud.google.com/document-ai/docs/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://documentai.googleapis.com/$discovery/rest?version=v1beta2
// Revision: 20200709

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Document AI API v1beta2 */
    function load(name: "documentai", version: "v1beta2"): PromiseLike<void>;
    function load(name: "documentai", version: "v1beta2", callback: () => any): void;

    namespace documentai {
        interface GoogleCloudDocumentaiV1beta1BatchProcessDocumentsResponse {
            /** Responses for each individual document. */
            responses?: GoogleCloudDocumentaiV1beta1ProcessDocumentResponse[];
        }
        interface GoogleCloudDocumentaiV1beta1BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: GoogleCloudDocumentaiV1beta1NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: GoogleCloudDocumentaiV1beta1Vertex[];
        }
        interface GoogleCloudDocumentaiV1beta1Document {
            /**
             * Inline document content, represented as a stream of bytes.
             * Note: As with all `bytes` fields, protobuffers use a pure binary
             * representation, whereas JSON representations use base64.
             */
            content?: string;
            /**
             * A list of entities detected on Document.text. For document shards,
             * entities in this list may cross shard boundaries.
             */
            entities?: GoogleCloudDocumentaiV1beta1DocumentEntity[];
            /** Relationship among Document.entities. */
            entityRelations?: GoogleCloudDocumentaiV1beta1DocumentEntityRelation[];
            /** Any error that occurred while processing this document. */
            error?: GoogleRpcStatus;
            /**
             * An IANA published MIME type (also referred to as media type). For more
             * information, see
             * https://www.iana.org/assignments/media-types/media-types.xhtml.
             */
            mimeType?: string;
            /** Visual page layout for the Document. */
            pages?: GoogleCloudDocumentaiV1beta1DocumentPage[];
            /**
             * Information about the sharding if this document is sharded part of a larger
             * document. If the document is not sharded, this message is not specified.
             */
            shardInfo?: GoogleCloudDocumentaiV1beta1DocumentShardInfo;
            /** UTF-8 encoded text in reading order from the document. */
            text?: string;
            /** Styles for the Document.text. */
            textStyles?: GoogleCloudDocumentaiV1beta1DocumentStyle[];
            /**
             * A list of translations on Document.text. For document shards,
             * translations in this list may cross shard boundaries.
             */
            translations?: GoogleCloudDocumentaiV1beta1DocumentTranslation[];
            /**
             * Currently supports Google Cloud Storage URI of the form
             * `gs://bucket_name/object_name`. Object versioning is not supported.
             * See [Google Cloud Storage Request
             * URIs](https://cloud.google.com/storage/docs/reference-uris) for more
             * info.
             */
            uri?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentEntity {
            /** Optional. Confidence of detected Schema entity. Range [0, 1]. */
            confidence?: number;
            /** Deprecated.  Use `id` field instead. */
            mentionId?: string;
            /** Text value in the document e.g. `1600 Amphitheatre Pkwy`. */
            mentionText?: string;
            /**
             * Provenance of the entity.
             * Text anchor indexing into the Document.text.
             */
            textAnchor?: GoogleCloudDocumentaiV1beta1DocumentTextAnchor;
            /** Entity type from a schema e.g. `Address`. */
            type?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentEntityRelation {
            /** Object entity id. */
            objectId?: string;
            /** Relationship description. */
            relation?: string;
            /** Subject entity id. */
            subjectId?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPage {
            /**
             * A list of visually detected text blocks on the page.
             * A block has a set of lines (collected into paragraphs) that have a common
             * line-spacing and orientation.
             */
            blocks?: GoogleCloudDocumentaiV1beta1DocumentPageBlock[];
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Physical dimension of the page. */
            dimension?: GoogleCloudDocumentaiV1beta1DocumentPageDimension;
            /** A list of visually detected form fields on the page. */
            formFields?: GoogleCloudDocumentaiV1beta1DocumentPageFormField[];
            /** Layout for the page. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
            /**
             * A list of visually detected text lines on the page.
             * A collection of tokens that a human would perceive as a line.
             */
            lines?: GoogleCloudDocumentaiV1beta1DocumentPageLine[];
            /**
             * 1-based index for current Page in a parent Document.
             * Useful when a page is taken out of a Document for individual
             * processing.
             */
            pageNumber?: number;
            /**
             * A list of visually detected text paragraphs on the page.
             * A collection of lines that a human would perceive as a paragraph.
             */
            paragraphs?: GoogleCloudDocumentaiV1beta1DocumentPageParagraph[];
            /** A list of visually detected tables on the page. */
            tables?: GoogleCloudDocumentaiV1beta1DocumentPageTable[];
            /** A list of visually detected tokens on the page. */
            tokens?: GoogleCloudDocumentaiV1beta1DocumentPageToken[];
            /**
             * A list of detected non-text visual elements e.g. checkbox,
             * signature etc. on the page.
             */
            visualElements?: GoogleCloudDocumentaiV1beta1DocumentPageVisualElement[];
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageBlock {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Layout for Block. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /**
             * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
             * information, see
             * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
             */
            languageCode?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageDimension {
            /** Page height. */
            height?: number;
            /** Dimension unit. */
            unit?: string;
            /** Page width. */
            width?: number;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageFormField {
            /**
             * Layout for the FormField name. e.g. `Address`, `Email`,
             * `Grand total`, `Phone number`, etc.
             */
            fieldName?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
            /** Layout for the FormField value. */
            fieldValue?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
            /** A list of detected languages for name together with confidence. */
            nameDetectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** A list of detected languages for value together with confidence. */
            valueDetectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageLayout {
            /** The bounding polygon for the Layout. */
            boundingPoly?: GoogleCloudDocumentaiV1beta1BoundingPoly;
            /**
             * Confidence of the current Layout within context of the object this
             * layout is for. e.g. confidence can be for a single token, a table,
             * a visual element, etc. depending on context. Range [0, 1].
             */
            confidence?: number;
            /** Detected orientation for the Layout. */
            orientation?: string;
            /** Text anchor indexing into the Document.text. */
            textAnchor?: GoogleCloudDocumentaiV1beta1DocumentTextAnchor;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageLine {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Layout for Line. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageParagraph {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Layout for Paragraph. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageTable {
            /** Body rows of the table. */
            bodyRows?: GoogleCloudDocumentaiV1beta1DocumentPageTableTableRow[];
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Header rows of the table. */
            headerRows?: GoogleCloudDocumentaiV1beta1DocumentPageTableTableRow[];
            /** Layout for Table. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageTableTableCell {
            /** How many columns this cell spans. */
            colSpan?: number;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Layout for TableCell. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
            /** How many rows this cell spans. */
            rowSpan?: number;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageTableTableRow {
            /** Cells that make up this row. */
            cells?: GoogleCloudDocumentaiV1beta1DocumentPageTableTableCell[];
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageToken {
            /** Detected break at the end of a Token. */
            detectedBreak?: GoogleCloudDocumentaiV1beta1DocumentPageTokenDetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Layout for Token. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageTokenDetectedBreak {
            /** Detected break type. */
            type?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentPageVisualElement {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage[];
            /** Layout for VisualElement. */
            layout?: GoogleCloudDocumentaiV1beta1DocumentPageLayout;
            /** Type of the VisualElement. */
            type?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentShardInfo {
            /** Total number of shards. */
            shardCount?: string;
            /** The 0-based index of this shard. */
            shardIndex?: string;
            /**
             * The index of the first character in Document.text in the overall
             * document global text.
             */
            textOffset?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentStyle {
            /** Text background color. */
            backgroundColor?: GoogleTypeColor;
            /** Text color. */
            color?: GoogleTypeColor;
            /** Font size. */
            fontSize?: GoogleCloudDocumentaiV1beta1DocumentStyleFontSize;
            /**
             * Font weight. Possible values are normal, bold, bolder, and lighter.
             * https://www.w3schools.com/cssref/pr_font_weight.asp
             */
            fontWeight?: string;
            /** Text anchor indexing into the Document.text. */
            textAnchor?: GoogleCloudDocumentaiV1beta1DocumentTextAnchor;
            /**
             * Text decoration. Follows CSS standard.
             * <text-decoration-line> <text-decoration-color> <text-decoration-style>
             * https://www.w3schools.com/cssref/pr_text_text-decoration.asp
             */
            textDecoration?: string;
            /**
             * Text style. Possible values are normal, italic, and oblique.
             * https://www.w3schools.com/cssref/pr_font_font-style.asp
             */
            textStyle?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentStyleFontSize {
            /** Font size for the text. */
            size?: number;
            /** Unit for the font size. Follows CSS naming (in, px, pt, etc.). */
            unit?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentTextAnchor {
            /** The text segments from the Document.text. */
            textSegments?: GoogleCloudDocumentaiV1beta1DocumentTextAnchorTextSegment[];
        }
        interface GoogleCloudDocumentaiV1beta1DocumentTextAnchorTextSegment {
            /**
             * TextSegment half open end UTF-8 char index in the
             * Document.text.
             */
            endIndex?: string;
            /** TextSegment start UTF-8 char index in the Document.text. */
            startIndex?: string;
        }
        interface GoogleCloudDocumentaiV1beta1DocumentTranslation {
            /**
             * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
             * information, see
             * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
             */
            languageCode?: string;
            /**
             * Provenance of the translation.
             * Text anchor indexing into the Document.text.
             */
            textAnchor?: GoogleCloudDocumentaiV1beta1DocumentTextAnchor;
            /** Text translated into the target language. */
            translatedText?: string;
        }
        interface GoogleCloudDocumentaiV1beta1GcsDestination {
            uri?: string;
        }
        interface GoogleCloudDocumentaiV1beta1GcsSource {
            uri?: string;
        }
        interface GoogleCloudDocumentaiV1beta1InputConfig {
            /**
             * The Google Cloud Storage location to read the input from. This must be a
             * single file.
             */
            gcsSource?: GoogleCloudDocumentaiV1beta1GcsSource;
            /**
             * Required. Mimetype of the input. Current supported mimetypes are application/pdf,
             * image/tiff, and image/gif.
             * In addition, application/json type is supported for requests with
             * ProcessDocumentRequest.automl_params field set. The JSON file needs to
             * be in Document format.
             */
            mimeType?: string;
        }
        interface GoogleCloudDocumentaiV1beta1NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudDocumentaiV1beta1OperationMetadata {
            /** The creation time of the operation. */
            createTime?: string;
            /** The state of the current batch processing. */
            state?: string;
            /** A message providing more details about the current state of processing. */
            stateMessage?: string;
            /** The last update time of the operation. */
            updateTime?: string;
        }
        interface GoogleCloudDocumentaiV1beta1OutputConfig {
            /** The Google Cloud Storage location to write the output to. */
            gcsDestination?: GoogleCloudDocumentaiV1beta1GcsDestination;
            /**
             * The max number of pages to include into each output Document shard JSON on
             * Google Cloud Storage.
             *
             * The valid range is [1, 100]. If not specified, the default value is 20.
             *
             * For example, for one pdf file with 100 pages, 100 parsed pages will be
             * produced. If `pages_per_shard` = 20, then 5 Document shard JSON files each
             * containing 20 parsed pages will be written under the prefix
             * OutputConfig.gcs_destination.uri and suffix pages-x-to-y.json where
             * x and y are 1-indexed page numbers.
             *
             * Example GCS outputs with 157 pages and pages_per_shard = 50:
             *
             * <prefix>pages-001-to-050.json
             * <prefix>pages-051-to-100.json
             * <prefix>pages-101-to-150.json
             * <prefix>pages-151-to-157.json
             */
            pagesPerShard?: number;
        }
        interface GoogleCloudDocumentaiV1beta1ProcessDocumentResponse {
            /**
             * Information about the input file. This is the same as the corresponding
             * input config in the request.
             */
            inputConfig?: GoogleCloudDocumentaiV1beta1InputConfig;
            /**
             * The output location of the parsed responses. The responses are written to
             * this location as JSON-serialized `Document` objects.
             */
            outputConfig?: GoogleCloudDocumentaiV1beta1OutputConfig;
        }
        interface GoogleCloudDocumentaiV1beta1Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudDocumentaiV1beta2AutoMlParams {
            /**
             * Resource name of the AutoML model.
             *
             * Format: `projects/{project-id}/locations/{location-id}/models/{model-id}`.
             */
            model?: string;
        }
        interface GoogleCloudDocumentaiV1beta2BatchProcessDocumentsRequest {
            /** Required. Individual requests for each document. */
            requests?: GoogleCloudDocumentaiV1beta2ProcessDocumentRequest[];
        }
        interface GoogleCloudDocumentaiV1beta2BatchProcessDocumentsResponse {
            /** Responses for each individual document. */
            responses?: GoogleCloudDocumentaiV1beta2ProcessDocumentResponse[];
        }
        interface GoogleCloudDocumentaiV1beta2BoundingPoly {
            /** The bounding polygon normalized vertices. */
            normalizedVertices?: GoogleCloudDocumentaiV1beta2NormalizedVertex[];
            /** The bounding polygon vertices. */
            vertices?: GoogleCloudDocumentaiV1beta2Vertex[];
        }
        interface GoogleCloudDocumentaiV1beta2Document {
            /**
             * Inline document content, represented as a stream of bytes.
             * Note: As with all `bytes` fields, protobuffers use a pure binary
             * representation, whereas JSON representations use base64.
             */
            content?: string;
            /**
             * A list of entities detected on Document.text. For document shards,
             * entities in this list may cross shard boundaries.
             */
            entities?: GoogleCloudDocumentaiV1beta2DocumentEntity[];
            /** Relationship among Document.entities. */
            entityRelations?: GoogleCloudDocumentaiV1beta2DocumentEntityRelation[];
            /** Any error that occurred while processing this document. */
            error?: GoogleRpcStatus;
            /** Labels for this document. */
            labels?: GoogleCloudDocumentaiV1beta2DocumentLabel[];
            /**
             * An IANA published MIME type (also referred to as media type). For more
             * information, see
             * https://www.iana.org/assignments/media-types/media-types.xhtml.
             */
            mimeType?: string;
            /** Visual page layout for the Document. */
            pages?: GoogleCloudDocumentaiV1beta2DocumentPage[];
            /**
             * Information about the sharding if this document is sharded part of a larger
             * document. If the document is not sharded, this message is not specified.
             */
            shardInfo?: GoogleCloudDocumentaiV1beta2DocumentShardInfo;
            /** UTF-8 encoded text in reading order from the document. */
            text?: string;
            /** Styles for the Document.text. */
            textStyles?: GoogleCloudDocumentaiV1beta2DocumentStyle[];
            /**
             * A list of translations on Document.text. For document shards,
             * translations in this list may cross shard boundaries.
             */
            translations?: GoogleCloudDocumentaiV1beta2DocumentTranslation[];
            /**
             * Currently supports Google Cloud Storage URI of the form
             * `gs://bucket_name/object_name`. Object versioning is not supported.
             * See [Google Cloud Storage Request
             * URIs](https://cloud.google.com/storage/docs/reference-uris) for more
             * info.
             */
            uri?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentEntity {
            /** Optional. Confidence of detected Schema entity. Range [0, 1]. */
            confidence?: number;
            /** Deprecated.  Use `id` field instead. */
            mentionId?: string;
            /** Text value in the document e.g. `1600 Amphitheatre Pkwy`. */
            mentionText?: string;
            /**
             * Provenance of the entity.
             * Text anchor indexing into the Document.text.
             */
            textAnchor?: GoogleCloudDocumentaiV1beta2DocumentTextAnchor;
            /** Entity type from a schema e.g. `Address`. */
            type?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentEntityRelation {
            /** Object entity id. */
            objectId?: string;
            /** Relationship description. */
            relation?: string;
            /** Subject entity id. */
            subjectId?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentLabel {
            /**
             * Label is generated AutoML model. This field stores the full resource
             * name of the AutoML model.
             *
             * Format:
             * `projects/{project-id}/locations/{location-id}/models/{model-id}`
             */
            automlModel?: string;
            /** Confidence score between 0 and 1 for label assignment. */
            confidence?: number;
            /**
             * Name of the label.
             *
             * When the label is generated from AutoML Text Classification model, this
             * field represents the name of the category.
             */
            name?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPage {
            /**
             * A list of visually detected text blocks on the page.
             * A block has a set of lines (collected into paragraphs) that have a common
             * line-spacing and orientation.
             */
            blocks?: GoogleCloudDocumentaiV1beta2DocumentPageBlock[];
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Physical dimension of the page. */
            dimension?: GoogleCloudDocumentaiV1beta2DocumentPageDimension;
            /** A list of visually detected form fields on the page. */
            formFields?: GoogleCloudDocumentaiV1beta2DocumentPageFormField[];
            /** Layout for the page. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
            /**
             * A list of visually detected text lines on the page.
             * A collection of tokens that a human would perceive as a line.
             */
            lines?: GoogleCloudDocumentaiV1beta2DocumentPageLine[];
            /**
             * 1-based index for current Page in a parent Document.
             * Useful when a page is taken out of a Document for individual
             * processing.
             */
            pageNumber?: number;
            /**
             * A list of visually detected text paragraphs on the page.
             * A collection of lines that a human would perceive as a paragraph.
             */
            paragraphs?: GoogleCloudDocumentaiV1beta2DocumentPageParagraph[];
            /** A list of visually detected tables on the page. */
            tables?: GoogleCloudDocumentaiV1beta2DocumentPageTable[];
            /** A list of visually detected tokens on the page. */
            tokens?: GoogleCloudDocumentaiV1beta2DocumentPageToken[];
            /**
             * A list of detected non-text visual elements e.g. checkbox,
             * signature etc. on the page.
             */
            visualElements?: GoogleCloudDocumentaiV1beta2DocumentPageVisualElement[];
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageBlock {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Layout for Block. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage {
            /** Confidence of detected language. Range [0, 1]. */
            confidence?: number;
            /**
             * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
             * information, see
             * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
             */
            languageCode?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageDimension {
            /** Page height. */
            height?: number;
            /** Dimension unit. */
            unit?: string;
            /** Page width. */
            width?: number;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageFormField {
            /**
             * Layout for the FormField name. e.g. `Address`, `Email`,
             * `Grand total`, `Phone number`, etc.
             */
            fieldName?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
            /** Layout for the FormField value. */
            fieldValue?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
            /** A list of detected languages for name together with confidence. */
            nameDetectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** A list of detected languages for value together with confidence. */
            valueDetectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /**
             * If the value is non-textual, this field represents the type. Current
             * valid values are:
             * - blank (this indicates the field_value is normal text)
             * - "unfilled_checkbox"
             * - "filled_checkbox"
             */
            valueType?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageLayout {
            /** The bounding polygon for the Layout. */
            boundingPoly?: GoogleCloudDocumentaiV1beta2BoundingPoly;
            /**
             * Confidence of the current Layout within context of the object this
             * layout is for. e.g. confidence can be for a single token, a table,
             * a visual element, etc. depending on context. Range [0, 1].
             */
            confidence?: number;
            /** Detected orientation for the Layout. */
            orientation?: string;
            /** Text anchor indexing into the Document.text. */
            textAnchor?: GoogleCloudDocumentaiV1beta2DocumentTextAnchor;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageLine {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Layout for Line. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageParagraph {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Layout for Paragraph. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageTable {
            /** Body rows of the table. */
            bodyRows?: GoogleCloudDocumentaiV1beta2DocumentPageTableTableRow[];
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Header rows of the table. */
            headerRows?: GoogleCloudDocumentaiV1beta2DocumentPageTableTableRow[];
            /** Layout for Table. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageTableTableCell {
            /** How many columns this cell spans. */
            colSpan?: number;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Layout for TableCell. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
            /** How many rows this cell spans. */
            rowSpan?: number;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageTableTableRow {
            /** Cells that make up this row. */
            cells?: GoogleCloudDocumentaiV1beta2DocumentPageTableTableCell[];
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageToken {
            /** Detected break at the end of a Token. */
            detectedBreak?: GoogleCloudDocumentaiV1beta2DocumentPageTokenDetectedBreak;
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Layout for Token. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageTokenDetectedBreak {
            /** Detected break type. */
            type?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentPageVisualElement {
            /** A list of detected languages together with confidence. */
            detectedLanguages?: GoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage[];
            /** Layout for VisualElement. */
            layout?: GoogleCloudDocumentaiV1beta2DocumentPageLayout;
            /** Type of the VisualElement. */
            type?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentShardInfo {
            /** Total number of shards. */
            shardCount?: string;
            /** The 0-based index of this shard. */
            shardIndex?: string;
            /**
             * The index of the first character in Document.text in the overall
             * document global text.
             */
            textOffset?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentStyle {
            /** Text background color. */
            backgroundColor?: GoogleTypeColor;
            /** Text color. */
            color?: GoogleTypeColor;
            /** Font size. */
            fontSize?: GoogleCloudDocumentaiV1beta2DocumentStyleFontSize;
            /**
             * Font weight. Possible values are normal, bold, bolder, and lighter.
             * https://www.w3schools.com/cssref/pr_font_weight.asp
             */
            fontWeight?: string;
            /** Text anchor indexing into the Document.text. */
            textAnchor?: GoogleCloudDocumentaiV1beta2DocumentTextAnchor;
            /**
             * Text decoration. Follows CSS standard.
             * <text-decoration-line> <text-decoration-color> <text-decoration-style>
             * https://www.w3schools.com/cssref/pr_text_text-decoration.asp
             */
            textDecoration?: string;
            /**
             * Text style. Possible values are normal, italic, and oblique.
             * https://www.w3schools.com/cssref/pr_font_font-style.asp
             */
            textStyle?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentStyleFontSize {
            /** Font size for the text. */
            size?: number;
            /** Unit for the font size. Follows CSS naming (in, px, pt, etc.). */
            unit?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentTextAnchor {
            /** The text segments from the Document.text. */
            textSegments?: GoogleCloudDocumentaiV1beta2DocumentTextAnchorTextSegment[];
        }
        interface GoogleCloudDocumentaiV1beta2DocumentTextAnchorTextSegment {
            /**
             * TextSegment half open end UTF-8 char index in the
             * Document.text.
             */
            endIndex?: string;
            /** TextSegment start UTF-8 char index in the Document.text. */
            startIndex?: string;
        }
        interface GoogleCloudDocumentaiV1beta2DocumentTranslation {
            /**
             * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
             * information, see
             * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
             */
            languageCode?: string;
            /**
             * Provenance of the translation.
             * Text anchor indexing into the Document.text.
             */
            textAnchor?: GoogleCloudDocumentaiV1beta2DocumentTextAnchor;
            /** Text translated into the target language. */
            translatedText?: string;
        }
        interface GoogleCloudDocumentaiV1beta2EntityExtractionParams {
            /** Whether to enable entity extraction. */
            enabled?: boolean;
            /**
             * Model version of the entity extraction. Default is
             * "builtin/stable". Specify "builtin/latest" for the latest model.
             */
            modelVersion?: string;
        }
        interface GoogleCloudDocumentaiV1beta2FormExtractionParams {
            /** Whether to enable form extraction. */
            enabled?: boolean;
            /** Reserved for future use. */
            keyValuePairHints?: GoogleCloudDocumentaiV1beta2KeyValuePairHint[];
            /**
             * Model version of the form extraction system. Default is
             * "builtin/stable". Specify "builtin/latest" for the latest model.
             * For custom form models, specify: “custom/{model_name}". Model name
             * format is "bucket_name/path/to/modeldir" corresponding to
             * "gs://bucket_name/path/to/modeldir" where annotated examples are stored.
             */
            modelVersion?: string;
        }
        interface GoogleCloudDocumentaiV1beta2GcsDestination {
            uri?: string;
        }
        interface GoogleCloudDocumentaiV1beta2GcsSource {
            uri?: string;
        }
        interface GoogleCloudDocumentaiV1beta2InputConfig {
            /**
             * Content in bytes, represented as a stream of bytes.
             * Note: As with all `bytes` fields, proto buffer messages use a pure binary
             * representation, whereas JSON representations use base64.
             *
             * This field only works for synchronous ProcessDocument method.
             */
            contents?: string;
            /**
             * The Google Cloud Storage location to read the input from. This must be a
             * single file.
             */
            gcsSource?: GoogleCloudDocumentaiV1beta2GcsSource;
            /**
             * Required. Mimetype of the input. Current supported mimetypes are application/pdf,
             * image/tiff, and image/gif.
             * In addition, application/json type is supported for requests with
             * ProcessDocumentRequest.automl_params field set. The JSON file needs to
             * be in Document format.
             */
            mimeType?: string;
        }
        interface GoogleCloudDocumentaiV1beta2KeyValuePairHint {
            /** The key text for the hint. */
            key?: string;
            /**
             * Type of the value. This is case-insensitive, and could be one of:
             * ADDRESS, LOCATION, ORGANIZATION, PERSON, PHONE_NUMBER,
             * ID, NUMBER, EMAIL, PRICE, TERMS, DATE, NAME. Types not in this list will
             * be ignored.
             */
            valueTypes?: string[];
        }
        interface GoogleCloudDocumentaiV1beta2NormalizedVertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleCloudDocumentaiV1beta2OcrParams {
            /**
             * List of languages to use for OCR. In most cases, an empty value
             * yields the best results since it enables automatic language detection. For
             * languages based on the Latin alphabet, setting `language_hints` is not
             * needed. In rare cases, when the language of the text in the image is known,
             * setting a hint will help get better results (although it will be a
             * significant hindrance if the hint is wrong). Document processing returns an
             * error if one or more of the specified languages is not one of the
             * supported languages.
             */
            languageHints?: string[];
        }
        interface GoogleCloudDocumentaiV1beta2OperationMetadata {
            /** The creation time of the operation. */
            createTime?: string;
            /** The state of the current batch processing. */
            state?: string;
            /** A message providing more details about the current state of processing. */
            stateMessage?: string;
            /** The last update time of the operation. */
            updateTime?: string;
        }
        interface GoogleCloudDocumentaiV1beta2OutputConfig {
            /** The Google Cloud Storage location to write the output to. */
            gcsDestination?: GoogleCloudDocumentaiV1beta2GcsDestination;
            /**
             * The max number of pages to include into each output Document shard JSON on
             * Google Cloud Storage.
             *
             * The valid range is [1, 100]. If not specified, the default value is 20.
             *
             * For example, for one pdf file with 100 pages, 100 parsed pages will be
             * produced. If `pages_per_shard` = 20, then 5 Document shard JSON files each
             * containing 20 parsed pages will be written under the prefix
             * OutputConfig.gcs_destination.uri and suffix pages-x-to-y.json where
             * x and y are 1-indexed page numbers.
             *
             * Example GCS outputs with 157 pages and pages_per_shard = 50:
             *
             * <prefix>pages-001-to-050.json
             * <prefix>pages-051-to-100.json
             * <prefix>pages-101-to-150.json
             * <prefix>pages-151-to-157.json
             */
            pagesPerShard?: number;
        }
        interface GoogleCloudDocumentaiV1beta2ProcessDocumentRequest {
            /**
             * Controls AutoML model prediction behavior. AutoMlParams cannot be used
             * together with other Params.
             */
            automlParams?: GoogleCloudDocumentaiV1beta2AutoMlParams;
            /**
             * Specifies a known document type for deeper structure detection. Valid
             * values are currently "general" and "invoice". If not provided, "general"\
             * is used as default. If any other value is given, the request is rejected.
             */
            documentType?: string;
            /**
             * Controls entity extraction behavior. If not specified, the system will
             * decide reasonable defaults.
             */
            entityExtractionParams?: GoogleCloudDocumentaiV1beta2EntityExtractionParams;
            /**
             * Controls form extraction behavior. If not specified, the system will
             * decide reasonable defaults.
             */
            formExtractionParams?: GoogleCloudDocumentaiV1beta2FormExtractionParams;
            /** Required. Information about the input file. */
            inputConfig?: GoogleCloudDocumentaiV1beta2InputConfig;
            /**
             * Controls OCR behavior. If not specified, the system will decide reasonable
             * defaults.
             */
            ocrParams?: GoogleCloudDocumentaiV1beta2OcrParams;
            /**
             * The desired output location. This field is only needed in
             * BatchProcessDocumentsRequest.
             */
            outputConfig?: GoogleCloudDocumentaiV1beta2OutputConfig;
            /**
             * Target project and location to make a call.
             *
             * Format: `projects/{project-id}/locations/{location-id}`.
             *
             * If no location is specified, a region will be chosen automatically.
             * This field is only populated when used in ProcessDocument method.
             */
            parent?: string;
            /**
             * Controls table extraction behavior. If not specified, the system will
             * decide reasonable defaults.
             */
            tableExtractionParams?: GoogleCloudDocumentaiV1beta2TableExtractionParams;
        }
        interface GoogleCloudDocumentaiV1beta2ProcessDocumentResponse {
            /**
             * Information about the input file. This is the same as the corresponding
             * input config in the request.
             */
            inputConfig?: GoogleCloudDocumentaiV1beta2InputConfig;
            /**
             * The output location of the parsed responses. The responses are written to
             * this location as JSON-serialized `Document` objects.
             */
            outputConfig?: GoogleCloudDocumentaiV1beta2OutputConfig;
        }
        interface GoogleCloudDocumentaiV1beta2TableBoundHint {
            /**
             * Bounding box hint for a table on this page. The coordinates must be
             * normalized to [0,1] and the bounding box must be an axis-aligned rectangle.
             */
            boundingBox?: GoogleCloudDocumentaiV1beta2BoundingPoly;
            /**
             * Optional. Page number for multi-paged inputs this hint applies to. If not
             * provided, this hint will apply to all pages by default. This value is
             * 1-based.
             */
            pageNumber?: number;
        }
        interface GoogleCloudDocumentaiV1beta2TableExtractionParams {
            /** Whether to enable table extraction. */
            enabled?: boolean;
            /** Optional. Reserved for future use. */
            headerHints?: string[];
            /**
             * Model version of the table extraction system. Default is "builtin/stable".
             * Specify "builtin/latest" for the latest model.
             */
            modelVersion?: string;
            /**
             * Optional. Table bounding box hints that can be provided to complex cases
             * which our algorithm cannot locate the table(s) in.
             */
            tableBoundHints?: GoogleCloudDocumentaiV1beta2TableBoundHint[];
        }
        interface GoogleCloudDocumentaiV1beta2Vertex {
            /** X coordinate. */
            x?: number;
            /** Y coordinate. */
            y?: number;
        }
        interface GoogleLongrunningOperation {
            /**
             * If the value is `false`, it means the operation is still in progress.
             * If `true`, the operation is completed, and either `error` or `response` is
             * available.
             */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: GoogleRpcStatus;
            /**
             * Service-specific metadata associated with the operation.  It typically
             * contains progress information and common metadata such as create time.
             * Some services might not provide such metadata.  Any method that returns a
             * long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that
             * originally returns it. If you use the default HTTP mapping, the
             * `name` should be a resource name ending with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success.  If the original
             * method returns no data on success, such as `Delete`, the response is
             * `google.protobuf.Empty`.  If the original method is standard
             * `Get`/`Create`/`Update`, the response should be the resource.  For other
             * methods, the response should have the type `XxxResponse`, where `Xxx`
             * is the original method name.  For example, if the original method name
             * is `TakeSnapshot()`, the inferred response type is
             * `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface GoogleRpcStatus {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /**
             * A list of messages that carry the error details.  There is a common set of
             * message types for APIs to use.
             */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any
             * user-facing error message should be localized and sent in the
             * google.rpc.Status.details field, or localized by the client.
             */
            message?: string;
        }
        interface GoogleTypeColor {
            /**
             * The fraction of this color that should be applied to the pixel. That is,
             * the final pixel color is defined by the equation:
             *
             * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
             *
             * This means that a value of 1.0 corresponds to a solid color, whereas
             * a value of 0.0 corresponds to a completely transparent color. This
             * uses a wrapper message rather than a simple float scalar so that it is
             * possible to distinguish between a default value and the value being unset.
             * If omitted, this color object is to be rendered as a solid color
             * (as if the alpha value had been explicitly given with a value of 1.0).
             */
            alpha?: number;
            /** The amount of blue in the color as a value in the interval [0, 1]. */
            blue?: number;
            /** The amount of green in the color as a value in the interval [0, 1]. */
            green?: number;
            /** The amount of red in the color as a value in the interval [0, 1]. */
            red?: number;
        }
        interface DocumentsResource {
            /**
             * LRO endpoint to batch process many documents. The output is written
             * to Cloud Storage as JSON in the [Document] format.
             */
            batchProcess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudDocumentaiV1beta2BatchProcessDocumentsRequest;
            }): Request<GoogleLongrunningOperation>;
            batchProcess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudDocumentaiV1beta2BatchProcessDocumentsRequest): Request<GoogleLongrunningOperation>;
            /** Processes a single document. */
            process(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 * This field is only populated when used in ProcessDocument method.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudDocumentaiV1beta2ProcessDocumentRequest;
            }): Request<GoogleCloudDocumentaiV1beta2Document>;
            process(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 * This field is only populated when used in ProcessDocument method.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudDocumentaiV1beta2ProcessDocumentRequest): Request<GoogleCloudDocumentaiV1beta2Document>;
        }
        interface DocumentsResource {
            /**
             * LRO endpoint to batch process many documents. The output is written
             * to Cloud Storage as JSON in the [Document] format.
             */
            batchProcess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudDocumentaiV1beta2BatchProcessDocumentsRequest;
            }): Request<GoogleLongrunningOperation>;
            batchProcess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudDocumentaiV1beta2BatchProcessDocumentsRequest): Request<GoogleLongrunningOperation>;
            /** Processes a single document. */
            process(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 * This field is only populated when used in ProcessDocument method.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleCloudDocumentaiV1beta2ProcessDocumentRequest;
            }): Request<GoogleCloudDocumentaiV1beta2Document>;
            process(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Target project and location to make a call.
                 *
                 * Format: `projects/{project-id}/locations/{location-id}`.
                 *
                 * If no location is specified, a region will be chosen automatically.
                 * This field is only populated when used in ProcessDocument method.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleCloudDocumentaiV1beta2ProcessDocumentRequest): Request<GoogleCloudDocumentaiV1beta2Document>;
        }
        interface OperationsResource {
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleLongrunningOperation>;
        }
        interface LocationsResource {
            documents: DocumentsResource;
            operations: OperationsResource;
        }
        interface OperationsResource {
            /**
             * Gets the latest state of a long-running operation.  Clients can use this
             * method to poll the operation result at intervals as recommended by the API
             * service.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleLongrunningOperation>;
        }
        interface ProjectsResource {
            documents: DocumentsResource;
            locations: LocationsResource;
            operations: OperationsResource;
        }

        const projects: ProjectsResource;
    }
}
