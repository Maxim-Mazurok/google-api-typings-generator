/* This is stub file for gapi.client.identitytoolkit-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250514

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://identitytoolkit.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.identitytoolkit */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and administer all your Firebase data and settings */
    'https://www.googleapis.com/auth/firebase',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** If an email identifier is specified, checks and returns if any user account is registered with the email. If there is a registered account, fetches all providers associated with the account's email. If the provider ID of an Identity Provider (IdP) is specified, creates an authorization URI for the IdP. The user can be directed to this URI to sign in with the IdP. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.createAuthUri(
      {},
      {
        appId: 'Test string',
        authFlowType: 'Test string',
        context: 'Test string',
        continueUri: 'Test string',
        customParameter: {
          A: 'Test string',
        },
        hostedDomain: 'Test string',
        identifier: 'Test string',
        oauthConsumerKey: 'Test string',
        oauthScope: 'Test string',
        openidRealm: 'Test string',
        otaApp: 'Test string',
        providerId: 'Test string',
        sessionId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Deletes a user's account. */
    await gapi.client.identitytoolkit.accounts.delete(
      {},
      {
        delegatedProjectNumber: 'Test string',
        idToken: 'Test string',
        localId: 'Test string',
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Experimental */
    await gapi.client.identitytoolkit.accounts.issueSamlResponse(
      {},
      {
        idToken: 'Test string',
        rpId: 'Test string',
        samlAppEntityId: 'Test string',
      },
    );
    /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
    await gapi.client.identitytoolkit.accounts.lookup(
      {},
      {
        delegatedProjectNumber: 'Test string',
        email: ['Test string'],
        federatedUserId: [
          {
            providerId: 'Test string',
            rawId: 'Test string',
          },
        ],
        idToken: 'Test string',
        initialEmail: ['Test string'],
        localId: ['Test string'],
        phoneNumber: ['Test string'],
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Resets the password of an account either using an out-of-band code generated by sendOobCode or by specifying the email and password of the account to be modified. Can also check the purpose of an out-of-band code without consuming it. */
    await gapi.client.identitytoolkit.accounts.resetPassword(
      {},
      {
        email: 'Test string',
        newPassword: 'Test string',
        oldPassword: 'Test string',
        oobCode: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
    await gapi.client.identitytoolkit.accounts.sendOobCode(
      {},
      {
        androidInstallApp: true,
        androidMinimumVersion: 'Test string',
        androidPackageName: 'Test string',
        canHandleCodeInApp: true,
        captchaResp: 'Test string',
        challenge: 'Test string',
        clientType: 'Test string',
        continueUrl: 'Test string',
        dynamicLinkDomain: 'Test string',
        email: 'Test string',
        idToken: 'Test string',
        iOSAppStoreId: 'Test string',
        iOSBundleId: 'Test string',
        linkDomain: 'Test string',
        newEmail: 'Test string',
        recaptchaVersion: 'Test string',
        requestType: 'Test string',
        returnOobLink: true,
        targetProjectId: 'Test string',
        tenantId: 'Test string',
        userIp: 'Test string',
      },
    );
    /** Sends a SMS verification code for phone number sign-in. To localize the text of the SMS sent to the user, set the HTTP header `X-Firebase-Locale` to the language code that corresponds with the user's locale. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.sendVerificationCode(
      {},
      {
        autoRetrievalInfo: {
          appSignatureHash: 'Test string',
        },
        captchaResponse: 'Test string',
        clientType: 'Test string',
        iosReceipt: 'Test string',
        iosSecret: 'Test string',
        phoneNumber: 'Test string',
        playIntegrityToken: 'Test string',
        recaptchaToken: 'Test string',
        recaptchaVersion: 'Test string',
        safetyNetToken: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Signs in or signs up a user by exchanging a custom Auth token. Upon a successful sign-in or sign-up, a new Identity Platform ID token and refresh token are issued for the user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.signInWithCustomToken(
      {},
      {
        delegatedProjectNumber: 'Test string',
        instanceId: 'Test string',
        returnSecureToken: true,
        tenantId: 'Test string',
        token: 'Test string',
      },
    );
    /** Signs in or signs up a user with a out-of-band code from an email link. If a user does not exist with the given email address, a user record will be created. If the sign-in succeeds, an Identity Platform ID and refresh token are issued for the authenticated user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.signInWithEmailLink(
      {},
      {
        email: 'Test string',
        idToken: 'Test string',
        oobCode: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Signs in or signs up a user with iOS Game Center credentials. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. The bundle ID is required in the request header as `x-ios-bundle-identifier`. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. Apple has [deprecated the `playerID` field](https://developer.apple.com/documentation/gamekit/gkplayer/1521127-playerid/). The Apple platform Firebase SDK will use `gamePlayerID` and `teamPlayerID` from version 10.5.0 and onwards. Upgrading to SDK version 10.5.0 or later updates existing integrations that use `playerID` to instead use `gamePlayerID` and `teamPlayerID`. When making calls to `signInWithGameCenter`, you must include `playerID` along with the new fields `gamePlayerID` and `teamPlayerID` to successfully identify all existing users. Upgrading existing Game Center sign in integrations to SDK version 10.5.0 or later is irreversible. */
    await gapi.client.identitytoolkit.accounts.signInWithGameCenter(
      {},
      {
        displayName: 'Test string',
        gamePlayerId: 'Test string',
        idToken: 'Test string',
        playerId: 'Test string',
        publicKeyUrl: 'Test string',
        salt: 'Test string',
        signature: 'Test string',
        teamPlayerId: 'Test string',
        tenantId: 'Test string',
        timestamp: 'Test string',
      },
    );
    /** Signs in or signs up a user using credentials from an Identity Provider (IdP). This is done by manually providing an IdP credential, or by providing the authorization response obtained via the authorization request from CreateAuthUri. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. A new Identity Platform user account will be created if the user has not previously signed in to the IdP with the same account. In addition, when the "One account per email address" setting is enabled, there should not be an existing Identity Platform user account with the same email address for a new user account to be created. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.signInWithIdp(
      {},
      {
        autoCreate: true,
        delegatedProjectNumber: 'Test string',
        idToken: 'Test string',
        pendingIdToken: 'Test string',
        pendingToken: 'Test string',
        postBody: 'Test string',
        requestUri: 'Test string',
        returnIdpCredential: true,
        returnRefreshToken: true,
        returnSecureToken: true,
        sessionId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Signs in a user with email and password. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.signInWithPassword(
      {},
      {
        captchaChallenge: 'Test string',
        captchaResponse: 'Test string',
        clientType: 'Test string',
        delegatedProjectNumber: 'Test string',
        email: 'Test string',
        idToken: 'Test string',
        instanceId: 'Test string',
        password: 'Test string',
        pendingIdToken: 'Test string',
        recaptchaVersion: 'Test string',
        returnSecureToken: true,
        tenantId: 'Test string',
      },
    );
    /** Completes a phone number authentication attempt. If a user already exists with the given phone number, an ID token is minted for that user. Otherwise, a new user is created and associated with the phone number. This method may also be used to link a phone number to an existing user. To localize the text of the SMS sent to the user, set the HTTP header `X-Firebase-Locale` to the language code that corresponds with the user's locale. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.signInWithPhoneNumber(
      {},
      {
        code: 'Test string',
        idToken: 'Test string',
        operation: 'Test string',
        phoneNumber: 'Test string',
        sessionInfo: 'Test string',
        temporaryProof: 'Test string',
        tenantId: 'Test string',
        verificationProof: 'Test string',
      },
    );
    /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.signUp(
      {},
      {
        captchaChallenge: 'Test string',
        captchaResponse: 'Test string',
        clientType: 'Test string',
        disabled: true,
        displayName: 'Test string',
        email: 'Test string',
        emailVerified: true,
        idToken: 'Test string',
        instanceId: 'Test string',
        localId: 'Test string',
        mfaInfo: [
          {
            displayName: 'Test string',
            phoneInfo: 'Test string',
          },
        ],
        password: 'Test string',
        phoneNumber: 'Test string',
        photoUrl: 'Test string',
        recaptchaVersion: 'Test string',
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
    await gapi.client.identitytoolkit.accounts.update(
      {},
      {
        captchaChallenge: 'Test string',
        captchaResponse: 'Test string',
        createdAt: 'Test string',
        customAttributes: 'Test string',
        delegatedProjectNumber: 'Test string',
        deleteAttribute: ['Test string'],
        deleteProvider: ['Test string'],
        disableUser: true,
        displayName: 'Test string',
        email: 'Test string',
        emailVerified: true,
        idToken: 'Test string',
        instanceId: 'Test string',
        lastLoginAt: 'Test string',
        linkProviderUserInfo: {
          displayName: 'Test string',
          email: 'Test string',
          federatedId: 'Test string',
          phoneNumber: 'Test string',
          photoUrl: 'Test string',
          providerId: 'Test string',
          rawId: 'Test string',
          screenName: 'Test string',
        },
        localId: 'Test string',
        mfa: {
          enrollments: [
            {
              displayName: 'Test string',
              emailInfo: {
                emailAddress: 'Test string',
              },
              enrolledAt: 'Test string',
              mfaEnrollmentId: 'Test string',
              phoneInfo: 'Test string',
              totpInfo: {},
              unobfuscatedPhoneInfo: 'Test string',
            },
          ],
        },
        oobCode: 'Test string',
        password: 'Test string',
        phoneNumber: 'Test string',
        photoUrl: 'Test string',
        provider: ['Test string'],
        returnSecureToken: true,
        targetProjectId: 'Test string',
        tenantId: 'Test string',
        upgradeToFederatedLogin: true,
        validSince: 'Test string',
      },
    );
    /** Verifies an iOS client is a real iOS device. If the request is valid, a receipt will be sent in the response and a secret will be sent via Apple Push Notification Service. The client should send both of them back to certain Identity Platform APIs in a later call (for example, /accounts:sendVerificationCode), in order to verify the client. The bundle ID is required in the request header as `x-ios-bundle-identifier`. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    await gapi.client.identitytoolkit.accounts.verifyIosClient(
      {},
      {
        appToken: 'Test string',
        isSandbox: true,
      },
    );
    /** Creates a session cookie for the given Identity Platform ID token. The session cookie is used by the client to preserve the user's login state. */
    await gapi.client.identitytoolkit.projects.createSessionCookie(
      {
        targetProjectId: 'Test string',
      },
      {
        idToken: 'Test string',
        tenantId: 'Test string',
        validDuration: 'Test string',
      },
    );
    /** Looks up user accounts within a project or a tenant based on conditions in the request. */
    await gapi.client.identitytoolkit.projects.queryAccounts(
      {
        targetProjectId: 'Test string',
      },
      {
        expression: [
          {
            email: 'Test string',
            phoneNumber: 'Test string',
            userId: 'Test string',
          },
        ],
        limit: 'Test string',
        offset: 'Test string',
        order: 'Test string',
        returnUserInfo: true,
        sortBy: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Uploads multiple accounts into the Google Cloud project. If there is a problem uploading one or more of the accounts, the rest will be uploaded, and a list of the errors will be returned. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
    await gapi.client.identitytoolkit.projects.accounts.batchCreate(
      {
        targetProjectId: 'Test string',
      },
      {
        allowOverwrite: true,
        argon2Parameters: {
          associatedData: 'Test string',
          hashLengthBytes: 42,
          hashType: 'Test string',
          iterations: 42,
          memoryCostKib: 42,
          parallelism: 42,
          version: 'Test string',
        },
        blockSize: 42,
        cpuMemCost: 42,
        delegatedProjectNumber: 'Test string',
        dkLen: 42,
        hashAlgorithm: 'Test string',
        memoryCost: 42,
        parallelization: 42,
        passwordHashOrder: 'Test string',
        rounds: 42,
        saltSeparator: 'Test string',
        sanityCheck: true,
        signerKey: 'Test string',
        tenantId: 'Test string',
        users: [
          {
            createdAt: 'Test string',
            customAttributes: 'Test string',
            customAuth: true,
            dateOfBirth: 'Test string',
            disabled: true,
            displayName: 'Test string',
            email: 'Test string',
            emailLinkSignin: true,
            emailVerified: true,
            initialEmail: 'Test string',
            language: 'Test string',
            lastLoginAt: 'Test string',
            lastRefreshAt: 'Test string',
            localId: 'Test string',
            mfaInfo: [
              {
                displayName: 'Test string',
                emailInfo: {
                  emailAddress: 'Test string',
                },
                enrolledAt: 'Test string',
                mfaEnrollmentId: 'Test string',
                phoneInfo: 'Test string',
                totpInfo: {},
                unobfuscatedPhoneInfo: 'Test string',
              },
            ],
            passwordHash: 'Test string',
            passwordUpdatedAt: 42,
            phoneNumber: 'Test string',
            photoUrl: 'Test string',
            providerUserInfo: [
              {
                displayName: 'Test string',
                email: 'Test string',
                federatedId: 'Test string',
                phoneNumber: 'Test string',
                photoUrl: 'Test string',
                providerId: 'Test string',
                rawId: 'Test string',
                screenName: 'Test string',
              },
            ],
            rawPassword: 'Test string',
            salt: 'Test string',
            screenName: 'Test string',
            tenantId: 'Test string',
            timeZone: 'Test string',
            validSince: 'Test string',
            version: 42,
          },
        ],
      },
    );
    /** Batch deletes multiple accounts. For accounts that fail to be deleted, error info is contained in the response. The method ignores accounts that do not exist or are duplicated in the request. This method requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
    await gapi.client.identitytoolkit.projects.accounts.batchDelete(
      {
        targetProjectId: 'Test string',
      },
      {
        force: true,
        localIds: ['Test string'],
        tenantId: 'Test string',
      },
    );
    /** Download account information for all accounts on the project in a paginated manner. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).. Furthermore, additional permissions are needed to get password hash, password salt, and password version from accounts; otherwise these fields are redacted. */
    await gapi.client.identitytoolkit.projects.accounts.batchGet({
      delegatedProjectNumber: 'Test string',
      maxResults: 42,
      nextPageToken: 'Test string',
      targetProjectId: 'Test string',
      tenantId: 'Test string',
    });
    /** Deletes a user's account. */
    await gapi.client.identitytoolkit.projects.accounts.delete(
      {
        targetProjectId: 'Test string',
      },
      {
        delegatedProjectNumber: 'Test string',
        idToken: 'Test string',
        localId: 'Test string',
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
    await gapi.client.identitytoolkit.projects.accounts.lookup(
      {
        targetProjectId: 'Test string',
      },
      {
        delegatedProjectNumber: 'Test string',
        email: ['Test string'],
        federatedUserId: [
          {
            providerId: 'Test string',
            rawId: 'Test string',
          },
        ],
        idToken: 'Test string',
        initialEmail: ['Test string'],
        localId: ['Test string'],
        phoneNumber: ['Test string'],
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Looks up user accounts within a project or a tenant based on conditions in the request. */
    await gapi.client.identitytoolkit.projects.accounts.query(
      {
        targetProjectId: 'Test string',
      },
      {
        expression: [
          {
            email: 'Test string',
            phoneNumber: 'Test string',
            userId: 'Test string',
          },
        ],
        limit: 'Test string',
        offset: 'Test string',
        order: 'Test string',
        returnUserInfo: true,
        sortBy: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
    await gapi.client.identitytoolkit.projects.accounts.sendOobCode(
      {
        targetProjectId: 'Test string',
      },
      {
        androidInstallApp: true,
        androidMinimumVersion: 'Test string',
        androidPackageName: 'Test string',
        canHandleCodeInApp: true,
        captchaResp: 'Test string',
        challenge: 'Test string',
        clientType: 'Test string',
        continueUrl: 'Test string',
        dynamicLinkDomain: 'Test string',
        email: 'Test string',
        idToken: 'Test string',
        iOSAppStoreId: 'Test string',
        iOSBundleId: 'Test string',
        linkDomain: 'Test string',
        newEmail: 'Test string',
        recaptchaVersion: 'Test string',
        requestType: 'Test string',
        returnOobLink: true,
        targetProjectId: 'Test string',
        tenantId: 'Test string',
        userIp: 'Test string',
      },
    );
    /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
    await gapi.client.identitytoolkit.projects.accounts.update(
      {
        targetProjectId: 'Test string',
      },
      {
        captchaChallenge: 'Test string',
        captchaResponse: 'Test string',
        createdAt: 'Test string',
        customAttributes: 'Test string',
        delegatedProjectNumber: 'Test string',
        deleteAttribute: ['Test string'],
        deleteProvider: ['Test string'],
        disableUser: true,
        displayName: 'Test string',
        email: 'Test string',
        emailVerified: true,
        idToken: 'Test string',
        instanceId: 'Test string',
        lastLoginAt: 'Test string',
        linkProviderUserInfo: {
          displayName: 'Test string',
          email: 'Test string',
          federatedId: 'Test string',
          phoneNumber: 'Test string',
          photoUrl: 'Test string',
          providerId: 'Test string',
          rawId: 'Test string',
          screenName: 'Test string',
        },
        localId: 'Test string',
        mfa: {
          enrollments: [
            {
              displayName: 'Test string',
              emailInfo: {
                emailAddress: 'Test string',
              },
              enrolledAt: 'Test string',
              mfaEnrollmentId: 'Test string',
              phoneInfo: 'Test string',
              totpInfo: {},
              unobfuscatedPhoneInfo: 'Test string',
            },
          ],
        },
        oobCode: 'Test string',
        password: 'Test string',
        phoneNumber: 'Test string',
        photoUrl: 'Test string',
        provider: ['Test string'],
        returnSecureToken: true,
        targetProjectId: 'Test string',
        tenantId: 'Test string',
        upgradeToFederatedLogin: true,
        validSince: 'Test string',
      },
    );
    /** Creates a session cookie for the given Identity Platform ID token. The session cookie is used by the client to preserve the user's login state. */
    await gapi.client.identitytoolkit.projects.tenants.createSessionCookie(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        idToken: 'Test string',
        tenantId: 'Test string',
        validDuration: 'Test string',
      },
    );
    /** Uploads multiple accounts into the Google Cloud project. If there is a problem uploading one or more of the accounts, the rest will be uploaded, and a list of the errors will be returned. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
    await gapi.client.identitytoolkit.projects.tenants.accounts.batchCreate(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        allowOverwrite: true,
        argon2Parameters: {
          associatedData: 'Test string',
          hashLengthBytes: 42,
          hashType: 'Test string',
          iterations: 42,
          memoryCostKib: 42,
          parallelism: 42,
          version: 'Test string',
        },
        blockSize: 42,
        cpuMemCost: 42,
        delegatedProjectNumber: 'Test string',
        dkLen: 42,
        hashAlgorithm: 'Test string',
        memoryCost: 42,
        parallelization: 42,
        passwordHashOrder: 'Test string',
        rounds: 42,
        saltSeparator: 'Test string',
        sanityCheck: true,
        signerKey: 'Test string',
        tenantId: 'Test string',
        users: [
          {
            createdAt: 'Test string',
            customAttributes: 'Test string',
            customAuth: true,
            dateOfBirth: 'Test string',
            disabled: true,
            displayName: 'Test string',
            email: 'Test string',
            emailLinkSignin: true,
            emailVerified: true,
            initialEmail: 'Test string',
            language: 'Test string',
            lastLoginAt: 'Test string',
            lastRefreshAt: 'Test string',
            localId: 'Test string',
            mfaInfo: [
              {
                displayName: 'Test string',
                emailInfo: {
                  emailAddress: 'Test string',
                },
                enrolledAt: 'Test string',
                mfaEnrollmentId: 'Test string',
                phoneInfo: 'Test string',
                totpInfo: {},
                unobfuscatedPhoneInfo: 'Test string',
              },
            ],
            passwordHash: 'Test string',
            passwordUpdatedAt: 42,
            phoneNumber: 'Test string',
            photoUrl: 'Test string',
            providerUserInfo: [
              {
                displayName: 'Test string',
                email: 'Test string',
                federatedId: 'Test string',
                phoneNumber: 'Test string',
                photoUrl: 'Test string',
                providerId: 'Test string',
                rawId: 'Test string',
                screenName: 'Test string',
              },
            ],
            rawPassword: 'Test string',
            salt: 'Test string',
            screenName: 'Test string',
            tenantId: 'Test string',
            timeZone: 'Test string',
            validSince: 'Test string',
            version: 42,
          },
        ],
      },
    );
    /** Batch deletes multiple accounts. For accounts that fail to be deleted, error info is contained in the response. The method ignores accounts that do not exist or are duplicated in the request. This method requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
    await gapi.client.identitytoolkit.projects.tenants.accounts.batchDelete(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        force: true,
        localIds: ['Test string'],
        tenantId: 'Test string',
      },
    );
    /** Download account information for all accounts on the project in a paginated manner. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).. Furthermore, additional permissions are needed to get password hash, password salt, and password version from accounts; otherwise these fields are redacted. */
    await gapi.client.identitytoolkit.projects.tenants.accounts.batchGet({
      delegatedProjectNumber: 'Test string',
      maxResults: 42,
      nextPageToken: 'Test string',
      targetProjectId: 'Test string',
      tenantId: 'Test string',
    });
    /** Deletes a user's account. */
    await gapi.client.identitytoolkit.projects.tenants.accounts.delete(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        delegatedProjectNumber: 'Test string',
        idToken: 'Test string',
        localId: 'Test string',
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
    await gapi.client.identitytoolkit.projects.tenants.accounts.lookup(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        delegatedProjectNumber: 'Test string',
        email: ['Test string'],
        federatedUserId: [
          {
            providerId: 'Test string',
            rawId: 'Test string',
          },
        ],
        idToken: 'Test string',
        initialEmail: ['Test string'],
        localId: ['Test string'],
        phoneNumber: ['Test string'],
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Looks up user accounts within a project or a tenant based on conditions in the request. */
    await gapi.client.identitytoolkit.projects.tenants.accounts.query(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        expression: [
          {
            email: 'Test string',
            phoneNumber: 'Test string',
            userId: 'Test string',
          },
        ],
        limit: 'Test string',
        offset: 'Test string',
        order: 'Test string',
        returnUserInfo: true,
        sortBy: 'Test string',
        tenantId: 'Test string',
      },
    );
    /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
    await gapi.client.identitytoolkit.projects.tenants.accounts.sendOobCode(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        androidInstallApp: true,
        androidMinimumVersion: 'Test string',
        androidPackageName: 'Test string',
        canHandleCodeInApp: true,
        captchaResp: 'Test string',
        challenge: 'Test string',
        clientType: 'Test string',
        continueUrl: 'Test string',
        dynamicLinkDomain: 'Test string',
        email: 'Test string',
        idToken: 'Test string',
        iOSAppStoreId: 'Test string',
        iOSBundleId: 'Test string',
        linkDomain: 'Test string',
        newEmail: 'Test string',
        recaptchaVersion: 'Test string',
        requestType: 'Test string',
        returnOobLink: true,
        targetProjectId: 'Test string',
        tenantId: 'Test string',
        userIp: 'Test string',
      },
    );
    /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
    await gapi.client.identitytoolkit.projects.tenants.accounts.update(
      {
        targetProjectId: 'Test string',
        tenantId: 'Test string',
      },
      {
        captchaChallenge: 'Test string',
        captchaResponse: 'Test string',
        createdAt: 'Test string',
        customAttributes: 'Test string',
        delegatedProjectNumber: 'Test string',
        deleteAttribute: ['Test string'],
        deleteProvider: ['Test string'],
        disableUser: true,
        displayName: 'Test string',
        email: 'Test string',
        emailVerified: true,
        idToken: 'Test string',
        instanceId: 'Test string',
        lastLoginAt: 'Test string',
        linkProviderUserInfo: {
          displayName: 'Test string',
          email: 'Test string',
          federatedId: 'Test string',
          phoneNumber: 'Test string',
          photoUrl: 'Test string',
          providerId: 'Test string',
          rawId: 'Test string',
          screenName: 'Test string',
        },
        localId: 'Test string',
        mfa: {
          enrollments: [
            {
              displayName: 'Test string',
              emailInfo: {
                emailAddress: 'Test string',
              },
              enrolledAt: 'Test string',
              mfaEnrollmentId: 'Test string',
              phoneInfo: 'Test string',
              totpInfo: {},
              unobfuscatedPhoneInfo: 'Test string',
            },
          ],
        },
        oobCode: 'Test string',
        password: 'Test string',
        phoneNumber: 'Test string',
        photoUrl: 'Test string',
        provider: ['Test string'],
        returnSecureToken: true,
        targetProjectId: 'Test string',
        tenantId: 'Test string',
        upgradeToFederatedLogin: true,
        validSince: 'Test string',
      },
    );
    /** Gets a project's public Identity Toolkit configuration. (Legacy) This method also supports authenticated calls from a developer to retrieve non-public configuration. */
    await gapi.client.identitytoolkit.v1.getProjects({
      androidPackageName: 'Test string',
      clientId: 'Test string',
      delegatedProjectNumber: 'Test string',
      firebaseAppId: 'Test string',
      iosBundleId: 'Test string',
      projectNumber: 'Test string',
      returnDynamicLink: true,
      sha1Cert: 'Test string',
    });
    /** Retrieves public keys of the legacy Identity Toolkit token signer to enable third parties to verify the legacy ID token. For now the X509 pem cert is the only format supported. */
    await gapi.client.identitytoolkit.v1.getPublicKeys({});
    /** Gets parameters needed for generating a reCAPTCHA challenge. */
    await gapi.client.identitytoolkit.v1.getRecaptchaParams({});
    /** Retrieves the set of public keys of the session cookie JSON Web Token (JWT) signer that can be used to validate the session cookie created through createSessionCookie. */
    await gapi.client.identitytoolkit.v1.getSessionCookiePublicKeys({});
  }
});
