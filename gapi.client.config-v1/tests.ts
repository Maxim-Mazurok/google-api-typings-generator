/* This is stub file for gapi.client.config-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240612

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://config.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.config */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.config.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.config.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a Deployment. */
    await gapi.client.config.projects.locations.deployments.create(
      {
        deploymentId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        artifactsGcsBucket: 'Test string',
        createTime: 'Test string',
        deleteBuild: 'Test string',
        deleteLogs: 'Test string',
        deleteResults: {
          artifacts: 'Test string',
          content: 'Test string',
          outputs: {
            A: {
              sensitive: true,
              value: 42,
            },
          },
        },
        errorCode: 'Test string',
        errorLogs: 'Test string',
        importExistingResources: true,
        labels: {
          A: 'Test string',
        },
        latestRevision: 'Test string',
        lockState: 'Test string',
        name: 'Test string',
        quotaValidation: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        stateDetail: 'Test string',
        terraformBlueprint: {
          gcsSource: 'Test string',
          gitSource: {
            directory: 'Test string',
            ref: 'Test string',
            repo: 'Test string',
          },
          inputValues: {
            A: {
              inputValue: 42,
            },
          },
        },
        tfErrors: [
          {
            error: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            errorDescription: 'Test string',
            httpResponseCode: 42,
            resourceAddress: 'Test string',
          },
        ],
        tfVersion: 'Test string',
        tfVersionConstraint: 'Test string',
        updateTime: 'Test string',
        workerPool: 'Test string',
      }
    );
    /** Deletes a Deployment. */
    await gapi.client.config.projects.locations.deployments.delete({
      deletePolicy: 'Test string',
      force: true,
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Deletes Terraform state file in a given deployment. */
    await gapi.client.config.projects.locations.deployments.deleteState(
      {
        name: 'Test string',
      },
      {
        lockId: 'Test string',
      }
    );
    /** Exports the lock info on a locked deployment. */
    await gapi.client.config.projects.locations.deployments.exportLock({
      name: 'Test string',
    });
    /** Exports Terraform state file from a given deployment. */
    await gapi.client.config.projects.locations.deployments.exportState(
      {
        parent: 'Test string',
      },
      {
        draft: true,
      }
    );
    /** Gets details about a Deployment. */
    await gapi.client.config.projects.locations.deployments.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.config.projects.locations.deployments.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Imports Terraform state file in a given deployment. The state file does not take effect until the Deployment has been unlocked. */
    await gapi.client.config.projects.locations.deployments.importState(
      {
        parent: 'Test string',
      },
      {
        lockId: 'Test string',
      }
    );
    /** Lists Deployments in a given project and location. */
    await gapi.client.config.projects.locations.deployments.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Locks a deployment. */
    await gapi.client.config.projects.locations.deployments.lock(
      {
        name: 'Test string',
      },
      {}
    );
    /** Updates a Deployment. */
    await gapi.client.config.projects.locations.deployments.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        artifactsGcsBucket: 'Test string',
        createTime: 'Test string',
        deleteBuild: 'Test string',
        deleteLogs: 'Test string',
        deleteResults: {
          artifacts: 'Test string',
          content: 'Test string',
          outputs: {
            A: {
              sensitive: true,
              value: 42,
            },
          },
        },
        errorCode: 'Test string',
        errorLogs: 'Test string',
        importExistingResources: true,
        labels: {
          A: 'Test string',
        },
        latestRevision: 'Test string',
        lockState: 'Test string',
        name: 'Test string',
        quotaValidation: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        stateDetail: 'Test string',
        terraformBlueprint: {
          gcsSource: 'Test string',
          gitSource: {
            directory: 'Test string',
            ref: 'Test string',
            repo: 'Test string',
          },
          inputValues: {
            A: {
              inputValue: 42,
            },
          },
        },
        tfErrors: [
          {
            error: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            errorDescription: 'Test string',
            httpResponseCode: 42,
            resourceAddress: 'Test string',
          },
        ],
        tfVersion: 'Test string',
        tfVersionConstraint: 'Test string',
        updateTime: 'Test string',
        workerPool: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.config.projects.locations.deployments.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.config.projects.locations.deployments.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Unlocks a locked deployment. */
    await gapi.client.config.projects.locations.deployments.unlock(
      {
        name: 'Test string',
      },
      {
        lockId: 'Test string',
      }
    );
    /** Exports Terraform state file from a given revision. */
    await gapi.client.config.projects.locations.deployments.revisions.exportState(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Gets details about a Revision. */
    await gapi.client.config.projects.locations.deployments.revisions.get({
      name: 'Test string',
    });
    /** Lists Revisions of a deployment. */
    await gapi.client.config.projects.locations.deployments.revisions.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets details about a Resource deployed by Infra Manager. */
    await gapi.client.config.projects.locations.deployments.revisions.resources.get(
      {
        name: 'Test string',
      }
    );
    /** Lists Resources in a given revision. */
    await gapi.client.config.projects.locations.deployments.revisions.resources.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.config.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.config.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.config.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.config.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a Preview. */
    await gapi.client.config.projects.locations.previews.create(
      {
        parent: 'Test string',
        previewId: 'Test string',
        requestId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        artifactsGcsBucket: 'Test string',
        build: 'Test string',
        createTime: 'Test string',
        deployment: 'Test string',
        errorCode: 'Test string',
        errorLogs: 'Test string',
        errorStatus: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        logs: 'Test string',
        name: 'Test string',
        previewArtifacts: {
          artifacts: 'Test string',
          content: 'Test string',
        },
        previewMode: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        terraformBlueprint: {
          gcsSource: 'Test string',
          gitSource: {
            directory: 'Test string',
            ref: 'Test string',
            repo: 'Test string',
          },
          inputValues: {
            A: {
              inputValue: 42,
            },
          },
        },
        tfErrors: [
          {
            error: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            errorDescription: 'Test string',
            httpResponseCode: 42,
            resourceAddress: 'Test string',
          },
        ],
        tfVersion: 'Test string',
        tfVersionConstraint: 'Test string',
        workerPool: 'Test string',
      }
    );
    /** Deletes a Preview. */
    await gapi.client.config.projects.locations.previews.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Export Preview results. */
    await gapi.client.config.projects.locations.previews.export(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Gets details about a Preview. */
    await gapi.client.config.projects.locations.previews.get({
      name: 'Test string',
    });
    /** Lists Previews in a given project and location. */
    await gapi.client.config.projects.locations.previews.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets details about a TerraformVersion. */
    await gapi.client.config.projects.locations.terraformVersions.get({
      name: 'Test string',
    });
    /** Lists TerraformVersions in a given project and location. */
    await gapi.client.config.projects.locations.terraformVersions.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
