/* This is stub file for gapi.client.recommendationengine-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230321

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://recommendationengine.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.recommendationengine */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Lists all the catalog configurations associated with the project. */
        await gapi.client.recommendationengine.projects.locations.catalogs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the catalog configuration. */
        await gapi.client.recommendationengine.projects.locations.catalogs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            catalogItemLevelConfig: {
                eventItemLevel: "Test string",
                predictItemLevel: "Test string",
            },
            defaultEventStoreId: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Creates a catalog item. */
        await gapi.client.recommendationengine.projects.locations.catalogs.catalogItems.create({
            parent: "Test string",
        }, {
            categoryHierarchies: [
                {
                    categories: [
                        "Test string"
                    ],
                }
            ],
            description: "Test string",
            id: "Test string",
            itemAttributes: {
                categoricalFeatures: {
                    A: {
                        value: [
                            "Test string"
                        ],
                    }
                },
                numericalFeatures: {
                    A: {
                        value: [
                            42
                        ],
                    }
                },
            },
            itemGroupId: "Test string",
            languageCode: "Test string",
            productMetadata: {
                availableQuantity: "Test string",
                canonicalProductUri: "Test string",
                costs: {
                    A: 42
                },
                currencyCode: "Test string",
                exactPrice: {
                    displayPrice: 42,
                    originalPrice: 42,
                },
                images: [
                    {
                        height: 42,
                        uri: "Test string",
                        width: 42,
                    }
                ],
                priceRange: {
                    max: 42,
                    min: 42,
                },
                stockState: "Test string",
            },
            tags: [
                "Test string"
            ],
            title: "Test string",
        });
        /** Deletes a catalog item. */
        await gapi.client.recommendationengine.projects.locations.catalogs.catalogItems.delete({
            name: "Test string",
        });
        /** Gets a specific catalog item. */
        await gapi.client.recommendationengine.projects.locations.catalogs.catalogItems.get({
            name: "Test string",
        });
        /**
         * Bulk import of multiple catalog items. Request processing may be synchronous. No partial updating supported. Non-existing items will be created. Operation.response is of type
         * ImportResponse. Note that it is possible for a subset of the items to be successfully updated.
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.catalogItems.import({
            parent: "Test string",
        }, {
            errorsConfig: {
                gcsPrefix: "Test string",
            },
            inputConfig: {
                bigQuerySource: {
                    dataSchema: "Test string",
                    datasetId: "Test string",
                    gcsStagingDir: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
                catalogInlineSource: {
                    catalogItems: [
                        {
                            categoryHierarchies: [
                                {
                                    categories: [
                                        "Test string"
                                    ],
                                }
                            ],
                            description: "Test string",
                            id: "Test string",
                            itemAttributes: {
                                categoricalFeatures: {
                                    A: {
                                        value: [
                                            "Test string"
                                        ],
                                    }
                                },
                                numericalFeatures: {
                                    A: {
                                        value: [
                                            42
                                        ],
                                    }
                                },
                            },
                            itemGroupId: "Test string",
                            languageCode: "Test string",
                            productMetadata: {
                                availableQuantity: "Test string",
                                canonicalProductUri: "Test string",
                                costs: {
                                    A: 42
                                },
                                currencyCode: "Test string",
                                exactPrice: {
                                    displayPrice: 42,
                                    originalPrice: 42,
                                },
                                images: [
                                    {
                                        height: 42,
                                        uri: "Test string",
                                        width: 42,
                                    }
                                ],
                                priceRange: {
                                    max: 42,
                                    min: 42,
                                },
                                stockState: "Test string",
                            },
                            tags: [
                                "Test string"
                            ],
                            title: "Test string",
                        }
                    ],
                },
                gcsSource: {
                    inputUris: [
                        "Test string"
                    ],
                    jsonSchema: "Test string",
                },
                userEventInlineSource: {
                    userEvents: [
                        {
                            eventDetail: {
                                eventAttributes: {
                                    categoricalFeatures: {
                                        A: {
                                            value: [
                                                "Test string"
                                            ],
                                        }
                                    },
                                    numericalFeatures: {
                                        A: {
                                            value: [
                                                42
                                            ],
                                        }
                                    },
                                },
                                experimentIds: [
                                    "Test string"
                                ],
                                pageViewId: "Test string",
                                recommendationToken: "Test string",
                                referrerUri: "Test string",
                                uri: "Test string",
                            },
                            eventSource: "Test string",
                            eventTime: "Test string",
                            eventType: "Test string",
                            productEventDetail: {
                                cartId: "Test string",
                                listId: "Test string",
                                pageCategories: [
                                    {
                                        categories: [
                                            "Test string"
                                        ],
                                    }
                                ],
                                productDetails: [
                                    {
                                        availableQuantity: 42,
                                        currencyCode: "Test string",
                                        displayPrice: 42,
                                        id: "Test string",
                                        itemAttributes: {
                                            categoricalFeatures: {
                                                A: {
                                                    value: [
                                                        "Test string"
                                                    ],
                                                }
                                            },
                                            numericalFeatures: {
                                                A: {
                                                    value: [
                                                        42
                                                    ],
                                                }
                                            },
                                        },
                                        originalPrice: 42,
                                        quantity: 42,
                                        stockState: "Test string",
                                    }
                                ],
                                purchaseTransaction: {
                                    costs: {
                                        A: 42
                                    },
                                    currencyCode: "Test string",
                                    id: "Test string",
                                    revenue: 42,
                                    taxes: {
                                        A: 42
                                    },
                                },
                                searchQuery: "Test string",
                            },
                            userInfo: {
                                directUserRequest: true,
                                ipAddress: "Test string",
                                userAgent: "Test string",
                                userId: "Test string",
                                visitorId: "Test string",
                            },
                        }
                    ],
                },
            },
            requestId: "Test string",
            updateMask: "Test string",
        });
        /** Gets a list of catalog items. */
        await gapi.client.recommendationengine.projects.locations.catalogs.catalogItems.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a catalog item. Partial updating is supported. Non-existing items will be created. */
        await gapi.client.recommendationengine.projects.locations.catalogs.catalogItems.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            categoryHierarchies: [
                {
                    categories: [
                        "Test string"
                    ],
                }
            ],
            description: "Test string",
            id: "Test string",
            itemAttributes: {
                categoricalFeatures: {
                    A: {
                        value: [
                            "Test string"
                        ],
                    }
                },
                numericalFeatures: {
                    A: {
                        value: [
                            42
                        ],
                    }
                },
            },
            itemGroupId: "Test string",
            languageCode: "Test string",
            productMetadata: {
                availableQuantity: "Test string",
                canonicalProductUri: "Test string",
                costs: {
                    A: 42
                },
                currencyCode: "Test string",
                exactPrice: {
                    displayPrice: 42,
                    originalPrice: 42,
                },
                images: [
                    {
                        height: 42,
                        uri: "Test string",
                        width: 42,
                    }
                ],
                priceRange: {
                    max: 42,
                    min: 42,
                },
                stockState: "Test string",
            },
            tags: [
                "Test string"
            ],
            title: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Makes a recommendation prediction. If using API Key based authentication, the API Key must be registered using the PredictionApiKeyRegistry service. [Learn
         * more](https://cloud.google.com/recommendations-ai/docs/setting-up#register-key).
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.placements.predict({
            name: "Test string",
        }, {
            dryRun: true,
            filter: "Test string",
            labels: {
                A: "Test string"
            },
            pageSize: 42,
            pageToken: "Test string",
            params: {
                A: 42
            },
            userEvent: {
                eventDetail: {
                    eventAttributes: {
                        categoricalFeatures: {
                            A: {
                                value: [
                                    "Test string"
                                ],
                            }
                        },
                        numericalFeatures: {
                            A: {
                                value: [
                                    42
                                ],
                            }
                        },
                    },
                    experimentIds: [
                        "Test string"
                    ],
                    pageViewId: "Test string",
                    recommendationToken: "Test string",
                    referrerUri: "Test string",
                    uri: "Test string",
                },
                eventSource: "Test string",
                eventTime: "Test string",
                eventType: "Test string",
                productEventDetail: {
                    cartId: "Test string",
                    listId: "Test string",
                    pageCategories: [
                        {
                            categories: [
                                "Test string"
                            ],
                        }
                    ],
                    productDetails: [
                        {
                            availableQuantity: 42,
                            currencyCode: "Test string",
                            displayPrice: 42,
                            id: "Test string",
                            itemAttributes: {
                                categoricalFeatures: {
                                    A: {
                                        value: [
                                            "Test string"
                                        ],
                                    }
                                },
                                numericalFeatures: {
                                    A: {
                                        value: [
                                            42
                                        ],
                                    }
                                },
                            },
                            originalPrice: 42,
                            quantity: 42,
                            stockState: "Test string",
                        }
                    ],
                    purchaseTransaction: {
                        costs: {
                            A: 42
                        },
                        currencyCode: "Test string",
                        id: "Test string",
                        revenue: 42,
                        taxes: {
                            A: 42
                        },
                    },
                    searchQuery: "Test string",
                },
                userInfo: {
                    directUserRequest: true,
                    ipAddress: "Test string",
                    userAgent: "Test string",
                    userId: "Test string",
                    visitorId: "Test string",
                },
            },
        });
        /** Register an API key for use with predict method. */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.predictionApiKeyRegistrations.create({
            parent: "Test string",
        }, {
            predictionApiKeyRegistration: {
                apiKey: "Test string",
            },
        });
        /** Unregister an apiKey from using for predict method. */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.predictionApiKeyRegistrations.delete({
            name: "Test string",
        });
        /** List the registered apiKeys for use with predict method. */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.predictionApiKeyRegistrations.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Recommendations AI
         * JavaScript pixel. Users should not call this method directly.
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.userEvents.collect({
            ets: "Test string",
            parent: "Test string",
            uri: "Test string",
            userEvent: "Test string",
        });
        /**
         * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is
         * of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.userEvents.import({
            parent: "Test string",
        }, {
            errorsConfig: {
                gcsPrefix: "Test string",
            },
            inputConfig: {
                bigQuerySource: {
                    dataSchema: "Test string",
                    datasetId: "Test string",
                    gcsStagingDir: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
                catalogInlineSource: {
                    catalogItems: [
                        {
                            categoryHierarchies: [
                                {
                                    categories: [
                                        "Test string"
                                    ],
                                }
                            ],
                            description: "Test string",
                            id: "Test string",
                            itemAttributes: {
                                categoricalFeatures: {
                                    A: {
                                        value: [
                                            "Test string"
                                        ],
                                    }
                                },
                                numericalFeatures: {
                                    A: {
                                        value: [
                                            42
                                        ],
                                    }
                                },
                            },
                            itemGroupId: "Test string",
                            languageCode: "Test string",
                            productMetadata: {
                                availableQuantity: "Test string",
                                canonicalProductUri: "Test string",
                                costs: {
                                    A: 42
                                },
                                currencyCode: "Test string",
                                exactPrice: {
                                    displayPrice: 42,
                                    originalPrice: 42,
                                },
                                images: [
                                    {
                                        height: 42,
                                        uri: "Test string",
                                        width: 42,
                                    }
                                ],
                                priceRange: {
                                    max: 42,
                                    min: 42,
                                },
                                stockState: "Test string",
                            },
                            tags: [
                                "Test string"
                            ],
                            title: "Test string",
                        }
                    ],
                },
                gcsSource: {
                    inputUris: [
                        "Test string"
                    ],
                    jsonSchema: "Test string",
                },
                userEventInlineSource: {
                    userEvents: [
                        {
                            eventDetail: {
                                eventAttributes: {
                                    categoricalFeatures: {
                                        A: {
                                            value: [
                                                "Test string"
                                            ],
                                        }
                                    },
                                    numericalFeatures: {
                                        A: {
                                            value: [
                                                42
                                            ],
                                        }
                                    },
                                },
                                experimentIds: [
                                    "Test string"
                                ],
                                pageViewId: "Test string",
                                recommendationToken: "Test string",
                                referrerUri: "Test string",
                                uri: "Test string",
                            },
                            eventSource: "Test string",
                            eventTime: "Test string",
                            eventType: "Test string",
                            productEventDetail: {
                                cartId: "Test string",
                                listId: "Test string",
                                pageCategories: [
                                    {
                                        categories: [
                                            "Test string"
                                        ],
                                    }
                                ],
                                productDetails: [
                                    {
                                        availableQuantity: 42,
                                        currencyCode: "Test string",
                                        displayPrice: 42,
                                        id: "Test string",
                                        itemAttributes: {
                                            categoricalFeatures: {
                                                A: {
                                                    value: [
                                                        "Test string"
                                                    ],
                                                }
                                            },
                                            numericalFeatures: {
                                                A: {
                                                    value: [
                                                        42
                                                    ],
                                                }
                                            },
                                        },
                                        originalPrice: 42,
                                        quantity: 42,
                                        stockState: "Test string",
                                    }
                                ],
                                purchaseTransaction: {
                                    costs: {
                                        A: 42
                                    },
                                    currencyCode: "Test string",
                                    id: "Test string",
                                    revenue: 42,
                                    taxes: {
                                        A: 42
                                    },
                                },
                                searchQuery: "Test string",
                            },
                            userInfo: {
                                directUserRequest: true,
                                ipAddress: "Test string",
                                userAgent: "Test string",
                                userId: "Test string",
                                visitorId: "Test string",
                            },
                        }
                    ],
                },
            },
            requestId: "Test string",
        });
        /**
         * Gets a list of user events within a time range, with potential filtering. The method does not list unjoined user events. Unjoined user event definition: when a user event is ingested
         * from Recommendations AI User Event APIs, the catalog item included in the user event is connected with the current catalog. If a catalog item of the ingested event is not in the current
         * catalog, it could lead to degraded model quality. This is called an unjoined event.
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.userEvents.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To
         * test a filter, use the list command first.
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.userEvents.purge({
            parent: "Test string",
        }, {
            filter: "Test string",
            force: true,
        });
        /**
         * Triggers a user event rejoin operation with latest catalog data. Events will not be annotated with detailed catalog information if catalog item is missing at the time the user event is
         * ingested, and these events are stored as unjoined events with a limited usage on training and serving. This API can be used to trigger a 'join' operation on specified events with latest
         * version of catalog items. It can also be used to correct events joined with wrong catalog items.
         */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.userEvents.rejoin({
            parent: "Test string",
        }, {
            userEventRejoinScope: "Test string",
        });
        /** Writes a single user event. */
        await gapi.client.recommendationengine.projects.locations.catalogs.eventStores.userEvents.write({
            parent: "Test string",
        }, {
            eventDetail: {
                eventAttributes: {
                    categoricalFeatures: {
                        A: {
                            value: [
                                "Test string"
                            ],
                        }
                    },
                    numericalFeatures: {
                        A: {
                            value: [
                                42
                            ],
                        }
                    },
                },
                experimentIds: [
                    "Test string"
                ],
                pageViewId: "Test string",
                recommendationToken: "Test string",
                referrerUri: "Test string",
                uri: "Test string",
            },
            eventSource: "Test string",
            eventTime: "Test string",
            eventType: "Test string",
            productEventDetail: {
                cartId: "Test string",
                listId: "Test string",
                pageCategories: [
                    {
                        categories: [
                            "Test string"
                        ],
                    }
                ],
                productDetails: [
                    {
                        availableQuantity: 42,
                        currencyCode: "Test string",
                        displayPrice: 42,
                        id: "Test string",
                        itemAttributes: {
                            categoricalFeatures: {
                                A: {
                                    value: [
                                        "Test string"
                                    ],
                                }
                            },
                            numericalFeatures: {
                                A: {
                                    value: [
                                        42
                                    ],
                                }
                            },
                        },
                        originalPrice: 42,
                        quantity: 42,
                        stockState: "Test string",
                    }
                ],
                purchaseTransaction: {
                    costs: {
                        A: 42
                    },
                    currencyCode: "Test string",
                    id: "Test string",
                    revenue: 42,
                    taxes: {
                        A: 42
                    },
                },
                searchQuery: "Test string",
            },
            userInfo: {
                directUserRequest: true,
                ipAddress: "Test string",
                userAgent: "Test string",
                userId: "Test string",
                visitorId: "Test string",
            },
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.recommendationengine.projects.locations.catalogs.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.recommendationengine.projects.locations.catalogs.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
