/* Type definitions for non-npm package Cloud Search API v1 1.0 */
// Project: https://developers.google.com/cloud-search/docs/guides/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://cloudsearch.googleapis.com/$discovery/rest?version=v1
// Revision: 20220725

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Search API v1 */
    function load(name: "cloudsearch", version: "v1"): PromiseLike<void>;
    function load(name: "cloudsearch", version: "v1", callback: () => any): void;

    namespace cloudsearch {
        interface AbuseReportingConfig {
            /** Whether the current call may include video recordings in its abuse reports. */
            recordingAllowed?: boolean;
            /** Whether the current call may include user generated content (chat, polls, Q&A...) in its abuse reports. */
            writtenUgcAllowed?: boolean;
        }
        interface AckInfo {
            /** Output only. Number of meeting devices that have not acked yet. */
            unackedDeviceCount?: number;
            /** Output only. IDs of meeting devices (at most ten are provided) that have not acked yet. */
            unackedDeviceIds?: string[];
        }
        interface AclInfo {
            /** Number of groups which have at least read access to the document. */
            groupsCount?: number;
            /** The scope to which the content was shared. */
            scope?: string;
            /** Number of users which have at least read access to the document. */
            usersCount?: number;
        }
        interface ActionParameter {
            key?: string;
            value?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AllAuthenticatedUsersProto {
        }
        interface AppsDynamiteAnnotation {
            babelPlaceholderMetadata?: AppsDynamiteBabelPlaceholderMetadata;
            /** LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java) */
            cardCapabilityMetadata?: AppsDynamiteCardCapabilityMetadata;
            /** Whether the annotation should be rendered as a chip. If this is missing or unspecified, fallback to should_not_render on the metadata. */
            chipRenderType?: string;
            consentedAppUnfurlMetadata?: AppsDynamiteConsentedAppUnfurlMetadata;
            customEmojiMetadata?: AppsDynamiteCustomEmojiMetadata;
            dataLossPreventionMetadata?: AppsDynamiteDataLossPreventionMetadata;
            /** Chip annotations */
            driveMetadata?: AppsDynamiteDriveMetadata;
            formatMetadata?: AppsDynamiteFormatMetadata;
            groupRetentionSettingsUpdated?: AppsDynamiteGroupRetentionSettingsUpdatedMetaData;
            /**
             * Metadata for 1P integrations like tasks, calendar. These are supported only through integration server as 1P integrations use the integration API (which in turn uses backend API
             * with special permissions) to post messages. Clients should never set this. LINT.IfChange
             */
            gsuiteIntegrationMetadata?: AppsDynamiteGsuiteIntegrationMetadata;
            incomingWebhookChangedMetadata?: AppsDynamiteIncomingWebhookChangedMetadata;
            /** LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java) */
            integrationConfigUpdated?: AppsDynamiteIntegrationConfigUpdatedMetadata;
            /** Length of the text_body substring beginning from start_index the Annotation corresponds to. */
            length?: number;
            /**
             * A unique client-assigned ID for this annotation. This is helpful in matching the back-filled annotations to the original annotations on client side, without having to re-parse the
             * message.
             */
            localId?: string;
            /** Metadata for system messages. Clients should never set this. LINT.IfChange */
            membershipChanged?: AppsDynamiteMembershipChangedMetadata;
            readReceiptsSettingsMetadata?: AppsDynamiteReadReceiptsSettingsUpdatedMetadata;
            /**
             * Metadata that defines all of the required features that must be rendered in the message. Clients can use this to see whether they support the entire message, or show a fallback chip
             * otherwise. See go/message-quoting-client-to-server for details. LINT.ThenChange( //depot/google3/java/com/google/apps/dynamite/v1/allshared/parser/AnnotationSanitizer.java,
             * //depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java, //depot/google3/java/com/google/caribou/eli/mediation/chat/AnnotationTranslator.java
             * )
             */
            requiredMessageFeaturesMetadata?: AppsDynamiteRequiredMessageFeaturesMetadata;
            roomUpdated?: AppsDynamiteRoomUpdatedMetadata;
            /**
             * Whether or not the annotation is invalidated by the server. Example of situations for invalidation include: when the URL is malformed, or when Drive item ID is rejected by Drive
             * Service.
             */
            serverInvalidated?: boolean;
            slashCommandMetadata?: AppsDynamiteSlashCommandMetadata;
            /** Start index (0-indexed) of the Message text the Annotation corresponds to, inclusive. */
            startIndex?: number;
            /** Type of the Annotation. */
            type?: string;
            /** A unique server-assigned ID for this annotation. This is helpful in matching annotation objects when fetched from service. */
            uniqueId?: string;
            uploadMetadata?: AppsDynamiteUploadMetadata;
            urlMetadata?: AppsDynamiteUrlMetadata;
            /** Metadata that clients can set for annotations. LINT.IfChange In-text annotations */
            userMentionMetadata?: AppsDynamiteUserMentionMetadata;
            videoCallMetadata?: AppsDynamiteVideoCallMetadata;
            youtubeMetadata?: AppsDynamiteYoutubeMetadata;
        }
        interface AppsDynamiteAppId {
            /** Enum indicating the type of App this is. */
            appType?: string;
            /**
             * Enum indicating which 1P App this is when app_type is GSUITE_APP. Determined & set by the 1P API as a convenience for all users of this identifier(Eg. clients, chime, backend etc.)
             * to map to 1P properties.
             */
            gsuiteAppType?: string;
            /** Numeric identifier of the App. Set to Project number for 1/3P Apps. For Webhook, this is WebhookId. Determined & set by the 1P API from App credentials on the side channel. */
            id?: string;
        }
        interface AppsDynamiteAttachment {
            /** Revised version of Gmail AddOn attachment approved by API design review. */
            addOnData?: GoogleChatV1ContextualAddOnMarkup;
            /** The userId for the bot/app that created this data, to be used for attribution of attachments when the attachment was not created by the message sender. */
            appId?: AppsDynamiteUserId;
            /** To identify an attachment within repeated in a message */
            attachmentId?: string;
            /** Card AddOn attachment with the possibility for specifying editable widgets. */
            cardAddOnData?: AppsDynamiteSharedCard;
            /** Deprecated version of Gmail AddOn attachment. */
            deprecatedAddOnData?: ContextualAddOnMarkup;
            /** Slack attachment. */
            slackData?: AppsDynamiteV1ApiCompatV1Attachment;
            /** The height of image url as fetched by fife. This field is asynchronously filled. */
            slackDataImageUrlHeight?: number;
        }
        interface AppsDynamiteBabelMessageProps {
            /** Babel clients locally generate this ID to dedupe against the async fanout. */
            clientGeneratedId?: string;
            /** Stores additional Babel-specific properties (such as event metadata). */
            contentExtension?: ChatContentExtension;
            /** Stores the delivery source of messages (such as phone number for SMS). */
            deliveryMedium?: DeliveryMedium;
            /** Primary identifier used by Hangouts Classic for its events (messages). */
            eventId?: string;
            /** Stores message segments (text content) and attachments (media URLs). */
            messageContent?: MessageContent;
            /** Whether or not these message properties were backfilled by go/dinnertrain. */
            wasUpdatedByBackfill?: boolean;
        }
        interface AppsDynamiteBabelPlaceholderMetadata {
            deleteMetadata?: any;
            editMetadata?: any;
            hangoutVideoMetadata?: AppsDynamiteBabelPlaceholderMetadataHangoutVideoEventMetadata;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteBabelPlaceholderMetadataDeleteMetadata {
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteBabelPlaceholderMetadataEditMetadata {
        }
        interface AppsDynamiteBabelPlaceholderMetadataHangoutVideoEventMetadata {
            hangoutVideoType?: string;
        }
        interface AppsDynamiteBackendDlpScanSummary {
            /**
             * The scan ID of the corresponding {@link DlpViolationScanRecord} in the {@link EphemeralDlpScans} Spanner table. This can be used to fetch additional details about the scan, e.g. for
             * audit logging.
             */
            scanId?: string;
            /**
             * Indicates that was no attempt to scan a message or attachment because it was not applicable in the given context (e.g. atomic mutuate). If this is true, scan_outcome should not be
             * set. This flag is used to identify messages that DLP did not attempt to scan for monitoring scan coverage. Contents that DLP attempted to scan but skipped can be identified by
             * DlpScanOutcome.SCAN_SKIPPED_* reasons.
             */
            scanNotApplicableForContext?: boolean;
            /** The outcome of a DLP Scan. If this is set, scan_not_applicable_for_context should not be true. */
            scanOutcome?: string;
        }
        interface AppsDynamiteBackendLabelsCommunalLabelTag {
            /** Gaia ID of the user who added the tag, if any. Not present for any tags automatically created by server-side processing. */
            creatorUserId?: string;
            /** A string ID representing the label. Possible ID values are documented at go/chat-labels-howto:ids. Example: "^*t_p" for "Pinned". */
            labelId?: string;
        }
        interface AppsDynamiteBackendLabelsPersonalLabelTag {
            /** A string ID representing the label. Possible ID values are documented at go/chat-labels-howto:ids. Examples: "^t" for "Starred", "^nu" for "Nudged". */
            labelId?: string;
        }
        interface AppsDynamiteBotResponse {
            botId?: AppsDynamiteUserId;
            requiredAction?: string;
            responseType?: string;
            /** URL for setting up bot. */
            setupUrl?: string;
        }
        interface AppsDynamiteCardCapabilityMetadata {
            /** NEXT TAG : 2 */
            requiredCapabilities?: string[];
        }
        interface AppsDynamiteConsentedAppUnfurlMetadata {
            /** Client specified AppId, which will not be sanitized and is untrusted. */
            clientSpecifiedAppId?: AppsDynamiteUserId;
        }
        interface AppsDynamiteContentReport {
            /** The time at which the report is generated. Always populated when it is in a response. */
            reportCreateTimestamp?: string;
            /** User ID of the reporter. Always populated when it is in a response. */
            reporterUserId?: AppsDynamiteUserId;
            /** Additional user-provided justification on the report. Optional. */
            reportJustification?: AppsDynamiteContentReportJustification;
            /** Type of the report. Always populated when it is in a response. */
            reportType?: AppsDynamiteSharedContentReportType;
            /** Create timestamp of the revisions of the message when it's reported. Always populated when it is in a response. */
            revisionCreateTimestamp?: string;
        }
        interface AppsDynamiteContentReportJustification {
            /** Optional. User-generated free-text justification for the content report. */
            userJustification?: string;
        }
        interface AppsDynamiteCustomEmojiMetadata {
            customEmoji?: AppsDynamiteSharedCustomEmoji;
        }
        interface AppsDynamiteCustomerId {
            customerId?: string;
        }
        interface AppsDynamiteDataLossPreventionMetadata {
            /** The DLP scan summary that should only be set after the message is scanned in the Chat backend. */
            dlpScanSummary?: AppsDynamiteBackendDlpScanSummary;
            /** Flag set by client on message resend to bypass WARN violation. */
            warnAcknowledged?: boolean;
        }
        interface AppsDynamiteDmId {
            /** Unique server assigned Id, per Direct Message Space. */
            dmId?: string;
        }
        interface AppsDynamiteDriveMetadata {
            aclFixRequest?: AppsDynamiteDriveMetadataAclFixRequest;
            aclFixStatus?: AppsDynamiteDriveMetadataAclFixStatus;
            /** Can the current user edit this resource */
            canEdit?: boolean;
            /** Can the current user share this resource */
            canShare?: boolean;
            /** Can the current user view this resource */
            canView?: boolean;
            /**
             * DriveAction for organizing this file in Drive. If the user does not have access to the Drive file, the value will be DriveAction.DRIVE_ACTION_UNSPECIFIED. This field is only set
             * when part of a FileResult in a ListFilesResponse.
             */
            driveAction?: string;
            driveState?: string;
            /** Output only. Trusted Resource URL for drive file embedding. */
            embedUrl?: TrustedResourceUrlProto;
            /** Indicates whether the Drive link contains an encrypted doc ID. If true, Dynamite should not attempt to query the doc ID in Drive Service. See go/docid-encryption for details. */
            encryptedDocId?: boolean;
            /** This is deprecated and unneeded. TODO (b/182479059): Remove this. */
            encryptedResourceKey?: string;
            /** External mimetype of the Drive Resource (Useful for creating Drive URL) See: http://b/35219462 */
            externalMimetype?: string;
            /** Drive resource ID of the artifact. */
            id?: string;
            /**
             * Deprecated. Whether the setting to restrict downloads is enabled for this file. This was previously used to determine whether to hide the download and print buttons in the UI, but
             * is no longer used by clients, because Projector now independently queries Drive to ensure that we have the most up-to-date value.
             */
            isDownloadRestricted?: boolean;
            /**
             * If the current user is the Drive file's owner. The field is currently only set for Annotations for the ListFiles action (as opposed to fetching Topics/Messages with Drive
             * annotations).
             */
            isOwner?: boolean;
            /** Only present if this DriveMetadata is converted from an UploadMetadata. */
            legacyUploadMetadata?: AppsDynamiteDriveMetadataLegacyUploadMetadata;
            /** Mimetype of the Drive Resource */
            mimetype?: string;
            /** The display name of the organization owning the Drive item. */
            organizationDisplayName?: string;
            /**
             * Shortcut ID of this drive file in the shared drive, which is associated with a named room this file was shared in. Shortcuts will not be created for DMs or unnamed rooms. This is
             * populated after the DriveMetadata is migrated to shared drive. go/chat-shared-drive-uploads.
             */
            shortcutAuthorizedItemId?: AuthorizedItemId;
            /** If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip. */
            shouldNotRender?: boolean;
            /** Thumbnail image of the Drive Resource */
            thumbnailHeight?: number;
            /** Thumbnail image of the Drive Resource */
            thumbnailUrl?: string;
            /** Thumbnail image of the Drive Resource */
            thumbnailWidth?: number;
            /** Title of the Drive Resource */
            title?: string;
            /**
             * Url string fragment that generally indicates the specific location in the linked file. Example: #header=h.123abc456. If the fragment is not present this will not be present and
             * therefore default to an empty string. The "#" will not be included.
             */
            urlFragment?: string;
            /** This is considered SPII and should not be logged. */
            wrappedResourceKey?: WrappedResourceKey;
        }
        interface AppsDynamiteDriveMetadataAclFixRequest {
            /**
             * For Spaces messages: This field is ignored. For DMs messages: The list of email addresses that should be added to the Drive item's ACL. In general, the list should not be empty when
             * the boolean "should_fix" field is set; otherwise, the list should be empty. During transition - when clients do not specify this field but the "should_fix" is true, we follow the
             * legacy behavior: share to all users in the DM regardless of emails. This behavior is being phased out.
             */
            recipientEmails?: string[];
            role?: string;
            /** Whether to attempt to fix the ACL by adding the room or DM members to the Drive file's ACL. */
            shouldFix?: boolean;
        }
        interface AppsDynamiteDriveMetadataAclFixStatus {
            fixability?: string;
            /**
             * List of recipient email addresses for which access can be granted. This field contains the same email addresses from the GetMessagePreviewMetadata request if all recipients can be
             * successfully added to the ACL as determined by Drive ACL Fixer. For now, the field is non-empty if and only if the "fixability" value is "CAN_FIX".
             */
            fixableEmailAddress?: string[];
            /**
             * List of recipient email addresses for which an out-of-domain-sharing warning must be shown, stating that these email addresses are not in the Google Apps organization that the
             * requested item belong to. Empty if all recipients are in the same Google Apps organization.
             */
            outOfDomainWarningEmailAddress?: string[];
        }
        interface AppsDynamiteDriveMetadataLegacyUploadMetadata {
            /**
             * A unique ID generated from legacy UploadMetadata. This is used for interopping URLs after uploading blob to shared drive. Links in Classic might break without this.
             * go/drive-file-attachment-interop-from-dynamite.
             */
            legacyUniqueId?: string;
            /** The blob in this UploadMetadata has been uploaded to shared drive. This UploadMetadata is no longer attached to a message. go/shared-drive-data-migration. */
            uploadMetadata?: AppsDynamiteUploadMetadata;
        }
        interface AppsDynamiteFormatMetadata {
            /**
             * Font color is set if and only if format_type is FONT_COLOR. The components are stored as (alpha << 24) | (red << 16) | (green << 8) | blue. Clients should always set the alpha
             * component to 0xFF. NEXT TAG: 3
             */
            fontColor?: number;
            /** LINT.ThenChange(//depot/google3/apps/dynamite/v1/web/datakeys/annotated_span.proto) */
            formatType?: string;
        }
        interface AppsDynamiteFrontendBotInfo {
            /** Identifier of the application associated with the bot. */
            appId?: AppsDynamiteAppId;
            /** URL for the avatar picture of the User in dynamite. This field should be populated if the request is FetchBotCategories/ListBotCatalogEntries */
            botAvatarUrl?: string;
            /** Non-unique, user-defined display name of the Bot. This field should be populated if the request is FetchBotCategories/ListBotCatalogEntries. */
            botName?: string;
            /** Short description for the bot. */
            description?: string;
            /** Name of bot developer. */
            developerName?: string;
            /** URL for the banner image in GSuite Market Place. The banner will be 220x140. */
            marketPlaceBannerUrl?: string;
            /** Indicates whether bot is enabled/disabled. */
            status?: string;
            /**
             * The supported uses are limited according to the user that made the request. If the user does not have permission to use the bot, the list will be empty. This could occur for non
             * whitelisted bots in the catalog.
             */
            supportedUses?: string[];
            /**
             * Urls with additional information related to the bot. This field should always be set even if all the fields within it are empty, so that it is convenient for clients to work with
             * this field in javascript.
             */
            supportUrls?: AppsDynamiteFrontendBotInfoSupportUrls;
            whitelistStatus?: string;
        }
        interface AppsDynamiteFrontendBotInfoSupportUrls {
            /** Link to the admin configuration webpage for the bot. Configured by Pantheon, may be empty. */
            adminConfigUrl?: string;
            /** Link to the deletion policy webpage for the bot. Configured by Pantheon, may be empty. */
            deletionPolicyUrl?: string;
            /** Link to the privacy policy webpage for the bot. May be empty. */
            privacyPolicyUrl?: string;
            /** Link to the setup webpage for the bot. Configured by Pantheon, may be empty. */
            setupUrl?: string;
            /** Link to the support webpage for the developer of the bot. May be empty. */
            supportUrl?: string;
            /** Link to the terms of service webpage for the bot. May be empty. */
            tosUrl?: string;
        }
        interface AppsDynamiteFrontendMember {
            roster?: AppsDynamiteFrontendRoster;
            user?: AppsDynamiteFrontendUser;
        }
        interface AppsDynamiteFrontendRoster {
            avatarUrl?: string;
            id?: AppsDynamiteRosterId;
            membershipCount?: number;
            name?: string;
            /** Roster gaia key, usually an email address. Set in looking up rosters response. */
            rosterGaiaKey?: string;
            /** Roster deletion state - considered active unless set to deleted */
            rosterState?: string;
        }
        interface AppsDynamiteFrontendUser {
            /** URL for the avatar picture of the User in dynamite */
            avatarUrl?: string;
            /** Information about whether the user is blocked by requester and/or has blocked requester. */
            blockRelationship?: AppsDynamiteSharedUserBlockRelationship;
            /** Bot-specific profile information. Leave it empty for human users. */
            botInfo?: AppsDynamiteFrontendBotInfo;
            /** Deleted flag, if true, means User has been soft-deleted/purged Deprecated. Use user_account_state field instead. */
            deleted?: boolean;
            /** Email ID of the user */
            email?: string;
            /** First or given name of the user */
            firstName?: string;
            /** Gender of the user */
            gender?: string;
            /** UserId */
            id?: AppsDynamiteUserId;
            /** Set to true if none of the depending services (Gaia, PeopleApi) returns any info for this user. */
            isAnonymous?: boolean;
            /** Last or family name of the user */
            lastName?: string;
            /** Non-unique, user-defined display name of the User */
            name?: string;
            /** Information about whether the user is a consumer user, or the GSuite customer that they belong to. */
            organizationInfo?: AppsDynamiteSharedOrganizationInfo;
            /** Phone number(s) of the user */
            phoneNumber?: AppsDynamiteSharedPhoneNumber[];
            /** State of user's Gaia Account */
            userAccountState?: string;
            /** Visibility of user's Profile */
            userProfileVisibility?: string;
        }
        interface AppsDynamiteGroupId {
            /** Unique, immutable ID of the Direct Message Space */
            dmId?: AppsDynamiteDmId;
            /** Unique, immutable ID of the Space */
            spaceId?: AppsDynamiteSpaceId;
        }
        interface AppsDynamiteGroupRetentionSettingsUpdatedMetaData {
            /** The user who triggered the retention settings update */
            initiator?: AppsDynamiteUserId;
            /** The updated space retention settings */
            retentionSettings?: AppsDynamiteSharedRetentionSettings;
        }
        interface AppsDynamiteGsuiteIntegrationMetadata {
            activityFeedData?: AppsDynamiteSharedActivityFeedAnnotationData;
            assistantData?: AppsDynamiteSharedAssistantAnnotationData;
            calendarEventData?: AppsDynamiteSharedCalendarEventAnnotationData;
            /** Data used to render call artifacts. */
            callData?: AppsDynamiteSharedCallAnnotationData;
            clientType?: string;
            /**
             * A list of all strings that are to be indexed for this 1P chip. Each string in this list would be the contents of a single string field in the 1P chip. Eg. For Tasks[title = “hello
             * world”, description = “good bye”]. If we want to index only the title, this would be set to [“hello world”]. If both title and description, then this would be [“hello world”, “good
             * bye”]. Please make sure that the contents of this field is a subset of strings that are rendered as part of the 1P Chip.
             */
            indexableTexts?: string[];
            tasksData?: AppsDynamiteSharedTasksAnnotationData;
        }
        interface AppsDynamiteIncomingWebhookChangedMetadata {
            /** The webhook name at the time of the change. Used in Spanner storage, BE API responses and FE API responses. */
            incomingWebhookName?: string;
            /** The user id of the user whose action triggered this system message. Used in Spanner storage, BE API responses and FE API responses. */
            initiatorId?: AppsDynamiteUserId;
            /** Complete profile when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in. Used in FE API responses. */
            initiatorProfile?: AppsDynamiteFrontendUser;
            /**
             * The webhook id of the incoming webhook in question. This field should not be used to load webhook information dynamically and is only present for debugging purposes. Used in Spanner
             * storage, BE API responses and FE API responses.
             */
            obfuscatedIncomingWebhookId?: string;
            /** Only populated for UPDATED_NAME and UPDATED_NAME_AND_AVATAR events, where the webhook name was changed. Used in Spanner storage, BE API responses and FE API responses. */
            oldIncomingWebhookName?: string;
            /** Used in Spanner storage, BE API responses and FE API responses. */
            type?: string;
        }
        interface AppsDynamiteIntegrationConfigMutation {
            /** Add an app using its identifier. */
            addApp?: AppsDynamiteAppId;
            /** Add a pinned tab using its identifier. */
            addPinnedItem?: AppsDynamitePinnedItemId;
            /** Remove an active app using its identifier. */
            removeApp?: AppsDynamiteAppId;
            /** Remove an active pinned tab using its identifier. */
            removePinnedItem?: AppsDynamitePinnedItemId;
        }
        interface AppsDynamiteIntegrationConfigUpdatedMetadata {
            /** The user whose action triggered this system message. */
            initiatorId?: AppsDynamiteUserId;
            /** A list of updates applied on the integration config. */
            mutations?: AppsDynamiteIntegrationConfigMutation[];
        }
        interface AppsDynamiteInviteeInfo {
            /** Email as typed by the user when invited to Room or DM. This value will be canonicalized and hashed before retained in storage. */
            email?: string;
            /** Unique, immutable ID of the User. */
            userId?: AppsDynamiteUserId;
        }
        interface AppsDynamiteMemberId {
            /** Unique, immutable ID of the Roster. */
            rosterId?: AppsDynamiteRosterId;
            /** Unique, immutable ID of the User. */
            userId?: AppsDynamiteUserId;
        }
        interface AppsDynamiteMembershipChangedMetadata {
            affectedMemberProfiles?: AppsDynamiteFrontendMember[];
            /** List of users and rosters whose membership status changed. */
            affectedMembers?: AppsDynamiteMemberId[];
            affectedMemberships?: AppsDynamiteMembershipChangedMetadataAffectedMembership[];
            /** The user whose action triggered this system message. */
            initiator?: AppsDynamiteUserId;
            /** Complete member profiles, when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in. */
            initiatorProfile?: AppsDynamiteFrontendUser;
            type?: string;
        }
        interface AppsDynamiteMembershipChangedMetadataAffectedMembership {
            affectedMember?: AppsDynamiteMemberId;
            priorMembershipRole?: string;
            priorMembershipState?: string;
            targetMembershipRole?: string;
        }
        interface AppsDynamiteMessage {
            /** Annotations parsed and extracted from the text body. */
            annotations?: AppsDynamiteAnnotation[];
            /** Custom display profile info for apps. Leave the field empty for real users. */
            appProfile?: AppsDynamiteSharedAppProfile;
            /** Attachments parsed from incoming webhooks */
            attachments?: AppsDynamiteAttachment[];
            /** Lightweight message attributes which values are calculated and set in the servers. */
            attributes?: AppsDynamiteMessageAttributes;
            /** Responses from bots indicating if extra auth/config is needed. */
            botResponses?: AppsDynamiteBotResponse[];
            /**
             * Communal labels associated with a message. These exist on the message itself regardless of which user fetches them. Order of entries is arbitrary and will not list duplicates of the
             * same label_id. See go/chat-labels-design for details.
             */
            communalLabels?: AppsDynamiteBackendLabelsCommunalLabelTag[];
            contentReportSummary?: AppsDynamiteMessageContentReportSummary;
            /** Time when the Message was posted in microseconds. */
            createTime?: string;
            /** ID of the User who posted the Message. This includes information to identify if this was posted by an App on behalf of a user. */
            creatorId?: AppsDynamiteUserId;
            /** Indicates who can delete the message. This field is set on the read path (e.g. ListTopics) but doesn’t have any effect on the write path (e.g. CreateMessageRequest). */
            deletableBy?: string;
            /** Was this message deleted by Vault (Only used for Vault support) This is false if message is live or message was deleted by user. */
            deletedByVault?: boolean;
            /** Time when the Message was deleted in microseconds. This field is set to nonzero value only for Messages deleted globally. */
            deleteTime?: string;
            /** Time when the Message was per-user deleted by the message requester in microseconds. This field is set to nonzero value only for Message per-user deleted by the requester. */
            deleteTimeForRequester?: string;
            /**
             * Data Loss Prevention scan information for this message. Messages are evaluated in the backend on create message/topic and edit message actions. DEPRECATED: use dlp_scan_summary
             * instead.
             */
            dlpScanOutcome?: string;
            /** Data Loss Prevention scan information for this message. Messages are evaluated in the backend on create message/topic and edit message actions. */
            dlpScanSummary?: AppsDynamiteBackendDlpScanSummary;
            /** Indicates who can edit the message. This field is set on the read path (e.g. ListTopics) but doesn’t have any effect on the write path (e.g. CreateMessageRequest). */
            editableBy?: string;
            /** A plain-text description of the attachment, used when clients cannot display formatted attachment (e.g. mobile push notifications). */
            fallbackText?: string;
            /** ID of the resource. */
            id?: AppsDynamiteMessageId;
            /**
             * Output only. Indicates if the message is an inline reply. Set to true only if the message's ParentPath is non-NULL. Currently, only inline replies have non-NULL ParentPath. See
             * go/chat-be-inline-reply-indicator.
             */
            isInlineReply?: boolean;
            /** If the message was edited by a user, timestamp of the last edit, in microseconds. */
            lastEditTime?: string;
            /** Time when the Message text was last updated in microseconds. */
            lastUpdateTime?: string;
            /** A unique id specified on the client side. */
            localId?: string;
            /**
             * An optional payload (restricted to 1P applications) that will be stored with this message. This can only be set by the 1P API and should be used to deliver additional data such a 1P
             * sync version, 1P entity ID to the client for more advanced functionality [Eg. inform Group Tasks tab of new version while linking, fetch & render a live Task/Meet call tile].
             */
            messageIntegrationPayload?: AppsDynamiteSharedMessageIntegrationPayload;
            /** Where the message was posted from */
            messageOrigin?: string;
            /** State of the message, indicating whether the message is visible to all members in the group or is only visible to the sender only, or the private_message_viewer if it is set. */
            messageState?: string;
            /** Indicates if this message contains any suggestions that were provided by any Apps. */
            originAppSuggestions?: AppsDynamiteSharedOriginAppSuggestion[];
            /**
             * Personal labels associated with a message for the viewing user. Order of entries is arbitrary and will not list duplicates of the same label_id. See go/chat-labels-design for
             * details. NOTE: This will be unpopulated in the case of SpaceChangelog events.
             */
            personalLabels?: AppsDynamiteBackendLabelsPersonalLabelTag[];
            /**
             * A list of per-user private information. This is deprecated, because we no longer plan to support partially private messages or private messages for multiple users. The message_state
             * and private_message_viewer fields should be sufficient for this infrastructure.
             */
            privateMessageInfos?: AppsDynamitePrivateMessageInfo[];
            /**
             * Should only be set if the Message State is PRIVATE. If set, the message content is only visible to this user (and any apps associated with the message), as well as the message
             * creator. If unset, a private message is visible to the message creator only.
             */
            privateMessageViewer?: AppsDynamiteUserId;
            /** Contains additional (currently Hangouts Classic only) properties applicable to this message. */
            props?: AppsDynamiteMessageProps;
            /** Output only. Whether this message has been quoted by another message or not. Used by clients to handle message edit flows for messages that have been quoted. */
            quotedByState?: string;
            /** Output only. Metadata for a message that is quoted by this message. */
            quotedMessageMetadata?: AppsDynamiteQuotedMessageMetadata;
            /** A list of user reactions to this message. Ordered by the timestamp of the first reaction, ascending (oldest to newest). */
            reactions?: AppsDynamiteSharedReaction[];
            /** Output only. Details of content reports. Set only when the request asks for it. */
            reports?: AppsDynamiteContentReport[];
            /** The retention settings of the message. */
            retentionSettings?: AppsDynamiteSharedRetentionSettings;
            /** A client-specified string that can be used to uniquely identify a message in a space, in lieu of `id.message_id`. */
            secondaryMessageKey?: string;
            /** Plaintext body of the Message. */
            textBody?: string;
            /** Information for the stoning of a Message. */
            tombstoneMetadata?: AppsDynamiteTombstoneMetadata;
            /** ID of the User who last updated (created/edited/deleted) the Message. This includes information to identify if this was updated by an App on behalf of a user. */
            updaterId?: AppsDynamiteUserId;
            /**
             * UploadMetadata b/36864213 is an ongoing effort to move UploadMetadata out of annotations field and save it to upload_metadata field only. After the migration, UploadMetadata will
             * only be saved in this field.
             */
            uploadMetadata?: AppsDynamiteUploadMetadata[];
        }
        interface AppsDynamiteMessageAttributes {
            /** If true: message is a tombstone in the client. Default false. */
            isTombstone?: boolean;
        }
        interface AppsDynamiteMessageContentReportSummary {
            /** Total number of reports attached to this (revision of) message. */
            numberReports?: number;
            /** Totoal number of reports attached to all revisions of this message (i.e. since creation). Set only when the request asks for it. */
            numberReportsAllRevisions?: number;
        }
        interface AppsDynamiteMessageId {
            /** Opaque, server-assigned ID of the Message. While this ID is guaranteed to be unique within the Space, it's not guaranteed to be globally unique. */
            messageId?: string;
            /** ID of the Message's immediate parent. */
            parentId?: AppsDynamiteMessageParentId;
        }
        interface AppsDynamiteMessageInfo {
            /** The content of a matching message. */
            message?: AppsDynamiteMessage;
            /** Searcher's membership state in the space where the message is posted. */
            searcherMembershipState?: string;
        }
        interface AppsDynamiteMessageParentId {
            /** ID of the Topic this Message is posted to. NEXT TAG : 5 */
            topicId?: AppsDynamiteTopicId;
        }
        interface AppsDynamiteMessageProps {
            babelProps?: AppsDynamiteBabelMessageProps;
        }
        interface AppsDynamitePinnedItemId {
            /** Identifier for a Drive file (e.g. Docs, Sheets, Slides). */
            driveId?: string;
        }
        interface AppsDynamitePrivateMessageInfo {
            /** Annotations private to {@code userId}. */
            annotations?: AppsDynamiteAnnotation[];
            /** Attachments private to {@code userId}. */
            attachments?: AppsDynamiteAttachment[];
            contextualAddOnMarkup?: GoogleChatV1ContextualAddOnMarkup[];
            gsuiteIntegrationMetadata?: AppsDynamiteGsuiteIntegrationMetadata[];
            /** Text private to {@code user_id}. Initial restriction: Only one of public text or private text is rendered on the client. So if public text is set, private text is ignored. */
            text?: string;
            /** Required. The elements in this struct are visible to this user. */
            userId?: AppsDynamiteUserId;
        }
        interface AppsDynamiteQuotedMessageMetadata {
            /** Output only. Snapshot of the annotations of the quoted message. */
            annotations?: AppsDynamiteAnnotation[];
            /** Output only. Custom display profile info for apps. Will be empty for real users. */
            appProfile?: AppsDynamiteSharedAppProfile;
            /** Output only. The bot attachment state of the quoted message. Used by clients to display a bot attachment indicator in the UI. */
            botAttachmentState?: string;
            /** Output only. ID of the User who posted the quoted message. This includes information to identify if the quoted message was posted by an App on behalf of a user. */
            creatorId?: AppsDynamiteUserId;
            /**
             * The `last_update_time` of the original message when the client initiated the quote creation. This is derived from the request payload passed from clients. Used to fetch the quoted
             * message contents at a specific time on the read path. This field is populated from storage directly.
             */
            lastUpdateTimeWhenQuotedMicros?: string;
            /** MessageId of the original message that is being quoted. This is derived from the request payload passed from clients. This field is populated from storage directly. */
            messageId?: AppsDynamiteMessageId;
            /** Output only. The state of the quoted message. Used by clients to display tombstones for quotes that reference a deleted message. */
            messageState?: string;
            /** Output only. The retention (OTR) settings of the quoted message. */
            retentionSettings?: AppsDynamiteSharedRetentionSettings;
            /** Output only. Snapshot of the text body of the quoted message. */
            textBody?: string;
            /** Output only. Upload metadata of the quoted message. NEXT TAG: 11 */
            uploadMetadata?: AppsDynamiteUploadMetadata[];
        }
        interface AppsDynamiteReadReceiptsSettingsUpdatedMetadata {
            /** The new read receipts state. */
            readReceiptsEnabled?: boolean;
        }
        interface AppsDynamiteRequiredMessageFeaturesMetadata {
            requiredFeatures?: string[];
        }
        interface AppsDynamiteRoomUpdatedMetadata {
            groupDetailsMetadata?: AppsDynamiteRoomUpdatedMetadataGroupDetailsUpdatedMetadata;
            groupLinkSharingEnabled?: boolean;
            /** The user who initiated this room update. Complete member profiles, when ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be filled in. */
            initiator?: AppsDynamiteFrontendUser;
            /** The type of the user who initiated this room update. */
            initiatorType?: string;
            /** What was updated in the room. */
            name?: string;
            renameMetadata?: AppsDynamiteRoomUpdatedMetadataRoomRenameMetadata;
            /** DEPRECATED: See GroupVisibility proto definition. */
            visibility?: AppsDynamiteSharedGroupVisibility;
        }
        interface AppsDynamiteRoomUpdatedMetadataGroupDetailsUpdatedMetadata {
            newGroupDetails?: AppsDynamiteSharedGroupDetails;
            prevGroupDetails?: AppsDynamiteSharedGroupDetails;
        }
        interface AppsDynamiteRoomUpdatedMetadataRoomRenameMetadata {
            newName?: string;
            /** NEXT_TAG: 3 */
            prevName?: string;
        }
        interface AppsDynamiteRosterId {
            /** Opaque, server-assigned ID of the Roster. */
            id?: string;
        }
        interface AppsDynamiteSharedAction {
            /** Apps Script function to invoke when the containing element is clicked/activated. */
            function?: string;
            interaction?: string;
            loadIndicator?: string;
            /** List of action parameters. */
            parameters?: AppsDynamiteSharedActionActionParameter[];
        }
        interface AppsDynamiteSharedActionActionParameter {
            /** The name of the parameter for the action script. */
            key?: string;
            /** The value of the parameter. */
            value?: string;
        }
        interface AppsDynamiteSharedActivityFeedAnnotationData {
            /**
             * Unique id of the Activity Feed message. This will be in the form of "space-id/message-id" or "dm-id/message-id", where the space-/dm-id and message-id components are extracted from
             * the top-level MessageId in message.proto (http://shortn/_SulV51DNfF). This is copied into annotations so that no client changes are needed to access this value. Clients will need a
             * unique id for every Activity Feed message to implement click-to-source.
             */
            activityFeedMessageId?: string;
            chatItem?: AppsDynamiteSharedChatItem;
            /** Only populated on read path and should not be persisted in storage. */
            sharedUserInfo?: UserInfo;
            /** Use shared_user_info instead. */
            userInfo?: AppsDynamiteSharedActivityFeedAnnotationDataUserInfo;
        }
        interface AppsDynamiteSharedActivityFeedAnnotationDataUserInfo {
            /** Describes how updater_count_to_show should be used. */
            updaterCountDisplayType?: string;
            /** The number of updaters for clients to show, currently set to the total number of updaters minus the one set in updater_to_show. */
            updaterCountToShow?: number;
            /** The updater for clients to show. */
            updaterToShow?: AppsDynamiteUserId;
        }
        interface AppsDynamiteSharedAppProfile {
            /** Displayed user avatar emoji. */
            avatarEmoji?: string;
            /** Displayed user avatar url. */
            avatarUrl?: string;
            /** Displayed user name. */
            name?: string;
        }
        interface AppsDynamiteSharedAssistantAnnotationData {
            /** The suggestion to render in the card. */
            suggestion?: AppsDynamiteSharedAssistantSuggestion;
            /**
             * Set when the initial query was unfulfillable. Only an on-demand unfulfillable query will result in a response (not a proactive query). 1. On-demand: user explicitly invokes the bot
             * 2. Proactive: bot makes proactive suggestion (when available) by listening to all user messages.
             */
            unfulfillable?: any;
        }
        interface AppsDynamiteSharedAssistantDebugContext {
            /** The query that triggered the resulting suggestion. */
            query?: string;
        }
        interface AppsDynamiteSharedAssistantFeedbackContext {
            /** Specifies a list of feedback chips to show */
            feedbackChips?: AppsDynamiteSharedAssistantFeedbackContextFeedbackChip[];
            /** Whether the thumbs feedback is provided */
            thumbsFeedback?: string;
        }
        interface AppsDynamiteSharedAssistantFeedbackContextFeedbackChip {
            /** What type of chip to display */
            feedbackChipType?: string;
            /** Whether the chip has been selected */
            state?: string;
        }
        interface AppsDynamiteSharedAssistantSessionContext {
            /**
             * Unique identifier populated by the contextual request handler for each vertical (Ex: File Suggestions, Smart Scheduling, etc.) that can be used to track sessions end-to-end. May
             * span multiple users (sender-specific).
             */
            contextualSessionId?: string;
        }
        interface AppsDynamiteSharedAssistantSuggestion {
            /** Info regarding suggestion debug information. */
            debugContext?: AppsDynamiteSharedAssistantDebugContext;
            /** Data for rendering feedback. */
            feedbackContext?: AppsDynamiteSharedAssistantFeedbackContext;
            /** Suggestion type that suggests documents (docs, slides, sheets). */
            findDocumentSuggestion?: AppsDynamiteSharedFindDocumentSuggestion;
            /** String representation of the suggestions provided. */
            serializedSuggestions?: string;
            /** Session context specific to the Assistant suggestion. */
            sessionContext?: AppsDynamiteSharedAssistantSessionContext;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedAssistantUnfulfillableRequest {
        }
        interface AppsDynamiteSharedAvatarInfo {
            emoji?: AppsDynamiteSharedEmoji;
        }
        interface AppsDynamiteSharedBackendUploadMetadata {
            /** Blobstore path for the uploaded attachment */
            blobPath?: string;
            /** The original file name for the content, not the full path. */
            contentName?: string;
            /** Scotty reported content size by default. http://google3/uploader/agent/scotty_agent.proto?l=101&rcl=140889785 */
            contentSize?: string;
            /** Type is from Scotty's best_guess by default: http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785 */
            contentType?: string;
            /** The results of the Data Loss Prevention (DLP) scan of the attachment. DEPRECATED: use dlp_scan_summary instead. */
            dlpScanOutcome?: string;
            /** Summary of a Data Loss Prevention (DLP) scan of the attachment. Attachments are evaluated in the backend when they are uploaded. */
            dlpScanSummary?: AppsDynamiteBackendDlpScanSummary;
            /** GroupId to which this attachment is uploaded. */
            groupId?: AppsDynamiteGroupId;
            /** Original dimension of the content. Only set for image attachments. */
            originalDimension?: AppsDynamiteSharedDimension;
            /**
             * The message id of a quote reply referencing this attachment. When present, this attachment has been quoted in a reply message. Normally, the attachment is fetched through the
             * message id in the blob_path, but in the case of a quote reply, the blob_path would contain the quoted message id. Thus this message id field is needed to fetch the quote reply
             * message instead. This field is conditionally populated at read time for quotes and never persisted in storage. See go/message-quoting-attachments for more context.
             */
            quoteReplyMessageId?: AppsDynamiteMessageId;
            /** The SHA256 hash of the attachment bytes. */
            sha256?: string;
            /** User IP address at upload time. Ex. "123.1.2.3". Used by Ares abuse scanning. */
            uploadIp?: string;
            /** Timestamp of when user finished uploading the content. */
            uploadTimestampUsec?: string;
            /** VideoID of the video attachments. This ID shall meets the Youtube ID format of 16 hex characters. For example, '4c14b8825af6059b' is a valid ID. */
            videoId?: string;
            /** Full Blobstore ID for the video thumbnail. */
            videoThumbnailBlobId?: string;
            /** Result for a virus scan. */
            virusScanResult?: string;
        }
        interface AppsDynamiteSharedBorderStyle {
            /** The corner radius for the border. */
            cornerRadius?: number;
            /** The colors to use when the type is `BORDER_TYPE_STROKE`. */
            strokeColor?: Color;
            /** The border type. */
            type?: string;
        }
        interface AppsDynamiteSharedButton {
            /** The alternative text used for accessibility. Has no effect when an icon is set; use `icon.alt_text` instead. */
            altText?: string;
            /** If set, the button is filled with a solid background. */
            color?: Color;
            /** If true, the button is displayed in a disabled state and doesn't respond to user actions. */
            disabled?: boolean;
            /** The icon image. */
            icon?: AppsDynamiteSharedIcon;
            /** The action to perform when the button is clicked. */
            onClick?: AppsDynamiteSharedOnClick;
            /** The text of the button. */
            text?: string;
        }
        interface AppsDynamiteSharedButtonList {
            buttons?: AppsDynamiteSharedButton[];
        }
        interface AppsDynamiteSharedCalendarEventAnnotationData {
            calendarEvent?: AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent;
            /** Notification about the creation of an event. */
            eventCreation?: any;
        }
        interface AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent {
            /** The end time of the event. */
            endTime?: AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime;
            /** ID of the event. */
            eventId?: string;
            /** The start time of the event. */
            startTime?: AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime;
            /** Title of the event (at the time the message was generated). */
            title?: string;
        }
        interface AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime {
            /** All day event. */
            allDay?: Date;
            /** Non all day event. */
            timed?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedCalendarEventAnnotationDataEventCreation {
        }
        interface AppsDynamiteSharedCallAnnotationData {
            /** Timestamp when the call ended. Used to render the call ended system message. */
            callEndedTimestamp?: string;
            /**
             * Required. Call metadata required to create the call artifacts. For now, the metadata contains only the call id to identify the call. This field allows additional data (e.g. voice
             * call type) to be added if needed in the future.
             */
            callMetadata?: AppsDynamiteSharedCallMetadata;
            /** Required. Indicates the call status for the space. Used to determine the chip's state. */
            callStatus?: string;
        }
        interface AppsDynamiteSharedCallMetadata {
            /** Metadata specific for the Meet call. */
            meetMetadata?: AppsDynamiteSharedMeetMetadata;
        }
        interface AppsDynamiteSharedCard {
            /**
             * The actions of this card. They are added to a card's generated toolbar menu. For example, the following JSON constructs a card action menu with Settings and Send Feedback options:
             * ``` "card_actions": [ { "actionLabel": "Setting", "onClick": { "action": { "functionName": "goToView", "parameters": [ { "key": "viewType", "value": "SETTING" } ], "loadIndicator":
             * "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send Feedback", "onClick": { "openLink": { "url": "https://example.com/feedback" } } } ] ```
             */
            cardActions?: AppsDynamiteSharedCardCardAction[];
            /** The header of the card. A header usually contains a title and an image. */
            header?: AppsDynamiteSharedCardCardHeader;
            /** Name of the card, which is used as a identifier for the card in card navigation. */
            name?: string;
            /** Sections are separated by a line divider. */
            sections?: AppsDynamiteSharedCardSection[];
        }
        interface AppsDynamiteSharedCardCardAction {
            /** The label that displays as the action menu item. */
            actionLabel?: string;
            /** The onclick action for this action item. */
            onClick?: AppsDynamiteSharedOnClick;
        }
        interface AppsDynamiteSharedCardCardHeader {
            /** The alternative text of this image which is used for accessibility. */
            imageAltText?: string;
            /** The image's type. */
            imageType?: string;
            /** The URL of the image in the card header. */
            imageUrl?: string;
            /** The subtitle of the card header. */
            subtitle?: string;
            /**
             * The title of the card header. The title must be specified. The header has a fixed height: if both a title and subtitle are specified, each takes up one line. If only the title is
             * specified, it takes up both lines.
             */
            title?: string;
        }
        interface AppsDynamiteSharedCardClickSuggestion {
            /** Identify the button/action that created the suggestion. A simple example would be a card button within the stream, or the id which can identify a specific suggestion. */
            actionId?: string;
            /** The message_id for the message that was posted by the app/bot. */
            suggestionMessageId?: AppsDynamiteMessageId;
        }
        interface AppsDynamiteSharedCardSection {
            /** Indicates whether this section is collapsible. If a section is collapsible, the description must be given. */
            collapsible?: boolean;
            /** The header of the section. Formatted text is supported. */
            header?: string;
            /**
             * The number of uncollapsible widgets. For example, when a section contains five widgets and the `numUncollapsibleWidget` is set to `2`, the first two widgets are always shown and the
             * last three are collapsed as default. The `numUncollapsibleWidget` is taken into account only when collapsible is set to `true`.
             */
            uncollapsibleWidgetsCount?: number;
            /** A section must contain at least 1 widget. */
            widgets?: AppsDynamiteSharedWidget[];
        }
        interface AppsDynamiteSharedChatItem {
            /** Information needed to render the specific type of feed item. */
            activityInfo?: AppsDynamiteSharedChatItemActivityInfo[];
            /** Only populated on read path and should not be persisted in storage. */
            groupInfo?: AppsDynamiteSharedChatItemGroupInfo;
            /** Additional information about the original chat message that isn't captured in the top-level message proto. */
            messageInfo?: AppsDynamiteSharedMessageInfo;
        }
        interface AppsDynamiteSharedChatItemActivityInfo {
            feedItemNudge?: AppsDynamiteSharedChatItemActivityInfoFeedItemNudge;
            feedItemReactions?: any;
            feedItemThreadReply?: AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply;
            feedItemUserMention?: AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention;
        }
        interface AppsDynamiteSharedChatItemActivityInfoFeedItemNudge {
            /** Nudge type of the nudge feed item. */
            nudgeType?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedChatItemActivityInfoFeedItemReactions {
        }
        interface AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply {
            /** Reply type of the thread reply feed item. The field is not persisted in storage. It's populated when constructing Activity Feed payload. */
            replyType?: string;
        }
        interface AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention {
            /** User mention type */
            type?: string;
        }
        interface AppsDynamiteSharedChatItemGroupInfo {
            /** This is needed to determine what type of group the source message came from to support click-to-source. */
            attributeCheckerGroupType?: string;
            groupName?: string;
            /** Timestamp of when the group containing the message has been read by the user. */
            groupReadTimeUsec?: string;
            /** Indicates whether the group has inline replies enabled. If enabled, clients will render the space with inline replies. */
            inlineThreadingEnabled?: boolean;
        }
        interface AppsDynamiteSharedColumns {
            /** Each card supports up to 2 columns. */
            columnItems?: AppsDynamiteSharedColumnsColumn[];
            /** Controls how the column resizes based on screen width. */
            wrapStyle?: string;
        }
        interface AppsDynamiteSharedColumnsColumn {
            /** The horizontal alignment of the column. */
            horizontalAlignment?: string;
            /** Specifies how the column content is sized horizontally. */
            horizontalSizeStyle?: string;
            /** The vertical alignment of the column. */
            verticalAlignment?: string;
            /** LINT.ThenChange(//google/apps/card/v1/card.proto) Array of widgets included in the column. */
            widgets?: AppsDynamiteSharedColumnsColumnWidgets[];
        }
        interface AppsDynamiteSharedColumnsColumnWidgets {
            /** ButtonList widget. */
            buttonList?: AppsDynamiteSharedButtonList;
            /** DateTimePicker widget. */
            dateTimePicker?: AppsDynamiteSharedDateTimePicker;
            /** DecoratedText widget. */
            decoratedText?: AppsDynamiteSharedDecoratedText;
            /** Image widget. */
            image?: AppsDynamiteSharedImage;
            /** SelectionInput widget. */
            selectionInput?: AppsDynamiteSharedSelectionInput;
            /** TextInput widget. */
            textInput?: AppsDynamiteSharedTextInput;
            /** Text paragraph widget. */
            textParagraph?: AppsDynamiteSharedTextParagraph;
        }
        interface AppsDynamiteSharedContentReportType {
            /** Required. Google-defined system violation, covering the most common violations. */
            systemViolation?: string;
        }
        interface AppsDynamiteSharedCustomEmoji {
            /** ID for the underlying image data in Blobstore. This field should *only* be present in Spanner or within the server, but should not be exposed in public APIs. */
            blobId?: string;
            /** Content type of the file used to upload the emoji. Used for takeout. Written to Spanner when the emoji is created. */
            contentType?: string;
            /** Time when the Emoji was created, in microseconds. This field may be present in Spanner, within the server, or in public APIs. */
            createTimeMicros?: string;
            /** This field should *never* be persisted to Spanner. */
            creatorUserId?: AppsDynamiteUserId;
            /** Time when the emoji was deleted, in microseconds. This field may be present in Spanner, within the server, or in public APIs. Only present if the emoji has been deleted. */
            deleteTimeMicros?: string;
            /** Output only. A short-lived URL clients can use for directly accessing a custom emoji image. This field is intended for API consumption, and should *never* be persisted to Spanner. */
            ephemeralUrl?: string;
            /** This field should *never* be persisted to Spanner. */
            ownerCustomerId?: AppsDynamiteCustomerId;
            /**
             * Opaque token that clients use to construct the URL for accessing the custom emoji’s image data. This field is intended for API consumption, and should *never* be persisted to
             * Spanner.
             */
            readToken?: string;
            /**
             * User-provided, human-readable ID for the custom emoji. Users are expected to observe this field in the UI instead of the UUID. This shortcode should be unique within an
             * organization, but has no global uniqueness guarantees, unlike the UUID. This field should *never* be persisted to Spanner.
             */
            shortcode?: string;
            /** Snapshot of the current state of the emoji, which may differ from the source-of-truth in the CustomEmojis table. This field should *never* be persisted to Spanner. */
            state?: string;
            updateTimeMicros?: string;
            /** Unique key for a custom emoji resource. Required. This field is *always* populated. */
            uuid?: string;
        }
        interface AppsDynamiteSharedDateTimePicker {
            /** The label for the field that displays to the user. */
            label?: string;
            /** The name of the text input that's used in formInput, and uniquely identifies this input. */
            name?: string;
            /** Triggered when the user clicks Save or Clear from the date/time picker dialog. This is only triggered if the value changed as a result of the Save/Clear operation. */
            onChangeAction?: AppsDynamiteSharedAction;
            /**
             * The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If not set, it uses the user's time zone
             * setting on the client side.
             */
            timezoneOffsetDate?: number;
            /** The type of the date/time picker. */
            type?: string;
            /**
             * The value to display as the default value before user input or previous user input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME` type, the full epoch value is
             * used. For `DATE_ONLY` type, only date of the epoch time is used. For `TIME_ONLY` type, only time of the epoch time is used. For example, you can set epoch time to `3 * 60 * 60 *
             * 1000` to represent 3am.
             */
            valueMsEpoch?: string;
        }
        interface AppsDynamiteSharedDecoratedText {
            /** The formatted text label that shows below the main text. */
            bottomLabel?: string;
            /** A button that can be clicked to trigger an action. */
            button?: AppsDynamiteSharedButton;
            /** An icon displayed after the text. */
            endIcon?: AppsDynamiteSharedIcon;
            /** Deprecated in favor of start_icon. */
            icon?: AppsDynamiteSharedIcon;
            /** Only the top and bottom label and content region are clickable. */
            onClick?: AppsDynamiteSharedOnClick;
            /** The icon displayed in front of the text. */
            startIcon?: AppsDynamiteSharedIcon;
            /** A switch widget can be clicked to change its state or trigger an action. */
            switchControl?: AppsDynamiteSharedDecoratedTextSwitchControl;
            /** Required. The main widget formatted text. See Text formatting for details. */
            text?: string;
            /** The formatted text label that shows above the main text. */
            topLabel?: string;
            /** The wrap text setting. If `true`, the text is wrapped and displayed in multiline. Otherwise, the text is truncated. */
            wrapText?: boolean;
        }
        interface AppsDynamiteSharedDecoratedTextSwitchControl {
            /** The control type, either switch or checkbox. */
            controlType?: string;
            /** The name of the switch widget that's used in formInput. */
            name?: string;
            /** The action when the switch state is changed. */
            onChangeAction?: AppsDynamiteSharedAction;
            /** If the switch is selected. */
            selected?: boolean;
            /** The value is what is passed back in the callback. */
            value?: string;
        }
        interface AppsDynamiteSharedDimension {
            height?: number;
            width?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedDivider {
        }
        interface AppsDynamiteSharedDlpMetricsMetadata {
            /** [required] Describes the DLP status of message send and attachment upload events. */
            dlpStatus?: string;
        }
        interface AppsDynamiteSharedDocument {
            /** Unique file ID. */
            fileId?: string;
            /** Justification to explain why this document is being suggested. */
            justification?: AppsDynamiteSharedJustification;
            /** Time the document was last modified. */
            lastModifiedTime?: string;
            /** Used to determine which icon to render (e.g. docs, slides, sheets) */
            mimeType?: string;
            /** Title of the document. */
            title?: string;
            /** URL of the document. */
            url?: string;
        }
        interface AppsDynamiteSharedEmoji {
            /** A custom emoji. */
            customEmoji?: AppsDynamiteSharedCustomEmoji;
            /** A basic emoji represented by a unicode string. */
            unicode?: string;
        }
        interface AppsDynamiteSharedFindDocumentSuggestion {
            /** List of documents to render as suggestions. */
            documentSuggestions?: AppsDynamiteSharedDocument[];
            /** Whether to show the action buttons in the card for the suggestions. */
            showActionButtons?: boolean;
        }
        interface AppsDynamiteSharedGrid {
            /** The border style to apply to each grid item. */
            borderStyle?: AppsDynamiteSharedBorderStyle;
            /**
             * The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog
             * versus companion).
             */
            columnCount?: number;
            /** The items to display in the grid. */
            items?: AppsDynamiteSharedGridGridItem[];
            /** This callback is reused by each individual grid item, but with the item's identifier and index in the items list added to the callback's parameters. */
            onClick?: AppsDynamiteSharedOnClick;
            /** The text that displays in the grid header. */
            title?: string;
        }
        interface AppsDynamiteSharedGridGridItem {
            /** A user-specified identifier for this grid item. This identifier is returned in the parent Grid's onClick callback parameters. */
            id?: string;
            /** The image that displays in the grid item. */
            image?: AppsDynamiteSharedImageComponent;
            /** The layout to use for the grid item. */
            layout?: string;
            /** The grid item's subtitle. */
            subtitle?: string;
            /** The horizontal alignment of the grid item's text. */
            textAlignment?: string;
            /** The grid item's title. */
            title?: string;
        }
        interface AppsDynamiteSharedGroupDetails {
            /** A simple text that describes the purpose of a single Group, the general theme of the topics to be posted and/or the denominator of the Group participants. */
            description?: string;
            /** A simple text describing the rules and expectations from members when participating in conversation. */
            guidelines?: string;
        }
        interface AppsDynamiteSharedGroupVisibility {
            state?: string;
        }
        interface AppsDynamiteSharedIcon {
            /** The description of the icon, used for accessibility. The default value is provided if you don't specify one. */
            altText?: string;
            /** The icon specified by a URL. */
            iconUrl?: string;
            /** The crop style applied to the image. In some cases, applying a `CIRCLE` crop causes the image to be drawn larger than a standard icon. */
            imageType?: string;
            /** The icon specified by the string name of a list of known icons */
            knownIcon?: string;
        }
        interface AppsDynamiteSharedImage {
            /** The alternative text of this image, used for accessibility. */
            altText?: string;
            /** An image URL. */
            imageUrl?: string;
            onClick?: AppsDynamiteSharedOnClick;
        }
        interface AppsDynamiteSharedImageComponent {
            /** The accessibility label for the image. */
            altText?: string;
            /** The border style to apply to the image. */
            borderStyle?: AppsDynamiteSharedBorderStyle;
            /** The crop style to apply to the image. */
            cropStyle?: AppsDynamiteSharedImageCropStyle;
            /** The image URL. */
            imageUri?: string;
        }
        interface AppsDynamiteSharedImageCropStyle {
            /** The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. */
            aspectRatio?: number;
            /** The crop type. */
            type?: string;
        }
        interface AppsDynamiteSharedJustification {
            /** Time the action took place. */
            actionTime?: string;
            /** Type of action performed on the document. */
            actionType?: string;
            /** Owner of the document. */
            documentOwner?: AppsDynamiteSharedJustificationPerson;
            /**
             * Words or phrases from the user's query that describes the document content. (Ex: Users query is "Can you share the document about Bullseye?" the extracted topic would be
             * "Bullseye").
             */
            topics?: string[];
        }
        interface AppsDynamiteSharedJustificationPerson {
            /** Whether the person is the recipient of the suggestions. */
            isRecipient?: boolean;
            /** Obfuscated user ID. */
            user?: AppsDynamiteUserId;
        }
        interface AppsDynamiteSharedMeetMetadata {
            /** Required. A globally unique code (e.g. "cxv-zbgj-wzw") that points to a meeting space. Note: Meeting codes may be regenerated, which will cause old meeting codes to become invalid. */
            meetingCode?: string;
            /** Required. A URL, in the format "https://meet.google.com/*" (e.g. https://meet.google.com/cxv-zbgj-wzw), to identify and access the meeting space. */
            meetingUrl?: string;
        }
        interface AppsDynamiteSharedMessageInfo {
            /** Id of the source chat message. This is kept here because the top-level message ID to refers the AF message ID. */
            messageId?: AppsDynamiteMessageId;
            /**
             * Timestamp of when the topic containing the message has been read by the user. This is populated if the message references an inline reply, in which case the space may be marked as
             * read but the topic still has unread messages.
             */
            topicReadTimeUsec?: string;
        }
        interface AppsDynamiteSharedMessageIntegrationPayload {
            /** Pantheon project number used to identify the calling app. */
            projectNumber?: string;
            tasksMessageIntegrationPayload?: any;
            /** An enum indicating which 1P application's payload this is. This field is required to add 1P payload. */
            type?: string;
        }
        interface AppsDynamiteSharedOnClick {
            /** If specified, an action is triggered by this onClick. */
            action?: AppsDynamiteSharedAction;
            /**
             * An add-on triggers this action when the action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some
             * preparation work is required for web client to do before the open link action response comes back.
             */
            openDynamicLinkAction?: AppsDynamiteSharedAction;
            /** If specified, this onClick triggers an open link action. */
            openLink?: AppsDynamiteSharedOpenLink;
        }
        interface AppsDynamiteSharedOpenLink {
            /**
             * Represents the platform specific uri/intent to open on each client. For example: A companion_url will open in a companion window on the web. An iOS URL and android intent will open
             * in the corresponding hosting apps. If these platform specific URLs can't be handled correctly, i.e. if the companion isn't supported on web and the hosting apps aren't available on
             * the mobile platforms then the `uri` will open in a new browser window on all the platforms.
             */
            appUri?: AppsDynamiteSharedOpenLinkAppUri;
            onClose?: string;
            openAs?: string;
            /** The URL to open. */
            url?: string;
        }
        interface AppsDynamiteSharedOpenLinkAppUri {
            /** An intent object to be opened in the corresponding android hosting app. */
            androidIntent?: AppsDynamiteSharedOpenLinkAppUriIntent;
            /** A companion uri string to be opened in the chat companion window. on the web. */
            companionUri?: string;
            /** A uri string to be opened in the corresponding iOS hosting app. */
            iosUri?: string;
        }
        interface AppsDynamiteSharedOpenLinkAppUriIntent {
            /** A list of extra data for the android intent. For example, for a calendar event edit intent, the event title information can be passed as extra data. */
            extraData?: AppsDynamiteSharedOpenLinkAppUriIntentExtraData[];
            /**
             * An android intent action string for the {@link android.content.Intent} object. For example: for the view intent action type, a valid value will be
             * android.content.Intent.ACTION_VIEW.
             */
            intentAction?: string;
        }
        interface AppsDynamiteSharedOpenLinkAppUriIntentExtraData {
            /** A key for the intent extra data. */
            key?: string;
            /** Value for the given extra data key. */
            value?: string;
        }
        interface AppsDynamiteSharedOrganizationInfo {
            consumerInfo?: any;
            customerInfo?: AppsDynamiteSharedOrganizationInfoCustomerInfo;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedOrganizationInfoConsumerInfo {
        }
        interface AppsDynamiteSharedOrganizationInfoCustomerInfo {
            customerId?: AppsDynamiteCustomerId;
        }
        interface AppsDynamiteSharedOriginAppSuggestion {
            appId?: AppsDynamiteAppId;
            cardClickSuggestion?: AppsDynamiteSharedCardClickSuggestion;
        }
        interface AppsDynamiteSharedPhoneNumber {
            /** The phone number type, e.g., work, mobile, etc. */
            type?: string;
            /** The actual phone number. */
            value?: string;
        }
        interface AppsDynamiteSharedReaction {
            /** The total number of users who have reacted. */
            count?: number;
            /** When the first emoji of this type was added. */
            createTimestamp?: string;
            /** Whether the current user reacted using this emoji. Note: Unlike most properties of messages, this is different per-user. */
            currentUserParticipated?: boolean;
            emoji?: AppsDynamiteSharedEmoji;
        }
        interface AppsDynamiteSharedRetentionSettings {
            /** The timestamp after which the message/topic should be removed, in microseconds since the epoch, when state == EPHEMERAL_ONE_DAY. The value should not be set in other cases. */
            expiryTimestamp?: string;
            /** The retention state. */
            state?: string;
        }
        interface AppsDynamiteSharedSelectionInput {
            items?: AppsDynamiteSharedSelectionInputSelectionItem[];
            /** The label displayed ahead of the switch control. */
            label?: string;
            /** The name of the text input which is used in formInput. */
            name?: string;
            /** If specified, the form is submitted when the selection changes. If not specified, you must specify a separate button. */
            onChangeAction?: AppsDynamiteSharedAction;
            type?: string;
        }
        interface AppsDynamiteSharedSelectionInputSelectionItem {
            /** If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the first selected item is treated as selected and the ones after are ignored. */
            selected?: boolean;
            /** The text to be displayed. */
            text?: string;
            /** The value associated with this item. The client should use this as a form input value. */
            value?: string;
        }
        interface AppsDynamiteSharedSpaceInfo {
            avatarInfo?: AppsDynamiteSharedAvatarInfo;
            avatarUrl?: string;
            description?: string;
            groupId?: AppsDynamiteGroupId;
            /**
             * The email address of the user that invited the calling user to the room, if available. This field will only be populated for direct invites, it will be empty if the user was
             * indirectly invited to the group.
             */
            inviterEmail?: string;
            /** Whether this is a space that enables guest access */
            isExternal?: boolean;
            name?: string;
            numMembers?: number;
            /** searching user's membership state in this space */
            userMembershipState?: string;
        }
        interface AppsDynamiteSharedSuggestions {
            /** A list of suggestions items which will be used in are used in autocomplete. */
            items?: AppsDynamiteSharedSuggestionsSuggestionItem[];
        }
        interface AppsDynamiteSharedSuggestionsSuggestionItem {
            text?: string;
        }
        interface AppsDynamiteSharedTasksAnnotationData {
            assigneeChange?: AppsDynamiteSharedTasksAnnotationDataAssigneeChange;
            completionChange?: any;
            creation?: any;
            deletionChange?: any;
            /** ID of task. Will be used to create deep links to Tasks. */
            taskId?: string;
            /** Task properties after the update has been applied. */
            taskProperties?: AppsDynamiteSharedTasksAnnotationDataTaskProperties;
            userDefinedMessage?: any;
        }
        interface AppsDynamiteSharedTasksAnnotationDataAssigneeChange {
            /** Obfuscated user ID of previous assignee. Not set if the task was originally not assigned. */
            oldAssignee?: AppsDynamiteUserId;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedTasksAnnotationDataCompletionChange {
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedTasksAnnotationDataCreation {
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedTasksAnnotationDataDeletionChange {
        }
        interface AppsDynamiteSharedTasksAnnotationDataTaskProperties {
            /** Obfuscated user ID of new assignee. Not set if the task doesn't have an assignee. */
            assignee?: AppsDynamiteUserId;
            /** Whether the task is marked as completed. */
            completed?: boolean;
            /** Whether the task is marked as deleted. */
            deleted?: boolean;
            /** The description of the task. If Task original description's length is greater than 1024, then Task BE sends the truncated description to Dynamite Integration Server. */
            description?: string;
            /** Set if the task has a date but no time. Source of truth in Tasks BE: http://shortn/_wyT7eB4Ixv */
            startDate?: Date;
            /** Set if the task has both a date and a time. Source of truth in Tasks BE: http://shortn/_u6cr0F5ttE */
            startTime?: string;
            /** The title of the task. */
            title?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage {
        }
        // tslint:disable-next-line:no-empty-interface
        interface AppsDynamiteSharedTasksMessageIntegrationPayload {
        }
        interface AppsDynamiteSharedTextInput {
            /**
             * The refresh function that returns suggestions based on the user's input text. If the callback is not specified, autocomplete is done in client side based on the initial suggestion
             * items.
             */
            autoCompleteAction?: AppsDynamiteSharedAction;
            /** The hint text. */
            hintText?: string;
            /** The initial suggestions made before any user input. */
            initialSuggestions?: AppsDynamiteSharedSuggestions;
            /** At least one of label and hintText must be specified. */
            label?: string;
            /** The name of the text input which is used in formInput. */
            name?: string;
            /** The onChange action, for example, invoke a function. */
            onChangeAction?: AppsDynamiteSharedAction;
            /** The style of the text, for example, a single line or multiple lines. */
            type?: string;
            /** The default value when there is no input from the user. */
            value?: string;
        }
        interface AppsDynamiteSharedTextParagraph {
            /** The text that's shown in the widget. */
            text?: string;
        }
        interface AppsDynamiteSharedUserBlockRelationship {
            hasBlockedRequester?: boolean;
            isBlockedByRequester?: boolean;
        }
        interface AppsDynamiteSharedVideoReference {
            /** Available transcode format. Value is defined in video/storage/proto/content_header.proto */
            format?: number[];
            /** Transcode status */
            status?: string;
        }
        interface AppsDynamiteSharedWidget {
            /**
             * A list of buttons. For example, the following JSON creates two buttons. The first is a filled text button and the second is an image button that opens a link: ``` "buttonList": {
             * "buttons": [ "button": { "text": "Edit", "Color": { "Red": 255 "Green": 255 "Blue": 255 } "disabled": true }, "button": { "icon": { "knownIcon": "INVITE" "altText": "check calendar"
             * }, "onClick": { "openLink": { "url": "https://example.com/calendar" } } }, ] } ```
             */
            buttonList?: AppsDynamiteSharedButtonList;
            /**
             * Displays a single row of columns with widgets stacked vertically in each column. For example, the following JSON creates a 2 column widget each containing a single item. ```
             * "columns": { "wrapStyle": "WRAP", "columnItems": [ { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE", "horizontalAlignment": "CENTER", "verticalAlignment" : "CENTER", "widgets": [ {
             * "textParagraph": { "text": "First column text paragraph", } } ] }, { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE", "horizontalAlignment": "CENTER", "verticalAlignment" : "CENTER",
             * "widgets": [ { "textParagraph": { "text": "Second column text paragraph", } } ] }, ] } } ```
             */
            columns?: AppsDynamiteSharedColumns;
            /**
             * Displays a selection/input widget for date/time. For example, the following JSON creates a date/time picker for an appointment time: ``` "date_time_picker": { "name":
             * "appointment_time", "label": "Book your appointment at:", "type": "DateTimePickerType.DATE_AND_TIME", "valueMsEpoch": "796435200000" } ```
             */
            dateTimePicker?: AppsDynamiteSharedDateTimePicker;
            /**
             * Displays a decorated text item in this widget. For example, the following JSON creates a decorated text widget showing email address: ``` "decoratedText": { "icon": { "knownIcon":
             * "EMAIL" }, "topLabel": "Email Address", "content": "heba.salam@example.com", "bottomLabel": "This is a new Email address!", "switchWidget": { "name":
             * "has_send_welcome_email_to_heba_salam", "selected": false, "controlType": "ControlType.CHECKBOX" } } ```
             */
            decoratedText?: AppsDynamiteSharedDecoratedText;
            /** Displays a divider. For example, the following JSON creates a divider: ``` "divider": { } ``` */
            divider?: any;
            /**
             * Displays a grid with a collection of items. For example, the following JSON creates a 2 column grid with a single item: ``` "grid": { "title": "A fine collection of items",
             * "numColumns": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4.0 }, "items": [ "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
             * "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment": "CENTER" ], "onClick": { "openLink": { "url":"https://www.example.com" } } } ```
             */
            grid?: AppsDynamiteSharedGrid;
            /** The horizontal alignment of this widget. */
            horizontalAlignment?: string;
            /**
             * Displays an image in this widget. For example, the following JSON creates an image with alternative text: ``` "image": { "imageUrl": "https://example.com/heba_salam.png" "altText":
             * "Avatar for Heba Salam" } ```
             */
            image?: AppsDynamiteSharedImage;
            /**
             * Displays a switch control in this widget. For example, the following JSON creates a dropdown selection for size: ``` "switchControl": { "name": "size", "label": "Size" "type":
             * "SelectionType.DROPDOWN", "items": [ { "text": "S", "value": "small", "selected": false }, { "text": "M", "value": "medium", "selected": true }, { "text": "L", "value": "large",
             * "selected": false }, { "text": "XL", "value": "extra_large", "selected": false } ] } ```
             */
            selectionInput?: AppsDynamiteSharedSelectionInput;
            /**
             * Displays a text input in this widget. For example, the following JSON creates a text input for mail address: ``` "textInput": { "name": "mailing_address", "label": "Mailing Address"
             * } ``` As another example, the following JSON creates a text input for programming language with static suggestions: ``` "textInput": { "name": "preferred_programing_language",
             * "label": "Preferred Language", "initialSuggestions": { "items": [ { "text": "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" } ] } } ```
             */
            textInput?: AppsDynamiteSharedTextInput;
            /** Displays a text paragraph in this widget. For example, the following JSON creates a bolded text: ``` "textParagraph": { "text": " *bold text*" } ``` */
            textParagraph?: AppsDynamiteSharedTextParagraph;
        }
        interface AppsDynamiteSlashCommandMetadata {
            /** Hint string for the arguments expected by the slash command. */
            argumentsHint?: string;
            /** Unique id for the slash command. */
            commandId?: string;
            /** Name of the slash command. */
            commandName?: string;
            /** ID of the bot which owns the slash command. */
            id?: AppsDynamiteUserId;
            /** Whether or not this slash command should trigger a dialog. */
            triggersDialog?: boolean;
            type?: string;
        }
        interface AppsDynamiteSpaceId {
            /** Unique, immutable ID of the Space */
            spaceId?: string;
        }
        interface AppsDynamiteTombstoneMetadata {
            /** Indicates the type of Tombstone. */
            tombstoneType?: string;
        }
        interface AppsDynamiteTopicId {
            /** The Space or DM that the topic belongs to. */
            groupId?: AppsDynamiteGroupId;
            /**
             * Opaque, server-assigned ID of the Topic. While this ID is guaranteed to be unique within the Space, it's not guaranteed to be globally unique. Internal usage: this field can be
             * empty in the following cases: 1. To create the first message in a topic. 2. To list last N messages of a Space (regardless of topic).
             */
            topicId?: string;
        }
        interface AppsDynamiteUploadMetadata {
            /** Opaque token. Clients shall simply pass it back to the Backend. This field will NOT be saved into storage. */
            attachmentToken?: string;
            /** Information about the uploaded attachment that is only used in Backend. This field will NOT be sent out of Google. */
            backendUploadMetadata?: AppsDynamiteSharedBackendUploadMetadata;
            /**
             * The "new" secure identifier for Drive files. Should be used instead of the deprecated string drive_id field above. This should only be set if the upload file has been added to
             * Drive. Note that older Drive files that do not have a ResourceKey should still use this field, with the resource_key field unset.
             */
            clonedAuthorizedItemId?: AuthorizedItemId;
            /**
             * DriveAction for organizing the cloned version of this upload in Drive, if the file has been added to Drive. This field is not set if the file has not been added to Drive.
             * Additionally, this field is only set when part of a FileResult in a ListFilesResponse.
             */
            clonedDriveAction?: string;
            /** Reference to a Drive ID, if this upload file has been previously cloned to Drive. Note: this is deprecated in favor of the AuthorizedItemId below. */
            clonedDriveId?: string;
            /** The original file name for the content, not the full path. */
            contentName?: string;
            /** Type is from Scotty's best_guess by default: http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785 */
            contentType?: string;
            /** The metrics metadata of the Data Loss Prevention attachment scan. */
            dlpMetricsMetadata?: AppsDynamiteSharedDlpMetricsMetadata;
            /** A copy of the LocalId in Annotation. This field is supposed to be filled by server only. */
            localId?: string;
            /** Original dimension of the content. Only set for image attachments. */
            originalDimension?: AppsDynamiteSharedDimension;
            /** Reference to a transcoded video attachment. Only set for video attachments. */
            videoReference?: AppsDynamiteSharedVideoReference;
            /** Result for a virus scan. It's duplicated in the above field apps.dynamite.shared.BackendUploadMetadata */
            virusScanResult?: string;
        }
        interface AppsDynamiteUrlMetadata {
            /** Domain for this url. If it's an IP address the address is returned. */
            domain?: string;
            /** The signed GWS URL. */
            gwsUrl?: SafeUrlProto;
            /** The expiration timestamp for GWS URL, only set when gws_url is set. */
            gwsUrlExpirationTimestamp?: string;
            /** Dimensions of the image: height. This field is string to match with page render service response. Deprecated. Use int_image_height instead. */
            imageHeight?: string;
            /** Representative image of the website. */
            imageUrl?: string;
            /** Dimensions of the image: width. This field is string to match with page render service response. Deprecated. Use int_image_height instead. */
            imageWidth?: string;
            /** Dimensions of the image: height. */
            intImageHeight?: number;
            /** Dimensions of the image: width. */
            intImageWidth?: number;
            /**
             * Mime type of the content (Currently mapped from Page Render Service ItemType) Note that this is not necessarily the mime type of the http resource. For example a text/html from
             * youtube or vimeo may actually be classified as a video type. Then we shall mark it as video/* since we don't know exactly what type of video it is. NEXT TAG : 16
             */
            mimeType?: string;
            /** The stable redirect URL pointing to frontend server. */
            redirectUrl?: SafeUrlProto;
            /** If the UrlMetadata is missing data for rendering a chip. Deprecated. Use Annotation.ChipRenderType instead. */
            shouldNotRender?: boolean;
            /** Snippet/small description of the weblink. */
            snippet?: string;
            /** Title of the Weblink. */
            title?: string;
            /** The original URL. */
            url?: SafeUrlProto;
        }
        interface AppsDynamiteUserId {
            /**
             * Optional. Opaque, server-assigned ID of the user profile associated with App/user acting on behalf of the human user. This is currently only set when a 3P application is acting on
             * the user's behalf.
             */
            actingUserId?: string;
            /** Opaque, server-assigned ID of the User. */
            id?: string;
            /**
             * Optional. Identifier of the App involved (directly or on behalf of a human creator) in creating this message. This is not set if the user posted a message directly, but is used in
             * the case of, for example, a message being generated by a 1P integration based on a user action (creating an event, creating a task etc). This should only be used on the BE. For
             * clients, please use the field in the FE message proto instead (google3/apps/dynamite/v1/frontend/api/message.proto?q=origin_app_id).
             */
            originAppId?: AppsDynamiteAppId;
            /**
             * Clients do not need to send UserType to Backend, but Backend will always send this field to clients per the following rule: 1. For HUMAN Ids, the field is empty but by default
             * .getType() will return HUMAN. 2. For BOT Ids, the field is ALWAYS set to BOT.
             */
            type?: string;
        }
        interface AppsDynamiteUserMentionMetadata {
            /**
             * Display name of the mentioned user. This field should remain empty when clients resolve a UserMention annotation. It will be filled in when a UserMention is generated by the
             * Integration Server.
             */
            displayName?: string;
            /**
             * Gender of the mentioned user. One of "female", "male" or "other". Used for choosing accurate translations for strings that contain the UserMention, when these need to be constructed
             * (e.g. task assignment update message). This field should remain empty when clients resolve a UserMention. It will be filled in when a UserMention is generated by the Integration
             * Server.
             */
            gender?: string;
            /** To be deprecated. Use invitee_info field instead. ID of the User mentioned. This field should remain empty when type == MENTION_ALL. */
            id?: AppsDynamiteUserId;
            /**
             * Invitee UserId and email used when mentioned. This field should remain empty when type == MENTION_ALL. Invitee_info.email is only used when a user is @-mentioned with an email
             * address, and it will be empty when clients get messages from Backend.
             */
            inviteeInfo?: AppsDynamiteInviteeInfo;
            type?: string;
        }
        interface AppsDynamiteV1ApiCompatV1Action {
            /** Confirmation dialog config. */
            confirm?: AppsDynamiteV1ApiCompatV1ActionConfirm;
            /** Unique identifier for this action. */
            name?: string;
            /** Button style ("default", "primary", or "danger"). */
            style?: string;
            /** User-facing label for the action. */
            text?: string;
            /** Action type - currently only "button". */
            type?: string;
            /** Payload for this action. Will be sent to the action handler along with name. */
            value?: string;
        }
        interface AppsDynamiteV1ApiCompatV1ActionConfirm {
            /** "Cancel" button label. */
            dismiss_text?: string;
            /** "OK" button label. */
            ok_text?: string;
            /** Confirmation dialog body text. */
            text?: string;
            /** Confirmation dialog title. */
            title?: string;
        }
        interface AppsDynamiteV1ApiCompatV1Attachment {
            /** Array of actions (currently only buttons). */
            actions?: AppsDynamiteV1ApiCompatV1Action[];
            /** Undocumented - used in interactive button examples. The only valid value appears to be "default". */
            attachment_type?: string;
            /** Avatar URL for the user. */
            author_icon?: string;
            /** URL that the user name should link to. */
            author_link?: string;
            /** User name to display as the author of the message. */
            author_name?: string;
            /** Unique identifier for the collection of buttons within this attachment. Will be sent back to the action handler URL when a button is clicked. */
            callback_id?: string;
            /** A color "bar" to display to the left of the attachment. */
            color?: string;
            /** Fallback plain-text string for clients that don't support attachments. */
            fallback?: string;
            /** Columns of text inside the attachment body. */
            fields?: AppsDynamiteV1ApiCompatV1Field[];
            /** A string displayed at the bottom of the attachment. */
            footer?: string;
            /** Avatar URL displayed to the left of the footer. */
            footer_icon?: string;
            /** URL of an image to display in an image chip. */
            image_url?: string;
            /** List of fields to apply formatting to. */
            mrkdwn_in?: string[];
            /** A string to show above the attachment. */
            pretext?: string;
            /** Main text. */
            text?: string;
            /** URL of a thumbnail image to display to the right of the attachment body. */
            thumb_url?: string;
            /** Title string of this attachment. */
            title?: string;
            /** URL that the title string should link to. */
            title_link?: string;
            /** UNIX timestamp of the attachment. */
            ts?: number;
        }
        interface AppsDynamiteV1ApiCompatV1Field {
            /** Whether the field can be shown side-by-side with another field. */
            short?: boolean;
            /** The heading text, shown in bold. */
            title?: string;
            /** The text value of the field. */
            value?: string;
        }
        interface AppsDynamiteVideoCallMetadata {
            /** Thor meeting space. */
            meetingSpace?: MeetingSpace;
            /** If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip. */
            shouldNotRender?: boolean;
            /** Whether this meeting space was created via Dynamite in this Dynamite group. */
            wasCreatedInCurrentGroup?: boolean;
        }
        interface AppsDynamiteYoutubeMetadata {
            /** YouTube resource ID of the artifact. */
            id?: string;
            /** If this field is set to true, server should still contact external backends to get metadata for search but clients should not render this chip. */
            shouldNotRender?: boolean;
            /** YouTube query parameter for timestamp. YouTube specific flag that allows users to embed time token when sharing a link. This property contains parsed time token in seconds. */
            startTime?: number;
        }
        interface Attachment {
            /** An embed represents an external entity. See go/es-embeds. */
            embedItem?: EmbedClientItem;
            /** An id to uniquely identify an attachment when several attachments are in a collection. */
            id?: string;
        }
        interface AttachmentMetadata {
            filename?: string;
        }
        interface AuditLoggingSettings {
            /** Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc. */
            logAdminReadActions?: boolean;
            /** Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc. */
            logDataReadActions?: boolean;
            /** Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc. */
            logDataWriteActions?: boolean;
            /**
             * The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format:
             * projects/{project_id}
             */
            project?: string;
        }
        interface AuthorizedItemId {
            /** Serialized ID of the Drive resource */
            id?: string;
            /** Resource key of the Drive item. This field should be unset if, depending on the context, the item does not have a resource key, or if none was specified. This must never be logged. */
            resourceKey?: string;
        }
        interface AutoComplete {
            items?: AutoCompleteItem[];
        }
        interface AutoCompleteItem {
            text?: string;
        }
        interface BooleanOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to isolate the boolean property. For example, if operatorName is *closed* and the property's name is *isClosed*, then
             * queries like *closed:<value>* show results only where the value of the property named *isClosed* matches *<value>*. By contrast, a search that uses the same *<value>* without an
             * operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase
             * letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface BooleanPropertyOptions {
            /** If set, describes how the boolean should be used as a search operator. */
            operatorOptions?: BooleanOperatorOptions;
        }
        interface BorderStyle {
            /** The corner radius for the border. */
            cornerRadius?: number;
            /** The colors to use when the type is STROKE. */
            strokeColor?: string;
            /** The border type. */
            type?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface BotMessageMetadata {
        }
        interface BroadcastAccess {
            /** The policy that controls the broadcast's viewer access. */
            accessPolicy?: string;
            /**
             * A URL that can be used to access the broadcast of the meeting. This field will be empty if broadcast is not enabled. It will be populated by the backend. Clients cannot modify the
             * value.
             */
            viewUrl?: string;
        }
        interface BroadcastSessionInfo {
            /** A unique server-generated ID for the broadcast session. */
            broadcastSessionId?: string;
            /** Output only. Current broadcast session's statistics. */
            broadcastStats?: BroadcastStats;
            /** Input only. Deprecated field, should not be used. */
            ingestionId?: string;
            /** Broadcast session's state information. */
            sessionStateInfo?: SessionStateInfo;
        }
        interface BroadcastStats {
            /** Estimated concurrent viewer count. */
            estimatedViewerCount?: string;
        }
        interface Button {
            imageButton?: ImageButton;
            textButton?: TextButton;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CalendarEventMetadata {
        }
        interface CallInfo {
            /** Abuse reporting configuration for the ongoing conference. */
            abuseReportingConfig?: AbuseReportingConfig;
            /**
             * Output only. Display name of the owner of artifacts generated in this conference. The expected use of this in clients is to present info like "This recording will be sent to John
             * Doe's Drive". This field can be empty if preferred display name determination fails for any reason.
             */
            artifactOwner?: UserDisplayInfo;
            /** Output only. Documents attached to an ongoing conference. */
            attachedDocuments?: DocumentInfo[];
            /**
             * Output only. The set of reactions that clients are allowed to send and can expect to receive. Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be
             * able to send reactions.
             */
            availableReactions?: ReactionInfo[];
            /** Information about active broadcast session in the ongoing conference. */
            broadcastSessionInfo?: BroadcastSessionInfo;
            /**
             * Output only. The calendar event ID of a Google Calendar event that the meeting space is associated with. If the meeting space is not associated with an event in Google Calendar,
             * this field is empty. For recurring events, it refers to the recurring instance associated with the current call, as determined by the server.
             */
            calendarEventId?: string;
            /**
             * The current co-activity session, or unset if there is none in progress. A co-activity session can be initiated by devices in JOINED state . Initiator of the co-activity is expected
             * to populate this field to start the session. Once clients detect that the co-activity has finished, any JOINED device can clear this field to end the co-activity session. In the
             * case of switching activities, the initiator of the new activity merely needs to override this with the new co-activity data, and all connected clients are expected to handle the
             * transition gracefully.
             */
            coActivity?: CoActivity;
            /** The current collaboration session, or unset if no collaboration is in progress. */
            collaboration?: Collaboration;
            /** CSE information for the ongoing conference. */
            cseInfo?: CseInfo;
            /**
             * Output only. The maximum number of devices that may be in the joined state simultaneously in this conference. This can be used by clients to guess whether it will be possible to
             * join, but the only way to know is to try to join. It can also be used to inform users about the limit that is in effect. This limit is normally set when the conference is created
             * and not changed during the lifetime of the conference. But there are some cases where it may change, so clients should be aware that the information may be stale.
             */
            maxJoinedDevices?: number;
            /**
             * Output only. Information about the media backend for the currently ongoing conference in the meeting space. The media backend information will only be filled in for clients that are
             * supposed to present the information. The information should be displayed in a debug panel and is only intended for internal debugging purposes. If the string is empty nothing should
             * be displayed about the media backend.
             */
            mediaBackendInfo?: string;
            /**
             * Output only. The name or description of the organization or domain that the organizer belongs to. The expected use of this in clients is to present messages like "John Doe (outside
             * of Google.com) is trying to join this call", where "Google.com" is the organization name. The field will be empty if the organization name could not be determined, possibly because
             * of a backend error.
             */
            organizationName?: string;
            /** Paygate information to clients. */
            paygateInfo?: PaygateInfo;
            /** The current presenter in the call, or unset if there is no current presenter. Clients can set this to change the presenter. */
            presenter?: Presenter;
            /**
             * Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This will always be set in server responses, with a valid recording status. This is
             * superseded by streaming_sessions field, which contains the same information about this recording as well as additional information about other application type at the same time.
             * This will be deprecated and removed at some point.
             */
            recordingInfo?: RecordingInfo;
            /** Information about active recording session in the ongoing conference. */
            recordingSessionInfo?: RecordingSessionInfo;
            /** Settings of the ongoing conference. */
            settings?: CallSettings;
            /**
             * Output only. Info about streaming sessions (recording or broadcast) for this conference. This should contain all active sessions. Currently, it's guaranteed to have at most one
             * recording and at most one broadcast (at most two sessions in total). For each application type (recording or broadcast), latest inactive session is included if there's no active
             * one.
             */
            streamingSessions?: StreamingSessionInfo[];
            /** Supported caption languages in BCP 47 language code format, e.g.'en-US'. */
            supportedCaptionLanguages?: string[];
            /** Information about active transcription session in the ongoing conference. */
            transcriptionSessionInfo?: TranscriptionSessionInfo;
            /** The number of devices viewing the conference - MeetingDevices that are in VIEWER role and JOINED state in the conference. */
            viewerCount?: number;
            /** Information about active YouTube broadcast sessions in the ongoing conference. */
            youTubeBroadcastSessionInfos?: YouTubeBroadcastSessionInfo[];
        }
        interface CallSettings {
            /** Indicates whether the access lock is currently on or off. */
            accessLock?: boolean;
            /** Indicates whether the attendance report is currently enabled or disabled. */
            attendanceReportEnabled?: boolean;
            /** Indicates whether the audio lock is currently on or off. */
            audioLock?: boolean;
            /** Indicates whether the chat lock is currently on or off. */
            chatLock?: boolean;
            /** Whether Client-side Encryption is enabled for this conference. */
            cseEnabled?: boolean;
            /** Indicates whether the current call is moderated. go/meet-multimod-dd */
            moderationEnabled?: boolean;
            /** Indicates whether the present lock is currently on or off. */
            presentLock?: boolean;
            /**
             * Indicates whether project Dino is currently on or off. WARNING: This is currently an experimental field. It should not be used without getting an explicit review and approval from
             * the Meet team.
             */
            projectDinoEnabled?: boolean;
            /** Indicates whether the reactions lock is currently on or off. */
            reactionsLock?: boolean;
            /** Indicates whether the video lock is currently on or off. */
            videoLock?: boolean;
        }
        interface CapTokenHolderProto {
            /**
             * The hash of the corresponding capability token. The value is defined to be identical to the one in acl.proto's CapTokenMetadata: 10-byte prefix of HMAC-SHA1 of the token. The HMAC
             * key is the following fixed (non-secret) 512-bit value: 79b1c8f4 82baf523 b8a9ab4a e960f438 c45be041 11f1f222 e8a3f64d aeb05e3d c3576acc ec649194 aede422c 4e48e0d1 ff21234a a6ed6b49
             * a7fa592e efd7bba3
             */
            tokenHmacSha1Prefix?: string;
        }
        interface Card {
            cardActions?: CardAction[];
            displayStyle?: string;
            fixedFooter?: FixedFooter;
            header?: CardHeader;
            /** Name of the card used in CardNavigation.pop_to_card_name. */
            name?: string;
            /** When displaying contextual content, the peek card header acts as a placeholder so that the user can navigate forward between the homepage cards and the contextual cards. */
            peekCardHeader?: CardHeader;
            sections?: Section[];
        }
        interface CardAction {
            /** The label used to be displayed in the action menu item. */
            actionLabel?: string;
            onClick?: OnClick;
        }
        interface CardHeader {
            /** The alternative text of this image which will be used for accessibility. */
            imageAltText?: string;
            imageStyle?: string;
            imageUrl?: string;
            subtitle?: string;
            /**
             * The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both
             * lines. The header is rendered in collapsed and detailed view.
             */
            title?: string;
        }
        interface ChatContentExtension {
            /** Annotations to decorate this event. */
            annotation?: EventAnnotation[];
            /**
             * This metadata informs how the placeholder string will be localized dynamically in Hangouts. See go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE
             * events.
             */
            dynamitePlaceholderMetadata?: DynamitePlaceholderMetadata;
            /** Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an expiration_timestamp (for example enterprise retention users) we need to store the otr status. */
            eventOtrStatus?: string;
            /** Group-link sharing toggle event. */
            groupLinkSharingModificationEvent?: GroupLinkSharingModificationEvent;
            /** Audio/video Hangout event. */
            hangoutEvent?: HangoutEvent;
            /** Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is stored in Papyrus. */
            inviteAcceptedEvent?: InviteAcceptedEvent;
            /** Join/leave events. */
            membershipChangeEvent?: MembershipChangeEvent;
            /** Metadata for off-the-record message. */
            otrChatMessageEvent?: OtrChatMessageEvent;
            otrModificationEvent?: OtrModificationEvent;
            renameEvent?: RenameEvent;
        }
        interface ChatProto {
            /** Chat IDs consist of alphanumeric characters and colons. Currently required. */
            chatId?: string;
            /**
             * The type of Chat members to consider, e.g. "all members" vs. "invitee" These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in
             * social/graph/storage/proto/id.proto. See chat.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with chat.
             * Currently required.
             */
            memberType?: number;
        }
        interface CheckAccessResponse {
            /** Returns true if principal has access. Returns false otherwise. */
            hasAccess?: boolean;
        }
        interface CircleProto {
            /** Circle ID is unique only relative to the owner's Gaia ID. Currently required. */
            circleId?: string;
            /** The owner of the circle. Currently required. */
            ownerGaiaId?: string;
            /**
             * If present, then tests for membership in this circle must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See
             * http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this circle supports checking consistency timestamps.
             * For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.
             */
            requiredConsistencyTimestampUsec?: string;
        }
        interface CloudPrincipalProto {
            /** Format: "{identity-pool}:{subject}#" Details: go/cloud-principal-identifiers */
            id?: string;
        }
        interface CoActivity {
            /** The title of the activity in this co-activity session. For example, this might be the title of the video being co-watched, or the name of the round of a game being co-played. */
            activityTitle?: string;
            /** Identifies the app handling this co-activity. */
            coActivityApp?: string;
        }
        interface Collaboration {
            /** The attachment being collaborated on. */
            attachmentId?: string;
            /** Display info of the user who initiated the collaboration session. */
            initiator?: UserDisplayInfo;
            /** The uri of the artifact being collaborated on. */
            uri?: string;
        }
        interface Color {
            /**
             * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) *
             * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message
             * rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color
             * (as if the alpha value had been explicitly given a value of 1.0).
             */
            alpha?: number;
            /** The amount of blue in the color as a value in the interval [0, 1]. */
            blue?: number;
            /** The amount of green in the color as a value in the interval [0, 1]. */
            green?: number;
            /** The amount of red in the color as a value in the interval [0, 1]. */
            red?: number;
        }
        interface CompositeFilter {
            /** The logic operator of the sub filter. */
            logicOperator?: string;
            /** Sub filters. */
            subFilters?: Filter[];
        }
        interface ContactGroupProto {
            /** Group ID is unique only relative to the owner's Gaia ID. */
            groupId?: string;
            ownerGaiaId?: string;
            /**
             * If present, then tests for membership in this ContactGroup must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See
             * http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this group supports checking consistency timestamps.
             * For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.
             */
            requiredConsistencyTimestampUsec?: string;
        }
        interface ContextAttribute {
            /**
             * The name of the attribute. It should not be empty. The maximum length is 32 characters. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9).
             * The name will be normalized (lower-cased) before being matched.
             */
            name?: string;
            /**
             * Text values of the attribute. The maximum number of elements is 10. The maximum length of an element in the array is 32 characters. The value will be normalized (lower-cased) before
             * being matched.
             */
            values?: string[];
        }
        interface ContextualAddOnMarkup {
            /** A card must contain a header and at least 1 section. */
            cards?: Card[];
            /** Deprecated. */
            toolbar?: Toolbar;
        }
        interface CseInfo {
            /**
             * CSE domain name claimed by the meeting owner's company. This field is expected to be used for display purposes only, i.e., "Extra encryption added by $cse_domain". It can differ
             * from the `cse_domain` as defined elsewhere on the User, in the case of cross-domain meetings.
             */
            cseDomain?: string;
            /** The wrapped CSE key used by this conference. */
            wrappedKey?: string;
        }
        interface CustomerIndexStats {
            /** The date for which statistics were calculated. */
            date?: Date;
            /** Number of items aggregrated by status code. */
            itemCountByStatus?: ItemCountByStatus[];
        }
        interface CustomerQueryStats {
            /** The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned. */
            date?: Date;
            queryCountByStatus?: QueryCountByStatus[];
        }
        interface CustomerSearchApplicationStats {
            /** The count of search applications for the date. */
            count?: string;
            /** The date for which search application stats were calculated. */
            date?: Date;
        }
        interface CustomerSessionStats {
            /** The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned. */
            date?: Date;
            /** The count of search sessions on the day */
            searchSessionsCount?: string;
        }
        interface CustomerSettings {
            /** Audit Logging settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request. */
            auditLoggingSettings?: AuditLoggingSettings;
            /** VPC SC settings for the customer. If update_mask is empty then this field will be updated based on UpdateCustomerSettings request. */
            vpcSettings?: VPCSettings;
        }
        interface CustomerUserStats {
            /** The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned. */
            date?: Date;
            /** The count of unique active users in the past one day */
            oneDayActiveUsersCount?: string;
            /** The count of unique active users in the past seven days */
            sevenDaysActiveUsersCount?: string;
            /** The count of unique active users in the past thirty days */
            thirtyDaysActiveUsersCount?: string;
        }
        interface DataSource {
            /**
             * If true, sets the datasource to read-only mode. In read-only mode, the Indexing API rejects any requests to index or delete items in this source. Enabling read-only mode does not
             * stop the processing of previously accepted data.
             */
            disableModifications?: boolean;
            /** Disable serving any search or assist results. */
            disableServing?: boolean;
            /** Required. Display name of the datasource The maximum length is 300 characters. */
            displayName?: string;
            /** List of service accounts that have indexing access. */
            indexingServiceAccounts?: string[];
            /**
             * This field restricts visibility to items at the datasource level. Items within the datasource are restricted to the union of users and groups included in this field. Note that, this
             * does not ensure access to a specific item, as users need to have ACL permissions on the contained items. This ensures a high level access on the entire datasource, and that the
             * individual items are not shared outside this visibility.
             */
            itemsVisibility?: GSuitePrincipal[];
            /** The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource. */
            name?: string;
            /** IDs of the Long Running Operations (LROs) currently running for this schema. */
            operationIds?: string[];
            /** Can a user request to get thumbnail URI for Items indexed in this data source. */
            returnThumbnailUrls?: boolean;
            /**
             * A short name or alias for the source. This value will be used to match the 'source' operator. For example, if the short name is *<value>* then queries like *source:<value>* will
             * only return results for this source. The value must be unique across all datasources. The value must only contain alphanumeric characters (a-zA-Z0-9). The value cannot start with
             * 'google' and cannot be one of the following: mail, gmail, docs, drive, groups, sites, calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32 characters.
             */
            shortName?: string;
        }
        interface DataSourceIndexStats {
            /**
             * The date for which index stats were calculated. If the date of request is not the current date then stats calculated on the next day are returned. Stats are calculated close to mid
             * night in this case. If date of request is current date, then real time stats are returned.
             */
            date?: Date;
            /** Number of items aggregrated by status code. */
            itemCountByStatus?: ItemCountByStatus[];
        }
        interface DataSourceRestriction {
            /**
             * Filter options restricting the results. If multiple filters are present, they are grouped by object type before joining. Filters with the same object type are joined conjunctively,
             * then the resulting expressions are joined disjunctively. The maximum number of elements is 20. NOTE: Suggest API supports only few filters at the moment: "objecttype", "type" and
             * "mimetype". For now, schema specific filters cannot be used to filter suggestions.
             */
            filterOptions?: FilterOptions[];
            /** The source of restriction. */
            source?: Source;
        }
        interface Date {
            /** Day of month. Must be from 1 to 31 and valid for the year and month. */
            day?: number;
            /** Month of date. Must be from 1 to 12. */
            month?: number;
            /** Year of date. Must be from 1 to 9999. */
            year?: number;
        }
        interface DateOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to isolate the date property using the greater-than operator. For example, if greaterThanOperatorName is *closedafter* and
             * the property's name is *closeDate*, then queries like *closedafter:<value>* show results only where the value of the property named *closeDate* is later than *<value>*. The operator
             * name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            greaterThanOperatorName?: string;
            /**
             * Indicates the operator name required in the query in order to isolate the date property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and the
             * property's name is *closeDate*, then queries like *closedbefore:<value>* show results only where the value of the property named *closeDate* is earlier than *<value>*. The operator
             * name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            lessThanOperatorName?: string;
            /**
             * Indicates the actual string required in the query in order to isolate the date property. For example, suppose an issue tracking schema object has a property named *closeDate* that
             * specifies an operator with an operatorName of *closedon*. For searches on that data, queries like *closedon:<value>* show results only where the value of the *closeDate* property
             * matches *<value>*. By contrast, a search that uses the same *<value>* without an operator returns all items where *<value>* matches the value of any String properties or text within
             * the content field for the indexed datasource. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface DatePropertyOptions {
            /** If set, describes how the date should be used as a search operator. */
            operatorOptions?: DateOperatorOptions;
        }
        interface DateTimePicker {
            /** The label for the field, which is displayed to the user. */
            label?: string;
            /** The name of the text field which is used in FormInput, and uniquely identifies this input. */
            name?: string;
            /**
             * Triggered when the user clicks on the Save, or Clear button from the date / time picker dialog. Will only be triggered if the value changed as a result of the Save / Clear
             * operation.
             */
            onChange?: FormAction;
            /**
             * The number representing the time-zone offset from UTC, in minutes. If set, the value_ms_epoch will be displayed in the specified time zone. If not set, it will use the user's
             * timezone setting in client side.
             */
            timezoneOffsetDate?: number;
            /** The type of the DateTimePicker. */
            type?: string;
            /**
             * The value to display which can be the default value before user input or previous user input. It is represented in milliseconds (Epoch time). - For DATE_AND_TIME type, the full
             * epoch value is used. - For DATE_ONLY type, only date of the epoch time is used. - For TIME_ONLY type, only time of the epoch time is used. For example, you can set epoch time to 3 *
             * 60 * 60 * 1000 to represent 3am.
             */
            valueMsEpoch?: string;
        }
        interface DateValues {
            values?: Date[];
        }
        interface DebugOptions {
            /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
            enableDebugging?: boolean;
        }
        interface DeepLinkData {
            /** Application ID (or project ID) from Google API Console. */
            appId?: string;
            /** The data for a Google API Console client is entered by a developer during client registration and is stored in PackagingService. */
            client?: PackagingServiceClient[];
            /**
             * The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native mobile experience if supported. In the case of no web presence, instead of setting
             * the "url" field of an embed, such developers will set this field and other content fields, e.g. thumbnail, title, description. If set, this field is used to construct the deep-link
             * URI. Note that the native experience is preferred over the web link and the web link is used as a fallback.
             */
            deepLinkId?: string;
            /** Analogous web presence. Used as desktop fallback or when no native link data is present. */
            url?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface DeleteMetadata {
        }
        interface DeleteQueueItemsRequest {
            /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
            connectorName?: string;
            /** Common debug options. */
            debugOptions?: DebugOptions;
            /** The name of a queue to delete items from. */
            queue?: string;
        }
        interface DeliveryMedium {
            /** Describes the medium the cent was sent/received. For example, if I receive an SMS via GV, the medium_type will be GV. */
            mediumType?: string;
            /**
             * In the case of multiple GV/native numbers, this defines the exact number to send from. It is used to differentiate mediums that have the same type, but different addresses (e.g. two
             * android phones).
             */
            selfPhone?: VoicePhoneNumber;
        }
        interface DisplayedProperty {
            /**
             * The name of the top-level property as defined in a property definition for the object. If the name is not a defined property in the schema, an error is given when attempting to
             * update the schema.
             */
            propertyName?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Divider {
        }
        interface DocumentInfo {
            /** A whiteboard document. */
            whiteboardInfo?: WhiteboardInfo;
        }
        interface DoubleOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to use the double property in sorting or as a facet. The operator name can only contain lowercase letters (a-z). The
             * maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface DoublePropertyOptions {
            /** If set, describes how the double should be used as a search operator. */
            operatorOptions?: DoubleOperatorOptions;
        }
        interface DoubleValues {
            values?: number[];
        }
        interface DriveFollowUpRestrict {
            type?: string;
        }
        interface DriveLocationRestrict {
            type?: string;
        }
        interface DriveMimeTypeRestrict {
            type?: string;
        }
        interface DriveTimeSpanRestrict {
            type?: string;
        }
        interface DynamitePlaceholderMetadata {
            attachmentMetadata?: AttachmentMetadata;
            botMessageMetadata?: any;
            calendarEventMetadata?: any;
            deleteMetadata?: any;
            editMetadata?: any;
            /** The space URL embedded in the localized string. */
            spaceUrl?: string;
            tasksMetadata?: any;
            videoCallMetadata?: VideoCallMetadata;
        }
        interface DynamiteSpacesScoringInfo {
            affinityScore?: number;
            commonContactCountAffinityScore?: number;
            contactsIntersectionCount?: number;
            finalScore?: number;
            freshnessScore?: number;
            joinedSpacesAffinityScore?: number;
            lastMessagePostedTimestampSecs?: string;
            lastReadTimestampSecs?: string;
            memberMetadataCount?: number;
            messageScore?: number;
            numAucContacts?: string;
            smallContactListAffinityScore?: number;
            smallUnjoinedSpacesAffinityScore?: number;
            spaceAgeInDays?: number;
            spaceCreationTimestampSecs?: string;
            topicalityScore?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface EditMetadata {
        }
        interface EmailAddress {
            /** The email address. */
            emailAddress?: string;
        }
        interface EmailOwnerProto {
            email?: string;
        }
        interface EmbedClientItem {
            /**
             * The canonical ID of the embed. If absent, the canonical ID is equal to the ID; if present, then the canonical ID represents an "equivalence class" of embeds which really refer to
             * the same object. (For example, the URLs http://www.foo.com/ and http://foo.com/ refer to the same object) This field may be updated periodically by background processes.
             */
            canonicalId?: string;
            /**
             * Deep-linking data to take the user to the right place in a mobile app. This is only used for preview and attribution. Links that are specific to a given embed type should live on
             * that specific embed's proto by using Link. See http://goto.google.com/mariana-design.
             */
            deepLinkData?: DeepLinkData;
            /** The ID of the embed. This corresponds to the schema.org ID, as represented in the ItemScope.id field. */
            id?: string;
            /**
             * The provenance of the embed, populated when the embed originated from a web fetch. The provenance captures information about the web page the embed had originated, like the URL that
             * was retrieved and the retrieved URL's canonical form. This is useful in the case where the URL shared by the URL redirects (e.g., in the case of a shortened URL).
             */
            provenance?: Provenance;
            /**
             * The ID used to identify the embed during rendering. This field will match ID, if set, otherwise it will be the ID of the parent activity. This field is only populated on the server
             * for client use and is not persisted to storage.
             */
            renderId?: string;
            /** Signature of the embed, used for verification. */
            signature?: string;
            /** Transient generic data that will not be saved on the server. */
            transientData?: any;
            /**
             * The first value in `type` determines which extension field will be set. When creating an EmbedClientItem, you only need to set the first (primary) type in this field. When the
             * server receives the item, it will populate the full type list using the parent annotations in the ItemType enum.
             */
            type?: string[];
        }
        interface EnumOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to isolate the enum property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then
             * queries like *priority:<value>* show results only where the value of the property named *priorityVal* matches *<value>*. By contrast, a search that uses the same *<value>* without
             * an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase
             * letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface EnumPropertyOptions {
            /** If set, describes how the enum should be used as a search operator. */
            operatorOptions?: EnumOperatorOptions;
            /**
             * Used to specify the ordered ranking for the enumeration that determines how the integer values provided in the possible EnumValuePairs are used to rank results. If specified,
             * integer values must be provided for all possible EnumValuePair values given for this property. Can only be used if isRepeatable is false.
             */
            orderedRanking?: string;
            /**
             * The list of possible values for the enumeration property. All EnumValuePairs must provide a string value. If you specify an integer value for one EnumValuePair, then all possible
             * EnumValuePairs must provide an integer value. Both the string value and integer value must be unique over all possible values. Once set, possible values cannot be removed or
             * modified. If you supply an ordered ranking and think you might insert additional enum values in the future, leave gaps in the initial integer values to allow adding a value in
             * between previously registered values. The maximum number of elements is 100.
             */
            possibleValues?: EnumValuePair[];
        }
        interface EnumValuePair {
            /** The integer value of the EnumValuePair which must be non-negative. Optional. */
            integerValue?: number;
            /** The string value of the EnumValuePair. The maximum length is 32 characters. */
            stringValue?: string;
        }
        interface EnumValues {
            /** The maximum allowable length for string values is 32 characters. */
            values?: string[];
        }
        interface ErrorInfo {
            errorMessages?: ErrorMessage[];
        }
        interface ErrorMessage {
            errorMessage?: string;
            source?: Source;
        }
        interface EventAnnotation {
            type?: number;
            value?: string;
        }
        interface EventProto {
            /** Event IDs consist of alphanumeric characters and colons. Currently required. */
            eventId?: string;
            /**
             * The type of Event members to consider, e.g. "all members" vs. "owners" vs. "admins". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType
             * enum options in social/graph/storage/proto/id.proto. See event.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types
             * associated with event. Currently required.
             */
            memberType?: number;
        }
        interface FacetBucket {
            /**
             * Number of results that match the bucket value. Counts are only returned for searches when count accuracy is ensured. Cloud Search does not guarantee facet counts for any query and
             * facet counts might be present only intermittently, even for identical queries. Do not build dependencies on facet count existence; instead use facet ount percentages which are
             * always returned.
             */
            count?: number;
            /**
             * Percent of results that match the bucket value. The returned value is between (0-100], and is rounded down to an integer if fractional. If the value is not explicitly returned, it
             * represents a percentage value that rounds to 0. Percentages are returned for all searches, but are an estimate. Because percentages are always returned, you should render
             * percentages instead of counts.
             */
            percentage?: number;
            value?: Value;
        }
        interface FacetOptions {
            /** Maximum number of facet buckets that should be returned for this facet. Defaults to 10. Maximum value is 100. */
            numFacetBuckets?: number;
            /** If object_type is set, only those objects of that type will be used to compute facets. If empty, then all objects will be used to compute facets. */
            objectType?: string;
            /** The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions */
            operatorName?: string;
            /** Source name to facet on. Format: datasources/{source_id} If empty, all data sources will be used. */
            sourceName?: string;
        }
        interface FacetResult {
            /** FacetBuckets for values in response containing at least a single result with the corresponding filter. */
            buckets?: FacetBucket[];
            /** Object type for which facet results are returned. Can be empty. */
            objectType?: string;
            /** The name of the operator chosen for faceting. @see cloudsearch.SchemaPropertyOptions */
            operatorName?: string;
            /** Source name for which facet results are returned. Will not be empty. */
            sourceName?: string;
        }
        interface FieldViolation {
            /** The description of the error. */
            description?: string;
            /** Path of field with violation. */
            field?: string;
        }
        interface Filter {
            compositeFilter?: CompositeFilter;
            valueFilter?: ValueFilter;
        }
        interface FilterOptions {
            /** Generic filter to restrict the search, such as `lang:en`, `site:xyz`. */
            filter?: Filter;
            /**
             * If object_type is set, only objects of that type are returned. This should correspond to the name of the object that was registered within the definition of schema. The maximum
             * length is 256 characters.
             */
            objectType?: string;
        }
        interface FixedFooter {
            buttons?: Button[];
            primaryButton?: TextButton;
            secondaryButton?: TextButton;
        }
        interface FormAction {
            /** Apps script function that should be invoked in the developer's apps script when the containing element is clicked/activated. */
            actionMethodName?: string;
            loadIndicator?: string;
            parameters?: ActionParameter[];
            /**
             * Indicates whether form values persist after the action. When false, the Apps Script is responsible for persisting values, by setting any form field values using the formInputs in
             * the event. Disabling this behavior can be used if the add-on needs the ability to clear form fields, for example, as with persistent values, there is no means for clearing existing
             * values. When disabling persistent values, it is strongly recommended that the add-on use LoadIndicator.SPINNER for all events, as this locks the UI to ensure no changes are made by
             * the user while the action is being processed. When using LoadIndicator.NONE for any of the actions, persistent values are recommended, as it ensures that any changes made by the
             * user after form / on change actions are sent to the server are not overwritten by the response. Persistent values disabled by default. While we recommend persistent values be used
             * in the typical use case, we do not enable by default, as doing so would change the current behavior of existing add-ons in prod.
             */
            persistValues?: boolean;
        }
        interface Formatting {
            bold?: boolean;
            /** This indicates that the segment should be rendered as highlighted or visually emphasized. */
            highlight?: boolean;
            italics?: boolean;
            strikethrough?: boolean;
            /**
             * If set, this indicates that the segment should be rendered with the specified style. The absence of an explicit style represents "no style", i.e. the segment can be rendered with
             * the default style chosen by the application.
             */
            style?: string;
            underline?: boolean;
        }
        interface FreshnessOptions {
            /** The duration after which an object should be considered stale. The default value is 180 days (in seconds). */
            freshnessDuration?: string;
            /**
             * This property indicates the freshness level of the object in the index. If set, this property must be a top-level property within the property definitions and it must be a timestamp
             * type or date type. Otherwise, the Indexing API uses updateTime as the freshness indicator. The maximum length is 256 characters. When a property is used to calculate freshness, the
             * value defaults to 2 years from the current time.
             */
            freshnessProperty?: string;
        }
        interface GaiaGroupProto {
            groupId?: string;
        }
        interface GaiaUserProto {
            userId?: string;
        }
        interface GatewayAccess {
            /** Whether third-party gateway accesses are enabled for this meeting space. If enabled, the actual access code can be retrieved by calling the GetGatewayAccess RPC method. */
            enabled?: boolean;
        }
        interface GatewaySipAccess {
            /** Permanent numeric code for manual entry on specially configured devices, currently the same as the PSTN "Universal pin". */
            sipAccessCode?: string;
            /**
             * The SIP URI the conference can be reached through. The string is on one of the formats: "sip:@" "sips:@" where currently is the 13-digit universal pin (with the future option to
             * support using a Meet meeting code as well), and is a valid address to be resolved using a DNS SRV lookup, or a dotted quad.
             */
            uri?: string;
        }
        interface GetCustomerIndexStatsResponse {
            /** Average item count for the given date range for which billing is done. */
            averageIndexedItemCount?: string;
            /** Summary of indexed item counts, one for each day in the requested range. */
            stats?: CustomerIndexStats[];
        }
        interface GetCustomerQueryStatsResponse {
            stats?: CustomerQueryStats[];
            /** Total successful query count (status code 200) for the given date range. */
            totalQueryCount?: string;
        }
        interface GetCustomerSearchApplicationStatsResponse {
            /** Average search application count for the given date range. */
            averageSearchApplicationCount?: string;
            /** Search application stats by date. */
            stats?: CustomerSearchApplicationStats[];
        }
        interface GetCustomerSessionStatsResponse {
            stats?: CustomerSessionStats[];
        }
        interface GetCustomerUserStatsResponse {
            stats?: CustomerUserStats[];
        }
        interface GetDataSourceIndexStatsResponse {
            /** Average item count for the given date range for which billing is done. */
            averageIndexedItemCount?: string;
            /** Summary of indexed item counts, one for each day in the requested range. */
            stats?: DataSourceIndexStats[];
        }
        interface GetSearchApplicationQueryStatsResponse {
            /** Query stats per date for a search application. */
            stats?: SearchApplicationQueryStats[];
            /** Total successful query count (status code 200) for the given date range. */
            totalQueryCount?: string;
        }
        interface GetSearchApplicationSessionStatsResponse {
            stats?: SearchApplicationSessionStats[];
        }
        interface GetSearchApplicationUserStatsResponse {
            stats?: SearchApplicationUserStats[];
        }
        interface GoogleChatV1ContextualAddOnMarkup {
            /** A list of cards. A card must contain a header and at least 1 section. */
            cards?: GoogleChatV1ContextualAddOnMarkupCard[];
        }
        interface GoogleChatV1ContextualAddOnMarkupCard {
            /** The actions of this card. */
            cardActions?: GoogleChatV1ContextualAddOnMarkupCardCardAction[];
            /** The header of the card. A header usually contains a title and an image. */
            header?: GoogleChatV1ContextualAddOnMarkupCardCardHeader;
            /** Name of the card. */
            name?: string;
            /** Sections are separated by a line divider. */
            sections?: GoogleChatV1ContextualAddOnMarkupCardSection[];
        }
        interface GoogleChatV1ContextualAddOnMarkupCardCardAction {
            /** The label used to be displayed in the action menu item. */
            actionLabel?: string;
            /** The onclick action for this action item. */
            onClick?: GoogleChatV1WidgetMarkupOnClick;
        }
        interface GoogleChatV1ContextualAddOnMarkupCardCardHeader {
            /** The image's type (e.g. square border or circular border). */
            imageStyle?: string;
            /** The URL of the image in the card header. */
            imageUrl?: string;
            /** The subtitle of the card header. */
            subtitle?: string;
            /**
             * The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each will take up 1 line. If only the title is specified, it will take up both
             * lines.
             */
            title?: string;
        }
        interface GoogleChatV1ContextualAddOnMarkupCardSection {
            /** The header of the section, text formatted supported. */
            header?: string;
            /** A section must contain at least 1 widget. */
            widgets?: GoogleChatV1WidgetMarkup[];
        }
        interface GoogleChatV1WidgetMarkup {
            /** A list of buttons. Buttons is also oneof data and only one of these fields should be set. */
            buttons?: GoogleChatV1WidgetMarkupButton[];
            /** Display an image in this widget. */
            image?: GoogleChatV1WidgetMarkupImage;
            /** Display a key value item in this widget. */
            keyValue?: GoogleChatV1WidgetMarkupKeyValue;
            /** Display a text paragraph in this widget. */
            textParagraph?: GoogleChatV1WidgetMarkupTextParagraph;
        }
        interface GoogleChatV1WidgetMarkupButton {
            /** A button with image and onclick action. */
            imageButton?: GoogleChatV1WidgetMarkupImageButton;
            /** A button with text and onclick action. */
            textButton?: GoogleChatV1WidgetMarkupTextButton;
        }
        interface GoogleChatV1WidgetMarkupFormAction {
            /**
             * The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. The same
             * method name can be used for several elements that trigger a common behavior if desired.
             */
            actionMethodName?: string;
            /** List of action parameters. */
            parameters?: GoogleChatV1WidgetMarkupFormActionActionParameter[];
        }
        interface GoogleChatV1WidgetMarkupFormActionActionParameter {
            /** The name of the parameter for the action script. */
            key?: string;
            /** The value of the parameter. */
            value?: string;
        }
        interface GoogleChatV1WidgetMarkupImage {
            /**
             * The aspect ratio of this image (width/height). This field allows clients to reserve the right height for the image while waiting for it to load. It's not meant to override the
             * native aspect ratio of the image. If unset, the server fills it by prefetching the image.
             */
            aspectRatio?: number;
            /** The URL of the image. */
            imageUrl?: string;
            /** The onclick action. */
            onClick?: GoogleChatV1WidgetMarkupOnClick;
        }
        interface GoogleChatV1WidgetMarkupImageButton {
            /** The icon specified by an enum that indices to an icon provided by Chat API. */
            icon?: string;
            /** The icon specified by a URL. */
            iconUrl?: string;
            /** The name of this image_button which will be used for accessibility. Default value will be provided if developers don't specify. */
            name?: string;
            /** The onclick action. */
            onClick?: GoogleChatV1WidgetMarkupOnClick;
        }
        interface GoogleChatV1WidgetMarkupKeyValue {
            /** The text of the bottom label. Formatted text supported. */
            bottomLabel?: string;
            /** A button that can be clicked to trigger an action. */
            button?: GoogleChatV1WidgetMarkupButton;
            /** The text of the content. Formatted text supported and always required. */
            content?: string;
            /** If the content should be multiline. */
            contentMultiline?: boolean;
            /** An enum value that will be replaced by the Chat API with the corresponding icon image. */
            icon?: string;
            /** The icon specified by a URL. */
            iconUrl?: string;
            /** The onclick action. Only the top label, bottom label and content region are clickable. */
            onClick?: GoogleChatV1WidgetMarkupOnClick;
            /** The text of the top label. Formatted text supported. */
            topLabel?: string;
        }
        interface GoogleChatV1WidgetMarkupOnClick {
            /** A form action will be triggered by this onclick if specified. */
            action?: GoogleChatV1WidgetMarkupFormAction;
            /** This onclick triggers an open link action if specified. */
            openLink?: GoogleChatV1WidgetMarkupOpenLink;
        }
        interface GoogleChatV1WidgetMarkupOpenLink {
            /** The URL to open. */
            url?: string;
        }
        interface GoogleChatV1WidgetMarkupTextButton {
            /** The onclick action of the button. */
            onClick?: GoogleChatV1WidgetMarkupOnClick;
            /** The text of the button. */
            text?: string;
        }
        interface GoogleChatV1WidgetMarkupTextParagraph {
            text?: string;
        }
        interface GoogleDocsMetadata {
            /** Contains number of users and groups which can access the document. */
            aclInfo?: AclInfo;
            /** The conceptual type (presentation, document, etc.) of this document. */
            documentType?: string;
            /** The file extension of the document. NOTE: As of October 2018 this field is not backfilled for old documents. */
            fileExtension?: string;
            /** The last time this document was modified, in seconds since epoch. Only counts content modifications. */
            lastContentModifiedTimestamp?: string;
            /**
             * Additional per-result information, akin to Gmail's SingleThreadResponse. Note: GWS no longer seems to use this field, but there's still one reference to it for Scribe, so we can't
             * remove it.
             */
            resultInfo?: GoogleDocsResultInfo;
            /** Contains additional information about the document depending on its type. */
            typeInfo?: TypeInfo;
        }
        interface GoogleDocsResultInfo {
            /** The SHA1 hash of the object in Drive, if any. */
            attachmentSha1?: string;
            /**
             * The storage identifier for the object in Cosmo. This field is intended to used by Stratus/Moonshine integration only. It should not be exposed externally (please refer to
             * encrypted_id for that purpose).
             */
            cosmoId?: Id;
            /**
             * For Cosmo objects, the Cosmo namespace the object was in. This allows downstream clients to identify whether a document was created in Writely or Kix, Presently or Punch, or whether
             * it was uploaded from GDrive. See storage_cosmo.Id.NAME_SPACE for a list of all Cosmo name spaces.
             */
            cosmoNameSpace?: number;
            /** The encrypted (user-visible) id of this object. Knowing the id is sufficient to create a canonical URL for this document. */
            encryptedId?: string;
            /** The mimetype of the document. */
            mimeType?: string;
            /** The visibility indicator in the UI will be based upon this. */
            shareScope?: ShareScope;
        }
        interface Grid {
            /** The border style to apply to each grid item. */
            borderStyle?: BorderStyle;
            /** The items to display in the grid. */
            items?: GridItem[];
            /**
             * The number of columns to display in the grid. Note that a default value will be used if this field is not specified, and that default value will be different depending on where the
             * grid is shown (dialog vs companion).
             */
            numColumns?: number;
            /** This callback will be reused by each individual GridItem, but with the item's identifier and index in the items list added to the callback's parameters. */
            onClick?: OnClick;
            /** The text to display in the grid header. */
            title?: string;
        }
        interface GridItem {
            /** A user-specified identifier for this grid item. This identifier will be returned in the parent Grid's on_click callback's parameters. */
            identifier?: string;
            image?: ImageComponent;
            layout?: string;
            subtitle?: string;
            textAlignment?: string;
            /** Text properties. */
            title?: string;
        }
        interface GroupLinkSharingModificationEvent {
            newStatus?: string;
        }
        interface GSuitePrincipal {
            /** This principal represents all users of the Google Workspace domain of the customer. */
            gsuiteDomain?: boolean;
            /** This principal references a Google Workspace group name. */
            gsuiteGroupEmail?: string;
            /** This principal references a Google Workspace user account. */
            gsuiteUserEmail?: string;
        }
        interface HangoutEvent {
            hangoutDurationSecs?: string;
            mediaType?: string;
            participantId?: StoredParticipantId[];
            type?: string;
        }
        interface HashtagData {
            searchText?: string;
        }
        interface HostProto {
            /** Lower-case, fully qualified hostname. */
            hostName?: string;
            /**
             * If present, then any checks that compare this Principal to LOAS peer info must confirm the peer's machine owner is equal to 'host_owner'. If absent, then any peer machine owner is
             * acceptable.
             */
            hostOwner?: string;
        }
        interface HtmlOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to isolate the html property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then
             * queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an
             * operator return all items where *<value>* matches the value of any html properties or text within the content field for the item. The operator name can only contain lowercase
             * letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface HtmlPropertyOptions {
            /** If set, describes how the property should be used as a search operator. */
            operatorOptions?: HtmlOperatorOptions;
            /** Indicates the search quality importance of the tokens within the field when used for retrieval. Can only be set to DEFAULT or NONE. */
            retrievalImportance?: RetrievalImportance;
        }
        interface HtmlValues {
            /** The maximum allowable length for html values is 2048 characters. */
            values?: string[];
        }
        interface IconImage {
            /** The alternative text of this icon_url which will be used for accessibility. */
            altText?: string;
            icon?: string;
            iconUrl?: string;
            /** The image cropping style. Note that icons with a CIRCLE style are rendered larger than the default icon size. */
            imageStyle?: string;
        }
        interface Id {
            /** The User account in which the DirEntry was originally created. If name_space==GAIA, then it's the gaia_id of the user this id is referring to. */
            creatorUserId?: string;
            /**
             * The local identifier for the DirEntry (local to the creator's account). local_id + app_name is guaranteed to be unique within the creator account, but not across all User accounts.
             * The string is case sensitive. Ignore if name_space==GAIA. NB For name_space==COSMO, all local_id's should be defined in
             * google3/java/com/google/storage/cosmo/server/api/SpecialObjectIds.java as they have a special predefined meaning. See cosmo.client.CosmoIdFactory.createObjectId(long,String) for
             * IMPORTANT recommendations when generating IDs.
             */
            localId?: string;
            /**
             * The name space in which this id is unique (typically the application that created it). Values should be drawn from the above enum, but for experimentation, use values greater than
             * 1000.
             */
            nameSpace?: number;
        }
        interface Image {
            /** The alternative text of this image which will be used for accessibility. */
            altText?: string;
            /** The aspect ratio of this image (width/height). */
            aspectRatio?: number;
            /** Image url specified by developers. Server side, we will wrap with FIFE so client apps can configure size/cropping/etc. */
            imageUrl?: string;
            onClick?: OnClick;
        }
        interface ImageButton {
            icon?: string;
            iconUrl?: string;
            name?: string;
            onClick?: OnClick;
        }
        interface ImageComponent {
            altText?: string;
            borderStyle?: BorderStyle;
            cropStyle?: ImageCropStyle;
            imageUrl?: string;
        }
        interface ImageCropStyle {
            /** The aspect ratio to use if the crop type is RECTANGLE_CUSTOM. */
            aspectRatio?: number;
            /** The crop type. */
            type?: string;
        }
        interface ImageKeyValue {
            icon?: string;
            iconUrl?: string;
            onClick?: OnClick;
            text?: string;
        }
        interface IndexItemOptions {
            /** Specifies if the index request should allow Google Workspace principals that do not exist or are deleted. */
            allowUnknownGsuitePrincipals?: boolean;
        }
        interface IndexItemRequest {
            /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
            connectorName?: string;
            /** Common debug options. */
            debugOptions?: DebugOptions;
            indexItemOptions?: IndexItemOptions;
            /** The name of the item. Format: datasources/{source_id}/items/{item_id} */
            item?: Item;
            /** Required. The RequestMode for this request. */
            mode?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface InitializeCustomerRequest {
        }
        interface IntegerOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to isolate the integer property using the greater-than operator. For example, if greaterThanOperatorName is
             * *priorityabove* and the property's name is *priorityVal*, then queries like *priorityabove:<value>* show results only where the value of the property named *priorityVal* is greater
             * than *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            greaterThanOperatorName?: string;
            /**
             * Indicates the operator name required in the query in order to isolate the integer property using the less-than operator. For example, if lessThanOperatorName is *prioritybelow* and
             * the property's name is *priorityVal*, then queries like *prioritybelow:<value>* show results only where the value of the property named *priorityVal* is less than *<value>*. The
             * operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            lessThanOperatorName?: string;
            /**
             * Indicates the operator name required in the query in order to isolate the integer property. For example, if operatorName is *priority* and the property's name is *priorityVal*, then
             * queries like *priority:<value>* show results only where the value of the property named *priorityVal* matches *<value>*. By contrast, a search that uses the same *<value>* without
             * an operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase
             * letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface IntegerPropertyOptions {
            /**
             * The maximum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values greater
             * than the maximum are accepted and ranked with the same weight as items indexed with the maximum value.
             */
            maximumValue?: string;
            /**
             * The minimum value of the property. The minimum and maximum values for the property are used to rank results according to the ordered ranking. Indexing requests with values less than
             * the minimum are accepted and ranked with the same weight as items indexed with the minimum value.
             */
            minimumValue?: string;
            /** If set, describes how the integer should be used as a search operator. */
            operatorOptions?: IntegerOperatorOptions;
            /** Used to specify the ordered ranking for the integer. Can only be used if isRepeatable is false. */
            orderedRanking?: string;
        }
        interface IntegerValues {
            values?: string[];
        }
        interface Interaction {
            /** The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded. */
            interactionTime?: string;
            /** The user that acted on the item. */
            principal?: Principal;
            type?: string;
        }
        interface InviteAcceptedEvent {
            participantId?: StoredParticipantId[];
        }
        interface Item {
            /** Access control list for this item. */
            acl?: ItemAcl;
            /** Item content to be indexed and made text searchable. */
            content?: ItemContent;
            /** The type for this item. */
            itemType?: string;
            /** The metadata information. */
            metadata?: ItemMetadata;
            /** The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters. */
            name?: string;
            /** Additional state connector can store for this item. The maximum length is 10000 bytes. */
            payload?: string;
            /** Queue this item belongs to. The maximum length is 100 characters. */
            queue?: string;
            /** Status of the item. Output only field. */
            status?: ItemStatus;
            /** The structured data for the item that should conform to a registered object definition in the schema for the data source. */
            structuredData?: ItemStructuredData;
            /**
             * Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical
             * ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum
             * length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual
             * deletes](https://developers.google.com/cloud-search/docs/guides/operations).
             */
            version?: string;
        }
        interface ItemAcl {
            /**
             * Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom
             * field is set, this field should be set to a valid AclInheritanceType.
             */
            aclInheritanceType?: string;
            /**
             * List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and
             * override the list allowed readers. The maximum number of elements is 100.
             */
            deniedReaders?: Principal[];
            /**
             * The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural
             * relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that
             * reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all
             * items that reference the container via the containerName field. The maximum length for this field is 1536 characters.
             */
            inheritAclFrom?: string;
            /**
             * Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an
             * owner. The maximum number of elements is 5.
             */
            owners?: Principal[];
            /**
             * List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as
             * virtual containers. The maximum number of elements is 1000.
             */
            readers?: Principal[];
        }
        interface ItemContent {
            /** Upload reference ID of a previously uploaded content via write method. */
            contentDataRef?: UploadItemRef;
            contentFormat?: string;
            /** Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters. */
            hash?: string;
            /** Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB). */
            inlineContent?: string;
        }
        interface ItemCountByStatus {
            /** Number of items matching the status code. */
            count?: string;
            /**
             * Number of items matching the status code for which billing is done. This excludes virtual container items from the total count. This count would not be applicable for items with
             * ERROR or NEW_ITEM status code.
             */
            indexedItemsCount?: string;
            /** Status of the items. */
            statusCode?: string;
        }
        interface ItemMetadata {
            /**
             * The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL
             * inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.
             */
            containerName?: string;
            /**
             * The BCP-47 language code for the item, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is
             * 32 characters.
             */
            contentLanguage?: string;
            /**
             * A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is
             * 10.
             */
            contextAttributes?: ContextAttribute[];
            /** The time when the item was created in the source repository. */
            createTime?: string;
            /** Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters. */
            hash?: string;
            /** A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000. */
            interactions?: Interaction[];
            /** Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters. */
            keywords?: string[];
            /** The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters. */
            mimeType?: string;
            /**
             * The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source
             * contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.
             */
            objectType?: string;
            /** Additional search quality metadata of the item */
            searchQualityMetadata?: SearchQualityMetadata;
            /**
             * Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect
             * notice; to avoid this, encode the URL. The maximum length is 2048 characters.
             */
            sourceRepositoryUrl?: string;
            /** The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters. */
            title?: string;
            /** The time when the item was last modified in the source repository. */
            updateTime?: string;
        }
        interface ItemStatus {
            /** Status code. */
            code?: string;
            /** Error details in case the item is in ERROR state. */
            processingErrors?: ProcessingError[];
            /** Repository error reported by connector. */
            repositoryErrors?: RepositoryError[];
        }
        interface ItemStructuredData {
            /** Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters. */
            hash?: string;
            /** The structured data object that should conform to a registered object definition in the schema for the data source. */
            object?: StructuredDataObject;
        }
        interface KeyValue {
            /** Formatted text supported. */
            bottomLabel?: string;
            button?: Button;
            /** Formatted text supported and always required. */
            content?: string;
            contentMultiline?: boolean;
            endIcon?: IconImage;
            icon?: string;
            /** The alternative text of this icon_url which will be used for accessibility. */
            iconAltText?: string;
            iconUrl?: string;
            imageStyle?: string;
            /** Only the top/bottom label + content region is clickable. */
            onClick?: OnClick;
            /** The optional icon to display before the text content. */
            startIcon?: IconImage;
            switchWidget?: SwitchWidget;
            /** Formatted text supported. */
            topLabel?: string;
        }
        interface LanguageConfig {
            /** The spoken language(s) in BCP47 language code. */
            spokenLanguages?: string[];
        }
        interface LdapGroupProto {
            groupName?: string;
        }
        interface LdapUserProto {
            userName?: string;
        }
        interface LinkData {
            /**
             * An Attachment represents the structured entity to which we are linking. It contains an Embed (apps/tacotown/proto/embeds/embed_client.proto) with fields specific to the appropriate
             * type of linked entity. For example, if we are linking to a photo album, the Embed may include the album ID and gaia ID of the creator. Clients that understand the Embed type within
             * the Attachment may construct and/or decorate their link appropriately e.g. to make use of type-specific functionality or first-party integrations. The link_target and (if
             * appropriate) display_url fields must still be set even when an Attachment is present, so that clients who do not know how to interpret the Attachment can fall back to those fields,
             * and render the Segment as an ordinary web link. N.B. Even when an Attachment is present, the intention of a "LINK" Segment is for the Segment to be presented inline with the rest of
             * the text of a post or comment, with a clickable link or other UI suitable for inlining (though the client may modify the UI based on Attachment data, e.g. to add appropriate hovers,
             * icons, etc.). When an entity is intended to be rendered separately from the main body of the post/comment, a separate Attachment proto can be added outside the set of Segments. N.B.
             * Within the Attachment, fields of EmbedClientItem have their own visibility annotations, which should be enforced separately from Segment visibility annotations. See:
             * apps/tacotown/proto/embeds/embed_annotations.proto
             */
            attachment?: Attachment;
            /** The hint to use when rendering the associated attachment. Ignored if there is no associated attachment. */
            attachmentRenderHint?: string;
            /**
             * If we wish to show the user a different (e.g. shortened) version of the URL for display purposes, then that version should be set here. If this field isn't set, link_target will be
             * used for both purposes.
             */
            displayUrl?: string;
            /** link_target is the URL to navigate to when clicked. This could be the original URL, or a URL signed by the GWS URL signing service. */
            linkTarget?: string;
            /**
             * LinkType is an optional field that provides additional information regarding link target. For example, link type can be identified as the SELF_LINK when the request was executed
             * from the same link as the link target.
             */
            linkType?: string;
            /**
             * Title is an optional field that provides a short string that describes the link or its destination. User interfaces often use title as a tooltip or for accessibility purposes.
             * However, they are of course free to present this data in any form. This field is plain text.
             */
            title?: string;
        }
        interface ListDataSourceResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            sources?: DataSource[];
        }
        interface ListItemNamesForUnmappedIdentityResponse {
            itemNames?: string[];
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
        }
        interface ListItemsResponse {
            items?: Item[];
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface ListQuerySourcesResponse {
            nextPageToken?: string;
            sources?: QuerySource[];
        }
        interface ListSearchApplicationsResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            searchApplications?: SearchApplication[];
        }
        interface ListUnmappedIdentitiesResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            unmappedIdentities?: UnmappedIdentity[];
        }
        interface MatchRange {
            /** End of the match in the snippet. */
            end?: number;
            /** Starting position of the match in the snippet. */
            start?: number;
        }
        interface MdbGroupProto {
            groupName?: string;
        }
        interface MdbUserProto {
            /**
             * Do not set this field. Contact credentials-eng@ if you believe you absolutely need to use it. This is the @prod.google.com Gaia ID that corresponds to the MDB user, see
             * go/authn-merge for details. This field may always be safely ignored when performing an authorization check.
             */
            gaiaId?: string;
            userName?: string;
        }
        interface Media {
            /** Name of the media resource. */
            resourceName?: string;
        }
        interface MeetingSpace {
            /**
             * Which number classes are accepted by this meeting at the moment? When there is no ongoing conference, this field may change independent of the version number of the MeetingSpace.
             * When a conference starts, this field will be locked to the value at that time, and then will be unlocked again at the end of the conference.
             */
            acceptedNumberClass?: string[];
            /** Broadcast access information for this meeting space. */
            broadcastAccess?: BroadcastAccess;
            /**
             * Information relevant to an ongoing conference. This field will be set in responses if the client requesting the meeting space has a device in one of the JOINED, HIDDEN, or
             * MISSING_PREREQUISITES states. The field will also be set without a created device if the client requesting the meeting space is eligible to directly create a device in the JOINED
             * state without knocking, eg a same-domain joiner. Can also only be updated by clients with a device in the JOINED state.
             */
            callInfo?: CallInfo;
            /** The interop gateway access information for the meeting space. A gateway access can be used when joining conferences from non-Google equipment through an interop gateway. */
            gatewayAccess?: GatewayAccess;
            /** The SIP based access methods that can be used to join the conference. */
            gatewaySipAccess?: GatewaySipAccess[];
            /**
             * An optional alias for the meeting space. The alias can in some cases be resolved to the meeting space, similar to the meeting code. The limitation is that the user needs to be in
             * the same meeting domain as the meeting space. See go/thor-backend/meeting-alias for more details.
             */
            meetingAlias?: string;
            /** A meeting code is a globally unique code which points to a meeting space. Note: Meeting codes may be regenerated, which will cause old meeting codes to become invalid. */
            meetingCode?: string;
            /**
             * A unique server-generated ID for the meeting space. This is the resource name of the meeting space resource and has the form `spaces/`, where is a sequence of characters in the
             * [base64url set](https://tools.ietf.org/html/rfc4648#section-5), without any `=` characters.
             */
            meetingSpaceId?: string;
            /** A URL to identify and access the meeting space. Output only. */
            meetingUrl?: string;
            /**
             * Output only. A URL that clients (e.g. Calendar) can use to show the web page with all join methods available for this meeting space. This link is also used in iOS universal links
             * and Android intents, used for opening the "More ways to join" view in the Thor mobile apps. Example: https://tel.meet/mee-ting-cod?pin=1234567891011 Here, "pin" is the universal
             * phone PIN. We include it explicitly to better support the offline case on the mobile. This is set when the meeting space has either a universal PIN or an interop PIN and clients who
             * can show a "more ways to join" button should show it whenever this field is set.
             */
            moreJoinUrl?: string;
            /** All regional phone access methods for this meeting space. Can be empty. */
            phoneAccess?: PhoneAccess[];
            /** Settings of the meeting space. */
            settings?: Settings;
            /** A universal phone access method for this meeting space. Can be unset. */
            universalPhoneAccess?: UniversalPhoneAccess;
        }
        interface MembershipChangeEvent {
            /** This should only be set when MembershipChange type is LEAVE. */
            leaveReason?: string;
            participantId?: StoredParticipantId[];
            type?: string;
        }
        interface Menu {
            items?: MenuItem[];
            /** Label used to be displayed ahead of the menu. It is optional. */
            label?: string;
            /** The name of the text field which is will be used in FormInput. */
            name?: string;
            /** If specified, form is submitted when selection changed. If not specified, developer will need to specify a separate button. */
            onChange?: FormAction;
        }
        interface MenuItem {
            selected?: boolean;
            /** The text to be displayed. */
            text?: string;
            /** The value associated with this item which will be sent back to app scripts. Client should use as a form input value. */
            value?: string;
        }
        interface MessageContent {
            /**
             * Items attached to this message, such as photos. This should *NOT* be set by clients. It will be automatically set from media uploaded along with this request and using the
             * information provided in existing_media.
             */
            attachment?: Attachment[];
            /** The text part of the message content. Segments are concatenated together to yield the full message. A message can have zero or more segments. */
            segment?: Segment[];
        }
        interface Metadata {
            /** The creation time for this document or object in the search result. */
            createTime?: string;
            /** Options that specify how to display a structured data search result. */
            displayOptions?: ResultDisplayMetadata;
            /** Indexed fields in structured data, returned as a generic named property. */
            fields?: NamedProperty[];
            /** Mime type of the search result. */
            mimeType?: string;
            /** Object type of the search result. */
            objectType?: string;
            /** Owner (usually creator) of the document or object of the search result. */
            owner?: Person;
            /** The named source for the result, such as Gmail. */
            source?: Source;
            /** The thumbnail URL of the result. */
            thumbnailUrl?: string;
            /**
             * The last modified date for the object in the search result. If not set in the item, the value returned here is empty. When `updateTime` is used for calculating freshness and is not
             * set, this value defaults to 2 years from the current time.
             */
            updateTime?: string;
        }
        interface Metaline {
            /** The list of displayed properties for the metaline. The maximum number of properties is 5. */
            properties?: DisplayedProperty[];
        }
        interface Name {
            /** The read-only display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header. */
            displayName?: string;
        }
        interface NamedProperty {
            booleanValue?: boolean;
            dateValues?: DateValues;
            doubleValues?: DoubleValues;
            enumValues?: EnumValues;
            htmlValues?: HtmlValues;
            integerValues?: IntegerValues;
            /**
             * The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this
             * property is 256 characters.
             */
            name?: string;
            objectValues?: ObjectValues;
            textValues?: TextValues;
            timestampValues?: TimestampValues;
        }
        interface OAuthConsumerProto {
            domain?: string;
        }
        interface ObjectDefinition {
            /**
             * The name for the object, which then defines its type. Item indexing requests should set the objectType field equal to this value. For example, if *name* is *Document*, then indexing
             * requests for items of type Document should set objectType equal to *Document*. Each object definition must be uniquely named within a schema. The name must start with a letter and
             * can only contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
             */
            name?: string;
            /** The optional object-specific options. */
            options?: ObjectOptions;
            /** The property definitions for the object. The maximum number of elements is 1000. */
            propertyDefinitions?: PropertyDefinition[];
        }
        interface ObjectDisplayOptions {
            /**
             * Defines the properties that are displayed in the metalines of the search results. The property values are displayed in the order given here. If a property holds multiple values, all
             * of the values are displayed before the next properties. For this reason, it is a good practice to specify singular properties before repeated properties in this list. All of the
             * properties must set is_returnable to true. The maximum number of metalines is 3.
             */
            metalines?: Metaline[];
            /**
             * The user friendly label to display in the search result to indicate the type of the item. This is OPTIONAL; if not provided, an object label isn't displayed on the context line of
             * the search results. The maximum length is 64 characters.
             */
            objectDisplayLabel?: string;
        }
        interface ObjectOptions {
            /** The options that determine how the object is displayed in the Cloud Search results page. */
            displayOptions?: ObjectDisplayOptions;
            /** The freshness options for an object. */
            freshnessOptions?: FreshnessOptions;
            /**
             * Operators that can be used to filter suggestions. For Suggest API, only operators mentioned here will be honored in the FilterOptions. Only TEXT and ENUM operators are supported.
             * NOTE: "objecttype", "type" and "mimetype" are already supported. This property is to configure schema specific operators. Even though this is an array, only one operator can be
             * specified. This is an array for future extensibility. Operators mapping to multiple properties within the same object are not supported. If the operator spans across different
             * object types, this option has to be set once for each object definition.
             */
            suggestionFilteringOperators?: string[];
        }
        interface ObjectPropertyOptions {
            /**
             * The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named
             * *street*, *city*, and *state*. The maximum number of elements is 1000.
             */
            subobjectProperties?: PropertyDefinition[];
        }
        interface ObjectValues {
            values?: StructuredDataObject[];
        }
        interface OnClick {
            action?: FormAction;
            /** This can be used as a short form for OpenLink with the default OpenAs and OnClose. It may be undeprecated if this proves to be handy for developers. */
            link?: string;
            openLink?: OpenLink;
            /**
             * An add-on triggers this action when the form action needs to open a link. This differs from the open_link above in that this needs to talk to server to get the link. Thus some
             * preparation work is required for web client to do before the open link action response comes back.
             */
            openLinkAction?: FormAction;
        }
        interface OpenLink {
            /** Next available ID: 5 */
            loadIndicator?: string;
            onClose?: string;
            openAs?: string;
            url?: string;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface OtrChatMessageEvent {
            expirationTimestampUsec?: string;
            kansasRowId?: string;
            kansasVersionInfo?: string;
            messageOtrStatus?: string;
        }
        interface OtrModificationEvent {
            newOtrStatus?: string;
            newOtrToggle?: string;
            oldOtrStatus?: string;
            oldOtrToggle?: string;
        }
        interface PackagingServiceClient {
            /** Android app's package name to generate the deep-link URI. */
            androidPackageName?: string;
            /** iOS app's App Store ID to generate the App Store URL when app is not installed on device. */
            iosAppStoreId?: string;
            /** iOS app's bundle ID to generate the deep-link URI. */
            iosBundleId?: string;
            /** Type of Google API Console client. */
            type?: string;
        }
        interface PaygateInfo {
            /** Time when client should show message that the call is ending soon. */
            callEndingSoonWarningTime?: string;
            /** Time when the call will end if the user does not upgrade (after in-call upgrade support check has been implemented). */
            callEndingTime?: string;
            /** This boolean is used by clients to decide whether the user should be shown promos to upgrade. */
            showUpgradePromos?: boolean;
        }
        interface PeopleSuggestion {
            /** Suggested person. All fields of the person object might not be populated. */
            person?: Person;
        }
        interface Person {
            /** The person's email addresses */
            emailAddresses?: EmailAddress[];
            /** The resource name of the person to provide information about. See [`People.get`](https://developers.google.com/people/api/rest/v1/people/get) from the Google People API. */
            name?: string;
            /** Obfuscated ID of a person. */
            obfuscatedId?: string;
            /** The person's name */
            personNames?: Name[];
            /** The person's phone numbers */
            phoneNumbers?: PhoneNumber[];
            /** A person's read-only photo. A picture shown next to the person's name to help others recognize the person in search results. */
            photos?: Photo[];
        }
        interface PhoneAccess {
            /** The phone number to dial for this meeting space in INTERNATIONAL format. Full phone number with a leading '+' character and whitespace separations. */
            formattedPhoneNumber?: string;
            /**
             * The BCP 47/LDML language code for the language associated with this phone access. To be parsed by the i18n LanguageCode utility. Examples: "es-419" for Latin American Spanish,
             * "fr-CA" for Canadian French.
             */
            languageCode?: string;
            /** The phone number to dial for this meeting space in E.164 format. Full phone number with a leading '+' character. */
            phoneNumber?: string;
            /** The PIN that users must enter after dialing the given number. The PIN consists of only decimal digits and the length may vary. */
            pin?: string;
            /** The CLDR/ISO 3166 region code for the country associated with this phone access. To be parsed by the i18n RegionCode utility. Example: "SE" for Sweden. */
            regionCode?: string;
        }
        interface PhoneNumber {
            /** The phone number of the person. */
            phoneNumber?: string;
            type?: string;
        }
        interface Photo {
            /** The URL of the photo. */
            url?: string;
        }
        interface PollItemsRequest {
            /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
            connectorName?: string;
            /** Common debug options. */
            debugOptions?: DebugOptions;
            /** Maximum number of items to return. The maximum value is 100 and the default value is 20. */
            limit?: number;
            /** Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters. */
            queue?: string;
            /** Limit the items polled to the ones with these statuses. */
            statusCodes?: string[];
        }
        interface PollItemsResponse {
            /**
             * Set of items from the queue available for connector to process. These items have the following subset of fields populated: version metadata.hash structured_data.hash content.hash
             * payload status queue
             */
            items?: Item[];
        }
        interface PostiniUserProto {
            postiniUserId?: string;
        }
        interface Presenter {
            /** The device resource name of the device which requested the current presenter to be set. This field can not be modified by clients. */
            byDeviceId?: string;
            /** The device resource names of other devices which can control the current presentation. */
            copresenterDeviceIds?: string[];
            /** The device resource name of the currently presenting device. */
            presenterDeviceId?: string;
        }
        interface Principal {
            /** This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID} */
            groupResourceName?: string;
            /** This principal is a Google Workspace user, group or domain. */
            gsuitePrincipal?: GSuitePrincipal;
            /** This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID} */
            userResourceName?: string;
        }
        interface PrincipalProto {
            /** scope = ALL_AUTHENTICATED_USERS */
            allAuthenticatedUsers?: any;
            /** scope = CAP_TOKEN_HOLDER */
            capTokenHolder?: CapTokenHolderProto;
            /** scope = CHAT */
            chat?: ChatProto;
            /** scope = CIRCLE */
            circle?: CircleProto;
            /** scope = CLOUD_PRINCIPAL */
            cloudPrincipal?: CloudPrincipalProto;
            /** scope = CONTACT_GROUP */
            contactGroup?: ContactGroupProto;
            /** scope = EMAIL_OWNER */
            emailOwner?: EmailOwnerProto;
            /** scope = EVENT */
            event?: EventProto;
            /** scope = GAIA_GROUP */
            gaiaGroup?: GaiaGroupProto;
            /** scope = GAIA_USER */
            gaiaUser?: GaiaUserProto;
            /** scope = HOST */
            host?: HostProto;
            /** scope = LDAP_GROUP */
            ldapGroup?: LdapGroupProto;
            /** scope = LDAP_USER */
            ldapUser?: LdapUserProto;
            /** scope = MDB_GROUP */
            mdbGroup?: MdbGroupProto;
            /** scope = MDB_USER */
            mdbUser?: MdbUserProto;
            /** scope = OAUTH_CONSUMER; */
            oauthConsumer?: OAuthConsumerProto;
            /** scope = POSTINI_USER */
            postiniUser?: PostiniUserProto;
            /** scope = RBAC_ROLE */
            rbacRole?: RbacRoleProto;
            /** scope = RBAC_SUBJECT */
            rbacSubject?: RbacSubjectProto;
            /** scope = RESOURCE_ROLE */
            resourceRole?: ResourceRoleProto;
            /** This is only optional because required enums cannot be extended. Currently required. */
            scope?: string;
            /** scope = SIGNING_KEY_POSSESSOR */
            signingKeyPossessor?: SigningKeyPossessorProto;
            /** scope = SIMPLE_SECRET_HOLDER */
            simpleSecretHolder?: SimpleSecretHolderProto;
            /** scope = SOCIAL_GRAPH_NODE */
            socialGraphNode?: SocialGraphNodeProto;
            /** scope = SQUARE */
            square?: SquareProto;
            /** scope = YOUTUBE_USER */
            youtubeUser?: YoutubeUserProto;
            /** scope = ZWIEBACK_SESSION */
            zwiebackSession?: ZwiebackSessionProto;
        }
        interface ProcessingError {
            /** Error code indicating the nature of the error. */
            code?: string;
            /** The description of the error. */
            errorMessage?: string;
            /** In case the item fields are invalid, this field contains the details about the validation errors. */
            fieldViolations?: FieldViolation[];
        }
        interface PropertyDefinition {
            booleanPropertyOptions?: BooleanPropertyOptions;
            datePropertyOptions?: DatePropertyOptions;
            /** The options that determine how the property is displayed in the Cloud Search results page if it's specified to be displayed in the object's display options. */
            displayOptions?: PropertyDisplayOptions;
            doublePropertyOptions?: DoublePropertyOptions;
            enumPropertyOptions?: EnumPropertyOptions;
            htmlPropertyOptions?: HtmlPropertyOptions;
            integerPropertyOptions?: IntegerPropertyOptions;
            /**
             * Indicates that the property can be used for generating facets. Cannot be true for properties whose type is object. IsReturnable must be true to set this option. Only supported for
             * boolean, enum, and text properties.
             */
            isFacetable?: boolean;
            /**
             * Indicates that multiple values are allowed for the property. For example, a document only has one description but can have multiple comments. Cannot be true for properties whose
             * type is a boolean. If set to false, properties that contain more than one value cause the indexing request for that item to be rejected.
             */
            isRepeatable?: boolean;
            /**
             * Indicates that the property identifies data that should be returned in search results via the Query API. If set to *true*, indicates that Query API users can use matching property
             * fields in results. However, storing fields requires more space allocation and uses more bandwidth for search queries, which impacts performance over large datasets. Set to *true*
             * here only if the field is needed for search results. Cannot be true for properties whose type is an object.
             */
            isReturnable?: boolean;
            /**
             * Indicates that the property can be used for sorting. Cannot be true for properties that are repeatable. Cannot be true for properties whose type is object. IsReturnable must be true
             * to set this option. Only supported for boolean, date, double, integer, and timestamp properties.
             */
            isSortable?: boolean;
            /** Indicates that the property can be used for generating query suggestions. */
            isSuggestable?: boolean;
            /**
             * Indicates that users can perform wildcard search for this property. Only supported for Text properties. IsReturnable must be true to set this option. In a given datasource maximum
             * of 5 properties can be marked as is_wildcard_searchable.
             */
            isWildcardSearchable?: boolean;
            /**
             * The name of the property. Item indexing requests sent to the Indexing API should set the property name equal to this value. For example, if name is *subject_line*, then indexing
             * requests for document items with subject fields should set the name for that field equal to *subject_line*. Use the name as the identifier for the object property. Once registered
             * as a property for an object, you cannot re-use this name for another property within that object. The name must start with a letter and can only contain letters (A-Z, a-z) or
             * numbers (0-9). The maximum length is 256 characters.
             */
            name?: string;
            objectPropertyOptions?: ObjectPropertyOptions;
            textPropertyOptions?: TextPropertyOptions;
            timestampPropertyOptions?: TimestampPropertyOptions;
        }
        interface PropertyDisplayOptions {
            /**
             * The user friendly label for the property that is used if the property is specified to be displayed in ObjectDisplayOptions. If provided, the display label is shown in front of the
             * property values when the property is part of the object display options. For example, if the property value is '1', the value by itself may not be useful context for the user. If
             * the display name given was 'priority', then the user sees 'priority : 1' in the search results which provides clear context to search users. This is OPTIONAL; if not given, only the
             * property values are displayed. The maximum length is 64 characters.
             */
            displayLabel?: string;
        }
        interface Provenance {
            /** Annotation blob from Annotation Service. */
            annotationBlob?: string;
            /** Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a rel="canonical" link tag was provided in the retrieved web page. */
            canonicalUrl?: string;
            /**
             * The url originally passed in the PRS request, which should be used to re-discover the content. Note that this URL may be a forwarding service or link shortener (bit.ly), so it
             * should not be assumed to be canonical, but should be used for navigation back to the original source of the itemscope.
             */
            inputUrl?: string;
            /**
             * Contains exact types as parsed, whether or not we recognized that type at parse time. If an itemscope is created by merging SchemaOrg markup and open graph markup then the first
             * itemtype would be schemaorg type, the second would be open graph and so on. example: http://schema.org/VideoObject, og:video.movie Plain text; usually a URL
             */
            itemtype?: string[];
            /** The server retrieved timestamp (in msec). */
            retrievedTimestampMsec?: string;
            /** The final URL that was the actual source of the itemscope, after any redirects. */
            retrievedUrl?: string;
        }
        interface PushItem {
            /**
             * Content hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in
             * argument error. The maximum length is 2048 characters.
             */
            contentHash?: string;
            /**
             * The metadata hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results in
             * argument error. The maximum length is 2048 characters.
             */
            metadataHash?: string;
            /** Provides additional document state information for the connector, such as an alternate repository ID and other metadata. The maximum length is 8192 bytes. */
            payload?: string;
            /** Queue to which this item belongs. The `default` queue is chosen if this field is not specified. The maximum length is 512 characters. */
            queue?: string;
            /**
             * Populate this field to store Connector or repository error details. This information is displayed in the Admin Console. This field may only be populated when the Type is
             * REPOSITORY_ERROR.
             */
            repositoryError?: RepositoryError;
            /**
             * Structured data hash of the item according to the repository. If specified, this is used to determine how to modify this item's status. Setting this field and the type field results
             * in argument error. The maximum length is 2048 characters.
             */
            structuredDataHash?: string;
            /** The type of the push operation that defines the push behavior. */
            type?: string;
        }
        interface PushItemRequest {
            /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
            connectorName?: string;
            /** Common debug options. */
            debugOptions?: DebugOptions;
            /** Item to push onto the queue. */
            item?: PushItem;
        }
        interface QueryCountByStatus {
            count?: string;
            /** This represents the http status code. */
            statusCode?: number;
        }
        interface QueryInterpretation {
            interpretationType?: string;
            /**
             * The interpretation of the query used in search. For example, queries with natural language intent like "email from john" will be interpreted as "from:john source:mail". This field
             * will not be filled when the reason is NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.
             */
            interpretedQuery?: string;
            /** The reason for interpretation of the query. This field will not be UNSPECIFIED if the interpretation type is not NONE. */
            reason?: string;
        }
        interface QueryInterpretationConfig {
            /**
             * Set this flag to disable supplemental results retrieval, setting a flag here will not retrieve supplemental results for queries associated with a given search application. If this
             * flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation for
             * supplemental results.
             */
            forceDisableSupplementalResults?: boolean;
            /**
             * Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental results retrieval, and usage of synonyms including custom
             * ones. If this flag is set to True, it will take precedence over the option set at Query level. For the default value of False, query level flag will set the correct interpretation
             * for verbatim mode.
             */
            forceVerbatimMode?: boolean;
        }
        interface QueryInterpretationOptions {
            /**
             * Flag to disable natural language (NL) interpretation of queries. Default is false, Set to true to disable natural language interpretation. NL interpretation only applies to
             * predefined datasources.
             */
            disableNlInterpretation?: boolean;
            /** Use this flag to disable supplemental results for a query. Supplemental results setting chosen at SearchApplication level will take precedence if set to True. */
            disableSupplementalResults?: boolean;
            /**
             * Enable this flag to turn off all internal optimizations like natural language (NL) interpretation of queries, supplemental result retrieval, and usage of synonyms including custom
             * ones. Nl interpretation will be disabled if either one of the two flags is true.
             */
            enableVerbatimMode?: boolean;
        }
        interface QueryItem {
            /** True if the text was generated by means other than a previous user search. */
            isSynthetic?: boolean;
        }
        interface QueryOperator {
            /** Display name of the operator */
            displayName?: string;
            /** Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator. */
            enumValues?: string[];
            /** Indicates the operator name that can be used to isolate the property using the greater-than operator. */
            greaterThanOperatorName?: string;
            /** Can this operator be used to get facets. */
            isFacetable?: boolean;
            /** Indicates if multiple values can be set for this property. */
            isRepeatable?: boolean;
            /** Will the property associated with this facet be returned as part of search results. */
            isReturnable?: boolean;
            /** Can this operator be used to sort results. */
            isSortable?: boolean;
            /** Can get suggestions for this field. */
            isSuggestable?: boolean;
            /** Indicates the operator name that can be used to isolate the property using the less-than operator. */
            lessThanOperatorName?: string;
            /** The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators. */
            objectType?: string;
            /** The name of the operator. */
            operatorName?: string;
            /** The type of the operator. */
            type?: string;
        }
        interface QuerySource {
            /** Display name of the data source. */
            displayName?: string;
            /** List of all operators applicable for this source. */
            operators?: QueryOperator[];
            /** A short name or alias for the source. This value can be used with the 'source' operator. */
            shortName?: string;
            /** The name of the source */
            source?: Source;
        }
        // tslint:disable-next-line:no-empty-interface
        interface QuerySuggestion {
        }
        interface RbacRoleProto {
            name?: string;
            objectId?: string;
            /** DEPRECATED as of 01.11.2019 */
            rbacNamespace?: string;
            /** Format: "RbacNamespaceName.RbacRoleName(/field=value)*", e.g., "hr.v1.Reader", "hr.v1.Reader/language=EN_US/country=USA/room=NYC-9th-11A201". */
            rbacRoleName?: string;
        }
        interface RbacSubjectProto {
            /** Format "username" without "@domain", e.g., "bogdand". */
            username?: string;
        }
        interface ReactionInfo {
            /** Unicode string representing a single emoji. */
            emoji?: string;
        }
        interface RecordingEvent {
            /** The initiator of the latest event of the recording. It will be set for all user events (`type` is 100-199) and unset for all server events (`type` is 200-299). */
            deviceId?: string;
            /** The type of event. */
            type?: string;
        }
        interface RecordingInfo {
            /**
             * The latest recording event. This can be used by clients to help explain what is going on, why recording stopped, etc. This will always be set if there is or was an active recording,
             * which means there can be latest event when recording is INACTIVE.
             */
            latestRecordingEvent?: RecordingEvent;
            /** The display name of the owner of the recording output. Email notifications about uploaded recordings will also be sent to this owner. */
            ownerDisplayName?: string;
            /**
             * The device resource name of the producer device for the currently active recording. Note that, after the producer drops/leaves the conference, this field will be cleaned up by the
             * server after a delay.
             */
            producerDeviceId?: string;
            /** The application type of the current active recording. `RECORDING_APPLICATION_TYPE_UNSPECIFIED` if `recording_status` is inactive. */
            recordingApplicationType?: string;
            /** An identifier for the current recording, if any. This is returned whenever recording_status is either `RECORDING_STARTING` or `RECORDING_STARTED`. */
            recordingId?: string;
            /** The current status of the recording. This can be used by clients to show a recording dot or similar to indicated to the user that a recording is taking place. */
            recordingStatus?: string;
        }
        interface RecordingSessionInfo {
            /** Input only. Deprecated field, should not be used. */
            ownerEmail?: string;
            /** A unique server-generated ID for the recording session. */
            recordingSessionId?: string;
            /** Recording session's state information. */
            sessionStateInfo?: SessionStateInfo;
        }
        interface RenameEvent {
            newName?: string;
            originalName?: string;
        }
        interface RepositoryError {
            /** Message that describes the error. The maximum allowable length of the message is 8192 characters. */
            errorMessage?: string;
            /** Error codes. Matches the definition of HTTP status codes. */
            httpStatusCode?: number;
            /** The type of error. */
            type?: string;
        }
        interface RequestOptions {
            /** Debug options of the request */
            debugOptions?: DebugOptions;
            /**
             * The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this field
             * using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified, the
             * documents in search results are biased towards the specified language. The suggest API does not use this parameter. Instead, suggest autocompletes only based on characters in the
             * query.
             */
            languageCode?: string;
            /** The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922). */
            searchApplicationId?: string;
            /**
             * Current user's time zone id, such as "America/Los_Angeles" or "Australia/Sydney". These IDs are defined by [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/)
             * project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used to correctly interpret date and time
             * queries. If this field is not specified, the default time zone (UTC) is used.
             */
            timeZone?: string;
        }
        interface ResetSearchApplicationRequest {
            /** Common debug options. */
            debugOptions?: DebugOptions;
        }
        interface ResourceRoleProto {
            applicationId?: string;
            objectId?: string;
            objectPart?: string;
            roleId?: number;
        }
        interface ResponseDebugInfo {
            /** General debug info formatted for display. */
            formattedDebugInfo?: string;
        }
        interface RestrictItem {
            driveFollowUpRestrict?: DriveFollowUpRestrict;
            driveLocationRestrict?: DriveLocationRestrict;
            /** Drive Types. */
            driveMimeTypeRestrict?: DriveMimeTypeRestrict;
            driveTimeSpanRestrict?: DriveTimeSpanRestrict;
            /** The search restrict (e.g. "after:2017-09-11 before:2017-09-12"). */
            searchOperator?: string;
        }
        interface ResultCounts {
            /** Result count information for each source with results. */
            sourceResultCounts?: SourceResultCount[];
        }
        interface ResultDebugInfo {
            /** General debug info formatted for display. */
            formattedDebugInfo?: string;
        }
        interface ResultDisplayField {
            /** The display label for the property. */
            label?: string;
            /** The operator name of the property. */
            operatorName?: string;
            /** The name value pair for the property. */
            property?: NamedProperty;
        }
        interface ResultDisplayLine {
            fields?: ResultDisplayField[];
        }
        interface ResultDisplayMetadata {
            /** The metalines content to be displayed with the result. */
            metalines?: ResultDisplayLine[];
            /** The display label for the object. */
            objectTypeLabel?: string;
        }
        interface RetrievalImportance {
            /** Indicates the ranking importance given to property when it is matched during retrieval. Once set, the token importance of a property cannot be changed. */
            importance?: string;
        }
        interface SafeUrlProto {
            /**
             * IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read
             * this message.
             */
            privateDoNotAccessOrElseSafeUrlWrappedValue?: string;
        }
        interface Schema {
            /** The list of top-level objects for the data source. The maximum number of elements is 10. */
            objectDefinitions?: ObjectDefinition[];
            /** IDs of the Long Running Operations (LROs) currently running for this schema. After modifying the schema, wait for operations to complete before indexing additional content. */
            operationIds?: string[];
        }
        interface ScoringConfig {
            /** Whether to use freshness as a ranking signal. By default, freshness is used as a ranking signal. Note that this setting is not available in the Admin UI. */
            disableFreshness?: boolean;
            /** Whether to personalize the results. By default, personal signals will be used to boost results. */
            disablePersonalization?: boolean;
        }
        interface SearchApplication {
            /** Retrictions applied to the configurations. The maximum number of elements is 10. */
            dataSourceRestrictions?: DataSourceRestriction[];
            /** The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above. */
            defaultFacetOptions?: FacetOptions[];
            /** The default options for sorting the search results */
            defaultSortOptions?: SortOptions;
            /** Display name of the Search Application. The maximum length is 300 characters. */
            displayName?: string;
            /** Indicates whether audit logging is on/off for requests made for the search application in query APIs. */
            enableAuditLog?: boolean;
            /** The name of the Search Application. Format: searchapplications/{application_id}. */
            name?: string;
            /** Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field. */
            operationIds?: string[];
            /** The default options for query interpretation */
            queryInterpretationConfig?: QueryInterpretationConfig;
            /** With each result we should return the URI for its thumbnail (when applicable) */
            returnResultThumbnailUrls?: boolean;
            /** Configuration for ranking results. */
            scoringConfig?: ScoringConfig;
            /** Configuration for a sources specified in data_source_restrictions. */
            sourceConfig?: SourceConfig[];
        }
        interface SearchApplicationQueryStats {
            /** The date for which query stats were calculated. Stats calculated on the next day close to midnight are returned. */
            date?: Date;
            queryCountByStatus?: QueryCountByStatus[];
        }
        interface SearchApplicationSessionStats {
            /** The date for which session stats were calculated. Stats are calculated on the following day, close to midnight PST, and then returned. */
            date?: Date;
            /** The count of search sessions on the day */
            searchSessionsCount?: string;
        }
        interface SearchApplicationUserStats {
            /** The date for which session stats were calculated. Stats calculated on the next day close to midnight are returned. */
            date?: Date;
            /** The count of unique active users in the past one day */
            oneDayActiveUsersCount?: string;
            /** The count of unique active users in the past seven days */
            sevenDaysActiveUsersCount?: string;
            /** The count of unique active users in the past thirty days */
            thirtyDaysActiveUsersCount?: string;
        }
        interface SearchItemsByViewUrlRequest {
            /** Common debug options. */
            debugOptions?: DebugOptions;
            /** The next_page_token value returned from a previous request, if any. */
            pageToken?: string;
            /** Specify the full view URL to find the corresponding item. The maximum length is 2048 characters. */
            viewUrl?: string;
        }
        interface SearchItemsByViewUrlResponse {
            items?: Item[];
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
        }
        interface SearchQualityMetadata {
            /** An indication of the quality of the item, used to influence search quality. Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The default value is 0.0. */
            quality?: number;
        }
        interface SearchRequest {
            /** Context attributes for the request which will be used to adjust ranking of search results. The maximum number of elements is 10. */
            contextAttributes?: ContextAttribute[];
            /** The sources to use for querying. If not specified, all data sources from the current search application are used. */
            dataSourceRestrictions?: DataSourceRestriction[];
            facetOptions?: FacetOptions[];
            /**
             * Maximum number of search results to return in one page. Valid values are between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when results beyond 2000 are
             * requested.
             */
            pageSize?: number;
            /** The raw query string. See supported search operators in the [Narrow your search with operators](https://support.google.com/cloudsearch/answer/6172299) */
            query?: string;
            /** Options to interpret the user query. */
            queryInterpretationOptions?: QueryInterpretationOptions;
            /** Request options, such as the search application and user timezone. */
            requestOptions?: RequestOptions;
            /** The options for sorting the search results */
            sortOptions?: SortOptions;
            /** Starting index of the results. */
            start?: number;
        }
        interface SearchResponse {
            /** Debugging information about the response. */
            debugInfo?: ResponseDebugInfo;
            /** Error information about the response. */
            errorInfo?: ErrorInfo;
            /** Repeated facet results. */
            facetResults?: FacetResult[];
            /** Whether there are more search results matching the query. */
            hasMoreResults?: boolean;
            /** Query interpretation result for user query. Empty if query interpretation is disabled. */
            queryInterpretation?: QueryInterpretation;
            /** The estimated result count for this query. */
            resultCountEstimate?: string;
            /** The exact result count for this query. */
            resultCountExact?: string;
            /** Expanded result count information. */
            resultCounts?: ResultCounts;
            /** Results from a search query. */
            results?: SearchResult[];
            /** Suggested spelling for the query. */
            spellResults?: SpellResult[];
            /** Structured results for the user query. These results are not counted against the page_size. */
            structuredResults?: StructuredResult[];
        }
        interface SearchResult {
            /**
             * If source is clustered, provide list of clustered results. There will only be one level of clustered results. If current source is not enabled for clustering, this field will be
             * empty.
             */
            clusteredResults?: SearchResult[];
            /** Debugging information about this search result. */
            debugInfo?: ResultDebugInfo;
            /** Metadata of the search result. */
            metadata?: Metadata;
            /** The concatenation of all snippets (summaries) available for this result. */
            snippet?: Snippet;
            /** Title of the search result. */
            title?: string;
            /** The URL of the search result. The URL contains a Google redirect to the actual item. This URL is signed and shouldn't be changed. */
            url?: string;
        }
        interface Section {
            /** Indicating whether this section is collapsable. If a section is collapsable, the description must be given. */
            collapsable?: boolean;
            /** The header of the section, text formatted supported. */
            description?: string;
            /**
             * The number of uncollapsable widgets. For example, when a section contains 5 widgets and the num_uncollapsable_widget are set to be 2, The first 2 widgets will always shown and the
             * last 3 is collapsed as default. Only when collapsable is set to be true, the num_uncollapsable_widget will be taken into account.
             */
            numUncollapsableWidgets?: number;
            /** A section must contain at least 1 widget. */
            widgets?: WidgetMarkup[];
        }
        interface Segment {
            /** Formatting to be applied when rendering the Segment. For all segment types, this is the standard way of representing that the Segment should be rendered in bold, italics, etc. */
            formatting?: Formatting;
            /** For HASHTAG type: */
            hashtagData?: HashtagData;
            /** Type-specific metadata. At most one of these should be populated, and the one that is populated should correspond to the type of the Segment. For LINK type: */
            linkData?: LinkData;
            /**
             * Text content of the Segment. As a general rule, this field should contain the actual text that should be rendered in the UI. Thus, for a hashtag, it should be "#Foo", and for a
             * link, it should be the display text. Clients that do not understand a particular segment type may use this text, along with the Formatting info below, as a fallback for display. The
             * field is not required -- if all relevant information is carried in other metadata fields and there is no need for a fallback, or it is not practical for a fallback to be provided
             * for any other reason, the field may be left blank. A standard example would be a user reference being transmitted between server layers, where a gaia-ID representation may be
             * sufficient and there is no need for a textual fallback. In such a case, it would be valid and useful - though not required - for servers to compute and populate a fallback on the
             * serving path.
             */
            text?: string;
            /** Type of Segment. */
            type?: string;
            /** For USER_MENTION type: */
            userMentionData?: UserMentionData;
        }
        interface SelectionControl {
            /** For radio button, at most one of the items will be selected. */
            items?: SelectionItem[];
            /** Label used to be displayed ahead of the selection control. It is optional. */
            label?: string;
            /** The name of the text field which is will be used in FormInput. */
            name?: string;
            /** If specified, form is submitted when selection changed. If not specified, developer will need to specify a separate button. */
            onChange?: FormAction;
            type?: string;
        }
        interface SelectionItem {
            /** If more than one items are selected for RADIO_BUTTON and DROPDOWN, the first selected item is treated as sElected and the after ones are all ignored. */
            selected?: boolean;
            /** The text to be displayed. */
            text?: string;
            /** The value associated with this item which will be sent back to app scripts. Client should use as a form input value. */
            value?: string;
        }
        interface SessionEvent {
            /** The initiator of the latest event of the streaming session. It will be set for all user events (`type` is 100-199) and unset for all server events(`type` is 200-299). */
            deviceId?: string;
            /** The type of event. */
            type?: string;
        }
        interface SessionStateInfo {
            /** Output only. The ack info of the session. */
            ackInfo?: AckInfo;
            /** Immutable. The language configuration used by this session. When empty, captions will be disabled. It's a required field for transcription sessions. */
            languageConfig?: LanguageConfig;
            /** Output only. The device id of the actor is set if the current state is a result of a user action, is empty otherwise. */
            lastActorDeviceId?: string;
            /**
             * Output only. The max end time of the session, at this time the session will be force stopped/terminated. Clients are expected to use this timestamp to warn users about the force
             * stop.
             */
            maxEndTime?: string;
            /** State of the session. */
            sessionState?: string;
            /** Output only. The reason the session was transitioned to STOPPED state. */
            sessionStopReason?: string;
        }
        interface Settings {
            /** The access lock of the meeting space that lets owner control who can join the meeting. True if the access lock feature is enabled for the meeting space. */
            accessLock?: boolean;
            /** Whether attendance report is enabled for the meeting space. */
            attendanceReportEnabled?: boolean;
            /** The chat lock of the meeting space that lets owner control whether the participants can send chat messages. True if the chat lock feature is enabled for the meeting space. */
            chatLock?: boolean;
            /** Whether meeting artifacts will be shared with co-hosts. */
            cohostArtifactSharingEnabled?: boolean;
            /** Whether Client-side Encryption is enabled for the meeting space. */
            cseEnabled?: boolean;
            /** Whether the default role is viewer or not. */
            defaultAsViewer?: boolean;
            /** Indicates whether the meeting space is moderated. go/meet-multimod-dd */
            moderationEnabled?: boolean;
            /** The present lock of the meeting space that lets owner control whether the participants can present their screen. True if the present lock feature is enabled for the meeting space. */
            presentLock?: boolean;
            /** The reactions lock of the meeting space that lets owner control whether the participants can send reactions. True if the reactions lock feature is enabled for the meeting space. */
            reactionsLock?: boolean;
        }
        interface ShareScope {
            /** If scope is DOMAIN, this field contains the dasher domain, for example "google.com". */
            domain?: string;
            /** The scope to which the content was shared. */
            scope?: string;
        }
        interface SigningKeyPossessorProto {
            /** This value must be from the KeyMetadata.Type enum in keymaster.proto. */
            keymasterKeyType?: number;
            /** The actual verification key bytes corresponding to the above type. */
            serializedVerificationKey?: string;
            /**
             * The binary serialized Keymaster SerializedReader of a public keyset. The keyset must contain exactly one key. N.B.: If this field is populated, serialized_verification_key should be
             * set to the empty string and keymaster_key_type should be set to zero.
             */
            serializedVerificationKeyset?: string;
        }
        interface SimpleSecretHolderProto {
            /** A descriptive label to help identify a relevant ACL entry or otherwise disambiguate this instance. */
            label?: SimpleSecretLabelProto;
        }
        interface SimpleSecretLabelProto {
            /**
             * ***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a
             * SimpleSecretHolder Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL. When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is
             * NOT necessary to fill in |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for one associated with the token given by the SimpleSecret's
             * secret data. If |capability_id| is specified, though, then the Authenticator will only be accepted if it actually matches that particular token ID.
             */
            capabilityId?: number;
            /** Used when type = GENERIC_SECRET */
            genericLabel?: string;
            /** Used when type == INVITE. */
            inviteId?: string;
            /** This is optional because required enums cannot be extended. */
            type?: string;
        }
        interface Snippet {
            /** The matched ranges in the snippet. */
            matchRanges?: MatchRange[];
            /** The snippet of the document. The snippet of the document. May contain escaped HTML character that should be unescaped prior to rendering. */
            snippet?: string;
        }
        interface SocialGraphNodeProto {
            /** The fields from ccc/socialgraph/socialgraphnode.proto:SgnNode that uniquely identify a social graph node. The 'ident' field is not included here because its value can be changed. */
            sgnDomain?: string;
            sgnPk?: string;
        }
        interface SortOptions {
            /** The name of the operator corresponding to the field to sort on. The corresponding property must be marked as sortable. */
            operatorName?: string;
            /** Ascending is the default sort order */
            sortOrder?: string;
        }
        interface Source {
            /** Source name for content indexed by the Indexing API. */
            name?: string;
            /** Predefined content source for Google Apps. */
            predefinedSource?: string;
        }
        interface SourceConfig {
            /** The crowding configuration for the source. */
            crowdingConfig?: SourceCrowdingConfig;
            /** The scoring configuration for the source. */
            scoringConfig?: SourceScoringConfig;
            /** The source for which this configuration is to be used. */
            source?: Source;
        }
        interface SourceCrowdingConfig {
            /**
             * Maximum number of results allowed from a datasource in a result page as long as results from other sources are not exhausted. Value specified must not be negative. A default value
             * is used if this value is equal to 0. To disable crowding, set the value greater than 100.
             */
            numResults?: number;
            /** Maximum number of suggestions allowed from a source. No limits will be set on results if this value is less than or equal to 0. */
            numSuggestions?: number;
        }
        interface SourceResultCount {
            /** Whether there are more search results for this source. */
            hasMoreResults?: boolean;
            /** The estimated result count for this source. */
            resultCountEstimate?: string;
            /** The exact result count for this source. */
            resultCountExact?: string;
            /** The source the result count information is associated with. */
            source?: Source;
        }
        interface SourceScoringConfig {
            /** Importance of the source. */
            sourceImportance?: string;
        }
        interface SpellResult {
            /** The suggested spelling of the query. */
            suggestedQuery?: string;
        }
        interface SquareProto {
            /**
             * The type of Square members to consider, e.g. "all members" vs. "owners" vs. "admins". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType
             * enum options in social/graph/storage/proto/id.proto. See square.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types
             * associated with square. Currently required.
             */
            memberType?: number;
            /** Currently required. */
            squareId?: string;
        }
        interface StartUploadItemRequest {
            /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
            connectorName?: string;
            /** Common debug options. */
            debugOptions?: DebugOptions;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface StoredParticipantId {
            gaiaId?: string;
        }
        interface StreamingSessionInfo {
            /** The application type of the current streaming session. */
            applicationType?: string;
            /**
             * The latest streaming session event. This can be used by clients to help explain what is going on, why recording stopped, etc. This will always be set to a valid event and consistent
             * with the status. It can be set when current session is inactive to indicate latest event that makes current session to become inactive.
             */
            latestSessionEvent?: SessionEvent;
            /**
             * The display name of the owner of the recording output. It's only set when there will be uploaded recordings. Currently, it's only set when application type is RECORDING or
             * GLIVE_STREAM.
             */
            ownerDisplayName?: string;
            /** This is the REST name and unique identifier of this streaming session and has the form `spaces//recordings/` This is returned whenever status is either `STARTING` or `STARTED`. */
            sessionId?: string;
            /** The current status of this streaming session. This can be used by clients to show session status indicator and/or notification. */
            status?: string;
            /** When true, this recording may be used for training new transcription models. */
            trainingEnabled?: boolean;
            /** The policy that controls who can view the broadcast. This setting applies for broadcast session. */
            viewerAccessPolicy?: string;
            /** Contains information about viewers of the livestream. It is only set when application type is BROADCAST. */
            viewerStats?: StreamViewerStats;
        }
        interface StreamViewerStats {
            /** The estimate of the current viewer count. */
            estimatedViewerCount?: string;
        }
        interface StructuredDataObject {
            /** The properties for the object. The maximum number of elements is 1000. */
            properties?: NamedProperty[];
        }
        interface StructuredResult {
            /** Representation of a person */
            person?: Person;
        }
        interface SuggestRequest {
            /**
             * The sources to use for suggestions. If not specified, the data sources are taken from the current search application. NOTE: Suggestions are only supported for the following sources:
             * * Third-party data sources * PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE
             */
            dataSourceRestrictions?: DataSourceRestriction[];
            /** Partial query for which autocomplete suggestions will be shown. For example, if the query is "sea", then the server might return "season", "search", "seagull" and so on. */
            query?: string;
            /** Request options, such as the search application and user timezone. */
            requestOptions?: RequestOptions;
        }
        interface SuggestResponse {
            /** List of suggestions. */
            suggestResults?: SuggestResult[];
        }
        interface SuggestResult {
            /** This is present when the suggestion indicates a person. It contains more information about the person - like their email ID, name etc. */
            peopleSuggestion?: PeopleSuggestion;
            /** This field will be present if the suggested query is a word/phrase completion. */
            querySuggestion?: any;
            /** The source of the suggestion. */
            source?: Source;
            /** The suggested query that will be used for search, when the user clicks on the suggestion */
            suggestedQuery?: string;
        }
        interface SwitchWidget {
            controlType?: string;
            /** The name of the switch widget which is will be used in FormInput. */
            name?: string;
            onChange?: FormAction;
            selected?: boolean;
            /** The value is what is passed back in apps script callback. */
            value?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface TasksMetadata {
        }
        interface TextButton {
            /** The alternative text used for accessibility Next field number: 7. */
            altText?: string;
            /** Optional color of the button's background in RAISE mode. The default is the secondary color from addon's manifest. */
            backgroundColor?: string;
            disabled?: boolean;
            onClick?: OnClick;
            style?: string;
            /** Text color can be set via HTML markup. */
            text?: string;
        }
        interface TextField {
            /** The initial set of auto complete items without any user input. */
            autoComplete?: AutoComplete;
            /**
             * The refresh function which returns AutoComplete based on the user's input text. If the callback is not specified, auto complete will be purely done in client side based on the
             * auto_complete items.
             */
            autoCompleteCallback?: FormAction;
            /** When set to true, a user can input multiple auto-complet items. */
            autoCompleteMultipleSelections?: boolean;
            hintText?: string;
            /** One of label or hint_text is required to be specified by the developers. */
            label?: string;
            maxLines?: number;
            /** The name of the text field which is will be used in FormInput. */
            name?: string;
            onChange?: FormAction;
            type?: string;
            /** The default value when no input from user. */
            value?: string;
        }
        interface TextKeyValue {
            key?: string;
            onClick?: OnClick;
            text?: string;
        }
        interface TextOperatorOptions {
            /**
             * If true, the text value is tokenized as one atomic value in operator searches and facet matches. For example, if the operator name is "genre" and the value is "science-fiction" the
             * query restrictions "genre:science" and "genre:fiction" doesn't match the item; "genre:science-fiction" does. Text value matching is case-sensitive and does not remove special
             * characters. If false, the text is tokenized. For example, if the value is "science-fiction" the queries "genre:science" and "genre:fiction" matches the item.
             */
            exactMatchWithOperator?: boolean;
            /**
             * Indicates the operator name required in the query in order to isolate the text property. For example, if operatorName is *subject* and the property's name is *subjectLine*, then
             * queries like *subject:<value>* show results only where the value of the property named *subjectLine* matches *<value>*. By contrast, a search that uses the same *<value>* without an
             * operator returns all items where *<value>* matches the value of any text properties or text within the content field for the item. The operator name can only contain lowercase
             * letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface TextParagraph {
            text?: string;
        }
        interface TextPropertyOptions {
            /** If set, describes how the property should be used as a search operator. */
            operatorOptions?: TextOperatorOptions;
            /** Indicates the search quality importance of the tokens within the field when used for retrieval. */
            retrievalImportance?: RetrievalImportance;
        }
        interface TextValues {
            /** The maximum allowable length for text values is 2048 characters. */
            values?: string[];
        }
        interface TimestampOperatorOptions {
            /**
             * Indicates the operator name required in the query in order to isolate the timestamp property using the greater-than operator. For example, if greaterThanOperatorName is
             * *closedafter* and the property's name is *closeDate*, then queries like *closedafter:<value>* show results only where the value of the property named *closeDate* is later than
             * *<value>*. The operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            greaterThanOperatorName?: string;
            /**
             * Indicates the operator name required in the query in order to isolate the timestamp property using the less-than operator. For example, if lessThanOperatorName is *closedbefore* and
             * the property's name is *closeDate*, then queries like *closedbefore:<value>* show results only where the value of the property named *closeDate* is earlier than *<value>*. The
             * operator name can only contain lowercase letters (a-z). The maximum length is 32 characters.
             */
            lessThanOperatorName?: string;
            /**
             * Indicates the operator name required in the query in order to isolate the timestamp property. For example, if operatorName is *closedon* and the property's name is *closeDate*, then
             * queries like *closedon:<value>* show results only where the value of the property named *closeDate* matches *<value>*. By contrast, a search that uses the same *<value>* without an
             * operator returns all items where *<value>* matches the value of any String properties or text within the content field for the item. The operator name can only contain lowercase
             * letters (a-z). The maximum length is 32 characters.
             */
            operatorName?: string;
        }
        interface TimestampPropertyOptions {
            /** If set, describes how the timestamp should be used as a search operator. */
            operatorOptions?: TimestampOperatorOptions;
        }
        interface TimestampValues {
            values?: string[];
        }
        interface Toolbar {
            /** Background color of the toolbar in RBG hex representation. */
            color?: string;
            iconUrl?: string;
            name?: string;
        }
        interface TranscriptionSessionInfo {
            /** Transcription session's state information. */
            sessionStateInfo?: SessionStateInfo;
            /** A unique server-generated ID for the transcription session. */
            transcriptionSessionId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface TransientData {
        }
        interface TrustedResourceUrlProto {
            /**
             * IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read
             * this message.
             */
            privateDoNotAccessOrElseTrustedResourceUrlWrappedValue?: string;
        }
        interface TypeInfo {
            /** Contains additional video information only if document_type is VIDEO. */
            videoInfo?: VideoInfo;
        }
        interface UniversalPhoneAccess {
            /**
             * The PIN that users must enter after dialing a universal number. The pin consists of only decimal digits and the length may vary, though it generally is longer than a
             * PhoneAccess.pin.
             */
            pin?: string;
            /**
             * This field has the same contents as the MeetingSpace.more_join_url field, and is included for compatibility reasons. Clients should use the other field instead. This field is
             * deprecated and will be removed.
             */
            pstnInfoUrl?: string;
        }
        interface UnmappedIdentity {
            /** The resource name for an external user. */
            externalIdentity?: Principal;
            /** The resolution status for the external identity. */
            resolutionStatusCode?: string;
        }
        interface UnreserveItemsRequest {
            /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
            connectorName?: string;
            /** Common debug options. */
            debugOptions?: DebugOptions;
            /** The name of a queue to unreserve items from. */
            queue?: string;
        }
        interface UpdateDataSourceRequest {
            /** Common debug options. */
            debugOptions?: DebugOptions;
            source?: DataSource;
        }
        interface UpdateSchemaRequest {
            /** Common debug options. */
            debugOptions?: DebugOptions;
            /** The new schema for the source. */
            schema?: Schema;
            /** If true, the schema will be checked for validity, but will not be registered with the data source, even if valid. */
            validateOnly?: boolean;
        }
        interface UploadItemRef {
            /** The name of the content reference. The maximum length is 2048 characters. */
            name?: string;
        }
        interface UserDisplayInfo {
            /** The avatar to show for this user */
            avatarUrl?: string;
            /** The name to show for this user */
            displayName?: string;
        }
        interface UserInfo {
            /** Describes how updater_count_to_show should be used. */
            updaterCountDisplayType?: string;
            /** The number of updaters for clients to show depending on UpdaterCountDisplayType. */
            updaterCountToShow?: number;
            /** The email of the updater for clients to show used for Gmail items. */
            updaterToShowEmail?: string;
            /** The gaia id of the updater for clients to show used for Gmail items. If the updater is an external user, the email field below should be populated. */
            updaterToShowGaiaId?: string;
            /** The updater for clients to show used for Dynamite Chat items. */
            updaterToShowUserId?: AppsDynamiteUserId;
        }
        interface UserMentionData {
            email?: string;
            /** If the principal is backed by a gaia id, DO NOT use this field. Use user_gaia_id/user_id fields instead. */
            user?: PrincipalProto;
            /** An unobfuscated gaia ID: */
            userGaiaId?: string;
            /** An obfuscated gaia ID: */
            userId?: string;
        }
        interface Value {
            booleanValue?: boolean;
            dateValue?: Date;
            doubleValue?: number;
            integerValue?: string;
            stringValue?: string;
            timestampValue?: string;
        }
        interface ValueFilter {
            /**
             * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1.
             * `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query
             * filters the results for the property values that are greater than or less than the supplied value in the query.
             */
            operatorName?: string;
            /** The value to be compared with. */
            value?: Value;
        }
        interface VideoCallMetadata {
            meetingUrl?: string;
        }
        interface VideoInfo {
            /** Duration of the video in milliseconds. This field can be absent for recently uploaded video or inaccurate sometimes. */
            duration?: number;
        }
        interface VoicePhoneNumber {
            /** E.164 formatted full phone number with leading +. This field also represents encoded form of short telephone numbers in E.164 format. e.g. "911" is encoded as "+1911". */
            e164?: string;
            /** Additional data that could be added using the libphonenumber API. */
            i18nData?: VoicePhoneNumberI18nData;
        }
        interface VoicePhoneNumberI18nData {
            /**
             * The country calling code for this number, as defined by the ITU. For example, this would be 1 for NANPA countries, and 33 for France (for more info see
             * i18n.phonenumbers.PhoneNumber.country_code).
             */
            countryCode?: number;
            /** Display number formatted using the INTERNATIONAL format. */
            internationalNumber?: string;
            /** When present, indicates the number is valid according to the libphonenumber's isValidNumber API (see https://code.google.com/p/libphonenumber/). */
            isValid?: boolean;
            /** Display number formatted using the NATIONAL format. */
            nationalNumber?: string;
            /**
             * A region (country, territory, continent, etc), as defined by Unicode's "CLDR", itself based on ISO 3166 (UN country codes). For details, see
             * https://www.corp.google.com/~engdocs/java/com/google/i18n/identifiers/RegionCode.html
             */
            regionCode?: string;
            /** When set to a non-default value, indicates the validation reason that is set when phone number is invalid (is_valid is false). */
            validationResult?: string;
        }
        interface VPCSettings {
            /**
             * The resource name of the GCP Project to be used for VPC SC policy check. VPC security settings on this project will be honored for Cloud Search APIs after project_name has been
             * updated through CustomerService. Format: projects/{project_id}
             */
            project?: string;
        }
        interface WhiteboardInfo {
            /** The Cosmo Id of the whiteboard document (Jam). */
            id?: string;
            /** Title of the whiteboard document. */
            title?: string;
            /** The uri for whiteboard document. */
            uri?: string;
            /** This field is deprecated and will be removed. Please use "uri" instead. */
            whiteboardUri?: string;
        }
        interface WidgetMarkup {
            /** buttons is also oneof data and only one of these fields should be set. */
            buttons?: Button[];
            dateTimePicker?: DateTimePicker;
            divider?: any;
            grid?: Grid;
            /** The horizontal alignment of this widget. */
            horizontalAlignment?: string;
            image?: Image;
            imageKeyValue?: ImageKeyValue;
            keyValue?: KeyValue;
            /** Input Widgets */
            menu?: Menu;
            selectionControl?: SelectionControl;
            textField?: TextField;
            textKeyValue?: TextKeyValue;
            /** Read-only Widgets */
            textParagraph?: TextParagraph;
        }
        interface WrappedResourceKey {
            /** Resource key of the Drive item. This field should be unset if, depending on the context, the item does not have a resource key, or if none was specified. This must never be logged. */
            resourceKey?: string;
        }
        interface YouTubeBroadcastSessionInfo {
            /** Current broadcast session's statistics. */
            broadcastStats?: YouTubeBroadcastStats;
            /** YouTube broadcast session's state information. */
            sessionStateInfo?: SessionStateInfo;
            /** A unique server-generated ID for the broadcast session. */
            youTubeBroadcastSessionId?: string;
            /** The YouTube Live broadcast event that is being streamed to. */
            youTubeLiveBroadcastEvent?: YouTubeLiveBroadcastEvent;
        }
        interface YouTubeBroadcastStats {
            /** Estimated concurrent viewer count. */
            estimatedViewerCount?: string;
        }
        interface YouTubeLiveBroadcastEvent {
            /** Input only. The broadcast id, used to control the lifecycle of the event on YouTube */
            broadcastId?: string;
            /** YouTube channel associated with the broadcast. */
            channelId?: string;
            /** Output only. A URL that can be used to watch the meeting broadcast. Will be populated by the backend. */
            viewUrl?: string;
        }
        interface YoutubeUserProto {
            youtubeUserId?: string;
        }
        interface ZwiebackSessionProto {
            zwiebackSessionId?: string;
        }
        interface UnmappedidsResource {
            /** List all unmapped identities for a specific item. **Note:** This API requires an admin account to execute. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Maximum number of items to fetch in a request. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. */
                pageToken?: string;
                /** The name of the item, in the following format: datasources/{source_id}/items/{ID} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListUnmappedIdentitiesResponse>;
        }
        interface ItemsResource {
            /**
             * Checks whether an item is accessible by specified principal. Principal must be a user; groups and domain values aren't supported. **Note:** This API requires an admin account to
             * execute.
             */
            checkAccess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Item name, format: datasources/{source_id}/items/{item_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Principal;
            }): Request<CheckAccessResponse>;
            checkAccess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Item name, format: datasources/{source_id}/items/{item_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Principal): Request<CheckAccessResponse>;
            /** Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute. */
            searchByViewUrl(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Source name, format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SearchItemsByViewUrlRequest;
            }): Request<SearchItemsByViewUrlResponse>;
            searchByViewUrl(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Source name, format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SearchItemsByViewUrlRequest): Request<SearchItemsByViewUrlResponse>;
            unmappedids: UnmappedidsResource;
        }
        interface DatasourcesResource {
            items: ItemsResource;
        }
        interface ItemsResource {
            /** Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute. */
            listForunmappedidentity(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                groupResourceName?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Maximum number of items to fetch in a request. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. */
                pageToken?: string;
                /** The name of the identity source, in the following format: identitysources/{source_id}} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                userResourceName?: string;
            }): Request<ListItemNamesForUnmappedIdentityResponse>;
        }
        interface UnmappedidsResource {
            /** Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Maximum number of items to fetch in a request. Defaults to 100. */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. */
                pageToken?: string;
                /** The name of the identity source, in the following format: identitysources/{source_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Limit users selection to this status. */
                resolutionStatusCode?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListUnmappedIdentitiesResponse>;
        }
        interface IdentitysourcesResource {
            items: ItemsResource;
            unmappedids: UnmappedidsResource;
        }
        interface DebugResource {
            datasources: DatasourcesResource;
            identitysources: IdentitysourcesResource;
        }
        interface ItemsResource {
            /**
             * Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding
             * data source.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
                connectorName?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The RequestMode for this request. */
                mode?: string;
                /** Required. The name of the item to delete. Format: datasources/{source_id}/items/{item_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Required. The incremented version of the item to delete from the index. The indexing system stores the version from the datasource as a byte string and compares the Item version
                 * in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't delete any queued item with a version value that is less than or equal to the
                 * version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle
                 * revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
                 */
                version?: string;
            }): Request<Operation>;
            /**
             * Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one
             * whitelisted in the corresponding data source.
             */
            deleteQueueItems(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to delete items in a queue. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeleteQueueItemsRequest;
            }): Request<Operation>;
            deleteQueueItems(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to delete items in a queue. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeleteQueueItemsRequest): Request<Operation>;
            /** Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
                connectorName?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the item to get info. Format: datasources/{source_id}/items/{item_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Item>;
            /**
             * Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out
             * in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
             */
            index(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: IndexItemRequest;
            }): Request<Operation>;
            index(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: IndexItemRequest): Request<Operation>;
            /** Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /**
                 * When set to true, the indexing system only populates the following fields: name, version, queue. metadata.hash, metadata.title, metadata.sourceRepositoryURL,
                 * metadata.objectType, metadata.createTime, metadata.updateTime, metadata.contentLanguage, metadata.mimeType, structured_data.hash, content.hash, itemType, itemStatus.code,
                 * itemStatus.processingError.code, itemStatus.repositoryError.type, If this value is false, then all the fields are populated in Item.
                 */
                brief?: boolean;
                /** JSONP */
                callback?: string;
                /** The name of connector making this call. Format: datasources/{source_id}/connectors/{ID} */
                connectorName?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to list Items. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Maximum number of items to fetch in a request. The max value is 1000 when brief is true. The max value is 10 if brief is false. The default value is 10 */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListItemsResponse>;
            /**
             * Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority
             * order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the
             * client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4
             * hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data
             * source.
             */
            poll(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to poll items. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PollItemsRequest;
            }): Request<PollItemsResponse>;
            poll(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to poll items. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PollItemsRequest): Request<PollItemsResponse>;
            /**
             * Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the
             * corresponding data source.
             */
            push(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the item to push into the indexing queue. Format: datasources/{source_id}/items/{ID} This is a required field. The maximum length is 1536 characters. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PushItemRequest;
            }): Request<Item>;
            push(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the item to push into the indexing queue. Format: datasources/{source_id}/items/{ID} This is a required field. The maximum length is 1536 characters. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PushItemRequest): Request<Item>;
            /**
             * Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API
             * requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
             */
            unreserve(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to unreserve all items. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UnreserveItemsRequest;
            }): Request<Operation>;
            unreserve(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Data Source to unreserve all items. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UnreserveItemsRequest): Request<Operation>;
            /**
             * Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or
             * service account to execute. The service account used is the one whitelisted in the corresponding data source.
             */
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Item to start a resumable upload. Format: datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: StartUploadItemRequest;
            }): Request<UploadItemRef>;
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Item to start a resumable upload. Format: datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: StartUploadItemRequest): Request<UploadItemRef>;
        }
        interface DatasourcesResource {
            /** Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute. */
            deleteSchema(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the data source to delete Schema. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets the schema of a data source. **Note:** This API requires an admin or service account to execute. */
            getSchema(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the data source to get Schema. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Schema>;
            /**
             * Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema.
             * **Note:** This API requires an admin or service account to execute.
             */
            updateSchema(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the data source to update Schema. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UpdateSchemaRequest;
            }): Request<Operation>;
            updateSchema(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the data source to update Schema. Format: datasources/{source_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UpdateSchemaRequest): Request<Operation>;
            items: ItemsResource;
        }
        interface IndexingResource {
            datasources: DatasourcesResource;
        }
        interface MediaResource {
            /**
             * Uploads media for indexing. The upload endpoint supports direct and resumable upload protocols and is intended for large items that can not be [inlined during index
             * requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent). To index large content: 1. Call
             * indexing.datasources.items.upload with the item name to begin an upload session and retrieve the UploadItemRef. 1. Call media.upload to upload the content, as a streaming request,
             * using the same resource name from the UploadItemRef from step 1. 1. Call indexing.datasources.items.index to index the item. Populate the
             * [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent) with the UploadItemRef from step 1. For additional information, see [Create a content
             * connector using the REST API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest). **Note:** This API requires a service account to execute.
             */
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the media that is being downloaded. See ReadRequest.resource_name. */
                resourceName: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Media;
            }): Request<Media>;
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the media that is being downloaded. See ReadRequest.resource_name. */
                resourceName: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Media): Request<Media>;
        }
        interface LroResource {
            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services
             * to override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
             * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
             * ensure the name binding is the parent resource, without the operations collection id.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            lro: LroResource;
        }
        interface SourcesResource {
            /**
             * Returns list of sources that user can use for Search and Suggest APIs. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API
             * requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of
             * authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of sources to return in the response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "requestOptions.debugOptions.enableDebugging"?: boolean;
                /**
                 * The BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For translations. Set this
                 * field using the language set in browser or for the page. In the event that the user's language preference is known, set this field to the known user language. When specified,
                 * the documents in search results are biased towards the specified language. The suggest API does not use this parameter. Instead, suggest autocompletes only based on characters
                 * in the query.
                 */
                "requestOptions.languageCode"?: string;
                /** The ID generated when you create a search application using the [admin console](https://support.google.com/a/answer/9043922). */
                "requestOptions.searchApplicationId"?: string;
                /**
                 * Current user's time zone id, such as "America/Los_Angeles" or "Australia/Sydney". These IDs are defined by [Unicode Common Locale Data Repository
                 * (CLDR)](http://cldr.unicode.org/) project, and currently available in the file [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml). This field is used
                 * to correctly interpret date and time queries. If this field is not specified, the default time zone (UTC) is used.
                 */
                "requestOptions.timeZone"?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListQuerySourcesResponse>;
        }
        interface QueryResource {
            /**
             * The Cloud Search Query API provides the search method, which returns the most relevant results from a user query. The results can come from Google Workspace apps, such as Gmail or
             * Google Drive, or they can come from data that you have indexed from a third party. **Note:** This API requires a standard end user account to execute. A service account can't
             * perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of
             * authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
             */
            search(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SearchRequest;
            }): Request<SearchResponse>;
            search(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SearchRequest): Request<SearchResponse>;
            /**
             * Provides suggestions for autocompleting the query. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly;
             * to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
             */
            suggest(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SuggestRequest;
            }): Request<SuggestResponse>;
            suggest(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SuggestRequest): Request<SuggestResponse>;
            sources: SourcesResource;
        }
        interface DatasourcesResource {
            /** Creates a datasource. **Note:** This API requires an admin account to execute. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DataSource;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DataSource): Request<Operation>;
            /** Deletes a datasource. **Note:** This API requires an admin account to execute. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the datasource. Format: datasources/{source_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets a datasource. **Note:** This API requires an admin account to execute. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the datasource resource. Format: datasources/{source_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DataSource>;
            /** Lists datasources. **Note:** This API requires an admin account to execute. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Maximum number of datasources to fetch in a request. The max value is 1000. The default value is 1000. */
                pageSize?: number;
                /** Starting index of the results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDataSourceResponse>;
            /** Updates a datasource. **Note:** This API requires an admin account to execute. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DataSource;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DataSource): Request<Operation>;
            /** Updates a datasource. **Note:** This API requires an admin account to execute. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UpdateDataSourceRequest;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the datasource resource. Format: datasources/{source_id}. The name is ignored when creating a datasource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UpdateDataSourceRequest): Request<Operation>;
        }
        interface SearchapplicationsResource {
            /** Creates a search application. **Note:** This API requires an admin account to execute. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SearchApplication;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SearchApplication): Request<Operation>;
            /** Deletes a search application. **Note:** This API requires an admin account to execute. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the search application to be deleted. Format: applications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets the specified search application. **Note:** This API requires an admin account to execute. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the search application. Format: searchapplications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SearchApplication>;
            /** Lists all search applications. **Note:** This API requires an admin account to execute. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field. */
                "debugOptions.enableDebugging"?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of items to return. */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. The default value is 10 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSearchApplicationsResponse>;
            /** Updates a search application. **Note:** This API requires an admin account to execute. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Search Application. Format: searchapplications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SearchApplication;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Search Application. Format: searchapplications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SearchApplication): Request<Operation>;
            /** Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute. */
            reset(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the search application to be reset. Format: applications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ResetSearchApplicationRequest;
            }): Request<Operation>;
            reset(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the search application to be reset. Format: applications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ResetSearchApplicationRequest): Request<Operation>;
            /** Updates a search application. **Note:** This API requires an admin account to execute. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Search Application. Format: searchapplications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SearchApplication;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Search Application. Format: searchapplications/{application_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SearchApplication): Request<Operation>;
        }
        interface SettingsResource {
            /** Get customer settings. **Note:** This API requires an admin account to execute. */
            getCustomer(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<CustomerSettings>;
            /** Update customer settings. **Note:** This API requires an admin account to execute. */
            updateCustomer(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Update mask to control which fields get updated. If you specify a field in the update_mask but don't specify its value here, that field will be cleared. If the mask is not
                 * present or empty, all fields will be updated. Currently supported field paths: vpc_settings and audit_logging_settings
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CustomerSettings;
            }): Request<Operation>;
            updateCustomer(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Update mask to control which fields get updated. If you specify a field in the update_mask but don't specify its value here, that field will be cleared. If the mask is not
                 * present or empty, all fields will be updated. Currently supported field paths: vpc_settings and audit_logging_settings
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CustomerSettings): Request<Operation>;
            datasources: DatasourcesResource;
            searchapplications: SearchapplicationsResource;
        }
        interface DatasourcesResource {
            /** Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource id of the data source to retrieve statistics for, in the following format: "datasources/{source_id}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetDataSourceIndexStatsResponse>;
        }
        interface IndexResource {
            datasources: DatasourcesResource;
        }
        interface SearchapplicationsResource {
            /** Get the query statistics for search application. **Note:** This API requires a standard end user account to execute. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource id of the search application query stats, in the following format: searchapplications/{application_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetSearchApplicationQueryStatsResponse>;
        }
        interface QueryResource {
            searchapplications: SearchapplicationsResource;
        }
        interface SearchapplicationsResource {
            /** Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource id of the search application session stats, in the following format: searchapplications/{application_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetSearchApplicationSessionStatsResponse>;
        }
        interface SessionResource {
            searchapplications: SearchapplicationsResource;
        }
        interface SearchapplicationsResource {
            /** Get the users statistics for search application. **Note:** This API requires a standard end user account to execute. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource id of the search application session stats, in the following format: searchapplications/{application_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetSearchApplicationUserStatsResponse>;
        }
        interface UserResource {
            searchapplications: SearchapplicationsResource;
        }
        interface StatsResource {
            /**
             * Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:**
             * This API requires a standard end user account to execute.
             */
            getIndex(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetCustomerIndexStatsResponse>;
            /** Get the query statistics for customer. **Note:** This API requires a standard end user account to execute. */
            getQuery(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetCustomerQueryStatsResponse>;
            /** Get search application stats for customer. **Note:** This API requires a standard end user account to execute. */
            getSearchapplication(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "endDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "endDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "endDate.year"?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "startDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "startDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "startDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetCustomerSearchApplicationStatsResponse>;
            /** Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute. */
            getSession(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetCustomerSessionStatsResponse>;
            /** Get the users statistics for customer. **Note:** This API requires a standard end user account to execute. */
            getUser(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "fromDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "fromDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "fromDate.year"?: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Day of month. Must be from 1 to 31 and valid for the year and month. */
                "toDate.day"?: number;
                /** Month of date. Must be from 1 to 12. */
                "toDate.month"?: number;
                /** Year of date. Must be from 1 to 9999. */
                "toDate.year"?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetCustomerUserStatsResponse>;
            index: IndexResource;
            query: QueryResource;
            session: SessionResource;
            user: UserResource;
        }
        interface V1Resource {
            /** Enables `third party` support in Google Cloud Search. **Note:** This API requires an admin account to execute. */
            initializeCustomer(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InitializeCustomerRequest;
            }): Request<Operation>;
            initializeCustomer(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InitializeCustomerRequest): Request<Operation>;
        }

        const debug: DebugResource;

        const indexing: IndexingResource;

        const media: MediaResource;

        const operations: OperationsResource;

        const query: QueryResource;

        const settings: SettingsResource;

        const stats: StatsResource;

        const v1: V1Resource;
    }
}
