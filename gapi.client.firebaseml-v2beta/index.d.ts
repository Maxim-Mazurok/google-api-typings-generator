/* Type definitions for non-npm package Firebase ML API v2beta 0.0 */
// Project: https://firebase.google.com
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firebaseml.googleapis.com/$discovery/rest?version=v2beta
// Revision: 20240404

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Firebase ML API v2beta */
  function load(
    urlOrObject: 'https://firebaseml.googleapis.com/$discovery/rest?version=v2beta'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'firebaseml', version: 'v2beta'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'firebaseml',
    version: 'v2beta',
    callback: () => any
  ): void;

  namespace firebaseml {
    interface Blob {
      /** Required. Raw bytes. */
      data?: string;
      /** Required. The IANA standard MIME type of the source data. */
      mimeType?: string;
    }
    interface Candidate {
      /** Output only. Source attribution of the generated content. */
      citationMetadata?: CitationMetadata;
      /** Output only. Content parts of the candidate. */
      content?: Content;
      /** Output only. Describes the reason the mode stopped generating tokens in more detail. This is only filled when `finish_reason` is set. */
      finishMessage?: string;
      /** Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating the tokens. */
      finishReason?: string;
      /** Output only. Metadata specifies sources used to ground generated content. */
      groundingMetadata?: GroundingMetadata;
      /** Output only. Index of the candidate. */
      index?: number;
      /** Output only. List of ratings for the safety of a response candidate. There is at most one rating per category. */
      safetyRatings?: SafetyRating[];
    }
    interface Citation {
      /** Output only. End index into the content. */
      endIndex?: number;
      /** Output only. License of the attribution. */
      license?: string;
      /** Output only. Publication date of the attribution. */
      publicationDate?: Date;
      /** Output only. Start index into the content. */
      startIndex?: number;
      /** Output only. Title of the attribution. */
      title?: string;
      /** Output only. Url reference of the attribution. */
      uri?: string;
    }
    interface CitationMetadata {
      /** Output only. List of citations. */
      citations?: Citation[];
    }
    interface Content {
      /** Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types. */
      parts?: Part[];
      /** Optional. The producer of the content. Must be either 'user' or 'model'. Useful to set for multi-turn conversations, otherwise can be left blank or unset. */
      role?: string;
    }
    interface CountTokensRequest {
      /** Required. Input content. */
      contents?: Content[];
      /** Required. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model. */
      instances?: any[];
      /** Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` */
      model?: string;
    }
    interface CountTokensResponse {
      /** The total number of billable characters counted across all instances from the request. */
      totalBillableCharacters?: number;
      /** The total number of tokens counted across all instances from the request. */
      totalTokens?: number;
    }
    interface Date {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface FileData {
      /** Required. URI. */
      fileUri?: string;
      /** Required. The IANA standard MIME type of the source data. */
      mimeType?: string;
    }
    interface FunctionCall {
      /** Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details. */
      args?: {[P in string]: any};
      /** Required. The name of the function to call. Matches [FunctionDeclaration.name]. */
      name?: string;
    }
    interface FunctionCallingConfig {
      /** Optional. Function names to call. Only set when the Mode is ANY. Function names should match [FunctionDeclaration.name]. With mode set to ANY, model will predict a function call from the set of function names provided. */
      allowedFunctionNames?: string[];
      /** Optional. Function calling mode. */
      mode?: string;
    }
    interface FunctionDeclaration {
      /** Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function. */
      description?: string;
      /** Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64. */
      name?: string;
      /** Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1 */
      parameters?: Schema;
      /** Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function. */
      response?: Schema;
    }
    interface FunctionResponse {
      /** Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name]. */
      name?: string;
      /** Required. The function response in JSON object format. */
      response?: {[P in string]: any};
    }
    interface GenerateContentRequest {
      /** Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request. */
      contents?: Content[];
      /** Optional. Generation config. */
      generationConfig?: GenerationConfig;
      /** Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates. */
      safetySettings?: SafetySetting[];
      /** Optional. The user provided system instructions for the model. Note: only text should be used in parts and content in each part will be in a separate paragraph. */
      systemInstruction?: Content;
      /** Optional. Tool config. This config is shared for all tools provided in the request. */
      toolConfig?: ToolConfig;
      /** Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. */
      tools?: Tool[];
    }
    interface GenerateContentResponse {
      /** Output only. Generated candidates. */
      candidates?: Candidate[];
      /** Output only. Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations. */
      promptFeedback?: PromptFeedback;
      /** Usage metadata about the response(s). */
      usageMetadata?: UsageMetadata;
    }
    interface GenerationConfig {
      /** Optional. Number of candidates to generate. */
      candidateCount?: number;
      /** Optional. Frequency penalties. */
      frequencyPenalty?: number;
      /** Optional. The maximum number of output tokens to generate per message. */
      maxOutputTokens?: number;
      /** Optional. Positive penalties. */
      presencePenalty?: number;
      /** Optional. Output response mimetype of the generated candidate text. Supported mimetype: - `text/plain`: (default) Text output. - `application/json`: JSON response in the candidates. The model needs to be prompted to output the appropriate response type, otherwise the behavior is undefined. This is a preview feature. */
      responseMimeType?: string;
      /** Optional. Stop sequences. */
      stopSequences?: string[];
      /** Optional. Controls the randomness of predictions. */
      temperature?: number;
      /** Optional. If specified, top-k sampling will be used. */
      topK?: number;
      /** Optional. If specified, nucleus sampling will be used. */
      topP?: number;
    }
    interface GroundingAttribution {
      /** Optional. Output only. Confidence score of the attribution. Ranges from 0 to 1. 1 is the most confident. */
      confidenceScore?: number;
      /** Optional. Attribution from context retrieved by the retrieval tools. */
      retrievedContext?: RetrievedContext;
      /** Output only. Segment of the content this attribution belongs to. */
      segment?: Segment;
      /** Optional. Attribution from the web. */
      web?: Web;
    }
    interface GroundingMetadata {
      /** Optional. List of grounding attributions. */
      groundingAttributions?: GroundingAttribution[];
      /** Optional. Queries executed by the retrieval tools. */
      retrievalQueries?: string[];
      /** Optional. Web search queries for the following-up web search. */
      webSearchQueries?: string[];
    }
    interface ModelOperationMetadata {
      basicOperationStatus?: string;
      /** The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}` */
      name?: string;
    }
    interface Part {
      /** Optional. URI based data. */
      fileData?: FileData;
      /** Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values. */
      functionCall?: FunctionCall;
      /** Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */
      functionResponse?: FunctionResponse;
      /** Optional. Inlined bytes data. */
      inlineData?: Blob;
      /** Optional. Text part (can be code). */
      text?: string;
      /** Optional. Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data. */
      videoMetadata?: VideoMetadata;
    }
    interface PromptFeedback {
      /** Output only. Blocked reason. */
      blockReason?: string;
      /** Output only. A readable block reason message. */
      blockReasonMessage?: string;
      /** Output only. Safety ratings. */
      safetyRatings?: SafetyRating[];
    }
    interface Retrieval {
      /** Optional. Disable using the result from this tool in detecting grounding attribution. This does not affect how the result is given to the model for generation. */
      disableAttribution?: boolean;
      /** Set to use data source powered by Vertex AI Search. */
      vertexAiSearch?: VertexAISearch;
      /** Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService. */
      vertexRagStore?: VertexRagStore;
    }
    interface RetrievedContext {
      /** Output only. Title of the attribution. */
      title?: string;
      /** Output only. URI reference of the attribution. */
      uri?: string;
    }
    interface SafetyRating {
      /** Output only. Indicates whether the content was filtered out because of this rating. */
      blocked?: boolean;
      /** Output only. Harm category. */
      category?: string;
      /** Output only. Harm probability levels in the content. */
      probability?: string;
      /** Output only. Harm probability score. */
      probabilityScore?: number;
      /** Output only. Harm severity levels in the content. */
      severity?: string;
      /** Output only. Harm severity score. */
      severityScore?: number;
    }
    interface SafetySetting {
      /** Required. Harm category. */
      category?: string;
      /** Optional. Specify if the threshold is used for probability or severity score. If not specified, the threshold is used for probability score. */
      method?: string;
      /** Required. The harm block threshold. */
      threshold?: string;
    }
    interface Schema {
      /** Optional. Default value of the data. */
      default?: any;
      /** Optional. The description of the data. */
      description?: string;
      /** Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]} */
      enum?: string[];
      /** Optional. Example of the object. Will only populated when the object is the root. */
      example?: any;
      /** Optional. The format of the data. Supported formats: for NUMBER type: "float", "double" for INTEGER type: "int32", "int64" for STRING type: "email", "byte", etc */
      format?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY. */
      items?: Schema;
      /** Optional. Maximum value of the Type.INTEGER and Type.NUMBER */
      maximum?: number;
      /** Optional. Maximum number of the elements for Type.ARRAY. */
      maxItems?: string;
      /** Optional. Maximum length of the Type.STRING */
      maxLength?: string;
      /** Optional. Maximum number of the properties for Type.OBJECT. */
      maxProperties?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER */
      minimum?: number;
      /** Optional. Minimum number of the elements for Type.ARRAY. */
      minItems?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING */
      minLength?: string;
      /** Optional. Minimum number of the properties for Type.OBJECT. */
      minProperties?: string;
      /** Optional. Indicates if the value may be null. */
      nullable?: boolean;
      /** Optional. Pattern of the Type.STRING to restrict a string to a regular expression. */
      pattern?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT. */
      properties?: {[P in string]: Schema};
      /** Optional. Required properties of Type.OBJECT. */
      required?: string[];
      /** Optional. The title of the Schema. */
      title?: string;
      /** Optional. The type of the data. */
      type?: string;
    }
    interface Segment {
      /** Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero. */
      endIndex?: number;
      /** Output only. The index of a Part object within its parent Content object. */
      partIndex?: number;
      /** Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero. */
      startIndex?: number;
    }
    interface Tool {
      /** Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 64 function declarations can be provided. */
      functionDeclarations?: FunctionDeclaration[];
      /** Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation. */
      retrieval?: Retrieval;
    }
    interface ToolConfig {
      /** Optional. Function calling config. */
      functionCallingConfig?: FunctionCallingConfig;
    }
    interface UsageMetadata {
      /** Number of tokens in the response(s). */
      candidatesTokenCount?: number;
      /** Number of tokens in the request. */
      promptTokenCount?: number;
      totalTokenCount?: number;
    }
    interface VertexAISearch {
      /** Required. Fully-qualified Vertex AI Search's datastore resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}` */
      datastore?: string;
    }
    interface VertexRagStore {
      /** Required. Vertex RAG Store corpus resource name: `projects/{project}/locations/{location}/ragCorpora/{ragCorpus}` Currently only one corpus is allowed. In the future we may open up multiple corpora support. However, they should be from the same project and location. */
      ragCorpora?: string[];
      /** Optional. Number of top k results to return from the selected corpora. */
      similarityTopK?: number;
      /** Optional. Only return results with vector distance smaller than the threshold. */
      vectorDistanceThreshold?: number;
    }
    interface VideoMetadata {
      /** Optional. The end offset of the video. */
      endOffset?: string;
      /** Optional. The start offset of the video. */
      startOffset?: string;
    }
    interface Web {
      /** Output only. Title of the attribution. */
      title?: string;
      /** Output only. URI reference of the attribution. */
      uri?: string;
    }
    interface ModelsResource {
      /** Perform a token counting. */
      countTokens(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The name of the Endpoint requested to perform token counting. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
        endpoint: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CountTokensRequest;
      }): Request<CountTokensResponse>;
      countTokens(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. The name of the Endpoint requested to perform token counting. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
          endpoint: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CountTokensRequest
      ): Request<CountTokensResponse>;
      /** Generate content with multimodal inputs. */
      generateContent(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` */
        model: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GenerateContentRequest;
      }): Request<GenerateContentResponse>;
      generateContent(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` */
          model: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GenerateContentRequest
      ): Request<GenerateContentResponse>;
      /** Generate content with multimodal inputs with streaming support. */
      streamGenerateContent(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` */
        model: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GenerateContentRequest;
      }): Request<GenerateContentResponse>;
      streamGenerateContent(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` */
          model: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GenerateContentRequest
      ): Request<GenerateContentResponse>;
    }
    interface PublishersResource {
      models: ModelsResource;
    }
    interface LocationsResource {
      publishers: PublishersResource;
    }
    interface ProjectsResource {
      locations: LocationsResource;
    }

    const projects: ProjectsResource;
  }
}
