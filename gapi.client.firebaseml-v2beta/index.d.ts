/* Type definitions for non-npm package Firebase ML API v2beta 0.0 */
// Project: https://firebase.google.com
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firebaseml.googleapis.com/$discovery/rest?version=v2beta
// Revision: 20241029

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Firebase ML API v2beta */
  function load(
    urlOrObject: 'https://firebaseml.googleapis.com/$discovery/rest?version=v2beta'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'firebaseml', version: 'v2beta'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'firebaseml',
    version: 'v2beta',
    callback: () => any
  ): void;

  namespace firebaseml {
    interface Date {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface GoogleCloudAiplatformV1beta1Blob {
      /** Required. Raw bytes. */
      data?: string;
      /** Required. The IANA standard MIME type of the source data. */
      mimeType?: string;
    }
    interface GoogleCloudAiplatformV1beta1Candidate {
      /** Output only. Average log probability score of the candidate. */
      avgLogprobs?: number;
      /** Output only. Source attribution of the generated content. */
      citationMetadata?: GoogleCloudAiplatformV1beta1CitationMetadata;
      /** Output only. Content parts of the candidate. */
      content?: GoogleCloudAiplatformV1beta1Content;
      /** Output only. Describes the reason the mode stopped generating tokens in more detail. This is only filled when `finish_reason` is set. */
      finishMessage?: string;
      /** Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating the tokens. */
      finishReason?: string;
      /** Output only. Metadata specifies sources used to ground generated content. */
      groundingMetadata?: GoogleCloudAiplatformV1beta1GroundingMetadata;
      /** Output only. Index of the candidate. */
      index?: number;
      /** Output only. Log-likelihood scores for the response tokens and top tokens */
      logprobsResult?: GoogleCloudAiplatformV1beta1LogprobsResult;
      /** Output only. List of ratings for the safety of a response candidate. There is at most one rating per category. */
      safetyRatings?: GoogleCloudAiplatformV1beta1SafetyRating[];
    }
    interface GoogleCloudAiplatformV1beta1Citation {
      /** Output only. End index into the content. */
      endIndex?: number;
      /** Output only. License of the attribution. */
      license?: string;
      /** Output only. Publication date of the attribution. */
      publicationDate?: Date;
      /** Output only. Start index into the content. */
      startIndex?: number;
      /** Output only. Title of the attribution. */
      title?: string;
      /** Output only. Url reference of the attribution. */
      uri?: string;
    }
    interface GoogleCloudAiplatformV1beta1CitationMetadata {
      /** Output only. List of citations. */
      citations?: GoogleCloudAiplatformV1beta1Citation[];
    }
    interface GoogleCloudAiplatformV1beta1CodeExecutionResult {
      /** Required. Outcome of the code execution. */
      outcome?: string;
      /** Optional. Contains stdout when code execution is successful, stderr or other description otherwise. */
      output?: string;
    }
    interface GoogleCloudAiplatformV1beta1Content {
      /** Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types. */
      parts?: GoogleCloudAiplatformV1beta1Part[];
      /** Optional. The producer of the content. Must be either 'user' or 'model'. Useful to set for multi-turn conversations, otherwise can be left blank or unset. */
      role?: string;
    }
    interface GoogleCloudAiplatformV1beta1CountTokensRequest {
      /** Optional. Input content. */
      contents?: GoogleCloudAiplatformV1beta1Content[];
      /** Optional. Generation config that the model will use to generate the response. */
      generationConfig?: GoogleCloudAiplatformV1beta1GenerationConfig;
      /** Optional. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model. */
      instances?: any[];
      /** Optional. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` */
      model?: string;
      /** Optional. The user provided system instructions for the model. Note: only text should be used in parts and content in each part will be in a separate paragraph. */
      systemInstruction?: GoogleCloudAiplatformV1beta1Content;
      /** Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. */
      tools?: GoogleCloudAiplatformV1beta1Tool[];
    }
    interface GoogleCloudAiplatformV1beta1CountTokensResponse {
      /** The total number of billable characters counted across all instances from the request. */
      totalBillableCharacters?: number;
      /** The total number of tokens counted across all instances from the request. */
      totalTokens?: number;
    }
    interface GoogleCloudAiplatformV1beta1DynamicRetrievalConfig {
      /** Optional. The threshold to be used in dynamic retrieval. If not set, a system default value is used. */
      dynamicThreshold?: number;
      /** The mode of the predictor to be used in dynamic retrieval. */
      mode?: string;
    }
    interface GoogleCloudAiplatformV1beta1ExecutableCode {
      /** Required. The code to be executed. */
      code?: string;
      /** Required. Programming language of the `code`. */
      language?: string;
    }
    interface GoogleCloudAiplatformV1beta1FileData {
      /** Required. URI. */
      fileUri?: string;
      /** Required. The IANA standard MIME type of the source data. */
      mimeType?: string;
    }
    interface GoogleCloudAiplatformV1beta1FunctionCall {
      /** Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details. */
      args?: {[P in string]: any};
      /** Required. The name of the function to call. Matches [FunctionDeclaration.name]. */
      name?: string;
    }
    interface GoogleCloudAiplatformV1beta1FunctionCallingConfig {
      /** Optional. Function names to call. Only set when the Mode is ANY. Function names should match [FunctionDeclaration.name]. With mode set to ANY, model will predict a function call from the set of function names provided. */
      allowedFunctionNames?: string[];
      /** Optional. Function calling mode. */
      mode?: string;
    }
    interface GoogleCloudAiplatformV1beta1FunctionDeclaration {
      /** Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function. */
      description?: string;
      /** Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64. */
      name?: string;
      /** Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1 */
      parameters?: GoogleCloudAiplatformV1beta1Schema;
      /** Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function. */
      response?: GoogleCloudAiplatformV1beta1Schema;
    }
    interface GoogleCloudAiplatformV1beta1FunctionResponse {
      /** Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name]. */
      name?: string;
      /** Required. The function response in JSON object format. Use "output" key to specify function output and "error" key to specify error details (if any). If "output" and "error" keys are not specified, then whole "response" is treated as function output. */
      response?: {[P in string]: any};
    }
    interface GoogleCloudAiplatformV1beta1GenerateContentRequest {
      /** Optional. The name of the cached content used as context to serve the prediction. Note: only used in explicit caching, where users can have control over caching (e.g. what content to cache) and enjoy guaranteed cost savings. Format: `projects/{project}/locations/{location}/cachedContents/{cachedContent}` */
      cachedContent?: string;
      /** Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request. */
      contents?: GoogleCloudAiplatformV1beta1Content[];
      /** Optional. Generation config. */
      generationConfig?: GoogleCloudAiplatformV1beta1GenerationConfig;
      /** Optional. The labels with user-defined metadata for the request. It is used for billing and reporting only. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. */
      labels?: {[P in string]: string};
      /** Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates. */
      safetySettings?: GoogleCloudAiplatformV1beta1SafetySetting[];
      /** Optional. The user provided system instructions for the model. Note: only text should be used in parts and content in each part will be in a separate paragraph. */
      systemInstruction?: GoogleCloudAiplatformV1beta1Content;
      /** Optional. Tool config. This config is shared for all tools provided in the request. */
      toolConfig?: GoogleCloudAiplatformV1beta1ToolConfig;
      /** Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. */
      tools?: GoogleCloudAiplatformV1beta1Tool[];
    }
    interface GoogleCloudAiplatformV1beta1GenerateContentResponse {
      /** Output only. Generated candidates. */
      candidates?: GoogleCloudAiplatformV1beta1Candidate[];
      /** Output only. The model version used to generate the response. */
      modelVersion?: string;
      /** Output only. Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations. */
      promptFeedback?: GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback;
      /** Usage metadata about the response(s). */
      usageMetadata?: GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata;
    }
    interface GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback {
      /** Output only. Blocked reason. */
      blockReason?: string;
      /** Output only. A readable block reason message. */
      blockReasonMessage?: string;
      /** Output only. Safety ratings. */
      safetyRatings?: GoogleCloudAiplatformV1beta1SafetyRating[];
    }
    interface GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata {
      /** Output only. Number of tokens in the cached part in the input (the cached content). */
      cachedContentTokenCount?: number;
      /** Number of tokens in the response(s). */
      candidatesTokenCount?: number;
      /** Number of tokens in the request. When `cached_content` is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content. */
      promptTokenCount?: number;
      /** Total token count for prompt and response candidates. */
      totalTokenCount?: number;
    }
    interface GoogleCloudAiplatformV1beta1GenerationConfig {
      /** Optional. If enabled, audio timestamp will be included in the request to the model. */
      audioTimestamp?: boolean;
      /** Optional. Number of candidates to generate. */
      candidateCount?: number;
      /** Optional. Frequency penalties. */
      frequencyPenalty?: number;
      /** Optional. Logit probabilities. */
      logprobs?: number;
      /** Optional. The maximum number of output tokens to generate per message. */
      maxOutputTokens?: number;
      /** Optional. Positive penalties. */
      presencePenalty?: number;
      /** Optional. If true, export the logprobs results in response. */
      responseLogprobs?: boolean;
      /** Optional. Output response mimetype of the generated candidate text. Supported mimetype: - `text/plain`: (default) Text output. - `application/json`: JSON response in the candidates. The model needs to be prompted to output the appropriate response type, otherwise the behavior is undefined. This is a preview feature. */
      responseMimeType?: string;
      /** Optional. The `Schema` object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). If set, a compatible response_mime_type must also be set. Compatible mimetypes: `application/json`: Schema for JSON response. */
      responseSchema?: GoogleCloudAiplatformV1beta1Schema;
      /** Optional. Routing configuration. */
      routingConfig?: GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfig;
      /** Optional. Seed. */
      seed?: number;
      /** Optional. Stop sequences. */
      stopSequences?: string[];
      /** Optional. Controls the randomness of predictions. */
      temperature?: number;
      /** Optional. If specified, top-k sampling will be used. */
      topK?: number;
      /** Optional. If specified, nucleus sampling will be used. */
      topP?: number;
    }
    interface GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfig {
      /** Automated routing. */
      autoMode?: GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigAutoRoutingMode;
      /** Manual routing. */
      manualMode?: GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigManualRoutingMode;
    }
    interface GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigAutoRoutingMode {
      /** The model routing preference. */
      modelRoutingPreference?: string;
    }
    interface GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigManualRoutingMode {
      /** The model name to use. Only the public LLM models are accepted. e.g. 'gemini-1.5-pro-001'. */
      modelName?: string;
    }
    interface GoogleCloudAiplatformV1beta1GoogleSearchRetrieval {
      /** Specifies the dynamic retrieval configuration for the given source. */
      dynamicRetrievalConfig?: GoogleCloudAiplatformV1beta1DynamicRetrievalConfig;
    }
    interface GoogleCloudAiplatformV1beta1GroundingChunk {
      /** Grounding chunk from context retrieved by the retrieval tools. */
      retrievedContext?: GoogleCloudAiplatformV1beta1GroundingChunkRetrievedContext;
      /** Grounding chunk from the web. */
      web?: GoogleCloudAiplatformV1beta1GroundingChunkWeb;
    }
    interface GoogleCloudAiplatformV1beta1GroundingChunkRetrievedContext {
      /** Text of the attribution. */
      text?: string;
      /** Title of the attribution. */
      title?: string;
      /** URI reference of the attribution. */
      uri?: string;
    }
    interface GoogleCloudAiplatformV1beta1GroundingChunkWeb {
      /** Title of the chunk. */
      title?: string;
      /** URI reference of the chunk. */
      uri?: string;
    }
    interface GoogleCloudAiplatformV1beta1GroundingMetadata {
      /** List of supporting references retrieved from specified grounding source. */
      groundingChunks?: GoogleCloudAiplatformV1beta1GroundingChunk[];
      /** Optional. List of grounding support. */
      groundingSupports?: GoogleCloudAiplatformV1beta1GroundingSupport[];
      /** Optional. Output only. Retrieval metadata. */
      retrievalMetadata?: GoogleCloudAiplatformV1beta1RetrievalMetadata;
      /** Optional. Queries executed by the retrieval tools. */
      retrievalQueries?: string[];
      /** Optional. Google search entry for the following-up web searches. */
      searchEntryPoint?: GoogleCloudAiplatformV1beta1SearchEntryPoint;
      /** Optional. Web search queries for the following-up web search. */
      webSearchQueries?: string[];
    }
    interface GoogleCloudAiplatformV1beta1GroundingSupport {
      /** Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices. */
      confidenceScores?: number[];
      /** A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance [1,3,4] means that grounding_chunk[1], grounding_chunk[3], grounding_chunk[4] are the retrieved content attributed to the claim. */
      groundingChunkIndices?: number[];
      /** Segment of the content this support belongs to. */
      segment?: GoogleCloudAiplatformV1beta1Segment;
    }
    interface GoogleCloudAiplatformV1beta1LogprobsResult {
      /** Length = total number of decoding steps. The chosen candidates may or may not be in top_candidates. */
      chosenCandidates?: GoogleCloudAiplatformV1beta1LogprobsResultCandidate[];
      /** Length = total number of decoding steps. */
      topCandidates?: GoogleCloudAiplatformV1beta1LogprobsResultTopCandidates[];
    }
    interface GoogleCloudAiplatformV1beta1LogprobsResultCandidate {
      /** The candidate's log probability. */
      logProbability?: number;
      /** The candidate's token string value. */
      token?: string;
      /** The candidate's token id value. */
      tokenId?: number;
    }
    interface GoogleCloudAiplatformV1beta1LogprobsResultTopCandidates {
      /** Sorted by log probability in descending order. */
      candidates?: GoogleCloudAiplatformV1beta1LogprobsResultCandidate[];
    }
    interface GoogleCloudAiplatformV1beta1Part {
      /** Optional. Result of executing the [ExecutableCode]. */
      codeExecutionResult?: GoogleCloudAiplatformV1beta1CodeExecutionResult;
      /** Optional. Code generated by the model that is meant to be executed. */
      executableCode?: GoogleCloudAiplatformV1beta1ExecutableCode;
      /** Optional. URI based data. */
      fileData?: GoogleCloudAiplatformV1beta1FileData;
      /** Optional. A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] with the parameters and their values. */
      functionCall?: GoogleCloudAiplatformV1beta1FunctionCall;
      /** Optional. The result output of a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function call. It is used as context to the model. */
      functionResponse?: GoogleCloudAiplatformV1beta1FunctionResponse;
      /** Optional. Inlined bytes data. */
      inlineData?: GoogleCloudAiplatformV1beta1Blob;
      /** Optional. Text part (can be code). */
      text?: string;
      /** Optional. Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data. */
      videoMetadata?: GoogleCloudAiplatformV1beta1VideoMetadata;
    }
    interface GoogleCloudAiplatformV1beta1Retrieval {
      /** Optional. Deprecated. This option is no longer supported. */
      disableAttribution?: boolean;
      /** Set to use data source powered by Vertex AI Search. */
      vertexAiSearch?: GoogleCloudAiplatformV1beta1VertexAISearch;
      /** Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService. */
      vertexRagStore?: GoogleCloudAiplatformV1beta1VertexRagStore;
    }
    interface GoogleCloudAiplatformV1beta1RetrievalMetadata {
      /** Optional. Score indicating how likely information from Google Search could help answer the prompt. The score is in the range `[0, 1]`, where 0 is the least likely and 1 is the most likely. This score is only populated when Google Search grounding and dynamic retrieval is enabled. It will be compared to the threshold to determine whether to trigger Google Search. */
      googleSearchDynamicRetrievalScore?: number;
    }
    interface GoogleCloudAiplatformV1beta1SafetyRating {
      /** Output only. Indicates whether the content was filtered out because of this rating. */
      blocked?: boolean;
      /** Output only. Harm category. */
      category?: string;
      /** Output only. Harm probability levels in the content. */
      probability?: string;
      /** Output only. Harm probability score. */
      probabilityScore?: number;
      /** Output only. Harm severity levels in the content. */
      severity?: string;
      /** Output only. Harm severity score. */
      severityScore?: number;
    }
    interface GoogleCloudAiplatformV1beta1SafetySetting {
      /** Required. Harm category. */
      category?: string;
      /** Optional. Specify if the threshold is used for probability or severity score. If not specified, the threshold is used for probability score. */
      method?: string;
      /** Required. The harm block threshold. */
      threshold?: string;
    }
    interface GoogleCloudAiplatformV1beta1Schema {
      /** Optional. The value should be validated against any (one or more) of the subschemas in the list. */
      anyOf?: GoogleCloudAiplatformV1beta1Schema[];
      /** Optional. Default value of the data. */
      default?: any;
      /** Optional. The description of the data. */
      description?: string;
      /** Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:["101", "201", "301"]} */
      enum?: string[];
      /** Optional. Example of the object. Will only populated when the object is the root. */
      example?: any;
      /** Optional. The format of the data. Supported formats: for NUMBER type: "float", "double" for INTEGER type: "int32", "int64" for STRING type: "email", "byte", etc */
      format?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY. */
      items?: GoogleCloudAiplatformV1beta1Schema;
      /** Optional. Maximum value of the Type.INTEGER and Type.NUMBER */
      maximum?: number;
      /** Optional. Maximum number of the elements for Type.ARRAY. */
      maxItems?: string;
      /** Optional. Maximum length of the Type.STRING */
      maxLength?: string;
      /** Optional. Maximum number of the properties for Type.OBJECT. */
      maxProperties?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER */
      minimum?: number;
      /** Optional. Minimum number of the elements for Type.ARRAY. */
      minItems?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING */
      minLength?: string;
      /** Optional. Minimum number of the properties for Type.OBJECT. */
      minProperties?: string;
      /** Optional. Indicates if the value may be null. */
      nullable?: boolean;
      /** Optional. Pattern of the Type.STRING to restrict a string to a regular expression. */
      pattern?: string;
      /** Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT. */
      properties?: {[P in string]: GoogleCloudAiplatformV1beta1Schema};
      /** Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties. */
      propertyOrdering?: string[];
      /** Optional. Required properties of Type.OBJECT. */
      required?: string[];
      /** Optional. The title of the Schema. */
      title?: string;
      /** Optional. The type of the data. */
      type?: string;
    }
    interface GoogleCloudAiplatformV1beta1SearchEntryPoint {
      /** Optional. Web content snippet that can be embedded in a web page or an app webview. */
      renderedContent?: string;
      /** Optional. Base64 encoded JSON representing array of tuple. */
      sdkBlob?: string;
    }
    interface GoogleCloudAiplatformV1beta1Segment {
      /** Output only. End index in the given Part, measured in bytes. Offset from the start of the Part, exclusive, starting at zero. */
      endIndex?: number;
      /** Output only. The index of a Part object within its parent Content object. */
      partIndex?: number;
      /** Output only. Start index in the given Part, measured in bytes. Offset from the start of the Part, inclusive, starting at zero. */
      startIndex?: number;
      /** Output only. The text corresponding to the segment from the response. */
      text?: string;
    }
    interface GoogleCloudAiplatformV1beta1Tool {
      /** Optional. CodeExecution tool type. Enables the model to execute code as part of generation. This field is only used by the Gemini Developer API services. */
      codeExecution?: any;
      /** Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 128 function declarations can be provided. */
      functionDeclarations?: GoogleCloudAiplatformV1beta1FunctionDeclaration[];
      /** Optional. GoogleSearchRetrieval tool type. Specialized retrieval tool that is powered by Google search. */
      googleSearchRetrieval?: GoogleCloudAiplatformV1beta1GoogleSearchRetrieval;
      /** Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation. */
      retrieval?: GoogleCloudAiplatformV1beta1Retrieval;
    }
    interface GoogleCloudAiplatformV1beta1ToolCodeExecution {}
    interface GoogleCloudAiplatformV1beta1ToolConfig {
      /** Optional. Function calling config. */
      functionCallingConfig?: GoogleCloudAiplatformV1beta1FunctionCallingConfig;
    }
    interface GoogleCloudAiplatformV1beta1VertexAISearch {
      /** Required. Fully-qualified Vertex AI Search data store resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}` */
      datastore?: string;
    }
    interface GoogleCloudAiplatformV1beta1VertexRagStore {
      /** Optional. Deprecated. Please use rag_resources instead. */
      ragCorpora?: string[];
      /** Optional. The representation of the rag source. It can be used to specify corpus only or ragfiles. Currently only support one corpus or multiple files from one corpus. In the future we may open up multiple corpora support. */
      ragResources?: GoogleCloudAiplatformV1beta1VertexRagStoreRagResource[];
      /** Optional. Number of top k results to return from the selected corpora. */
      similarityTopK?: number;
      /** Optional. Only return results with vector distance smaller than the threshold. */
      vectorDistanceThreshold?: number;
    }
    interface GoogleCloudAiplatformV1beta1VertexRagStoreRagResource {
      /** Optional. RagCorpora resource name. Format: `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}` */
      ragCorpus?: string;
      /** Optional. rag_file_id. The files should be in the same rag_corpus set in rag_corpus field. */
      ragFileIds?: string[];
    }
    interface GoogleCloudAiplatformV1beta1VideoMetadata {
      /** Optional. The end offset of the video. */
      endOffset?: string;
      /** Optional. The start offset of the video. */
      startOffset?: string;
    }
    interface ModelOperationMetadata {
      basicOperationStatus?: string;
      /** The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}` */
      name?: string;
    }
    interface ModelsResource {
      /** Perform a token counting. */
      countTokens(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The name of the Endpoint requested to perform token counting. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
        endpoint: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleCloudAiplatformV1beta1CountTokensRequest;
      }): Request<GoogleCloudAiplatformV1beta1CountTokensResponse>;
      countTokens(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. The name of the Endpoint requested to perform token counting. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
          endpoint: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleCloudAiplatformV1beta1CountTokensRequest
      ): Request<GoogleCloudAiplatformV1beta1CountTokensResponse>;
      /** Generate content with multimodal inputs. */
      generateContent(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The fully qualified name of the publisher model or tuned model endpoint to use. Publisher model format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` Tuned model endpoint format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
        model: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleCloudAiplatformV1beta1GenerateContentRequest;
      }): Request<GoogleCloudAiplatformV1beta1GenerateContentResponse>;
      generateContent(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The fully qualified name of the publisher model or tuned model endpoint to use. Publisher model format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` Tuned model endpoint format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
          model: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleCloudAiplatformV1beta1GenerateContentRequest
      ): Request<GoogleCloudAiplatformV1beta1GenerateContentResponse>;
      /** Generate content with multimodal inputs with streaming support. */
      streamGenerateContent(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The fully qualified name of the publisher model or tuned model endpoint to use. Publisher model format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` Tuned model endpoint format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
        model: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleCloudAiplatformV1beta1GenerateContentRequest;
      }): Request<GoogleCloudAiplatformV1beta1GenerateContentResponse>;
      streamGenerateContent(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The fully qualified name of the publisher model or tuned model endpoint to use. Publisher model format: `projects/{project}/locations/{location}/publishers/*‚Äç/models/*` Tuned model endpoint format: `projects/{project}/locations/{location}/endpoints/{endpoint}` */
          model: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleCloudAiplatformV1beta1GenerateContentRequest
      ): Request<GoogleCloudAiplatformV1beta1GenerateContentResponse>;
    }
    interface PublishersResource {
      models: ModelsResource;
    }
    interface LocationsResource {
      publishers: PublishersResource;
    }
    interface ProjectsResource {
      locations: LocationsResource;
    }

    const projects: ProjectsResource;
  }
}
