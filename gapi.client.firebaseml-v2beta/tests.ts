/* This is stub file for gapi.client.firebaseml-v2beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250616

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://firebaseml.googleapis.com/$discovery/rest?version=v2beta',
  );
  /** now we can use gapi.client.firebaseml */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Perform a token counting. */
    await gapi.client.firebaseml.projects.locations.publishers.models.countTokens(
      {
        endpoint: 'Test string',
      },
      {
        contents: [
          {
            parts: [
              {
                codeExecutionResult: {
                  outcome: 'Test string',
                  output: 'Test string',
                },
                executableCode: {
                  code: 'Test string',
                  language: 'Test string',
                },
                fileData: {
                  displayName: 'Test string',
                  fileUri: 'Test string',
                  mimeType: 'Test string',
                },
                functionCall: {
                  args: {
                    A: 42,
                  },
                  id: 'Test string',
                  name: 'Test string',
                },
                functionResponse: {
                  id: 'Test string',
                  name: 'Test string',
                  response: {
                    A: 42,
                  },
                },
                inlineData: {
                  data: 'Test string',
                  displayName: 'Test string',
                  mimeType: 'Test string',
                },
                text: 'Test string',
                thought: true,
                thoughtSignature: 'Test string',
                videoMetadata: {
                  endOffset: 'Test string',
                  startOffset: 'Test string',
                },
              },
            ],
            role: 'Test string',
          },
        ],
        generationConfig: {
          audioTimestamp: true,
          candidateCount: 42,
          enableAffectiveDialog: true,
          frequencyPenalty: 42,
          logprobs: 42,
          maxOutputTokens: 42,
          mediaResolution: 'Test string',
          modelConfig: {
            featureSelectionPreference: 'Test string',
          },
          presencePenalty: 42,
          responseJsonSchema: 42,
          responseLogprobs: true,
          responseMimeType: 'Test string',
          responseModalities: ['Test string'],
          responseSchema: {
            additionalProperties: 42,
            anyOf: undefined,
            default: 42,
            defs: undefined,
            description: 'Test string',
            enum: ['Test string'],
            example: 42,
            format: 'Test string',
            items: undefined,
            maximum: 42,
            maxItems: 'Test string',
            maxLength: 'Test string',
            maxProperties: 'Test string',
            minimum: 42,
            minItems: 'Test string',
            minLength: 'Test string',
            minProperties: 'Test string',
            nullable: true,
            pattern: 'Test string',
            properties: undefined,
            propertyOrdering: ['Test string'],
            ref: 'Test string',
            required: ['Test string'],
            title: 'Test string',
            type: 'Test string',
          },
          routingConfig: {
            autoMode: {
              modelRoutingPreference: 'Test string',
            },
            manualMode: {
              modelName: 'Test string',
            },
          },
          seed: 42,
          speechConfig: {
            languageCode: 'Test string',
            voiceConfig: {
              prebuiltVoiceConfig: {
                voiceName: 'Test string',
              },
            },
          },
          stopSequences: ['Test string'],
          temperature: 42,
          thinkingConfig: {
            includeThoughts: true,
            thinkingBudget: 42,
          },
          topK: 42,
          topP: 42,
        },
        instances: [42],
        model: 'Test string',
        systemInstruction: {
          parts: [
            {
              codeExecutionResult: {
                outcome: 'Test string',
                output: 'Test string',
              },
              executableCode: {
                code: 'Test string',
                language: 'Test string',
              },
              fileData: {
                displayName: 'Test string',
                fileUri: 'Test string',
                mimeType: 'Test string',
              },
              functionCall: {
                args: {
                  A: 42,
                },
                id: 'Test string',
                name: 'Test string',
              },
              functionResponse: {
                id: 'Test string',
                name: 'Test string',
                response: {
                  A: 42,
                },
              },
              inlineData: {
                data: 'Test string',
                displayName: 'Test string',
                mimeType: 'Test string',
              },
              text: 'Test string',
              thought: true,
              thoughtSignature: 'Test string',
              videoMetadata: {
                endOffset: 'Test string',
                startOffset: 'Test string',
              },
            },
          ],
          role: 'Test string',
        },
        tools: [
          {
            codeExecution: {},
            computerUse: {
              environment: 'Test string',
            },
            enterpriseWebSearch: {},
            functionDeclarations: [
              {
                description: 'Test string',
                name: 'Test string',
                parameters: {
                  additionalProperties: 42,
                  anyOf: undefined,
                  default: 42,
                  defs: undefined,
                  description: 'Test string',
                  enum: ['Test string'],
                  example: 42,
                  format: 'Test string',
                  items: undefined,
                  maximum: 42,
                  maxItems: 'Test string',
                  maxLength: 'Test string',
                  maxProperties: 'Test string',
                  minimum: 42,
                  minItems: 'Test string',
                  minLength: 'Test string',
                  minProperties: 'Test string',
                  nullable: true,
                  pattern: 'Test string',
                  properties: undefined,
                  propertyOrdering: ['Test string'],
                  ref: 'Test string',
                  required: ['Test string'],
                  title: 'Test string',
                  type: 'Test string',
                },
                parametersJsonSchema: 42,
                response: {
                  additionalProperties: 42,
                  anyOf: undefined,
                  default: 42,
                  defs: undefined,
                  description: 'Test string',
                  enum: ['Test string'],
                  example: 42,
                  format: 'Test string',
                  items: undefined,
                  maximum: 42,
                  maxItems: 'Test string',
                  maxLength: 'Test string',
                  maxProperties: 'Test string',
                  minimum: 42,
                  minItems: 'Test string',
                  minLength: 'Test string',
                  minProperties: 'Test string',
                  nullable: true,
                  pattern: 'Test string',
                  properties: undefined,
                  propertyOrdering: ['Test string'],
                  ref: 'Test string',
                  required: ['Test string'],
                  title: 'Test string',
                  type: 'Test string',
                },
                responseJsonSchema: 42,
              },
            ],
            googleSearch: {},
            googleSearchRetrieval: {
              dynamicRetrievalConfig: {
                dynamicThreshold: 42,
                mode: 'Test string',
              },
            },
            retrieval: {
              disableAttribution: true,
              externalApi: {
                apiAuth: {
                  apiKeyConfig: {
                    apiKeySecretVersion: 'Test string',
                    apiKeyString: 'Test string',
                  },
                },
                apiSpec: 'Test string',
                authConfig: {
                  apiKeyConfig: {
                    apiKeySecret: 'Test string',
                    apiKeyString: 'Test string',
                    httpElementLocation: 'Test string',
                    name: 'Test string',
                  },
                  authType: 'Test string',
                  googleServiceAccountConfig: {
                    serviceAccount: 'Test string',
                  },
                  httpBasicAuthConfig: {
                    credentialSecret: 'Test string',
                  },
                  oauthConfig: {
                    accessToken: 'Test string',
                    serviceAccount: 'Test string',
                  },
                  oidcConfig: {
                    idToken: 'Test string',
                    serviceAccount: 'Test string',
                  },
                },
                elasticSearchParams: {
                  index: 'Test string',
                  numHits: 42,
                  searchTemplate: 'Test string',
                },
                endpoint: 'Test string',
                simpleSearchParams: {},
              },
              vertexAiSearch: {
                datastore: 'Test string',
                dataStoreSpecs: [
                  {
                    dataStore: 'Test string',
                    filter: 'Test string',
                  },
                ],
                engine: 'Test string',
                filter: 'Test string',
                maxResults: 42,
              },
              vertexRagStore: {
                ragCorpora: ['Test string'],
                ragResources: [
                  {
                    ragCorpus: 'Test string',
                    ragFileIds: ['Test string'],
                  },
                ],
                ragRetrievalConfig: {
                  filter: {
                    metadataFilter: 'Test string',
                    vectorDistanceThreshold: 42,
                    vectorSimilarityThreshold: 42,
                  },
                  hybridSearch: {
                    alpha: 42,
                  },
                  ranking: {
                    llmRanker: {
                      modelName: 'Test string',
                    },
                    rankService: {
                      modelName: 'Test string',
                    },
                  },
                  topK: 42,
                },
                similarityTopK: 42,
                storeContext: true,
                vectorDistanceThreshold: 42,
              },
            },
            urlContext: {},
          },
        ],
      },
    );
    /** Generate content with multimodal inputs. */
    await gapi.client.firebaseml.projects.locations.publishers.models.generateContent(
      {
        model: 'Test string',
      },
      {
        cachedContent: 'Test string',
        contents: [
          {
            parts: [
              {
                codeExecutionResult: {
                  outcome: 'Test string',
                  output: 'Test string',
                },
                executableCode: {
                  code: 'Test string',
                  language: 'Test string',
                },
                fileData: {
                  displayName: 'Test string',
                  fileUri: 'Test string',
                  mimeType: 'Test string',
                },
                functionCall: {
                  args: {
                    A: 42,
                  },
                  id: 'Test string',
                  name: 'Test string',
                },
                functionResponse: {
                  id: 'Test string',
                  name: 'Test string',
                  response: {
                    A: 42,
                  },
                },
                inlineData: {
                  data: 'Test string',
                  displayName: 'Test string',
                  mimeType: 'Test string',
                },
                text: 'Test string',
                thought: true,
                thoughtSignature: 'Test string',
                videoMetadata: {
                  endOffset: 'Test string',
                  startOffset: 'Test string',
                },
              },
            ],
            role: 'Test string',
          },
        ],
        generationConfig: {
          audioTimestamp: true,
          candidateCount: 42,
          enableAffectiveDialog: true,
          frequencyPenalty: 42,
          logprobs: 42,
          maxOutputTokens: 42,
          mediaResolution: 'Test string',
          modelConfig: {
            featureSelectionPreference: 'Test string',
          },
          presencePenalty: 42,
          responseJsonSchema: 42,
          responseLogprobs: true,
          responseMimeType: 'Test string',
          responseModalities: ['Test string'],
          responseSchema: {
            additionalProperties: 42,
            anyOf: undefined,
            default: 42,
            defs: undefined,
            description: 'Test string',
            enum: ['Test string'],
            example: 42,
            format: 'Test string',
            items: undefined,
            maximum: 42,
            maxItems: 'Test string',
            maxLength: 'Test string',
            maxProperties: 'Test string',
            minimum: 42,
            minItems: 'Test string',
            minLength: 'Test string',
            minProperties: 'Test string',
            nullable: true,
            pattern: 'Test string',
            properties: undefined,
            propertyOrdering: ['Test string'],
            ref: 'Test string',
            required: ['Test string'],
            title: 'Test string',
            type: 'Test string',
          },
          routingConfig: {
            autoMode: {
              modelRoutingPreference: 'Test string',
            },
            manualMode: {
              modelName: 'Test string',
            },
          },
          seed: 42,
          speechConfig: {
            languageCode: 'Test string',
            voiceConfig: {
              prebuiltVoiceConfig: {
                voiceName: 'Test string',
              },
            },
          },
          stopSequences: ['Test string'],
          temperature: 42,
          thinkingConfig: {
            includeThoughts: true,
            thinkingBudget: 42,
          },
          topK: 42,
          topP: 42,
        },
        labels: {
          A: 'Test string',
        },
        safetySettings: [
          {
            category: 'Test string',
            method: 'Test string',
            threshold: 'Test string',
          },
        ],
        systemInstruction: {
          parts: [
            {
              codeExecutionResult: {
                outcome: 'Test string',
                output: 'Test string',
              },
              executableCode: {
                code: 'Test string',
                language: 'Test string',
              },
              fileData: {
                displayName: 'Test string',
                fileUri: 'Test string',
                mimeType: 'Test string',
              },
              functionCall: {
                args: {
                  A: 42,
                },
                id: 'Test string',
                name: 'Test string',
              },
              functionResponse: {
                id: 'Test string',
                name: 'Test string',
                response: {
                  A: 42,
                },
              },
              inlineData: {
                data: 'Test string',
                displayName: 'Test string',
                mimeType: 'Test string',
              },
              text: 'Test string',
              thought: true,
              thoughtSignature: 'Test string',
              videoMetadata: {
                endOffset: 'Test string',
                startOffset: 'Test string',
              },
            },
          ],
          role: 'Test string',
        },
        toolConfig: {
          functionCallingConfig: {
            allowedFunctionNames: ['Test string'],
            mode: 'Test string',
          },
          retrievalConfig: {
            languageCode: 'Test string',
            latLng: {
              latitude: 42,
              longitude: 42,
            },
          },
        },
        tools: [
          {
            codeExecution: {},
            computerUse: {
              environment: 'Test string',
            },
            enterpriseWebSearch: {},
            functionDeclarations: [
              {
                description: 'Test string',
                name: 'Test string',
                parameters: {
                  additionalProperties: 42,
                  anyOf: undefined,
                  default: 42,
                  defs: undefined,
                  description: 'Test string',
                  enum: ['Test string'],
                  example: 42,
                  format: 'Test string',
                  items: undefined,
                  maximum: 42,
                  maxItems: 'Test string',
                  maxLength: 'Test string',
                  maxProperties: 'Test string',
                  minimum: 42,
                  minItems: 'Test string',
                  minLength: 'Test string',
                  minProperties: 'Test string',
                  nullable: true,
                  pattern: 'Test string',
                  properties: undefined,
                  propertyOrdering: ['Test string'],
                  ref: 'Test string',
                  required: ['Test string'],
                  title: 'Test string',
                  type: 'Test string',
                },
                parametersJsonSchema: 42,
                response: {
                  additionalProperties: 42,
                  anyOf: undefined,
                  default: 42,
                  defs: undefined,
                  description: 'Test string',
                  enum: ['Test string'],
                  example: 42,
                  format: 'Test string',
                  items: undefined,
                  maximum: 42,
                  maxItems: 'Test string',
                  maxLength: 'Test string',
                  maxProperties: 'Test string',
                  minimum: 42,
                  minItems: 'Test string',
                  minLength: 'Test string',
                  minProperties: 'Test string',
                  nullable: true,
                  pattern: 'Test string',
                  properties: undefined,
                  propertyOrdering: ['Test string'],
                  ref: 'Test string',
                  required: ['Test string'],
                  title: 'Test string',
                  type: 'Test string',
                },
                responseJsonSchema: 42,
              },
            ],
            googleSearch: {},
            googleSearchRetrieval: {
              dynamicRetrievalConfig: {
                dynamicThreshold: 42,
                mode: 'Test string',
              },
            },
            retrieval: {
              disableAttribution: true,
              externalApi: {
                apiAuth: {
                  apiKeyConfig: {
                    apiKeySecretVersion: 'Test string',
                    apiKeyString: 'Test string',
                  },
                },
                apiSpec: 'Test string',
                authConfig: {
                  apiKeyConfig: {
                    apiKeySecret: 'Test string',
                    apiKeyString: 'Test string',
                    httpElementLocation: 'Test string',
                    name: 'Test string',
                  },
                  authType: 'Test string',
                  googleServiceAccountConfig: {
                    serviceAccount: 'Test string',
                  },
                  httpBasicAuthConfig: {
                    credentialSecret: 'Test string',
                  },
                  oauthConfig: {
                    accessToken: 'Test string',
                    serviceAccount: 'Test string',
                  },
                  oidcConfig: {
                    idToken: 'Test string',
                    serviceAccount: 'Test string',
                  },
                },
                elasticSearchParams: {
                  index: 'Test string',
                  numHits: 42,
                  searchTemplate: 'Test string',
                },
                endpoint: 'Test string',
                simpleSearchParams: {},
              },
              vertexAiSearch: {
                datastore: 'Test string',
                dataStoreSpecs: [
                  {
                    dataStore: 'Test string',
                    filter: 'Test string',
                  },
                ],
                engine: 'Test string',
                filter: 'Test string',
                maxResults: 42,
              },
              vertexRagStore: {
                ragCorpora: ['Test string'],
                ragResources: [
                  {
                    ragCorpus: 'Test string',
                    ragFileIds: ['Test string'],
                  },
                ],
                ragRetrievalConfig: {
                  filter: {
                    metadataFilter: 'Test string',
                    vectorDistanceThreshold: 42,
                    vectorSimilarityThreshold: 42,
                  },
                  hybridSearch: {
                    alpha: 42,
                  },
                  ranking: {
                    llmRanker: {
                      modelName: 'Test string',
                    },
                    rankService: {
                      modelName: 'Test string',
                    },
                  },
                  topK: 42,
                },
                similarityTopK: 42,
                storeContext: true,
                vectorDistanceThreshold: 42,
              },
            },
            urlContext: {},
          },
        ],
      },
    );
    /** Generate content with multimodal inputs with streaming support. */
    await gapi.client.firebaseml.projects.locations.publishers.models.streamGenerateContent(
      {
        model: 'Test string',
      },
      {
        cachedContent: 'Test string',
        contents: [
          {
            parts: [
              {
                codeExecutionResult: {
                  outcome: 'Test string',
                  output: 'Test string',
                },
                executableCode: {
                  code: 'Test string',
                  language: 'Test string',
                },
                fileData: {
                  displayName: 'Test string',
                  fileUri: 'Test string',
                  mimeType: 'Test string',
                },
                functionCall: {
                  args: {
                    A: 42,
                  },
                  id: 'Test string',
                  name: 'Test string',
                },
                functionResponse: {
                  id: 'Test string',
                  name: 'Test string',
                  response: {
                    A: 42,
                  },
                },
                inlineData: {
                  data: 'Test string',
                  displayName: 'Test string',
                  mimeType: 'Test string',
                },
                text: 'Test string',
                thought: true,
                thoughtSignature: 'Test string',
                videoMetadata: {
                  endOffset: 'Test string',
                  startOffset: 'Test string',
                },
              },
            ],
            role: 'Test string',
          },
        ],
        generationConfig: {
          audioTimestamp: true,
          candidateCount: 42,
          enableAffectiveDialog: true,
          frequencyPenalty: 42,
          logprobs: 42,
          maxOutputTokens: 42,
          mediaResolution: 'Test string',
          modelConfig: {
            featureSelectionPreference: 'Test string',
          },
          presencePenalty: 42,
          responseJsonSchema: 42,
          responseLogprobs: true,
          responseMimeType: 'Test string',
          responseModalities: ['Test string'],
          responseSchema: {
            additionalProperties: 42,
            anyOf: undefined,
            default: 42,
            defs: undefined,
            description: 'Test string',
            enum: ['Test string'],
            example: 42,
            format: 'Test string',
            items: undefined,
            maximum: 42,
            maxItems: 'Test string',
            maxLength: 'Test string',
            maxProperties: 'Test string',
            minimum: 42,
            minItems: 'Test string',
            minLength: 'Test string',
            minProperties: 'Test string',
            nullable: true,
            pattern: 'Test string',
            properties: undefined,
            propertyOrdering: ['Test string'],
            ref: 'Test string',
            required: ['Test string'],
            title: 'Test string',
            type: 'Test string',
          },
          routingConfig: {
            autoMode: {
              modelRoutingPreference: 'Test string',
            },
            manualMode: {
              modelName: 'Test string',
            },
          },
          seed: 42,
          speechConfig: {
            languageCode: 'Test string',
            voiceConfig: {
              prebuiltVoiceConfig: {
                voiceName: 'Test string',
              },
            },
          },
          stopSequences: ['Test string'],
          temperature: 42,
          thinkingConfig: {
            includeThoughts: true,
            thinkingBudget: 42,
          },
          topK: 42,
          topP: 42,
        },
        labels: {
          A: 'Test string',
        },
        safetySettings: [
          {
            category: 'Test string',
            method: 'Test string',
            threshold: 'Test string',
          },
        ],
        systemInstruction: {
          parts: [
            {
              codeExecutionResult: {
                outcome: 'Test string',
                output: 'Test string',
              },
              executableCode: {
                code: 'Test string',
                language: 'Test string',
              },
              fileData: {
                displayName: 'Test string',
                fileUri: 'Test string',
                mimeType: 'Test string',
              },
              functionCall: {
                args: {
                  A: 42,
                },
                id: 'Test string',
                name: 'Test string',
              },
              functionResponse: {
                id: 'Test string',
                name: 'Test string',
                response: {
                  A: 42,
                },
              },
              inlineData: {
                data: 'Test string',
                displayName: 'Test string',
                mimeType: 'Test string',
              },
              text: 'Test string',
              thought: true,
              thoughtSignature: 'Test string',
              videoMetadata: {
                endOffset: 'Test string',
                startOffset: 'Test string',
              },
            },
          ],
          role: 'Test string',
        },
        toolConfig: {
          functionCallingConfig: {
            allowedFunctionNames: ['Test string'],
            mode: 'Test string',
          },
          retrievalConfig: {
            languageCode: 'Test string',
            latLng: {
              latitude: 42,
              longitude: 42,
            },
          },
        },
        tools: [
          {
            codeExecution: {},
            computerUse: {
              environment: 'Test string',
            },
            enterpriseWebSearch: {},
            functionDeclarations: [
              {
                description: 'Test string',
                name: 'Test string',
                parameters: {
                  additionalProperties: 42,
                  anyOf: undefined,
                  default: 42,
                  defs: undefined,
                  description: 'Test string',
                  enum: ['Test string'],
                  example: 42,
                  format: 'Test string',
                  items: undefined,
                  maximum: 42,
                  maxItems: 'Test string',
                  maxLength: 'Test string',
                  maxProperties: 'Test string',
                  minimum: 42,
                  minItems: 'Test string',
                  minLength: 'Test string',
                  minProperties: 'Test string',
                  nullable: true,
                  pattern: 'Test string',
                  properties: undefined,
                  propertyOrdering: ['Test string'],
                  ref: 'Test string',
                  required: ['Test string'],
                  title: 'Test string',
                  type: 'Test string',
                },
                parametersJsonSchema: 42,
                response: {
                  additionalProperties: 42,
                  anyOf: undefined,
                  default: 42,
                  defs: undefined,
                  description: 'Test string',
                  enum: ['Test string'],
                  example: 42,
                  format: 'Test string',
                  items: undefined,
                  maximum: 42,
                  maxItems: 'Test string',
                  maxLength: 'Test string',
                  maxProperties: 'Test string',
                  minimum: 42,
                  minItems: 'Test string',
                  minLength: 'Test string',
                  minProperties: 'Test string',
                  nullable: true,
                  pattern: 'Test string',
                  properties: undefined,
                  propertyOrdering: ['Test string'],
                  ref: 'Test string',
                  required: ['Test string'],
                  title: 'Test string',
                  type: 'Test string',
                },
                responseJsonSchema: 42,
              },
            ],
            googleSearch: {},
            googleSearchRetrieval: {
              dynamicRetrievalConfig: {
                dynamicThreshold: 42,
                mode: 'Test string',
              },
            },
            retrieval: {
              disableAttribution: true,
              externalApi: {
                apiAuth: {
                  apiKeyConfig: {
                    apiKeySecretVersion: 'Test string',
                    apiKeyString: 'Test string',
                  },
                },
                apiSpec: 'Test string',
                authConfig: {
                  apiKeyConfig: {
                    apiKeySecret: 'Test string',
                    apiKeyString: 'Test string',
                    httpElementLocation: 'Test string',
                    name: 'Test string',
                  },
                  authType: 'Test string',
                  googleServiceAccountConfig: {
                    serviceAccount: 'Test string',
                  },
                  httpBasicAuthConfig: {
                    credentialSecret: 'Test string',
                  },
                  oauthConfig: {
                    accessToken: 'Test string',
                    serviceAccount: 'Test string',
                  },
                  oidcConfig: {
                    idToken: 'Test string',
                    serviceAccount: 'Test string',
                  },
                },
                elasticSearchParams: {
                  index: 'Test string',
                  numHits: 42,
                  searchTemplate: 'Test string',
                },
                endpoint: 'Test string',
                simpleSearchParams: {},
              },
              vertexAiSearch: {
                datastore: 'Test string',
                dataStoreSpecs: [
                  {
                    dataStore: 'Test string',
                    filter: 'Test string',
                  },
                ],
                engine: 'Test string',
                filter: 'Test string',
                maxResults: 42,
              },
              vertexRagStore: {
                ragCorpora: ['Test string'],
                ragResources: [
                  {
                    ragCorpus: 'Test string',
                    ragFileIds: ['Test string'],
                  },
                ],
                ragRetrievalConfig: {
                  filter: {
                    metadataFilter: 'Test string',
                    vectorDistanceThreshold: 42,
                    vectorSimilarityThreshold: 42,
                  },
                  hybridSearch: {
                    alpha: 42,
                  },
                  ranking: {
                    llmRanker: {
                      modelName: 'Test string',
                    },
                    rankService: {
                      modelName: 'Test string',
                    },
                  },
                  topK: 42,
                },
                similarityTopK: 42,
                storeContext: true,
                vectorDistanceThreshold: 42,
              },
            },
            urlContext: {},
          },
        ],
      },
    );
  }
});
