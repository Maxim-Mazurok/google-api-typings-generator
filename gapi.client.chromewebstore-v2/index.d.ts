/* Type definitions for non-npm package Chrome Web Store API v2 0.0 */
// Project: https://developer.chrome.com/docs/webstore/api
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://chromewebstore.googleapis.com/$discovery/rest?version=v2
// Revision: 20251022

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Chrome Web Store API v2 */
  function load(
    urlOrObject: 'https://chromewebstore.googleapis.com/$discovery/rest?version=v2',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'chromewebstore', version: 'v2'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'chromewebstore',
    version: 'v2',
    callback: () => any,
  ): void;

  namespace chromewebstore {
    interface Blobstore2Info {
      /** The blob generation id. */
      blobGeneration?: string;
      /** The blob id, e.g., /blobstore/prod/playground/scotty */
      blobId?: string;
      /** Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads. */
      downloadReadHandle?: string;
      /** The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call. */
      readToken?: string;
      /** Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads. */
      uploadMetadataContainer?: string;
    }
    interface CancelSubmissionRequest {}
    interface CancelSubmissionResponse {}
    interface CompositeMedia {
      /** Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef. */
      blobRef?: string;
      /** Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it refers to a v2 blob. */
      blobstore2Info?: Blobstore2Info;
      /** A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field. */
      cosmoBinaryReference?: string;
      /** crc32.c hash for the payload. */
      crc32cHash?: number;
      /** Media data, set if reference_type is INLINE */
      inline?: string;
      /** Size of the data, in bytes */
      length?: string;
      /** MD5 hash for the payload. */
      md5Hash?: string;
      /** Reference to a TI Blob, set if reference_type is BIGSTORE_REF. */
      objectId?: ObjectId;
      /** Path to the data, set if reference_type is PATH */
      path?: string;
      /** Describes what the field reference contains. */
      referenceType?: string;
      /** SHA-1 hash for the payload. */
      sha1Hash?: string;
    }
    interface ContentTypeInfo {
      /** Scotty's best guess of what the content type of the file is. */
      bestGuess?: string;
      /** The content type of the file derived by looking at specific bytes (i.e. "magic bytes") of the actual file. */
      fromBytes?: string;
      /** The content type of the file derived from the file extension of the original file name used by the client. */
      fromFileName?: string;
      /** The content type of the file as specified in the request headers, multipart headers, or RUPIO start request. */
      fromHeader?: string;
      /** The content type of the file derived from the file extension of the URL path. The URL path is assumed to represent a file name (which is typically only true for agents that are providing a REST API). */
      fromUrlPath?: string;
    }
    interface DeployInfo {
      /** Required. The current deploy percentage for the release channel (nonnegative number between 0 and 100). */
      deployPercentage?: number;
    }
    interface DiffChecksumsResponse {
      /** Exactly one of these fields must be populated. If checksums_location is filled, the server will return the corresponding contents to the user. If object_location is filled, the server will calculate the checksums based on the content there and return that to the user. For details on the format of the checksums, see http://go/scotty-diff-protocol. */
      checksumsLocation?: CompositeMedia;
      /** The chunk size of checksums. Must be a multiple of 256KB. */
      chunkSizeBytes?: string;
      /** If set, calculate the checksums based on the contents and return them to the caller. */
      objectLocation?: CompositeMedia;
      /** The total size of the server object. */
      objectSizeBytes?: string;
      /** The object version of the object the checksums are being returned for. */
      objectVersion?: string;
    }
    interface DiffDownloadResponse {
      /** The original object location. */
      objectLocation?: CompositeMedia;
    }
    interface DiffUploadRequest {
      /** The location of the checksums for the new object. Agents must clone the object located here, as the upload server will delete the contents once a response is received. For details on the format of the checksums, see http://go/scotty-diff-protocol. */
      checksumsInfo?: CompositeMedia;
      /** The location of the new object. Agents must clone the object located here, as the upload server will delete the contents once a response is received. */
      objectInfo?: CompositeMedia;
      /** The object version of the object that is the base version the incoming diff script will be applied to. This field will always be filled in. */
      objectVersion?: string;
    }
    interface DiffUploadResponse {
      /** The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload. */
      objectVersion?: string;
      /** The location of the original file for a diff upload request. Must be filled in if responding to an upload start notification. */
      originalObject?: CompositeMedia;
    }
    interface DiffVersionResponse {
      /** The total size of the server object. */
      objectSizeBytes?: string;
      /** The version of the object stored at the server. */
      objectVersion?: string;
    }
    interface DistributionChannel {
      /** The extension version provided in the manifest of the uploaded package. */
      crxVersion?: string;
      /** The current deploy percentage for the release channel (nonnegative number between 0 and 100). */
      deployPercentage?: number;
    }
    interface DownloadParameters {
      /** A boolean to be returned in the response to Scotty. Allows/disallows gzip encoding of the payload content when the server thinks it's advantageous (hence, does not guarantee compression) which allows Scotty to GZip the response to the client. */
      allowGzipCompression?: boolean;
      /** Determining whether or not Apiary should skip the inclusion of any Content-Range header on its response to Scotty. */
      ignoreRange?: boolean;
    }
    interface FetchItemStatusResponse {
      /** Output only. The ID of the item. */
      itemId?: string;
      /** Output only. The state of the last async upload for an item. Only set when there has been an async upload for the item in the past 24 hours. */
      lastAsyncUploadState?: string;
      /** The name of the requested item. */
      name?: string;
      /** The public key of the item, which may be generated by the store. */
      publicKey?: string;
      /** Output only. Status of the current published revision of the item. Will be unset if the item is not published. */
      publishedItemRevisionStatus?: ItemRevisionStatus;
      /** Status of the item revision submitted to be published. Will be unset if the item has not been submitted for publishing since the last successful publish. */
      submittedItemRevisionStatus?: ItemRevisionStatus;
      /** If true, the item has been taken down for a policy violation. Check the developer dashboard for details. */
      takenDown?: boolean;
      /** If true, the item has been warned for a policy violation and will be taken down if not resolved. Check the developer dashboard for details. */
      warned?: boolean;
    }
    interface ItemRevisionStatus {
      /** Details on the package of the item */
      distributionChannels?: DistributionChannel[];
      /** Output only. Current state of the item */
      state?: string;
    }
    interface Media {
      /** Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, "MD5" is the only possible value for this field. New values may be added at any time. */
      algorithm?: string;
      /** Use object_id instead. */
      bigstoreObjectRef?: string;
      /** Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef. */
      blobRef?: string;
      /** Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it refers to a v2 blob. */
      blobstore2Info?: Blobstore2Info;
      /** A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified. */
      compositeMedia?: CompositeMedia[];
      /** MIME type of the data */
      contentType?: string;
      /** Extended content type information provided for Scotty uploads. */
      contentTypeInfo?: ContentTypeInfo;
      /** A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field. */
      cosmoBinaryReference?: string;
      /** For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported. */
      crc32cHash?: number;
      /** Set if reference_type is DIFF_CHECKSUMS_RESPONSE. */
      diffChecksumsResponse?: DiffChecksumsResponse;
      /** Set if reference_type is DIFF_DOWNLOAD_RESPONSE. */
      diffDownloadResponse?: DiffDownloadResponse;
      /** Set if reference_type is DIFF_UPLOAD_REQUEST. */
      diffUploadRequest?: DiffUploadRequest;
      /** Set if reference_type is DIFF_UPLOAD_RESPONSE. */
      diffUploadResponse?: DiffUploadResponse;
      /** Set if reference_type is DIFF_VERSION_RESPONSE. */
      diffVersionResponse?: DiffVersionResponse;
      /** Parameters for a media download. */
      downloadParameters?: DownloadParameters;
      /** Original file name */
      filename?: string;
      /** Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/blobstore2/api/scotty/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media. */
      hash?: string;
      /** For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification. */
      hashVerified?: boolean;
      /** Media data, set if reference_type is INLINE */
      inline?: string;
      /** |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence. */
      isPotentialRetry?: boolean;
      /** Size of the data, in bytes */
      length?: string;
      /** Scotty-provided MD5 hash for an upload. */
      md5Hash?: string;
      /** Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA. */
      mediaId?: string;
      /** Reference to a TI Blob, set if reference_type is BIGSTORE_REF. */
      objectId?: ObjectId;
      /** Path to the data, set if reference_type is PATH */
      path?: string;
      /** Describes what the field reference contains. */
      referenceType?: string;
      /** Scotty-provided SHA1 hash for an upload. */
      sha1Hash?: string;
      /** Scotty-provided SHA256 hash for an upload. */
      sha256Hash?: string;
      /** Time at which the media data was last updated, in milliseconds since UNIX epoch */
      timestamp?: string;
      /** A unique fingerprint/version id for the media data */
      token?: string;
    }
    interface MediaRequestInfo {
      /** The number of current bytes uploaded or downloaded. */
      currentBytes?: string;
      /** Data to be copied to backend requests. Custom data is returned to Scotty in the agent_state field, which Scotty will then provide in subsequent upload notifications. */
      customData?: string;
      /** Set if the http request info is diff encoded. The value of this field is the version number of the base revision. This is corresponding to Apiary's mediaDiffObjectVersion (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java). See go/esf-scotty-diff-upload for more information. */
      diffObjectVersion?: string;
      /** The existence of the final_status field indicates that this is the last call to the agent for this request_id. http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929 */
      finalStatus?: number;
      /** The type of notification received from Scotty. */
      notificationType?: string;
      /** The physical headers provided by RequestReceivedParameters in Scotty request. type is uploader_service.KeyValuePairs. */
      physicalHeaders?: string;
      /** The Scotty request ID. */
      requestId?: string;
      /** The partition of the Scotty server handling this request. type is uploader_service.RequestReceivedParamsServingInfo LINT.IfChange(request_received_params_serving_info_annotations) LINT.ThenChange() */
      requestReceivedParamsServingInfo?: string;
      /** The total size of the file. */
      totalBytes?: string;
      /** Whether the total bytes field contains an estimated data. */
      totalBytesIsEstimated?: boolean;
    }
    interface ObjectId {
      /** The name of the bucket to which this object belongs. */
      bucketName?: string;
      /** Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions */
      generation?: string;
      /** The name of the object. */
      objectName?: string;
    }
    interface PublishItemRequest {
      /** Optional. Additional deploy information including the desired initial percentage rollout. Defaults to the current value saved in the developer dashboard if unset. */
      deployInfos?: DeployInfo[];
      /** Optional. Use this to control if the item is published immediately on approval or staged for publishing in the future. Defaults to `DEFAULT_PUBLISH` if unset. */
      publishType?: string;
      /** Optional. Whether to attempt to skip item review. The API will validate if the item qualifies and return a validation error if the item requires review. Defaults to `false` if unset. */
      skipReview?: boolean;
    }
    interface PublishItemResponse {
      /** Output only. The ID of the item. */
      itemId?: string;
      /** The name of the item that was submitted */
      name?: string;
      /** Output only. The current state of the submission. */
      state?: string;
    }
    interface SetPublishedDeployPercentageRequest {
      /** Required. Unscaled percentage value for the publised revision (nonnegative number between 0 and 100). It must be larger than the existing target percentage. */
      deployPercentage?: number;
    }
    interface SetPublishedDeployPercentageResponse {}
    interface UploadItemPackageRequest {
      /** Reference to the uploaded media. */
      blob?: Media;
      /** Info about the media upload request. */
      mediaRequestInfo?: MediaRequestInfo;
    }
    interface UploadItemPackageResponse {
      /** The extension version provided in the manifest of the uploaded package. This will not be set if the upload is still in progress (`upload_state` is `UPLOAD_IN_PROGRESS`). */
      crxVersion?: string;
      /** Output only. The ID of the item the package was uploaded to. */
      itemId?: string;
      /** The name of the item the package was uploaded to. */
      name?: string;
      /** Output only. The state of the upload. If `upload_state` is `UPLOAD_IN_PROGRESS`, you can poll for updates using the fetchStatus method. */
      uploadState?: string;
    }
    interface MediaResource {
      /** Upload a new package to an existing item. */
      upload(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to upload the new package to in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: UploadItemPackageRequest;
      }): Request<UploadItemPackageResponse>;
      upload(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item to upload the new package to in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: UploadItemPackageRequest,
      ): Request<UploadItemPackageResponse>;
    }
    interface ItemsResource {
      /** Cancel the current active submission of an item if present. This can be used to cancel the review of a pending submission. */
      cancelSubmission(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to cancel the submission of in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CancelSubmissionRequest;
      }): Request<{}>;
      cancelSubmission(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item to cancel the submission of in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CancelSubmissionRequest,
      ): Request<{}>;
      /** Fetch the status of an item. */
      fetchStatus(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to retrieve the status of in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<FetchItemStatusResponse>;
      /** Submit the item to be published in the store. The item will be submitted for review unless `skip_review` is set to true, or the item is staged from a previous submission with `publish_type` set to `STAGED_PUBLISH`. */
      publish(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: PublishItemRequest;
      }): Request<PublishItemResponse>;
      publish(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: PublishItemRequest,
      ): Request<PublishItemResponse>;
      /** Set a higher target deploy percentage for the item's published revision. This will be updated without the item being submitted for review. This is only available to items with over 10,000 seven-day active users. */
      setPublishedDeployPercentage(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to update the published revision of in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: SetPublishedDeployPercentageRequest;
      }): Request<{}>;
      setPublishedDeployPercentage(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item to update the published revision of in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetPublishedDeployPercentageRequest,
      ): Request<{}>;
    }
    interface PublishersResource {
      items: ItemsResource;
    }

    const media: MediaResource;

    const publishers: PublishersResource;
  }
}
