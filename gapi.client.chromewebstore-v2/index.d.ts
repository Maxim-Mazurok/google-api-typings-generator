/* Type definitions for non-npm package Chrome Web Store API v2 0.0 */
// Project: https://developer.chrome.com/docs/webstore/api
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://chromewebstore.googleapis.com/$discovery/rest?version=v2
// Revision: 20251028

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Chrome Web Store API v2 */
  function load(
    urlOrObject: 'https://chromewebstore.googleapis.com/$discovery/rest?version=v2',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'chromewebstore', version: 'v2'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'chromewebstore',
    version: 'v2',
    callback: () => any,
  ): void;

  namespace chromewebstore {
    interface CancelSubmissionRequest {}
    interface CancelSubmissionResponse {}
    interface DeployInfo {
      /** Required. The current deploy percentage for the release channel (nonnegative number between 0 and 100). */
      deployPercentage?: number;
    }
    interface DistributionChannel {
      /** The extension version provided in the manifest of the uploaded package. */
      crxVersion?: string;
      /** The current deploy percentage for the release channel (nonnegative number between 0 and 100). */
      deployPercentage?: number;
    }
    interface FetchItemStatusResponse {
      /** Output only. The ID of the item. */
      itemId?: string;
      /** Output only. The state of the last async upload for an item. Only set when there has been an async upload for the item in the past 24 hours. */
      lastAsyncUploadState?: string;
      /** The name of the requested item. */
      name?: string;
      /** The public key of the item, which may be generated by the store. */
      publicKey?: string;
      /** Output only. Status of the current published revision of the item. Will be unset if the item is not published. */
      publishedItemRevisionStatus?: ItemRevisionStatus;
      /** Status of the item revision submitted to be published. Will be unset if the item has not been submitted for publishing since the last successful publish. */
      submittedItemRevisionStatus?: ItemRevisionStatus;
      /** If true, the item has been taken down for a policy violation. Check the developer dashboard for details. */
      takenDown?: boolean;
      /** If true, the item has been warned for a policy violation and will be taken down if not resolved. Check the developer dashboard for details. */
      warned?: boolean;
    }
    interface ItemRevisionStatus {
      /** Details on the package of the item */
      distributionChannels?: DistributionChannel[];
      /** Output only. Current state of the item */
      state?: string;
    }
    interface PublishItemRequest {
      /** Optional. Additional deploy information including the desired initial percentage rollout. Defaults to the current value saved in the developer dashboard if unset. */
      deployInfos?: DeployInfo[];
      /** Optional. Use this to control if the item is published immediately on approval or staged for publishing in the future. Defaults to `DEFAULT_PUBLISH` if unset. */
      publishType?: string;
      /** Optional. Whether to attempt to skip item review. The API will validate if the item qualifies and return a validation error if the item requires review. Defaults to `false` if unset. */
      skipReview?: boolean;
    }
    interface PublishItemResponse {
      /** Output only. The ID of the item. */
      itemId?: string;
      /** The name of the item that was submitted */
      name?: string;
      /** Output only. The current state of the submission. */
      state?: string;
    }
    interface SetPublishedDeployPercentageRequest {
      /** Required. Unscaled percentage value for the publised revision (nonnegative number between 0 and 100). It must be larger than the existing target percentage. */
      deployPercentage?: number;
    }
    interface SetPublishedDeployPercentageResponse {}
    interface UploadItemPackageRequest {}
    interface UploadItemPackageResponse {
      /** The extension version provided in the manifest of the uploaded package. This will not be set if the upload is still in progress (`upload_state` is `UPLOAD_IN_PROGRESS`). */
      crxVersion?: string;
      /** Output only. The ID of the item the package was uploaded to. */
      itemId?: string;
      /** The name of the item the package was uploaded to. */
      name?: string;
      /** Output only. The state of the upload. If `upload_state` is `UPLOAD_IN_PROGRESS`, you can poll for updates using the fetchStatus method. */
      uploadState?: string;
    }
    interface MediaResource {
      /** Upload a new package to an existing item. */
      upload(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to upload the new package to in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: UploadItemPackageRequest;
      }): Request<UploadItemPackageResponse>;
      upload(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item to upload the new package to in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: UploadItemPackageRequest,
      ): Request<UploadItemPackageResponse>;
    }
    interface ItemsResource {
      /** Cancel the current active submission of an item if present. This can be used to cancel the review of a pending submission. */
      cancelSubmission(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to cancel the submission of in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CancelSubmissionRequest;
      }): Request<{}>;
      cancelSubmission(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item to cancel the submission of in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CancelSubmissionRequest,
      ): Request<{}>;
      /** Fetch the status of an item. */
      fetchStatus(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to retrieve the status of in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<FetchItemStatusResponse>;
      /** Submit the item to be published in the store. The item will be submitted for review unless `skip_review` is set to true, or the item is staged from a previous submission with `publish_type` set to `STAGED_PUBLISH`. */
      publish(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: PublishItemRequest;
      }): Request<PublishItemResponse>;
      publish(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: PublishItemRequest,
      ): Request<PublishItemResponse>;
      /** Set a higher target deploy percentage for the item's published revision. This will be updated without the item being submitted for review. This is only available to items with over 10,000 seven-day active users. */
      setPublishedDeployPercentage(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the item to update the published revision of in the form `publishers/{publisherId}/items/{itemId}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: SetPublishedDeployPercentageRequest;
      }): Request<{}>;
      setPublishedDeployPercentage(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Name of the item to update the published revision of in the form `publishers/{publisherId}/items/{itemId}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetPublishedDeployPercentageRequest,
      ): Request<{}>;
    }
    interface PublishersResource {
      items: ItemsResource;
    }

    const media: MediaResource;

    const publishers: PublishersResource;
  }
}
