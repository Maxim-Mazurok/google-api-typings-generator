/* This is stub file for gapi.client.chromewebstore-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20251022

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://chromewebstore.googleapis.com/$discovery/rest?version=v2',
  );
  /** now we can use gapi.client.chromewebstore */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, update, or publish your Chrome Web Store extensions, themes, apps, and licences you have access to */
    'https://www.googleapis.com/auth/chromewebstore',
    /** See and download your Chrome Web Store extensions and apps, and see licenses you have access to */
    'https://www.googleapis.com/auth/chromewebstore.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Upload a new package to an existing item. */
    await gapi.client.chromewebstore.media.upload(
      {
        name: 'Test string',
      },
      {
        blob: {
          algorithm: 'Test string',
          bigstoreObjectRef: 'Test string',
          blobRef: 'Test string',
          blobstore2Info: {
            blobGeneration: 'Test string',
            blobId: 'Test string',
            downloadReadHandle: 'Test string',
            readToken: 'Test string',
            uploadMetadataContainer: 'Test string',
          },
          compositeMedia: [
            {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
          ],
          contentType: 'Test string',
          contentTypeInfo: {
            bestGuess: 'Test string',
            fromBytes: 'Test string',
            fromFileName: 'Test string',
            fromHeader: 'Test string',
            fromUrlPath: 'Test string',
          },
          cosmoBinaryReference: 'Test string',
          crc32cHash: 42,
          diffChecksumsResponse: {
            checksumsLocation: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            chunkSizeBytes: 'Test string',
            objectLocation: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            objectSizeBytes: 'Test string',
            objectVersion: 'Test string',
          },
          diffDownloadResponse: {
            objectLocation: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
          },
          diffUploadRequest: {
            checksumsInfo: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            objectInfo: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
            objectVersion: 'Test string',
          },
          diffUploadResponse: {
            objectVersion: 'Test string',
            originalObject: {
              blobRef: 'Test string',
              blobstore2Info: {
                blobGeneration: 'Test string',
                blobId: 'Test string',
                downloadReadHandle: 'Test string',
                readToken: 'Test string',
                uploadMetadataContainer: 'Test string',
              },
              cosmoBinaryReference: 'Test string',
              crc32cHash: 42,
              inline: 'Test string',
              length: 'Test string',
              md5Hash: 'Test string',
              objectId: {
                bucketName: 'Test string',
                generation: 'Test string',
                objectName: 'Test string',
              },
              path: 'Test string',
              referenceType: 'Test string',
              sha1Hash: 'Test string',
            },
          },
          diffVersionResponse: {
            objectSizeBytes: 'Test string',
            objectVersion: 'Test string',
          },
          downloadParameters: {
            allowGzipCompression: true,
            ignoreRange: true,
          },
          filename: 'Test string',
          hash: 'Test string',
          hashVerified: true,
          inline: 'Test string',
          isPotentialRetry: true,
          length: 'Test string',
          md5Hash: 'Test string',
          mediaId: 'Test string',
          objectId: {
            bucketName: 'Test string',
            generation: 'Test string',
            objectName: 'Test string',
          },
          path: 'Test string',
          referenceType: 'Test string',
          sha1Hash: 'Test string',
          sha256Hash: 'Test string',
          timestamp: 'Test string',
          token: 'Test string',
        },
        mediaRequestInfo: {
          currentBytes: 'Test string',
          customData: 'Test string',
          diffObjectVersion: 'Test string',
          finalStatus: 42,
          notificationType: 'Test string',
          physicalHeaders: 'Test string',
          requestId: 'Test string',
          requestReceivedParamsServingInfo: 'Test string',
          totalBytes: 'Test string',
          totalBytesIsEstimated: true,
        },
      },
    );
    /** Cancel the current active submission of an item if present. This can be used to cancel the review of a pending submission. */
    await gapi.client.chromewebstore.publishers.items.cancelSubmission(
      {
        name: 'Test string',
      },
      {},
    );
    /** Fetch the status of an item. */
    await gapi.client.chromewebstore.publishers.items.fetchStatus({
      name: 'Test string',
    });
    /** Submit the item to be published in the store. The item will be submitted for review unless `skip_review` is set to true, or the item is staged from a previous submission with `publish_type` set to `STAGED_PUBLISH`. */
    await gapi.client.chromewebstore.publishers.items.publish(
      {
        name: 'Test string',
      },
      {
        deployInfos: [
          {
            deployPercentage: 42,
          },
        ],
        publishType: 'Test string',
        skipReview: true,
      },
    );
    /** Set a higher target deploy percentage for the item's published revision. This will be updated without the item being submitted for review. This is only available to items with over 10,000 seven-day active users. */
    await gapi.client.chromewebstore.publishers.items.setPublishedDeployPercentage(
      {
        name: 'Test string',
      },
      {
        deployPercentage: 42,
      },
    );
  }
});
