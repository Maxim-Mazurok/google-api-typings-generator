/* This is stub file for gapi.client.vmwareengine-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241009

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://vmwareengine.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.vmwareengine */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.vmwareengine.projects.locations.get({
      name: 'Test string',
    });
    /** Gets all the principals having bind permission on the intranet VPC associated with the consumer project granted by the Grant API. DnsBindPermission is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.getDnsBindPermission({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.vmwareengine.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Grants the bind permission to the customer provided principal(user / service account) to bind their DNS zone with the intranet VPC associated with the project. DnsBindPermission is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.dnsBindPermission.grant(
      {
        name: 'Test string',
      },
      {
        principal: {
          serviceAccount: 'Test string',
          user: 'Test string',
        },
        requestId: 'Test string',
      }
    );
    /** Revokes the bind permission from the customer provided principal(user / service account) on the intranet VPC associated with the consumer project. DnsBindPermission is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.dnsBindPermission.revoke(
      {
        name: 'Test string',
      },
      {
        principal: {
          serviceAccount: 'Test string',
          user: 'Test string',
        },
        requestId: 'Test string',
      }
    );
    /** Creates a new network peering between the peer network and VMware Engine network provided in a `NetworkPeering` resource. NetworkPeering is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.networkPeerings.create(
      {
        networkPeeringId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        exchangeSubnetRoutes: true,
        exportCustomRoutes: true,
        exportCustomRoutesWithPublicIp: true,
        importCustomRoutes: true,
        importCustomRoutesWithPublicIp: true,
        name: 'Test string',
        peerMtu: 42,
        peerNetwork: 'Test string',
        peerNetworkType: 'Test string',
        state: 'Test string',
        stateDetails: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
      }
    );
    /** Deletes a `NetworkPeering` resource. When a network peering is deleted for a VMware Engine network, the peer network becomes inaccessible to that VMware Engine network. NetworkPeering is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.networkPeerings.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Retrieves a `NetworkPeering` resource by its resource name. The resource contains details of the network peering, such as peered networks, import and export custom route configurations, and peering state. NetworkPeering is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.networkPeerings.get({
      name: 'Test string',
    });
    /** Lists `NetworkPeering` resources in a given project. NetworkPeering is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.networkPeerings.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Modifies a `NetworkPeering` resource. Only the `description` field can be updated. Only fields specified in `updateMask` are applied. NetworkPeering is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.networkPeerings.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        exchangeSubnetRoutes: true,
        exportCustomRoutes: true,
        exportCustomRoutesWithPublicIp: true,
        importCustomRoutes: true,
        importCustomRoutesWithPublicIp: true,
        name: 'Test string',
        peerMtu: 42,
        peerNetwork: 'Test string',
        peerNetworkType: 'Test string',
        state: 'Test string',
        stateDetails: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
      }
    );
    /** Lists the network peering routes exchanged over a peering connection. NetworkPeering is a global resource and location can only be global. */
    await gapi.client.vmwareengine.projects.locations.networkPeerings.peeringRoutes.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a new network policy in a given VMware Engine network of a project and location (region). A new network policy cannot be created if another network policy already exists in the same scope. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.create(
      {
        networkPolicyId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        edgeServicesCidr: 'Test string',
        externalIp: {
          enabled: true,
          state: 'Test string',
        },
        internetAccess: {
          enabled: true,
          state: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
        vmwareEngineNetworkCanonical: 'Test string',
      }
    );
    /** Deletes a `NetworkPolicy` resource. A network policy cannot be deleted when `NetworkService.state` is set to `RECONCILING` for either its external IP or internet access service. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Lists external IP addresses assigned to VMware workload VMs within the scope of the given network policy. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.fetchExternalAddresses(
      {
        networkPolicy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Retrieves a `NetworkPolicy` resource by its resource name. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.get({
      name: 'Test string',
    });
    /** Lists `NetworkPolicy` resources in a specified project and location. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Modifies a `NetworkPolicy` resource. Only the following fields can be updated: `internet_access`, `external_ip`, `edge_services_cidr`. Only fields specified in `updateMask` are applied. When updating a network policy, the external IP network service can only be disabled if there are no external IP addresses present in the scope of the policy. Also, a `NetworkService` cannot be updated when `NetworkService.state` is set to `RECONCILING`. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        edgeServicesCidr: 'Test string',
        externalIp: {
          enabled: true,
          state: 'Test string',
        },
        internetAccess: {
          enabled: true,
          state: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
        vmwareEngineNetworkCanonical: 'Test string',
      }
    );
    /** Creates a new external access rule in a given network policy. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.externalAccessRules.create(
      {
        externalAccessRuleId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        action: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        destinationIpRanges: [
          {
            externalAddress: 'Test string',
            ipAddress: 'Test string',
            ipAddressRange: 'Test string',
          },
        ],
        destinationPorts: ['Test string'],
        ipProtocol: 'Test string',
        name: 'Test string',
        priority: 42,
        sourceIpRanges: [
          {
            externalAddress: 'Test string',
            ipAddress: 'Test string',
            ipAddressRange: 'Test string',
          },
        ],
        sourcePorts: ['Test string'],
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a single external access rule. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.externalAccessRules.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Gets details of a single external access rule. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.externalAccessRules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists `ExternalAccessRule` resources in the specified network policy. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.externalAccessRules.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the parameters of a single external access rule. Only fields specified in `update_mask` are applied. */
    await gapi.client.vmwareengine.projects.locations.networkPolicies.externalAccessRules.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        action: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        destinationIpRanges: [
          {
            externalAddress: 'Test string',
            ipAddress: 'Test string',
            ipAddressRange: 'Test string',
          },
        ],
        destinationPorts: ['Test string'],
        ipProtocol: 'Test string',
        name: 'Test string',
        priority: 42,
        sourceIpRanges: [
          {
            externalAddress: 'Test string',
            ipAddress: 'Test string',
            ipAddressRange: 'Test string',
          },
        ],
        sourcePorts: ['Test string'],
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Gets details of a single `NodeType`. */
    await gapi.client.vmwareengine.projects.locations.nodeTypes.get({
      name: 'Test string',
    });
    /** Lists node types */
    await gapi.client.vmwareengine.projects.locations.nodeTypes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.vmwareengine.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.vmwareengine.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.vmwareengine.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new `PrivateCloud` resource in a given project and location. Private clouds of type `STANDARD` and `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are regional. Creating a private cloud also creates a [management cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components) for that private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.create(
      {
        parent: 'Test string',
        privateCloudId: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        expireTime: 'Test string',
        hcx: {
          fqdn: 'Test string',
          internalIp: 'Test string',
          state: 'Test string',
          version: 'Test string',
        },
        managementCluster: {
          clusterId: 'Test string',
          nodeTypeConfigs: {
            A: {
              customCoreCount: 42,
              nodeCount: 42,
            },
          },
          stretchedClusterConfig: {
            preferredLocation: 'Test string',
            secondaryLocation: 'Test string',
          },
        },
        name: 'Test string',
        networkConfig: {
          dnsServerIp: 'Test string',
          managementCidr: 'Test string',
          managementIpAddressLayoutVersion: 42,
          vmwareEngineNetwork: 'Test string',
          vmwareEngineNetworkCanonical: 'Test string',
        },
        nsx: {
          fqdn: 'Test string',
          internalIp: 'Test string',
          state: 'Test string',
          version: 'Test string',
        },
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vcenter: {
          fqdn: 'Test string',
          internalIp: 'Test string',
          state: 'Test string',
          version: 'Test string',
        },
      }
    );
    /** Schedules a `PrivateCloud` resource for deletion. A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state` set to `DELETED` and `expireTime` set to the time when deletion is final and can no longer be reversed. The delete operation is marked as done as soon as the `PrivateCloud` is successfully scheduled for deletion (this also applies when `delayHours` is set to zero), and the operation is not kept in pending state until `PrivateCloud` is purged. `PrivateCloud` can be restored using `UndeletePrivateCloud` method before the `expireTime` elapses. When `expireTime` is reached, deletion is final and all private cloud resources are irreversibly removed and billing stops. During the final removal process, `PrivateCloud.state` is set to `PURGING`. `PrivateCloud` can be polled using standard `GET` method for the whole period of deletion and purging. It will not be returned only when it is completely purged. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.delete({
      delayHours: 42,
      force: true,
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Retrieves a `PrivateCloud` resource by its resource name. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.get({
      name: 'Test string',
    });
    /** Gets details of the `DnsForwarding` config. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.getDnsForwarding(
      {
        name: 'Test string',
      }
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists `PrivateCloud` resources in a given project and location. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Modifies a `PrivateCloud` resource. Only the following fields can be updated: `description`. Only fields specified in `updateMask` are applied. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        expireTime: 'Test string',
        hcx: {
          fqdn: 'Test string',
          internalIp: 'Test string',
          state: 'Test string',
          version: 'Test string',
        },
        managementCluster: {
          clusterId: 'Test string',
          nodeTypeConfigs: {
            A: {
              customCoreCount: 42,
              nodeCount: 42,
            },
          },
          stretchedClusterConfig: {
            preferredLocation: 'Test string',
            secondaryLocation: 'Test string',
          },
        },
        name: 'Test string',
        networkConfig: {
          dnsServerIp: 'Test string',
          managementCidr: 'Test string',
          managementIpAddressLayoutVersion: 42,
          vmwareEngineNetwork: 'Test string',
          vmwareEngineNetworkCanonical: 'Test string',
        },
        nsx: {
          fqdn: 'Test string',
          internalIp: 'Test string',
          state: 'Test string',
          version: 'Test string',
        },
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vcenter: {
          fqdn: 'Test string',
          internalIp: 'Test string',
          state: 'Test string',
          version: 'Test string',
        },
      }
    );
    /** Resets credentials of the NSX appliance. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.resetNsxCredentials(
      {
        privateCloud: 'Test string',
      },
      {
        requestId: 'Test string',
      }
    );
    /** Resets credentials of the Vcenter appliance. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.resetVcenterCredentials(
      {
        privateCloud: 'Test string',
      },
      {
        requestId: 'Test string',
        username: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Gets details of credentials for NSX appliance. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.showNsxCredentials(
      {
        privateCloud: 'Test string',
      }
    );
    /** Gets details of credentials for Vcenter appliance. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.showVcenterCredentials(
      {
        privateCloud: 'Test string',
        username: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Restores a private cloud that was previously scheduled for deletion by `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to the time when deletion can no longer be reversed. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.undelete(
      {
        name: 'Test string',
      },
      {
        requestId: 'Test string',
      }
    );
    /** Updates the parameters of the `DnsForwarding` config, like associated domains. Only fields specified in `update_mask` are applied. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.updateDnsForwarding(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        forwardingRules: [
          {
            domain: 'Test string',
            nameServers: ['Test string'],
          },
        ],
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a new cluster in a given private cloud. Creating a new cluster provides additional nodes for use in the parent private cloud and requires sufficient [node quota](https://cloud.google.com/vmware-engine/quotas). */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.create(
      {
        clusterId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        autoscalingSettings: {
          autoscalingPolicies: {
            A: {
              consumedMemoryThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
              cpuThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
              grantedMemoryThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
              nodeTypeId: 'Test string',
              scaleOutSize: 42,
              storageThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
            },
          },
          coolDownPeriod: 'Test string',
          maxClusterNodeCount: 42,
          minClusterNodeCount: 42,
        },
        createTime: 'Test string',
        management: true,
        name: 'Test string',
        nodeTypeConfigs: {
          A: {
            customCoreCount: 42,
            nodeCount: 42,
          },
        },
        state: 'Test string',
        stretchedClusterConfig: {
          preferredLocation: 'Test string',
          secondaryLocation: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a `Cluster` resource. To avoid unintended data loss, migrate or gracefully shut down any workloads running on the cluster before deletion. You cannot delete the management cluster of a private cloud using this method. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Retrieves a `Cluster` resource by its resource name. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.get(
      {
        name: 'Test string',
      }
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists `Cluster` resources in a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Modifies a `Cluster` resource. Only fields specified in `updateMask` are applied. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        autoscalingSettings: {
          autoscalingPolicies: {
            A: {
              consumedMemoryThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
              cpuThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
              grantedMemoryThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
              nodeTypeId: 'Test string',
              scaleOutSize: 42,
              storageThresholds: {
                scaleIn: 42,
                scaleOut: 42,
              },
            },
          },
          coolDownPeriod: 'Test string',
          maxClusterNodeCount: 42,
          minClusterNodeCount: 42,
        },
        createTime: 'Test string',
        management: true,
        name: 'Test string',
        nodeTypeConfigs: {
          A: {
            customCoreCount: 42,
            nodeCount: 42,
          },
        },
        state: 'Test string',
        stretchedClusterConfig: {
          preferredLocation: 'Test string',
          secondaryLocation: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Gets details of a single node. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.nodes.get(
      {
        name: 'Test string',
      }
    );
    /** Lists nodes in a given cluster. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.clusters.nodes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a new `ExternalAddress` resource in a given private cloud. The network policy that corresponds to the private cloud must have the external IP address network service enabled (`NetworkPolicy.external_ip`). */
    await gapi.client.vmwareengine.projects.locations.privateClouds.externalAddresses.create(
      {
        externalAddressId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        externalIp: 'Test string',
        internalIp: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a single external IP address. When you delete an external IP address, connectivity between the external IP address and the corresponding internal IP address is lost. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.externalAddresses.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Gets details of a single external IP address. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.externalAddresses.get(
      {
        name: 'Test string',
      }
    );
    /** Lists external IP addresses assigned to VMware workload VMs in a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.externalAddresses.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the parameters of a single external IP address. Only fields specified in `update_mask` are applied. During operation processing, the resource is temporarily in the `ACTIVE` state before the operation fully completes. For that period of time, you can't update the resource. Use the operation status to determine when the processing fully completes. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.externalAddresses.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        externalIp: 'Test string',
        internalIp: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a new HCX activation key in a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.hcxActivationKeys.create(
      {
        hcxActivationKeyId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        activationKey: 'Test string',
        createTime: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
      }
    );
    /** Retrieves a `HcxActivationKey` resource by its resource name. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.hcxActivationKeys.get(
      {
        name: 'Test string',
      }
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.hcxActivationKeys.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists `HcxActivationKey` resources in a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.hcxActivationKeys.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.hcxActivationKeys.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.hcxActivationKeys.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Create a new logging server for a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.loggingServers.create(
      {
        loggingServerId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        hostname: 'Test string',
        name: 'Test string',
        port: 42,
        protocol: 'Test string',
        sourceType: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a single logging server. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.loggingServers.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Gets details of a logging server. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.loggingServers.get(
      {
        name: 'Test string',
      }
    );
    /** Lists logging servers configured for a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.loggingServers.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the parameters of a single logging server. Only fields specified in `update_mask` are applied. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.loggingServers.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        hostname: 'Test string',
        name: 'Test string',
        port: 42,
        protocol: 'Test string',
        sourceType: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a new `ManagementDnsZoneBinding` resource in a private cloud. This RPC creates the DNS binding and the resource that represents the DNS binding of the consumer VPC network to the management DNS zone. A management DNS zone is the Cloud DNS cross-project binding zone that VMware Engine creates for each private cloud. It contains FQDNs and corresponding IP addresses for the private cloud's ESXi hosts and management VM appliances like vCenter and NSX Manager. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.managementDnsZoneBindings.create(
      {
        managementDnsZoneBindingId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
        vpcNetwork: 'Test string',
      }
    );
    /** Deletes a `ManagementDnsZoneBinding` resource. When a management DNS zone binding is deleted, the corresponding consumer VPC network is no longer bound to the management DNS zone. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.managementDnsZoneBindings.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Retrieves a 'ManagementDnsZoneBinding' resource by its resource name. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.managementDnsZoneBindings.get(
      {
        name: 'Test string',
      }
    );
    /** Lists Consumer VPCs bound to Management DNS Zone of a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.managementDnsZoneBindings.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a `ManagementDnsZoneBinding` resource. Only fields specified in `update_mask` are applied. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.managementDnsZoneBindings.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
        vpcNetwork: 'Test string',
      }
    );
    /** Retries to create a `ManagementDnsZoneBinding` resource that is in failed state. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.managementDnsZoneBindings.repair(
      {
        name: 'Test string',
      },
      {
        requestId: 'Test string',
      }
    );
    /** Gets details of a single subnet. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.subnets.get(
      {
        name: 'Test string',
      }
    );
    /** Lists subnets in a given private cloud. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.subnets.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the parameters of a single subnet. Only fields specified in `update_mask` are applied. *Note*: This API is synchronous and always returns a successful `google.longrunning.Operation` (LRO). The returned LRO will only have `done` and `response` fields. */
    await gapi.client.vmwareengine.projects.locations.privateClouds.subnets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        gatewayIp: 'Test string',
        ipCidrRange: 'Test string',
        name: 'Test string',
        state: 'Test string',
        type: 'Test string',
        vlanId: 42,
      }
    );
    /** Creates a new private connection that can be used for accessing private Clouds. */
    await gapi.client.vmwareengine.projects.locations.privateConnections.create(
      {
        parent: 'Test string',
        privateConnectionId: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        peeringId: 'Test string',
        peeringState: 'Test string',
        routingMode: 'Test string',
        serviceNetwork: 'Test string',
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
        vmwareEngineNetworkCanonical: 'Test string',
      }
    );
    /** Deletes a `PrivateConnection` resource. When a private connection is deleted for a VMware Engine network, the connected network becomes inaccessible to that VMware Engine network. */
    await gapi.client.vmwareengine.projects.locations.privateConnections.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Retrieves a `PrivateConnection` resource by its resource name. The resource contains details of the private connection, such as connected network, routing mode and state. */
    await gapi.client.vmwareengine.projects.locations.privateConnections.get({
      name: 'Test string',
    });
    /** Lists `PrivateConnection` resources in a given project and location. */
    await gapi.client.vmwareengine.projects.locations.privateConnections.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Modifies a `PrivateConnection` resource. Only `description` and `routing_mode` fields can be updated. Only fields specified in `updateMask` are applied. */
    await gapi.client.vmwareengine.projects.locations.privateConnections.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        peeringId: 'Test string',
        peeringState: 'Test string',
        routingMode: 'Test string',
        serviceNetwork: 'Test string',
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vmwareEngineNetwork: 'Test string',
        vmwareEngineNetworkCanonical: 'Test string',
      }
    );
    /** Lists the private connection routes exchanged over a peering connection. */
    await gapi.client.vmwareengine.projects.locations.privateConnections.peeringRoutes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a new VMware Engine network that can be used by a private cloud. */
    await gapi.client.vmwareengine.projects.locations.vmwareEngineNetworks.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        vmwareEngineNetworkId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vpcNetworks: [
          {
            network: 'Test string',
            type: 'Test string',
          },
        ],
      }
    );
    /** Deletes a `VmwareEngineNetwork` resource. You can only delete a VMware Engine network after all resources that refer to it are deleted. For example, a private cloud, a network peering, and a network policy can all refer to the same VMware Engine network. */
    await gapi.client.vmwareengine.projects.locations.vmwareEngineNetworks.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Retrieves a `VmwareEngineNetwork` resource by its resource name. The resource contains details of the VMware Engine network, such as its VMware Engine network type, peered networks in a service project, and state (for example, `CREATING`, `ACTIVE`, `DELETING`). */
    await gapi.client.vmwareengine.projects.locations.vmwareEngineNetworks.get({
      name: 'Test string',
    });
    /** Lists `VmwareEngineNetwork` resources in a given project and location. */
    await gapi.client.vmwareengine.projects.locations.vmwareEngineNetworks.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Modifies a VMware Engine network resource. Only the following fields can be updated: `description`. Only fields specified in `updateMask` are applied. */
    await gapi.client.vmwareengine.projects.locations.vmwareEngineNetworks.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        vpcNetworks: [
          {
            network: 'Test string',
            type: 'Test string',
          },
        ],
      }
    );
  }
});
