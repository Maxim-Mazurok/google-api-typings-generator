/* This is stub file for gapi.client.datamigration-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230802

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://datamigration.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.datamigration */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.datamigration.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.datamigration.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new connection profile in a given project and location. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.create({
            connectionProfileId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            cloudsql: {
                cloudSqlId: "Test string",
                privateIp: "Test string",
                publicIp: "Test string",
                settings: {
                    activationPolicy: "Test string",
                    autoStorageIncrease: true,
                    databaseFlags: {
                        A: "Test string"
                    },
                    databaseVersion: "Test string",
                    dataDiskSizeGb: "Test string",
                    dataDiskType: "Test string",
                    ipConfig: {
                        authorizedNetworks: [
                            {
                                expireTime: "Test string",
                                label: "Test string",
                                ttl: "Test string",
                                value: "Test string",
                            }
                        ],
                        enableIpv4: true,
                        privateNetwork: "Test string",
                        requireSsl: true,
                    },
                    rootPassword: "Test string",
                    rootPasswordSet: true,
                    sourceId: "Test string",
                    storageAutoResizeLimit: "Test string",
                    tier: "Test string",
                    userLabels: {
                        A: "Test string"
                    },
                    zone: "Test string",
                },
            },
            createTime: "Test string",
            displayName: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            labels: {
                A: "Test string"
            },
            mysql: {
                cloudSqlId: "Test string",
                host: "Test string",
                password: "Test string",
                passwordSet: true,
                port: 42,
                ssl: {
                    caCertificate: "Test string",
                    clientCertificate: "Test string",
                    clientKey: "Test string",
                    type: "Test string",
                },
                username: "Test string",
            },
            name: "Test string",
            provider: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single Database Migration Service connection profile. A connection profile can only be deleted if it is not in use by any active migration jobs. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.delete({
            force: true,
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets details of a single connection profile. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Retrieve a list of all connection profiles in a given project and location. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update the configuration of a single connection profile. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            cloudsql: {
                cloudSqlId: "Test string",
                privateIp: "Test string",
                publicIp: "Test string",
                settings: {
                    activationPolicy: "Test string",
                    autoStorageIncrease: true,
                    databaseFlags: {
                        A: "Test string"
                    },
                    databaseVersion: "Test string",
                    dataDiskSizeGb: "Test string",
                    dataDiskType: "Test string",
                    ipConfig: {
                        authorizedNetworks: [
                            {
                                expireTime: "Test string",
                                label: "Test string",
                                ttl: "Test string",
                                value: "Test string",
                            }
                        ],
                        enableIpv4: true,
                        privateNetwork: "Test string",
                        requireSsl: true,
                    },
                    rootPassword: "Test string",
                    rootPasswordSet: true,
                    sourceId: "Test string",
                    storageAutoResizeLimit: "Test string",
                    tier: "Test string",
                    userLabels: {
                        A: "Test string"
                    },
                    zone: "Test string",
                },
            },
            createTime: "Test string",
            displayName: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            labels: {
                A: "Test string"
            },
            mysql: {
                cloudSqlId: "Test string",
                host: "Test string",
                password: "Test string",
                passwordSet: true,
                port: 42,
                ssl: {
                    caCertificate: "Test string",
                    clientCertificate: "Test string",
                    clientKey: "Test string",
                    type: "Test string",
                },
                username: "Test string",
            },
            name: "Test string",
            provider: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.datamigration.projects.locations.connectionProfiles.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.datamigration.projects.locations.connectionProfiles.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a new migration job in a given project and location. */
        await gapi.client.datamigration.projects.locations.migrationJobs.create({
            migrationJobId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            createTime: "Test string",
            destination: "Test string",
            destinationDatabase: {
                engine: "Test string",
                provider: "Test string",
            },
            displayName: "Test string",
            dumpPath: "Test string",
            duration: "Test string",
            endTime: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            phase: "Test string",
            reverseSshConnectivity: {
                vm: "Test string",
                vmIp: "Test string",
                vmPort: 42,
                vpc: "Test string",
            },
            source: "Test string",
            sourceDatabase: {
                engine: "Test string",
                provider: "Test string",
            },
            state: "Test string",
            staticIpConnectivity: {
            },
            type: "Test string",
            updateTime: "Test string",
            vpcPeeringConnectivity: {
                vpc: "Test string",
            },
        });
        /** Deletes a single migration job. */
        await gapi.client.datamigration.projects.locations.migrationJobs.delete({
            force: true,
            name: "Test string",
            requestId: "Test string",
        });
        /** Generate a SSH configuration script to configure the reverse SSH connectivity. */
        await gapi.client.datamigration.projects.locations.migrationJobs.generateSshScript({
            migrationJob: "Test string",
        }, {
            vm: "Test string",
            vmCreationConfig: {
                subnet: "Test string",
                vmMachineType: "Test string",
                vmZone: "Test string",
            },
            vmPort: 42,
            vmSelectionConfig: {
                vmZone: "Test string",
            },
        });
        /** Gets details of a single migration job. */
        await gapi.client.datamigration.projects.locations.migrationJobs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.datamigration.projects.locations.migrationJobs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists migration jobs in a given project and location. */
        await gapi.client.datamigration.projects.locations.migrationJobs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single migration job. */
        await gapi.client.datamigration.projects.locations.migrationJobs.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            destination: "Test string",
            destinationDatabase: {
                engine: "Test string",
                provider: "Test string",
            },
            displayName: "Test string",
            dumpPath: "Test string",
            duration: "Test string",
            endTime: "Test string",
            error: {
                code: 42,
                details: [
                    {
                        A: 42
                    }
                ],
                message: "Test string",
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            phase: "Test string",
            reverseSshConnectivity: {
                vm: "Test string",
                vmIp: "Test string",
                vmPort: 42,
                vpc: "Test string",
            },
            source: "Test string",
            sourceDatabase: {
                engine: "Test string",
                provider: "Test string",
            },
            state: "Test string",
            staticIpConnectivity: {
            },
            type: "Test string",
            updateTime: "Test string",
            vpcPeeringConnectivity: {
                vpc: "Test string",
            },
        });
        /** Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database. */
        await gapi.client.datamigration.projects.locations.migrationJobs.promote({
            name: "Test string",
        }, {
        });
        /** Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch. */
        await gapi.client.datamigration.projects.locations.migrationJobs.restart({
            name: "Test string",
        }, {
        });
        /** Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase). */
        await gapi.client.datamigration.projects.locations.migrationJobs.resume({
            name: "Test string",
        }, {
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.datamigration.projects.locations.migrationJobs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Start an already created migration job. */
        await gapi.client.datamigration.projects.locations.migrationJobs.start({
            name: "Test string",
        }, {
        });
        /** Stops a running migration job. */
        await gapi.client.datamigration.projects.locations.migrationJobs.stop({
            name: "Test string",
        }, {
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.datamigration.projects.locations.migrationJobs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met. */
        await gapi.client.datamigration.projects.locations.migrationJobs.verify({
            name: "Test string",
        }, {
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datamigration.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datamigration.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datamigration.projects.locations.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.datamigration.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
