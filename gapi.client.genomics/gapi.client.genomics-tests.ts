/* This is stub file for gapi.client.genomics definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20210727

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('genomics', 'v2alpha1', () => {
        /** now we can use gapi.client.genomics */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, configure, and delete your Google Cloud Platform data */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View and manage Genomics data */
            'https://www.googleapis.com/auth/genomics',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Runs a pipeline. The returned Operation's metadata field will contain a google.genomics.v2alpha1.Metadata object describing the status of the pipeline execution. The [response] field
         * will contain a google.genomics.v2alpha1.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the Genomics Service Agent must have
         * access to your project. This is done automatically when the Cloud Genomics API is first enabled, but if you delete this permission, or if you enabled the Cloud Genomics API before the
         * v2alpha1 API launch, you must disable and re-enable the API to grant the Genomics Service Agent the required permissions. Authorization requires the following [Google
         * IAM](https://cloud.google.com/iam/) permission: * `genomics.operations.create` [1]: /genomics/gsa
         */
        await gapi.client.genomics.pipelines.run({
        }, {
            labels: {
                A: "Test string"            },
            pipeline: {
                actions: [
                    {
                        commands: [
                            "Test string"                        ],
                        credentials: {
                            cipherText: "Test string",
                            keyName: "Test string",
                        },
                        encryptedEnvironment: {
                            cipherText: "Test string",
                            keyName: "Test string",
                        },
                        entrypoint: "Test string",
                        environment: {
                            A: "Test string"                        },
                        flags: [
                            "Test string"                        ],
                        imageUri: "Test string",
                        labels: {
                            A: "Test string"                        },
                        mounts: [
                            {
                                disk: "Test string",
                                path: "Test string",
                                readOnly: true,
                            }                        ],
                        name: "Test string",
                        pidNamespace: "Test string",
                        portMappings: {
                            A: 42                        },
                        timeout: "Test string",
                    }                ],
                encryptedEnvironment: {
                    cipherText: "Test string",
                    keyName: "Test string",
                },
                environment: {
                    A: "Test string"                },
                resources: {
                    projectId: "Test string",
                    regions: [
                        "Test string"                    ],
                    virtualMachine: {
                        accelerators: [
                            {
                                count: "Test string",
                                type: "Test string",
                            }                        ],
                        bootDiskSizeGb: 42,
                        bootImage: "Test string",
                        cpuPlatform: "Test string",
                        disks: [
                            {
                                name: "Test string",
                                sizeGb: 42,
                                sourceImage: "Test string",
                                type: "Test string",
                            }                        ],
                        dockerCacheImages: [
                            "Test string"                        ],
                        enableStackdriverMonitoring: true,
                        labels: {
                            A: "Test string"                        },
                        machineType: "Test string",
                        network: {
                            name: "Test string",
                            subnetwork: "Test string",
                            usePrivateAddress: true,
                        },
                        nvidiaDriverVersion: "Test string",
                        preemptible: true,
                        reservation: "Test string",
                        serviceAccount: {
                            email: "Test string",
                            scopes: [
                                "Test string"                            ],
                        },
                        volumes: [
                            {
                                existingDisk: {
                                    disk: "Test string",
                                },
                                nfsMount: {
                                    target: "Test string",
                                },
                                persistentDisk: {
                                    sizeGb: 42,
                                    sourceImage: "Test string",
                                    type: "Test string",
                                },
                                volume: "Test string",
                            }                        ],
                    },
                    zones: [
                        "Test string"                    ],
                },
                timeout: "Test string",
            },
            pubSubTopic: "Test string",
        });
        /** The worker uses this method to retrieve the assigned operation and provide periodic status updates. */
        await gapi.client.genomics.workers.checkIn({
            id: "Test string",
        }, {
            deadlineExpired: {
            },
            event: {
                A: 42            },
            events: [
                {
                    data: {
                        A: 42                    },
                    timestamp: "Test string",
                }            ],
            result: {
                code: 42,
                details: [
                    {
                        A: 42                    }                ],
                message: "Test string",
            },
            sosReport: "Test string",
            workerStatus: {
                attachedDisks: {
                    A: {
                        freeSpaceBytes: "Test string",
                        totalSpaceBytes: "Test string",
                    }                },
                bootDisk: {
                    freeSpaceBytes: "Test string",
                    totalSpaceBytes: "Test string",
                },
                freeRamBytes: "Test string",
                totalRamBytes: "Test string",
                uptimeSeconds: "Test string",
            },
        });
    }
});
