/* This is stub file for gapi.client.logging-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250912

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://logging.googleapis.com/$discovery/rest?version=v2',
  );
  /** now we can use gapi.client.logging */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View your data across Google Cloud services and see the email address of your Google Account */
    'https://www.googleapis.com/auth/cloud-platform.read-only',
    /** Administrate log data for your projects */
    'https://www.googleapis.com/auth/logging.admin',
    /** View log data for your projects */
    'https://www.googleapis.com/auth/logging.read',
    /** Submit log data for your projects */
    'https://www.googleapis.com/auth/logging.write',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations, and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.billingAccounts.getCmekSettings({
      name: 'Test string',
    });
    /** Gets the settings for the given resource.Note: Settings can be retrieved for Google Cloud projects, folders, organizations, and billing accounts.See View default resource settings for Logging (https://cloud.google.com/logging/docs/default-settings#view-org-settings) for more information. */
    await gapi.client.logging.billingAccounts.getSettings({
      name: 'Test string',
    });
    /** Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
    await gapi.client.logging.billingAccounts.exclusions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an exclusion in the _Default sink. */
    await gapi.client.logging.billingAccounts.exclusions.delete({
      name: 'Test string',
    });
    /** Gets the description of an exclusion in the _Default sink. */
    await gapi.client.logging.billingAccounts.exclusions.get({
      name: 'Test string',
    });
    /** Lists all the exclusions on the _Default sink in a parent resource. */
    await gapi.client.logging.billingAccounts.exclusions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Changes one or more properties of an existing exclusion in the _Default sink. */
    await gapi.client.logging.billingAccounts.exclusions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.logging.billingAccounts.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.logging.billingAccounts.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.billingAccounts.locations.buckets.create(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Creates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.billingAccounts.locations.buckets.createAsync(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted. */
    await gapi.client.logging.billingAccounts.locations.buckets.delete({
      name: 'Test string',
    });
    /** Gets a log bucket. */
    await gapi.client.logging.billingAccounts.locations.buckets.get({
      name: 'Test string',
    });
    /** Lists log buckets. */
    await gapi.client.logging.billingAccounts.locations.buckets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.billingAccounts.locations.buckets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days. */
    await gapi.client.logging.billingAccounts.locations.buckets.undelete(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.billingAccounts.locations.buckets.updateAsync(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Asynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link. */
    await gapi.client.logging.billingAccounts.locations.buckets.links.create(
      {
        linkId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDataset: {
          datasetId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a link. This will also delete the corresponding BigQuery linked dataset. */
    await gapi.client.logging.billingAccounts.locations.buckets.links.delete({
      name: 'Test string',
    });
    /** Gets a link. */
    await gapi.client.logging.billingAccounts.locations.buckets.links.get({
      name: 'Test string',
    });
    /** Lists links. */
    await gapi.client.logging.billingAccounts.locations.buckets.links.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views. */
    await gapi.client.logging.billingAccounts.locations.buckets.views.create(
      {
        parent: 'Test string',
        viewId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.billingAccounts.locations.buckets.views.delete({
      name: 'Test string',
    });
    /** Gets a view on a log bucket. */
    await gapi.client.logging.billingAccounts.locations.buckets.views.get({
      name: 'Test string',
    });
    /** Lists views on a log bucket. */
    await gapi.client.logging.billingAccounts.locations.buckets.views.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a view on a log bucket. This method replaces the value of the filter field from the existing view with the corresponding value from the new view. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.billingAccounts.locations.buckets.views.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.billingAccounts.locations.buckets.views.logs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        resourceNames: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.logging.billingAccounts.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.logging.billingAccounts.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.logging.billingAccounts.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists the RecentQueries that were created by the user making the request. */
    await gapi.client.logging.billingAccounts.locations.recentQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new SavedQuery for the user making the request. */
    await gapi.client.logging.billingAccounts.locations.savedQueries.create(
      {
        parent: 'Test string',
        savedQueryId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes an existing SavedQuery that was created by the user making the request. */
    await gapi.client.logging.billingAccounts.locations.savedQueries.delete({
      name: 'Test string',
    });
    /** Returns all data associated with the requested query. */
    await gapi.client.logging.billingAccounts.locations.savedQueries.get({
      name: 'Test string',
    });
    /** Lists the SavedQueries that were created by the user making the request. */
    await gapi.client.logging.billingAccounts.locations.savedQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing SavedQuery. */
    await gapi.client.logging.billingAccounts.locations.savedQueries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes all the log entries in a log for the global _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted. */
    await gapi.client.logging.billingAccounts.logs.delete({
      logName: 'Test string',
    });
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.billingAccounts.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink. */
    await gapi.client.logging.billingAccounts.sinks.create(
      {
        customWriterIdentity: 'Test string',
        parent: 'Test string',
        uniqueWriterIdentity: true,
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
    await gapi.client.logging.billingAccounts.sinks.delete({
      sinkName: 'Test string',
    });
    /** Gets a sink. */
    await gapi.client.logging.billingAccounts.sinks.get({
      sinkName: 'Test string',
    });
    /** Lists sinks. */
    await gapi.client.logging.billingAccounts.sinks.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.billingAccounts.sinks.patch(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.billingAccounts.sinks.update(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Copies a set of log entries from a log bucket to a Cloud Storage bucket. */
    await gapi.client.logging.entries.copy(
      {},
      {
        destination: 'Test string',
        filter: 'Test string',
        name: 'Test string',
      },
    );
    /** Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs (https://cloud.google.com/logging/docs/export). */
    await gapi.client.logging.entries.list(
      {},
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        projectIds: ['Test string'],
        resourceNames: ['Test string'],
      },
    );
    /** Streaming read of log entries as they are received. Until the stream is terminated, it will continue reading logs. */
    await gapi.client.logging.entries.tail(
      {},
      {
        bufferWindow: 'Test string',
        filter: 'Test string',
        resourceNames: ['Test string'],
      },
    );
    /** Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resource names (projects, organizations, billing accounts or folders), where the resource name for a log entry is determined from its logName field. */
    await gapi.client.logging.entries.write(
      {},
      {
        dryRun: true,
        entries: [
          {
            apphub: {
              application: {
                container: 'Test string',
                id: 'Test string',
                location: 'Test string',
              },
              service: {
                criticalityType: 'Test string',
                environmentType: 'Test string',
                id: 'Test string',
              },
              workload: {
                criticalityType: 'Test string',
                environmentType: 'Test string',
                id: 'Test string',
              },
            },
            apphubDestination: {
              application: {
                container: 'Test string',
                id: 'Test string',
                location: 'Test string',
              },
              service: {
                criticalityType: 'Test string',
                environmentType: 'Test string',
                id: 'Test string',
              },
              workload: {
                criticalityType: 'Test string',
                environmentType: 'Test string',
                id: 'Test string',
              },
            },
            errorGroups: [
              {
                id: 'Test string',
              },
            ],
            httpRequest: {
              cacheFillBytes: 'Test string',
              cacheHit: true,
              cacheLookup: true,
              cacheValidatedWithOriginServer: true,
              latency: 'Test string',
              protocol: 'Test string',
              referer: 'Test string',
              remoteIp: 'Test string',
              requestMethod: 'Test string',
              requestSize: 'Test string',
              requestUrl: 'Test string',
              responseSize: 'Test string',
              serverIp: 'Test string',
              status: 42,
              userAgent: 'Test string',
            },
            insertId: 'Test string',
            jsonPayload: {
              A: 42,
            },
            labels: {
              A: 'Test string',
            },
            logName: 'Test string',
            metadata: {
              systemLabels: {
                A: 42,
              },
              userLabels: {
                A: 'Test string',
              },
            },
            operation: {
              first: true,
              id: 'Test string',
              last: true,
              producer: 'Test string',
            },
            protoPayload: {
              A: 42,
            },
            receiveTimestamp: 'Test string',
            resource: {
              labels: {
                A: 'Test string',
              },
              type: 'Test string',
            },
            severity: 'Test string',
            sourceLocation: {
              file: 'Test string',
              function: 'Test string',
              line: 'Test string',
            },
            spanId: 'Test string',
            split: {
              index: 42,
              totalSplits: 42,
              uid: 'Test string',
            },
            textPayload: 'Test string',
            timestamp: 'Test string',
            trace: 'Test string',
            traceSampled: true,
          },
        ],
        labels: {
          A: 'Test string',
        },
        logName: 'Test string',
        partialSuccess: true,
        resource: {
          labels: {
            A: 'Test string',
          },
          type: 'Test string',
        },
      },
    );
    /** Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
    await gapi.client.logging.exclusions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an exclusion in the _Default sink. */
    await gapi.client.logging.exclusions.delete({
      name: 'Test string',
    });
    /** Gets the description of an exclusion in the _Default sink. */
    await gapi.client.logging.exclusions.get({
      name: 'Test string',
    });
    /** Lists all the exclusions on the _Default sink in a parent resource. */
    await gapi.client.logging.exclusions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Changes one or more properties of an existing exclusion in the _Default sink. */
    await gapi.client.logging.exclusions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations, and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.folders.getCmekSettings({
      name: 'Test string',
    });
    /** Gets the settings for the given resource.Note: Settings can be retrieved for Google Cloud projects, folders, organizations, and billing accounts.See View default resource settings for Logging (https://cloud.google.com/logging/docs/default-settings#view-org-settings) for more information. */
    await gapi.client.logging.folders.getSettings({
      name: 'Test string',
    });
    /** Updates the settings for the given resource. This method applies to all feature configurations for organization and folders.UpdateSettings fails when any of the following are true: The value of storage_location either isn't supported by Logging or violates the location OrgPolicy. The default_sink_config field is set, but it has an unspecified filter write mode. The value of kms_key_name is invalid. The associated service account doesn't have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key. Access to the key is disabled.See Configure default settings for organizations and folders (https://cloud.google.com/logging/docs/default-settings) for more information. */
    await gapi.client.logging.folders.updateSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        defaultSinkConfig: {
          exclusions: [
            {
              createTime: 'Test string',
              description: 'Test string',
              disabled: true,
              filter: 'Test string',
              name: 'Test string',
              updateTime: 'Test string',
            },
          ],
          filter: 'Test string',
          mode: 'Test string',
        },
        disableDefaultSink: true,
        kmsKeyName: 'Test string',
        kmsServiceAccountId: 'Test string',
        loggingServiceAccountId: 'Test string',
        name: 'Test string',
        storageLocation: 'Test string',
      },
    );
    /** Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
    await gapi.client.logging.folders.exclusions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an exclusion in the _Default sink. */
    await gapi.client.logging.folders.exclusions.delete({
      name: 'Test string',
    });
    /** Gets the description of an exclusion in the _Default sink. */
    await gapi.client.logging.folders.exclusions.get({
      name: 'Test string',
    });
    /** Lists all the exclusions on the _Default sink in a parent resource. */
    await gapi.client.logging.folders.exclusions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Changes one or more properties of an existing exclusion in the _Default sink. */
    await gapi.client.logging.folders.exclusions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.logging.folders.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.logging.folders.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.folders.locations.buckets.create(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Creates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.folders.locations.buckets.createAsync(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted. */
    await gapi.client.logging.folders.locations.buckets.delete({
      name: 'Test string',
    });
    /** Gets a log bucket. */
    await gapi.client.logging.folders.locations.buckets.get({
      name: 'Test string',
    });
    /** Lists log buckets. */
    await gapi.client.logging.folders.locations.buckets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.folders.locations.buckets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days. */
    await gapi.client.logging.folders.locations.buckets.undelete(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.folders.locations.buckets.updateAsync(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Asynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link. */
    await gapi.client.logging.folders.locations.buckets.links.create(
      {
        linkId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDataset: {
          datasetId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a link. This will also delete the corresponding BigQuery linked dataset. */
    await gapi.client.logging.folders.locations.buckets.links.delete({
      name: 'Test string',
    });
    /** Gets a link. */
    await gapi.client.logging.folders.locations.buckets.links.get({
      name: 'Test string',
    });
    /** Lists links. */
    await gapi.client.logging.folders.locations.buckets.links.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views. */
    await gapi.client.logging.folders.locations.buckets.views.create(
      {
        parent: 'Test string',
        viewId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.folders.locations.buckets.views.delete({
      name: 'Test string',
    });
    /** Gets a view on a log bucket. */
    await gapi.client.logging.folders.locations.buckets.views.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.logging.folders.locations.buckets.views.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists views on a log bucket. */
    await gapi.client.logging.folders.locations.buckets.views.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a view on a log bucket. This method replaces the value of the filter field from the existing view with the corresponding value from the new view. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.folders.locations.buckets.views.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.logging.folders.locations.buckets.views.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.logging.folders.locations.buckets.views.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.folders.locations.buckets.views.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a log scope. */
    await gapi.client.logging.folders.locations.logScopes.create(
      {
        logScopeId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceNames: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Deletes a log scope. */
    await gapi.client.logging.folders.locations.logScopes.delete({
      name: 'Test string',
    });
    /** Gets a log scope. */
    await gapi.client.logging.folders.locations.logScopes.get({
      name: 'Test string',
    });
    /** Lists log scopes. */
    await gapi.client.logging.folders.locations.logScopes.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log scope. */
    await gapi.client.logging.folders.locations.logScopes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceNames: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.logging.folders.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.logging.folders.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.logging.folders.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists the RecentQueries that were created by the user making the request. */
    await gapi.client.logging.folders.locations.recentQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new SavedQuery for the user making the request. */
    await gapi.client.logging.folders.locations.savedQueries.create(
      {
        parent: 'Test string',
        savedQueryId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes an existing SavedQuery that was created by the user making the request. */
    await gapi.client.logging.folders.locations.savedQueries.delete({
      name: 'Test string',
    });
    /** Returns all data associated with the requested query. */
    await gapi.client.logging.folders.locations.savedQueries.get({
      name: 'Test string',
    });
    /** Lists the SavedQueries that were created by the user making the request. */
    await gapi.client.logging.folders.locations.savedQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing SavedQuery. */
    await gapi.client.logging.folders.locations.savedQueries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes all the log entries in a log for the global _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted. */
    await gapi.client.logging.folders.logs.delete({
      logName: 'Test string',
    });
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.folders.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink. */
    await gapi.client.logging.folders.sinks.create(
      {
        customWriterIdentity: 'Test string',
        parent: 'Test string',
        uniqueWriterIdentity: true,
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
    await gapi.client.logging.folders.sinks.delete({
      sinkName: 'Test string',
    });
    /** Gets a sink. */
    await gapi.client.logging.folders.sinks.get({
      sinkName: 'Test string',
    });
    /** Lists sinks. */
    await gapi.client.logging.folders.sinks.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.folders.sinks.patch(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.folders.sinks.update(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.logging.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.logging.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.locations.buckets.create(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Creates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.locations.buckets.createAsync(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted. */
    await gapi.client.logging.locations.buckets.delete({
      name: 'Test string',
    });
    /** Gets a log bucket. */
    await gapi.client.logging.locations.buckets.get({
      name: 'Test string',
    });
    /** Lists log buckets. */
    await gapi.client.logging.locations.buckets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.locations.buckets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days. */
    await gapi.client.logging.locations.buckets.undelete(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.locations.buckets.updateAsync(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Asynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link. */
    await gapi.client.logging.locations.buckets.links.create(
      {
        linkId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDataset: {
          datasetId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a link. This will also delete the corresponding BigQuery linked dataset. */
    await gapi.client.logging.locations.buckets.links.delete({
      name: 'Test string',
    });
    /** Gets a link. */
    await gapi.client.logging.locations.buckets.links.get({
      name: 'Test string',
    });
    /** Lists links. */
    await gapi.client.logging.locations.buckets.links.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views. */
    await gapi.client.logging.locations.buckets.views.create(
      {
        parent: 'Test string',
        viewId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.locations.buckets.views.delete({
      name: 'Test string',
    });
    /** Gets a view on a log bucket. */
    await gapi.client.logging.locations.buckets.views.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.logging.locations.buckets.views.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists views on a log bucket. */
    await gapi.client.logging.locations.buckets.views.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a view on a log bucket. This method replaces the value of the filter field from the existing view with the corresponding value from the new view. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.locations.buckets.views.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.logging.locations.buckets.views.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.logging.locations.buckets.views.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.logging.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.logging.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.logging.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Deletes all the log entries in a log for the global _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted. */
    await gapi.client.logging.logs.delete({
      logName: 'Test string',
    });
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Lists the descriptors for monitored resource types used by Logging. */
    await gapi.client.logging.monitoredResourceDescriptors.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations, and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.organizations.getCmekSettings({
      name: 'Test string',
    });
    /** Gets the settings for the given resource.Note: Settings can be retrieved for Google Cloud projects, folders, organizations, and billing accounts.See View default resource settings for Logging (https://cloud.google.com/logging/docs/default-settings#view-org-settings) for more information. */
    await gapi.client.logging.organizations.getSettings({
      name: 'Test string',
    });
    /** Updates the Log Router CMEK settings for the given resource.Note: CMEK for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateCmekSettings fails when any of the following are true: The value of kms_key_name is invalid. The associated service account doesn't have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key. Access to the key is disabled.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.organizations.updateCmekSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        kmsKeyName: 'Test string',
        kmsKeyVersionName: 'Test string',
        name: 'Test string',
        serviceAccountId: 'Test string',
      },
    );
    /** Updates the settings for the given resource. This method applies to all feature configurations for organization and folders.UpdateSettings fails when any of the following are true: The value of storage_location either isn't supported by Logging or violates the location OrgPolicy. The default_sink_config field is set, but it has an unspecified filter write mode. The value of kms_key_name is invalid. The associated service account doesn't have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key. Access to the key is disabled.See Configure default settings for organizations and folders (https://cloud.google.com/logging/docs/default-settings) for more information. */
    await gapi.client.logging.organizations.updateSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        defaultSinkConfig: {
          exclusions: [
            {
              createTime: 'Test string',
              description: 'Test string',
              disabled: true,
              filter: 'Test string',
              name: 'Test string',
              updateTime: 'Test string',
            },
          ],
          filter: 'Test string',
          mode: 'Test string',
        },
        disableDefaultSink: true,
        kmsKeyName: 'Test string',
        kmsServiceAccountId: 'Test string',
        loggingServiceAccountId: 'Test string',
        name: 'Test string',
        storageLocation: 'Test string',
      },
    );
    /** Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
    await gapi.client.logging.organizations.exclusions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an exclusion in the _Default sink. */
    await gapi.client.logging.organizations.exclusions.delete({
      name: 'Test string',
    });
    /** Gets the description of an exclusion in the _Default sink. */
    await gapi.client.logging.organizations.exclusions.get({
      name: 'Test string',
    });
    /** Lists all the exclusions on the _Default sink in a parent resource. */
    await gapi.client.logging.organizations.exclusions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Changes one or more properties of an existing exclusion in the _Default sink. */
    await gapi.client.logging.organizations.exclusions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.logging.organizations.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.logging.organizations.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.organizations.locations.buckets.create(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Creates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.organizations.locations.buckets.createAsync(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted. */
    await gapi.client.logging.organizations.locations.buckets.delete({
      name: 'Test string',
    });
    /** Gets a log bucket. */
    await gapi.client.logging.organizations.locations.buckets.get({
      name: 'Test string',
    });
    /** Lists log buckets. */
    await gapi.client.logging.organizations.locations.buckets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.organizations.locations.buckets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days. */
    await gapi.client.logging.organizations.locations.buckets.undelete(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.organizations.locations.buckets.updateAsync(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Asynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link. */
    await gapi.client.logging.organizations.locations.buckets.links.create(
      {
        linkId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDataset: {
          datasetId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a link. This will also delete the corresponding BigQuery linked dataset. */
    await gapi.client.logging.organizations.locations.buckets.links.delete({
      name: 'Test string',
    });
    /** Gets a link. */
    await gapi.client.logging.organizations.locations.buckets.links.get({
      name: 'Test string',
    });
    /** Lists links. */
    await gapi.client.logging.organizations.locations.buckets.links.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views. */
    await gapi.client.logging.organizations.locations.buckets.views.create(
      {
        parent: 'Test string',
        viewId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.organizations.locations.buckets.views.delete({
      name: 'Test string',
    });
    /** Gets a view on a log bucket. */
    await gapi.client.logging.organizations.locations.buckets.views.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.logging.organizations.locations.buckets.views.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists views on a log bucket. */
    await gapi.client.logging.organizations.locations.buckets.views.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a view on a log bucket. This method replaces the value of the filter field from the existing view with the corresponding value from the new view. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.organizations.locations.buckets.views.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.logging.organizations.locations.buckets.views.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.logging.organizations.locations.buckets.views.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.organizations.locations.buckets.views.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a log scope. */
    await gapi.client.logging.organizations.locations.logScopes.create(
      {
        logScopeId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceNames: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Deletes a log scope. */
    await gapi.client.logging.organizations.locations.logScopes.delete({
      name: 'Test string',
    });
    /** Gets a log scope. */
    await gapi.client.logging.organizations.locations.logScopes.get({
      name: 'Test string',
    });
    /** Lists log scopes. */
    await gapi.client.logging.organizations.locations.logScopes.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log scope. */
    await gapi.client.logging.organizations.locations.logScopes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceNames: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.logging.organizations.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.logging.organizations.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.logging.organizations.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists the RecentQueries that were created by the user making the request. */
    await gapi.client.logging.organizations.locations.recentQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new SavedQuery for the user making the request. */
    await gapi.client.logging.organizations.locations.savedQueries.create(
      {
        parent: 'Test string',
        savedQueryId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes an existing SavedQuery that was created by the user making the request. */
    await gapi.client.logging.organizations.locations.savedQueries.delete({
      name: 'Test string',
    });
    /** Returns all data associated with the requested query. */
    await gapi.client.logging.organizations.locations.savedQueries.get({
      name: 'Test string',
    });
    /** Lists the SavedQueries that were created by the user making the request. */
    await gapi.client.logging.organizations.locations.savedQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing SavedQuery. */
    await gapi.client.logging.organizations.locations.savedQueries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes all the log entries in a log for the global _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted. */
    await gapi.client.logging.organizations.logs.delete({
      logName: 'Test string',
    });
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.organizations.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink. */
    await gapi.client.logging.organizations.sinks.create(
      {
        customWriterIdentity: 'Test string',
        parent: 'Test string',
        uniqueWriterIdentity: true,
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
    await gapi.client.logging.organizations.sinks.delete({
      sinkName: 'Test string',
    });
    /** Gets a sink. */
    await gapi.client.logging.organizations.sinks.get({
      sinkName: 'Test string',
    });
    /** Lists sinks. */
    await gapi.client.logging.organizations.sinks.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.organizations.sinks.patch(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.organizations.sinks.update(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations, and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.projects.getCmekSettings({
      name: 'Test string',
    });
    /** Gets the settings for the given resource.Note: Settings can be retrieved for Google Cloud projects, folders, organizations, and billing accounts.See View default resource settings for Logging (https://cloud.google.com/logging/docs/default-settings#view-org-settings) for more information. */
    await gapi.client.logging.projects.getSettings({
      name: 'Test string',
    });
    /** Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
    await gapi.client.logging.projects.exclusions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an exclusion in the _Default sink. */
    await gapi.client.logging.projects.exclusions.delete({
      name: 'Test string',
    });
    /** Gets the description of an exclusion in the _Default sink. */
    await gapi.client.logging.projects.exclusions.get({
      name: 'Test string',
    });
    /** Lists all the exclusions on the _Default sink in a parent resource. */
    await gapi.client.logging.projects.exclusions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Changes one or more properties of an existing exclusion in the _Default sink. */
    await gapi.client.logging.projects.exclusions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.logging.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.logging.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.projects.locations.buckets.create(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Creates a log bucket asynchronously that can be used to store log entries.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.projects.locations.buckets.createAsync(
      {
        bucketId: 'Test string',
        parent: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted. */
    await gapi.client.logging.projects.locations.buckets.delete({
      name: 'Test string',
    });
    /** Gets a log bucket. */
    await gapi.client.logging.projects.locations.buckets.get({
      name: 'Test string',
    });
    /** Lists log buckets. */
    await gapi.client.logging.projects.locations.buckets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log bucket.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.projects.locations.buckets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days. */
    await gapi.client.logging.projects.locations.buckets.undelete(
      {
        name: 'Test string',
      },
      {},
    );
    /** Updates a log bucket asynchronously.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed. */
    await gapi.client.logging.projects.locations.buckets.updateAsync(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analyticsEnabled: true,
        cmekSettings: {
          kmsKeyName: 'Test string',
          kmsKeyVersionName: 'Test string',
          name: 'Test string',
          serviceAccountId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        indexConfigs: [
          {
            createTime: 'Test string',
            fieldPath: 'Test string',
            type: 'Test string',
          },
        ],
        lifecycleState: 'Test string',
        locked: true,
        name: 'Test string',
        restrictedFields: ['Test string'],
        retentionDays: 42,
        updateTime: 'Test string',
      },
    );
    /** Asynchronously creates a linked dataset in BigQuery which makes it possible to use BigQuery to read the logs stored in the log bucket. A log bucket may currently only contain one link. */
    await gapi.client.logging.projects.locations.buckets.links.create(
      {
        linkId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDataset: {
          datasetId: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        lifecycleState: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a link. This will also delete the corresponding BigQuery linked dataset. */
    await gapi.client.logging.projects.locations.buckets.links.delete({
      name: 'Test string',
    });
    /** Gets a link. */
    await gapi.client.logging.projects.locations.buckets.links.get({
      name: 'Test string',
    });
    /** Lists links. */
    await gapi.client.logging.projects.locations.buckets.links.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views. */
    await gapi.client.logging.projects.locations.buckets.views.create(
      {
        parent: 'Test string',
        viewId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.projects.locations.buckets.views.delete({
      name: 'Test string',
    });
    /** Gets a view on a log bucket. */
    await gapi.client.logging.projects.locations.buckets.views.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.logging.projects.locations.buckets.views.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists views on a log bucket. */
    await gapi.client.logging.projects.locations.buckets.views.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a view on a log bucket. This method replaces the value of the filter field from the existing view with the corresponding value from the new view. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes. */
    await gapi.client.logging.projects.locations.buckets.views.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.logging.projects.locations.buckets.views.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.logging.projects.locations.buckets.views.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.projects.locations.buckets.views.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a log scope. */
    await gapi.client.logging.projects.locations.logScopes.create(
      {
        logScopeId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceNames: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Deletes a log scope. */
    await gapi.client.logging.projects.locations.logScopes.delete({
      name: 'Test string',
    });
    /** Gets a log scope. */
    await gapi.client.logging.projects.locations.logScopes.get({
      name: 'Test string',
    });
    /** Lists log scopes. */
    await gapi.client.logging.projects.locations.logScopes.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a log scope. */
    await gapi.client.logging.projects.locations.logScopes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceNames: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.logging.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.logging.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.logging.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists the RecentQueries that were created by the user making the request. */
    await gapi.client.logging.projects.locations.recentQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new SavedQuery for the user making the request. */
    await gapi.client.logging.projects.locations.savedQueries.create(
      {
        parent: 'Test string',
        savedQueryId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes an existing SavedQuery that was created by the user making the request. */
    await gapi.client.logging.projects.locations.savedQueries.delete({
      name: 'Test string',
    });
    /** Returns all data associated with the requested query. */
    await gapi.client.logging.projects.locations.savedQueries.get({
      name: 'Test string',
    });
    /** Lists the SavedQueries that were created by the user making the request. */
    await gapi.client.logging.projects.locations.savedQueries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing SavedQuery. */
    await gapi.client.logging.projects.locations.savedQueries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        loggingQuery: {
          filter: 'Test string',
          summaryFieldEnd: 42,
          summaryFields: [
            {
              field: 'Test string',
            },
          ],
          summaryFieldStart: 42,
        },
        name: 'Test string',
        opsAnalyticsQuery: {
          sqlQueryText: 'Test string',
        },
        updateTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes all the log entries in a log for the global _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted. */
    await gapi.client.logging.projects.logs.delete({
      logName: 'Test string',
    });
    /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
    await gapi.client.logging.projects.logs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      resourceNames: 'Test string',
    });
    /** Creates a logs-based metric. */
    await gapi.client.logging.projects.metrics.create(
      {
        parent: 'Test string',
      },
      {
        bucketName: 'Test string',
        bucketOptions: {
          explicitBuckets: {
            bounds: [42],
          },
          exponentialBuckets: {
            growthFactor: 42,
            numFiniteBuckets: 42,
            scale: 42,
          },
          linearBuckets: {
            numFiniteBuckets: 42,
            offset: 42,
            width: 42,
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        labelExtractors: {
          A: 'Test string',
        },
        metricDescriptor: {
          description: 'Test string',
          displayName: 'Test string',
          labels: [
            {
              description: 'Test string',
              key: 'Test string',
              valueType: 'Test string',
            },
          ],
          launchStage: 'Test string',
          metadata: {
            ingestDelay: 'Test string',
            launchStage: 'Test string',
            samplePeriod: 'Test string',
            timeSeriesResourceHierarchyLevel: ['Test string'],
          },
          metricKind: 'Test string',
          monitoredResourceTypes: ['Test string'],
          name: 'Test string',
          type: 'Test string',
          unit: 'Test string',
          valueType: 'Test string',
        },
        name: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        valueExtractor: 'Test string',
        version: 'Test string',
      },
    );
    /** Deletes a logs-based metric. */
    await gapi.client.logging.projects.metrics.delete({
      metricName: 'Test string',
    });
    /** Gets a logs-based metric. */
    await gapi.client.logging.projects.metrics.get({
      metricName: 'Test string',
    });
    /** Lists logs-based metrics. */
    await gapi.client.logging.projects.metrics.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates or updates a logs-based metric. */
    await gapi.client.logging.projects.metrics.update(
      {
        metricName: 'Test string',
      },
      {
        bucketName: 'Test string',
        bucketOptions: {
          explicitBuckets: {
            bounds: [42],
          },
          exponentialBuckets: {
            growthFactor: 42,
            numFiniteBuckets: 42,
            scale: 42,
          },
          linearBuckets: {
            numFiniteBuckets: 42,
            offset: 42,
            width: 42,
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        disabled: true,
        filter: 'Test string',
        labelExtractors: {
          A: 'Test string',
        },
        metricDescriptor: {
          description: 'Test string',
          displayName: 'Test string',
          labels: [
            {
              description: 'Test string',
              key: 'Test string',
              valueType: 'Test string',
            },
          ],
          launchStage: 'Test string',
          metadata: {
            ingestDelay: 'Test string',
            launchStage: 'Test string',
            samplePeriod: 'Test string',
            timeSeriesResourceHierarchyLevel: ['Test string'],
          },
          metricKind: 'Test string',
          monitoredResourceTypes: ['Test string'],
          name: 'Test string',
          type: 'Test string',
          unit: 'Test string',
          valueType: 'Test string',
        },
        name: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        valueExtractor: 'Test string',
        version: 'Test string',
      },
    );
    /** Creates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink. */
    await gapi.client.logging.projects.sinks.create(
      {
        customWriterIdentity: 'Test string',
        parent: 'Test string',
        uniqueWriterIdentity: true,
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
    await gapi.client.logging.projects.sinks.delete({
      sinkName: 'Test string',
    });
    /** Gets a sink. */
    await gapi.client.logging.projects.sinks.get({
      sinkName: 'Test string',
    });
    /** Lists sinks. */
    await gapi.client.logging.projects.sinks.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.projects.sinks.patch(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.projects.sinks.update(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Creates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink. */
    await gapi.client.logging.sinks.create(
      {
        customWriterIdentity: 'Test string',
        parent: 'Test string',
        uniqueWriterIdentity: true,
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
    await gapi.client.logging.sinks.delete({
      sinkName: 'Test string',
    });
    /** Gets a sink. */
    await gapi.client.logging.sinks.get({
      sinkName: 'Test string',
    });
    /** Lists sinks. */
    await gapi.client.logging.sinks.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field. */
    await gapi.client.logging.sinks.update(
      {
        customWriterIdentity: 'Test string',
        sinkName: 'Test string',
        uniqueWriterIdentity: true,
        updateMask: 'Test string',
      },
      {
        bigqueryOptions: {
          usePartitionedTables: true,
          usesTimestampColumnPartitioning: true,
        },
        createTime: 'Test string',
        description: 'Test string',
        destination: 'Test string',
        disabled: true,
        exclusions: [
          {
            createTime: 'Test string',
            description: 'Test string',
            disabled: true,
            filter: 'Test string',
            name: 'Test string',
            updateTime: 'Test string',
          },
        ],
        filter: 'Test string',
        includeChildren: true,
        interceptChildren: true,
        name: 'Test string',
        outputVersionFormat: 'Test string',
        resourceName: 'Test string',
        updateTime: 'Test string',
        writerIdentity: 'Test string',
      },
    );
    /** Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations, and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.v2.getCmekSettings({
      name: 'Test string',
    });
    /** Gets the settings for the given resource.Note: Settings can be retrieved for Google Cloud projects, folders, organizations, and billing accounts.See View default resource settings for Logging (https://cloud.google.com/logging/docs/default-settings#view-org-settings) for more information. */
    await gapi.client.logging.v2.getSettings({
      name: 'Test string',
    });
    /** Updates the Log Router CMEK settings for the given resource.Note: CMEK for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateCmekSettings fails when any of the following are true: The value of kms_key_name is invalid. The associated service account doesn't have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key. Access to the key is disabled.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information. */
    await gapi.client.logging.v2.updateCmekSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        kmsKeyName: 'Test string',
        kmsKeyVersionName: 'Test string',
        name: 'Test string',
        serviceAccountId: 'Test string',
      },
    );
    /** Updates the settings for the given resource. This method applies to all feature configurations for organization and folders.UpdateSettings fails when any of the following are true: The value of storage_location either isn't supported by Logging or violates the location OrgPolicy. The default_sink_config field is set, but it has an unspecified filter write mode. The value of kms_key_name is invalid. The associated service account doesn't have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key. Access to the key is disabled.See Configure default settings for organizations and folders (https://cloud.google.com/logging/docs/default-settings) for more information. */
    await gapi.client.logging.v2.updateSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        defaultSinkConfig: {
          exclusions: [
            {
              createTime: 'Test string',
              description: 'Test string',
              disabled: true,
              filter: 'Test string',
              name: 'Test string',
              updateTime: 'Test string',
            },
          ],
          filter: 'Test string',
          mode: 'Test string',
        },
        disableDefaultSink: true,
        kmsKeyName: 'Test string',
        kmsServiceAccountId: 'Test string',
        loggingServiceAccountId: 'Test string',
        name: 'Test string',
        storageLocation: 'Test string',
      },
    );
  }
});
