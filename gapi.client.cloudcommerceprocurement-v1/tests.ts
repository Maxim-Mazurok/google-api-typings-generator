/* This is stub file for gapi.client.cloudcommerceprocurement-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250923

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://cloudcommerceprocurement.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.cloudcommerceprocurement */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Grants an approval on an Account. */
    await gapi.client.cloudcommerceprocurement.providers.accounts.approve(
      {
        name: 'Test string',
      },
      {
        approvalName: 'Test string',
        properties: {
          A: 'Test string',
        },
        reason: 'Test string',
      },
    );
    /** Gets a requested Account resource. */
    await gapi.client.cloudcommerceprocurement.providers.accounts.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Lists Accounts that the provider has access to. */
    await gapi.client.cloudcommerceprocurement.providers.accounts.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Rejects an approval on an Account. */
    await gapi.client.cloudcommerceprocurement.providers.accounts.reject(
      {
        name: 'Test string',
      },
      {
        approvalName: 'Test string',
        reason: 'Test string',
      },
    );
    /** Resets an Account and cancels all associated Entitlements. Partner can only reset accounts they own rather than customer accounts. */
    await gapi.client.cloudcommerceprocurement.providers.accounts.reset(
      {
        name: 'Test string',
      },
      {},
    );
    /** Approves an entitlement that is in the EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED state. This method is invoked by the provider to approve the creation of the entitlement resource. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.approve(
      {
        name: 'Test string',
      },
      {
        entitlementMigrated: 'Test string',
        properties: {
          A: 'Test string',
        },
      },
    );
    /** Approves an entitlement plan change that is in the EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL state. This method is invoked by the provider to approve the plan change on the entitlement resource. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.approvePlanChange(
      {
        name: 'Test string',
      },
      {
        pendingPlanName: 'Test string',
      },
    );
    /** Gets a requested Entitlement resource. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.get({
      name: 'Test string',
    });
    /** Lists Entitlements for which the provider has read access. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing Entitlement. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        account: 'Test string',
        cancellationReason: 'Test string',
        consumers: [
          {
            project: 'Test string',
          },
        ],
        createTime: 'Test string',
        entitlementBenefitIds: ['Test string'],
        inputProperties: {
          A: 42,
        },
        messageToUser: 'Test string',
        name: 'Test string',
        newOfferEndTime: 'Test string',
        newOfferStartTime: 'Test string',
        newPendingOffer: 'Test string',
        newPendingOfferDuration: 'Test string',
        newPendingPlan: 'Test string',
        offer: 'Test string',
        offerDuration: 'Test string',
        offerEndTime: 'Test string',
        orderId: 'Test string',
        plan: 'Test string',
        product: 'Test string',
        productExternalName: 'Test string',
        provider: 'Test string',
        quoteExternalName: 'Test string',
        state: 'Test string',
        subscriptionEndTime: 'Test string',
        updateTime: 'Test string',
        usageReportingId: 'Test string',
      },
    );
    /** Rejects an entitlement that is in the EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED state. This method is invoked by the provider to reject the creation of the entitlement resource. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.reject(
      {
        name: 'Test string',
      },
      {
        reason: 'Test string',
      },
    );
    /** Rejects an entitlement plan change that is in the EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL state. This method is invoked by the provider to reject the plan change on the entitlement resource. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.rejectPlanChange(
      {
        name: 'Test string',
      },
      {
        pendingPlanName: 'Test string',
        reason: 'Test string',
      },
    );
    /** Requests suspension of an active Entitlement. This is not yet supported. */
    await gapi.client.cloudcommerceprocurement.providers.entitlements.suspend(
      {
        name: 'Test string',
      },
      {
        reason: 'Test string',
      },
    );
  }
});
