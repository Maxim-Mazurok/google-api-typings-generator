/* Type definitions for non-npm package Cloud Datastore API v1beta1 0.0 */
// Project: https://cloud.google.com/datastore/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://datastore.googleapis.com/$discovery/rest?version=v1beta1
// Revision: 20240512

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Datastore API v1beta1 */
  function load(
    urlOrObject: 'https://datastore.googleapis.com/$discovery/rest?version=v1beta1'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'datastore', version: 'v1beta1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'datastore',
    version: 'v1beta1',
    callback: () => any
  ): void;

  namespace datastore {
    interface GoogleDatastoreAdminV1beta1CommonMetadata {
      /** The time the operation ended, either successfully or otherwise. */
      endTime?: string;
      /** The client-assigned labels which were provided when the operation was created. May also include additional labels. */
      labels?: {[P in string]: string};
      /** The type of the operation. Can be used as a filter in ListOperationsRequest. */
      operationType?: string;
      /** The time that work began on the operation. */
      startTime?: string;
      /** The current state of the Operation. */
      state?: string;
    }
    interface GoogleDatastoreAdminV1beta1EntityFilter {
      /** If empty, then this represents all kinds. */
      kinds?: string[];
      /** An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. */
      namespaceIds?: string[];
    }
    interface GoogleDatastoreAdminV1beta1ExportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1beta1CommonMetadata;
      /** Description of which entities are being exported. */
      entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter;
      /** Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url. */
      outputUrlPrefix?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1beta1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1beta1Progress;
    }
    interface GoogleDatastoreAdminV1beta1ExportEntitiesRequest {
      /** Description of what data from the project is included in the export. */
      entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter;
      /** Client-assigned labels. */
      labels?: {[P in string]: string};
      /** Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict. */
      outputUrlPrefix?: string;
    }
    interface GoogleDatastoreAdminV1beta1ExportEntitiesResponse {
      /** Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully. */
      outputUrl?: string;
    }
    interface GoogleDatastoreAdminV1beta1ImportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1beta1CommonMetadata;
      /** Description of which entities are being imported. */
      entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter;
      /** The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. */
      inputUrl?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1beta1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1beta1Progress;
    }
    interface GoogleDatastoreAdminV1beta1ImportEntitiesRequest {
      /** Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error will be returned. If no filter is specified then all entities from the export are imported. */
      entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter;
      /** The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url. */
      inputUrl?: string;
      /** Client-assigned labels. */
      labels?: {[P in string]: string};
    }
    interface GoogleDatastoreAdminV1beta1Progress {
      /** The amount of work that has been completed. Note that this may be greater than work_estimated. */
      workCompleted?: string;
      /** An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable. */
      workEstimated?: string;
    }
    interface GoogleDatastoreAdminV1CommonMetadata {
      /** The time the operation ended, either successfully or otherwise. */
      endTime?: string;
      /** The client-assigned labels which were provided when the operation was created. May also include additional labels. */
      labels?: {[P in string]: string};
      /** The type of the operation. Can be used as a filter in ListOperationsRequest. */
      operationType?: string;
      /** The time that work began on the operation. */
      startTime?: string;
      /** The current state of the Operation. */
      state?: string;
    }
    interface GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata {
      /** The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode. */
      migrationState?: string;
      /** The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode. */
      migrationStep?: string;
    }
    interface GoogleDatastoreAdminV1EntityFilter {
      /** If empty, then this represents all kinds. */
      kinds?: string[];
      /** An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. */
      namespaceIds?: string[];
    }
    interface GoogleDatastoreAdminV1ExportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1CommonMetadata;
      /** Description of which entities are being exported. */
      entityFilter?: GoogleDatastoreAdminV1EntityFilter;
      /** Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url. */
      outputUrlPrefix?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1Progress;
    }
    interface GoogleDatastoreAdminV1ExportEntitiesResponse {
      /** Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully. */
      outputUrl?: string;
    }
    interface GoogleDatastoreAdminV1ImportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1CommonMetadata;
      /** Description of which entities are being imported. */
      entityFilter?: GoogleDatastoreAdminV1EntityFilter;
      /** The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. */
      inputUrl?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1Progress;
    }
    interface GoogleDatastoreAdminV1IndexOperationMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1CommonMetadata;
      /** The index resource ID that this operation is acting on. */
      indexId?: string;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1Progress;
    }
    interface GoogleDatastoreAdminV1MigrationProgressEvent {
      /** Details for the `PREPARE` step. */
      prepareStepDetails?: GoogleDatastoreAdminV1PrepareStepDetails;
      /** Details for the `REDIRECT_WRITES` step. */
      redirectWritesStepDetails?: GoogleDatastoreAdminV1RedirectWritesStepDetails;
      /** The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state. */
      step?: string;
    }
    interface GoogleDatastoreAdminV1MigrationStateEvent {
      /** The new state of the migration. */
      state?: string;
    }
    interface GoogleDatastoreAdminV1PrepareStepDetails {
      /** The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step. */
      concurrencyMode?: string;
    }
    interface GoogleDatastoreAdminV1Progress {
      /** The amount of work that has been completed. Note that this may be greater than work_estimated. */
      workCompleted?: string;
      /** An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable. */
      workEstimated?: string;
    }
    interface GoogleDatastoreAdminV1RedirectWritesStepDetails {
      /** Ths concurrency mode for this database. */
      concurrencyMode?: string;
    }
    interface GoogleLongrunningOperation {
      /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: Status;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
      name?: string;
      /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
      response?: {[P in string]: any};
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface ProjectsResource {
      /** Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. */
      export(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleDatastoreAdminV1beta1ExportEntitiesRequest;
      }): Request<GoogleLongrunningOperation>;
      export(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Project ID against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleDatastoreAdminV1beta1ExportEntitiesRequest
      ): Request<GoogleLongrunningOperation>;
      /** Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore. */
      import(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Project ID against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleDatastoreAdminV1beta1ImportEntitiesRequest;
      }): Request<GoogleLongrunningOperation>;
      import(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Project ID against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleDatastoreAdminV1beta1ImportEntitiesRequest
      ): Request<GoogleLongrunningOperation>;
    }

    const projects: ProjectsResource;
  }
}
