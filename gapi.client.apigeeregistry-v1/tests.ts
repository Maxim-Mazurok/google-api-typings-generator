/* This is stub file for gapi.client.apigeeregistry-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230127

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://apigeeregistry.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.apigeeregistry */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.apigeeregistry.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.apigeeregistry.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a specified API. */
        await gapi.client.apigeeregistry.projects.locations.apis.create({
            apiId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            availability: "Test string",
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            recommendedDeployment: "Test string",
            recommendedVersion: "Test string",
            updateTime: "Test string",
        });
        /** Removes a specified API and all of the resources that it owns. */
        await gapi.client.apigeeregistry.projects.locations.apis.delete({
            force: true,
            name: "Test string",
        });
        /** Returns a specified API. */
        await gapi.client.apigeeregistry.projects.locations.apis.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching APIs. */
        await gapi.client.apigeeregistry.projects.locations.apis.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to modify a specified API. */
        await gapi.client.apigeeregistry.projects.locations.apis.patch({
            allowMissing: true,
            name: "Test string",
            updateMask: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            availability: "Test string",
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            recommendedDeployment: "Test string",
            recommendedVersion: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.create({
            artifactId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Removes a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.delete({
            name: "Test string",
        });
        /** Returns a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.get({
            name: "Test string",
        });
        /**
         * Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field
         * indicates the exact format returned).
         */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.getContents({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching artifacts. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to replace a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.replaceArtifact({
            name: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.artifacts.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified deployment. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.create({
            apiDeploymentId: "Test string",
            parent: "Test string",
        }, {
            accessGuidance: "Test string",
            annotations: {
                A: "Test string"
            },
            apiSpecRevision: "Test string",
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            endpointUri: "Test string",
            externalChannelUri: "Test string",
            intendedAudience: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            revisionUpdateTime: "Test string",
        });
        /** Removes a specified deployment, all revisions, and all child resources (e.g., artifacts). */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.delete({
            force: true,
            name: "Test string",
        });
        /** Deletes a revision of a deployment. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.deleteRevision({
            name: "Test string",
        });
        /** Returns a specified deployment. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching deployments. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Lists all revisions of a deployment. Revisions are returned in descending order of revision creation time. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.listRevisions({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Used to modify a specified deployment. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.patch({
            allowMissing: true,
            name: "Test string",
            updateMask: "Test string",
        }, {
            accessGuidance: "Test string",
            annotations: {
                A: "Test string"
            },
            apiSpecRevision: "Test string",
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            endpointUri: "Test string",
            externalChannelUri: "Test string",
            intendedAudience: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            revisionUpdateTime: "Test string",
        });
        /** Sets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.rollback({
            name: "Test string",
        }, {
            revisionId: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Adds a tag to a specified revision of a deployment. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.tagRevision({
            name: "Test string",
        }, {
            tag: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.artifacts.create({
            artifactId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Removes a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.artifacts.delete({
            name: "Test string",
        });
        /** Returns a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.artifacts.get({
            name: "Test string",
        });
        /**
         * Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field
         * indicates the exact format returned).
         */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.artifacts.getContents({
            name: "Test string",
        });
        /** Returns matching artifacts. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.artifacts.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to replace a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.deployments.artifacts.replaceArtifact({
            name: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Creates a specified version. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.create({
            apiVersionId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            primarySpec: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Removes a specified version and all of the resources that it owns. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.delete({
            force: true,
            name: "Test string",
        });
        /** Returns a specified version. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching versions. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to modify a specified version. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.patch({
            allowMissing: true,
            name: "Test string",
            updateMask: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            primarySpec: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.create({
            artifactId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Removes a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.delete({
            name: "Test string",
        });
        /** Returns a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.get({
            name: "Test string",
        });
        /**
         * Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field
         * indicates the exact format returned).
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.getContents({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching artifacts. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to replace a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.replaceArtifact({
            name: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.artifacts.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified spec. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.create({
            apiSpecId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            description: "Test string",
            filename: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            revisionUpdateTime: "Test string",
            sizeBytes: 42,
            sourceUri: "Test string",
        });
        /** Removes a specified spec, all revisions, and all child resources (e.g., artifacts). */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.delete({
            force: true,
            name: "Test string",
        });
        /** Deletes a revision of a spec. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.deleteRevision({
            name: "Test string",
        });
        /** Returns a specified spec. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.get({
            name: "Test string",
        });
        /**
         * Returns the contents of a specified spec. If specs are stored with GZip compression, the default behavior is to return the spec uncompressed (the mime_type response field indicates the
         * exact format returned).
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.getContents({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching specs. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Lists all revisions of a spec. Revisions are returned in descending order of revision creation time. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.listRevisions({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Used to modify a specified spec. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.patch({
            allowMissing: true,
            name: "Test string",
            updateMask: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            description: "Test string",
            filename: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            revisionUpdateTime: "Test string",
            sizeBytes: 42,
            sourceUri: "Test string",
        });
        /** Sets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.rollback({
            name: "Test string",
        }, {
            revisionId: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Adds a tag to a specified revision of a spec. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.tagRevision({
            name: "Test string",
        }, {
            tag: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.create({
            artifactId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Removes a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.delete({
            name: "Test string",
        });
        /** Returns a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.get({
            name: "Test string",
        });
        /**
         * Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field
         * indicates the exact format returned).
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.getContents({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching artifacts. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to replace a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.replaceArtifact({
            name: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.apis.versions.specs.artifacts.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.create({
            artifactId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Removes a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.delete({
            name: "Test string",
        });
        /** Returns a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.get({
            name: "Test string",
        });
        /**
         * Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field
         * indicates the exact format returned).
         */
        await gapi.client.apigeeregistry.projects.locations.artifacts.getContents({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns matching artifacts. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Used to replace a specified artifact. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.replaceArtifact({
            name: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            contents: "Test string",
            createTime: "Test string",
            hash: "Test string",
            labels: {
                A: "Test string"
            },
            mimeType: "Test string",
            name: "Test string",
            sizeBytes: 42,
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.artifacts.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.artifacts.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Provisions instance resources for the Registry. */
        await gapi.client.apigeeregistry.projects.locations.instances.create({
            instanceId: "Test string",
            parent: "Test string",
        }, {
            build: {
                commitId: "Test string",
                commitTime: "Test string",
                repo: "Test string",
            },
            config: {
                cmekKeyName: "Test string",
                location: "Test string",
            },
            createTime: "Test string",
            name: "Test string",
            state: "Test string",
            stateMessage: "Test string",
            updateTime: "Test string",
        });
        /** Deletes the Registry instance. */
        await gapi.client.apigeeregistry.projects.locations.instances.delete({
            name: "Test string",
        });
        /** Gets details of a single Instance. */
        await gapi.client.apigeeregistry.projects.locations.instances.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.instances.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.instances.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.instances.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.apigeeregistry.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.apigeeregistry.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.apigeeregistry.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.apigeeregistry.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.apigeeregistry.projects.locations.runtime.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.apigeeregistry.projects.locations.runtime.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.apigeeregistry.projects.locations.runtime.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
