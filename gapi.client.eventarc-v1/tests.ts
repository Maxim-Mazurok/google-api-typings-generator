/* This is stub file for gapi.client.eventarc-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250624

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://eventarc.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.eventarc */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.eventarc.projects.locations.get({
      name: 'Test string',
    });
    /** Get a GoogleChannelConfig. The name of the GoogleChannelConfig in the response is ALWAYS coded with projectID. */
    await gapi.client.eventarc.projects.locations.getGoogleChannelConfig({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.eventarc.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Update a single GoogleChannelConfig */
    await gapi.client.eventarc.projects.locations.updateGoogleChannelConfig(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        cryptoKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new ChannelConnection in a particular project and location. */
    await gapi.client.eventarc.projects.locations.channelConnections.create(
      {
        channelConnectionId: 'Test string',
        parent: 'Test string',
      },
      {
        activationToken: 'Test string',
        channel: 'Test string',
        createTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single ChannelConnection. */
    await gapi.client.eventarc.projects.locations.channelConnections.delete({
      name: 'Test string',
    });
    /** Get a single ChannelConnection. */
    await gapi.client.eventarc.projects.locations.channelConnections.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.channelConnections.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** List channel connections. */
    await gapi.client.eventarc.projects.locations.channelConnections.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.channelConnections.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.channelConnections.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a new channel in a particular project and location. */
    await gapi.client.eventarc.projects.locations.channels.create(
      {
        channelId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        activationToken: 'Test string',
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        provider: 'Test string',
        pubsubTopic: 'Test string',
        satisfiesPzs: true,
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single channel. */
    await gapi.client.eventarc.projects.locations.channels.delete({
      name: 'Test string',
      validateOnly: true,
    });
    /** Get a single Channel. */
    await gapi.client.eventarc.projects.locations.channels.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.channels.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** List channels. */
    await gapi.client.eventarc.projects.locations.channels.list({
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single channel. */
    await gapi.client.eventarc.projects.locations.channels.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        activationToken: 'Test string',
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        provider: 'Test string',
        pubsubTopic: 'Test string',
        satisfiesPzs: true,
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.channels.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.channels.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a new Enrollment in a particular project and location. */
    await gapi.client.eventarc.projects.locations.enrollments.create(
      {
        enrollmentId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        celMatch: 'Test string',
        createTime: 'Test string',
        destination: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        messageBus: 'Test string',
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single Enrollment. */
    await gapi.client.eventarc.projects.locations.enrollments.delete({
      allowMissing: true,
      etag: 'Test string',
      name: 'Test string',
      validateOnly: true,
    });
    /** Get a single Enrollment. */
    await gapi.client.eventarc.projects.locations.enrollments.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.enrollments.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** List Enrollments. */
    await gapi.client.eventarc.projects.locations.enrollments.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single Enrollment. */
    await gapi.client.eventarc.projects.locations.enrollments.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        celMatch: 'Test string',
        createTime: 'Test string',
        destination: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        messageBus: 'Test string',
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.enrollments.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.enrollments.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a new GoogleApiSource in a particular project and location. */
    await gapi.client.eventarc.projects.locations.googleApiSources.create(
      {
        googleApiSourceId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        destination: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        loggingConfig: {
          logSeverity: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single GoogleApiSource. */
    await gapi.client.eventarc.projects.locations.googleApiSources.delete({
      allowMissing: true,
      etag: 'Test string',
      name: 'Test string',
      validateOnly: true,
    });
    /** Get a single GoogleApiSource. */
    await gapi.client.eventarc.projects.locations.googleApiSources.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.googleApiSources.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** List GoogleApiSources. */
    await gapi.client.eventarc.projects.locations.googleApiSources.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single GoogleApiSource. */
    await gapi.client.eventarc.projects.locations.googleApiSources.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        destination: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        loggingConfig: {
          logSeverity: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.googleApiSources.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.googleApiSources.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.kafkaSources.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.kafkaSources.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.kafkaSources.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a new MessageBus in a particular project and location. */
    await gapi.client.eventarc.projects.locations.messageBuses.create(
      {
        messageBusId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        loggingConfig: {
          logSeverity: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single message bus. */
    await gapi.client.eventarc.projects.locations.messageBuses.delete({
      allowMissing: true,
      etag: 'Test string',
      name: 'Test string',
      validateOnly: true,
    });
    /** Get a single MessageBus. */
    await gapi.client.eventarc.projects.locations.messageBuses.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.messageBuses.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** List message buses. */
    await gapi.client.eventarc.projects.locations.messageBuses.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** List message bus enrollments. */
    await gapi.client.eventarc.projects.locations.messageBuses.listEnrollments({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single message bus. */
    await gapi.client.eventarc.projects.locations.messageBuses.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        loggingConfig: {
          logSeverity: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.messageBuses.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.messageBuses.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.eventarc.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.eventarc.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.eventarc.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.eventarc.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Create a new Pipeline in a particular project and location. */
    await gapi.client.eventarc.projects.locations.pipelines.create(
      {
        parent: 'Test string',
        pipelineId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        destinations: [
          {
            authenticationConfig: {
              googleOidc: {
                audience: 'Test string',
                serviceAccount: 'Test string',
              },
              oauthToken: {
                scope: 'Test string',
                serviceAccount: 'Test string',
              },
            },
            httpEndpoint: {
              messageBindingTemplate: 'Test string',
              uri: 'Test string',
            },
            messageBus: 'Test string',
            networkConfig: {
              networkAttachment: 'Test string',
            },
            outputPayloadFormat: {
              avro: {
                schemaDefinition: 'Test string',
              },
              json: {},
              protobuf: {
                schemaDefinition: 'Test string',
              },
            },
            topic: 'Test string',
            workflow: 'Test string',
          },
        ],
        displayName: 'Test string',
        etag: 'Test string',
        inputPayloadFormat: {
          avro: {
            schemaDefinition: 'Test string',
          },
          json: {},
          protobuf: {
            schemaDefinition: 'Test string',
          },
        },
        labels: {
          A: 'Test string',
        },
        loggingConfig: {
          logSeverity: 'Test string',
        },
        mediations: [
          {
            transformation: {
              transformationTemplate: 'Test string',
            },
          },
        ],
        name: 'Test string',
        retryPolicy: {
          maxAttempts: 42,
          maxRetryDelay: 'Test string',
          minRetryDelay: 'Test string',
        },
        satisfiesPzs: true,
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single pipeline. */
    await gapi.client.eventarc.projects.locations.pipelines.delete({
      allowMissing: true,
      etag: 'Test string',
      name: 'Test string',
      validateOnly: true,
    });
    /** Get a single Pipeline. */
    await gapi.client.eventarc.projects.locations.pipelines.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.pipelines.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** List pipelines. */
    await gapi.client.eventarc.projects.locations.pipelines.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single pipeline. */
    await gapi.client.eventarc.projects.locations.pipelines.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        cryptoKeyName: 'Test string',
        destinations: [
          {
            authenticationConfig: {
              googleOidc: {
                audience: 'Test string',
                serviceAccount: 'Test string',
              },
              oauthToken: {
                scope: 'Test string',
                serviceAccount: 'Test string',
              },
            },
            httpEndpoint: {
              messageBindingTemplate: 'Test string',
              uri: 'Test string',
            },
            messageBus: 'Test string',
            networkConfig: {
              networkAttachment: 'Test string',
            },
            outputPayloadFormat: {
              avro: {
                schemaDefinition: 'Test string',
              },
              json: {},
              protobuf: {
                schemaDefinition: 'Test string',
              },
            },
            topic: 'Test string',
            workflow: 'Test string',
          },
        ],
        displayName: 'Test string',
        etag: 'Test string',
        inputPayloadFormat: {
          avro: {
            schemaDefinition: 'Test string',
          },
          json: {},
          protobuf: {
            schemaDefinition: 'Test string',
          },
        },
        labels: {
          A: 'Test string',
        },
        loggingConfig: {
          logSeverity: 'Test string',
        },
        mediations: [
          {
            transformation: {
              transformationTemplate: 'Test string',
            },
          },
        ],
        name: 'Test string',
        retryPolicy: {
          maxAttempts: 42,
          maxRetryDelay: 'Test string',
          minRetryDelay: 'Test string',
        },
        satisfiesPzs: true,
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.pipelines.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.pipelines.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Get a single Provider. */
    await gapi.client.eventarc.projects.locations.providers.get({
      name: 'Test string',
    });
    /** List providers. */
    await gapi.client.eventarc.projects.locations.providers.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Create a new trigger in a particular project and location. */
    await gapi.client.eventarc.projects.locations.triggers.create(
      {
        parent: 'Test string',
        triggerId: 'Test string',
        validateOnly: true,
      },
      {
        channel: 'Test string',
        conditions: {
          A: {
            code: 'Test string',
            message: 'Test string',
          },
        },
        createTime: 'Test string',
        destination: {
          cloudFunction: 'Test string',
          cloudRun: {
            path: 'Test string',
            region: 'Test string',
            service: 'Test string',
          },
          gke: {
            cluster: 'Test string',
            location: 'Test string',
            namespace: 'Test string',
            path: 'Test string',
            service: 'Test string',
          },
          httpEndpoint: {
            uri: 'Test string',
          },
          networkConfig: {
            networkAttachment: 'Test string',
          },
          workflow: 'Test string',
        },
        etag: 'Test string',
        eventDataContentType: 'Test string',
        eventFilters: [
          {
            attribute: 'Test string',
            operator: 'Test string',
            value: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        satisfiesPzs: true,
        serviceAccount: 'Test string',
        transport: {
          pubsub: {
            subscription: 'Test string',
            topic: 'Test string',
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single trigger. */
    await gapi.client.eventarc.projects.locations.triggers.delete({
      allowMissing: true,
      etag: 'Test string',
      name: 'Test string',
      validateOnly: true,
    });
    /** Get a single trigger. */
    await gapi.client.eventarc.projects.locations.triggers.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.eventarc.projects.locations.triggers.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** List triggers. */
    await gapi.client.eventarc.projects.locations.triggers.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single trigger. */
    await gapi.client.eventarc.projects.locations.triggers.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        channel: 'Test string',
        conditions: {
          A: {
            code: 'Test string',
            message: 'Test string',
          },
        },
        createTime: 'Test string',
        destination: {
          cloudFunction: 'Test string',
          cloudRun: {
            path: 'Test string',
            region: 'Test string',
            service: 'Test string',
          },
          gke: {
            cluster: 'Test string',
            location: 'Test string',
            namespace: 'Test string',
            path: 'Test string',
            service: 'Test string',
          },
          httpEndpoint: {
            uri: 'Test string',
          },
          networkConfig: {
            networkAttachment: 'Test string',
          },
          workflow: 'Test string',
        },
        etag: 'Test string',
        eventDataContentType: 'Test string',
        eventFilters: [
          {
            attribute: 'Test string',
            operator: 'Test string',
            value: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        satisfiesPzs: true,
        serviceAccount: 'Test string',
        transport: {
          pubsub: {
            subscription: 'Test string',
            topic: 'Test string',
          },
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.eventarc.projects.locations.triggers.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.eventarc.projects.locations.triggers.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
  }
});
