/* This is stub file for gapi.client.policysimulator-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240609

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://policysimulator.googleapis.com/$discovery/rest?version=v1beta'
  );
  /** now we can use gapi.client.policysimulator */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.folders.locations.orgPolicyViolationsPreviews.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Creates and starts a Replay using the given ReplayConfig. */
    await gapi.client.policysimulator.folders.locations.replays.create(
      {
        parent: 'Test string',
      },
      {
        config: {
          logSource: 'Test string',
          policyOverlay: {
            A: {
              auditConfigs: [
                {
                  auditLogConfigs: [
                    {
                      exemptedMembers: ['Test string'],
                      logType: 'Test string',
                    },
                  ],
                  service: 'Test string',
                },
              ],
              bindings: [
                {
                  condition: {
                    description: 'Test string',
                    expression: 'Test string',
                    location: 'Test string',
                    title: 'Test string',
                  },
                  members: ['Test string'],
                  role: 'Test string',
                },
              ],
              etag: 'Test string',
              version: 42,
            },
          },
        },
        name: 'Test string',
        resultsSummary: {
          differenceCount: 42,
          errorCount: 42,
          logCount: 42,
          newestDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          oldestDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          unchangedCount: 42,
        },
        state: 'Test string',
      }
    );
    /** Gets the specified Replay. Each `Replay` is available for at least 7 days. */
    await gapi.client.policysimulator.folders.locations.replays.get({
      name: 'Test string',
    });
    /** Lists each Replay in a project, folder, or organization. Each `Replay` is available for at least 7 days. */
    await gapi.client.policysimulator.folders.locations.replays.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.folders.locations.replays.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.policysimulator.folders.locations.replays.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Lists the results of running a Replay. */
    await gapi.client.policysimulator.folders.locations.replays.results.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.policysimulator.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** CreateOrgPolicyViolationsPreview creates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes. */
    await gapi.client.policysimulator.organizations.locations.orgPolicyViolationsPreviews.create(
      {
        orgPolicyViolationsPreviewId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        customConstraints: ['Test string'],
        name: 'Test string',
        overlay: {
          customConstraints: [
            {
              customConstraint: {
                actionType: 'Test string',
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                methodTypes: ['Test string'],
                name: 'Test string',
                resourceTypes: ['Test string'],
                updateTime: 'Test string',
              },
              customConstraintParent: 'Test string',
            },
          ],
          policies: [
            {
              policy: {
                alternate: {
                  launch: 'Test string',
                  spec: {
                    etag: 'Test string',
                    inheritFromParent: true,
                    reset: true,
                    rules: [
                      {
                        allowAll: true,
                        condition: {
                          description: 'Test string',
                          expression: 'Test string',
                          location: 'Test string',
                          title: 'Test string',
                        },
                        denyAll: true,
                        enforce: true,
                        values: {
                          allowedValues: ['Test string'],
                          deniedValues: ['Test string'],
                        },
                      },
                    ],
                    updateTime: 'Test string',
                  },
                },
                dryRunSpec: {
                  etag: 'Test string',
                  inheritFromParent: true,
                  reset: true,
                  rules: [
                    {
                      allowAll: true,
                      condition: {
                        description: 'Test string',
                        expression: 'Test string',
                        location: 'Test string',
                        title: 'Test string',
                      },
                      denyAll: true,
                      enforce: true,
                      values: {
                        allowedValues: ['Test string'],
                        deniedValues: ['Test string'],
                      },
                    },
                  ],
                  updateTime: 'Test string',
                },
                etag: 'Test string',
                name: 'Test string',
                spec: {
                  etag: 'Test string',
                  inheritFromParent: true,
                  reset: true,
                  rules: [
                    {
                      allowAll: true,
                      condition: {
                        description: 'Test string',
                        expression: 'Test string',
                        location: 'Test string',
                        title: 'Test string',
                      },
                      denyAll: true,
                      enforce: true,
                      values: {
                        allowedValues: ['Test string'],
                        deniedValues: ['Test string'],
                      },
                    },
                  ],
                  updateTime: 'Test string',
                },
              },
              policyParent: 'Test string',
            },
          ],
        },
        resourceCounts: {
          compliant: 42,
          errors: 42,
          noncompliant: 42,
          scanned: 42,
          unenforced: 42,
        },
        state: 'Test string',
        violationsCount: 42,
      }
    );
    /** GenerateOrgPolicyViolationsPreview generates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes. */
    await gapi.client.policysimulator.organizations.locations.orgPolicyViolationsPreviews.generate(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        customConstraints: ['Test string'],
        name: 'Test string',
        overlay: {
          customConstraints: [
            {
              customConstraint: {
                actionType: 'Test string',
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                methodTypes: ['Test string'],
                name: 'Test string',
                resourceTypes: ['Test string'],
                updateTime: 'Test string',
              },
              customConstraintParent: 'Test string',
            },
          ],
          policies: [
            {
              policy: {
                alternate: {
                  launch: 'Test string',
                  spec: {
                    etag: 'Test string',
                    inheritFromParent: true,
                    reset: true,
                    rules: [
                      {
                        allowAll: true,
                        condition: {
                          description: 'Test string',
                          expression: 'Test string',
                          location: 'Test string',
                          title: 'Test string',
                        },
                        denyAll: true,
                        enforce: true,
                        values: {
                          allowedValues: ['Test string'],
                          deniedValues: ['Test string'],
                        },
                      },
                    ],
                    updateTime: 'Test string',
                  },
                },
                dryRunSpec: {
                  etag: 'Test string',
                  inheritFromParent: true,
                  reset: true,
                  rules: [
                    {
                      allowAll: true,
                      condition: {
                        description: 'Test string',
                        expression: 'Test string',
                        location: 'Test string',
                        title: 'Test string',
                      },
                      denyAll: true,
                      enforce: true,
                      values: {
                        allowedValues: ['Test string'],
                        deniedValues: ['Test string'],
                      },
                    },
                  ],
                  updateTime: 'Test string',
                },
                etag: 'Test string',
                name: 'Test string',
                spec: {
                  etag: 'Test string',
                  inheritFromParent: true,
                  reset: true,
                  rules: [
                    {
                      allowAll: true,
                      condition: {
                        description: 'Test string',
                        expression: 'Test string',
                        location: 'Test string',
                        title: 'Test string',
                      },
                      denyAll: true,
                      enforce: true,
                      values: {
                        allowedValues: ['Test string'],
                        deniedValues: ['Test string'],
                      },
                    },
                  ],
                  updateTime: 'Test string',
                },
              },
              policyParent: 'Test string',
            },
          ],
        },
        resourceCounts: {
          compliant: 42,
          errors: 42,
          noncompliant: 42,
          scanned: 42,
          unenforced: 42,
        },
        state: 'Test string',
        violationsCount: 42,
      }
    );
    /** GetOrgPolicyViolationsPreview gets the specified OrgPolicyViolationsPreview. Each OrgPolicyViolationsPreview is available for at least 7 days. */
    await gapi.client.policysimulator.organizations.locations.orgPolicyViolationsPreviews.get(
      {
        name: 'Test string',
      }
    );
    /** ListOrgPolicyViolationsPreviews lists each OrgPolicyViolationsPreview in an organization. Each OrgPolicyViolationsPreview is available for at least 7 days. */
    await gapi.client.policysimulator.organizations.locations.orgPolicyViolationsPreviews.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.organizations.locations.orgPolicyViolationsPreviews.operations.get(
      {
        name: 'Test string',
      }
    );
    /** ListOrgPolicyViolations lists the OrgPolicyViolations that are present in an OrgPolicyViolationsPreview. */
    await gapi.client.policysimulator.organizations.locations.orgPolicyViolationsPreviews.orgPolicyViolations.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates and starts a Replay using the given ReplayConfig. */
    await gapi.client.policysimulator.organizations.locations.replays.create(
      {
        parent: 'Test string',
      },
      {
        config: {
          logSource: 'Test string',
          policyOverlay: {
            A: {
              auditConfigs: [
                {
                  auditLogConfigs: [
                    {
                      exemptedMembers: ['Test string'],
                      logType: 'Test string',
                    },
                  ],
                  service: 'Test string',
                },
              ],
              bindings: [
                {
                  condition: {
                    description: 'Test string',
                    expression: 'Test string',
                    location: 'Test string',
                    title: 'Test string',
                  },
                  members: ['Test string'],
                  role: 'Test string',
                },
              ],
              etag: 'Test string',
              version: 42,
            },
          },
        },
        name: 'Test string',
        resultsSummary: {
          differenceCount: 42,
          errorCount: 42,
          logCount: 42,
          newestDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          oldestDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          unchangedCount: 42,
        },
        state: 'Test string',
      }
    );
    /** Gets the specified Replay. Each `Replay` is available for at least 7 days. */
    await gapi.client.policysimulator.organizations.locations.replays.get({
      name: 'Test string',
    });
    /** Lists each Replay in a project, folder, or organization. Each `Replay` is available for at least 7 days. */
    await gapi.client.policysimulator.organizations.locations.replays.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.organizations.locations.replays.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.policysimulator.organizations.locations.replays.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Lists the results of running a Replay. */
    await gapi.client.policysimulator.organizations.locations.replays.results.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.projects.locations.orgPolicyViolationsPreviews.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Creates and starts a Replay using the given ReplayConfig. */
    await gapi.client.policysimulator.projects.locations.replays.create(
      {
        parent: 'Test string',
      },
      {
        config: {
          logSource: 'Test string',
          policyOverlay: {
            A: {
              auditConfigs: [
                {
                  auditLogConfigs: [
                    {
                      exemptedMembers: ['Test string'],
                      logType: 'Test string',
                    },
                  ],
                  service: 'Test string',
                },
              ],
              bindings: [
                {
                  condition: {
                    description: 'Test string',
                    expression: 'Test string',
                    location: 'Test string',
                    title: 'Test string',
                  },
                  members: ['Test string'],
                  role: 'Test string',
                },
              ],
              etag: 'Test string',
              version: 42,
            },
          },
        },
        name: 'Test string',
        resultsSummary: {
          differenceCount: 42,
          errorCount: 42,
          logCount: 42,
          newestDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          oldestDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          unchangedCount: 42,
        },
        state: 'Test string',
      }
    );
    /** Gets the specified Replay. Each `Replay` is available for at least 7 days. */
    await gapi.client.policysimulator.projects.locations.replays.get({
      name: 'Test string',
    });
    /** Lists each Replay in a project, folder, or organization. Each `Replay` is available for at least 7 days. */
    await gapi.client.policysimulator.projects.locations.replays.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.policysimulator.projects.locations.replays.operations.get(
      {
        name: 'Test string',
      }
    );
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.policysimulator.projects.locations.replays.operations.list(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Lists the results of running a Replay. */
    await gapi.client.policysimulator.projects.locations.replays.results.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
