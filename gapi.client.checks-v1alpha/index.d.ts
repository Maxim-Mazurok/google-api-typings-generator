/* Type definitions for non-npm package Checks API v1alpha 0.0 */
// Project: https://developers.google.com/checks
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://checks.googleapis.com/$discovery/rest?version=v1alpha
// Revision: 20230823

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Checks API v1alpha */
    function load(urlOrObject: "https://checks.googleapis.com/$discovery/rest?version=v1alpha"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "checks", version: "v1alpha"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "checks", version: "v1alpha", callback: () => any): void;

    namespace checks {
        interface AnalyzePrivacyPolicyRequest {
            /** The HTML content of the privacy policy. This is useful if you'd like to manage the crawling and rendering of the privacy policy. */
            privacyPolicyPageContent?:
                string;
            /** The URI that points to the web page for the privacy policy. */
            privacyPolicyUri?:
                string;
        }
        interface AnalyzePrivacyPolicyResponse {
            /** A list of detected purposes in the privacy policy. */
            dataPurposeAnnotations?:
                PolicyPurposeOfUseAnnotation[];
            /** A list of detected data types in the privacy policy. */
            dataTypeAnnotations?:
                PolicyDataTypeAnnotation[];
            /** HTML content for the privacy policy page. The byte offsets in each annotated section will match this content. */
            htmlContent?:
                string;
            /** Information about the date when the privacy policy was last updated. */
            lastUpdatedDateInfo?:
                LastUpdatedDate;
            /** A list of detected topics in the privacy policy. */
            sectionAnnotations?:
                PolicySectionAnnotation[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface Date {
            /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
            day?:
                number;
            /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
            month?:
                number;
            /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
            year?:
                number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FindPrivacyPolicyResponse {
            /** Resource name of the PrivacyPolicy that was found. */
            privacyPolicy?:
                string;
        }
        interface GoogleChecksReportV1alphaAnalyzeUploadRequest {
            /** Optional. Git commit hash or changelist number associated with the upload. */
            codeReferenceId?:
                string;
        }
        interface GoogleChecksReportV1alphaAppBundle {
            /** Unique id of the bundle. For example: "com.google.Gmail". */
            bundleId?:
                string;
            /** Git commit hash or changelist number associated with the release. */
            codeReferenceId?:
                string;
            /** Identifies the type of release. */
            releaseType?:
                string;
            /** The user-visible version of the bundle such as the Android `versionName` or iOS `CFBundleShortVersionString`. For example: "7.21.1". */
            version?:
                string;
            /** The version used throughout the operating system and store to identify the build such as the Android `versionCode` or iOS `CFBundleVersion`. */
            versionId?:
                string;
        }
        interface GoogleChecksReportV1alphaCheck {
            /** Regulations and policies that serve as the legal basis for the check. */
            citations?:
                GoogleChecksReportV1alphaCheckCitation[];
            /** Evidence that substantiates the check result. */
            evidence?:
                GoogleChecksReportV1alphaCheckEvidence;
            /** Regions that are impacted by the check. For more info, see https://google.aip.dev/143#countries-and-regions. */
            regionCodes?:
                string[];
            /** The urgency or risk level of the check. */
            severity?:
                string;
            /** The result after running the check. */
            state?:
                string;
            /** Additional information about the check state in relation to past reports. */
            stateMetadata?:
                GoogleChecksReportV1alphaCheckStateMetadata;
            /** The type of check that was run. A type will only appear once in a report's list of checks. */
            type?:
                string;
        }
        interface GoogleChecksReportV1alphaCheckCitation {
            /** Citation type. */
            type?:
                string;
        }
        interface GoogleChecksReportV1alphaCheckDataSecurityEvidence {
            /** Evidence related to data in transit. */
            dataInTransitInfo?:
                GoogleChecksReportV1alphaCheckDataSecurityEvidenceDataInTransitInfo[];
        }
        interface GoogleChecksReportV1alphaCheckDataSecurityEvidenceDataInTransitInfo {
            /** The URL contacted by your app. This includes the protocol, domain, and URL parameters. */
            uri?:
                string;
        }
        interface GoogleChecksReportV1alphaCheckDataTypeEvidence {
            /** The data type that was found in your app. */
            dataType?:
                string;
            /** Evidence collected about the data type. */
            dataTypeEvidence?:
                GoogleChecksReportV1alphaDataTypeEvidence;
        }
        interface GoogleChecksReportV1alphaCheckEndpointEvidence {
            /** The endpoint that was contacted by your app. */
            endpoint?:
                GoogleChecksReportV1alphaEndpoint;
        }
        interface GoogleChecksReportV1alphaCheckEndpointRestrictionViolationEvidence {
            /** Endpoints in violation. */
            endpointDetails?:
                GoogleChecksReportV1alphaCheckEndpointRestrictionViolationEvidenceEndpointDetails[];
        }
        interface GoogleChecksReportV1alphaCheckEndpointRestrictionViolationEvidenceEndpointDetails {
            /** The endpoint in violation. */
            endpoint?:
                GoogleChecksReportV1alphaEndpoint;
        }
        interface GoogleChecksReportV1alphaCheckEvidence {
            /** Evidence concerning data security. */
            dataSecurity?:
                GoogleChecksReportV1alphaCheckDataSecurityEvidence;
            /** Evidence concerning data types found in your app. */
            dataTypes?:
                GoogleChecksReportV1alphaCheckDataTypeEvidence[];
            /** Evidence collected from endpoint restriction violation analysis. */
            endpointRestrictionViolations?:
                GoogleChecksReportV1alphaCheckEndpointRestrictionViolationEvidence[];
            /** Evidence concerning endpoints that were contacted by your app. */
            endpoints?:
                GoogleChecksReportV1alphaCheckEndpointEvidence[];
            /** Evidence collected from permission restriction violation analysis. */
            permissionRestrictionViolations?:
                GoogleChecksReportV1alphaCheckPermissionRestrictionViolationEvidence[];
            /** Evidence concerning permissions that were found in your app. */
            permissions?:
                GoogleChecksReportV1alphaCheckPermissionEvidence[];
            /** Evidence collected from your privacy policy(s). */
            privacyPolicyTexts?:
                GoogleChecksReportV1alphaCheckPrivacyPolicyTextEvidence[];
            /** Evidence concerning SDK issues. */
            sdkIssues?:
                GoogleChecksReportV1alphaCheckSdkIssueEvidence[];
            /** Evidence collected from SDK restriction violation analysis. */
            sdkRestrictionViolations?:
                GoogleChecksReportV1alphaCheckSdkRestrictionViolationEvidence[];
            /** Evidence concerning SDKs that were found in your app. */
            sdks?:
                GoogleChecksReportV1alphaCheckSdkEvidence[];
        }
        interface GoogleChecksReportV1alphaCheckPermissionEvidence {
            /** The permission that was found in your app. */
            permission?:
                GoogleChecksReportV1alphaPermission;
        }
        interface GoogleChecksReportV1alphaCheckPermissionRestrictionViolationEvidence {
            /** Permissions in violation. */
            permissionDetails?:
                GoogleChecksReportV1alphaCheckPermissionRestrictionViolationEvidencePermissionDetails[];
        }
        interface GoogleChecksReportV1alphaCheckPermissionRestrictionViolationEvidencePermissionDetails {
            /** The permission in violation. */
            permission?:
                GoogleChecksReportV1alphaPermission;
        }
        interface GoogleChecksReportV1alphaCheckPrivacyPolicyTextEvidence {
            /** The privacy policy fragment that was used during the check. */
            policyFragment?:
                GoogleChecksReportV1alphaPolicyFragment;
        }
        interface GoogleChecksReportV1alphaCheckSdkEvidence {
            /** The SDK that was found in your app. */
            sdk?:
                GoogleChecksReportV1alphaSdk;
        }
        interface GoogleChecksReportV1alphaCheckSdkIssueEvidence {
            /** The SDK with an issue. */
            sdk?:
                GoogleChecksReportV1alphaSdk;
            /** The SDK version. */
            sdkVersion?:
                string;
        }
        interface GoogleChecksReportV1alphaCheckSdkRestrictionViolationEvidence {
            /** SDKs in violation. */
            sdkDetails?:
                GoogleChecksReportV1alphaCheckSdkRestrictionViolationEvidenceSdkDetails[];
        }
        interface GoogleChecksReportV1alphaCheckSdkRestrictionViolationEvidenceSdkDetails {
            /** The SDK in violation. */
            sdk?:
                GoogleChecksReportV1alphaSdk;
        }
        interface GoogleChecksReportV1alphaCheckStateMetadata {
            /** Indicators related to the check state. */
            badges?:
                string[];
            /** The time when the check first started failing. */
            firstFailingTime?:
                string;
            /** The last time the check failed. */
            lastFailingTime?:
                string;
        }
        interface GoogleChecksReportV1alphaDataMonitoring {
            /** Data types that your app shares or collects. */
            dataTypes?:
                GoogleChecksReportV1alphaDataMonitoringDataTypeResult[];
            /** Endpoints that were found by dynamic analysis of your app. */
            endpoints?:
                GoogleChecksReportV1alphaDataMonitoringEndpointResult[];
            /** Permissions that your app uses. */
            permissions?:
                GoogleChecksReportV1alphaDataMonitoringPermissionResult[];
            /** SDKs that your app uses. */
            sdks?:
                GoogleChecksReportV1alphaDataMonitoringSdkResult[];
        }
        interface GoogleChecksReportV1alphaDataMonitoringDataTypeResult {
            /** The data type that was shared or collected by your app. */
            dataType?:
                string;
            /** Evidence collected about the data type. */
            dataTypeEvidence?:
                GoogleChecksReportV1alphaDataTypeEvidence;
            /** Metadata about the result. */
            metadata?:
                GoogleChecksReportV1alphaDataMonitoringResultMetadata;
        }
        interface GoogleChecksReportV1alphaDataMonitoringEndpointResult {
            /** The endpoint that was contacted by your app. */
            endpoint?:
                GoogleChecksReportV1alphaEndpoint;
            /** The number of times this endpoint was contacted by your app. */
            hitCount?:
                number;
            /** Metadata about the result. */
            metadata?:
                GoogleChecksReportV1alphaDataMonitoringResultMetadata;
        }
        interface GoogleChecksReportV1alphaDataMonitoringPermissionResult {
            /** Metadata about the result. */
            metadata?:
                GoogleChecksReportV1alphaDataMonitoringResultMetadata;
            /** The permission that was found in your app. */
            permission?:
                GoogleChecksReportV1alphaPermission;
        }
        interface GoogleChecksReportV1alphaDataMonitoringResultMetadata {
            /** Badges that apply to this result. */
            badges?:
                string[];
            /** The timestamp when this result was first detected within the last 8 weeks. If not set, it wasn't detected within the last 8 weeks. */
            firstDetectedTime?:
                string;
            /** Your app's version name when this result was last detected within the last 8 weeks. If not set, it wasn't detected within the last 8 weeks. */
            lastDetectedAppVersion?:
                string;
            /** The timestamp when this result was last detected within the last 8 weeks. If not set, it wasn't detected within the last 8 weeks. */
            lastDetectedTime?:
                string;
        }
        interface GoogleChecksReportV1alphaDataMonitoringSdkResult {
            /** Metadata about the result. */
            metadata?:
                GoogleChecksReportV1alphaDataMonitoringResultMetadata;
            /** The SDK that was found in your app. */
            sdk?:
                GoogleChecksReportV1alphaSdk;
        }
        interface GoogleChecksReportV1alphaDataTypeEndpointEvidence {
            /** Set of SDKs that are attributed to the exfiltration. */
            attributedSdks?:
                GoogleChecksReportV1alphaDataTypeEndpointEvidenceAttributedSdk[];
            /** Endpoints the data type was sent to. */
            endpointDetails?:
                GoogleChecksReportV1alphaDataTypeEndpointEvidenceEndpointDetails[];
            /** Type of data that was exfiltrated. */
            exfiltratedDataType?:
                string;
        }
        interface GoogleChecksReportV1alphaDataTypeEndpointEvidenceAttributedSdk {
            /** SDK that is attributed to the exfiltration. */
            sdk?:
                GoogleChecksReportV1alphaSdk;
        }
        interface GoogleChecksReportV1alphaDataTypeEndpointEvidenceEndpointDetails {
            /** Endpoint the data type was sent to. */
            endpoint?:
                GoogleChecksReportV1alphaEndpoint;
        }
        interface GoogleChecksReportV1alphaDataTypeEvidence {
            /** List of endpoints the data type was sent to. */
            endpoints?:
                GoogleChecksReportV1alphaDataTypeEndpointEvidence[];
            /** List of included permissions that imply collection of the data type. */
            permissions?:
                GoogleChecksReportV1alphaDataTypePermissionEvidence[];
            /** List of privacy policy texts that imply collection of the data type. */
            privacyPolicyTexts?:
                GoogleChecksReportV1alphaDataTypePrivacyPolicyTextEvidence[];
        }
        interface GoogleChecksReportV1alphaDataTypePermissionEvidence {
            /** Permission declared by your app. */
            permission?:
                GoogleChecksReportV1alphaPermission;
        }
        interface GoogleChecksReportV1alphaDataTypePrivacyPolicyTextEvidence {
            /** The privacy policy fragment that implies collection of the data type. */
            policyFragment?:
                GoogleChecksReportV1alphaPolicyFragment;
        }
        interface GoogleChecksReportV1alphaEndpoint {
            /** Domain name (e.g. ads.google.com). */
            domain?:
                string;
        }
        interface GoogleChecksReportV1alphaListReportsResponse {
            /** A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?:
                string;
            /** The reports for the specified app. */
            reports?:
                GoogleChecksReportV1alphaReport[];
        }
        interface GoogleChecksReportV1alphaPermission {
            /** Permission identifier. */
            id?:
                string;
        }
        interface GoogleChecksReportV1alphaPolicyFragment {
            /** HTML content. */
            htmlContent?:
                string;
            /** Policy URL. */
            sourceUri?:
                string;
        }
        interface GoogleChecksReportV1alphaReport {
            /** Information about the analyzed app bundle. */
            appBundle?:
                GoogleChecksReportV1alphaAppBundle;
            /** Resource name of the base report used for comparison. May be absent if this is the first report generated for the app. */
            baseReport?:
                string;
            /** List of checks that were run on the app bundle. */
            checks?:
                GoogleChecksReportV1alphaCheck[];
            /** Information related to data monitoring. */
            dataMonitoring?:
                GoogleChecksReportV1alphaDataMonitoring;
            /** Resource name of the report. */
            name?:
                string;
            /** A URL to view results. */
            resultsUri?:
                string;
        }
        interface GoogleChecksReportV1alphaSdk {
            /** SDK identifier. */
            id?:
                string;
        }
        interface LastUpdatedDate {
            /** Byte offsets for the end of the date text inside the full text. */
            endOffset?:
                string;
            /** Date when the privacy policy was last updated. */
            lastUpdatedDate?:
                Date;
            /** Byte offsets for the start of the date text inside the full text. */
            startOffset?:
                string;
            /** The bytes of actual text content in the section. Note: - This will correspond to the whole sentence that includes the date. - This field might contain HTML and it is not sanitized. */
            textContent?:
                string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?:
                string;
            /** A list of operations that matches the specified filter in the request. */
            operations?:
                Operation[];
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?:
                string;
            /**
             * The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original
             * method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original
             * method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?:
                { [P in string]: any };
        }
        interface PolicyDataTypeAnnotation {
            /** Type of the data mentioned in the policy. */
            dataType?:
                string;
            /** Byte offsets for the end of the data type sentence inside the full text. */
            endOffset?:
                string;
            /** Score given by the model representing how confident it was regarding this `text_content` being of `data_type`. */
            score?:
                number;
            /** Byte offsets for the start of the data type sentence inside the full text. */
            startOffset?:
                string;
            /**
             * Actual text content in the section. This makes it much easier to consume the information. NOTE: This field might contain HTML and does not guarantee a SafeHtml security contract
             * go/safehtmltypecontracts#safehtml.
             */
            textContent?:
                string;
        }
        interface PolicyPurposeOfUseAnnotation {
            /** Byte offsets for the end of the purpose of use sentence inside the full text. */
            endOffset?:
                string;
            /** Purpose of use mentioned in the policy. */
            purposeOfUse?:
                string;
            /** Score given by the model representing how confident it was regarding this `text_content` being of `purpose_of_use`. */
            score?:
                number;
            /** Byte offsets for the start of the purpose of use sentence inside the full text. */
            startOffset?:
                string;
            /** The bytes of actual text content in the sentence that mentions the purpose of use. This makes it much easier to consume the information. */
            textContent?:
                string;
        }
        interface PolicySectionAnnotation {
            /** Byte offsets for the end of the section inside the full text. */
            endOffset?:
                string;
            /** Score given by the model representing how confident it was regarding this `text_content` being of `section_type`. */
            score?:
                number;
            /** Detected type of the high-level topic in the policy. */
            sectionType?:
                string;
            /** Byte offsets for the start of the section inside the full text. */
            startOffset?:
                string;
            /** Actual text content in the section. */
            textContent?:
                string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface WaitOperationRequest {
            /**
             * The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also
             * specified, the shorter one will be used.
             */
            timeout?:
                string;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be deleted. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The standard list filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation's parent resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The standard list page size. */
                pageSize?:
                    number;
                /** The standard list page token. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListOperationsResponse>;
            /**
             * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is
             * immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns
             * `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even
             * an immediate response is no guarantee that the operation is done.
             */
            wait(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to wait on. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    WaitOperationRequest;
            }): Request<Operation>;
            wait(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to wait on. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: WaitOperationRequest): Request<Operation>;
        }
        interface ReportsResource {
            /**
             * Gets a report. By default, only the name and results_uri fields are returned. You can include other fields by listing them in the `fields` URL query parameter. For example,
             * `?fields=name,checks` will return the name and checks fields.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /**
                 * Optional. An [AIP-160](https://google.aip.dev/160) filter string to filter checks within the report. Only checks that match the filter string are included in the response.
                 * Example: `state = FAILED`
                 */
                checksFilter?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the report. Example: `accounts/123/apps/456/reports/789` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<GoogleChecksReportV1alphaReport>;
            /**
             * Lists reports for the specified app. By default, only the name and results_uri fields are returned. You can include other fields by listing them in the `fields` URL query parameter.
             * For example, `?fields=reports(name,checks)` will return the name and checks fields.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /**
                 * Optional. An [AIP-160](https://google.aip.dev/160) filter string to filter checks within reports. Only checks that match the filter string are included in the response. Example:
                 * `state = FAILED`
                 */
                checksFilter?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Optional. An [AIP-160](https://google.aip.dev/160) filter string to filter reports. Example: `appBundle.releaseType = PRE_RELEASE` */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Optional. The maximum number of reports to return. If unspecified, at most 10 reports will be returned. The maximum value is 50; values above 50 will be coerced to 50. */
                pageSize?:
                    number;
                /**
                 * Optional. A page token received from a previous `ListReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListReports`
                 * must match the call that provided the page token.
                 */
                pageToken?:
                    string;
                /** Required. Resource name of the app. Example: `accounts/123/apps/456` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<GoogleChecksReportV1alphaListReportsResponse>;
        }
        interface AppsResource {
            operations:
                OperationsResource;
            reports:
                ReportsResource;
        }
        interface AccountsResource {
            apps:
                AppsResource;
        }
        interface MediaResource {
            /**
             * Analyzes the uploaded app bundle and returns a google.longrunning.Operation containing the generated Report. ## Example (upload only) Send a regular POST request with the header
             * `X-Goog-Upload-Protocol: raw`. ``` POST https://checks.googleapis.com/upload/v1alpha/{parent=accounts/*‍/apps/*}/reports:analyzeUpload HTTP/1.1 X-Goog-Upload-Protocol: raw
             * Content-Length: Content-Type: application/octet-stream ``` ## Example (upload with metadata) Send a multipart POST request where the first body part contains the metadata JSON and
             * the second body part contains the binary upload. Include the header `X-Goog-Upload-Protocol: multipart`. ``` POST
             * https://checks.googleapis.com/upload/v1alpha/{parent=accounts/*‍/apps/*}/reports:analyzeUpload HTTP/1.1 X-Goog-Upload-Protocol: multipart Content-Length: ? Content-Type:
             * multipart/related; boundary=BOUNDARY --BOUNDARY Content-Type: application/json {"code_reference_id":"db5bcc20f94055fb5bc08cbb9b0e7a5530308786"} --BOUNDARY --BOUNDARY-- ``` *Note:*
             * Metadata-only requests are not supported.
             */
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Resource name of the app. Example: `accounts/123/apps/456` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    GoogleChecksReportV1alphaAnalyzeUploadRequest;
            }): Request<Operation>;
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Resource name of the app. Example: `accounts/123/apps/456` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: GoogleChecksReportV1alphaAnalyzeUploadRequest): Request<Operation>;
        }
        interface PrivacypolicyResource {
            /** Performs a synchronous analysis of a privacy policy, where the policy content is mapped to privacy categories, data types, and purposes. */
            analyze(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AnalyzePrivacyPolicyRequest;
            }): Request<AnalyzePrivacyPolicyResponse>;
            analyze(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AnalyzePrivacyPolicyRequest): Request<AnalyzePrivacyPolicyResponse>;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be deleted. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The standard list filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation's parent resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The standard list page size. */
                pageSize?:
                    number;
                /** The standard list page token. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListOperationsResponse>;
            /**
             * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is
             * immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns
             * `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even
             * an immediate response is no guarantee that the operation is done.
             */
            wait(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to wait on. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also
                 * specified, the shorter one will be used.
                 */
                timeout?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
        }
        interface PrivacypolicyResource {
            operations:
                OperationsResource;
        }
        interface ProjectsResource {
            privacypolicy:
                PrivacypolicyResource;
        }

        const accounts: AccountsResource;

        const media: MediaResource;

        const privacypolicy: PrivacypolicyResource;

        const projects: ProjectsResource;
    }
}
