/* Type definitions for non-npm package Connectors API v1 0.0 */
// Project: https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://connectors.googleapis.com/$discovery/rest?version=v1
// Revision: 20231031

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Connectors API v1 */
    function load(urlOrObject: "https://connectors.googleapis.com/$discovery/rest?version=v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "connectors", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "connectors", version: "v1", callback: () => any): void;

    namespace connectors {
        interface AuditConfig {
            /** The configuration for logging of each type of permission. */
            auditLogConfigs?:
                AuditLogConfig[];
            /**
             * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all
             * services.
             */
            service?:
                string;
        }
        interface AuditLogConfig {
            /** Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
            exemptedMembers?:
                string[];
            /** The log type that this config enables. */
            logType?:
                string;
        }
        interface AuthConfig {
            /** List containing additional auth configs. */
            additionalVariables?:
                ConfigVariable[];
            /** Identifier key for auth config */
            authKey?:
                string;
            /** The type of authentication configured. */
            authType?:
                string;
            /** Oauth2AuthCodeFlow. */
            oauth2AuthCodeFlow?:
                Oauth2AuthCodeFlow;
            /** Oauth2ClientCredentials. */
            oauth2ClientCredentials?:
                Oauth2ClientCredentials;
            /** Oauth2JwtBearer. */
            oauth2JwtBearer?:
                Oauth2JwtBearer;
            /** SSH Public Key. */
            sshPublicKey?:
                SshPublicKey;
            /** UserPassword. */
            userPassword?:
                UserPassword;
        }
        interface AuthConfigTemplate {
            /** Identifier key for auth config */
            authKey?:
                string;
            /** The type of authentication configured. */
            authType?:
                string;
            /** Config variables to describe an `AuthConfig` for a `Connection`. */
            configVariableTemplates?:
                ConfigVariableTemplate[];
            /** Connector specific description for an authentication template. */
            description?:
                string;
            /** Display name for authentication template. */
            displayName?:
                string;
        }
        interface AuthorizationCodeLink {
            /** The client ID assigned to the Google Cloud Connectors OAuth app for the connector data source. */
            clientId?:
                string;
            /** Whether to enable PKCE for the auth code flow. */
            enablePkce?:
                boolean;
            /** The scopes for which the user will authorize Google Cloud Connectors on the connector data source. */
            scopes?:
                string[];
            /** The base URI the user must click to trigger the authorization code login flow. */
            uri?:
                string;
        }
        interface Binding {
            /**
             * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`,
             * then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which
             * resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            condition?:
                Expr;
            /**
             * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on
             * the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service
             * account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific
             * Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example,
             * `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service
             * account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
             * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the
             * users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has
             * been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains
             * the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently
             * deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and
             * the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that
             * has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group
             * retains the role in the binding.
             */
            members?:
                string[];
            /** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
            role?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface ConfigVariable {
            /** Value is a bool. */
            boolValue?:
                boolean;
            /** Value is a Encryption Key. */
            encryptionKeyValue?:
                EncryptionKey;
            /** Value is an integer */
            intValue?:
                string;
            /** Key of the config variable. */
            key?:
                string;
            /** Value is a secret. */
            secretValue?:
                Secret;
            /** Value is a string. */
            stringValue?:
                string;
        }
        interface ConfigVariableTemplate {
            /** Authorization code link options. To be populated if `ValueType` is `AUTHORIZATION_CODE` */
            authorizationCodeLink?:
                AuthorizationCodeLink;
            /** Description. */
            description?:
                string;
            /** Display name of the parameter. */
            displayName?:
                string;
            /** Enum options. To be populated if `ValueType` is `ENUM` */
            enumOptions?:
                EnumOption[];
            /** Indicates if current template is part of advanced settings */
            isAdvanced?:
                boolean;
            /** Key of the config variable. */
            key?:
                string;
            /** Flag represents that this `ConfigVariable` must be provided for a connection. */
            required?:
                boolean;
            /** Condition under which a field would be required. The condition can be represented in the form of a logical expression. */
            requiredCondition?:
                LogicalExpression;
            /** Role grant configuration for the config variable. */
            roleGrant?:
                RoleGrant;
            /** State of the config variable. */
            state?:
                string;
            /** Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`. */
            validationRegex?:
                string;
            /** Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation. */
            valueType?:
                string;
        }
        interface Connection {
            /** Optional. Configuration for establishing the connection's authentication with an external system. */
            authConfig?:
                AuthConfig;
            /** Optional. Configuration for configuring the connection with an external system. */
            configVariables?:
                ConfigVariable[];
            /** Output only. Connection revision. This field is only updated when the connection is created or updated by User. */
            connectionRevision?:
                string;
            /**
             * Required. Connector version on which the connection is created. The format is: projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/* Only global location is supported for
             * ConnectorVersion resource.
             */
            connectorVersion?:
                string;
            /** Output only. Infra configs supported by Connector Version. */
            connectorVersionInfraConfig?:
                ConnectorVersionInfraConfig;
            /** Output only. Flag to mark the version indicating the launch stage. */
            connectorVersionLaunchStage?:
                string;
            /** Output only. Created time. */
            createTime?:
                string;
            /** Optional. Description of the resource. */
            description?:
                string;
            /** Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s). */
            destinationConfigs?:
                DestinationConfig[];
            /** Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName} */
            envoyImageLocation?:
                string;
            /** Optional. Eventing config of a connection */
            eventingConfig?:
                EventingConfig;
            /** Optional. Eventing enablement type. Will be nil if eventing is not enabled. */
            eventingEnablementType?:
                string;
            /** Output only. Eventing Runtime Data. */
            eventingRuntimeData?:
                EventingRuntimeData;
            /** Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName} */
            imageLocation?:
                string;
            /** Output only. Is trusted tester program enabled for the project. */
            isTrustedTester?:
                boolean;
            /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
            labels?:
                { [P in string]: string };
            /** Optional. Configuration that indicates whether or not the Connection can be edited. */
            lockConfig?:
                LockConfig;
            /** Optional. Log configuration for the connection. */
            logConfig?:
                ConnectorsLogConfig;
            /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection} */
            name?:
                string;
            /** Optional. Node configuration for the connection. */
            nodeConfig?:
                NodeConfig;
            /** Optional. Service account needed for runtime plane to access Google Cloud resources. */
            serviceAccount?:
                string;
            /**
             * Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g.
             * "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
             */
            serviceDirectory?:
                string;
            /** Optional. Ssl config of a connection */
            sslConfig?:
                SslConfig;
            /** Output only. Current status of the connection. */
            status?:
                ConnectionStatus;
            /** Output only. This subscription type enum states the subscription type of the project. */
            subscriptionType?:
                string;
            /** Optional. Suspended indicates if a user has suspended a connection or not. */
            suspended?:
                boolean;
            /** Output only. Updated time. */
            updateTime?:
                string;
        }
        interface ConnectionSchemaMetadata {
            /** Output only. List of actions. */
            actions?:
                string[];
            /** Output only. List of entity names. */
            entities?:
                string[];
            /** Output only. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
            name?:
                string;
            /** Output only. Timestamp when the connection runtime schema refresh was triggered. */
            refreshTime?:
                string;
            /** Output only. The current state of runtime schema. */
            state?:
                string;
            /** Output only. Timestamp when the connection runtime schema was updated. */
            updateTime?:
                string;
        }
        interface ConnectionStatus {
            /** Description. */
            description?:
                string;
            /** State. */
            state?:
                string;
            /** Status provides detailed information for the state. */
            status?:
                string;
        }
        interface Connector {
            /** Output only. Created time. */
            createTime?:
                string;
            /** Output only. Description of the resource. */
            description?:
                string;
            /** Output only. Display name. */
            displayName?:
                string;
            /** Output only. Link to documentation page. */
            documentationUri?:
                string;
            /** Output only. Eventing details. Will be null if eventing is not supported. */
            eventingDetails?:
                EventingDetails;
            /** Output only. Link to external page. */
            externalUri?:
                string;
            /** Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
            labels?:
                { [P in string]: string };
            /** Output only. Flag to mark the version indicating the launch stage. */
            launchStage?:
                string;
            /**
             * Output only. Resource name of the Connector. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector} Only global location is supported for
             * Connector resource.
             */
            name?:
                string;
            /** Output only. Updated time. */
            updateTime?:
                string;
            /** Output only. Cloud storage location of icons etc consumed by UI. */
            webAssetsLocation?:
                string;
        }
        interface ConnectorInfraConfig {
            /** The window used for ratelimiting runtime requests to connections. */
            connectionRatelimitWindowSeconds?:
                string;
            /** Indicate whether connector is deployed on GKE/CloudRun */
            deploymentModel?:
                string;
            /** HPA autoscaling config. */
            hpaConfig?:
                HPAConfig;
            /** Max QPS supported for internal requests originating from Connd. */
            internalclientRatelimitThreshold?:
                string;
            /** Max QPS supported by the connector version before throttling of requests. */
            ratelimitThreshold?:
                string;
            /** System resource limits. */
            resourceLimits?:
                ResourceLimits;
            /** System resource requests. */
            resourceRequests?:
                ResourceRequests;
            /** The name of shared connector deployment. */
            sharedDeployment?:
                string;
        }
        interface ConnectorsLogConfig {
            /** Enabled represents whether logging is enabled or not for a connection. */
            enabled?:
                boolean;
        }
        interface ConnectorVersion {
            /** Output only. List of auth configs supported by the Connector Version. */
            authConfigTemplates?:
                AuthConfigTemplate[];
            /** Output only. List of config variables needed to create a connection. */
            configVariableTemplates?:
                ConfigVariableTemplate[];
            /** Output only. Infra configs supported by Connector. */
            connectorInfraConfig?:
                ConnectorInfraConfig;
            /** Output only. Created time. */
            createTime?:
                string;
            /** Output only. List of destination configs needed to create a connection. */
            destinationConfigTemplates?:
                DestinationConfigTemplate[];
            /** Output only. Display name. */
            displayName?:
                string;
            /** Output only. Configuration for Egress Control. */
            egressControlConfig?:
                EgressControlConfig;
            /** Output only. Eventing configuration supported by the Connector. */
            eventingConfigTemplate?:
                EventingConfigTemplate;
            /** Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
            labels?:
                { [P in string]: string };
            /** Output only. Flag to mark the version indicating the launch stage. */
            launchStage?:
                string;
            /**
             * Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is
             * supported for Connector resource.
             */
            name?:
                string;
            /** Output only. ReleaseVersion of the connector, for example: "1.0.1-alpha". */
            releaseVersion?:
                string;
            /** Output only. Role grant configuration for this config variable. It will be DEPRECATED soon. */
            roleGrant?:
                RoleGrant;
            /** Output only. Role grant configurations for this connector version. */
            roleGrants?:
                RoleGrant[];
            /** Output only. Ssl configuration supported by the Connector. */
            sslConfigTemplate?:
                SslConfigTemplate;
            /** Output only. Information about the runtime features supported by the Connector. */
            supportedRuntimeFeatures?:
                SupportedRuntimeFeatures;
            /** Output only. Updated time. */
            updateTime?:
                string;
        }
        interface ConnectorVersionInfraConfig {
            /** Output only. The window used for ratelimiting runtime requests to connections. */
            connectionRatelimitWindowSeconds?:
                string;
            /** Output only. HPA autoscaling config. */
            hpaConfig?:
                HPAConfig;
            /** Output only. Max QPS supported for internal requests originating from Connd. */
            internalclientRatelimitThreshold?:
                string;
            /** Output only. Max QPS supported by the connector version before throttling of requests. */
            ratelimitThreshold?:
                string;
            /** Output only. System resource limits. */
            resourceLimits?:
                ResourceLimits;
            /** Output only. System resource requests. */
            resourceRequests?:
                ResourceRequests;
            /** Output only. The name of shared connector deployment. */
            sharedDeployment?:
                string;
        }
        interface Destination {
            /** For publicly routable host. */
            host?:
                string;
            /** The port is the target port number that is accepted by the destination. */
            port?:
                number;
            /** PSC service attachments. Format: projects/*‍/regions/*‍/serviceAttachments/* */
            serviceAttachment?:
                string;
        }
        interface DestinationConfig {
            /** The destinations for the key. */
            destinations?:
                Destination[];
            /** The key is the destination identifier that is supported by the Connector. */
            key?:
                string;
        }
        interface DestinationConfigTemplate {
            /** The default port. */
            defaultPort?:
                number;
            /** Description. */
            description?:
                string;
            /** Display name of the parameter. */
            displayName?:
                string;
            /** Whether the current destination tempalate is part of Advanced settings */
            isAdvanced?:
                boolean;
            /** Key of the destination. */
            key?:
                string;
            /** The maximum number of destinations supported for this key. */
            max?:
                number;
            /** The minimum number of destinations supported for this key. */
            min?:
                number;
            /** Whether port number should be provided by customers. */
            portFieldType?:
                string;
            /** Regex pattern for host. */
            regexPattern?:
                string;
        }
        interface EgressControlConfig {
            /** Static Comma separated backends which are common for all Connection resources. Supported formats for each backend are host:port or just host (host can be ip address or domain name). */
            backends?:
                string;
            /** Extractions Rules to extract the backends from customer provided configuration. */
            extractionRules?:
                ExtractionRules;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface EncryptionConfig {
            /** Optional. Encryption type for the region. */
            encryptionType?:
                string;
            /** Optional. KMS crypto key. This field accepts identifiers of the form `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/ {crypto_key}` */
            kmsKeyName?:
                string;
        }
        interface EncryptionKey {
            /**
             * The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*‍/locations/*‍/keyRings/*‍/cryptoKeys/*`. Will be empty string if google
             * managed.
             */
            kmsKeyName?:
                string;
            /** Type. */
            type?:
                string;
        }
        interface EndPoint {
            /** The URI of the Endpoint. */
            endpointUri?:
                string;
            /** List of Header to be added to the Endpoint. */
            headers?:
                Header[];
        }
        interface EndpointAttachment {
            /** Output only. Created time. */
            createTime?:
                string;
            /** Optional. Description of the resource. */
            description?:
                string;
            /** Output only. The Private Service Connect connection endpoint ip */
            endpointIp?:
                string;
            /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
            labels?:
                { [P in string]: string };
            /** Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment} */
            name?:
                string;
            /** Required. The path of the service attachment */
            serviceAttachment?:
                string;
            /** Output only. Updated time. */
            updateTime?:
                string;
        }
        interface EnumOption {
            /** Display name of the option. */
            displayName?:
                string;
            /** Id of the option. */
            id?:
                string;
        }
        interface EventingConfig {
            /** Additional eventing related field values */
            additionalVariables?:
                ConfigVariable[];
            /** Auth details for the webhook adapter. */
            authConfig?:
                AuthConfig;
            /** Encryption key (can be either Google managed or CMEK). */
            encryptionKey?:
                ConfigVariable;
            /** Enrichment Enabled. */
            enrichmentEnabled?:
                boolean;
            /** Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled. */
            eventsListenerIngressEndpoint?:
                string;
            /** Optional. Private Connectivity Enabled. */
            privateConnectivityEnabled?:
                boolean;
            /** Registration endpoint for auto registration. */
            registrationDestinationConfig?:
                DestinationConfig;
        }
        interface EventingConfigTemplate {
            /** Additional fields that need to be rendered. */
            additionalVariables?:
                ConfigVariableTemplate[];
            /** AuthConfigTemplates represents the auth values for the webhook adapter. */
            authConfigTemplates?:
                AuthConfigTemplate[];
            /** Auto refresh to extend webhook life. */
            autoRefresh?:
                boolean;
            /** Auto Registration supported. */
            autoRegistrationSupported?:
                boolean;
            /** Encryption key (can be either Google managed or CMEK). */
            encryptionKeyTemplate?:
                ConfigVariableTemplate;
            /** Enrichment Supported. */
            enrichmentSupported?:
                boolean;
            /** The type of the event listener for a specific connector. */
            eventListenerType?:
                string;
            /** Is Eventing Supported. */
            isEventingSupported?:
                boolean;
            /** Registration host destination config template. */
            registrationDestinationConfig?:
                DestinationConfigTemplate;
        }
        interface EventingDetails {
            /** Output only. Custom Event Types. */
            customEventTypes?:
                boolean;
            /** Output only. Description. */
            description?:
                string;
            /** Output only. Link to public documentation. */
            documentationLink?:
                string;
            /** Output only. Cloud storage location of the icon. */
            iconLocation?:
                string;
            /** Output only. Eventing Launch Stage. */
            launchStage?:
                string;
            /** Output only. Name of the Eventing trigger. */
            name?:
                string;
            /** Output only. Array of search keywords. */
            searchTags?:
                string[];
            /** Output only. The type of the event listener for a specific connector. */
            type?:
                string;
        }
        interface EventingRuntimeData {
            /** Output only. Events listener endpoint. The value will populated after provisioning the events listener. */
            eventsListenerEndpoint?:
                string;
            /** Output only. Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled. */
            eventsListenerPscSa?:
                string;
            /** Output only. Current status of eventing. */
            status?:
                EventingStatus;
        }
        interface EventingStatus {
            /** Output only. Description of error if State is set to "ERROR". */
            description?:
                string;
            /** Output only. State. */
            state?:
                string;
        }
        interface EventSubscription {
            /** Output only. Created time. */
            createTime?:
                string;
            /** Optional. The destination to hit when we receive an event */
            destinations?:
                EventSubscriptionDestination;
            /** Optional. Event type id of the event of current EventSubscription. */
            eventTypeId?:
                string;
            /** Optional. JMS is the source for the event listener. */
            jms?:
                JMS;
            /** Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription} */
            name?:
                string;
            /** Optional. Status indicates the status of the event subscription resource */
            status?:
                EventSubscriptionStatus;
            /** Optional. name of the Subscriber for the current EventSubscription. */
            subscriber?:
                string;
            /** Optional. Link for Subscriber of the current EventSubscription. */
            subscriberLink?:
                string;
            /** Output only. Updated time. */
            updateTime?:
                string;
        }
        interface EventSubscriptionDestination {
            /** OPTION 1: Hit an endpoint when we receive an event. */
            endpoint?:
                EndPoint;
            /** Service account needed for runtime plane to trigger IP workflow. */
            serviceAccount?:
                string;
            /** type of the destination */
            type?:
                string;
        }
        interface EventSubscriptionStatus {
            /** Output only. Description of the state. */
            description?:
                string;
            /** Output only. State of Event Subscription resource. */
            state?:
                string;
        }
        interface EventType {
            /** Output only. Created time. */
            createTime?:
                string;
            /** Output only. Schema of the event payload after enriched. Will be null if read before send is not supported. */
            enrichedEventPayloadSchema?:
                string;
            /** Output only. Runtime entity type name. Will be null if entity type map is not available. Used for read before send feature. */
            entityType?:
                string;
            /** Output only. Schema of webhook event payload. */
            eventPayloadSchema?:
                string;
            /** Output only. Event type id. Example: `ticket.created`. */
            eventTypeId?:
                string;
            /** Output only. Id path denotes the path of id in webhook payload. */
            idPath?:
                string;
            /**
             * Output only. Resource name of the eventtype. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}/eventtypes/{eventtype}
             * Only global location is supported for Connector resource.
             */
            name?:
                string;
            /** Output only. Updated time. */
            updateTime?:
                string;
        }
        interface Expr {
            /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
            description?:
                string;
            /** Textual representation of an expression in Common Expression Language syntax. */
            expression?:
                string;
            /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
            location?:
                string;
            /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
            title?:
                string;
        }
        interface ExtractionRule {
            /** Regex used to extract backend details from source. If empty, whole source value will be used. */
            extractionRegex?:
                string;
            /** Source on which the rule is applied. */
            source?:
                Source;
        }
        interface ExtractionRules {
            /** Collection of Extraction Rule. */
            extractionRule?:
                ExtractionRule[];
        }
        interface Field {
            /** The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields. */
            additionalDetails?:
                { [P in string]: any };
            /** The data type of the Field. */
            dataType?:
                string;
            /** The following field specifies the default value of the Field provided by the external system if a value is not provided. */
            defaultValue?:
                any;
            /** A brief description of the Field. */
            description?:
                string;
            /** Name of the Field. */
            field?:
                string;
            /** JsonSchema representation of this entity's schema */
            jsonSchema?:
                JsonSchema;
            /** The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity. */
            key?:
                boolean;
            /** Specifies whether a null value is allowed. */
            nullable?:
                boolean;
            /** Specifies if the Field is readonly. */
            readonly?:
                boolean;
        }
        interface FieldComparison {
            /** Boolean value */
            boolValue?:
                boolean;
            /** Comparator to use for comparing the field value. */
            comparator?:
                string;
            /** Integer value */
            intValue?:
                string;
            /** Key of the field. */
            key?:
                string;
            /** String value */
            stringValue?:
                string;
        }
        interface Header {
            /** Key of Header. */
            key?:
                string;
            /** Value of Header. */
            value?:
                string;
        }
        interface HPAConfig {
            /** Output only. Percent CPU utilization where HPA triggers autoscaling. */
            cpuUtilizationThreshold?:
                string;
            /** Output only. Percent Memory utilization where HPA triggers autoscaling. */
            memoryUtilizationThreshold?:
                string;
        }
        interface InputParameter {
            /** The data type of the Parameter. */
            dataType?:
                string;
            /** The following field specifies the default value of the Parameter provided by the external system if a value is not provided. */
            defaultValue?:
                any;
            /** A brief description of the Parameter. */
            description?:
                string;
            /** JsonSchema representation of this action's parameter */
            jsonSchema?:
                JsonSchema;
            /** Specifies whether a null value is allowed. */
            nullable?:
                boolean;
            /** Name of the Parameter. */
            parameter?:
                string;
        }
        interface JMS {
            /** Optional. Name of the JMS source. i.e. queueName or topicName */
            name?:
                string;
            /** Optional. Type of the JMS Source. i.e. Queue or Topic */
            type?:
                string;
        }
        interface JsonSchema {
            /** The default value of the field or object described by this schema. */
            default?:
                any;
            /** A description of this schema. */
            description?:
                string;
            /** Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values */
            enum?:
                any[];
            /** Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format */
            format?:
                string;
            /** Schema that applies to array values, applicable only if this is of type `array`. */
            items?:
                JsonSchema;
            /** JDBC datatype of the field. */
            jdbcType?:
                string;
            /** The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property */
            properties?:
                { [P in string]: JsonSchema };
            /** Whether this property is required. */
            required?:
                string[];
            /** JSON Schema Validation: A Vocabulary for Structural Validation of JSON */
            type?:
                string[];
        }
        interface JwtClaims {
            /** Value for the "aud" claim. */
            audience?:
                string;
            /** Value for the "iss" claim. */
            issuer?:
                string;
            /** Value for the "sub" claim. */
            subject?:
                string;
        }
        interface ListConnectionsResponse {
            /** Connections. */
            connections?:
                Connection[];
            /** Next page token. */
            nextPageToken?:
                string;
            /** Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListConnectorsResponse {
            /** A list of connectors. */
            connectors?:
                Connector[];
            /** Next page token. */
            nextPageToken?:
                string;
            /** Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListConnectorVersionsResponse {
            /** A list of connector versions. */
            connectorVersions?:
                ConnectorVersion[];
            /** Next page token. */
            nextPageToken?:
                string;
            /** Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListEndpointAttachmentsResponse {
            /** EndpointAttachments. */
            endpointAttachments?:
                EndpointAttachment[];
            /** Next page token. */
            nextPageToken?:
                string;
            /** Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListEventSubscriptionsResponse {
            /** Subscriptions. */
            eventSubscriptions?:
                EventSubscription[];
            /** Next page token. */
            nextPageToken?:
                string;
            /** Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListEventTypesResponse {
            /** A list of connector versions. */
            eventTypes?:
                EventType[];
            /** Next page token. */
            nextPageToken?:
                string;
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?:
                Location[];
            /** The standard List next-page token. */
            nextPageToken?:
                string;
        }
        interface ListManagedZonesResponse {
            /** ManagedZones. */
            managedZones?:
                ManagedZone[];
            /** Next page token. */
            nextPageToken?:
                string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?:
                string;
            /** A list of operations that matches the specified filter in the request. */
            operations?:
                Operation[];
        }
        interface ListProvidersResponse {
            /** Next page token. */
            nextPageToken?:
                string;
            /** A list of providers. */
            providers?:
                Provider[];
            /** Locations that could not be reached. */
            unreachable?:
                string[];
        }
        interface ListRuntimeActionSchemasResponse {
            /** Next page token. */
            nextPageToken?:
                string;
            /** Runtime action schemas. */
            runtimeActionSchemas?:
                RuntimeActionSchema[];
        }
        interface ListRuntimeEntitySchemasResponse {
            /** Next page token. */
            nextPageToken?:
                string;
            /** Runtime entity schemas. */
            runtimeEntitySchemas?:
                RuntimeEntitySchema[];
        }
        interface Location {
            /** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
            displayName?:
                string;
            /** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
            labels?:
                { [P in string]: string };
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?:
                string;
            /** Service-specific metadata. For example the available capacity at the given location. */
            metadata?:
                { [P in string]: any };
            /** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
            name?:
                string;
        }
        interface LockConfig {
            /** Indicates whether or not the connection is locked. */
            locked?:
                boolean;
            /** Describes why a connection is locked. */
            reason?:
                string;
        }
        interface LogicalExpression {
            /** A list of fields to be compared. */
            fieldComparisons?:
                FieldComparison[];
            /** A list of nested conditions to be compared. */
            logicalExpressions?:
                LogicalExpression[];
            /** The logical operator to use between the fields and conditions. */
            logicalOperator?:
                string;
        }
        interface ManagedZone {
            /** Output only. Created time. */
            createTime?:
                string;
            /** Optional. Description of the resource. */
            description?:
                string;
            /** Required. DNS Name of the resource */
            dns?:
                string;
            /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
            labels?:
                { [P in string]: string };
            /** Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone} */
            name?:
                string;
            /** Required. The name of the Target Project */
            targetProject?:
                string;
            /** Required. The name of the Target Project VPC Network */
            targetVpc?:
                string;
            /** Output only. Updated time. */
            updateTime?:
                string;
        }
        interface NetworkConfig {
            /** Output only. Egress IPs */
            egressIps?:
                string[];
            /** Optional. Egress mode for the network. */
            egressMode?:
                string;
        }
        interface NodeConfig {
            /** Maximum number of nodes in the runtime nodes. */
            maxNodeCount?:
                number;
            /** Minimum number of nodes in the runtime nodes. */
            minNodeCount?:
                number;
        }
        interface Oauth2AuthCodeFlow {
            /** Authorization code to be exchanged for access and refresh tokens. */
            authCode?:
                string;
            /** Auth URL for Authorization Code Flow */
            authUri?:
                string;
            /** Client ID for user-provided OAuth app. */
            clientId?:
                string;
            /** Client secret for user-provided OAuth app. */
            clientSecret?:
                Secret;
            /** Whether to enable PKCE when the user performs the auth code flow. */
            enablePkce?:
                boolean;
            /** PKCE verifier to be used during the auth code exchange. */
            pkceVerifier?:
                string;
            /** Redirect URI to be provided during the auth code exchange. */
            redirectUri?:
                string;
            /** Scopes the connection will request when the user performs the auth code flow. */
            scopes?:
                string[];
        }
        interface Oauth2ClientCredentials {
            /** The client identifier. */
            clientId?:
                string;
            /** Secret version reference containing the client secret. */
            clientSecret?:
                Secret;
        }
        interface Oauth2JwtBearer {
            /**
             * Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer
             * authorization grant. Specified in the form as: `projects/*‍/secrets/*‍/versions/*`.
             */
            clientKey?:
                Secret;
            /** JwtClaims providers fields to generate the token. */
            jwtClaims?:
                JwtClaims;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?:
                string;
            /**
             * The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original
             * method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original
             * method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?:
                { [P in string]: any };
        }
        interface OperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?:
                string;
            /** Output only. The time the operation was created. */
            createTime?:
                string;
            /** Output only. The time the operation finished running. */
            endTime?:
                string;
            /**
             * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            requestedCancellation?:
                boolean;
            /** Output only. Human-readable status of the operation, if any. */
            statusMessage?:
                string;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?:
                string;
            /** Output only. Name of the verb executed by the operation. */
            verb?:
                string;
        }
        interface Policy {
            /** Specifies cloud audit logging configuration for this policy. */
            auditConfigs?:
                AuditConfig[];
            /**
             * Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings`
             * must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a
             * principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another
             * 1,450 principals to the `bindings` in the `Policy`.
             */
            bindings?:
                Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make
             * use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems
             * are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM
             * Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost.
             */
            etag?:
                string;
            /**
             * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings
             * must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a
             * policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use
             * IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave
             * the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            version?:
                number;
        }
        interface Provider {
            /** Output only. Created time. */
            createTime?:
                string;
            /** Output only. Description of the resource. */
            description?:
                string;
            /** Output only. Display name. */
            displayName?:
                string;
            /** Output only. Link to documentation page. */
            documentationUri?:
                string;
            /** Output only. Link to external page. */
            externalUri?:
                string;
            /** Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
            labels?:
                { [P in string]: string };
            /** Output only. Flag to mark the version indicating the launch stage. */
            launchStage?:
                string;
            /** Output only. Resource name of the Provider. Format: projects/{project}/locations/{location}/providers/{provider} Only global location is supported for Provider resource. */
            name?:
                string;
            /** Output only. Updated time. */
            updateTime?:
                string;
            /** Output only. Cloud storage location of icons etc consumed by UI. */
            webAssetsLocation?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface RefreshConnectionSchemaMetadataRequest {
        }
        interface RegionalSettings {
            /** Optional. Regional encryption config to hold CMEK details. */
            encryptionConfig?:
                EncryptionConfig;
            /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings */
            name?:
                string;
            /** Optional. Regional network config. */
            networkConfig?:
                NetworkConfig;
        }
        // tslint:disable-next-line:no-empty-interface
        interface RepairEventingRequest {
        }
        interface Resource {
            /** Template to uniquely represent a Google Cloud resource in a format IAM expects This is a template that can have references to other values provided in the config variable template. */
            pathTemplate?:
                string;
            /** Different types of resource supported. */
            type?:
                string;
        }
        interface ResourceLimits {
            /** Output only. CPU limit. */
            cpu?:
                string;
            /** Output only. Memory limit. */
            memory?:
                string;
        }
        interface ResourceRequests {
            /** Output only. CPU request. */
            cpu?:
                string;
            /** Output only. Memory request. */
            memory?:
                string;
        }
        interface ResultMetadata {
            /** The data type of the field. */
            dataType?:
                string;
            /** A brief description of the field. */
            description?:
                string;
            /** Name of the result field. */
            field?:
                string;
            /** JsonSchema representation of this action's result */
            jsonSchema?:
                JsonSchema;
        }
        // tslint:disable-next-line:no-empty-interface
        interface RetryEventSubscriptionRequest {
        }
        interface RoleGrant {
            /** Template that UI can use to provide helper text to customers. */
            helperTextTemplate?:
                string;
            /** Prinicipal/Identity for whom the role need to assigned. */
            principal?:
                string;
            /** Resource on which the roles needs to be granted for the principal. */
            resource?:
                Resource;
            /** List of roles that need to be granted. */
            roles?:
                string[];
        }
        interface RuntimeActionSchema {
            /** Output only. Name of the action. */
            action?:
                string;
            /** Output only. Brief Description of action */
            description?:
                string;
            /** Output only. Display Name of action to be shown on client side */
            displayName?:
                string;
            /** Output only. JsonSchema representation of this action's input metadata */
            inputJsonSchema?:
                JsonSchema;
            /** Output only. List of input parameter metadata for the action. */
            inputParameters?:
                InputParameter[];
            /** Output only. JsonSchema representation of this action's result metadata */
            resultJsonSchema?:
                JsonSchema;
            /** Output only. List of result field metadata. */
            resultMetadata?:
                ResultMetadata[];
        }
        interface RuntimeConfig {
            /** Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id} */
            conndSubscription?:
                string;
            /** Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id} */
            conndTopic?:
                string;
            /** Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id} */
            controlPlaneSubscription?:
                string;
            /** Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id} */
            controlPlaneTopic?:
                string;
            /** Output only. location_id of the runtime location. E.g. "us-west1". */
            locationId?:
                string;
            /** Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig */
            name?:
                string;
            /** Output only. The endpoint of the connectors runtime ingress. */
            runtimeEndpoint?:
                string;
            /** Output only. The Cloud Storage bucket that stores connector's schema reports. */
            schemaGcsBucket?:
                string;
            /** Output only. The name of the Service Directory service name. */
            serviceDirectory?:
                string;
            /** Output only. The state of the location. */
            state?:
                string;
        }
        interface RuntimeEntitySchema {
            /** Output only. Name of the entity. */
            entity?:
                string;
            /** Output only. List of fields in the entity. */
            fields?:
                Field[];
            /** Output only. JsonSchema representation of this entity's metadata */
            jsonSchema?:
                JsonSchema;
        }
        interface Secret {
            /** The resource name of the secret version in the format, format as: `projects/*‍/secrets/*‍/versions/*`. */
            secretVersion?:
                string;
        }
        interface SetIamPolicyRequest {
            /**
             * REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud
             * services (such as Projects) might reject them.
             */
            policy?:
                Policy;
            /**
             * OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:
             * `paths: "bindings, etag"`
             */
            updateMask?:
                string;
        }
        interface Settings {
            /** Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings} */
            name?:
                string;
            /** Output only. Flag indicates if user is in PayG model */
            payg?:
                boolean;
            /** Output only. Tenant project id of the consumer project. */
            tenantProjectId?:
                string;
            /** Optional. Flag indicates whether vpc-sc is enabled. */
            vpcsc?:
                boolean;
        }
        interface Source {
            /** Field identifier. For example config vaiable name. */
            fieldId?:
                string;
            /** Type of the source. */
            sourceType?:
                string;
        }
        interface SshPublicKey {
            /** Format of SSH Client cert. */
            certType?:
                string;
            /** SSH Client Cert. It should contain both public and private key. */
            sshClientCert?:
                Secret;
            /** Password (passphrase) for ssh client certificate if it has one. */
            sshClientCertPass?:
                Secret;
            /** The user account used to authenticate. */
            username?:
                string;
        }
        interface SslConfig {
            /** Additional SSL related field values */
            additionalVariables?:
                ConfigVariable[];
            /** Client Certificate */
            clientCertificate?:
                Secret;
            /** Type of Client Cert (PEM/JKS/.. etc.) */
            clientCertType?:
                string;
            /** Client Private Key */
            clientPrivateKey?:
                Secret;
            /** Secret containing the passphrase protecting the Client Private Key */
            clientPrivateKeyPass?:
                Secret;
            /** Private Server Certificate. Needs to be specified if trust model is `PRIVATE`. */
            privateServerCertificate?:
                Secret;
            /** Type of Server Cert (PEM/JKS/.. etc.) */
            serverCertType?:
                string;
            /** Trust Model of the SSL connection */
            trustModel?:
                string;
            /** Controls the ssl type for the given connector version. */
            type?:
                string;
            /** Bool for enabling SSL */
            useSsl?:
                boolean;
        }
        interface SslConfigTemplate {
            /** Any additional fields that need to be rendered */
            additionalVariables?:
                ConfigVariableTemplate[];
            /** List of supported Client Cert Types */
            clientCertType?:
                string[];
            /** Boolean for determining if the connector version mandates TLS. */
            isTlsMandatory?:
                boolean;
            /** List of supported Server Cert Types */
            serverCertType?:
                string[];
            /** Controls the ssl type for the given connector version */
            sslType?:
                string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface SupportedRuntimeFeatures {
            /** Specifies if the connector supports action apis like 'executeAction'. */
            actionApis?:
                boolean;
            /** Specifies if the connector supports entity apis like 'createEntity'. */
            entityApis?:
                boolean;
            /** Specifies if the connector supports 'ExecuteSqlQuery' operation. */
            sqlQuery?:
                boolean;
        }
        interface TestIamPermissionsRequest {
            /**
             * The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM
             * Overview](https://cloud.google.com/iam/docs/overview#permissions).
             */
            permissions?:
                string[];
        }
        interface TestIamPermissionsResponse {
            /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
            permissions?:
                string[];
        }
        interface UserPassword {
            /** Secret version reference containing the password. */
            password?:
                Secret;
            /** Username. */
            username?:
                string;
        }
        interface ConnectionSchemaMetadataResource {
            /** Refresh runtime schema of a connection. */
            refresh(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RefreshConnectionSchemaMetadataRequest;
            }): Request<Operation>;
            refresh(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RefreshConnectionSchemaMetadataRequest): Request<Operation>;
        }
        interface EventSubscriptionsResource {
            /** Creates a new EventSubscription in a given project,location and connection. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource. */
                eventSubscriptionId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the EventSubscription, of the form: `projects/*‍/locations/*‍/connections/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EventSubscription;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource. */
                eventSubscriptionId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the EventSubscription, of the form: `projects/*‍/locations/*‍/connections/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EventSubscription): Request<Operation>;
            /** Deletes a single EventSubscription. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventsubscriptions/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single EventSubscription. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventSubscriptions/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<EventSubscription>;
            /** List EventSubscriptions in a given project,location and connection. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Order by parameters. */
                orderBy?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of the EventSubscription, of the form: `projects/*‍/locations/*‍/connections/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListEventSubscriptionsResponse>;
            /** Updates the parameters of a single EventSubscription. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The list of fields to update. Fields are specified relative to the Subscription. A field will be overwritten if it is in the mask. You can modify only the fields
                 * listed below. To update the EventSubscription details: * `serviceAccount`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EventSubscription;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The list of fields to update. Fields are specified relative to the Subscription. A field will be overwritten if it is in the mask. You can modify only the fields
                 * listed below. To update the EventSubscription details: * `serviceAccount`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EventSubscription): Request<Operation>;
            /** RetryEventSubscription retries the registration of Subscription. */
            retry(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventSubscriptions/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RetryEventSubscriptionRequest;
            }): Request<Operation>;
            retry(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventSubscriptions/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RetryEventSubscriptionRequest): Request<Operation>;
        }
        interface RuntimeActionSchemasResource {
            /** List schema of a runtime actions filtered by action name. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Required. Filter Format: action="{actionId}" Only action field is supported with literal equality operator. Accepted filter example: action="CancelOrder" Wildcards are not
                 * supported in the filter currently.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of RuntimeActionSchema Format: projects/{project}/locations/{location}/connections/{connection} */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListRuntimeActionSchemasResponse>;
        }
        interface RuntimeEntitySchemasResource {
            /** List schema of a runtime entities filtered by entity name. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Required. Filter Format: entity="{entityId}" Only entity field is supported with literal equality operator. Accepted filter example: entity="Order" Wildcards are not supported
                 * in the filter currently.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of RuntimeEntitySchema Format: projects/{project}/locations/{location}/connections/{connection} */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListRuntimeEntitySchemasResponse>;
        }
        interface ConnectionsResource {
            /** Creates a new Connection in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource. */
                connectionId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Connection;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource. */
                connectionId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Connection): Request<Operation>;
            /** Deletes a single Connection. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single Connection. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Specifies which fields of the Connection are returned in the response. Defaults to `BASIC` view. */
                view?:
                    string;
            }): Request<Connection>;
            /** Gets schema metadata of a connection. SchemaMetadata is a singleton resource for each connection. */
            getConnectionSchemaMetadata(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Connection name Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ConnectionSchemaMetadata>;
            /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for
                 * policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy
                 * in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional
                 * role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM
                 * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
                 */
                "options.requestedPolicyVersion"?:
                    number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Policy>;
            /** Lists Connections in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Order by parameters. */
                orderBy?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Specifies which fields of the Connection are returned in the response. Defaults to `BASIC` view. */
                view?:
                    string;
            }): Request<ListConnectionsResponse>;
            /** Updates the parameters of a single Connection. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. You can modify only the fields listed below. To lock/unlock a connection: * `lock_config` To suspend/resume a connection: * `suspended` To update the connection
                 * details: * `description` * `labels` * `connector_version` * `config_variables` * `auth_config` * `destination_configs` * `node_config` * `log_config` * `ssl_config` *
                 * `eventing_enablement_type` * `eventing_config`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Connection;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. You can modify only the fields listed below. To lock/unlock a connection: * `lock_config` To suspend/resume a connection: * `suspended` To update the connection
                 * details: * `description` * `labels` * `connector_version` * `config_variables` * `auth_config` * `destination_configs` * `node_config` * `log_config` * `ssl_config` *
                 * `eventing_enablement_type` * `eventing_config`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Connection): Request<Operation>;
            /** RepaiEventing tries to repair eventing related event subscriptions. */
            repairEventing(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RepairEventingRequest;
            }): Request<Operation>;
            repairEventing(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RepairEventingRequest): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
             * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
                 * this field.
                 */
                resource:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            connectionSchemaMetadata:
                ConnectionSchemaMetadataResource;
            eventSubscriptions:
                EventSubscriptionsResource;
            runtimeActionSchemas:
                RuntimeActionSchemasResource;
            runtimeEntitySchemas:
                RuntimeEntitySchemasResource;
        }
        interface EndpointAttachmentsResource {
            /** Creates a new EndpointAttachment in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. Identifier to assign to the EndpointAttachment. Must be unique within scope of the parent resource. */
                endpointAttachmentId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the EndpointAttachment, of the form: `projects/*‍/locations/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EndpointAttachment;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. Identifier to assign to the EndpointAttachment. Must be unique within scope of the parent resource. */
                endpointAttachmentId?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the EndpointAttachment, of the form: `projects/*‍/locations/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EndpointAttachment): Request<Operation>;
            /** Deletes a single EndpointAttachment. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/endpointAttachments/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single EndpointAttachment. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/endpointAttachments/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<EndpointAttachment>;
            /** List EndpointAttachments in a given project */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Order by parameters. */
                orderBy?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource od the EndpointAttachment, of the form: `projects/*‍/locations/*` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListEndpointAttachmentsResponse>;
            /** Updates the parameters of a single EndpointAttachment. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The list of fields to update. Fields are specified relative to the endpointAttachment. A field will be overwritten if it is in the mask. You can modify only the fields
                 * listed below. To update the endpointAttachment details: * `description` * `labels`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EndpointAttachment;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The list of fields to update. Fields are specified relative to the endpointAttachment. A field will be overwritten if it is in the mask. You can modify only the fields
                 * listed below. To update the endpointAttachment details: * `description` * `labels`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EndpointAttachment): Request<Operation>;
        }
        interface ManagedZonesResource {
            /** Creates a new ManagedZone in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Identifier to assign to the ManagedZone. Must be unique within scope of the parent resource. */
                managedZoneId?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the ManagedZone, of the form: `projects/*‍/locations/global` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ManagedZone;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Identifier to assign to the ManagedZone. Must be unique within scope of the parent resource. */
                managedZoneId?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. Parent resource of the ManagedZone, of the form: `projects/*‍/locations/global` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ManagedZone): Request<Operation>;
            /** Deletes a single ManagedZone. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/global/managedZones/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Gets details of a single ManagedZone. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/global/managedZones/*` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ManagedZone>;
            /** List ManagedZones in a given project */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Order by parameters. */
                orderBy?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of the Managed Zone, of the form: `projects/*‍/locations/global` */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListManagedZonesResponse>;
            /** Updates the parameters of a single ManagedZone. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The list of fields to update. Fields are specified relative to the managedZone. A field will be overwritten if it is in the mask. You can modify only the fields listed
                 * below. To update the managedZone details: * `description` * `labels` * `target_project` * `target_network`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ManagedZone;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The list of fields to update. Fields are specified relative to the managedZone. A field will be overwritten if it is in the mask. You can modify only the fields listed
                 * below. To update the managedZone details: * `description` * `labels` * `target_project` * `target_network`
                 */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ManagedZone): Request<Operation>;
        }
        interface GlobalResource {
            /** GetGlobalSettings gets settings of a project. GlobalSettings is a singleton resource. */
            getSettings(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the Settings. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Settings>;
            /** Update the global settings of a project. */
            updateSettings(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The list of fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Settings;
            }): Request<Operation>;
            updateSettings(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings} */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The list of fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Settings): Request<Operation>;
            managedZones:
                ManagedZonesResource;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be deleted. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The standard list filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation's parent resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The standard list page size. */
                pageSize?:
                    number;
                /** The standard list page token. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListOperationsResponse>;
        }
        interface EventtypesResource {
            /** Gets details of a single event type. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*‍/eventtypes/*` Only global location is supported for EventType resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<EventType>;
            /** Lists Event Types in a given Connector Version. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /**
                 * Required. Parent resource of the connectors, of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*` Only global location is supported for EventType
                 * resource.
                 */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListEventTypesResponse>;
        }
        interface VersionsResource {
            /** Gets details of a single connector version. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*` Only global location is supported for ConnectorVersion resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Specifies which fields of the ConnectorVersion are returned in the response. Defaults to `CUSTOMER` view. */
                view?:
                    string;
            }): Request<ConnectorVersion>;
            /** Lists Connector Versions in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of the connectors, of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*` Only global location is supported for ConnectorVersion resource. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Specifies which fields of the ConnectorVersion are returned in the response. Defaults to `BASIC` view. */
                view?:
                    string;
            }): Request<ListConnectorVersionsResponse>;
            eventtypes:
                EventtypesResource;
        }
        interface ConnectorsResource {
            /** Gets details of a single Connector. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*` Only global location is supported for Connector resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Connector>;
            /** Lists Connectors in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Filter string. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of the connectors, of the form: `projects/*‍/locations/*‍/providers/*` Only global location is supported for Connector resource. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListConnectorsResponse>;
            versions:
                VersionsResource;
        }
        interface ProvidersResource {
            /** Gets details of a provider. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*` Only global location is supported for Provider resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Provider>;
            /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for
                 * policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy
                 * in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional
                 * role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM
                 * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
                 */
                "options.requestedPolicyVersion"?:
                    number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Policy>;
            /** Lists Providers in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Page size. */
                pageSize?:
                    number;
                /** Page token. */
                pageToken?:
                    string;
                /** Required. Parent resource of the API, of the form: `projects/*‍/locations/*` Only global location is supported for Provider resource. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListProvidersResponse>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
             * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
                 * this field.
                 */
                resource:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            connectors:
                ConnectorsResource;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Resource name for the location. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Location>;
            /** GetRegionalSettings gets settings of a region. RegionalSettings is a singleton resource. */
            getRegionalSettings(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the Regional Settings. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<RegionalSettings>;
            /** Gets the runtimeConfig of a location. RuntimeConfig is a singleton resource for each location. */
            getRuntimeConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. Resource name of the form: `projects/*‍/locations/*‍/runtimeConfig` */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<RuntimeConfig>;
            /** Lists information about the supported locations for this service. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in
                 * [AIP-160](https://google.aip.dev/160).
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The resource that owns the locations collection, if applicable. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The maximum number of results to return. If not set, the service selects a default. */
                pageSize?:
                    number;
                /** A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListLocationsResponse>;
            /** Update the settings of a region. */
            updateRegionalSettings(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The list of fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    RegionalSettings;
            }): Request<Operation>;
            updateRegionalSettings(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The list of fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: RegionalSettings): Request<Operation>;
            connections:
                ConnectionsResource;
            endpointAttachments:
                EndpointAttachmentsResource;
            global:
                GlobalResource;
            operations:
                OperationsResource;
            providers:
                ProvidersResource;
        }
        interface ProjectsResource {
            locations:
                LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
