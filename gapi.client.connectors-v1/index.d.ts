/* Type definitions for non-npm package Connectors API v1 0.0 */
// Project: https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://connectors.googleapis.com/$discovery/rest?version=v1
// Revision: 20250312

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Connectors API v1 */
  function load(
    urlOrObject: 'https://connectors.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'connectors', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'connectors', version: 'v1', callback: () => any): void;

  namespace connectors {
    interface AuditConfig {
      /** The configuration for logging of each type of permission. */
      auditLogConfigs?: AuditLogConfig[];
      /** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
      service?: string;
    }
    interface AuditLogConfig {
      /** Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
      exemptedMembers?: string[];
      /** The log type that this config enables. */
      logType?: string;
    }
    interface AuthConfig {
      /** List containing additional auth configs. */
      additionalVariables?: ConfigVariable[];
      /** Identifier key for auth config */
      authKey?: string;
      /** The type of authentication configured. */
      authType?: string;
      /** Oauth2AuthCodeFlow. */
      oauth2AuthCodeFlow?: Oauth2AuthCodeFlow;
      /** Oauth2AuthCodeFlowGoogleManaged. */
      oauth2AuthCodeFlowGoogleManaged?: Oauth2AuthCodeFlowGoogleManaged;
      /** Oauth2ClientCredentials. */
      oauth2ClientCredentials?: Oauth2ClientCredentials;
      /** Oauth2JwtBearer. */
      oauth2JwtBearer?: Oauth2JwtBearer;
      /** SSH Public Key. */
      sshPublicKey?: SshPublicKey;
      /** UserPassword. */
      userPassword?: UserPassword;
    }
    interface AuthConfigTemplate {
      /** Identifier key for auth config */
      authKey?: string;
      /** The type of authentication configured. */
      authType?: string;
      /** Config variables to describe an `AuthConfig` for a `Connection`. */
      configVariableTemplates?: ConfigVariableTemplate[];
      /** Connector specific description for an authentication template. */
      description?: string;
      /** Display name for authentication template. */
      displayName?: string;
      /** Whether the auth config is the default one. */
      isDefault?: boolean;
    }
    interface AuthField {
      /** Data type of the field. */
      dataType?: string;
      /** Description of the field. */
      description?: string;
      /** Key of the field. */
      key?: string;
    }
    interface AuthObject {
      /** Whether the object has additional properties. */
      additionalProperties?: boolean;
      /** Auth key of the object. */
      authKey?: string;
      /** Auth type of the object. */
      authType?: string;
      /** Description of the object. */
      description?: string;
      /** Whether the object is the default one. */
      isDefault?: boolean;
      /** Properties of the object. */
      properties?: {[P in string]: AuthProperty};
      /** Type of the object. */
      type?: string;
    }
    interface AuthorizationCodeLink {
      /** Optional. The client ID assigned to the Google Cloud Connectors OAuth app for the connector data source. */
      clientId?: string;
      /** Optional. The client secret assigned to the Google Cloud Connectors OAuth app for the connector data source. */
      clientSecret?: Secret;
      /** Optional. Whether to enable PKCE for the auth code flow. */
      enablePkce?: boolean;
      /** Optional. Omit query params from the redirect URI. */
      omitQueryParams?: boolean;
      /** Optional. The scopes for which the user will authorize Google Cloud Connectors on the connector data source. */
      scopes?: string[];
      /** Optional. The base URI the user must click to trigger the authorization code login flow. */
      uri?: string;
    }
    interface AuthProperty {
      /** Description of the property. */
      description?: string;
      /** Type of the property. */
      type?: string;
    }
    interface AuthSchema {
      /** List of AuthFields. */
      authFields?: AuthField[];
      /** Auth key of the schema. */
      authKey?: string;
      /** Auth type of the schema. */
      authType?: string;
      /** Description of the schema. */
      description?: string;
      /** Display name of the schema. */
      displayName?: string;
      /** Whether the auth schema is the default one. */
      isDefault?: boolean;
    }
    interface BillingConfig {
      /** Output only. Billing category for the connector. */
      billingCategory?: string;
    }
    interface Binding {
      /** The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      condition?: Expr;
      /** Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`. */
      members?: string[];
      /** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles). */
      role?: string;
    }
    interface CancelOperationRequest {}
    interface ConfigVariable {
      /** Value is a bool. */
      boolValue?: boolean;
      /** Value is a Encryption Key. */
      encryptionKeyValue?: EncryptionKey;
      /** Value is an integer */
      intValue?: string;
      /** Key of the config variable. */
      key?: string;
      /** Value is a secret. */
      secretValue?: Secret;
      /** Value is a string. */
      stringValue?: string;
    }
    interface ConfigVariableTemplate {
      /** Optional. Authorization code link options. To be populated if `ValueType` is `AUTHORIZATION_CODE` */
      authorizationCodeLink?: AuthorizationCodeLink;
      /** Optional. Description. */
      description?: string;
      /** Optional. Display name of the parameter. */
      displayName?: string;
      /** Optional. Enum options. To be populated if `ValueType` is `ENUM` */
      enumOptions?: EnumOption[];
      /** Optional. enum source denotes the source of api to fill the enum options */
      enumSource?: string;
      /** Optional. Indicates if current template is part of advanced settings */
      isAdvanced?: boolean;
      /** Optional. Key of the config variable. */
      key?: string;
      /** Optional. Location Tyep denotes where this value should be sent in BYOC connections. */
      locationType?: string;
      /** Optional. MultipleSelectConfig represents the multiple options for a config variable. */
      multipleSelectConfig?: MultipleSelectConfig;
      /** Optional. Flag represents that this `ConfigVariable` must be provided for a connection. */
      required?: boolean;
      /** Optional. Condition under which a field would be required. The condition can be represented in the form of a logical expression. */
      requiredCondition?: LogicalExpression;
      /** Optional. Role grant configuration for the config variable. */
      roleGrant?: RoleGrant;
      /** Output only. State of the config variable. */
      state?: string;
      /** Optional. Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`. */
      validationRegex?: string;
      /** Optional. Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation. */
      valueType?: string;
    }
    interface Connection {
      /** Optional. Async operations enabled for the connection. If Async Operations is enabled, Connection allows the customers to initiate async long running operations using the actions API. */
      asyncOperationsEnabled?: boolean;
      /** Optional. Configuration for establishing the connection's authentication with an external system. */
      authConfig?: AuthConfig;
      /** Optional. Auth override enabled for the connection. If Auth Override is enabled, Connection allows the backend service auth to be overridden in the entities/actions API. */
      authOverrideEnabled?: boolean;
      /** Output only. Billing config for the connection. */
      billingConfig?: BillingConfig;
      /** Optional. Configuration for configuring the connection with an external system. */
      configVariables?: ConfigVariable[];
      /** Output only. Connection revision. This field is only updated when the connection is created or updated by User. */
      connectionRevision?: string;
      /** Required. Connector version on which the connection is created. The format is: projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/* Only global location is supported for ConnectorVersion resource. */
      connectorVersion?: string;
      /** Output only. Infra configs supported by Connector Version. */
      connectorVersionInfraConfig?: ConnectorVersionInfraConfig;
      /** Output only. Flag to mark the version indicating the launch stage. */
      connectorVersionLaunchStage?: string;
      /** Output only. Created time. */
      createTime?: string;
      /** Optional. Description of the resource. */
      description?: string;
      /** Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s). */
      destinationConfigs?: DestinationConfig[];
      /** Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName} */
      envoyImageLocation?: string;
      /** Optional. Eventing config of a connection */
      eventingConfig?: EventingConfig;
      /** Optional. Eventing enablement type. Will be nil if eventing is not enabled. */
      eventingEnablementType?: string;
      /** Output only. Eventing Runtime Data. */
      eventingRuntimeData?: EventingRuntimeData;
      /** Output only. The name of the Hostname of the Service Directory service with TLS. */
      host?: string;
      /** Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName} */
      imageLocation?: string;
      /** Output only. Is trusted tester program enabled for the project. */
      isTrustedTester?: boolean;
      /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Optional. Configuration that indicates whether or not the Connection can be edited. */
      lockConfig?: LockConfig;
      /** Optional. Log configuration for the connection. */
      logConfig?: ConnectorsLogConfig;
      /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection} */
      name?: string;
      /** Optional. Node configuration for the connection. */
      nodeConfig?: NodeConfig;
      /** Optional. Service account needed for runtime plane to access Google Cloud resources. */
      serviceAccount?: string;
      /** Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors" */
      serviceDirectory?: string;
      /** Optional. Ssl config of a connection */
      sslConfig?: SslConfig;
      /** Output only. Current status of the connection. */
      status?: ConnectionStatus;
      /** Output only. This subscription type enum states the subscription type of the project. */
      subscriptionType?: string;
      /** Optional. Suspended indicates if a user has suspended a connection or not. */
      suspended?: boolean;
      /** Output only. The name of the Service Directory service with TLS. */
      tlsServiceDirectory?: string;
      /** Optional. Traffic shaping configuration for the connection. */
      trafficShapingConfigs?: TrafficShapingConfig[];
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface ConnectionSchemaMetadata {
      /** Output only. List of actions. */
      actions?: string[];
      /** Output only. List of entity names. */
      entities?: string[];
      /** Error message for users. */
      errorMessage?: string;
      /** Output only. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
      name?: string;
      /** Output only. Timestamp when the connection runtime schema refresh was triggered. */
      refreshTime?: string;
      /** Output only. The current state of runtime schema. */
      state?: string;
      /** Output only. Timestamp when the connection runtime schema was updated. */
      updateTime?: string;
    }
    interface ConnectionStatus {
      /** Description. */
      description?: string;
      /** State. */
      state?: string;
      /** Status provides detailed information for the state. */
      status?: string;
    }
    interface Connector {
      /** Output only. Category of the connector. */
      category?: string;
      /** Output only. The type of the connector. */
      connectorType?: string;
      /** Output only. Created time. */
      createTime?: string;
      /** Output only. Description of the resource. */
      description?: string;
      /** Output only. Display name. */
      displayName?: string;
      /** Output only. Link to documentation page. */
      documentationUri?: string;
      /** Output only. Eventing details. Will be null if eventing is not supported. */
      eventingDetails?: EventingDetails;
      /** Output only. Link to external page. */
      externalUri?: string;
      /** Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Output only. Flag to mark the version indicating the launch stage. */
      launchStage?: string;
      /** Output only. Marketplace connector details. Will be null if the connector is not marketplace connector. */
      marketplaceConnectorDetails?: MarketplaceConnectorDetails;
      /** Output only. Resource name of the Connector. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector} Only global location is supported for Connector resource. */
      name?: string;
      /** Output only. Tags of the connector. */
      tags?: string[];
      /** Output only. Updated time. */
      updateTime?: string;
      /** Output only. Cloud storage location of icons etc consumed by UI. */
      webAssetsLocation?: string;
    }
    interface ConnectorInfraConfig {
      /** Indicates that the Cloud Run CPU should always be allocated. */
      alwaysAllocateCpu?: boolean;
      /** The window used for ratelimiting runtime requests to connections. */
      connectionRatelimitWindowSeconds?: string;
      /** Indicate whether connector versioning is enabled. */
      connectorVersioningEnabled?: boolean;
      /** Indicate whether connector is deployed on GKE/CloudRun */
      deploymentModel?: string;
      /** HPA autoscaling config. */
      hpaConfig?: HPAConfig;
      /** Max QPS supported for internal requests originating from Connd. */
      internalclientRatelimitThreshold?: string;
      /** Max Instance Request Conncurrency for Cloud Run service. */
      maxInstanceRequestConcurrency?: number;
      /** Indicate whether connector is being migrated to cloud run deployment model. */
      migrateDeploymentModel?: boolean;
      /** Indicate whether connector is being migrated to TLS. */
      migrateTls?: boolean;
      /** Indicate whether cloud spanner is required for connector job. */
      provisionCloudSpanner?: boolean;
      /** Max QPS supported by the connector version before throttling of requests. */
      ratelimitThreshold?: string;
      /** System resource limits. */
      resourceLimits?: ResourceLimits;
      /** System resource requests. */
      resourceRequests?: ResourceRequests;
      /** The name of shared connector deployment. */
      sharedDeployment?: string;
    }
    interface ConnectorsLogConfig {
      /** Enabled represents whether logging is enabled or not for a connection. */
      enabled?: boolean;
      /** Optional. Log configuration level. */
      level?: string;
    }
    interface ConnectorVersion {
      /** Output only. List of auth configs supported by the Connector Version. */
      authConfigTemplates?: AuthConfigTemplate[];
      /** Output only. Flag to mark the dynamic auth override. */
      authOverrideEnabled?: boolean;
      /** Output only. List of config variables needed to create a connection. */
      configVariableTemplates?: ConfigVariableTemplate[];
      /** Output only. Infra configs supported by Connector. */
      connectorInfraConfig?: ConnectorInfraConfig;
      /** Output only. Created time. */
      createTime?: string;
      /** Output only. List of destination configs needed to create a connection. */
      destinationConfigTemplates?: DestinationConfigTemplate[];
      /** Output only. Display name. */
      displayName?: string;
      /** Output only. Configuration for Egress Control. */
      egressControlConfig?: EgressControlConfig;
      /** Output only. Eventing configuration supported by the Connector. */
      eventingConfigTemplate?: EventingConfigTemplate;
      /** Output only. Is async operations supported. */
      isAsyncOperationsSupported?: boolean;
      /** Output only. Is custom actions supported. */
      isCustomActionsSupported?: boolean;
      /** Output only. Is custom entities supported. */
      isCustomEntitiesSupported?: boolean;
      /** Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Output only. Flag to mark the version indicating the launch stage. */
      launchStage?: string;
      /** Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is supported for Connector resource. */
      name?: string;
      /** Output only. ReleaseVersion of the connector, for example: "1.0.1-alpha". */
      releaseVersion?: string;
      /** Output only. Role grant configuration for this config variable. It will be DEPRECATED soon. */
      roleGrant?: RoleGrant;
      /** Output only. Role grant configurations for this connector version. */
      roleGrants?: RoleGrant[];
      /** Connection Schema Refresh Config */
      schemaRefreshConfig?: SchemaRefreshConfig;
      /** Output only. Ssl configuration supported by the Connector. */
      sslConfigTemplate?: SslConfigTemplate;
      /** Output only. Information about the runtime features supported by the Connector. */
      supportedRuntimeFeatures?: SupportedRuntimeFeatures;
      /** Output only. Supported standard actions. */
      supportedStandardActions?: StandardAction[];
      /** Output only. Supported standard entities. */
      supportedStandardEntities?: StandardEntity[];
      /** Output only. Unsupported connection types. */
      unsupportedConnectionTypes?: string[];
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface ConnectorVersionInfraConfig {
      /** Output only. The window used for ratelimiting runtime requests to connections. */
      connectionRatelimitWindowSeconds?: string;
      /** Output only. Indicates whether connector is deployed on GKE/CloudRun */
      deploymentModel?: string;
      /** Output only. Status of the deployment model migration. */
      deploymentModelMigrationState?: string;
      /** Output only. HPA autoscaling config. */
      hpaConfig?: HPAConfig;
      /** Output only. Max QPS supported for internal requests originating from Connd. */
      internalclientRatelimitThreshold?: string;
      /** Output only. Max instance request concurrency. */
      maxInstanceRequestConcurrency?: number;
      /** Output only. Max QPS supported by the connector version before throttling of requests. */
      ratelimitThreshold?: string;
      /** Output only. System resource limits. */
      resourceLimits?: ResourceLimits;
      /** Output only. System resource requests. */
      resourceRequests?: ResourceRequests;
      /** Output only. The name of shared connector deployment. */
      sharedDeployment?: string;
      /** Output only. Status of the TLS migration. */
      tlsMigrationState?: string;
    }
    interface CustomConnector {
      /** Output only. Active connector versions. */
      activeConnectorVersions?: string[];
      /** Output only. All connector versions. */
      allConnectorVersions?: string[];
      /** Output only. All marketplace versions. */
      allMarketplaceVersions?: string[];
      /** Output only. Created time. */
      createTime?: string;
      /** Required. Type of the custom connector. */
      customConnectorType?: string;
      /** Optional. Description of the resource. */
      description?: string;
      /** Optional. Display name. */
      displayName?: string;
      /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Optional. Logo of the resource. */
      logo?: string;
      /** Identifier. Resource name of the CustomConnector. Format: projects/{project}/locations/{location}/customConnectors/{connector} */
      name?: string;
      /** Output only. Published marketplace versions. */
      publishedMarketplaceVersions?: string[];
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface CustomConnectorVersion {
      /** Optional. Authentication config for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true. */
      authConfig?: AuthConfig;
      /** Optional. Backend variables config templates. This translates to additional variable templates in connection. */
      backendVariableTemplates?: ConfigVariableTemplate[];
      /** Output only. Created time. */
      createTime?: string;
      /** Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true. */
      destinationConfigs?: DestinationConfig[];
      /** Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation. */
      enableBackendDestinationConfig?: boolean;
      /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version} */
      name?: string;
      /** Optional. Partner metadata details. This should be populated only when publishing the custom connector to partner connector. */
      partnerMetadata?: PartnerMetadata;
      /** Output only. Publish status of a custom connector. */
      publishStatus?: PublishStatus;
      /** Optional. Service account used by runtime plane to access auth config secrets. */
      serviceAccount?: string;
      /** Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///` */
      specLocation?: string;
      /** Output only. Server URLs parsed from the spec. */
      specServerUrls?: string[];
      /** Output only. State of the custom connector version. */
      state?: string;
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface DailyCycle {
      /** Output only. Duration of the time window, set by service producer. */
      duration?: string;
      /** Time within the day to start the operations. */
      startTime?: TimeOfDay;
    }
    interface Date {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface DeadLetterConfig {
      /** Optional. Project which has the topic given. */
      projectId?: string;
      /** Optional. Topic to push events which couldn't be processed. */
      topic?: string;
    }
    interface DenyMaintenancePeriod {
      /** Deny period end date. This can be: * A full date, with non-zero year, month and day values. * A month and day value, with a zero year. Allows recurring deny periods each year. Date matching this period will have to be before the end. */
      endDate?: Date;
      /** Deny period start date. This can be: * A full date, with non-zero year, month and day values. * A month and day value, with a zero year. Allows recurring deny periods each year. Date matching this period will have to be the same or after the start. */
      startDate?: Date;
      /** Time in UTC when the Blackout period starts on start_date and ends on end_date. This can be: * Full time. * All zeros for 00:00:00 UTC */
      time?: TimeOfDay;
    }
    interface DeprecateCustomConnectorVersionRequest {}
    interface Destination {
      /** For publicly routable host. */
      host?: string;
      /** The port is the target port number that is accepted by the destination. */
      port?: number;
      /** PSC service attachments. Format: projects/*‍/regions/*‍/serviceAttachments/* */
      serviceAttachment?: string;
    }
    interface DestinationConfig {
      /** The destinations for the key. */
      destinations?: Destination[];
      /** The key is the destination identifier that is supported by the Connector. */
      key?: string;
    }
    interface DestinationConfigTemplate {
      /** Autocomplete suggestions for destination URL field. */
      autocompleteSuggestions?: string[];
      /** The default port. */
      defaultPort?: number;
      /** Description. */
      description?: string;
      /** Display name of the parameter. */
      displayName?: string;
      /** Whether the current destination tempalate is part of Advanced settings */
      isAdvanced?: boolean;
      /** Key of the destination. */
      key?: string;
      /** The maximum number of destinations supported for this key. */
      max?: number;
      /** The minimum number of destinations supported for this key. */
      min?: number;
      /** Whether port number should be provided by customers. */
      portFieldType?: string;
      /** Regex pattern for host. */
      regexPattern?: string;
    }
    interface EgressControlConfig {
      /** Static Comma separated backends which are common for all Connection resources. Supported formats for each backend are host:port or just host (host can be ip address or domain name). */
      backends?: string;
      /** Extractions Rules to extract the backends from customer provided configuration. */
      extractionRules?: ExtractionRules;
    }
    interface Empty {}
    interface EncryptionConfig {
      /** Optional. Encryption type for the region. */
      encryptionType?: string;
      /** Optional. KMS crypto key. This field accepts identifiers of the form `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/ {crypto_key}` */
      kmsKeyName?: string;
    }
    interface EncryptionKey {
      /** The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*‍/locations/*‍/keyRings/*‍/cryptoKeys/*`. Will be empty string if google managed. */
      kmsKeyName?: string;
      /** Type. */
      type?: string;
    }
    interface EndPoint {
      /** The URI of the Endpoint. */
      endpointUri?: string;
      /** List of Header to be added to the Endpoint. */
      headers?: Header[];
    }
    interface EndpointAttachment {
      /** Output only. Created time. */
      createTime?: string;
      /** Optional. Description of the resource. */
      description?: string;
      /** Optional. The Private Service Connect Connection Endpoint Global Access. https://cloud.google.com/vpc/docs/about-accessing-vpc-hosted-services-endpoints#global-access */
      endpointGlobalAccess?: boolean;
      /** Output only. The Private Service Connect connection endpoint ip */
      endpointIp?: string;
      /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment} */
      name?: string;
      /** Required. The path of the service attachment */
      serviceAttachment?: string;
      /** Output only. The Private Service Connect Connection Endpoint State. This value is only available in the Full view. */
      state?: string;
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface EnrichmentConfig {
      /** Optional. Append ACL to the event. */
      appendAcl?: boolean;
    }
    interface EnumOption {
      /** Optional. Display name of the option. */
      displayName?: string;
      /** Optional. Id of the option. */
      id?: string;
    }
    interface EventingConfig {
      /** Optional. Additional eventing related field values */
      additionalVariables?: ConfigVariable[];
      /** Optional. Auth details for the webhook adapter. */
      authConfig?: AuthConfig;
      /** Optional. Dead letter configuration for eventing of a connection. */
      deadLetterConfig?: DeadLetterConfig;
      /** Optional. Data enrichment configuration. */
      enrichmentConfig?: EnrichmentConfig;
      /** Optional. Enrichment Enabled. */
      enrichmentEnabled?: boolean;
      /** Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled. */
      eventsListenerIngressEndpoint?: string;
      /** Optional. Auth details for the event listener. */
      listenerAuthConfig?: AuthConfig;
      /** Optional. Private Connectivity Enabled. */
      privateConnectivityEnabled?: boolean;
      /** Optional. Proxy for Eventing auto-registration. */
      proxyDestinationConfig?: DestinationConfig;
      /** Optional. Registration endpoint for auto registration. */
      registrationDestinationConfig?: DestinationConfig;
    }
    interface EventingConfigTemplate {
      /** Additional fields that need to be rendered. */
      additionalVariables?: ConfigVariableTemplate[];
      /** AuthConfigTemplates represents the auth values for the webhook adapter. */
      authConfigTemplates?: AuthConfigTemplate[];
      /** Auto refresh to extend webhook life. */
      autoRefresh?: boolean;
      /** Auto Registration supported. */
      autoRegistrationSupported?: boolean;
      /** Encryption key (can be either Google managed or CMEK). */
      encryptionKeyTemplate?: ConfigVariableTemplate;
      /** Enrichment Supported. */
      enrichmentSupported?: boolean;
      /** The type of the event listener for a specific connector. */
      eventListenerType?: string;
      /** Is Eventing Supported. */
      isEventingSupported?: boolean;
      /** ListenerAuthConfigTemplates represents the auth values for the event listener. */
      listenerAuthConfigTemplates?: AuthConfigTemplate[];
      /** Proxy destination config template. */
      proxyDestinationConfig?: DestinationConfigTemplate;
      /** Registration host destination config template. */
      registrationDestinationConfig?: DestinationConfigTemplate;
      /** Trigger Config fields that needs to be rendered */
      triggerConfigVariables?: ConfigVariableTemplate[];
    }
    interface EventingDetails {
      /** Output only. Custom Event Types. */
      customEventTypes?: boolean;
      /** Output only. Description. */
      description?: string;
      /** Output only. Link to public documentation. */
      documentationLink?: string;
      /** Output only. Cloud storage location of the icon. */
      iconLocation?: string;
      /** Output only. Eventing Launch Stage. */
      launchStage?: string;
      /** Output only. Name of the Eventing trigger. */
      name?: string;
      /** Output only. Array of search keywords. */
      searchTags?: string[];
      /** Output only. The type of the event listener for a specific connector. */
      type?: string;
    }
    interface EventingRuntimeData {
      /** Output only. Events listener endpoint. The value will populated after provisioning the events listener. */
      eventsListenerEndpoint?: string;
      /** Output only. Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled. */
      eventsListenerPscSa?: string;
      /** Output only. Current status of eventing. */
      status?: EventingStatus;
      /** Output only. Webhook data. */
      webhookData?: WebhookData;
      /** Output only. Webhook subscriptions. */
      webhookSubscriptions?: WebhookSubscriptions;
    }
    interface EventingStatus {
      /** Output only. Description of error if State is set to "ERROR". */
      description?: string;
      /** Output only. State. */
      state?: string;
    }
    interface EventSubscription {
      /** Output only. Created time. */
      createTime?: string;
      /** Optional. The destination to hit when we receive an event */
      destinations?: EventSubscriptionDestination;
      /** Optional. Event type id of the event of current EventSubscription. */
      eventTypeId?: string;
      /** Optional. JMS is the source for the event listener. */
      jms?: JMS;
      /** Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription} */
      name?: string;
      /** Optional. Status indicates the status of the event subscription resource */
      status?: EventSubscriptionStatus;
      /** Optional. name of the Subscriber for the current EventSubscription. */
      subscriber?: string;
      /** Optional. Link for Subscriber of the current EventSubscription. */
      subscriberLink?: string;
      /** Optional. Configuration for configuring the trigger */
      triggerConfigVariables?: ConfigVariable[];
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface EventSubscriptionDestination {
      /** OPTION 1: Hit an endpoint when we receive an event. */
      endpoint?: EndPoint;
      /** OPTION 3: Write the event to Pub/Sub topic. */
      pubsub?: PubSub;
      /** Service account needed for runtime plane to trigger IP workflow. */
      serviceAccount?: string;
      /** type of the destination */
      type?: string;
    }
    interface EventSubscriptionStatus {
      /** Output only. Description of the state. */
      description?: string;
      /** Output only. State of Event Subscription resource. */
      state?: string;
    }
    interface EventType {
      /** Output only. Created time. */
      createTime?: string;
      /** Output only. Schema of the event payload after enriched. Will be null if read before send is not supported. */
      enrichedEventPayloadSchema?: string;
      /** Output only. Runtime entity type name. Will be null if entity type map is not available. Used for read before send feature. */
      entityType?: string;
      /** Output only. Schema of webhook event payload. */
      eventPayloadSchema?: string;
      /** Output only. Event type id. Example: `ticket.created`. */
      eventTypeId?: string;
      /** Output only. Id path denotes the path of id in webhook payload. */
      idPath?: string;
      /** Output only. Resource name of the eventtype. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}/eventtypes/{eventtype} Only global location is supported for Connector resource. */
      name?: string;
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface Expr {
      /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
      description?: string;
      /** Textual representation of an expression in Common Expression Language syntax. */
      expression?: string;
      /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
      location?: string;
      /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
      title?: string;
    }
    interface ExtractionRule {
      /** Regex used to extract backend details from source. If empty, whole source value will be used. */
      extractionRegex?: string;
      /** Source on which the rule is applied. */
      source?: Source;
    }
    interface ExtractionRules {
      /** Collection of Extraction Rule. */
      extractionRule?: ExtractionRule[];
    }
    interface FetchAuthSchemaResponse {
      /** List of AuthSchemas. */
      authSchemas?: AuthSchema[];
      /** JSON schema of the AuthSchemas. This is only populated if the view is JSON_SCHEMA. The schema is in draft-07 format. */
      jsonSchema?: JsonAuthSchema;
    }
    interface Field {
      /** The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields. */
      additionalDetails?: {[P in string]: any};
      /** The data type of the Field. */
      dataType?: string;
      /** The following field specifies the default value of the Field provided by the external system if a value is not provided. */
      defaultValue?: any;
      /** A brief description of the Field. */
      description?: string;
      /** Name of the Field. */
      field?: string;
      /** JsonSchema representation of this entity's schema */
      jsonSchema?: JsonSchema;
      /** The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity. */
      key?: boolean;
      /** Specifies whether a null value is allowed. */
      nullable?: boolean;
      /** Specifies if the Field is readonly. */
      readonly?: boolean;
    }
    interface FieldComparison {
      /** Boolean value */
      boolValue?: boolean;
      /** Optional. Comparator to use for comparing the field value. */
      comparator?: string;
      /** Integer value */
      intValue?: string;
      /** Optional. Key of the field. */
      key?: string;
      /** String value */
      stringValue?: string;
    }
    interface Header {
      /** Key of Header. */
      key?: string;
      /** Value of Header. */
      value?: string;
    }
    interface HPAConfig {
      /** Output only. Percent CPU utilization where HPA triggers autoscaling. */
      cpuUtilizationThreshold?: string;
      /** Output only. Percent Memory utilization where HPA triggers autoscaling. */
      memoryUtilizationThreshold?: string;
    }
    interface InputParameter {
      /** The data type of the Parameter. */
      dataType?: string;
      /** The following field specifies the default value of the Parameter provided by the external system if a value is not provided. */
      defaultValue?: any;
      /** A brief description of the Parameter. */
      description?: string;
      /** JsonSchema representation of this action's parameter */
      jsonSchema?: JsonSchema;
      /** Specifies whether a null value is allowed. */
      nullable?: boolean;
      /** Name of the Parameter. */
      parameter?: string;
    }
    interface Instance {
      /** consumer_defined_name is the name of the instance set by the service consumers. Generally this is different from the `name` field which reperesents the system-assigned id of the instance which the service consumers do not recognize. This is a required field for tenants onboarding to Maintenance Window notifications (go/slm-rollout-maintenance-policies#prerequisites). */
      consumerDefinedName?: string;
      /** Output only. Timestamp when the resource was created. */
      createTime?: string;
      /** Optional. The instance_type of this instance of format: projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}. Instance Type represents a high-level tier or SKU of the service that this instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses 'instance_type' along with 'software_versions' to determine whether instance needs an update or not. */
      instanceType?: string;
      /** Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user. */
      labels?: {[P in string]: string};
      /** Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the referenced policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_settings.maintenance_policies is set. */
      maintenancePolicyNames?: {[P in string]: string};
      /** The MaintenanceSchedule contains the scheduling information of published maintenance schedule with same key as software_versions. */
      maintenanceSchedules?: {[P in string]: MaintenanceSchedule};
      /** Optional. The MaintenanceSettings associated with instance. */
      maintenanceSettings?: MaintenanceSettings;
      /** Unique name of the resource. It uses the form: `projects/{project_number}/locations/{location_id}/instances/{instance_id}` Note: This name is passed, stored and logged across the rollout system. So use of consumer project_id or any other consumer PII in the name is strongly discouraged for wipeout (go/wipeout) compliance. See go/elysium/project_ids#storage-guidance for more details. */
      name?: string;
      /** Optional. notification_parameter are information that service producers may like to include that is not relevant to Rollout. This parameter will only be passed to Gamma and Cloud Logging for notification/logging purpose. */
      notificationParameters?: {[P in string]: NotificationParameter};
      /** Output only. Custom string attributes used primarily to expose producer-specific information in monitoring dashboards. See go/get-instance-metadata. */
      producerMetadata?: {[P in string]: string};
      /** Output only. The list of data plane resources provisioned for this instance, e.g. compute VMs. See go/get-instance-metadata. */
      provisionedResources?: ProvisionedResource[];
      /** Link to the SLM instance template. Only populated when updating SLM instances via SSA's Actuation service adaptor. Service producers with custom control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead they should use software_versions. */
      slmInstanceTemplate?: string;
      /** Output only. SLO metadata for instance classification in the Standardized dataplane SLO platform. See go/cloud-ssa-standard-slo for feature description. */
      sloMetadata?: SloMetadata;
      /** Software versions that are used to deploy this instance. This can be mutated by rollout services. */
      softwareVersions?: {[P in string]: string};
      /** Output only. Current lifecycle state of the resource (e.g. if it's being created or ready to use). */
      state?: string;
      /** Output only. ID of the associated GCP tenant project. See go/get-instance-metadata. */
      tenantProjectId?: string;
      /** Output only. Timestamp when the resource was last modified. */
      updateTime?: string;
    }
    interface JMS {
      /** Optional. Name of the JMS source. i.e. queueName or topicName */
      name?: string;
      /** Optional. Type of the JMS Source. i.e. Queue or Topic */
      type?: string;
    }
    interface JsonAuthSchema {
      /** JSON schema of the AuthSchemas. */
      $schema?: string;
      /** List of AuthObjects. */
      oneOf?: AuthObject[];
    }
    interface JsonSchema {
      /** Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema */
      additionalDetails?: {[P in string]: any};
      /** The default value of the field or object described by this schema. */
      default?: any;
      /** A description of this schema. */
      description?: string;
      /** Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values */
      enum?: any[];
      /** Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format */
      format?: string;
      /** Schema that applies to array values, applicable only if this is of type `array`. */
      items?: JsonSchema;
      /** JDBC datatype of the field. */
      jdbcType?: string;
      /** The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property */
      properties?: {[P in string]: JsonSchema};
      /** Whether this property is required. */
      required?: string[];
      /** JSON Schema Validation: A Vocabulary for Structural Validation of JSON */
      type?: string[];
    }
    interface JwtClaims {
      /** Value for the "aud" claim. */
      audience?: string;
      /** Value for the "iss" claim. */
      issuer?: string;
      /** Value for the "sub" claim. */
      subject?: string;
    }
    interface ListActionsResponse {
      /** list of actions */
      actions?: RuntimeActionSchema[];
      /** token for next page */
      nextPageToken?: string;
    }
    interface ListConnectionsResponse {
      /** Connections. */
      connections?: Connection[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListConnectorsResponse {
      /** A list of connectors. */
      connectors?: Connector[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListConnectorVersionsResponse {
      /** A list of connector versions. */
      connectorVersions?: ConnectorVersion[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListCustomConnectorsResponse {
      /** A list of customConnectors. */
      customConnectors?: CustomConnector[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListCustomConnectorVersionsResponse {
      /** A list of connector versions. */
      customConnectorVersions?: CustomConnectorVersion[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListEndpointAttachmentsResponse {
      /** EndpointAttachments. */
      endpointAttachments?: EndpointAttachment[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListenEventRequest {
      /** Optional. Request payload. */
      payload?: {[P in string]: any};
    }
    interface ListenEventResponse {}
    interface ListEntityTypesResponse {
      /** list of entity types */
      entityTypes?: RuntimeEntitySchema[];
      /** token for next page */
      nextPageToken?: string;
    }
    interface ListEventSubscriptionsResponse {
      /** Subscriptions. */
      eventSubscriptions?: EventSubscription[];
      /** Next page token. */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListEventTypesResponse {
      /** A list of connector versions. */
      eventTypes?: EventType[];
      /** Next page token. */
      nextPageToken?: string;
    }
    interface ListLocationsResponse {
      /** A list of locations that matches the specified filter in the request. */
      locations?: Location[];
      /** The standard List next-page token. */
      nextPageToken?: string;
    }
    interface ListManagedZonesResponse {
      /** ManagedZones. */
      managedZones?: ManagedZone[];
      /** Next page token. */
      nextPageToken?: string;
    }
    interface ListOperationsResponse {
      /** The standard List next-page token. */
      nextPageToken?: string;
      /** A list of operations that matches the specified filter in the request. */
      operations?: Operation[];
    }
    interface ListProvidersResponse {
      /** Next page token. */
      nextPageToken?: string;
      /** A list of providers. */
      providers?: Provider[];
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface ListRuntimeActionSchemasResponse {
      /** Next page token. */
      nextPageToken?: string;
      /** Runtime action schemas. */
      runtimeActionSchemas?: RuntimeActionSchema[];
    }
    interface ListRuntimeEntitySchemasResponse {
      /** Next page token. */
      nextPageToken?: string;
      /** Runtime entity schemas. */
      runtimeEntitySchemas?: RuntimeEntitySchema[];
    }
    interface Location {
      /** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
      displayName?: string;
      /** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
      labels?: {[P in string]: string};
      /** The canonical id for this location. For example: `"us-east1"`. */
      locationId?: string;
      /** Service-specific metadata. For example the available capacity at the given location. */
      metadata?: {[P in string]: any};
      /** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
      name?: string;
    }
    interface LockConfig {
      /** Indicates whether or not the connection is locked. */
      locked?: boolean;
      /** Describes why a connection is locked. */
      reason?: string;
    }
    interface LogicalExpression {
      /** Optional. A list of fields to be compared. */
      fieldComparisons?: FieldComparison[];
      /** Optional. A list of nested conditions to be compared. */
      logicalExpressions?: LogicalExpression[];
      /** Optional. The logical operator to use between the fields and conditions. */
      logicalOperator?: string;
    }
    interface MaintenancePolicy {
      /** Output only. The time when the resource was created. */
      createTime?: string;
      /** Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512. */
      description?: string;
      /** Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user. */
      labels?: {[P in string]: string};
      /** Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`. */
      name?: string;
      /** Optional. The state of the policy. */
      state?: string;
      /** Maintenance policy applicable to instance update. */
      updatePolicy?: UpdatePolicy;
      /** Output only. The time when the resource was updated. */
      updateTime?: string;
    }
    interface MaintenanceSchedule {
      /** This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers. */
      canReschedule?: boolean;
      /** The scheduled end time for the maintenance. */
      endTime?: string;
      /** The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy. */
      rolloutManagementPolicy?: string;
      /** schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline. */
      scheduleDeadlineTime?: string;
      /** The scheduled start time for the maintenance. */
      startTime?: string;
    }
    interface MaintenanceSettings {
      /** Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted. */
      exclude?: boolean;
      /** Optional. If the update call is triggered from rollback, set the value as true. */
      isRollback?: boolean;
      /** Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the embedded policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_policy_names is set. If only the name is needed, then only populate MaintenancePolicy.name. */
      maintenancePolicies?: {[P in string]: MaintenancePolicy};
    }
    interface MaintenanceWindow {
      /** Daily cycle. */
      dailyCycle?: DailyCycle;
      /** Weekly cycle. */
      weeklyCycle?: WeeklyCycle;
    }
    interface ManagedZone {
      /** Output only. Created time. */
      createTime?: string;
      /** Optional. Description of the resource. */
      description?: string;
      /** Required. DNS Name of the resource */
      dns?: string;
      /** Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone} */
      name?: string;
      /** Required. The name of the Target Project */
      targetProject?: string;
      /** Required. The name of the Target Project VPC Network */
      targetVpc?: string;
      /** Output only. Updated time. */
      updateTime?: string;
    }
    interface MarketplaceConnectorDetails {
      /** Marketplace product name. */
      marketplaceProduct?: string;
      /** Marketplace product ID. */
      marketplaceProductId?: string;
      /** Marketplace product URL. */
      marketplaceProductUri?: string;
      /** The name of the partner. */
      partner?: string;
    }
    interface MultipleSelectConfig {
      /** Optional. Allow custom values. */
      allowCustomValues?: boolean;
      /** Required. Multiple select options. */
      multipleSelectOptions?: MultipleSelectOption[];
      /** Required. Value separator. Only "," can be used for OAuth auth code flow scope field. */
      valueSeparator?: string;
    }
    interface MultipleSelectOption {
      /** Optional. Value of the option. */
      description?: string;
      /** Required. Display name of the option. */
      displayName?: string;
      /** Required. Key of the option. */
      key?: string;
      /** Optional. Indicates if the option is preselected. */
      preselected?: boolean;
    }
    interface NetworkConfig {
      /** Output only. Egress IPs */
      egressIps?: string[];
      /** Optional. Egress mode for the network. */
      egressMode?: string;
    }
    interface NodeConfig {
      /** Maximum number of nodes in the runtime nodes. */
      maxNodeCount?: number;
      /** Minimum number of nodes in the runtime nodes. */
      minNodeCount?: number;
    }
    interface NodeSloMetadata {
      /** The location of the node, if different from instance location. */
      location?: string;
      /** The id of the node. This should be equal to SaasInstanceNode.node_id. */
      nodeId?: string;
      /** If present, this will override eligibility for the node coming from instance or exclusions for specified SLIs. */
      perSliEligibility?: PerSliSloEligibility;
    }
    interface NotificationParameter {
      /** Optional. Array of string values. e.g. instance's replica information. */
      values?: string[];
    }
    interface Oauth2AuthCodeFlow {
      /** Authorization code to be exchanged for access and refresh tokens. */
      authCode?: string;
      /** Auth URL for Authorization Code Flow */
      authUri?: string;
      /** Client ID for user-provided OAuth app. */
      clientId?: string;
      /** Client secret for user-provided OAuth app. */
      clientSecret?: Secret;
      /** Whether to enable PKCE when the user performs the auth code flow. */
      enablePkce?: boolean;
      /** PKCE verifier to be used during the auth code exchange. */
      pkceVerifier?: string;
      /** Redirect URI to be provided during the auth code exchange. */
      redirectUri?: string;
      /** Scopes the connection will request when the user performs the auth code flow. */
      scopes?: string[];
    }
    interface Oauth2AuthCodeFlowGoogleManaged {
      /** Optional. Authorization code to be exchanged for access and refresh tokens. */
      authCode?: string;
      /** Optional. Redirect URI to be provided during the auth code exchange. */
      redirectUri?: string;
      /** Required. Scopes the connection will request when the user performs the auth code flow. */
      scopes?: string[];
    }
    interface Oauth2ClientCredentials {
      /** The client identifier. */
      clientId?: string;
      /** Secret version reference containing the client secret. */
      clientSecret?: Secret;
    }
    interface Oauth2JwtBearer {
      /** Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*‍/secrets/*‍/versions/*`. */
      clientKey?: Secret;
      /** JwtClaims providers fields to generate the token. */
      jwtClaims?: JwtClaims;
    }
    interface Operation {
      /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: Status;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
      name?: string;
      /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
      response?: {[P in string]: any};
    }
    interface OperationMetadata {
      /** Output only. API version used to start the operation. */
      apiVersion?: string;
      /** Output only. The time the operation was created. */
      createTime?: string;
      /** Output only. The time the operation finished running. */
      endTime?: string;
      /** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
      requestedCancellation?: boolean;
      /** Output only. Human-readable status of the operation, if any. */
      statusMessage?: string;
      /** Output only. Server-defined resource path for the target of the operation. */
      target?: string;
      /** Output only. Name of the verb executed by the operation. */
      verb?: string;
    }
    interface PartnerMetadata {
      /** Required. Whether the user has accepted the Google Cloud Platform Terms of Service (https://cloud.google.com/terms/) and the Google Cloud Marketplace Terms of Service (https://cloud.google.com/terms/marketplace/launcher?hl=en). */
      acceptGcpTos?: boolean;
      /** Optional. Additional comments for the submission. */
      additionalComments?: string;
      /** Required. Confirmation that connector meets all applicable requirements mentioned in the Partner Connector Publishing requirements list and Partner onboardiong requirements list (https://cloud.google.com/marketplace/docs/partners/get-started#requirements). */
      confirmPartnerRequirements?: boolean;
      /** Required. Public URL for the demo video. */
      demoUri?: string;
      /** Output only. Has dynamic open api spec uri. */
      hasDynamicSpecUri?: boolean;
      /** Required. Integration example templates for the custom connector. */
      integrationTemplates?: string;
      /** Output only. Local spec path. Required if has_dynamic_spec_uri is true. */
      localSpecPath?: string;
      /** Optional. Marketplace product name. */
      marketplaceProduct?: string;
      /** Required. Marketplace product ID. */
      marketplaceProductId?: string;
      /** Optional. Marketplace product project ID. */
      marketplaceProductProjectId?: string;
      /** Optional. Marketplace product URL. */
      marketplaceProductUri?: string;
      /** Required. Partner name. */
      partner?: string;
      /** Required. Partner connector display name. */
      partnerConnectorDisplayName?: string;
      /** Output only. Publish request time. */
      publishRequestTime?: string;
      /** Required. Target application for which partner connector is built. */
      targetApplication?: string;
      /** Required. Target customer segment for the partner connector. */
      targetCustomerSegment?: string;
      /** Required. Details about partner connector use cases. */
      useCases?: string;
    }
    interface PerSliSloEligibility {
      /** An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted. */
      eligibilities?: {[P in string]: SloEligibility};
    }
    interface Policy {
      /** Specifies cloud audit logging configuration for this policy. */
      auditConfigs?: AuditConfig[];
      /** Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`. */
      bindings?: Binding[];
      /** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
      etag?: string;
      /** Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      version?: number;
    }
    interface Provider {
      /** Output only. Created time. */
      createTime?: string;
      /** Output only. Description of the resource. */
      description?: string;
      /** Output only. Display name. */
      displayName?: string;
      /** Output only. Link to documentation page. */
      documentationUri?: string;
      /** Output only. Link to external page. */
      externalUri?: string;
      /** Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources */
      labels?: {[P in string]: string};
      /** Output only. Flag to mark the version indicating the launch stage. */
      launchStage?: string;
      /** Output only. Resource name of the Provider. Format: projects/{project}/locations/{location}/providers/{provider} Only global location is supported for Provider resource. */
      name?: string;
      /** Output only. Updated time. */
      updateTime?: string;
      /** Output only. Cloud storage location of icons etc consumed by UI. */
      webAssetsLocation?: string;
    }
    interface ProvisionedResource {
      /** Type of the resource. This can be either a GCP resource or a custom one (e.g. another cloud provider's VM). For GCP compute resources use singular form of the names listed in GCP compute API documentation (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with 'compute-', for example: 'compute-instance', 'compute-disk', 'compute-autoscaler'. */
      resourceType?: string;
      /** URL identifying the resource, e.g. "https://www.googleapis.com/compute/v1/projects/...)". */
      resourceUrl?: string;
    }
    interface PublishCustomConnectorVersionRequest {
      /** Required. Partner metadata details for validating and publishing the custom connector as a partner connector version. */
      partnerMetadata?: PartnerMetadata;
    }
    interface PublishStatus {
      /** Output only. Partner connector name. Will be set on the custom connector. Format: providers/partner/connectors//versions/ */
      publishedAs?: string;
      /** Output only. Custom connector name. Will be set on the partner connector. Format: providers/customconnectors/connectors//versions/ */
      publishedSource?: string;
      /** Output only. Publish state of the custom connector. */
      publishState?: string;
      /** Output only. Publish time. */
      publishTime?: string;
    }
    interface PubSub {
      /** Optional. Pub/Sub message attributes to be added to the Pub/Sub message. */
      attributes?: {[P in string]: string};
      /** Optional. Configuration for configuring the trigger */
      configVariables?: ConfigVariable[];
      /** Required. The project id which has the Pub/Sub topic. */
      projectId?: string;
      /** Required. The topic id of the Pub/Sub topic. */
      topicId?: string;
    }
    interface RefreshConnectionSchemaMetadataRequest {}
    interface RegionalSettings {
      /** Optional. Regional encryption config to hold CMEK details. */
      encryptionConfig?: EncryptionConfig;
      /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings */
      name?: string;
      /** Optional. Regional network config. */
      networkConfig?: NetworkConfig;
      /** Output only. Specifies whether the region is provisioned. */
      provisioned?: boolean;
    }
    interface RepairEventingRequest {}
    interface Resource {
      /** Optional. Template to uniquely represent a Google Cloud resource in a format IAM expects This is a template that can have references to other values provided in the config variable template. */
      pathTemplate?: string;
      /** Optional. Different types of resource supported. */
      type?: string;
    }
    interface ResourceLimits {
      /** Output only. CPU limit. */
      cpu?: string;
      /** Output only. Memory limit. */
      memory?: string;
    }
    interface ResourceRequests {
      /** Output only. CPU request. */
      cpu?: string;
      /** Output only. Memory request. */
      memory?: string;
    }
    interface ResultMetadata {
      /** The data type of the field. */
      dataType?: string;
      /** The following field specifies the default value of the Parameter provided by the external system if a value is not provided. */
      defaultValue?: any;
      /** A brief description of the field. */
      description?: string;
      /** Name of the result field. */
      field?: string;
      /** JsonSchema representation of this action's result */
      jsonSchema?: JsonSchema;
      /** Specifies whether a null value is allowed. */
      nullable?: boolean;
    }
    interface RetryEventSubscriptionRequest {}
    interface RoleGrant {
      /** Optional. Template that UI can use to provide helper text to customers. */
      helperTextTemplate?: string;
      /** Optional. Principal/Identity for whom the role need to assigned. */
      principal?: string;
      /** Optional. Resource on which the roles needs to be granted for the principal. */
      resource?: Resource;
      /** Optional. List of roles that need to be granted. */
      roles?: string[];
    }
    interface RuntimeActionSchema {
      /** Output only. Name of the action. */
      action?: string;
      /** Output only. Brief Description of action */
      description?: string;
      /** Output only. Display Name of action to be shown on client side */
      displayName?: string;
      /** Output only. JsonSchema representation of this action's input metadata */
      inputJsonSchema?: JsonSchema;
      /** Output only. List of input parameter metadata for the action. */
      inputParameters?: InputParameter[];
      /** Output only. Input schema as string. */
      inputSchemaAsString?: string;
      /** Output only. JsonSchema representation of this action's result metadata */
      resultJsonSchema?: JsonSchema;
      /** Output only. List of result field metadata. */
      resultMetadata?: ResultMetadata[];
      /** Output only. Result schema as string. */
      resultSchemaAsString?: string;
    }
    interface RuntimeConfig {
      /** Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id} */
      conndSubscription?: string;
      /** Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id} */
      conndTopic?: string;
      /** Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id} */
      controlPlaneSubscription?: string;
      /** Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id} */
      controlPlaneTopic?: string;
      /** Output only. location_id of the runtime location. E.g. "us-west1". */
      locationId?: string;
      /** Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig */
      name?: string;
      /** Output only. The endpoint of the connectors runtime ingress. */
      runtimeEndpoint?: string;
      /** Output only. The Cloud Storage bucket that stores connector's schema reports. */
      schemaGcsBucket?: string;
      /** Output only. The name of the Service Directory service name. */
      serviceDirectory?: string;
      /** Output only. The state of the location. */
      state?: string;
    }
    interface RuntimeEntitySchema {
      /** Output only. Name of the entity. */
      entity?: string;
      /** Output only. List of fields in the entity. */
      fields?: Field[];
      /** Output only. JsonSchema representation of this entity's metadata */
      jsonSchema?: JsonSchema;
      /** List of operations supported by this entity */
      operations?: string[];
    }
    interface Schedule {
      /** Allows to define schedule that runs specified day of the week. */
      day?: string;
      /** Output only. Duration of the time window, set by service producer. */
      duration?: string;
      /** Time within the window to start the operations. */
      startTime?: TimeOfDay;
    }
    interface SchemaRefreshConfig {
      /** Whether to use displayName for actions in UI. */
      useActionDisplayNames?: boolean;
      /** Whether to use synchronous schema refresh. */
      useSynchronousSchemaRefresh?: boolean;
    }
    interface SearchConnectionInstance {
      /** Output only. Schema of a runtime action. */
      actionSchema?: RuntimeActionSchema;
      /** Output only. Connection details */
      connection?: Connection;
      /** Output only. Schema of a runtime entity. */
      entitySchema?: RuntimeEntitySchema;
    }
    interface SearchConnectionsResponse {
      /** A list of connectors. */
      connections?: SearchConnectionInstance[];
      /** Optional. page_token */
      nextPageToken?: string;
      /** Locations that could not be reached. */
      unreachable?: string[];
    }
    interface Secret {
      /** The resource name of the secret version in the format, format as: `projects/*‍/secrets/*‍/versions/*`. */
      secretVersion?: string;
    }
    interface SetIamPolicyRequest {
      /** REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them. */
      policy?: Policy;
      /** OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"` */
      updateMask?: string;
    }
    interface Settings {
      /** Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings} */
      name?: string;
      /** Output only. Flag indicates if user is in PayG model */
      payg?: boolean;
      /** Output only. Tenant project id of the consumer project. */
      tenantProjectId?: string;
      /** Optional. Flag indicates whether vpc-sc is enabled. */
      vpcsc?: boolean;
    }
    interface SloEligibility {
      /** Whether an instance is eligible or ineligible. */
      eligible?: boolean;
      /** User-defined reason for the current value of instance eligibility. Usually, this can be directly mapped to the internal state. An empty reason is allowed. */
      reason?: string;
    }
    interface SloMetadata {
      /** Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch. */
      nodes?: NodeSloMetadata[];
      /** Optional. Multiple per-instance SLI eligibilities which apply for individual SLIs. */
      perSliEligibility?: PerSliSloEligibility;
      /** Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty. */
      tier?: string;
    }
    interface Source {
      /** Field identifier. For example config variable name. */
      fieldId?: string;
      /** Type of the source. */
      sourceType?: string;
    }
    interface SshPublicKey {
      /** Format of SSH Client cert. */
      certType?: string;
      /** SSH Client Cert. It should contain both public and private key. */
      sshClientCert?: Secret;
      /** Password (passphrase) for ssh client certificate if it has one. */
      sshClientCertPass?: Secret;
      /** The user account used to authenticate. */
      username?: string;
    }
    interface SslConfig {
      /** Optional. Additional SSL related field values */
      additionalVariables?: ConfigVariable[];
      /** Optional. Client Certificate */
      clientCertificate?: Secret;
      /** Optional. Type of Client Cert (PEM/JKS/.. etc.) */
      clientCertType?: string;
      /** Optional. Client Private Key */
      clientPrivateKey?: Secret;
      /** Optional. Secret containing the passphrase protecting the Client Private Key */
      clientPrivateKeyPass?: Secret;
      /** Optional. Private Server Certificate. Needs to be specified if trust model is `PRIVATE`. */
      privateServerCertificate?: Secret;
      /** Optional. Type of Server Cert (PEM/JKS/.. etc.) */
      serverCertType?: string;
      /** Optional. Trust Model of the SSL connection */
      trustModel?: string;
      /** Optional. Controls the ssl type for the given connector version. */
      type?: string;
      /** Optional. Bool for enabling SSL */
      useSsl?: boolean;
    }
    interface SslConfigTemplate {
      /** Any additional fields that need to be rendered */
      additionalVariables?: ConfigVariableTemplate[];
      /** List of supported Client Cert Types */
      clientCertType?: string[];
      /** Boolean for determining if the connector version mandates TLS. */
      isTlsMandatory?: boolean;
      /** List of supported Server Cert Types */
      serverCertType?: string[];
      /** Controls the ssl type for the given connector version */
      sslType?: string;
    }
    interface StandardAction {
      /** Name of the standard action. */
      name?: string;
    }
    interface StandardEntity {
      /** Name of the standard entity. */
      name?: string;
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface SupportedRuntimeFeatures {
      /** Specifies if the connector supports action apis like 'executeAction'. */
      actionApis?: boolean;
      /** Specifies if the connector supports entity apis like 'createEntity'. */
      entityApis?: boolean;
      /** Specifies if the connector supports 'ExecuteSqlQuery' operation. */
      sqlQuery?: boolean;
    }
    interface TestIamPermissionsRequest {
      /** The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions). */
      permissions?: string[];
    }
    interface TestIamPermissionsResponse {
      /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
      permissions?: string[];
    }
    interface TimeOfDay {
      /** Hours of a day in 24 hour format. Must be greater than or equal to 0 and typically must be less than or equal to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time. */
      hours?: number;
      /** Minutes of an hour. Must be greater than or equal to 0 and less than or equal to 59. */
      minutes?: number;
      /** Fractions of seconds, in nanoseconds. Must be greater than or equal to 0 and less than or equal to 999,999,999. */
      nanos?: number;
      /** Seconds of a minute. Must be greater than or equal to 0 and typically must be less than or equal to 59. An API may allow the value 60 if it allows leap-seconds. */
      seconds?: number;
    }
    interface TrafficShapingConfig {
      /** Required. * The duration over which the API call quota limits are calculated. This duration is used to define the time window for evaluating if the number of API calls made by a user is within the allowed quota limits. For example: - To define a quota sampled over 16 seconds, set `seconds` to 16 - To define a quota sampled over 5 minutes, set `seconds` to 300 (5 * 60) - To define a quota sampled over 1 day, set `seconds` to 86400 (24 * 60 * 60) and so on. It is important to note that this duration is not the time the quota is valid for, but rather the time window over which the quota is evaluated. For example, if the quota is 100 calls per 10 seconds, then this duration field would be set to 10 seconds. */
      duration?: string;
      /** Required. Maximum number of api calls allowed. */
      quotaLimit?: string;
    }
    interface UpdatePolicy {
      /** Optional. Relative scheduling channel applied to resource. */
      channel?: string;
      /** Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one. */
      denyMaintenancePeriods?: DenyMaintenancePeriod[];
      /** Optional. Maintenance window that is applied to resources covered by this policy. */
      window?: MaintenanceWindow;
    }
    interface UserPassword {
      /** Secret version reference containing the password. */
      password?: Secret;
      /** Username. */
      username?: string;
    }
    interface ValidateCustomConnectorSpecRequest {
      /** Required. Service account to access the spec from Google Cloud Storage. */
      serviceAccount?: string;
      /** Required. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///` */
      specLocation?: string;
      /** Required. Spec type of the custom connector spec. */
      specType?: string;
    }
    interface ValidateCustomConnectorSpecResponse {
      /** Error message. The spec is valid if the error message is empty. */
      errorMessage?: string;
    }
    interface WebhookData {
      /** Output only. Additional webhook related field values. */
      additionalVariables?: ConfigVariable[];
      /** Output only. Timestamp when the webhook was created. */
      createTime?: string;
      /** Output only. ID to uniquely identify webhook. */
      id?: string;
      /** Output only. Name of the Webhook */
      name?: string;
      /** Output only. Next webhook refresh time. Will be null if refresh is not supported. */
      nextRefreshTime?: string;
      /** Output only. Timestamp when the webhook was last updated. */
      updateTime?: string;
    }
    interface WebhookSubscriptions {
      /** Output only. Webhook data. */
      webhookData?: WebhookData[];
    }
    interface WeeklyCycle {
      /** User can specify multiple windows in a week. Minimum of 1 window. */
      schedule?: Schedule[];
    }
    interface WithdrawCustomConnectorVersionRequest {}
    interface ConnectionSchemaMetadataResource {
      /** Get action. */
      getAction(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Required. Id of the action. */
        actionId?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Get entity type. */
      getEntityType(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Id of the entity type. */
        entityId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** List actions. */
      listActions(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. Filter Wildcards are not supported in the filter currently. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name format. projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. If unspecified, at most 50 actions will be returned. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Specifies which fields are returned in response. Defaults to BASIC view. */
        view?: string;
      }): Request<ListActionsResponse>;
      /** List entity types. */
      listEntityTypes(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. Filter Wildcards are not supported in the filter currently. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. If unspecified, at most 50 entity types will be returned. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Specifies which fields are returned in response. Defaults to BASIC view. */
        view?: string;
      }): Request<ListEntityTypesResponse>;
      /** Refresh runtime schema of a connection. */
      refresh(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RefreshConnectionSchemaMetadataRequest;
      }): Request<Operation>;
      refresh(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RefreshConnectionSchemaMetadataRequest,
      ): Request<Operation>;
    }
    interface EventSubscriptionsResource {
      /** Creates a new EventSubscription in a given project,location and connection. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource. */
        eventSubscriptionId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Parent resource of the EventSubscription, of the form: `projects/*‍/locations/*‍/connections/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: EventSubscription;
      }): Request<Operation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource. */
          eventSubscriptionId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Parent resource of the EventSubscription, of the form: `projects/*‍/locations/*‍/connections/*` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: EventSubscription,
      ): Request<Operation>;
      /** Deletes a single EventSubscription. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventsubscriptions/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Gets details of a single EventSubscription. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventSubscriptions/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<EventSubscription>;
      /** List EventSubscriptions in a given project,location and connection. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Order by parameters. */
        orderBy?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the EventSubscription, of the form: `projects/*‍/locations/*‍/connections/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListEventSubscriptionsResponse>;
      /** Updates the parameters of a single EventSubscription. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The list of fields to update. Fields are specified relative to the Subscription. A field will be overwritten if it is in the mask. You can modify only the fields listed below. To update the EventSubscription details: * `serviceAccount` */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: EventSubscription;
      }): Request<Operation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The list of fields to update. Fields are specified relative to the Subscription. A field will be overwritten if it is in the mask. You can modify only the fields listed below. To update the EventSubscription details: * `serviceAccount` */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: EventSubscription,
      ): Request<Operation>;
      /** RetryEventSubscription retries the registration of Subscription. */
      retry(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventSubscriptions/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RetryEventSubscriptionRequest;
      }): Request<Operation>;
      retry(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*‍/eventSubscriptions/*` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RetryEventSubscriptionRequest,
      ): Request<Operation>;
    }
    interface RuntimeActionSchemasResource {
      /** List schema of a runtime actions filtered by action name. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. Filter Format: action="{actionId}" Only action field is supported with literal equality operator. Accepted filter example: action="CancelOrder" Wildcards are not supported in the filter currently. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of RuntimeActionSchema Format: projects/{project}/locations/{location}/connections/{connection} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Optional. Flag to indicate if schema should be returned as string or not */
        schemaAsString?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListRuntimeActionSchemasResponse>;
    }
    interface RuntimeEntitySchemasResource {
      /** List schema of a runtime entities filtered by entity name. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. Filter Format: entity="{entityId}" Only entity field is supported with literal equality operator. Accepted filter example: entity="Order" Wildcards are not supported in the filter currently. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of RuntimeEntitySchema Format: projects/{project}/locations/{location}/connections/{connection} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListRuntimeEntitySchemasResponse>;
    }
    interface ConnectionsResource {
      /** Creates a new Connection in a given project and location. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource. */
        connectionId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Connection;
      }): Request<Operation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource. */
          connectionId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Connection,
      ): Request<Operation>;
      /** Deletes a single Connection. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Gets details of a single Connection. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Specifies which fields of the Connection are returned in the response. Defaults to `BASIC` view. */
        view?: string;
      }): Request<Connection>;
      /** Gets schema metadata of a connection. SchemaMetadata is a singleton resource for each connection. */
      getConnectionSchemaMetadata(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Connection name Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ConnectionSchemaMetadata>;
      /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
      getIamPolicy(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
        'options.requestedPolicyVersion'?: number;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
        resource: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Policy>;
      /** Lists Connections in a given project and location. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Order by parameters. */
        orderBy?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Specifies which fields of the Connection are returned in the response. Defaults to `BASIC` view. */
        view?: string;
      }): Request<ListConnectionsResponse>;
      /** ListenEvent listens to the event. */
      listenEvent(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Resource path for request. */
        resourcePath: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ListenEventRequest;
      }): Request<{}>;
      listenEvent(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. Resource path for request. */
          resourcePath: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ListenEventRequest,
      ): Request<{}>;
      /** Updates the parameters of a single Connection. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. You can modify only the fields listed below. To lock/unlock a connection: * `lock_config` To suspend/resume a connection: * `suspended` To update the connection details: * `description` * `labels` * `connector_version` * `config_variables` * `auth_config` * `destination_configs` * `node_config` * `log_config` * `ssl_config` * `eventing_enablement_type` * `eventing_config` * `auth_override_enabled` */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Connection;
      }): Request<Operation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. You can modify only the fields listed below. To lock/unlock a connection: * `lock_config` To suspend/resume a connection: * `suspended` To update the connection details: * `description` * `labels` * `connector_version` * `config_variables` * `auth_config` * `destination_configs` * `node_config` * `log_config` * `ssl_config` * `eventing_enablement_type` * `eventing_config` * `auth_override_enabled` */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Connection,
      ): Request<Operation>;
      /** RepaiEventing tries to repair eventing related event subscriptions. */
      repairEventing(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RepairEventingRequest;
      }): Request<Operation>;
      repairEventing(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the form: `projects/*‍/locations/*‍/connections/*` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RepairEventingRequest,
      ): Request<Operation>;
      /** Returns Top matching Connections for a given query. */
      search(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Parent resource of the Connection, of the form: `projects/*‍/locations/*‍/connections` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The number of top matching connectors to return */
        pageSize?: number;
        /** Optional. page_token */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The query against which the search needs to be done. */
        query?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<SearchConnectionsResponse>;
      /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetIamPolicyRequest,
      ): Request<Policy>;
      /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TestIamPermissionsRequest,
      ): Request<TestIamPermissionsResponse>;
      connectionSchemaMetadata: ConnectionSchemaMetadataResource;
      eventSubscriptions: EventSubscriptionsResource;
      runtimeActionSchemas: RuntimeActionSchemasResource;
      runtimeEntitySchemas: RuntimeEntitySchemasResource;
    }
    interface CustomConnectorVersionsResource {
      /** Deletes a single CustomConnectorVersion. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Deprecates a single CustomConnectorVersion. */
      deprecate(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: DeprecateCustomConnectorVersionRequest;
      }): Request<Operation>;
      deprecate(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: DeprecateCustomConnectorVersionRequest,
      ): Request<Operation>;
      /** Publish request for the CustomConnectorVersion. Once approved, the CustomConnectorVersion will be published as PartnerConnector. */
      publish(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: PublishCustomConnectorVersionRequest;
      }): Request<Operation>;
      publish(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: PublishCustomConnectorVersionRequest,
      ): Request<Operation>;
      /** Withdraw the publish request for the CustomConnectorVersion. This can only be used before the CustomConnectorVersion is published. */
      withdraw(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: WithdrawCustomConnectorVersionRequest;
      }): Request<Operation>;
      withdraw(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}` */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: WithdrawCustomConnectorVersionRequest,
      ): Request<Operation>;
    }
    interface CustomConnectorsResource {
      /** Validates a Custom Connector Spec. */
      validateCustomConnectorSpec(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Location at which the custom connector is being created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ValidateCustomConnectorSpecRequest;
      }): Request<ValidateCustomConnectorSpecResponse>;
      validateCustomConnectorSpec(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Location at which the custom connector is being created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ValidateCustomConnectorSpecRequest,
      ): Request<ValidateCustomConnectorSpecResponse>;
      customConnectorVersions: CustomConnectorVersionsResource;
    }
    interface EndpointAttachmentsResource {
      /** Creates a new EndpointAttachment in a given project and location. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Identifier to assign to the EndpointAttachment. Must be unique within scope of the parent resource. */
        endpointAttachmentId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Parent resource of the EndpointAttachment, of the form: `projects/*‍/locations/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: EndpointAttachment;
      }): Request<Operation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. Identifier to assign to the EndpointAttachment. Must be unique within scope of the parent resource. */
          endpointAttachmentId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Parent resource of the EndpointAttachment, of the form: `projects/*‍/locations/*` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: EndpointAttachment,
      ): Request<Operation>;
      /** Deletes a single EndpointAttachment. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/endpointAttachments/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Gets details of a single EndpointAttachment. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/endpointAttachments/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Optional. Specifies which fields of the EndpointAttachment are returned in the response. Defaults to `ENDPOINT_ATTACHMENT_VIEW_BASIC` view. */
        view?: string;
      }): Request<EndpointAttachment>;
      /** List EndpointAttachments in a given project */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Order by parameters. */
        orderBy?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource od the EndpointAttachment, of the form: `projects/*‍/locations/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Optional. Specifies which fields of the EndpointAttachment are returned in the response. Defaults to `ENDPOINT_ATTACHMENT_VIEW_BASIC` view. */
        view?: string;
      }): Request<ListEndpointAttachmentsResponse>;
      /** Updates the parameters of a single EndpointAttachment. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The list of fields to update. Fields are specified relative to the endpointAttachment. A field will be overwritten if it is in the mask. You can modify only the fields listed below. To update the endpointAttachment details: * `description` * `labels` */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: EndpointAttachment;
      }): Request<Operation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Output only. Resource name of the Endpoint Attachment. Format: projects/{project}/locations/{location}/endpointAttachments/{endpoint_attachment} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The list of fields to update. Fields are specified relative to the endpointAttachment. A field will be overwritten if it is in the mask. You can modify only the fields listed below. To update the endpointAttachment details: * `description` * `labels` */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: EndpointAttachment,
      ): Request<Operation>;
    }
    interface CustomConnectorVersionsResource {
      /** Creates a new CustomConnectorVersion in a given project and location. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Identifier to assign to the CreateCustomConnectorVersion. Must be unique within scope of the parent resource. */
        customConnectorVersionId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Parent resource of the CreateCustomConnector, of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CustomConnectorVersion;
      }): Request<Operation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. Identifier to assign to the CreateCustomConnectorVersion. Must be unique within scope of the parent resource. */
          customConnectorVersionId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Parent resource of the CreateCustomConnector, of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CustomConnectorVersion,
      ): Request<Operation>;
      /** Gets details of a single CustomConnectorVersion. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/{location}/customConnectors/*‍/customConnectorVersions/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<CustomConnectorVersion>;
      /** List CustomConnectorVersions in a given project */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the connectors, of the form: `projects/*‍/locations/{location}/customConnectors/*‍/customConnectorVersions/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListCustomConnectorVersionsResponse>;
    }
    interface CustomConnectorsResource {
      /** Creates a new CustomConnector in a given project and location. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Identifier to assign to the CreateCustomConnector. Must be unique within scope of the parent resource. */
        customConnectorId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Parent resource of the CreateCustomConnector, of the form: `projects/{project}/locations/*` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CustomConnector;
      }): Request<Operation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Required. Identifier to assign to the CreateCustomConnector. Must be unique within scope of the parent resource. */
          customConnectorId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Parent resource of the CreateCustomConnector, of the form: `projects/{project}/locations/*` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CustomConnector,
      ): Request<Operation>;
      /** Deletes a single CustomConnector. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Optional. If set to true, any customConnectorVersion which is a child resource will also be deleted. https://aip.dev/135#cascading-delete */
        force?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/{project}/locations/{location}/customConnectors/{connector}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Gets details of a single CustomConnector. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/customConnectors/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<CustomConnector>;
      /** List CustomConnectorVersions in a given project */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter string. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the custom connectors, of the form: `projects/*‍/locations/*` Only global location is supported for CustomConnector resource. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListCustomConnectorsResponse>;
      /** Updates the parameters of a CustomConnector. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Identifier. Resource name of the CustomConnector. Format: projects/{project}/locations/{location}/customConnectors/{connector} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Field mask is used to specify the fields to be overwritten in the Connector resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. Set the mask as "*" for full replacement, which means all fields will be overwritten. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CustomConnector;
      }): Request<Operation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Identifier. Resource name of the CustomConnector. Format: projects/{project}/locations/{location}/customConnectors/{connector} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. Field mask is used to specify the fields to be overwritten in the Connector resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. Set the mask as "*" for full replacement, which means all fields will be overwritten. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CustomConnector,
      ): Request<Operation>;
      customConnectorVersions: CustomConnectorVersionsResource;
    }
    interface ManagedZonesResource {
      /** Creates a new ManagedZone in a given project and location. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Identifier to assign to the ManagedZone. Must be unique within scope of the parent resource. */
        managedZoneId?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. Parent resource of the ManagedZone, of the form: `projects/*‍/locations/global` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ManagedZone;
      }): Request<Operation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Identifier to assign to the ManagedZone. Must be unique within scope of the parent resource. */
          managedZoneId?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. Parent resource of the ManagedZone, of the form: `projects/*‍/locations/global` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ManagedZone,
      ): Request<Operation>;
      /** Deletes a single ManagedZone. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/global/managedZones/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Gets details of a single ManagedZone. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/global/managedZones/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ManagedZone>;
      /** List ManagedZones in a given project */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Order by parameters. */
        orderBy?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the Managed Zone, of the form: `projects/*‍/locations/global` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListManagedZonesResponse>;
      /** Updates the parameters of a single ManagedZone. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The list of fields to update. Fields are specified relative to the managedZone. A field will be overwritten if it is in the mask. You can modify only the fields listed below. To update the managedZone details: * `description` * `labels` * `target_project` * `target_network` */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ManagedZone;
      }): Request<Operation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Output only. Resource name of the Managed Zone. Format: projects/{project}/locations/global/managedZones/{managed_zone} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The list of fields to update. Fields are specified relative to the managedZone. A field will be overwritten if it is in the mask. You can modify only the fields listed below. To update the managedZone details: * `description` * `labels` * `target_project` * `target_network` */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ManagedZone,
      ): Request<Operation>;
    }
    interface GlobalResource {
      /** GetGlobalSettings gets settings of a project. GlobalSettings is a singleton resource. */
      getSettings(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The resource name of the Settings. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Settings>;
      /** Update the global settings of a project. */
      updateSettings(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The list of fields to update. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Settings;
      }): Request<Operation>;
      updateSettings(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Output only. Resource name of the Connection. Format: projects/{project}/locations/global/settings} */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The list of fields to update. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Settings,
      ): Request<Operation>;
      customConnectors: CustomConnectorsResource;
      managedZones: ManagedZonesResource;
    }
    interface OperationsResource {
      /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
      cancel(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be cancelled. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CancelOperationRequest;
      }): Request<{}>;
      cancel(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** The name of the operation resource to be cancelled. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CancelOperationRequest,
      ): Request<{}>;
      /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be deleted. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The standard list filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation's parent resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The standard list page size. */
        pageSize?: number;
        /** The standard list page token. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListOperationsResponse>;
    }
    interface EventtypesResource {
      /** Gets details of a single event type. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*‍/eventtypes/*` Only global location is supported for EventType resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<EventType>;
      /** Lists Event Types in a given Connector Version. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the connectors, of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*` Only global location is supported for EventType resource. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListEventTypesResponse>;
    }
    interface VersionsResource {
      /** fetch and return the list of auth config variables required to override the connection backend auth. */
      fetchAuthSchema(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Parent resource of the Connector Version, of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Optional. View of the AuthSchema. The default value is BASIC. */
        view?: string;
      }): Request<FetchAuthSchemaResponse>;
      /** Gets details of a single connector version. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*‍/versions/*` Only global location is supported for ConnectorVersion resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Specifies which fields of the ConnectorVersion are returned in the response. Defaults to `CUSTOMER` view. */
        view?: string;
      }): Request<ConnectorVersion>;
      /** Lists Connector Versions in a given project and location. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the connectors, of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*` Only global location is supported for ConnectorVersion resource. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Specifies which fields of the ConnectorVersion are returned in the response. Defaults to `BASIC` view. */
        view?: string;
      }): Request<ListConnectorVersionsResponse>;
      eventtypes: EventtypesResource;
    }
    interface ConnectorsResource {
      /** Gets details of a single Connector. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*‍/connectors/*` Only global location is supported for Connector resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Connector>;
      /** Lists Connectors in a given project and location. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Filter string. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the connectors, of the form: `projects/*‍/locations/*‍/providers/*` Only global location is supported for Connector resource. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListConnectorsResponse>;
      versions: VersionsResource;
    }
    interface ProvidersResource {
      /** Gets details of a provider. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/providers/*` Only global location is supported for Provider resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Provider>;
      /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
      getIamPolicy(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
        'options.requestedPolicyVersion'?: number;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
        resource: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Policy>;
      /** Lists Providers in a given project and location. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Page size. */
        pageSize?: number;
        /** Page token. */
        pageToken?: string;
        /** Required. Parent resource of the API, of the form: `projects/*‍/locations/*` Only global location is supported for Provider resource. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListProvidersResponse>;
      /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetIamPolicyRequest,
      ): Request<Policy>;
      /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TestIamPermissionsRequest,
      ): Request<TestIamPermissionsResponse>;
      connectors: ConnectorsResource;
    }
    interface LocationsResource {
      /** Gets information about a location. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Resource name for the location. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Location>;
      /** GetRegionalSettings gets settings of a region. RegionalSettings is a singleton resource. */
      getRegionalSettings(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The resource name of the Regional Settings. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<RegionalSettings>;
      /** Gets the runtimeConfig of a location. RuntimeConfig is a singleton resource for each location. */
      getRuntimeConfig(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the form: `projects/*‍/locations/*‍/runtimeConfig` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<RuntimeConfig>;
      /** Lists information about the supported locations for this service. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160). */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The resource that owns the locations collection, if applicable. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of results to return. If not set, the service selects a default. */
        pageSize?: number;
        /** A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListLocationsResponse>;
      /** Update the settings of a region. */
      updateRegionalSettings(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The list of fields to update. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RegionalSettings;
      }): Request<Operation>;
      updateRegionalSettings(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/regionalSettings */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The list of fields to update. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RegionalSettings,
      ): Request<Operation>;
      connections: ConnectionsResource;
      customConnectors: CustomConnectorsResource;
      endpointAttachments: EndpointAttachmentsResource;
      global: GlobalResource;
      operations: OperationsResource;
      providers: ProvidersResource;
    }
    interface ProjectsResource {
      locations: LocationsResource;
    }

    const projects: ProjectsResource;
  }
}
