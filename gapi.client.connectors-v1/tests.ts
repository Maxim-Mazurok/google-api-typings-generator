/* This is stub file for gapi.client.connectors-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250521

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://connectors.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.connectors */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.connectors.projects.locations.get({
      name: 'Test string',
    });
    /** GetRegionalSettings gets settings of a region. RegionalSettings is a singleton resource. */
    await gapi.client.connectors.projects.locations.getRegionalSettings({
      name: 'Test string',
    });
    /** Gets the runtimeConfig of a location. RuntimeConfig is a singleton resource for each location. */
    await gapi.client.connectors.projects.locations.getRuntimeConfig({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.connectors.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Update the settings of a region. */
    await gapi.client.connectors.projects.locations.updateRegionalSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        encryptionConfig: {
          encryptionType: 'Test string',
          kmsKeyName: 'Test string',
        },
        name: 'Test string',
        networkConfig: {
          egressIps: ['Test string'],
          egressMode: 'Test string',
        },
        provisioned: true,
      },
    );
    /** Creates a new Connection in a given project and location. */
    await gapi.client.connectors.projects.locations.connections.create(
      {
        connectionId: 'Test string',
        parent: 'Test string',
      },
      {
        asyncOperationsEnabled: true,
        authConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
            enablePkce: true,
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        authOverrideEnabled: true,
        billingConfig: {
          billingCategory: 'Test string',
        },
        configVariables: [
          {
            boolValue: true,
            encryptionKeyValue: {
              kmsKeyName: 'Test string',
              type: 'Test string',
            },
            intValue: 'Test string',
            key: 'Test string',
            secretValue: {
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        ],
        connectionRevision: 'Test string',
        connectorVersion: 'Test string',
        connectorVersionInfraConfig: {
          connectionRatelimitWindowSeconds: 'Test string',
          deploymentModel: 'Test string',
          deploymentModelMigrationState: 'Test string',
          hpaConfig: {
            cpuUtilizationThreshold: 'Test string',
            memoryUtilizationThreshold: 'Test string',
          },
          internalclientRatelimitThreshold: 'Test string',
          maxInstanceRequestConcurrency: 42,
          ratelimitThreshold: 'Test string',
          resourceLimits: {
            cpu: 'Test string',
            memory: 'Test string',
          },
          resourceRequests: {
            cpu: 'Test string',
            memory: 'Test string',
          },
          sharedDeployment: 'Test string',
          tlsMigrationState: 'Test string',
        },
        connectorVersionLaunchStage: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        destinationConfigs: [
          {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
        ],
        envoyImageLocation: 'Test string',
        euaOauthAuthConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
            enablePkce: true,
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        eventingConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authConfig: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            authKey: 'Test string',
            authType: 'Test string',
            oauth2AuthCodeFlow: {
              authCode: 'Test string',
              authUri: 'Test string',
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
              enablePkce: true,
              pkceVerifier: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2AuthCodeFlowGoogleManaged: {
              authCode: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2ClientCredentials: {
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
            },
            oauth2JwtBearer: {
              clientKey: {
                secretVersion: 'Test string',
              },
              jwtClaims: {
                audience: 'Test string',
                issuer: 'Test string',
                subject: 'Test string',
              },
            },
            sshPublicKey: {
              certType: 'Test string',
              sshClientCert: {
                secretVersion: 'Test string',
              },
              sshClientCertPass: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
            userPassword: {
              password: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
          },
          deadLetterConfig: {
            projectId: 'Test string',
            topic: 'Test string',
          },
          enrichmentConfig: {
            appendAcl: true,
          },
          enrichmentEnabled: true,
          eventsListenerIngressEndpoint: 'Test string',
          listenerAuthConfig: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            authKey: 'Test string',
            authType: 'Test string',
            oauth2AuthCodeFlow: {
              authCode: 'Test string',
              authUri: 'Test string',
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
              enablePkce: true,
              pkceVerifier: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2AuthCodeFlowGoogleManaged: {
              authCode: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2ClientCredentials: {
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
            },
            oauth2JwtBearer: {
              clientKey: {
                secretVersion: 'Test string',
              },
              jwtClaims: {
                audience: 'Test string',
                issuer: 'Test string',
                subject: 'Test string',
              },
            },
            sshPublicKey: {
              certType: 'Test string',
              sshClientCert: {
                secretVersion: 'Test string',
              },
              sshClientCertPass: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
            userPassword: {
              password: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
          },
          privateConnectivityEnabled: true,
          proxyDestinationConfig: {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
          registrationDestinationConfig: {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
          sslConfig: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            clientCertificate: {
              secretVersion: 'Test string',
            },
            clientCertType: 'Test string',
            clientPrivateKey: {
              secretVersion: 'Test string',
            },
            clientPrivateKeyPass: {
              secretVersion: 'Test string',
            },
            privateServerCertificate: {
              secretVersion: 'Test string',
            },
            serverCertType: 'Test string',
            trustModel: 'Test string',
            type: 'Test string',
            useSsl: true,
          },
        },
        eventingEnablementType: 'Test string',
        eventingRuntimeData: {
          eventsListenerEndpoint: 'Test string',
          eventsListenerPscSa: 'Test string',
          status: {
            description: 'Test string',
            state: 'Test string',
          },
          webhookData: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            createTime: 'Test string',
            id: 'Test string',
            name: 'Test string',
            nextRefreshTime: 'Test string',
            updateTime: 'Test string',
          },
          webhookSubscriptions: {
            webhookData: [
              {
                additionalVariables: [
                  {
                    boolValue: true,
                    encryptionKeyValue: {
                      kmsKeyName: 'Test string',
                      type: 'Test string',
                    },
                    intValue: 'Test string',
                    key: 'Test string',
                    secretValue: {
                      secretVersion: 'Test string',
                    },
                    stringValue: 'Test string',
                  },
                ],
                createTime: 'Test string',
                id: 'Test string',
                name: 'Test string',
                nextRefreshTime: 'Test string',
                updateTime: 'Test string',
              },
            ],
          },
        },
        fallbackOnAdminCredentials: true,
        host: 'Test string',
        imageLocation: 'Test string',
        isTrustedTester: true,
        labels: {
          A: 'Test string',
        },
        lockConfig: {
          locked: true,
          reason: 'Test string',
        },
        logConfig: {
          enabled: true,
          level: 'Test string',
        },
        name: 'Test string',
        nodeConfig: {
          maxNodeCount: 42,
          minNodeCount: 42,
        },
        serviceAccount: 'Test string',
        serviceDirectory: 'Test string',
        sslConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          clientCertificate: {
            secretVersion: 'Test string',
          },
          clientCertType: 'Test string',
          clientPrivateKey: {
            secretVersion: 'Test string',
          },
          clientPrivateKeyPass: {
            secretVersion: 'Test string',
          },
          privateServerCertificate: {
            secretVersion: 'Test string',
          },
          serverCertType: 'Test string',
          trustModel: 'Test string',
          type: 'Test string',
          useSsl: true,
        },
        status: {
          description: 'Test string',
          state: 'Test string',
          status: 'Test string',
        },
        subscriptionType: 'Test string',
        suspended: true,
        tlsServiceDirectory: 'Test string',
        trafficShapingConfigs: [
          {
            duration: 'Test string',
            quotaLimit: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** Deletes a single Connection. */
    await gapi.client.connectors.projects.locations.connections.delete({
      name: 'Test string',
    });
    /** Gets details of a single Connection. */
    await gapi.client.connectors.projects.locations.connections.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets schema metadata of a connection. SchemaMetadata is a singleton resource for each connection. */
    await gapi.client.connectors.projects.locations.connections.getConnectionSchemaMetadata(
      {
        name: 'Test string',
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.connectors.projects.locations.connections.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists Connections in a given project and location. */
    await gapi.client.connectors.projects.locations.connections.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** ListenEvent listens to the event. */
    await gapi.client.connectors.projects.locations.connections.listenEvent(
      {
        resourcePath: 'Test string',
      },
      {
        payload: {
          A: 42,
        },
      },
    );
    /** Updates the parameters of a single Connection. */
    await gapi.client.connectors.projects.locations.connections.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        asyncOperationsEnabled: true,
        authConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
            enablePkce: true,
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        authOverrideEnabled: true,
        billingConfig: {
          billingCategory: 'Test string',
        },
        configVariables: [
          {
            boolValue: true,
            encryptionKeyValue: {
              kmsKeyName: 'Test string',
              type: 'Test string',
            },
            intValue: 'Test string',
            key: 'Test string',
            secretValue: {
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        ],
        connectionRevision: 'Test string',
        connectorVersion: 'Test string',
        connectorVersionInfraConfig: {
          connectionRatelimitWindowSeconds: 'Test string',
          deploymentModel: 'Test string',
          deploymentModelMigrationState: 'Test string',
          hpaConfig: {
            cpuUtilizationThreshold: 'Test string',
            memoryUtilizationThreshold: 'Test string',
          },
          internalclientRatelimitThreshold: 'Test string',
          maxInstanceRequestConcurrency: 42,
          ratelimitThreshold: 'Test string',
          resourceLimits: {
            cpu: 'Test string',
            memory: 'Test string',
          },
          resourceRequests: {
            cpu: 'Test string',
            memory: 'Test string',
          },
          sharedDeployment: 'Test string',
          tlsMigrationState: 'Test string',
        },
        connectorVersionLaunchStage: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        destinationConfigs: [
          {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
        ],
        envoyImageLocation: 'Test string',
        euaOauthAuthConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
            enablePkce: true,
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        eventingConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authConfig: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            authKey: 'Test string',
            authType: 'Test string',
            oauth2AuthCodeFlow: {
              authCode: 'Test string',
              authUri: 'Test string',
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
              enablePkce: true,
              pkceVerifier: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2AuthCodeFlowGoogleManaged: {
              authCode: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2ClientCredentials: {
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
            },
            oauth2JwtBearer: {
              clientKey: {
                secretVersion: 'Test string',
              },
              jwtClaims: {
                audience: 'Test string',
                issuer: 'Test string',
                subject: 'Test string',
              },
            },
            sshPublicKey: {
              certType: 'Test string',
              sshClientCert: {
                secretVersion: 'Test string',
              },
              sshClientCertPass: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
            userPassword: {
              password: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
          },
          deadLetterConfig: {
            projectId: 'Test string',
            topic: 'Test string',
          },
          enrichmentConfig: {
            appendAcl: true,
          },
          enrichmentEnabled: true,
          eventsListenerIngressEndpoint: 'Test string',
          listenerAuthConfig: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            authKey: 'Test string',
            authType: 'Test string',
            oauth2AuthCodeFlow: {
              authCode: 'Test string',
              authUri: 'Test string',
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
              enablePkce: true,
              pkceVerifier: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2AuthCodeFlowGoogleManaged: {
              authCode: 'Test string',
              redirectUri: 'Test string',
              scopes: ['Test string'],
            },
            oauth2ClientCredentials: {
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
            },
            oauth2JwtBearer: {
              clientKey: {
                secretVersion: 'Test string',
              },
              jwtClaims: {
                audience: 'Test string',
                issuer: 'Test string',
                subject: 'Test string',
              },
            },
            sshPublicKey: {
              certType: 'Test string',
              sshClientCert: {
                secretVersion: 'Test string',
              },
              sshClientCertPass: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
            userPassword: {
              password: {
                secretVersion: 'Test string',
              },
              username: 'Test string',
            },
          },
          privateConnectivityEnabled: true,
          proxyDestinationConfig: {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
          registrationDestinationConfig: {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
          sslConfig: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            clientCertificate: {
              secretVersion: 'Test string',
            },
            clientCertType: 'Test string',
            clientPrivateKey: {
              secretVersion: 'Test string',
            },
            clientPrivateKeyPass: {
              secretVersion: 'Test string',
            },
            privateServerCertificate: {
              secretVersion: 'Test string',
            },
            serverCertType: 'Test string',
            trustModel: 'Test string',
            type: 'Test string',
            useSsl: true,
          },
        },
        eventingEnablementType: 'Test string',
        eventingRuntimeData: {
          eventsListenerEndpoint: 'Test string',
          eventsListenerPscSa: 'Test string',
          status: {
            description: 'Test string',
            state: 'Test string',
          },
          webhookData: {
            additionalVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            createTime: 'Test string',
            id: 'Test string',
            name: 'Test string',
            nextRefreshTime: 'Test string',
            updateTime: 'Test string',
          },
          webhookSubscriptions: {
            webhookData: [
              {
                additionalVariables: [
                  {
                    boolValue: true,
                    encryptionKeyValue: {
                      kmsKeyName: 'Test string',
                      type: 'Test string',
                    },
                    intValue: 'Test string',
                    key: 'Test string',
                    secretValue: {
                      secretVersion: 'Test string',
                    },
                    stringValue: 'Test string',
                  },
                ],
                createTime: 'Test string',
                id: 'Test string',
                name: 'Test string',
                nextRefreshTime: 'Test string',
                updateTime: 'Test string',
              },
            ],
          },
        },
        fallbackOnAdminCredentials: true,
        host: 'Test string',
        imageLocation: 'Test string',
        isTrustedTester: true,
        labels: {
          A: 'Test string',
        },
        lockConfig: {
          locked: true,
          reason: 'Test string',
        },
        logConfig: {
          enabled: true,
          level: 'Test string',
        },
        name: 'Test string',
        nodeConfig: {
          maxNodeCount: 42,
          minNodeCount: 42,
        },
        serviceAccount: 'Test string',
        serviceDirectory: 'Test string',
        sslConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          clientCertificate: {
            secretVersion: 'Test string',
          },
          clientCertType: 'Test string',
          clientPrivateKey: {
            secretVersion: 'Test string',
          },
          clientPrivateKeyPass: {
            secretVersion: 'Test string',
          },
          privateServerCertificate: {
            secretVersion: 'Test string',
          },
          serverCertType: 'Test string',
          trustModel: 'Test string',
          type: 'Test string',
          useSsl: true,
        },
        status: {
          description: 'Test string',
          state: 'Test string',
          status: 'Test string',
        },
        subscriptionType: 'Test string',
        suspended: true,
        tlsServiceDirectory: 'Test string',
        trafficShapingConfigs: [
          {
            duration: 'Test string',
            quotaLimit: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** RepaiEventing tries to repair eventing related event subscriptions. */
    await gapi.client.connectors.projects.locations.connections.repairEventing(
      {
        name: 'Test string',
      },
      {},
    );
    /** Returns Top matching Connections for a given query. */
    await gapi.client.connectors.projects.locations.connections.search({
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      query: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.connectors.projects.locations.connections.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.connectors.projects.locations.connections.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Get action. */
    await gapi.client.connectors.projects.locations.connections.connectionSchemaMetadata.getAction(
      {
        actionId: 'Test string',
        name: 'Test string',
      },
    );
    /** Get entity type. */
    await gapi.client.connectors.projects.locations.connections.connectionSchemaMetadata.getEntityType(
      {
        entityId: 'Test string',
        name: 'Test string',
      },
    );
    /** List actions. */
    await gapi.client.connectors.projects.locations.connections.connectionSchemaMetadata.listActions(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        view: 'Test string',
      },
    );
    /** List entity types. */
    await gapi.client.connectors.projects.locations.connections.connectionSchemaMetadata.listEntityTypes(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        view: 'Test string',
      },
    );
    /** Refresh runtime schema of a connection. */
    await gapi.client.connectors.projects.locations.connections.connectionSchemaMetadata.refresh(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a new EndUserAuthentication in a given project,location and connection. */
    await gapi.client.connectors.projects.locations.connections.endUserAuthentications.create(
      {
        endUserAuthenticationId: 'Test string',
        parent: 'Test string',
      },
      {
        configVariables: [
          {
            boolValue: true,
            intValue: 'Test string',
            key: 'Test string',
            secretValue: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        ],
        createTime: 'Test string',
        destinationConfigs: [
          {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
        ],
        endUserAuthenticationConfig: {
          additionalVariables: [
            {
              boolValue: true,
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            enablePkce: true,
            oauthTokenData: {
              accessToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
              createTime: 'Test string',
              expiry: 'Test string',
              refreshToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
            },
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            oauthTokenData: {
              accessToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
              createTime: 'Test string',
              expiry: 'Test string',
              refreshToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
            },
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        labels: ['Test string'],
        name: 'Test string',
        notifyEndpointDestination: {
          endpoint: {
            endpointUri: 'Test string',
            headers: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
          },
          serviceAccount: 'Test string',
          type: 'Test string',
        },
        roles: ['Test string'],
        status: {
          description: 'Test string',
          state: 'Test string',
        },
        updateTime: 'Test string',
        userId: 'Test string',
      },
    );
    /** Deletes a single EndUserAuthentication. */
    await gapi.client.connectors.projects.locations.connections.endUserAuthentications.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets details of a single EndUserAuthentication. */
    await gapi.client.connectors.projects.locations.connections.endUserAuthentications.get(
      {
        name: 'Test string',
        view: 'Test string',
      },
    );
    /** List EndUserAuthentications in a given project,location and connection. */
    await gapi.client.connectors.projects.locations.connections.endUserAuthentications.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the parameters of a single EndUserAuthentication. */
    await gapi.client.connectors.projects.locations.connections.endUserAuthentications.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        configVariables: [
          {
            boolValue: true,
            intValue: 'Test string',
            key: 'Test string',
            secretValue: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        ],
        createTime: 'Test string',
        destinationConfigs: [
          {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
        ],
        endUserAuthenticationConfig: {
          additionalVariables: [
            {
              boolValue: true,
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            enablePkce: true,
            oauthTokenData: {
              accessToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
              createTime: 'Test string',
              expiry: 'Test string',
              refreshToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
            },
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            oauthTokenData: {
              accessToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
              createTime: 'Test string',
              expiry: 'Test string',
              refreshToken: {
                secretValue: 'Test string',
                secretVersion: 'Test string',
              },
            },
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretValue: 'Test string',
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        labels: ['Test string'],
        name: 'Test string',
        notifyEndpointDestination: {
          endpoint: {
            endpointUri: 'Test string',
            headers: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
          },
          serviceAccount: 'Test string',
          type: 'Test string',
        },
        roles: ['Test string'],
        status: {
          description: 'Test string',
          state: 'Test string',
        },
        updateTime: 'Test string',
        userId: 'Test string',
      },
    );
    /** Creates a new EventSubscription in a given project,location and connection. */
    await gapi.client.connectors.projects.locations.connections.eventSubscriptions.create(
      {
        eventSubscriptionId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        destinations: {
          endpoint: {
            endpointUri: 'Test string',
            headers: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
          },
          pubsub: {
            attributes: {
              A: 'Test string',
            },
            configVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            projectId: 'Test string',
            topicId: 'Test string',
          },
          serviceAccount: 'Test string',
          type: 'Test string',
        },
        eventTypeId: 'Test string',
        jms: {
          name: 'Test string',
          type: 'Test string',
        },
        name: 'Test string',
        status: {
          description: 'Test string',
          state: 'Test string',
        },
        subscriber: 'Test string',
        subscriberLink: 'Test string',
        triggerConfigVariables: [
          {
            boolValue: true,
            encryptionKeyValue: {
              kmsKeyName: 'Test string',
              type: 'Test string',
            },
            intValue: 'Test string',
            key: 'Test string',
            secretValue: {
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** Deletes a single EventSubscription. */
    await gapi.client.connectors.projects.locations.connections.eventSubscriptions.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets details of a single EventSubscription. */
    await gapi.client.connectors.projects.locations.connections.eventSubscriptions.get(
      {
        name: 'Test string',
      },
    );
    /** List EventSubscriptions in a given project,location and connection. */
    await gapi.client.connectors.projects.locations.connections.eventSubscriptions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the parameters of a single EventSubscription. */
    await gapi.client.connectors.projects.locations.connections.eventSubscriptions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        destinations: {
          endpoint: {
            endpointUri: 'Test string',
            headers: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
          },
          pubsub: {
            attributes: {
              A: 'Test string',
            },
            configVariables: [
              {
                boolValue: true,
                encryptionKeyValue: {
                  kmsKeyName: 'Test string',
                  type: 'Test string',
                },
                intValue: 'Test string',
                key: 'Test string',
                secretValue: {
                  secretVersion: 'Test string',
                },
                stringValue: 'Test string',
              },
            ],
            projectId: 'Test string',
            topicId: 'Test string',
          },
          serviceAccount: 'Test string',
          type: 'Test string',
        },
        eventTypeId: 'Test string',
        jms: {
          name: 'Test string',
          type: 'Test string',
        },
        name: 'Test string',
        status: {
          description: 'Test string',
          state: 'Test string',
        },
        subscriber: 'Test string',
        subscriberLink: 'Test string',
        triggerConfigVariables: [
          {
            boolValue: true,
            encryptionKeyValue: {
              kmsKeyName: 'Test string',
              type: 'Test string',
            },
            intValue: 'Test string',
            key: 'Test string',
            secretValue: {
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** RetryEventSubscription retries the registration of Subscription. */
    await gapi.client.connectors.projects.locations.connections.eventSubscriptions.retry(
      {
        name: 'Test string',
      },
      {},
    );
    /** List schema of a runtime actions filtered by action name. */
    await gapi.client.connectors.projects.locations.connections.runtimeActionSchemas.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        schemaAsString: true,
      },
    );
    /** List schema of a runtime entities filtered by entity name. */
    await gapi.client.connectors.projects.locations.connections.runtimeEntitySchemas.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Validates a Custom Connector Spec. */
    await gapi.client.connectors.projects.locations.customConnectors.validateCustomConnectorSpec(
      {
        parent: 'Test string',
      },
      {
        serviceAccount: 'Test string',
        specLocation: 'Test string',
        specType: 'Test string',
      },
    );
    /** Deletes a single CustomConnectorVersion. */
    await gapi.client.connectors.projects.locations.customConnectors.customConnectorVersions.delete(
      {
        name: 'Test string',
      },
    );
    /** Deprecates a single CustomConnectorVersion. */
    await gapi.client.connectors.projects.locations.customConnectors.customConnectorVersions.deprecate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Publish request for the CustomConnectorVersion. Once approved, the CustomConnectorVersion will be published as PartnerConnector. */
    await gapi.client.connectors.projects.locations.customConnectors.customConnectorVersions.publish(
      {
        name: 'Test string',
      },
      {
        partnerMetadata: {
          acceptGcpTos: true,
          additionalComments: 'Test string',
          confirmPartnerRequirements: true,
          demoUri: 'Test string',
          hasDynamicSpecUri: true,
          integrationTemplates: 'Test string',
          localSpecPath: 'Test string',
          marketplaceProduct: 'Test string',
          marketplaceProductId: 'Test string',
          marketplaceProductProjectId: 'Test string',
          marketplaceProductUri: 'Test string',
          partner: 'Test string',
          partnerConnectorDisplayName: 'Test string',
          publishRequestTime: 'Test string',
          targetApplication: 'Test string',
          targetCustomerSegment: 'Test string',
          useCases: 'Test string',
        },
      },
    );
    /** Withdraw the publish request for the CustomConnectorVersion. This can only be used before the CustomConnectorVersion is published. */
    await gapi.client.connectors.projects.locations.customConnectors.customConnectorVersions.withdraw(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a new EndpointAttachment in a given project and location. */
    await gapi.client.connectors.projects.locations.endpointAttachments.create(
      {
        endpointAttachmentId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        endpointGlobalAccess: true,
        endpointIp: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        serviceAttachment: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single EndpointAttachment. */
    await gapi.client.connectors.projects.locations.endpointAttachments.delete({
      name: 'Test string',
    });
    /** Gets details of a single EndpointAttachment. */
    await gapi.client.connectors.projects.locations.endpointAttachments.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** List EndpointAttachments in a given project */
    await gapi.client.connectors.projects.locations.endpointAttachments.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the parameters of a single EndpointAttachment. */
    await gapi.client.connectors.projects.locations.endpointAttachments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        endpointGlobalAccess: true,
        endpointIp: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        serviceAttachment: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** GetGlobalSettings gets settings of a project. GlobalSettings is a singleton resource. */
    await gapi.client.connectors.projects.locations.global.getSettings({
      name: 'Test string',
    });
    /** Update the global settings of a project. */
    await gapi.client.connectors.projects.locations.global.updateSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        name: 'Test string',
        payg: true,
        tenantProjectId: 'Test string',
        vpcsc: true,
      },
    );
    /** Creates a new CustomConnector in a given project and location. */
    await gapi.client.connectors.projects.locations.global.customConnectors.create(
      {
        customConnectorId: 'Test string',
        parent: 'Test string',
      },
      {
        activeConnectorVersions: ['Test string'],
        allConnectorVersions: ['Test string'],
        allMarketplaceVersions: ['Test string'],
        createTime: 'Test string',
        customConnectorType: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        logo: 'Test string',
        name: 'Test string',
        publishedMarketplaceVersions: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Deletes a single CustomConnector. */
    await gapi.client.connectors.projects.locations.global.customConnectors.delete(
      {
        force: true,
        name: 'Test string',
      },
    );
    /** Gets details of a single CustomConnector. */
    await gapi.client.connectors.projects.locations.global.customConnectors.get(
      {
        name: 'Test string',
      },
    );
    /** List CustomConnectorVersions in a given project */
    await gapi.client.connectors.projects.locations.global.customConnectors.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the parameters of a CustomConnector. */
    await gapi.client.connectors.projects.locations.global.customConnectors.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeConnectorVersions: ['Test string'],
        allConnectorVersions: ['Test string'],
        allMarketplaceVersions: ['Test string'],
        createTime: 'Test string',
        customConnectorType: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        logo: 'Test string',
        name: 'Test string',
        publishedMarketplaceVersions: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Creates a new CustomConnectorVersion in a given project and location. */
    await gapi.client.connectors.projects.locations.global.customConnectors.customConnectorVersions.create(
      {
        customConnectorVersionId: 'Test string',
        parent: 'Test string',
      },
      {
        asyncOperationsSupport: true,
        authConfig: {
          additionalVariables: [
            {
              boolValue: true,
              encryptionKeyValue: {
                kmsKeyName: 'Test string',
                type: 'Test string',
              },
              intValue: 'Test string',
              key: 'Test string',
              secretValue: {
                secretVersion: 'Test string',
              },
              stringValue: 'Test string',
            },
          ],
          authKey: 'Test string',
          authType: 'Test string',
          oauth2AuthCodeFlow: {
            authCode: 'Test string',
            authUri: 'Test string',
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
            enablePkce: true,
            pkceVerifier: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2AuthCodeFlowGoogleManaged: {
            authCode: 'Test string',
            redirectUri: 'Test string',
            scopes: ['Test string'],
          },
          oauth2ClientCredentials: {
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
          },
          oauth2JwtBearer: {
            clientKey: {
              secretVersion: 'Test string',
            },
            jwtClaims: {
              audience: 'Test string',
              issuer: 'Test string',
              subject: 'Test string',
            },
          },
          sshPublicKey: {
            certType: 'Test string',
            sshClientCert: {
              secretVersion: 'Test string',
            },
            sshClientCertPass: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
          userPassword: {
            password: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        authConfigTemplates: [
          {
            authKey: 'Test string',
            authType: 'Test string',
            configVariableTemplates: [
              {
                authorizationCodeLink: {
                  clientId: 'Test string',
                  clientSecret: {
                    secretVersion: 'Test string',
                  },
                  enablePkce: true,
                  omitQueryParams: true,
                  scopes: ['Test string'],
                  uri: 'Test string',
                },
                description: 'Test string',
                displayName: 'Test string',
                enumOptions: [
                  {
                    displayName: 'Test string',
                    id: 'Test string',
                  },
                ],
                enumSource: 'Test string',
                isAdvanced: true,
                key: 'Test string',
                locationType: 'Test string',
                multipleSelectConfig: {
                  allowCustomValues: true,
                  multipleSelectOptions: [
                    {
                      description: 'Test string',
                      displayName: 'Test string',
                      key: 'Test string',
                      preselected: true,
                    },
                  ],
                  valueSeparator: 'Test string',
                },
                required: true,
                requiredCondition: {
                  fieldComparisons: [
                    {
                      boolValue: true,
                      comparator: 'Test string',
                      intValue: 'Test string',
                      key: 'Test string',
                      stringValue: 'Test string',
                    },
                  ],
                  logicalExpressions: undefined,
                  logicalOperator: 'Test string',
                },
                roleGrant: {
                  helperTextTemplate: 'Test string',
                  principal: 'Test string',
                  resource: {
                    pathTemplate: 'Test string',
                    type: 'Test string',
                  },
                  roles: ['Test string'],
                },
                state: 'Test string',
                validationRegex: 'Test string',
                valueType: 'Test string',
              },
            ],
            description: 'Test string',
            displayName: 'Test string',
            isDefault: true,
          },
        ],
        authOverrideSupport: true,
        backendVariableTemplates: [
          {
            authorizationCodeLink: {
              clientId: 'Test string',
              clientSecret: {
                secretVersion: 'Test string',
              },
              enablePkce: true,
              omitQueryParams: true,
              scopes: ['Test string'],
              uri: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            enumOptions: [
              {
                displayName: 'Test string',
                id: 'Test string',
              },
            ],
            enumSource: 'Test string',
            isAdvanced: true,
            key: 'Test string',
            locationType: 'Test string',
            multipleSelectConfig: {
              allowCustomValues: true,
              multipleSelectOptions: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  key: 'Test string',
                  preselected: true,
                },
              ],
              valueSeparator: 'Test string',
            },
            required: true,
            requiredCondition: {
              fieldComparisons: [
                {
                  boolValue: true,
                  comparator: 'Test string',
                  intValue: 'Test string',
                  key: 'Test string',
                  stringValue: 'Test string',
                },
              ],
              logicalExpressions: undefined,
              logicalOperator: 'Test string',
            },
            roleGrant: {
              helperTextTemplate: 'Test string',
              principal: 'Test string',
              resource: {
                pathTemplate: 'Test string',
                type: 'Test string',
              },
              roles: ['Test string'],
            },
            state: 'Test string',
            validationRegex: 'Test string',
            valueType: 'Test string',
          },
        ],
        createTime: 'Test string',
        destinationConfigs: [
          {
            destinations: [
              {
                host: 'Test string',
                port: 42,
                serviceAttachment: 'Test string',
              },
            ],
            key: 'Test string',
          },
        ],
        enableBackendDestinationConfig: true,
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        partnerMetadata: {
          acceptGcpTos: true,
          additionalComments: 'Test string',
          confirmPartnerRequirements: true,
          demoUri: 'Test string',
          hasDynamicSpecUri: true,
          integrationTemplates: 'Test string',
          localSpecPath: 'Test string',
          marketplaceProduct: 'Test string',
          marketplaceProductId: 'Test string',
          marketplaceProductProjectId: 'Test string',
          marketplaceProductUri: 'Test string',
          partner: 'Test string',
          partnerConnectorDisplayName: 'Test string',
          publishRequestTime: 'Test string',
          targetApplication: 'Test string',
          targetCustomerSegment: 'Test string',
          useCases: 'Test string',
        },
        publishStatus: {
          publishedAs: 'Test string',
          publishedSource: 'Test string',
          publishState: 'Test string',
          publishTime: 'Test string',
        },
        serviceAccount: 'Test string',
        specLocation: 'Test string',
        specServerUrls: ['Test string'],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets details of a single CustomConnectorVersion. */
    await gapi.client.connectors.projects.locations.global.customConnectors.customConnectorVersions.get(
      {
        name: 'Test string',
      },
    );
    /** List CustomConnectorVersions in a given project */
    await gapi.client.connectors.projects.locations.global.customConnectors.customConnectorVersions.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new ManagedZone in a given project and location. */
    await gapi.client.connectors.projects.locations.global.managedZones.create(
      {
        managedZoneId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        dns: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        targetProject: 'Test string',
        targetVpc: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single ManagedZone. */
    await gapi.client.connectors.projects.locations.global.managedZones.delete({
      name: 'Test string',
    });
    /** Gets details of a single ManagedZone. */
    await gapi.client.connectors.projects.locations.global.managedZones.get({
      name: 'Test string',
    });
    /** List ManagedZones in a given project */
    await gapi.client.connectors.projects.locations.global.managedZones.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      returnPartialSuccess: true,
    });
    /** Updates the parameters of a single ManagedZone. */
    await gapi.client.connectors.projects.locations.global.managedZones.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        dns: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        targetProject: 'Test string',
        targetVpc: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.connectors.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.connectors.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.connectors.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.connectors.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets details of a provider. */
    await gapi.client.connectors.projects.locations.providers.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.connectors.projects.locations.providers.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists Providers in a given project and location. */
    await gapi.client.connectors.projects.locations.providers.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.connectors.projects.locations.providers.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.connectors.projects.locations.providers.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Gets details of a single Connector. */
    await gapi.client.connectors.projects.locations.providers.connectors.get({
      name: 'Test string',
    });
    /** Lists Connectors in a given project and location. */
    await gapi.client.connectors.projects.locations.providers.connectors.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** fetch and return the list of auth config variables required to override the connection backend auth. */
    await gapi.client.connectors.projects.locations.providers.connectors.versions.fetchAuthSchema(
      {
        name: 'Test string',
        view: 'Test string',
      },
    );
    /** Gets details of a single connector version. */
    await gapi.client.connectors.projects.locations.providers.connectors.versions.get(
      {
        name: 'Test string',
        view: 'Test string',
      },
    );
    /** Lists Connector Versions in a given project and location. */
    await gapi.client.connectors.projects.locations.providers.connectors.versions.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      },
    );
    /** Gets details of a single event type. */
    await gapi.client.connectors.projects.locations.providers.connectors.versions.eventtypes.get(
      {
        name: 'Test string',
      },
    );
    /** Lists Event Types in a given Connector Version. */
    await gapi.client.connectors.projects.locations.providers.connectors.versions.eventtypes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
  }
});
