name: Update Node.js and npm versions

on:
  schedule:
    # Run weekly on Saturday at 11:00 AM Sydney time (same as dependabot)
    - cron: '0 1 * * 6'
  workflow_dispatch: # for manual testing

jobs:
  update-nodejs:
    runs-on: ubuntu-latest
    steps:
      # setup
      - uses: actions/checkout@v5

      - name: Check for latest Node.js LTS version
        id: nodejs-version
        run: |
          # Get the latest LTS version of Node.js
          LATEST_LTS=$(curl -s https://nodejs.org/dist/index.json | jq -r '[.[] | select(.lts != false)] | .[0].version' | sed 's/^v//')
          CURRENT_VERSION=$(cat .nvmrc)
          
          echo "latest_lts=$LATEST_LTS" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "needs_update=$(if [ "$LATEST_LTS" != "$CURRENT_VERSION" ]; then echo "true"; else echo "false"; fi)" >> $GITHUB_OUTPUT
          
          echo "Current Node.js version: $CURRENT_VERSION"
          echo "Latest LTS Node.js version: $LATEST_LTS"

      - name: Setup Node.js with latest LTS
        if: steps.nodejs-version.outputs.needs_update == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nodejs-version.outputs.latest_lts }}
          cache: 'npm'

      - name: Get npm version
        if: steps.nodejs-version.outputs.needs_update == 'true'
        id: npm-version
        run: |
          NPM_VERSION=$(npm --version)
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          echo "npm version with Node.js ${{ steps.nodejs-version.outputs.latest_lts }}: $NPM_VERSION"

      - uses: tibdex/github-app-token@v2 # cspell:words tibdex
        if: steps.nodejs-version.outputs.needs_update == 'true'
        id: generate-token
        with:
          app_id: ${{ secrets.CREATE_PR_APP_ID }}
          private_key: ${{ secrets.CREATE_PR_APP_PRIVATE_KEY }}

      # make changes
      - name: Update version files
        if: steps.nodejs-version.outputs.needs_update == 'true'
        run: |
          # Update .nvmrc
          echo "${{ steps.nodejs-version.outputs.latest_lts }}" > .nvmrc
          
          # Update package.json engines
          npm pkg set engines.node="${{ steps.nodejs-version.outputs.latest_lts }}"
          npm pkg set engines.npm="${{ steps.npm-version.outputs.npm_version }}"
          
          # Update package-lock.json by running npm install
          npm install --package-lock-only

      # create PR
      - name: Create PR
        if: steps.nodejs-version.outputs.needs_update == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          title: 'chore: update Node.js to ${{ steps.nodejs-version.outputs.latest_lts }} and npm to ${{ steps.npm-version.outputs.npm_version }}'
          body: |
            Updates Node.js from ${{ steps.nodejs-version.outputs.current_version }} to ${{ steps.nodejs-version.outputs.latest_lts }} (latest LTS) and npm to ${{ steps.npm-version.outputs.npm_version }}.
            
            This PR updates:
            - `.nvmrc`
            - `package.json` engines section
            - `package-lock.json`
            
            The versions are kept in sync to maintain consistency across all configuration files.
          branch: 'create-pull-request/chore-nodejs-update'
          commit-message: 'chore: update Node.js to ${{ steps.nodejs-version.outputs.latest_lts }} and npm to ${{ steps.npm-version.outputs.npm_version }}'