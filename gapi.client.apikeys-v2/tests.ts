/* This is stub file for gapi.client.apikeys-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230418

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://apikeys.googleapis.com/$discovery/rest?version=v2');
    /** now we can use gapi.client.apikeys */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Find the parent project and resource name of the API key that matches the key string in the request. If the API key has been purged, resource name will not be set. The service account
         * must have the `apikeys.keys.lookup` permission on the parent project.
         */
        await gapi.client.apikeys.keys.lookupKey({
            keyString: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.apikeys.operations.get({
            name: "Test string",
        });
        /** Creates a new API key. NOTE: Key is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.apikeys.projects.locations.keys.create({
            keyId: "Test string",
            parent: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            createTime: "Test string",
            deleteTime: "Test string",
            displayName: "Test string",
            etag: "Test string",
            keyString: "Test string",
            name: "Test string",
            restrictions: {
                androidKeyRestrictions: {
                    allowedApplications: [
                        {
                            packageName: "Test string",
                            sha1Fingerprint: "Test string",
                        }
                    ],
                },
                apiTargets: [
                    {
                        methods: [
                            "Test string"
                        ],
                        service: "Test string",
                    }
                ],
                browserKeyRestrictions: {
                    allowedReferrers: [
                        "Test string"
                    ],
                },
                iosKeyRestrictions: {
                    allowedBundleIds: [
                        "Test string"
                    ],
                },
                serverKeyRestrictions: {
                    allowedIps: [
                        "Test string"
                    ],
                },
            },
            uid: "Test string",
            updateTime: "Test string",
        });
        /**
         * Deletes an API key. Deleted key can be retrieved within 30 days of deletion. Afterward, key will be purged from the project. NOTE: Key is a global resource; hence the only supported
         * value for location is `global`.
         */
        await gapi.client.apikeys.projects.locations.keys.delete({
            etag: "Test string",
            name: "Test string",
        });
        /** Gets the metadata for an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.apikeys.projects.locations.keys.get({
            name: "Test string",
        });
        /** Get the key string for an API key. NOTE: Key is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.apikeys.projects.locations.keys.getKeyString({
            name: "Test string",
        });
        /**
         * Lists the API keys owned by a project. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is
         * `global`.
         */
        await gapi.client.apikeys.projects.locations.keys.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
        });
        /**
         * Patches the modifiable fields of an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is
         * `global`.
         */
        await gapi.client.apikeys.projects.locations.keys.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            annotations: {
                A: "Test string"
            },
            createTime: "Test string",
            deleteTime: "Test string",
            displayName: "Test string",
            etag: "Test string",
            keyString: "Test string",
            name: "Test string",
            restrictions: {
                androidKeyRestrictions: {
                    allowedApplications: [
                        {
                            packageName: "Test string",
                            sha1Fingerprint: "Test string",
                        }
                    ],
                },
                apiTargets: [
                    {
                        methods: [
                            "Test string"
                        ],
                        service: "Test string",
                    }
                ],
                browserKeyRestrictions: {
                    allowedReferrers: [
                        "Test string"
                    ],
                },
                iosKeyRestrictions: {
                    allowedBundleIds: [
                        "Test string"
                    ],
                },
                serverKeyRestrictions: {
                    allowedIps: [
                        "Test string"
                    ],
                },
            },
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes an API key which was deleted within 30 days. NOTE: Key is a global resource; hence the only supported value for location is `global`. */
        await gapi.client.apikeys.projects.locations.keys.undelete({
            name: "Test string",
        }, {
        });
    }
});
