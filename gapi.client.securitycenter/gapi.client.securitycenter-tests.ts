/* This is stub file for gapi.client.securitycenter definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20210913

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('securitycenter', 'v1', () => {
        /** now we can use gapi.client.securitycenter */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
            'https://www.googleapis.com/auth/cloud-platform',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Gets the settings for an organization. */
        await gapi.client.securitycenter.organizations.getOrganizationSettings({
            name: "Test string",
        });
        /** Filters an organization's assets and groups them by their specified properties. */
        await gapi.client.securitycenter.organizations.assets.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization's assets. */
        await gapi.client.securitycenter.organizations.assets.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /**
         * Runs asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the
         * caller will receive a TOO_MANY_REQUESTS error.
         */
        await gapi.client.securitycenter.organizations.assets.runDiscovery({
            parent: "Test string",
        }, {
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.assets.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Creates a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.create({
            configId: "Test string",
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Deletes a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.delete({
            name: "Test string",
        });
        /** Gets a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.get({
            name: "Test string",
        });
        /** Lists notification configs. */
        await gapi.client.securitycenter.organizations.notificationConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
        await gapi.client.securitycenter.organizations.notificationConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.securitycenter.organizations.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.securitycenter.organizations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.securitycenter.organizations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‚Äç/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.securitycenter.organizations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a source. */
        await gapi.client.securitycenter.organizations.sources.create({
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Gets a source. */
        await gapi.client.securitycenter.organizations.sources.get({
            name: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Gets the access control policy on the specified Source. */
        await gapi.client.securitycenter.organizations.sources.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Lists all sources belonging to an organization. */
        await gapi.client.securitycenter.organizations.sources.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Updates a source. */
        await gapi.client.securitycenter.organizations.sources.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Sets the access control policy on the specified Source. */
        await gapi.client.securitycenter.organizations.sources.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Returns the permissions that a caller has on the specified source. */
        await gapi.client.securitycenter.organizations.sources.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Updates an organization's settings. */
        await gapi.client.securitycenter.organizations.updateOrganizationSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            assetDiscoveryConfig: {
                folderIds: [
                    "Test string"                ],
                inclusionMode: "Test string",
                projectIds: [
                    "Test string"                ],
            },
            enableAssetDiscovery: true,
            name: "Test string",
        });
        /** Filters an organization's assets and groups them by their specified properties. */
        await gapi.client.securitycenter.organizations.assets.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization's assets. */
        await gapi.client.securitycenter.organizations.assets.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /**
         * Runs asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the
         * caller will receive a TOO_MANY_REQUESTS error.
         */
        await gapi.client.securitycenter.organizations.assets.runDiscovery({
            parent: "Test string",
        }, {
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.assets.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Creates a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.create({
            configId: "Test string",
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Deletes a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.delete({
            name: "Test string",
        });
        /** Gets a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.get({
            name: "Test string",
        });
        /** Lists notification configs. */
        await gapi.client.securitycenter.organizations.notificationConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
        await gapi.client.securitycenter.organizations.notificationConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.securitycenter.organizations.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.securitycenter.organizations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.securitycenter.organizations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‚Äç/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.securitycenter.organizations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a source. */
        await gapi.client.securitycenter.organizations.sources.create({
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Gets a source. */
        await gapi.client.securitycenter.organizations.sources.get({
            name: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Gets the access control policy on the specified Source. */
        await gapi.client.securitycenter.organizations.sources.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Lists all sources belonging to an organization. */
        await gapi.client.securitycenter.organizations.sources.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Updates a source. */
        await gapi.client.securitycenter.organizations.sources.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Sets the access control policy on the specified Source. */
        await gapi.client.securitycenter.organizations.sources.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
        /** Returns the permissions that a caller has on the specified source. */
        await gapi.client.securitycenter.organizations.sources.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            category: "Test string",
            createTime: "Test string",
            eventTime: "Test string",
            externalUri: "Test string",
            findingClass: "Test string",
            indicator: {
                domains: [
                    "Test string"                ],
                ipAddresses: [
                    "Test string"                ],
            },
            name: "Test string",
            parent: "Test string",
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }                    ],
                },
            },
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"            },
            name: "Test string",
        });
    }
});
