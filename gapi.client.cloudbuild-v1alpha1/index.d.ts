/* Type definitions for non-npm package Cloud Build API v1alpha1 0.0 */
// Project: https://cloud.google.com/cloud-build/docs/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://cloudbuild.googleapis.com/$discovery/rest?version=v1alpha1
// Revision: 20220916

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Build API v1alpha1 */
    function load(urlOrObject: "https://cloudbuild.googleapis.com/$discovery/rest?version=v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "cloudbuild", version: "v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "cloudbuild", version: "v1alpha1", callback: () => any): void;

    namespace cloudbuild {
        interface ApprovalConfig {
            /** Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. */
            approvalRequired?: boolean;
        }
        interface ApprovalResult {
            /** Output only. The time when the approval decision was made. */
            approvalTime?: string;
            /** Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. */
            approverAccount?: string;
            /** Optional. An optional comment for this manual approval result. */
            comment?: string;
            /** Required. The decision of this manual approval. */
            decision?: string;
            /**
             * Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use
             * case is a link to an external job that approved this Build.
             */
            url?: string;
        }
        interface ArtifactObjects {
            /**
             * Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name
             * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this
             * location as a prefix.
             */
            location?: string;
            /** Path globs used to match files in the build's workspace. */
            paths?: string[];
            /** Output only. Stores timing information for pushing all artifact objects. */
            timing?: TimeSpan;
        }
        interface ArtifactResult {
            /** The file hash of the artifact. */
            fileHash?: FileHashes[];
            /** The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`. */
            location?: string;
        }
        interface Artifacts {
            /**
             * A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed
             * images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
             */
            images?: string[];
            /**
             * A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the
             * specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results
             * field. If any objects fail to be pushed, the build is marked FAILURE.
             */
            objects?: ArtifactObjects;
        }
        interface BatchCreateBitbucketServerConnectedRepositoriesResponse {
            /** The connected Bitbucket Server repositories. */
            bitbucketServerConnectedRepositories?: BitbucketServerConnectedRepository[];
        }
        interface BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}` */
            config?: string;
            /** Time the operation was created. */
            createTime?: string;
        }
        interface BatchCreateGitLabConnectedRepositoriesResponse {
            /** The GitLab connected repository requests' responses. */
            gitlabConnectedRepositories?: GitLabConnectedRepository[];
        }
        interface BatchCreateGitLabConnectedRepositoriesResponseMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}` */
            config?: string;
            /** Time the operation was created. */
            createTime?: string;
        }
        interface BitbucketServerConnectedRepository {
            /** The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}` */
            parent?: string;
            /** The Bitbucket Server repositories to connect. */
            repo?: BitbucketServerRepositoryId;
            /** Output only. The status of the repo connection request. */
            status?: Status;
        }
        interface BitbucketServerRepositoryId {
            /** Required. Identifier for the project storing the repository. */
            projectKey?: string;
            /** Required. Identifier for the repository. */
            repoSlug?: string;
            /** Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo. */
            webhookId?: number;
        }
        interface Build {
            /** Output only. Describes this build's approval configuration, status, and result. */
            approval?: BuildApproval;
            /** Artifacts produced by the build that should be uploaded upon successful completion of all build steps. */
            artifacts?: Artifacts;
            /** Secrets and secret environment variables. */
            availableSecrets?: Secrets;
            /** Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically. */
            buildTriggerId?: string;
            /** Output only. Time at which the request to create the build was received. */
            createTime?: string;
            /** Output only. Contains information about the build when status=FAILURE. */
            failureInfo?: FailureInfo;
            /** Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. */
            finishTime?: string;
            /** Output only. Unique identifier of the build. */
            id?: string;
            /**
             * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed
             * images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
             */
            images?: string[];
            /**
             * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be
             * of the format `${logs_bucket}/log-${build_id}.txt`.
             */
            logsBucket?: string;
            /** Output only. URL to logs for this build in Google Cloud Console. */
            logUrl?: string;
            /** Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service. */
            name?: string;
            /** Special options for this build. */
            options?: BuildOptions;
            /** Output only. ID of the project. */
            projectId?: string;
            /**
             * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from
             * create_time.
             */
            queueTtl?: string;
            /** Output only. Results of the build. */
            results?: Results;
            /**
             * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to
             * configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
             */
            secrets?: Secret[];
            /**
             * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or
             * uniqueId of the service account.
             */
            serviceAccount?: string;
            /** The location of the source files to build. */
            source?: Source;
            /** Output only. A permanent fixed identifier for source. */
            sourceProvenance?: SourceProvenance;
            /** Output only. Time at which execution of the build was started. */
            startTime?: string;
            /** Output only. Status of the build. */
            status?: string;
            /** Output only. Customer-readable message about the current status. */
            statusDetail?: string;
            /** Required. The operations to be performed on the workspace. */
            steps?: BuildStep[];
            /** Substitutions data for `Build` resource. */
            substitutions?: { [P in string]: string };
            /** Tags for annotation of a `Build`. These are not docker tags. */
            tags?: string[];
            /**
             * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`.
             * `timeout` starts ticking from `startTime`. Default time is ten minutes.
             */
            timeout?: string;
            /**
             * Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE:
             * time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
             */
            timing?: { [P in string]: TimeSpan };
            /** Output only. Non-fatal problems encountered during the execution of the build. */
            warnings?: Warning[];
        }
        interface BuildApproval {
            /** Output only. Configuration for manual approval of this build. */
            config?: ApprovalConfig;
            /** Output only. Result of manual approval for this Build. */
            result?: ApprovalResult;
            /** Output only. The state of this build's approval. */
            state?: string;
        }
        interface BuildOperationMetadata {
            /** The build that the operation is tracking. */
            build?: Build;
        }
        interface BuildOptions {
            /**
             * Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that
             * this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that
             * request more than the maximum are rejected with an error.
             */
            diskSizeGb?: string;
            /**
             * Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build
             * configuration file.
             */
            dynamicSubstitutions?: boolean;
            /**
             * A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will
             * use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
             */
            env?: string[];
            /** Option to specify the logging mode, which determines if and where build logs are stored. */
            logging?: string;
            /** Option to define build log streaming behavior to Google Cloud Storage. */
            logStreamingOption?: string;
            /** Compute Engine machine type on which to run the build. */
            machineType?: string;
            /**
             * Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for
             * more information.
             */
            pool?: PoolOption;
            /** Requested verifiability options. */
            requestedVerifyOption?: string;
            /**
             * A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables
             * will be available to all build steps in this build.
             */
            secretEnv?: string[];
            /** Requested hash for SourceProvenance. */
            sourceProvenanceHash?: string[];
            /**
             * Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build
             * configuration file.
             */
            substitutionOption?: string;
            /**
             * Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their
             * contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it
             * is indicative of a build request with an incorrect configuration.
             */
            volumes?: Volume[];
            /** This field deprecated; please use `pool.name` instead. */
            workerPool?: string;
        }
        interface BuildStep {
            /**
             * Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take
             * precedence.
             */
            allowExitCodes?: number[];
            /**
             * Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still
             * have a failure status. Error information will be reported in the failure_detail field.
             */
            allowFailure?: boolean;
            /**
             * A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that
             * entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
             */
            args?: string[];
            /**
             * Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be
             * outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the
             * build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
             */
            dir?: string;
            /** Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used. */
            entrypoint?: string;
            /** A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
            env?: string[];
            /** Output only. Return code from running the step. */
            exitCode?: number;
            /** Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency. */
            id?: string;
            /**
             * Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not,
             * the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all
             * of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also
             * have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous
             * build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
             */
            name?: string;
            /** Output only. Stores timing information for pulling this build step's builder image only. */
            pullTiming?: TimeSpan;
            /** A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args. */
            script?: string;
            /** A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. */
            secretEnv?: string[];
            /** Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses. */
            status?: string;
            /** Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out. */
            timeout?: string;
            /** Output only. Stores timing information for executing this build step. */
            timing?: TimeSpan;
            /**
             * List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their
             * contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
             */
            volumes?: Volume[];
            /**
             * The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty,
             * this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
             */
            waitFor?: string[];
        }
        interface BuiltImage {
            /** Docker Registry 2.0 digest. */
            digest?: string;
            /** Name used to push the container image to Google Container Registry, as presented to `docker push`. */
            name?: string;
            /** Output only. Stores timing information for pushing the specified image. */
            pushTiming?: TimeSpan;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface CreateBitbucketServerConfigOperationMetadata {
            /** The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`. */
            bitbucketServerConfig?: string;
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
        }
        interface CreateGitHubEnterpriseConfigOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. */
            githubEnterpriseConfig?: string;
        }
        interface CreateGitLabConfigOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`. */
            gitlabConfig?: string;
        }
        interface CreateWorkerPoolOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`. */
            workerPool?: string;
        }
        interface DeleteBitbucketServerConfigOperationMetadata {
            /** The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`. */
            bitbucketServerConfig?: string;
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
        }
        interface DeleteGitHubEnterpriseConfigOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. */
            githubEnterpriseConfig?: string;
        }
        interface DeleteGitLabConfigOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`. */
            gitlabConfig?: string;
        }
        interface DeleteWorkerPoolOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`. */
            workerPool?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FailureInfo {
            /** Explains the failure issue in more detail using hard-coded text. */
            detail?: string;
            /** The name of the failure. */
            type?: string;
        }
        interface FileHashes {
            /** Collection of file hashes. */
            fileHash?: Hash[];
        }
        interface GitLabConnectedRepository {
            /** The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}` */
            parent?: string;
            /** The GitLab repositories to connect. */
            repo?: GitLabRepositoryId;
            /** Output only. The status of the repo connection request. */
            status?: Status;
        }
        interface GitLabRepositoryId {
            /** Required. Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID */
            id?: string;
            /** Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo. */
            webhookId?: number;
        }
        interface GoogleDevtoolsCloudbuildV2OperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?: string;
            /** Output only. The time the operation was created. */
            createTime?: string;
            /** Output only. The time the operation finished running. */
            endTime?: string;
            /**
             * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            requestedCancellation?: boolean;
            /** Output only. Human-readable status of the operation, if any. */
            statusMessage?: string;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?: string;
            /** Output only. Name of the verb executed by the operation. */
            verb?: string;
        }
        interface Hash {
            /** The type of hash that was performed. */
            type?: string;
            /** The hash value. */
            value?: string;
        }
        interface HTTPDelivery {
            /** The URI to which JSON-containing HTTP POST requests should be sent. */
            uri?: string;
        }
        interface InlineSecret {
            /**
             * Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
             * Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
             */
            envMap?: { [P in string]: string };
            /** Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*‍/locations/*‍/keyRings/*‍/cryptoKeys/* */
            kmsKeyName?: string;
        }
        interface ListWorkerPoolsResponse {
            /** `WorkerPools` for the project. */
            workerPools?: WorkerPool[];
        }
        interface Network {
            /** Network on which the workers are created. "default" network is used if empty. */
            network?: string;
            /**
             * Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be
             * the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
             */
            projectId?: string;
            /** Subnetwork on which the workers are created. "default" subnetwork is used if empty. */
            subnetwork?: string;
        }
        interface Notification {
            /** The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more. */
            filter?: string;
            /** Configuration for HTTP delivery. */
            httpDelivery?: HTTPDelivery;
            /** Configuration for Slack delivery. */
            slackDelivery?: SlackDelivery;
            /** Configuration for SMTP (email) delivery. */
            smtpDelivery?: SMTPDelivery;
            /** Escape hatch for users to supply custom delivery configs. */
            structDelivery?: { [P in string]: any };
        }
        interface NotifierConfig {
            /** The API version of this configuration format. */
            apiVersion?: string;
            /** The type of notifier to use (e.g. SMTPNotifier). */
            kind?: string;
            /** Metadata for referring to/handling/deploying this notifier. */
            metadata?: NotifierMetadata;
            /** The actual configuration for this notifier. */
            spec?: NotifierSpec;
        }
        interface NotifierMetadata {
            /** The human-readable and user-given name for the notifier. For example: "repo-merge-email-notifier". */
            name?: string;
            /** The string representing the name and version of notifier to deploy. Expected to be of the form of "/:". For example: "gcr.io/my-project/notifiers/smtp:1.2.34". */
            notifier?: string;
        }
        interface NotifierSecret {
            /** Name is the local name of the secret, such as the verbatim string "my-smtp-password". */
            name?: string;
            /**
             * Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version
             * resource path like: "projects/my-project/secrets/my-secret/versions/latest".
             */
            value?: string;
        }
        interface NotifierSecretRef {
            /** The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`. */
            secretRef?: string;
        }
        interface NotifierSpec {
            /** The configuration of this particular notifier. */
            notification?: Notification;
            /** Configurations for secret resources used by this particular notifier. */
            secrets?: NotifierSecret[];
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface OperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?: string;
            /**
             * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancelRequested?: boolean;
            /** Output only. The time the operation was created. */
            createTime?: string;
            /** Output only. The time the operation finished running. */
            endTime?: string;
            /** Output only. Human-readable status of the operation, if any. */
            statusDetail?: string;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?: string;
            /** Output only. Name of the verb executed by the operation. */
            verb?: string;
        }
        interface PoolOption {
            /**
             * The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format
             * projects/{project}/locations/{location}/workerPools/{workerPoolId}
             */
            name?: string;
        }
        interface ProcessAppManifestCallbackOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. */
            githubEnterpriseConfig?: string;
        }
        interface RepoSource {
            /** Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
            branchName?: string;
            /** Explicit commit SHA to build. */
            commitSha?: string;
            /**
             * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for
             * that step's execution.
             */
            dir?: string;
            /** Only trigger a build if the revision regex does NOT match the revision regex. */
            invertRegex?: boolean;
            /** ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. */
            projectId?: string;
            /** Name of the Cloud Source Repository. */
            repoName?: string;
            /** Substitutions to use in a triggered build. Should only be used with RunBuildTrigger */
            substitutions?: { [P in string]: string };
            /** Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
            tagName?: string;
        }
        interface Results {
            /** Path to the artifact manifest. Only populated when artifacts are uploaded. */
            artifactManifest?: string;
            /** Time to push all non-container artifacts. */
            artifactTiming?: TimeSpan;
            /** List of build step digests, in the order corresponding to build step indices. */
            buildStepImages?: string[];
            /**
             * List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
             * can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
             */
            buildStepOutputs?: string[];
            /** Container images that were built as a part of the build. */
            images?: BuiltImage[];
            /** Number of artifacts uploaded. Only populated when artifacts are uploaded. */
            numArtifacts?: string;
        }
        interface RunWorkflowCustomOperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?: string;
            /** Output only. The time the operation was created. */
            createTime?: string;
            /** Output only. The time the operation finished running. */
            endTime?: string;
            /** Output only. ID of the pipeline run created by RunWorkflow. */
            pipelineRunId?: string;
            /**
             * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            requestedCancellation?: boolean;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?: string;
            /** Output only. Name of the verb executed by the operation. */
            verb?: string;
        }
        interface Secret {
            /** Cloud KMS key name to use to decrypt these envs. */
            kmsKeyName?: string;
            /**
             * Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
             * Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
             */
            secretEnv?: { [P in string]: string };
        }
        interface SecretManagerSecret {
            /** Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. */
            env?: string;
            /** Resource name of the SecretVersion. In format: projects/*‍/secrets/*‍/versions/* */
            versionName?: string;
        }
        interface Secrets {
            /** Secrets encrypted with KMS key and the associated secret environment variable. */
            inline?: InlineSecret[];
            /** Secrets in Secret Manager and associated secret environment variable. */
            secretManager?: SecretManagerSecret[];
        }
        interface SlackDelivery {
            /** The secret reference for the Slack webhook URI for sending messages to a channel. */
            webhookUri?: NotifierSecretRef;
        }
        interface SMTPDelivery {
            /** This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender. */
            fromAddress?: string;
            /** The SMTP sender's password. */
            password?: NotifierSecretRef;
            /** The SMTP port of the server. */
            port?: string;
            /** This is the list of addresses to which we send the email (i.e. in the `To:` of the email). */
            recipientAddresses?: string[];
            /** This is the SMTP account/email that is used to send the message. */
            senderAddress?: string;
            /** The address of the SMTP server. */
            server?: string;
        }
        interface Source {
            /** If provided, get the source from this location in a Cloud Source Repository. */
            repoSource?: RepoSource;
            /** If provided, get the source from this location in Google Cloud Storage. */
            storageSource?: StorageSource;
            /**
             * If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description
             * [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
             */
            storageSourceManifest?: StorageSourceManifest;
        }
        interface SourceProvenance {
            /**
             * Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated
             * if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the
             * build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
             */
            fileHashes?: { [P in string]: FileHashes };
            /** A copy of the build's `source.repo_source`, if exists, with any revisions resolved. */
            resolvedRepoSource?: RepoSource;
            /** A copy of the build's `source.storage_source`, if exists, with any generations resolved. */
            resolvedStorageSource?: StorageSource;
            /** A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview. */
            resolvedStorageSourceManifest?: StorageSourceManifest;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface StorageSource {
            /** Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
            bucket?: string;
            /** Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
            generation?: string;
            /** Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build. */
            object?: string;
        }
        interface StorageSourceManifest {
            /** Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
            bucket?: string;
            /** Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
            generation?: string;
            /** Google Cloud Storage object containing the source manifest. This object must be a JSON file. */
            object?: string;
        }
        interface TimeSpan {
            /** End of time span. */
            endTime?: string;
            /** Start of time span. */
            startTime?: string;
        }
        interface UpdateBitbucketServerConfigOperationMetadata {
            /** The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`. */
            bitbucketServerConfig?: string;
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
        }
        interface UpdateGitHubEnterpriseConfigOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. */
            githubEnterpriseConfig?: string;
        }
        interface UpdateGitLabConfigOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`. */
            gitlabConfig?: string;
        }
        interface UpdateWorkerPoolOperationMetadata {
            /** Time the operation was completed. */
            completeTime?: string;
            /** Time the operation was created. */
            createTime?: string;
            /** The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`. */
            workerPool?: string;
        }
        interface Volume {
            /** Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps. */
            name?: string;
            /** Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths. */
            path?: string;
        }
        interface Warning {
            /** The priority for this warning. */
            priority?: string;
            /** Explanation of the warning generated. */
            text?: string;
        }
        interface WorkerConfig {
            /**
             * Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is
             * overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For
             * more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
             */
            diskSizeGb?: string;
            /**
             * Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to
             * create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be
             * created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
             */
            machineType?: string;
            /** The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network. */
            network?: Network;
            /** The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`. */
            tag?: string;
        }
        interface WorkerPool {
            /** Output only. Time at which the request to create the `WorkerPool` was received. */
            createTime?: string;
            /** Output only. Time at which the request to delete the `WorkerPool` was received. */
            deleteTime?: string;
            /** User-defined name of the `WorkerPool`. */
            name?: string;
            /** The project ID of the GCP project for which the `WorkerPool` is created. */
            projectId?: string;
            /**
             * List of regions to create the `WorkerPool`. Regions can't be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new
             * region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.
             */
            regions?: string[];
            /** Output only. The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level. */
            serviceAccountEmail?: string;
            /** Output only. WorkerPool Status. */
            status?: string;
            /** Output only. Time at which the request to update the `WorkerPool` was received. */
            updateTime?: string;
            /** Configuration to be used for a creating workers in the `WorkerPool`. */
            workerConfig?: WorkerConfig;
            /** Total number of workers to be created across all requested regions. */
            workerCount?: string;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelOperationRequest): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface LocationsResource {
            operations: OperationsResource;
        }
        interface WorkerPoolsResource {
            /** Creates a `WorkerPool` to run the builds, and returns the new worker pool. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** ID of the parent project. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: WorkerPool;
            }): Request<WorkerPool>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** ID of the parent project. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: WorkerPool): Request<WorkerPool>;
            /** Deletes a `WorkerPool` by its project ID and WorkerPool name. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The field will contain name of the resource requested, for example: "projects/project-1/workerPools/workerpool-name" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns information about a `WorkerPool`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The field will contain name of the resource requested, for example: "projects/project-1/workerPools/workerpool-name" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<WorkerPool>;
            /** List project's `WorkerPool`s. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** ID of the parent project. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListWorkerPoolsResponse>;
            /** Update a `WorkerPool`. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The field will contain name of the resource requested, for example: "projects/project-1/workerPools/workerpool-name" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: WorkerPool;
            }): Request<WorkerPool>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The field will contain name of the resource requested, for example: "projects/project-1/workerPools/workerpool-name" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: WorkerPool): Request<WorkerPool>;
        }
        interface ProjectsResource {
            locations: LocationsResource;
            workerPools: WorkerPoolsResource;
        }

        const projects: ProjectsResource;
    }
}
